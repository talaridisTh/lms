/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 32);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanM/YTM0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQywwRUFBcUIiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./resources/js/index/discussions/discussions.js":
/*!*******************************************************!*\
  !*** ./resources/js/index/discussions/discussions.js ***!
  \*******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
<<<<<<< HEAD
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//pagination event\n$(document).on(\"click\", \".pagination a\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(e) {\n    var href, option, _yield$axios$get, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            href = this.href;\n            option = $(\".filter-sidebar\")[0].options[$(\".filter-sidebar\")[0].selectedIndex].value;\n            _context.next = 5;\n            return axios.get(href, {\n              params: {\n                option: option\n              },\n              headers: {\n                'Access-Control-Allow-Origin': '*'\n              }\n            });\n\n          case 5:\n            _yield$axios$get = _context.sent;\n            data = _yield$axios$get.data;\n            status = _yield$axios$get.status;\n\n            if (status == 200) {\n              $(\".cnt-threads-main-list\").html($(data).find(\".threads-main-list\"));\n              onHideBody();\n            }\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\n$(\".first-thread\").hide();\n\nvar eventTopBar = function eventTopBar() {\n  $(\".discussions-right\").on(\"change\", \".filter-sidebar\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {\n    var course, option, filterName, _yield$axios$get2, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            course = $(\".filter-course\")[0].options[$(\".filter-course\")[0].selectedIndex].value;\n            option = $(\".filter-sidebar\")[0].options[$(\".filter-sidebar\")[0].selectedIndex].value;\n            filterName = $(\".active-thread\").attr('id').replace(\"filter-\", \"\");\n            filterName = filterName == \"all-threads\" ? \"\" : filterName;\n            _context2.next = 6;\n            return axios.get(\"/discussion/\".concat(filterName), {\n              params: {\n                option: option,\n                course: course\n              }\n            });\n\n          case 6:\n            _yield$axios$get2 = _context2.sent;\n            data = _yield$axios$get2.data;\n            status = _yield$axios$get2.status;\n\n            if (status == 200) {\n              $(\".cnt-threads-main-list\").html($(data).find(\".threads-main-list\"));\n              onHideBody();\n            }\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }))); //todo den doulevi\n\n  $(\".discussions-right\").on(\"change\", \".filter-course\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3() {\n    var course, option, _yield$axios$get3, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            course = $(\".filter-course\")[0].options[$(\".filter-course\")[0].selectedIndex].value;\n            option = $(\".filter-sidebar\")[0].options[$(\".filter-sidebar\")[0].selectedIndex].value;\n            _context3.next = 4;\n            return axios.get(\"/discussion/change/filter-course\", {\n              params: {\n                option: option,\n                course: course\n              }\n            });\n\n          case 4:\n            _yield$axios$get3 = _context3.sent;\n            data = _yield$axios$get3.data;\n            status = _yield$axios$get3.status;\n\n            if (status == 200) {\n              $(\".cnt-threads-main-list\").html($(data).find(\".threads-main-list\"));\n              onHideBody();\n            }\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }))); // filter show body\n\n  $(\".discussions-right\").on(\"click\", \".js-show-body\", function () {\n    onShowBody();\n    $(\".js-post-body\").each(function (idx, el) {\n      el.classList.remove(\"d-none\");\n    });\n  });\n  $(\".discussions-right\").on(\"click\", \".js-hidden-body\", function () {\n    onHideBody();\n    $(\".js-post-body\").each(function (idx, el) {\n      el.classList.add(\"d-none\");\n    });\n  });\n};\n\neventTopBar(); // Evenet listener show body\n\nvar onHideBody = function onHideBody() {\n  $(\".js-hidden-body\")[0].classList.add(\"js-body-active\");\n  $(\".js-show-body\")[0].classList.remove(\"js-body-active\");\n};\n\nvar onShowBody = function onShowBody() {\n  $(\".js-show-body\")[0].classList.add(\"js-body-active\");\n  $(\".js-hidden-body\")[0].classList.remove(\"js-body-active\");\n}; // Evenet change first button\n\n\nvar onChangeFirstButtonNew = function onChangeFirstButtonNew() {\n  var firstBtn = $(\".first-thread\");\n  firstBtn[0].innerHTML = \"\\u0391\\u03A0\\u0391\\u039D\\u03A4\\u0397\\u03A3\\u0397\";\n  firstBtn[0].dataset.target = \"#new-reply\";\n  firstBtn[0].classList.add(\"first-thread-replay\");\n  firstBtn[0].classList.remove(\"first-thread\");\n  onFirstReplayBtnEvent();\n};\n\nvar onChangeFirstButtonReplay = function onChangeFirstButtonReplay() {\n  if ($(\".first-thread-replay\").length) {\n    var firstBtn = $(\".first-thread-replay\");\n    firstBtn[0].innerHTML = \"NEO POST\";\n    firstBtn[0].dataset.target = \"#new-threads\";\n    firstBtn[0].classList.remove(\"first-thread-replay\");\n    firstBtn[0].classList.add(\"first-thread\");\n    firstBtn[0].disabled = false; //new na ta tsekarw!\n\n    firstBtn[0].classList.remove(\"bg-danger\");\n    $(\".ul-thread\").find(\".first-thread\").unbind('mouseover').unbind('mouseout');\n  }\n}; //update main page reload\n\n\nvar axiosUpdateMain = function axiosUpdateMain(that, data) {\n  $(\".ul-thread .bg-thread\").removeClass(\"active-thread\");\n  $(that).addClass(\"active-thread\");\n  $(\".discussions-right\").html($(data).find(\".discussions-right> *\"));\n  onHideBody();\n  onChangeFirstButtonReplay();\n  $(\".first-thread\").hide();\n}; // submit create form\n\n\n$(\".js-form-create\").on(\"click\", /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4(e) {\n    var title, course, _yield$axios$post, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            e.preventDefault();\n            title = $('input#post-title').val();\n            course = $('#post-course').val();\n            this.disabled = true;\n\n            if (title) {\n              _context4.next = 7;\n              break;\n            }\n\n            if (!$(\".validate-form-post-body\").length) {\n              $('#new-threads').modal('show');\n              $(\"<p class='text-danger mt-2 validate-form-post-body'>*Συμπληρώστε όλα τα παιδιά</p>\").insertAfter(\"#post-body\");\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 7:\n            _context4.prev = 7;\n            _context4.next = 10;\n            return axios.post(\"/discussion/post/store-thread\", {\n              title: title,\n              course: course\n            });\n\n          case 10:\n            _yield$axios$post = _context4.sent;\n            data = _yield$axios$post.data;\n            status = _yield$axios$post.status;\n\n            if (status == 200) {\n              $(\".discussions-right\").html($(data).find(\".discussions-right> *\"));\n              onHideBody();\n              $('#new-threads').modal('hide');\n              $('#form-create-thread')[0].reset();\n              this.disabled = false;\n            }\n\n            _context4.next = 19;\n            break;\n\n          case 16:\n            _context4.prev = 16;\n            _context4.t0 = _context4[\"catch\"](7);\n            console.log(_context4.t0);\n\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[7, 16]]);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}()); // submit reply form\n\n$(\".js-form-reply\").on(\"click\", /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(e) {\n    var body, postId, parentId, _yield$axios$post2, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            e.preventDefault();\n            body = $('textarea#reply-body').val();\n\n            if (body) {\n              _context5.next = 7;\n              break;\n            }\n\n            if (!$(\".validate-form-post\").length) {\n              $('#new-reply').modal('show');\n              $(\"<p class='text-danger mt-2 validate-form-post'>*Tο πεδίο είναι απαραίτητο</p>\").insertAfter(\"#reply-body\");\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 7:\n            body = \"<span class=\\\"text-info\\\">\".concat($(\".replay-name\").text(), \"</span> \").concat(body);\n\n          case 8:\n            postId = this.dataset.post;\n            parentId = this.dataset.parent;\n            this.disabled = true;\n            $(\".validate-form-post\").remove();\n            _context5.prev = 12;\n            _context5.next = 15;\n            return axios.post(\"/discussion/post/store-reply\", {\n              postId: postId,\n              parentId: parentId,\n              body: body\n            });\n\n          case 15:\n            _yield$axios$post2 = _context5.sent;\n            data = _yield$axios$post2.data;\n            status = _yield$axios$post2.status;\n\n            if (status == 200) {\n              $(\".cnt-reply-list\").html($(data).find(\".reply-list\")); //reload post\n\n              $(\".cnt-top-bar-post\").html($(data).find(\".top-bar-post\")); //reload topbar\n\n              $(\".post-scrollbar-cnt\").html($(data).find(\".post-scrollbar\")); //rolad ranger slider\n\n              rangeSlider();\n              $('#new-reply').modal('hide');\n              $('#form-create-reply')[0].reset();\n              this.disabled = false;\n            }\n\n            _context5.next = 24;\n            break;\n\n          case 21:\n            _context5.prev = 21;\n            _context5.t0 = _context5[\"catch\"](12);\n            console.log(_context5.t0);\n\n          case 24:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this, [[12, 21]]);\n  }));\n\n  return function (_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}()); // show post\n\n$(document).on(\"click\", '.js-thread-title', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6() {\n  var postId, _yield$axios$get4, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          postId = this.closest(\".single-thread\").dataset.postId;\n          _context6.prev = 1;\n          _context6.next = 4;\n          return axios.get(\"/discussion/\".concat(postId));\n\n        case 4:\n          _yield$axios$get4 = _context6.sent;\n          data = _yield$axios$get4.data;\n          status = _yield$axios$get4.status;\n\n          if (status === 200) {\n            $(\".discussions-right\").off();\n            $(\".discussions-right\").html(data);\n            $(\".first-thread\").show();\n            onChangeFirstButtonNew();\n            onCommentReplayBtnEvent();\n            onSubCommentReplayBtnEvent();\n            onLikebtn();\n            onDeleteComment();\n            rangeSlider();\n            handlerReply();\n            bestAnswer();\n            closedPost();\n            eventTopBar();\n          }\n\n          _context6.next = 13;\n          break;\n\n        case 10:\n          _context6.prev = 10;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.log(_context6.t0);\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _callee6, this, [[1, 10]]);\n}))); // search\n\n$(document).on(\"keyup\", \".js-search-post\", /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee7(e) {\n    var term, _yield$axios$post3, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            term = e.target.value;\n\n            if (!(e.keyCode === 13 && term.length >= 3)) {\n              _context7.next = 14;\n              break;\n            }\n\n            _context7.prev = 2;\n            _context7.next = 5;\n            return axios.post(\"/discussion/search\", {\n              term: term\n            });\n\n          case 5:\n            _yield$axios$post3 = _context7.sent;\n            data = _yield$axios$post3.data;\n            status = _yield$axios$post3.status;\n\n            if (status == 200) {\n              $(\".discussions-right\").html($(data).find(\".discussions-right>*\"));\n              e.target.value = \"\";\n              $('#centermodal').modal('hide');\n              onHideBody();\n            }\n\n            _context7.next = 14;\n            break;\n\n          case 11:\n            _context7.prev = 11;\n            _context7.t0 = _context7[\"catch\"](2);\n            console.log(_context7.t0);\n\n          case 14:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[2, 11]]);\n  }));\n\n  return function (_x4) {\n    return _ref7.apply(this, arguments);\n  };\n}()); // Global search\n\n$(document).on(\"keyup\", function (e) {\n  if (e.keyCode === 191) {\n    if (!$(\".js-search-snippet\").length) $(\"<span class='js-search-snippet' data-toggle='modal' data-target='#centermodal'></span>\").insertBefore('#centermodal');\n    $(\".js-search-snippet\").click();\n    $('#centermodal').on('shown.bs.modal', function () {\n      $('.css-search-snippet').focus();\n    });\n  }\n}); //replay comment first button\n\nvar onFirstReplayBtnEvent = function onFirstReplayBtnEvent() {\n  $(document).on(\"click\", \".first-thread-replay\", function () {\n    var postId = $(\".main-post\")[0].dataset.postId;\n    var parentId = 0;\n    $(\"#new-reply\").find(\".replay-name\").text(\"\");\n    $(\".js-form-reply\")[0].dataset.post = postId;\n    $(\".js-form-reply\")[0].dataset.parent = parentId;\n  });\n}; //replay comment\n\n\nvar onCommentReplayBtnEvent = function onCommentReplayBtnEvent() {\n  $(\".discussions-right\").on(\"click\", \".js-comment-reply\", function () {\n    var postId = $(\".main-post\")[0].dataset.postId;\n    var parentId = this.closest(\".main-post\").dataset.commentId;\n    var author = $(this).closest(\".main-post\").find(\".author-post-name\").text();\n    $(\"#new-reply\").find(\".replay-name\").text(\"@\".concat(author));\n    $(\".js-form-reply\")[0].dataset.post = postId;\n    $(\".js-form-reply\")[0].dataset.parent = parentId;\n  });\n}; //replay subcomment\n\n\nvar onSubCommentReplayBtnEvent = function onSubCommentReplayBtnEvent() {\n  $(\".discussions-right\").on(\"click\", \".js-sub-comment-reply\", function () {\n    var postId = $(\".main-post\")[0].dataset.postId;\n    var parentId = this.closest(\".main-post\").dataset.commentId;\n    var author = $(this).closest(\".main-post\").find(\".author-post-name\").text();\n    $(\"#new-reply\").find(\".replay-name\").text(\"@\".concat(author));\n    $(\".js-form-reply\")[0].dataset.post = postId;\n    $(\".js-form-reply\")[0].dataset.parent = parentId;\n  });\n}; //likes system comment\n\n\nvar onLikebtn = function onLikebtn() {\n  $(\".discussions-right\").on(\"click\", \".btn-reply-like\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee8() {\n    var _yield$axios$patch, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return axios.patch(\"/discussion/like-comment/\".concat(this.dataset.commentId));\n\n          case 3:\n            _yield$axios$patch = _context8.sent;\n            data = _yield$axios$patch.data;\n            status = _yield$axios$patch.status;\n\n            if (status == 200) {\n              if (data) {\n                this.classList.add(\"like-class\");\n                this.firstElementChild.innerHTML.trim().length == 0 ? this.firstElementChild.innerHTML = parseInt(1) : this.firstElementChild.innerHTML = parseInt(this.firstElementChild.innerHTML) + 1;\n              } else {\n                this.classList.remove(\"like-class\");\n                this.firstElementChild.innerHTML.trim() == \"1\" ? this.firstElementChild.innerHTML = \"\" : this.firstElementChild.innerHTML = parseInt(this.firstElementChild.innerHTML) - 1;\n              }\n            }\n\n            _context8.next = 12;\n            break;\n\n          case 9:\n            _context8.prev = 9;\n            _context8.t0 = _context8[\"catch\"](0);\n            console.log(_context8.t0);\n\n          case 12:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, this, [[0, 9]]);\n  })));\n}; //delete comment\n\n\nvar onDeleteComment = function onDeleteComment() {\n  $(\".discussions-right\").on(\"click\", \".js-delete-comment\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee9() {\n    var id, postId, _yield$axios$delete, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            id = this.closest(\".main-post\").dataset.threadId;\n            postId = $(\".main-post\")[0].dataset.postId;\n            _context9.prev = 2;\n            _context9.next = 5;\n            return axios[\"delete\"](\"/discussion/delete/\".concat(id), {\n              params: {\n                postId: postId\n              }\n            });\n\n          case 5:\n            _yield$axios$delete = _context9.sent;\n            data = _yield$axios$delete.data;\n            status = _yield$axios$delete.status;\n\n            if (status == 200) {\n              $(\".cnt-reply-list\").html($(data).find(\".reply-list\")); //reload post\n\n              $(\".cnt-top-bar-post\").html($(data).find(\".top-bar-post\")); //reload topbar\n\n              $(\".post-scrollbar-cnt\").html($(data).find(\".post-scrollbar\")); //rolad ranger slider\n\n              rangeSlider();\n            }\n\n            _context9.next = 14;\n            break;\n\n          case 11:\n            _context9.prev = 11;\n            _context9.t0 = _context9[\"catch\"](2);\n            console.log(_context9.t0);\n\n          case 14:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, this, [[2, 11]]);\n  })));\n}; //ranger system\n\n\nvar rangeSlider = function rangeSlider() {\n  var reply = $(\".main-reply\").map(function (idx, el) {\n    return typeof el.id == \"undefined\" ? \"post-1\" : el.id;\n  });\n  $(\".js-range-slider\").ionRangeSlider({\n    values: reply,\n    skin: \"round\"\n  });\n\n  if ($(\".irs-grid-text\").text() == 'undefined') {\n    $(\".irs-grid-text\").text(\"reply-1\");\n  }\n\n  $(\".js-range-slider\").on(\"change\", function () {\n    var topOfElement = document.querySelector(\"#\".concat(this.value)).offsetTop - 100;\n    window.scroll({\n      top: topOfElement,\n      behavior: \"smooth\"\n    });\n    console.log(this.value);\n  });\n  $(\".original-post\").on(\"click\", function () {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  });\n  $(\".new-post\").on(\"click\", function () {\n    $('html,body').animate({\n      scrollTop: 9999\n    }, 'slow');\n  });\n}; //show hide subcoomment\n\n\nvar handlerReply = function handlerReply() {\n  $(\".discussions-right\").on(\"click\", \".js-show-body\", function () {\n    onShowBody();\n    $(\".single-post-show\").addClass(\"d-none\");\n    $(\".js-reply-body\").each(function (idx, el) {\n      el.classList.remove(\"d-none\");\n      el.classList.add(\"d-flex\");\n    });\n  });\n  $(\".discussions-right\").on(\"click\", \".js-hidden-body\", function () {\n    onHideBody();\n    $(\".single-post-show\").removeClass(\"d-none\");\n    $(\".single-post-show\").children('i').css('color', '#c3c3c3');\n    $(\".js-reply-body\").each(function (idx, el) {\n      el.classList.add(\"d-none\");\n      el.classList.remove(\"d-flex\");\n    });\n  });\n  $(\".discussions-right\").on(\"click\", \".single-post-show\", function () {\n    var commentId = this.closest(\".main-post\").dataset.commentId;\n    var element = $(\".js-reply-body[data-comment-id=\".concat(commentId, \"]\"));\n\n    if (element.hasClass(\"d-none\")) {\n      element.removeClass(\"d-none\");\n      element.addClass(\"d-flex\");\n      this.children[0].style.color = '#676767';\n    } else {\n      element.addClass(\"d-none\");\n      element.removeClass(\"d-flex\");\n      this.children[0].style.color = '#c3c3c3';\n    }\n  });\n}; //handler best answer\n\n\nvar bestAnswer = function bestAnswer() {\n  $(\".discussions-right\").on(\"click\", \".js-best-answer\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee10() {\n    var commentId, postId, _yield$axios$patch2, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            $(\".js-best-answer\").not($(this)).removeClass(\"is-active-best\").addClass(\"is-active-best text-info\");\n            $(\".js-best-answer\").not($(this)).closest(\".main-post\").removeClass(\"best-answer-cnt\");\n\n            if ($(this).hasClass(\"is-active-best\")) {\n              $(this).closest(\".main-post\").addClass(\"best-answer-cnt\");\n              $(this).removeClass(\"is-active-best text-info\").addClass(\"text-success\");\n              $(this).parent().append('<a href=\"#\" class=\"ml-3 mt-2 badge badge-success badge-best font-14\">Best Answer</a>\\n');\n            } else {\n              $(this).closest(\".main-post\").removeClass(\"best-answer-cnt\");\n              $(this).removeClass(\"text-success\").addClass(\"is-active-best text-info\");\n              $(this).parent().find(\".badge-best\").remove();\n            }\n\n            $(\".js-best-answer\").not($(this)).parent().find(\".badge-best\").remove();\n            commentId = $(this).closest(\".main-post\").data(\"threadId\");\n            postId = $(\".main-post\")[0].dataset.postId;\n            _context10.prev = 6;\n            _context10.next = 9;\n            return axios.patch(\"/discussion/best/\".concat(commentId), {\n              postId: postId\n            });\n\n          case 9:\n            _yield$axios$patch2 = _context10.sent;\n            data = _yield$axios$patch2.data;\n            status = _yield$axios$patch2.status;\n\n            if (status == 200) {}\n\n            _context10.next = 18;\n            break;\n\n          case 15:\n            _context10.prev = 15;\n            _context10.t0 = _context10[\"catch\"](6);\n            console.log(_context10.t0);\n\n          case 18:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, this, [[6, 15]]);\n  })));\n}; //handler closes post\n\n\nvar closedPost = function closedPost() {\n  styleClosedPost();\n  $(\".discussions-right\").on(\"click\", \".js-post-closed\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee11() {\n    var postId, _yield$axios$patch3, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            postId = $(\".main-post\")[0].dataset.postId;\n            _context11.prev = 1;\n            _context11.next = 4;\n            return axios.patch(\"/discussion/closed/\".concat(postId));\n\n          case 4:\n            _yield$axios$patch3 = _context11.sent;\n            status = _yield$axios$patch3.status;\n\n            if (status == 200) {\n              $(this).toggleClass(\"badge-danger\");\n              $(this).toggleClass(\"badge-info\");\n              $(this).siblings(\"a\").toggleClass(\"d-none\");\n              $(\".js-comment-reply\").toggleClass(\"d-none\");\n              $(\".js-sub-comment-reply\").toggleClass(\"d-none\");\n              $(\".discussions-right\").find(\".first-thread-replay\").toggleClass(\"d-none\");\n              $(\".ul-thread\").find(\".first-thread-replay\").toggleText('CLOSED', 'ΑΠΑΝΤΗΣΗ').toggleClass(\"bg-danger\");\n              styleClosedPost();\n            }\n\n            _context11.next = 11;\n            break;\n\n          case 9:\n            _context11.prev = 9;\n            _context11.t0 = _context11[\"catch\"](1);\n\n          case 11:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11, this, [[1, 9]]);\n  })));\n}; //style closes post\n\n\nvar styleClosedPost = function styleClosedPost() {\n  if ($(\".js-post-closed\").hasClass(\"badge-danger\") || !$(\".badge-danger\").hasClass(\"d-none\")) {\n    $(\".ul-thread\").find(\".first-thread-replay\").text(\"CLOSED\").addClass(\"bg-danger\").prop('disabled', true);\n    $(\".ul-thread\").find(\".first-thread-replay\").mouseover(function () {\n      $(this).css(\"cursor\", \"not-allowed\");\n    });\n    $(\".ul-thread\").find(\".first-thread-replay\").mouseout(function () {\n      $(this).css(\"cursor\", \"pointer\");\n    });\n  } else {\n    $(\".ul-thread\").find(\".first-thread-replay\").text(\"ΑΠΑΝΤΗΣΗ\").removeClass(\"bg-danger\").prop('disabled', false);\n    $(\".ul-thread\").find(\".first-thread-replay\").unbind('mouseover').unbind('mouseout');\n  }\n}; //all thread sidebar\n\n\n$(\".discussions-left\").on(\"click\", \"#filter-all-threads\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee12() {\n  var _yield$axios$get5, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee12$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return axios.get(\"/discussion\");\n\n        case 3:\n          _yield$axios$get5 = _context12.sent;\n          data = _yield$axios$get5.data;\n          status = _yield$axios$get5.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context12.next = 12;\n          break;\n\n        case 9:\n          _context12.prev = 9;\n          _context12.t0 = _context12[\"catch\"](0);\n          console.log(_context12.t0);\n\n        case 12:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _callee12, this, [[0, 9]]);\n}))); //my question sidebar\n\n$(\".discussions-left\").on(\"click\", \"#filter-my-question\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee13() {\n  var _yield$axios$get6, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee13$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return axios.get(\"/discussion/my-question\");\n\n        case 3:\n          _yield$axios$get6 = _context13.sent;\n          data = _yield$axios$get6.data;\n          status = _yield$axios$get6.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context13.next = 12;\n          break;\n\n        case 9:\n          _context13.prev = 9;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.log(_context13.t0);\n\n        case 12:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _callee13, this, [[0, 9]]);\n}))); //my simetoxi se post\n\n$(\".discussions-left\").on(\"click\", \"#filter-participation\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee14() {\n  var _yield$axios$get7, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee14$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.prev = 0;\n          _context14.next = 3;\n          return axios.get(\"/discussion/participation\");\n\n        case 3:\n          _yield$axios$get7 = _context14.sent;\n          data = _yield$axios$get7.data;\n          status = _yield$axios$get7.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context14.next = 12;\n          break;\n\n        case 9:\n          _context14.prev = 9;\n          _context14.t0 = _context14[\"catch\"](0);\n          console.log(_context14.t0);\n\n        case 12:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _callee14, this, [[0, 9]]);\n}))); //my kaliteri apantisi\n\n$(\".discussions-left\").on(\"click\", \"#filter-best-answer\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee15() {\n  var _yield$axios$get8, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee15$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return axios.get(\"/discussion/best-answer\");\n\n        case 3:\n          _yield$axios$get8 = _context15.sent;\n          data = _yield$axios$get8.data;\n          status = _yield$axios$get8.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context15.next = 12;\n          break;\n\n        case 9:\n          _context15.prev = 9;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.log(_context15.t0);\n\n        case 12:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _callee15, this, [[0, 9]]);\n}))); //my popular this wwek\n\n$(\".discussions-left\").on(\"click\", \"#filter-popular-week\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee16() {\n  var _yield$axios$get9, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee16$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.prev = 0;\n          _context16.next = 3;\n          return axios.get(\"/discussion/popular-week\");\n\n        case 3:\n          _yield$axios$get9 = _context16.sent;\n          data = _yield$axios$get9.data;\n          status = _yield$axios$get9.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n            $(\".filter-thread\").children().first().css('visibility', 'hidden');\n          }\n\n          _context16.next = 12;\n          break;\n\n        case 9:\n          _context16.prev = 9;\n          _context16.t0 = _context16[\"catch\"](0);\n          console.log(_context16.t0);\n\n        case 12:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _callee16, this, [[0, 9]]);\n}))); //my popular all time\n\n$(\".discussions-left\").on(\"click\", \"#filter-popular-allTime\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee17() {\n  var _yield$axios$get10, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee17$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return axios.get(\"/discussion/popular-allTime\");\n\n        case 3:\n          _yield$axios$get10 = _context17.sent;\n          data = _yield$axios$get10.data;\n          status = _yield$axios$get10.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n            $(\".filter-thread\").children().first().css('visibility', 'hidden');\n          }\n\n          _context17.next = 12;\n          break;\n\n        case 9:\n          _context17.prev = 9;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.log(_context17.t0);\n\n        case 12:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _callee17, this, [[0, 9]]);\n}))); //my post pou einai closed\n\n$(\".discussions-left\").on(\"click\", \"#filter-isClosed\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee18() {\n  var _yield$axios$get11, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee18$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.prev = 0;\n          _context18.next = 3;\n          return axios.get(\"/discussion/isClosed\");\n\n        case 3:\n          _yield$axios$get11 = _context18.sent;\n          data = _yield$axios$get11.data;\n          status = _yield$axios$get11.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context18.next = 12;\n          break;\n\n        case 9:\n          _context18.prev = 9;\n          _context18.t0 = _context18[\"catch\"](0);\n          console.log(_context18.t0);\n\n        case 12:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _callee18, this, [[0, 9]]);\n}))); //my xoris apantisi\n\n$(\".discussions-left\").on(\"click\", \"#filter-no-replies\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee19() {\n  var _yield$axios$get12, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee19$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return axios.get(\"/discussion/no-replies\");\n\n        case 3:\n          _yield$axios$get12 = _context19.sent;\n          data = _yield$axios$get12.data;\n          status = _yield$axios$get12.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context19.next = 12;\n          break;\n\n        case 9:\n          _context19.prev = 9;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.log(_context19.t0);\n\n        case 12:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _callee19, this, [[0, 9]]);\n}))); // $R(\"#post-body\", {\n//     buttons: [\n//         'html', 'undo', 'redo', 'format',\n//         'bold', 'underline', 'italic', 'deleted',\n//         'sup', 'sub', 'lists', 'file', 'link', 'image'\n//     ],\n//     style: false,\n//     plugins: [ 'alignment'],\n//     minHeight: '150px',\n//     imageResizable: true,\n//     imagePosition : {\n//         \"left\": \"image-left\",\n//         \"right\": \"image-right\",\n//         \"center\": \"image-center text-center\"\n//     },\n//     imageFloatMargin: '20px',\n//     imageUpload: \"/media/upload-images\",\n//     callbacks: {\n//         upload: {\n//             beforeSend: function(xhr)\n//             {\n//                 xhr.setRequestHeader('X-CSRF-Token', $('meta[name=\"csrf-token\"]').attr('content'));\n//             }\n//         }\n//     }\n// });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvaW5kZXgvZGlzY3Vzc2lvbnMvZGlzY3Vzc2lvbnMuanM/YzgzOSJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImhyZWYiLCJvcHRpb24iLCJvcHRpb25zIiwic2VsZWN0ZWRJbmRleCIsInZhbHVlIiwiYXhpb3MiLCJnZXQiLCJwYXJhbXMiLCJoZWFkZXJzIiwiZGF0YSIsInN0YXR1cyIsImh0bWwiLCJmaW5kIiwib25IaWRlQm9keSIsImhpZGUiLCJldmVudFRvcEJhciIsImNvdXJzZSIsImZpbHRlck5hbWUiLCJhdHRyIiwicmVwbGFjZSIsIm9uU2hvd0JvZHkiLCJlYWNoIiwiaWR4IiwiZWwiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJvbkNoYW5nZUZpcnN0QnV0dG9uTmV3IiwiZmlyc3RCdG4iLCJpbm5lckhUTUwiLCJkYXRhc2V0IiwidGFyZ2V0Iiwib25GaXJzdFJlcGxheUJ0bkV2ZW50Iiwib25DaGFuZ2VGaXJzdEJ1dHRvblJlcGxheSIsImxlbmd0aCIsImRpc2FibGVkIiwidW5iaW5kIiwiYXhpb3NVcGRhdGVNYWluIiwidGhhdCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJ0aXRsZSIsInZhbCIsIm1vZGFsIiwiaW5zZXJ0QWZ0ZXIiLCJwb3N0IiwicmVzZXQiLCJjb25zb2xlIiwibG9nIiwiYm9keSIsInRleHQiLCJwb3N0SWQiLCJwYXJlbnRJZCIsInBhcmVudCIsInJhbmdlU2xpZGVyIiwiY2xvc2VzdCIsIm9mZiIsInNob3ciLCJvbkNvbW1lbnRSZXBsYXlCdG5FdmVudCIsIm9uU3ViQ29tbWVudFJlcGxheUJ0bkV2ZW50Iiwib25MaWtlYnRuIiwib25EZWxldGVDb21tZW50IiwiaGFuZGxlclJlcGx5IiwiYmVzdEFuc3dlciIsImNsb3NlZFBvc3QiLCJ0ZXJtIiwia2V5Q29kZSIsImluc2VydEJlZm9yZSIsImNsaWNrIiwiZm9jdXMiLCJjb21tZW50SWQiLCJhdXRob3IiLCJwYXRjaCIsImZpcnN0RWxlbWVudENoaWxkIiwidHJpbSIsInBhcnNlSW50IiwiaWQiLCJ0aHJlYWRJZCIsInJlcGx5IiwibWFwIiwiaW9uUmFuZ2VTbGlkZXIiLCJ2YWx1ZXMiLCJza2luIiwidG9wT2ZFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIm9mZnNldFRvcCIsIndpbmRvdyIsInNjcm9sbCIsInRvcCIsImJlaGF2aW9yIiwic2Nyb2xsVG8iLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwiY2hpbGRyZW4iLCJjc3MiLCJlbGVtZW50IiwiaGFzQ2xhc3MiLCJzdHlsZSIsImNvbG9yIiwibm90IiwiYXBwZW5kIiwic3R5bGVDbG9zZWRQb3N0IiwidG9nZ2xlQ2xhc3MiLCJzaWJsaW5ncyIsInRvZ2dsZVRleHQiLCJwcm9wIiwibW91c2VvdmVyIiwibW91c2VvdXQiLCJmaXJzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQUEsQ0FBQyxDQUFDQyxRQUFELENBQUQsQ0FBWUMsRUFBWixDQUFlLE9BQWYsRUFBd0IsZUFBeEI7QUFBQSxvSEFBeUMsaUJBQWdCQyxDQUFoQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ3JDQSxhQUFDLENBQUNDLGNBQUY7QUFDTUMsZ0JBRitCLEdBRXhCLEtBQUtBLElBRm1CO0FBS2pDQyxrQkFMaUMsR0FLeEJOLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCLENBQXJCLEVBQXdCTyxPQUF4QixDQUFnQ1AsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUIsQ0FBckIsRUFBd0JRLGFBQXhELEVBQXVFQyxLQUwvQztBQUFBO0FBQUEsbUJBT1JDLEtBQUssQ0FBQ0MsR0FBTixDQUFVTixJQUFWLEVBQWdCO0FBQ3pDTyxvQkFBTSxFQUFFO0FBQ0pOLHNCQUFNLEVBQU5BO0FBREksZUFEaUM7QUFHdENPLHFCQUFPLEVBQUU7QUFDUiwrQ0FBK0I7QUFEdkI7QUFINkIsYUFBaEIsQ0FQUTs7QUFBQTtBQUFBO0FBTzlC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QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUF2RCxJLENBY0E7O0FBQ0FyRCxDQUFDLENBQUMsbUJBQUQsQ0FBRCxDQUF1QkUsRUFBdkIsQ0FBMEIsT0FBMUIsRUFBbUMsb0JBQW5DLHNIQUF5RDtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGlCQUdwQlEsS0FBSyxDQUFDQyxHQUFOLENBQVUsd0JBQVYsQ0FIb0I7O0FBQUE7QUFBQTtBQUcxQ0csY0FIMEMsc0JBRzFDQSxJQUgwQztBQUdwQ0MsZ0JBSG9DLHNCQUdwQ0EsTUFIb0M7O0FBS2pELGNBQUlBLE1BQU0sSUFBSSxHQUFkLEVBQW1CO0FBQ2YyQiwyQkFBZSxDQUFDMUMsQ0FBQyxDQUFDLElBQUQsQ0FBRixFQUFVYyxJQUFWLENBQWY7QUFDSDs7QUFQZ0Q7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFXakRzQyxpQkFBTyxDQUFDQyxHQUFSOztBQVhpRDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxDQUF6RCxJLENBbUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvaW5kZXgvZGlzY3Vzc2lvbnMvZGlzY3Vzc2lvbnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL3BhZ2luYXRpb24gZXZlbnRcbiQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCIucGFnaW5hdGlvbiBhXCIsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGhyZWYgPSB0aGlzLmhyZWY7XG5cblxuICAgIGxldCBvcHRpb24gPSAkKFwiLmZpbHRlci1zaWRlYmFyXCIpWzBdLm9wdGlvbnNbJChcIi5maWx0ZXItc2lkZWJhclwiKVswXS5zZWxlY3RlZEluZGV4XS52YWx1ZVxuXG4gICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5nZXQoaHJlZiwge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIG9wdGlvblxuICAgICAgICB9LCBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJzogJyonLFxuICAgICAgICB9LFxuXG4gICAgfSlcbiAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuXG4gICAgICAgICQoXCIuY250LXRocmVhZHMtbWFpbi1saXN0XCIpLmh0bWwoJChkYXRhKS5maW5kKFwiLnRocmVhZHMtbWFpbi1saXN0XCIpKVxuICAgICAgICBvbkhpZGVCb2R5KClcbiAgICB9XG59KVxuJChcIi5maXJzdC10aHJlYWRcIikuaGlkZSgpO1xuY29uc3QgZXZlbnRUb3BCYXIgID0gKCkgPT57XG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNoYW5nZVwiLCBcIi5maWx0ZXItc2lkZWJhclwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgbGV0IGNvdXJzZSA9ICQoXCIuZmlsdGVyLWNvdXJzZVwiKVswXS5vcHRpb25zWyQoXCIuZmlsdGVyLWNvdXJzZVwiKVswXS5zZWxlY3RlZEluZGV4XS52YWx1ZVxuICAgICAgICBsZXQgb3B0aW9uID0gJChcIi5maWx0ZXItc2lkZWJhclwiKVswXS5vcHRpb25zWyQoXCIuZmlsdGVyLXNpZGViYXJcIilbMF0uc2VsZWN0ZWRJbmRleF0udmFsdWVcblxuICAgICAgICBsZXQgZmlsdGVyTmFtZSA9ICQoXCIuYWN0aXZlLXRocmVhZFwiKS5hdHRyKCdpZCcpLnJlcGxhY2UoXCJmaWx0ZXItXCIsIFwiXCIpXG4gICAgICAgIGZpbHRlck5hbWUgPSBmaWx0ZXJOYW1lID09IFwiYWxsLXRocmVhZHNcIiA/IFwiXCIgOiBmaWx0ZXJOYW1lO1xuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmdldChgL2Rpc2N1c3Npb24vJHtmaWx0ZXJOYW1lfWAsIHtcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgIG9wdGlvbixcbiAgICAgICAgICAgICAgICBjb3Vyc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgJChcIi5jbnQtdGhyZWFkcy1tYWluLWxpc3RcIikuaHRtbCgkKGRhdGEpLmZpbmQoXCIudGhyZWFkcy1tYWluLWxpc3RcIikpXG4gICAgICAgICAgICBvbkhpZGVCb2R5KClcblxuICAgICAgICB9XG5cbiAgICB9KVxuXG4vL3RvZG8gZGVuIGRvdWxldmlcbiAgICAkKFwiLmRpc2N1c3Npb25zLXJpZ2h0XCIpLm9uKFwiY2hhbmdlXCIsIFwiLmZpbHRlci1jb3Vyc2VcIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGxldCBjb3Vyc2UgPSAkKFwiLmZpbHRlci1jb3Vyc2VcIilbMF0ub3B0aW9uc1skKFwiLmZpbHRlci1jb3Vyc2VcIilbMF0uc2VsZWN0ZWRJbmRleF0udmFsdWVcbiAgICAgICAgbGV0IG9wdGlvbiA9ICQoXCIuZmlsdGVyLXNpZGViYXJcIilbMF0ub3B0aW9uc1skKFwiLmZpbHRlci1zaWRlYmFyXCIpWzBdLnNlbGVjdGVkSW5kZXhdLnZhbHVlXG5cbiAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5nZXQoXCIvZGlzY3Vzc2lvbi9jaGFuZ2UvZmlsdGVyLWNvdXJzZVwiLCB7XG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBvcHRpb24sXG4gICAgICAgICAgICAgICAgY291cnNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICQoXCIuY250LXRocmVhZHMtbWFpbi1saXN0XCIpLmh0bWwoJChkYXRhKS5maW5kKFwiLnRocmVhZHMtbWFpbi1saXN0XCIpKVxuICAgICAgICAgICAgb25IaWRlQm9keSgpXG4gICAgICAgIH1cbiAgICB9KVxuXG4vLyBmaWx0ZXIgc2hvdyBib2R5XG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLmpzLXNob3ctYm9keVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9uU2hvd0JvZHkoKVxuICAgICAgICAkKFwiLmpzLXBvc3QtYm9keVwiKS5lYWNoKChpZHgsIGVsKSA9PiB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKFwiZC1ub25lXCIpXG4gICAgICAgIH0pO1xuICAgIH0pXG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLmpzLWhpZGRlbi1ib2R5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb25IaWRlQm9keSgpXG5cbiAgICAgICAgJChcIi5qcy1wb3N0LWJvZHlcIikuZWFjaCgoaWR4LCBlbCkgPT4ge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChcImQtbm9uZVwiKVxuICAgICAgICB9KTtcbiAgICB9KVxufVxuZXZlbnRUb3BCYXIoKTtcblxuLy8gRXZlbmV0IGxpc3RlbmVyIHNob3cgYm9keVxuY29uc3Qgb25IaWRlQm9keSA9ICgpID0+IHtcbiAgICAkKFwiLmpzLWhpZGRlbi1ib2R5XCIpWzBdLmNsYXNzTGlzdC5hZGQoXCJqcy1ib2R5LWFjdGl2ZVwiKVxuICAgICQoXCIuanMtc2hvdy1ib2R5XCIpWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJqcy1ib2R5LWFjdGl2ZVwiKVxufVxuY29uc3Qgb25TaG93Qm9keSA9ICgpID0+IHtcbiAgICAkKFwiLmpzLXNob3ctYm9keVwiKVswXS5jbGFzc0xpc3QuYWRkKFwianMtYm9keS1hY3RpdmVcIilcbiAgICAkKFwiLmpzLWhpZGRlbi1ib2R5XCIpWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJqcy1ib2R5LWFjdGl2ZVwiKVxufVxuLy8gRXZlbmV0IGNoYW5nZSBmaXJzdCBidXR0b25cbmNvbnN0IG9uQ2hhbmdlRmlyc3RCdXR0b25OZXcgPSAoKSA9PiB7XG4gICAgbGV0IGZpcnN0QnRuID0gJChcIi5maXJzdC10aHJlYWRcIilcblxuICAgIGZpcnN0QnRuWzBdLmlubmVySFRNTCA9IGDOkc6gzpHOnc6kzpfOo86XYFxuICAgIGZpcnN0QnRuWzBdLmRhdGFzZXQudGFyZ2V0ID0gXCIjbmV3LXJlcGx5XCJcbiAgICBmaXJzdEJ0blswXS5jbGFzc0xpc3QuYWRkKFwiZmlyc3QtdGhyZWFkLXJlcGxheVwiKVxuICAgIGZpcnN0QnRuWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJmaXJzdC10aHJlYWRcIilcbiAgICBvbkZpcnN0UmVwbGF5QnRuRXZlbnQoKTtcbn1cbmNvbnN0IG9uQ2hhbmdlRmlyc3RCdXR0b25SZXBsYXkgPSAoKSA9PiB7XG4gICAgaWYgKCQoXCIuZmlyc3QtdGhyZWFkLXJlcGxheVwiKS5sZW5ndGgpIHtcblxuICAgICAgICBsZXQgZmlyc3RCdG4gPSAkKFwiLmZpcnN0LXRocmVhZC1yZXBsYXlcIilcbiAgICAgICAgZmlyc3RCdG5bMF0uaW5uZXJIVE1MID0gYE5FTyBQT1NUYFxuICAgICAgICBmaXJzdEJ0blswXS5kYXRhc2V0LnRhcmdldCA9IFwiI25ldy10aHJlYWRzXCJcbiAgICAgICAgZmlyc3RCdG5bMF0uY2xhc3NMaXN0LnJlbW92ZShcImZpcnN0LXRocmVhZC1yZXBsYXlcIilcbiAgICAgICAgZmlyc3RCdG5bMF0uY2xhc3NMaXN0LmFkZChcImZpcnN0LXRocmVhZFwiKVxuICAgICAgICBmaXJzdEJ0blswXS5kaXNhYmxlZCA9IGZhbHNlO1xuLy9uZXcgbmEgdGEgdHNla2FydyFcbiAgICAgICAgZmlyc3RCdG5bMF0uY2xhc3NMaXN0LnJlbW92ZShcImJnLWRhbmdlclwiKVxuICAgICAgICAkKFwiLnVsLXRocmVhZFwiKS5maW5kKFwiLmZpcnN0LXRocmVhZFwiKS51bmJpbmQoJ21vdXNlb3ZlcicpLnVuYmluZCgnbW91c2VvdXQnKTtcblxuICAgIH1cbn1cblxuLy91cGRhdGUgbWFpbiBwYWdlIHJlbG9hZFxuY29uc3QgYXhpb3NVcGRhdGVNYWluID0gKHRoYXQsIGRhdGEpID0+IHtcbiAgICAkKFwiLnVsLXRocmVhZCAuYmctdGhyZWFkXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlLXRocmVhZFwiKVxuICAgICQodGhhdCkuYWRkQ2xhc3MoXCJhY3RpdmUtdGhyZWFkXCIpXG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5odG1sKCQoZGF0YSkuZmluZChcIi5kaXNjdXNzaW9ucy1yaWdodD4gKlwiKSlcbiAgICBvbkhpZGVCb2R5KClcbiAgICBvbkNoYW5nZUZpcnN0QnV0dG9uUmVwbGF5KClcbiAgICAkKFwiLmZpcnN0LXRocmVhZFwiKS5oaWRlKCk7XG59XG5cbi8vIHN1Ym1pdCBjcmVhdGUgZm9ybVxuJChcIi5qcy1mb3JtLWNyZWF0ZVwiKS5vbihcImNsaWNrXCIsYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBsZXQgdGl0bGUgPSAkKCdpbnB1dCNwb3N0LXRpdGxlJykudmFsKClcbiAgICBsZXQgY291cnNlID0gJCgnI3Bvc3QtY291cnNlJykudmFsKClcbiAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZVxuXG5cbiAgICBpZiAoIXRpdGxlKSB7XG4gICAgICAgIGlmICghJChcIi52YWxpZGF0ZS1mb3JtLXBvc3QtYm9keVwiKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICQoJyNuZXctdGhyZWFkcycpLm1vZGFsKCdzaG93Jyk7XG4gICAgICAgICAgICAkKFwiPHAgY2xhc3M9J3RleHQtZGFuZ2VyIG10LTIgdmFsaWRhdGUtZm9ybS1wb3N0LWJvZHknPirOo8+FzrzPgM67zrfPgc+Oz4PPhM61IM+MzrvOsSDPhM6xIM+AzrHOuc60zrnOrDwvcD5cIikuaW5zZXJ0QWZ0ZXIoXCIjcG9zdC1ib2R5XCIpO1xuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5wb3N0KFwiL2Rpc2N1c3Npb24vcG9zdC9zdG9yZS10aHJlYWRcIiwge1xuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICBjb3Vyc2VcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5odG1sKCQoZGF0YSkuZmluZChcIi5kaXNjdXNzaW9ucy1yaWdodD4gKlwiKSlcbiAgICAgICAgICAgIG9uSGlkZUJvZHkoKVxuICAgICAgICAgICAgJCgnI25ldy10aHJlYWRzJykubW9kYWwoJ2hpZGUnKVxuICAgICAgICAgICAgJCgnI2Zvcm0tY3JlYXRlLXRocmVhZCcpWzBdLnJlc2V0KClcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZVxuXG4gICAgICAgIH1cblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICB9XG59KVxuXG4vLyBzdWJtaXQgcmVwbHkgZm9ybVxuJChcIi5qcy1mb3JtLXJlcGx5XCIpLm9uKFwiY2xpY2tcIiwgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBsZXQgYm9keSA9ICQoJ3RleHRhcmVhI3JlcGx5LWJvZHknKS52YWwoKVxuXG5cbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgICAgaWYgKCEkKFwiLnZhbGlkYXRlLWZvcm0tcG9zdFwiKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICQoJyNuZXctcmVwbHknKS5tb2RhbCgnc2hvdycpO1xuICAgICAgICAgICAgJChcIjxwIGNsYXNzPSd0ZXh0LWRhbmdlciBtdC0yIHZhbGlkYXRlLWZvcm0tcG9zdCc+KlTOvyDPgM61zrTOr86/IM61zq/Ovc6xzrkgzrHPgM6xz4HOsc6vz4TOt8+Ezr88L3A+XCIpLmluc2VydEFmdGVyKFwiI3JlcGx5LWJvZHlcIik7XG5cbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICB9ZWxzZXtcbiAgICAgICAgYm9keSA9ICBgPHNwYW4gY2xhc3M9XCJ0ZXh0LWluZm9cIj4keyQoXCIucmVwbGF5LW5hbWVcIikudGV4dCgpfTwvc3Bhbj4gJHtib2R5fWBcblxuXG4gICAgfVxuICAgIGxldCBwb3N0SWQgPSB0aGlzLmRhdGFzZXQucG9zdDtcbiAgICBsZXQgcGFyZW50SWQgPSB0aGlzLmRhdGFzZXQucGFyZW50O1xuICAgIHRoaXMuZGlzYWJsZWQgPSB0cnVlXG4gICAgJChcIi52YWxpZGF0ZS1mb3JtLXBvc3RcIikucmVtb3ZlKCk7XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLnBvc3QoXCIvZGlzY3Vzc2lvbi9wb3N0L3N0b3JlLXJlcGx5XCIsIHtcbiAgICAgICAgICAgIHBvc3RJZCxcbiAgICAgICAgICAgIHBhcmVudElkLFxuICAgICAgICAgICAgYm9keVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICAkKFwiLmNudC1yZXBseS1saXN0XCIpLmh0bWwoJChkYXRhKS5maW5kKFwiLnJlcGx5LWxpc3RcIikpIC8vcmVsb2FkIHBvc3RcbiAgICAgICAgICAgICQoXCIuY250LXRvcC1iYXItcG9zdFwiKS5odG1sKCQoZGF0YSkuZmluZChcIi50b3AtYmFyLXBvc3RcIikpIC8vcmVsb2FkIHRvcGJhclxuICAgICAgICAgICAgJChcIi5wb3N0LXNjcm9sbGJhci1jbnRcIikuaHRtbCgkKGRhdGEpLmZpbmQoXCIucG9zdC1zY3JvbGxiYXJcIikpIC8vcm9sYWQgcmFuZ2VyIHNsaWRlclxuICAgICAgICAgICAgcmFuZ2VTbGlkZXIoKTtcbiAgICAgICAgICAgICQoJyNuZXctcmVwbHknKS5tb2RhbCgnaGlkZScpXG4gICAgICAgICAgICAkKCcjZm9ybS1jcmVhdGUtcmVwbHknKVswXS5yZXNldCgpXG4gICAgICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2VcblxuICAgICAgICB9XG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgfVxuXG59KVxuXG4vLyBzaG93IHBvc3RcbiQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgJy5qcy10aHJlYWQtdGl0bGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHBvc3RJZCA9IHRoaXMuY2xvc2VzdChcIi5zaW5nbGUtdGhyZWFkXCIpLmRhdGFzZXQucG9zdElkXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5wYXRjaChgL2Rpc2N1c3Npb24vd2F0Y2hlZC8ke3Bvc3RJZH1gKVxuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmdldChgL2Rpc2N1c3Npb24vJHtwb3N0SWR9YClcblxuICAgICAgICBpZiAoc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub2ZmKCk7XG4gICAgICAgICAgICAkKFwiLmRpc2N1c3Npb25zLXJpZ2h0XCIpLmh0bWwoZGF0YSlcbiAgICAgICAgICAgICQoXCIuZmlyc3QtdGhyZWFkXCIpLnNob3coKTtcbiAgICAgICAgICAgIG9uQ2hhbmdlRmlyc3RCdXR0b25OZXcoKVxuICAgICAgICAgICAgb25Db21tZW50UmVwbGF5QnRuRXZlbnQoKVxuICAgICAgICAgICAgb25TdWJDb21tZW50UmVwbGF5QnRuRXZlbnQoKVxuICAgICAgICAgICAgb25MaWtlYnRuKClcbiAgICAgICAgICAgIG9uRGVsZXRlQ29tbWVudCgpXG4gICAgICAgICAgICByYW5nZVNsaWRlcigpXG4gICAgICAgICAgICBoYW5kbGVyUmVwbHkoKVxuICAgICAgICAgICAgYmVzdEFuc3dlcigpXG4gICAgICAgICAgICBjbG9zZWRQb3N0KClcbiAgICAgICAgICAgIGV2ZW50VG9wQmFyKClcblxuICAgICAgICB9XG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgfVxuXG59KVxuXG4vLyBzZWFyY2hcbiQoZG9jdW1lbnQpLm9uKFwia2V5dXBcIiwgXCIuanMtc2VhcmNoLXBvc3RcIiwgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICBsZXQgdGVybSA9IGUudGFyZ2V0LnZhbHVlO1xuXG4gICAgaWYgKGUua2V5Q29kZSA9PT0gMTMgJiYgdGVybS5sZW5ndGggPj0gMykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5wb3N0KFwiL2Rpc2N1c3Npb24vc2VhcmNoXCIsIHtcbiAgICAgICAgICAgICAgICB0ZXJtXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAkKFwiLmRpc2N1c3Npb25zLXJpZ2h0XCIpLmh0bWwoJChkYXRhKS5maW5kKFwiLmRpc2N1c3Npb25zLXJpZ2h0PipcIikpXG4gICAgICAgICAgICAgICAgZS50YXJnZXQudmFsdWUgPSBcIlwiXG4gICAgICAgICAgICAgICAgJCgnI2NlbnRlcm1vZGFsJykubW9kYWwoJ2hpZGUnKVxuICAgICAgICAgICAgICAgIG9uSGlkZUJvZHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgfVxuICAgIH1cbn0pXG4vLyBHbG9iYWwgc2VhcmNoXG4kKGRvY3VtZW50KS5vbihcImtleXVwXCIsIGZ1bmN0aW9uIChlKSB7XG5cbiAgICBpZiAoZS5rZXlDb2RlID09PSAxOTEpIHtcblxuICAgICAgICBpZiAoISQoXCIuanMtc2VhcmNoLXNuaXBwZXRcIikubGVuZ3RoKVxuICAgICAgICAgICAgJChcIjxzcGFuIGNsYXNzPSdqcy1zZWFyY2gtc25pcHBldCcgZGF0YS10b2dnbGU9J21vZGFsJyBkYXRhLXRhcmdldD0nI2NlbnRlcm1vZGFsJz48L3NwYW4+XCIpXG4gICAgICAgICAgICAgICAgLmluc2VydEJlZm9yZSgnI2NlbnRlcm1vZGFsJyk7XG4gICAgICAgICQoXCIuanMtc2VhcmNoLXNuaXBwZXRcIikuY2xpY2soKTtcblxuICAgICAgICAkKCcjY2VudGVybW9kYWwnKS5vbignc2hvd24uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKCcuY3NzLXNlYXJjaC1zbmlwcGV0JykuZm9jdXMoKTtcbiAgICAgICAgfSlcbiAgICB9XG5cblxufSlcblxuLy9yZXBsYXkgY29tbWVudCBmaXJzdCBidXR0b25cbmNvbnN0IG9uRmlyc3RSZXBsYXlCdG5FdmVudCA9ICgpID0+IHtcblxuICAgICQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCIuZmlyc3QtdGhyZWFkLXJlcGxheVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBwb3N0SWQgPSAkKFwiLm1haW4tcG9zdFwiKVswXS5kYXRhc2V0LnBvc3RJZDtcbiAgICAgICAgbGV0IHBhcmVudElkID0gMDtcblxuICAgICAgICAkKFwiI25ldy1yZXBseVwiKS5maW5kKFwiLnJlcGxheS1uYW1lXCIpLnRleHQoXCJcIik7XG4gICAgICAgICQoXCIuanMtZm9ybS1yZXBseVwiKVswXS5kYXRhc2V0LnBvc3QgPSBwb3N0SWRcbiAgICAgICAgJChcIi5qcy1mb3JtLXJlcGx5XCIpWzBdLmRhdGFzZXQucGFyZW50ID0gcGFyZW50SWRcblxuICAgIH0pXG5cbn1cbi8vcmVwbGF5IGNvbW1lbnRcbmNvbnN0IG9uQ29tbWVudFJlcGxheUJ0bkV2ZW50ID0gKCkgPT4ge1xuICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub24oXCJjbGlja1wiLCBcIi5qcy1jb21tZW50LXJlcGx5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHBvc3RJZCA9ICQoXCIubWFpbi1wb3N0XCIpWzBdLmRhdGFzZXQucG9zdElkO1xuICAgICAgICBsZXQgcGFyZW50SWQgPSB0aGlzLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmRhdGFzZXQuY29tbWVudElkO1xuICAgICAgICBsZXQgYXV0aG9yID0gJCh0aGlzKS5jbG9zZXN0KFwiLm1haW4tcG9zdFwiKS5maW5kKFwiLmF1dGhvci1wb3N0LW5hbWVcIikudGV4dCgpXG5cbiAgICAgICAgJChcIiNuZXctcmVwbHlcIikuZmluZChcIi5yZXBsYXktbmFtZVwiKS50ZXh0KGBAJHthdXRob3J9YCk7XG4gICAgICAgICQoXCIuanMtZm9ybS1yZXBseVwiKVswXS5kYXRhc2V0LnBvc3QgPSBwb3N0SWRcbiAgICAgICAgJChcIi5qcy1mb3JtLXJlcGx5XCIpWzBdLmRhdGFzZXQucGFyZW50ID0gcGFyZW50SWRcbiAgICB9KVxufVxuLy9yZXBsYXkgc3ViY29tbWVudFxuY29uc3Qgb25TdWJDb21tZW50UmVwbGF5QnRuRXZlbnQgPSAoKSA9PiB7XG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLmpzLXN1Yi1jb21tZW50LXJlcGx5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHBvc3RJZCA9ICQoXCIubWFpbi1wb3N0XCIpWzBdLmRhdGFzZXQucG9zdElkO1xuICAgICAgICBsZXQgcGFyZW50SWQgPSB0aGlzLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmRhdGFzZXQuY29tbWVudElkO1xuICAgICAgICBsZXQgYXV0aG9yID0gJCh0aGlzKS5jbG9zZXN0KFwiLm1haW4tcG9zdFwiKS5maW5kKFwiLmF1dGhvci1wb3N0LW5hbWVcIikudGV4dCgpXG5cbiAgICAgICAgJChcIiNuZXctcmVwbHlcIikuZmluZChcIi5yZXBsYXktbmFtZVwiKS50ZXh0KGBAJHthdXRob3J9YCk7XG4gICAgICAgICQoXCIuanMtZm9ybS1yZXBseVwiKVswXS5kYXRhc2V0LnBvc3QgPSBwb3N0SWRcbiAgICAgICAgJChcIi5qcy1mb3JtLXJlcGx5XCIpWzBdLmRhdGFzZXQucGFyZW50ID0gcGFyZW50SWRcbiAgICB9KVxufVxuXG4vL2xpa2VzIHN5c3RlbSBjb21tZW50XG5jb25zdCBvbkxpa2VidG4gPSAoKSA9PiB7XG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLmJ0bi1yZXBseS1saWtlXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MucGF0Y2goYC9kaXNjdXNzaW9uL2xpa2UtY29tbWVudC8ke3RoaXMuZGF0YXNldC5jb21tZW50SWR9YClcblxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoXCJsaWtlLWNsYXNzXCIpXG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUwudHJpbSgpLmxlbmd0aCA9PSAwID9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJIVE1MID0gcGFyc2VJbnQoMSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUwgPSBwYXJzZUludCh0aGlzLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTCkgKyAxXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwibGlrZS1jbGFzc1wiKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTC50cmltKCkgPT0gXCIxXCIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUwgPSBcIlwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJIVE1MID0gcGFyc2VJbnQodGhpcy5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUwpIC0gMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgfVxuICAgIH0pXG59XG4vL2RlbGV0ZSBjb21tZW50XG5jb25zdCBvbkRlbGV0ZUNvbW1lbnQgPSAoKSA9PiB7XG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLmpzLWRlbGV0ZS1jb21tZW50XCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmRhdGFzZXQudGhyZWFkSWRcbiAgICAgICAgY29uc3QgcG9zdElkID0gJChcIi5tYWluLXBvc3RcIilbMF0uZGF0YXNldC5wb3N0SWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmRlbGV0ZShgL2Rpc2N1c3Npb24vZGVsZXRlLyR7aWR9YCwge1xuICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICBwb3N0SWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgICAgICQoXCIuY250LXJlcGx5LWxpc3RcIikuaHRtbCgkKGRhdGEpLmZpbmQoXCIucmVwbHktbGlzdFwiKSkgLy9yZWxvYWQgcG9zdFxuICAgICAgICAgICAgICAgICQoXCIuY250LXRvcC1iYXItcG9zdFwiKS5odG1sKCQoZGF0YSkuZmluZChcIi50b3AtYmFyLXBvc3RcIikpIC8vcmVsb2FkIHRvcGJhclxuICAgICAgICAgICAgICAgICQoXCIucG9zdC1zY3JvbGxiYXItY250XCIpLmh0bWwoJChkYXRhKS5maW5kKFwiLnBvc3Qtc2Nyb2xsYmFyXCIpKSAvL3JvbGFkIHJhbmdlciBzbGlkZXJcbiAgICAgICAgICAgICAgICByYW5nZVNsaWRlcigpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgfVxuICAgIH0pXG5cbn1cblxuLy9yYW5nZXIgc3lzdGVtXG5jb25zdCByYW5nZVNsaWRlciA9ICgpID0+IHtcblxuICAgIGxldCByZXBseSA9ICQoXCIubWFpbi1yZXBseVwiKS5tYXAoKGlkeCwgZWwpID0+IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlbC5pZCA9PSBcInVuZGVmaW5lZFwiID8gXCJwb3N0LTFcIiA6IGVsLmlkXG4gICAgfSlcblxuXG4gICAgJChcIi5qcy1yYW5nZS1zbGlkZXJcIikuaW9uUmFuZ2VTbGlkZXIoe1xuICAgICAgICB2YWx1ZXM6IHJlcGx5LFxuICAgICAgICBza2luOiBcInJvdW5kXCJcbiAgICB9KTtcblxuICAgIGlmICgkKFwiLmlycy1ncmlkLXRleHRcIikudGV4dCgpID09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICQoXCIuaXJzLWdyaWQtdGV4dFwiKS50ZXh0KFwicmVwbHktMVwiKVxuICAgIH1cblxuICAgICQoXCIuanMtcmFuZ2Utc2xpZGVyXCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgdG9wT2ZFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dGhpcy52YWx1ZX1gKS5vZmZzZXRUb3AgLSAxMDA7XG4gICAgICAgIHdpbmRvdy5zY3JvbGwoe3RvcDogdG9wT2ZFbGVtZW50LCBiZWhhdmlvcjogXCJzbW9vdGhcIn0pO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMudmFsdWUpXG4gICAgfSlcblxuICAgICQoXCIub3JpZ2luYWwtcG9zdFwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oe1xuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICAgIH0pO1xuXG4gICAgfSlcblxuICAgICQoXCIubmV3LXBvc3RcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgJCgnaHRtbCxib2R5JykuYW5pbWF0ZSh7c2Nyb2xsVG9wOiA5OTk5fSwgJ3Nsb3cnKTtcbiAgICB9KVxuXG5cbn1cbi8vc2hvdyBoaWRlIHN1YmNvb21tZW50XG5jb25zdCBoYW5kbGVyUmVwbHkgPSAoKSA9PiB7XG5cbiAgICAkKFwiLmRpc2N1c3Npb25zLXJpZ2h0XCIpLm9uKFwiY2xpY2tcIiwgXCIuanMtc2hvdy1ib2R5XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb25TaG93Qm9keSgpXG4gICAgICAgICQoXCIuc2luZ2xlLXBvc3Qtc2hvd1wiKS5hZGRDbGFzcyhcImQtbm9uZVwiKVxuXG4gICAgICAgICQoXCIuanMtcmVwbHktYm9keVwiKS5lYWNoKChpZHgsIGVsKSA9PiB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKFwiZC1ub25lXCIpXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKFwiZC1mbGV4XCIpXG4gICAgICAgIH0pO1xuICAgIH0pXG5cbiAgICAkKFwiLmRpc2N1c3Npb25zLXJpZ2h0XCIpLm9uKFwiY2xpY2tcIiwgXCIuanMtaGlkZGVuLWJvZHlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBvbkhpZGVCb2R5KClcbiAgICAgICAgJChcIi5zaW5nbGUtcG9zdC1zaG93XCIpLnJlbW92ZUNsYXNzKFwiZC1ub25lXCIpXG4gICAgICAgICQoXCIuc2luZ2xlLXBvc3Qtc2hvd1wiKS5jaGlsZHJlbignaScpLmNzcygnY29sb3InLCAnI2MzYzNjMycpXG5cbiAgICAgICAgJChcIi5qcy1yZXBseS1ib2R5XCIpLmVhY2goKGlkeCwgZWwpID0+IHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIilcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoXCJkLWZsZXhcIilcbiAgICAgICAgfSk7XG4gICAgfSlcblxuXG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLnNpbmdsZS1wb3N0LXNob3dcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgY29tbWVudElkID0gdGhpcy5jbG9zZXN0KFwiLm1haW4tcG9zdFwiKS5kYXRhc2V0LmNvbW1lbnRJZFxuICAgICAgICBsZXQgZWxlbWVudCA9ICQoYC5qcy1yZXBseS1ib2R5W2RhdGEtY29tbWVudC1pZD0ke2NvbW1lbnRJZH1dYClcblxuXG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKFwiZC1ub25lXCIpKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKFwiZC1ub25lXCIpXG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKFwiZC1mbGV4XCIpXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuWzBdLnN0eWxlLmNvbG9yID0gJyM2NzY3NjcnXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKFwiZC1ub25lXCIpXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKFwiZC1mbGV4XCIpXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuWzBdLnN0eWxlLmNvbG9yID0gJyNjM2MzYzMnXG5cblxuICAgICAgICB9XG5cblxuICAgIH0pXG5cblxufVxuLy9oYW5kbGVyIGJlc3QgYW5zd2VyXG5jb25zdCBiZXN0QW5zd2VyID0gKCkgPT4ge1xuICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub24oXCJjbGlja1wiLCBcIi5qcy1iZXN0LWFuc3dlclwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoXCIuanMtYmVzdC1hbnN3ZXJcIikubm90KCQodGhpcykpLnJlbW92ZUNsYXNzKFwiaXMtYWN0aXZlLWJlc3RcIikuYWRkQ2xhc3MoXCJpcy1hY3RpdmUtYmVzdCB0ZXh0LWluZm9cIilcblxuICAgICAgICAkKFwiLmpzLWJlc3QtYW5zd2VyXCIpLm5vdCgkKHRoaXMpKS5jbG9zZXN0KFwiLm1haW4tcG9zdFwiKS5yZW1vdmVDbGFzcyhcImJlc3QtYW5zd2VyLWNudFwiKVxuXG5cbiAgICAgICAgaWYgKCQodGhpcykuaGFzQ2xhc3MoXCJpcy1hY3RpdmUtYmVzdFwiKSkge1xuXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmFkZENsYXNzKFwiYmVzdC1hbnN3ZXItY250XCIpXG5cbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJpcy1hY3RpdmUtYmVzdCB0ZXh0LWluZm9cIikuYWRkQ2xhc3MoXCJ0ZXh0LXN1Y2Nlc3NcIilcblxuICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5hcHBlbmQoJzxhIGhyZWY9XCIjXCIgY2xhc3M9XCJtbC0zIG10LTIgYmFkZ2UgYmFkZ2Utc3VjY2VzcyBiYWRnZS1iZXN0IGZvbnQtMTRcIj5CZXN0IEFuc3dlcjwvYT5cXG4nKTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgJCh0aGlzKS5jbG9zZXN0KFwiLm1haW4tcG9zdFwiKS5yZW1vdmVDbGFzcyhcImJlc3QtYW5zd2VyLWNudFwiKVxuXG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwidGV4dC1zdWNjZXNzXCIpLmFkZENsYXNzKFwiaXMtYWN0aXZlLWJlc3QgdGV4dC1pbmZvXCIpXG5cbiAgICAgICAgICAgICQodGhpcykucGFyZW50KCkuZmluZChcIi5iYWRnZS1iZXN0XCIpLnJlbW92ZSgpXG5cbiAgICAgICAgfVxuXG4gICAgICAgICQoXCIuanMtYmVzdC1hbnN3ZXJcIikubm90KCQodGhpcykpLnBhcmVudCgpLmZpbmQoXCIuYmFkZ2UtYmVzdFwiKS5yZW1vdmUoKTtcblxuXG4gICAgICAgIGxldCBjb21tZW50SWQgPSAkKHRoaXMpLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmRhdGEoXCJ0aHJlYWRJZFwiKVxuICAgICAgICBsZXQgcG9zdElkID0gJChcIi5tYWluLXBvc3RcIilbMF0uZGF0YXNldC5wb3N0SWQ7XG5cbiAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5wYXRjaChgL2Rpc2N1c3Npb24vYmVzdC8ke2NvbW1lbnRJZH1gLCB7XG4gICAgICAgICAgICAgICAgcG9zdElkXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgfVxuXG4gICAgfSlcblxuXG59XG5cbi8vaGFuZGxlciBjbG9zZXMgcG9zdFxuY29uc3QgY2xvc2VkUG9zdCA9ICgpID0+IHtcbiAgICBzdHlsZUNsb3NlZFBvc3QoKVxuXG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLmpzLXBvc3QtY2xvc2VkXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHBvc3RJZCA9ICQoXCIubWFpbi1wb3N0XCIpWzBdLmRhdGFzZXQucG9zdElkO1xuXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHtzdGF0dXN9ID0gYXdhaXQgYXhpb3MucGF0Y2goYC9kaXNjdXNzaW9uL2Nsb3NlZC8ke3Bvc3RJZH1gKVxuXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJiYWRnZS1kYW5nZXJcIilcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnRvZ2dsZUNsYXNzKFwiYmFkZ2UtaW5mb1wiKVxuICAgICAgICAgICAgICAgICQodGhpcykuc2libGluZ3MoXCJhXCIpLnRvZ2dsZUNsYXNzKFwiZC1ub25lXCIpXG4gICAgICAgICAgICAgICAgJChcIi5qcy1jb21tZW50LXJlcGx5XCIpLnRvZ2dsZUNsYXNzKFwiZC1ub25lXCIpXG4gICAgICAgICAgICAgICAgJChcIi5qcy1zdWItY29tbWVudC1yZXBseVwiKS50b2dnbGVDbGFzcyhcImQtbm9uZVwiKVxuICAgICAgICAgICAgICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikuZmluZChcIi5maXJzdC10aHJlYWQtcmVwbGF5XCIpLnRvZ2dsZUNsYXNzKFwiZC1ub25lXCIpXG4gICAgICAgICAgICAgICAgJChcIi51bC10aHJlYWRcIikuZmluZChcIi5maXJzdC10aHJlYWQtcmVwbGF5XCIpLnRvZ2dsZVRleHQoJ0NMT1NFRCcsICfOkc6gzpHOnc6kzpfOo86XJykudG9nZ2xlQ2xhc3MoXCJiZy1kYW5nZXJcIik7XG4gICAgICAgICAgICAgICAgc3R5bGVDbG9zZWRQb3N0KClcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlKSB7XG5cbiAgICAgICAgfVxuXG5cbiAgICB9KVxufVxuXG4vL3N0eWxlIGNsb3NlcyBwb3N0XG5jb25zdCBzdHlsZUNsb3NlZFBvc3QgPSAoKSA9PiB7XG5cblxuICAgIGlmICgkKFwiLmpzLXBvc3QtY2xvc2VkXCIpLmhhc0NsYXNzKFwiYmFkZ2UtZGFuZ2VyXCIpIHx8ISQoXCIuYmFkZ2UtZGFuZ2VyXCIpLmhhc0NsYXNzKFwiZC1ub25lXCIpICkge1xuICAgICAgICAkKFwiLnVsLXRocmVhZFwiKS5maW5kKFwiLmZpcnN0LXRocmVhZC1yZXBsYXlcIikudGV4dChcIkNMT1NFRFwiKS5hZGRDbGFzcyhcImJnLWRhbmdlclwiKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpXG5cbiAgICAgICAgJChcIi51bC10aHJlYWRcIikuZmluZChcIi5maXJzdC10aHJlYWQtcmVwbGF5XCIpLm1vdXNlb3ZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkKHRoaXMpLmNzcyhcImN1cnNvclwiLCBcIm5vdC1hbGxvd2VkXCIpO1xuICAgICAgICB9KVxuICAgICAgICAkKFwiLnVsLXRocmVhZFwiKS5maW5kKFwiLmZpcnN0LXRocmVhZC1yZXBsYXlcIikubW91c2VvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5jc3MoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpO1xuICAgICAgICB9KVxuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgJChcIi51bC10aHJlYWRcIikuZmluZChcIi5maXJzdC10aHJlYWQtcmVwbGF5XCIpLnRleHQoXCLOkc6gzpHOnc6kzpfOo86XXCIpLnJlbW92ZUNsYXNzKFwiYmctZGFuZ2VyXCIpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpXG5cbiAgICAgICAgJChcIi51bC10aHJlYWRcIikuZmluZChcIi5maXJzdC10aHJlYWQtcmVwbGF5XCIpLnVuYmluZCgnbW91c2VvdmVyJykudW5iaW5kKCdtb3VzZW91dCcpO1xuXG4gICAgfVxufVxuXG4vL2FsbCB0aHJlYWQgc2lkZWJhclxuJChcIi5kaXNjdXNzaW9ucy1sZWZ0XCIpLm9uKFwiY2xpY2tcIiwgXCIjZmlsdGVyLWFsbC10aHJlYWRzXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmdldChcIi9kaXNjdXNzaW9uXCIpXG4gICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICBheGlvc1VwZGF0ZU1haW4oJCh0aGlzKSwgZGF0YSlcbiAgICAgICAgfVxuXG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgfVxufSlcbi8vbXkgcXVlc3Rpb24gc2lkZWJhclxuJChcIi5kaXNjdXNzaW9ucy1sZWZ0XCIpLm9uKFwiY2xpY2tcIiwgXCIjZmlsdGVyLW15LXF1ZXN0aW9uXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MuZ2V0KFwiL2Rpc2N1c3Npb24vbXktcXVlc3Rpb25cIilcblxuICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgYXhpb3NVcGRhdGVNYWluKCQodGhpcyksIGRhdGEpXG4gICAgICAgIH1cblxuXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cbn0pXG4vL215IHNpbWV0b3hpIHNlIHBvc3RcbiQoXCIuZGlzY3Vzc2lvbnMtbGVmdFwiKS5vbihcImNsaWNrXCIsIFwiI2ZpbHRlci1wYXJ0aWNpcGF0aW9uXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MuZ2V0KFwiL2Rpc2N1c3Npb24vcGFydGljaXBhdGlvblwiKVxuXG4gICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICBheGlvc1VwZGF0ZU1haW4oJCh0aGlzKSwgZGF0YSlcbiAgICAgICAgfVxuXG5cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGUpXG4gICAgfVxufSlcbi8vbXkga2FsaXRlcmkgYXBhbnRpc2lcbiQoXCIuZGlzY3Vzc2lvbnMtbGVmdFwiKS5vbihcImNsaWNrXCIsIFwiI2ZpbHRlci1iZXN0LWFuc3dlclwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmdldChcIi9kaXNjdXNzaW9uL2Jlc3QtYW5zd2VyXCIpXG5cbiAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgIGF4aW9zVXBkYXRlTWFpbigkKHRoaXMpLCBkYXRhKVxuICAgICAgICB9XG5cblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICB9XG59KVxuLy9teSBwb3B1bGFyIHRoaXMgd3dla1xuJChcIi5kaXNjdXNzaW9ucy1sZWZ0XCIpLm9uKFwiY2xpY2tcIiwgXCIjZmlsdGVyLXBvcHVsYXItd2Vla1wiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmdldChcIi9kaXNjdXNzaW9uL3BvcHVsYXItd2Vla1wiKVxuXG4gICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XG4gICAgICAgICAgICBheGlvc1VwZGF0ZU1haW4oJCh0aGlzKSwgZGF0YSlcbiAgICAgICAgICAgICQoXCIuZmlsdGVyLXRocmVhZFwiKS5jaGlsZHJlbigpLmZpcnN0KCkuY3NzKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuICAgICAgICB9XG5cblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICB9XG59KVxuLy9teSBwb3B1bGFyIGFsbCB0aW1lXG4kKFwiLmRpc2N1c3Npb25zLWxlZnRcIikub24oXCJjbGlja1wiLCBcIiNmaWx0ZXItcG9wdWxhci1hbGxUaW1lXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MuZ2V0KFwiL2Rpc2N1c3Npb24vcG9wdWxhci1hbGxUaW1lXCIpXG5cbiAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgIGF4aW9zVXBkYXRlTWFpbigkKHRoaXMpLCBkYXRhKVxuICAgICAgICAgICAgJChcIi5maWx0ZXItdGhyZWFkXCIpLmNoaWxkcmVuKCkuZmlyc3QoKS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG4gICAgICAgIH1cblxuXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cbn0pXG4vL215IHBvc3QgcG91IGVpbmFpIGNsb3NlZFxuJChcIi5kaXNjdXNzaW9ucy1sZWZ0XCIpLm9uKFwiY2xpY2tcIiwgXCIjZmlsdGVyLWlzQ2xvc2VkXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MuZ2V0KFwiL2Rpc2N1c3Npb24vaXNDbG9zZWRcIilcblxuICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgYXhpb3NVcGRhdGVNYWluKCQodGhpcyksIGRhdGEpXG4gICAgICAgIH1cblxuXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cbn0pXG4vL215IHhvcmlzIGFwYW50aXNpXG4kKFwiLmRpc2N1c3Npb25zLWxlZnRcIikub24oXCJjbGlja1wiLCBcIiNmaWx0ZXItbm8tcmVwbGllc1wiLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmdldChcIi9kaXNjdXNzaW9uL25vLXJlcGxpZXNcIilcblxuICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xuICAgICAgICAgICAgYXhpb3NVcGRhdGVNYWluKCQodGhpcyksIGRhdGEpXG4gICAgICAgIH1cblxuXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgIH1cbn0pXG5cblxuXG5cblxuLy8gJFIoXCIjcG9zdC1ib2R5XCIsIHtcbi8vICAgICBidXR0b25zOiBbXG4vLyAgICAgICAgICdodG1sJywgJ3VuZG8nLCAncmVkbycsICdmb3JtYXQnLFxuLy8gICAgICAgICAnYm9sZCcsICd1bmRlcmxpbmUnLCAnaXRhbGljJywgJ2RlbGV0ZWQnLFxuLy8gICAgICAgICAnc3VwJywgJ3N1YicsICdsaXN0cycsICdmaWxlJywgJ2xpbmsnLCAnaW1hZ2UnXG4vLyAgICAgXSxcbi8vICAgICBzdHlsZTogZmFsc2UsXG4vLyAgICAgcGx1Z2luczogWyAnYWxpZ25tZW50J10sXG4vLyAgICAgbWluSGVpZ2h0OiAnMTUwcHgnLFxuLy8gICAgIGltYWdlUmVzaXphYmxlOiB0cnVlLFxuLy8gICAgIGltYWdlUG9zaXRpb24gOiB7XG4vLyAgICAgICAgIFwibGVmdFwiOiBcImltYWdlLWxlZnRcIixcbi8vICAgICAgICAgXCJyaWdodFwiOiBcImltYWdlLXJpZ2h0XCIsXG4vLyAgICAgICAgIFwiY2VudGVyXCI6IFwiaW1hZ2UtY2VudGVyIHRleHQtY2VudGVyXCJcbi8vICAgICB9LFxuLy8gICAgIGltYWdlRmxvYXRNYXJnaW46ICcyMHB4Jyxcbi8vICAgICBpbWFnZVVwbG9hZDogXCIvbWVkaWEvdXBsb2FkLWltYWdlc1wiLFxuLy8gICAgIGNhbGxiYWNrczoge1xuLy8gICAgICAgICB1cGxvYWQ6IHtcbi8vICAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKHhocilcbi8vICAgICAgICAgICAgIHtcbi8vICAgICAgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignWC1DU1JGLVRva2VuJywgJCgnbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKSk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9KTtcblxuXG5cblxuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/index/discussions/discussions.js\n");
=======
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//pagination event\n$(document).on(\"click\", \".pagination a\", /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(e) {\n    var href, option, _yield$axios$get, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n            href = this.href;\n            option = $(\".filter-sidebar\")[0].options[$(\".filter-sidebar\")[0].selectedIndex].value;\n            _context.next = 5;\n            return axios.get(href, {\n              params: {\n                option: option\n              },\n              headers: {\n                'Access-Control-Allow-Origin': '*'\n              }\n            });\n\n          case 5:\n            _yield$axios$get = _context.sent;\n            data = _yield$axios$get.data;\n            status = _yield$axios$get.status;\n\n            if (status == 200) {\n              $(\".cnt-threads-main-list\").html($(data).find(\".threads-main-list\"));\n              onHideBody();\n            }\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}());\n$(\".first-thread\").hide();\n\nvar eventTopBar = function eventTopBar() {\n  $(\".discussions-right\").on(\"change\", \".filter-sidebar\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee2() {\n    var course, option, filterName, _yield$axios$get2, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            course = $(\".filter-course\")[0].options[$(\".filter-course\")[0].selectedIndex].value;\n            option = $(\".filter-sidebar\")[0].options[$(\".filter-sidebar\")[0].selectedIndex].value;\n            filterName = $(\".active-thread\").attr('id').replace(\"filter-\", \"\");\n            filterName = filterName == \"all-threads\" ? \"\" : filterName;\n            _context2.next = 6;\n            return axios.get(\"/discussion/\".concat(filterName), {\n              params: {\n                option: option,\n                course: course\n              }\n            });\n\n          case 6:\n            _yield$axios$get2 = _context2.sent;\n            data = _yield$axios$get2.data;\n            status = _yield$axios$get2.status;\n\n            if (status == 200) {\n              $(\".cnt-threads-main-list\").html($(data).find(\".threads-main-list\"));\n              onHideBody();\n            }\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n  $(\".discussions-right\").on(\"change\", \".filter-course\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee3() {\n    var course, option, _yield$axios$get3, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            course = $(\".filter-course\")[0].options[$(\".filter-course\")[0].selectedIndex].value;\n            option = $(\".filter-sidebar\")[0].options[$(\".filter-sidebar\")[0].selectedIndex].value;\n            _context3.next = 4;\n            return axios.get(\"/discussion/change/filter-course\", {\n              params: {\n                option: option,\n                course: course\n              }\n            });\n\n          case 4:\n            _yield$axios$get3 = _context3.sent;\n            data = _yield$axios$get3.data;\n            status = _yield$axios$get3.status;\n\n            if (status == 200) {\n              $(\".cnt-threads-main-list\").html($(data).find(\".threads-main-list\"));\n              onHideBody();\n            }\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }))); // filter show body\n\n  $(\".discussions-right\").on(\"click\", \".js-show-body\", function () {\n    onShowBody();\n    $(\".js-post-body\").each(function (idx, el) {\n      el.classList.remove(\"d-none\");\n    });\n  });\n  $(\".discussions-right\").on(\"click\", \".js-hidden-body\", function () {\n    onHideBody();\n    $(\".js-post-body\").each(function (idx, el) {\n      el.classList.add(\"d-none\");\n    });\n  });\n};\n\neventTopBar(); // Evenet listener show body\n\nvar onHideBody = function onHideBody() {\n  $(\".js-hidden-body\")[0].classList.add(\"js-body-active\");\n  $(\".js-show-body\")[0].classList.remove(\"js-body-active\");\n};\n\nvar onShowBody = function onShowBody() {\n  $(\".js-show-body\")[0].classList.add(\"js-body-active\");\n  $(\".js-hidden-body\")[0].classList.remove(\"js-body-active\");\n}; // Evenet change first button\n\n\nvar onChangeFirstButtonNew = function onChangeFirstButtonNew() {\n  var firstBtn = $(\".first-thread\");\n  firstBtn[0].innerHTML = \"\\u0391\\u03A0\\u0391\\u039D\\u03A4\\u0397\\u03A3\\u0397\";\n  firstBtn[0].dataset.target = \"#new-reply\";\n  firstBtn[0].classList.add(\"first-thread-replay\");\n  firstBtn[0].classList.remove(\"first-thread\");\n  onFirstReplayBtnEvent();\n};\n\nvar onChangeFirstButtonReplay = function onChangeFirstButtonReplay() {\n  if ($(\".first-thread-replay\").length) {\n    var firstBtn = $(\".first-thread-replay\");\n    firstBtn[0].innerHTML = \"NEO POST\";\n    firstBtn[0].dataset.target = \"#new-threads\";\n    firstBtn[0].classList.remove(\"first-thread-replay\");\n    firstBtn[0].classList.add(\"first-thread\");\n    firstBtn[0].disabled = false; //new na ta tsekarw!\n\n    firstBtn[0].classList.remove(\"bg-danger\");\n    $(\".ul-thread\").find(\".first-thread\").unbind('mouseover').unbind('mouseout');\n  }\n}; //update main page reload\n\n\nvar axiosUpdateMain = function axiosUpdateMain(that, data) {\n  $(\".ul-thread .bg-thread\").removeClass(\"active-thread\");\n  $(that).addClass(\"active-thread\");\n  $(\".discussions-right\").html($(data).find(\".discussions-right> *\"));\n  onHideBody();\n  onChangeFirstButtonReplay();\n  $(\".first-thread\").hide();\n}; // submit create form\n\n\n$(\".js-form-create\").on(\"click\", /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee4(e) {\n    var title, course, _yield$axios$post, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            e.preventDefault();\n            title = $('input#post-title').val();\n            course = $('#post-course').val();\n            this.disabled = true;\n\n            if (title) {\n              _context4.next = 7;\n              break;\n            }\n\n            if (!$(\".validate-form-post-body\").length) {\n              $('#new-threads').modal('show');\n              $(\"<p class='text-danger mt-2 validate-form-post-body'>*Συμπληρώστε όλα τα παιδιά</p>\").insertAfter(\"#post-body\");\n            }\n\n            return _context4.abrupt(\"return\");\n\n          case 7:\n            _context4.prev = 7;\n            _context4.next = 10;\n            return axios.post(\"/discussion/post/store-thread\", {\n              title: title,\n              course: course\n            });\n\n          case 10:\n            _yield$axios$post = _context4.sent;\n            data = _yield$axios$post.data;\n            status = _yield$axios$post.status;\n\n            if (status == 200) {\n              $(\".discussions-right\").html($(data).find(\".discussions-right> *\"));\n              onHideBody();\n              $('#new-threads').modal('hide');\n              $('#form-create-thread')[0].reset();\n              this.disabled = false;\n            }\n\n            _context4.next = 19;\n            break;\n\n          case 16:\n            _context4.prev = 16;\n            _context4.t0 = _context4[\"catch\"](7);\n            console.log(_context4.t0);\n\n          case 19:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, this, [[7, 16]]);\n  }));\n\n  return function (_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}()); // submit reply form\n\n$(\".js-form-reply\").on(\"click\", /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee5(e) {\n    var body, postId, parentId, _yield$axios$post2, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            e.preventDefault();\n            body = $('textarea#reply-body').val();\n\n            if (body) {\n              _context5.next = 7;\n              break;\n            }\n\n            if (!$(\".validate-form-post\").length) {\n              $('#new-reply').modal('show');\n              $(\"<p class='text-danger mt-2 validate-form-post'>*Tο πεδίο είναι απαραίτητο</p>\").insertAfter(\"#reply-body\");\n            }\n\n            return _context5.abrupt(\"return\");\n\n          case 7:\n            body = \"<span class=\\\"text-info\\\">\".concat($(\".replay-name\").text(), \"</span> \").concat(body);\n\n          case 8:\n            postId = this.dataset.post;\n            parentId = this.dataset.parent;\n            this.disabled = true;\n            $(\".validate-form-post\").remove();\n            _context5.prev = 12;\n            _context5.next = 15;\n            return axios.post(\"/discussion/post/store-reply\", {\n              postId: postId,\n              parentId: parentId,\n              body: body\n            });\n\n          case 15:\n            _yield$axios$post2 = _context5.sent;\n            data = _yield$axios$post2.data;\n            status = _yield$axios$post2.status;\n\n            if (status == 200) {\n              $(\".cnt-reply-list\").html($(data).find(\".reply-list\")); //reload post\n\n              $(\".cnt-top-bar-post\").html($(data).find(\".top-bar-post\")); //reload topbar\n\n              $(\".post-scrollbar-cnt\").html($(data).find(\".post-scrollbar\")); //rolad ranger slider\n\n              rangeSlider();\n              $('#new-reply').modal('hide');\n              $('#form-create-reply')[0].reset();\n              this.disabled = false;\n            }\n\n            _context5.next = 24;\n            break;\n\n          case 21:\n            _context5.prev = 21;\n            _context5.t0 = _context5[\"catch\"](12);\n            console.log(_context5.t0);\n\n          case 24:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, this, [[12, 21]]);\n  }));\n\n  return function (_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}()); // show post\n\n$(document).on(\"click\", '.js-thread-title', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee6() {\n  var postId, _yield$axios$get4, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          postId = this.closest(\".single-thread\").dataset.postId;\n          _context6.prev = 1;\n          _context6.next = 4;\n          return axios.get(\"/discussion/\".concat(postId));\n\n        case 4:\n          _yield$axios$get4 = _context6.sent;\n          data = _yield$axios$get4.data;\n          status = _yield$axios$get4.status;\n\n          if (status === 200) {\n            $(\".discussions-right\").off();\n            $(\".discussions-right\").html(data);\n            $(\".first-thread\").show();\n            onChangeFirstButtonNew();\n            onCommentReplayBtnEvent();\n            onSubCommentReplayBtnEvent();\n            onLikebtn();\n            onDeleteComment();\n            rangeSlider();\n            handlerReply();\n            bestAnswer();\n            closedPost();\n            eventTopBar();\n          }\n\n          _context6.next = 13;\n          break;\n\n        case 10:\n          _context6.prev = 10;\n          _context6.t0 = _context6[\"catch\"](1);\n          console.log(_context6.t0);\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _callee6, this, [[1, 10]]);\n}))); // search\n\n$(document).on(\"keyup\", \".js-search-post\", /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee7(e) {\n    var term, _yield$axios$post3, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            term = e.target.value;\n\n            if (!(e.keyCode === 13 && term.length >= 3)) {\n              _context7.next = 14;\n              break;\n            }\n\n            _context7.prev = 2;\n            _context7.next = 5;\n            return axios.post(\"/discussion/search\", {\n              term: term\n            });\n\n          case 5:\n            _yield$axios$post3 = _context7.sent;\n            data = _yield$axios$post3.data;\n            status = _yield$axios$post3.status;\n\n            if (status == 200) {\n              $(\".discussions-right\").html($(data).find(\".discussions-right>*\"));\n              e.target.value = \"\";\n              $('#centermodal').modal('hide');\n              onHideBody();\n            }\n\n            _context7.next = 14;\n            break;\n\n          case 11:\n            _context7.prev = 11;\n            _context7.t0 = _context7[\"catch\"](2);\n            console.log(_context7.t0);\n\n          case 14:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[2, 11]]);\n  }));\n\n  return function (_x4) {\n    return _ref7.apply(this, arguments);\n  };\n}()); // Global search\n\n$(document).on(\"keyup\", function (e) {\n  if (e.keyCode === 191) {\n    if (!$(\".js-search-snippet\").length) $(\"<span class='js-search-snippet' data-toggle='modal' data-target='#centermodal'></span>\").insertBefore('#centermodal');\n    $(\".js-search-snippet\").click();\n    $('#centermodal').on('shown.bs.modal', function () {\n      $('.css-search-snippet').focus();\n    });\n  }\n}); //replay comment first button\n\nvar onFirstReplayBtnEvent = function onFirstReplayBtnEvent() {\n  $(document).on(\"click\", \".first-thread-replay\", function () {\n    var postId = $(\".main-post\")[0].dataset.postId;\n    var parentId = 0;\n    $(\"#new-reply\").find(\".replay-name\").text(\"\");\n    $(\".js-form-reply\")[0].dataset.post = postId;\n    $(\".js-form-reply\")[0].dataset.parent = parentId;\n  });\n}; //replay comment\n\n\nvar onCommentReplayBtnEvent = function onCommentReplayBtnEvent() {\n  $(\".discussions-right\").on(\"click\", \".js-comment-reply\", function () {\n    var postId = $(\".main-post\")[0].dataset.postId;\n    var parentId = this.closest(\".main-post\").dataset.commentId;\n    var author = $(this).closest(\".main-post\").find(\".author-post-name\").text();\n    $(\"#new-reply\").find(\".replay-name\").text(\"@\".concat(author));\n    $(\".js-form-reply\")[0].dataset.post = postId;\n    $(\".js-form-reply\")[0].dataset.parent = parentId;\n  });\n}; //replay subcomment\n\n\nvar onSubCommentReplayBtnEvent = function onSubCommentReplayBtnEvent() {\n  $(\".discussions-right\").on(\"click\", \".js-sub-comment-reply\", function () {\n    var postId = $(\".main-post\")[0].dataset.postId;\n    var parentId = this.closest(\".main-post\").dataset.commentId;\n    var author = $(this).closest(\".main-post\").find(\".author-post-name\").text();\n    $(\"#new-reply\").find(\".replay-name\").text(\"@\".concat(author));\n    $(\".js-form-reply\")[0].dataset.post = postId;\n    $(\".js-form-reply\")[0].dataset.parent = parentId;\n  });\n}; //likes system comment\n\n\nvar onLikebtn = function onLikebtn() {\n  $(\".discussions-right\").on(\"click\", \".btn-reply-like\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee8() {\n    var _yield$axios$patch, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return axios.patch(\"/discussion/like-comment/\".concat(this.dataset.commentId));\n\n          case 3:\n            _yield$axios$patch = _context8.sent;\n            data = _yield$axios$patch.data;\n            status = _yield$axios$patch.status;\n\n            if (status == 200) {\n              if (data) {\n                this.classList.add(\"like-class\");\n                this.firstElementChild.innerHTML.trim().length == 0 ? this.firstElementChild.innerHTML = parseInt(1) : this.firstElementChild.innerHTML = parseInt(this.firstElementChild.innerHTML) + 1;\n              } else {\n                this.classList.remove(\"like-class\");\n                this.firstElementChild.innerHTML.trim() == \"1\" ? this.firstElementChild.innerHTML = \"\" : this.firstElementChild.innerHTML = parseInt(this.firstElementChild.innerHTML) - 1;\n              }\n            }\n\n            _context8.next = 12;\n            break;\n\n          case 9:\n            _context8.prev = 9;\n            _context8.t0 = _context8[\"catch\"](0);\n            console.log(_context8.t0);\n\n          case 12:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, this, [[0, 9]]);\n  })));\n}; //delete comment\n\n\nvar onDeleteComment = function onDeleteComment() {\n  $(\".discussions-right\").on(\"click\", \".js-delete-comment\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee9() {\n    var id, postId, _yield$axios$delete, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            id = this.closest(\".main-post\").dataset.threadId;\n            postId = $(\".main-post\")[0].dataset.postId;\n            _context9.prev = 2;\n            _context9.next = 5;\n            return axios[\"delete\"](\"/discussion/delete/\".concat(id), {\n              params: {\n                postId: postId\n              }\n            });\n\n          case 5:\n            _yield$axios$delete = _context9.sent;\n            data = _yield$axios$delete.data;\n            status = _yield$axios$delete.status;\n\n            if (status == 200) {\n              $(\".cnt-reply-list\").html($(data).find(\".reply-list\")); //reload post\n\n              $(\".cnt-top-bar-post\").html($(data).find(\".top-bar-post\")); //reload topbar\n\n              $(\".post-scrollbar-cnt\").html($(data).find(\".post-scrollbar\")); //rolad ranger slider\n\n              rangeSlider();\n            }\n\n            _context9.next = 14;\n            break;\n\n          case 11:\n            _context9.prev = 11;\n            _context9.t0 = _context9[\"catch\"](2);\n            console.log(_context9.t0);\n\n          case 14:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, this, [[2, 11]]);\n  })));\n}; //ranger system\n\n\nvar rangeSlider = function rangeSlider() {\n  var reply = $(\".main-reply\").map(function (idx, el) {\n    return typeof el.id == \"undefined\" ? \"post-1\" : el.id;\n  });\n  $(\".js-range-slider\").ionRangeSlider({\n    values: reply,\n    skin: \"round\"\n  });\n\n  if ($(\".irs-grid-text\").text() == 'undefined') {\n    $(\".irs-grid-text\").text(\"reply-1\");\n  }\n\n  $(\".js-range-slider\").on(\"change\", function () {\n    var topOfElement = document.querySelector(\"#\".concat(this.value)).offsetTop - 100;\n    window.scroll({\n      top: topOfElement,\n      behavior: \"smooth\"\n    });\n    console.log(this.value);\n  });\n  $(\".original-post\").on(\"click\", function () {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  });\n  $(\".new-post\").on(\"click\", function () {\n    $('html,body').animate({\n      scrollTop: 9999\n    }, 'slow');\n  });\n}; //show hide subcoomment\n\n\nvar handlerReply = function handlerReply() {\n  $(\".discussions-right\").on(\"click\", \".js-show-body\", function () {\n    onShowBody();\n    $(\".single-post-show\").addClass(\"d-none\");\n    $(\".js-reply-body\").each(function (idx, el) {\n      el.classList.remove(\"d-none\");\n      el.classList.add(\"d-flex\");\n    });\n  });\n  $(\".discussions-right\").on(\"click\", \".js-hidden-body\", function () {\n    onHideBody();\n    $(\".single-post-show\").removeClass(\"d-none\");\n    $(\".single-post-show\").children('i').css('color', '#c3c3c3');\n    $(\".js-reply-body\").each(function (idx, el) {\n      el.classList.add(\"d-none\");\n      el.classList.remove(\"d-flex\");\n    });\n  });\n  $(\".discussions-right\").on(\"click\", \".single-post-show\", function () {\n    var commentId = this.closest(\".main-post\").dataset.commentId;\n    var element = $(\".js-reply-body[data-comment-id=\".concat(commentId, \"]\"));\n\n    if (element.hasClass(\"d-none\")) {\n      element.removeClass(\"d-none\");\n      element.addClass(\"d-flex\");\n      this.children[0].style.color = '#676767';\n    } else {\n      element.addClass(\"d-none\");\n      element.removeClass(\"d-flex\");\n      this.children[0].style.color = '#c3c3c3';\n    }\n  });\n}; //handler best answer\n\n\nvar bestAnswer = function bestAnswer() {\n  $(\".discussions-right\").on(\"click\", \".js-best-answer\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee10() {\n    var commentId, postId, _yield$axios$patch2, data, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            $(\".js-best-answer\").not($(this)).removeClass(\"is-active-best\").addClass(\"is-active-best text-info\");\n            $(\".js-best-answer\").not($(this)).closest(\".main-post\").removeClass(\"best-answer-cnt\");\n\n            if ($(this).hasClass(\"is-active-best\")) {\n              $(this).closest(\".main-post\").addClass(\"best-answer-cnt\");\n              $(this).removeClass(\"is-active-best text-info\").addClass(\"text-success\");\n              $(this).parent().append('<a href=\"#\" class=\"ml-3 mt-2 badge badge-success badge-best font-14\">Best Answer</a>\\n');\n            } else {\n              $(this).closest(\".main-post\").removeClass(\"best-answer-cnt\");\n              $(this).removeClass(\"text-success\").addClass(\"is-active-best text-info\");\n              $(this).parent().find(\".badge-best\").remove();\n            }\n\n            $(\".js-best-answer\").not($(this)).parent().find(\".badge-best\").remove();\n            commentId = $(this).closest(\".main-post\").data(\"threadId\");\n            postId = $(\".main-post\")[0].dataset.postId;\n            _context10.prev = 6;\n            _context10.next = 9;\n            return axios.patch(\"/discussion/best/\".concat(commentId), {\n              postId: postId\n            });\n\n          case 9:\n            _yield$axios$patch2 = _context10.sent;\n            data = _yield$axios$patch2.data;\n            status = _yield$axios$patch2.status;\n\n            if (status == 200) {}\n\n            _context10.next = 18;\n            break;\n\n          case 15:\n            _context10.prev = 15;\n            _context10.t0 = _context10[\"catch\"](6);\n            console.log(_context10.t0);\n\n          case 18:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, this, [[6, 15]]);\n  })));\n}; //handler closes post\n\n\nvar closedPost = function closedPost() {\n  styleClosedPost();\n  $(\".discussions-right\").on(\"click\", \".js-post-closed\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee11() {\n    var postId, _yield$axios$patch3, status;\n\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            postId = $(\".main-post\")[0].dataset.postId;\n            _context11.prev = 1;\n            _context11.next = 4;\n            return axios.patch(\"/discussion/closed/\".concat(postId));\n\n          case 4:\n            _yield$axios$patch3 = _context11.sent;\n            status = _yield$axios$patch3.status;\n\n            if (status == 200) {\n              $(this).toggleClass(\"badge-danger\");\n              $(this).toggleClass(\"badge-info\");\n              $(this).siblings(\"a\").toggleClass(\"d-none\");\n              $(\".js-comment-reply\").toggleClass(\"d-none\");\n              $(\".js-sub-comment-reply\").toggleClass(\"d-none\");\n              $(\".discussions-right\").find(\".first-thread-replay\").toggleClass(\"d-none\");\n              $(\".ul-thread\").find(\".first-thread-replay\").toggleText('CLOSED', 'ΑΠΑΝΤΗΣΗ').toggleClass(\"bg-danger\");\n              styleClosedPost();\n            }\n\n            _context11.next = 11;\n            break;\n\n          case 9:\n            _context11.prev = 9;\n            _context11.t0 = _context11[\"catch\"](1);\n\n          case 11:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11, this, [[1, 9]]);\n  })));\n}; //style closes post\n\n\nvar styleClosedPost = function styleClosedPost() {\n  if ($(\".js-post-closed\").hasClass(\"badge-danger\") || !$(\".badge-danger\").hasClass(\"d-none\")) {\n    $(\".ul-thread\").find(\".first-thread-replay\").text(\"CLOSED\").addClass(\"bg-danger\").prop('disabled', true);\n    $(\".ul-thread\").find(\".first-thread-replay\").mouseover(function () {\n      $(this).css(\"cursor\", \"not-allowed\");\n    });\n    $(\".ul-thread\").find(\".first-thread-replay\").mouseout(function () {\n      $(this).css(\"cursor\", \"pointer\");\n    });\n  } else {\n    $(\".ul-thread\").find(\".first-thread-replay\").text(\"ΑΠΑΝΤΗΣΗ\").removeClass(\"bg-danger\").prop('disabled', false);\n    $(\".ul-thread\").find(\".first-thread-replay\").unbind('mouseover').unbind('mouseout');\n  }\n}; //all thread sidebar\n\n\n$(\".discussions-left\").on(\"click\", \"#filter-all-threads\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee12() {\n  var _yield$axios$get5, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee12$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return axios.get(\"/discussion\");\n\n        case 3:\n          _yield$axios$get5 = _context12.sent;\n          data = _yield$axios$get5.data;\n          status = _yield$axios$get5.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context12.next = 12;\n          break;\n\n        case 9:\n          _context12.prev = 9;\n          _context12.t0 = _context12[\"catch\"](0);\n          console.log(_context12.t0);\n\n        case 12:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _callee12, this, [[0, 9]]);\n}))); //my question sidebar\n\n$(\".discussions-left\").on(\"click\", \"#filter-my-question\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee13() {\n  var _yield$axios$get6, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee13$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return axios.get(\"/discussion/my-question\");\n\n        case 3:\n          _yield$axios$get6 = _context13.sent;\n          data = _yield$axios$get6.data;\n          status = _yield$axios$get6.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context13.next = 12;\n          break;\n\n        case 9:\n          _context13.prev = 9;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.log(_context13.t0);\n\n        case 12:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _callee13, this, [[0, 9]]);\n}))); //my simetoxi se post\n\n$(\".discussions-left\").on(\"click\", \"#filter-participation\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee14() {\n  var _yield$axios$get7, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee14$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.prev = 0;\n          _context14.next = 3;\n          return axios.get(\"/discussion/participation\");\n\n        case 3:\n          _yield$axios$get7 = _context14.sent;\n          data = _yield$axios$get7.data;\n          status = _yield$axios$get7.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context14.next = 12;\n          break;\n\n        case 9:\n          _context14.prev = 9;\n          _context14.t0 = _context14[\"catch\"](0);\n          console.log(_context14.t0);\n\n        case 12:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _callee14, this, [[0, 9]]);\n}))); //my kaliteri apantisi\n\n$(\".discussions-left\").on(\"click\", \"#filter-best-answer\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee15() {\n  var _yield$axios$get8, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee15$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return axios.get(\"/discussion/best-answer\");\n\n        case 3:\n          _yield$axios$get8 = _context15.sent;\n          data = _yield$axios$get8.data;\n          status = _yield$axios$get8.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context15.next = 12;\n          break;\n\n        case 9:\n          _context15.prev = 9;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.log(_context15.t0);\n\n        case 12:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _callee15, this, [[0, 9]]);\n}))); //my popular this wwek\n\n$(\".discussions-left\").on(\"click\", \"#filter-popular-week\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee16() {\n  var _yield$axios$get9, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee16$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.prev = 0;\n          _context16.next = 3;\n          return axios.get(\"/discussion/popular-week\");\n\n        case 3:\n          _yield$axios$get9 = _context16.sent;\n          data = _yield$axios$get9.data;\n          status = _yield$axios$get9.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n            $(\".filter-thread\").children().first().css('visibility', 'hidden');\n          }\n\n          _context16.next = 12;\n          break;\n\n        case 9:\n          _context16.prev = 9;\n          _context16.t0 = _context16[\"catch\"](0);\n          console.log(_context16.t0);\n\n        case 12:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _callee16, this, [[0, 9]]);\n}))); //my popular all time\n\n$(\".discussions-left\").on(\"click\", \"#filter-popular-allTime\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee17() {\n  var _yield$axios$get10, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee17$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return axios.get(\"/discussion/popular-allTime\");\n\n        case 3:\n          _yield$axios$get10 = _context17.sent;\n          data = _yield$axios$get10.data;\n          status = _yield$axios$get10.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n            $(\".filter-thread\").children().first().css('visibility', 'hidden');\n          }\n\n          _context17.next = 12;\n          break;\n\n        case 9:\n          _context17.prev = 9;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.log(_context17.t0);\n\n        case 12:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _callee17, this, [[0, 9]]);\n}))); //my post pou einai closed\n\n$(\".discussions-left\").on(\"click\", \"#filter-isClosed\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee18() {\n  var _yield$axios$get11, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee18$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.prev = 0;\n          _context18.next = 3;\n          return axios.get(\"/discussion/isClosed\");\n\n        case 3:\n          _yield$axios$get11 = _context18.sent;\n          data = _yield$axios$get11.data;\n          status = _yield$axios$get11.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context18.next = 12;\n          break;\n\n        case 9:\n          _context18.prev = 9;\n          _context18.t0 = _context18[\"catch\"](0);\n          console.log(_context18.t0);\n\n        case 12:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _callee18, this, [[0, 9]]);\n}))); //my xoris apantisi\n\n$(\".discussions-left\").on(\"click\", \"#filter-no-replies\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee19() {\n  var _yield$axios$get12, data, status;\n\n  return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee19$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return axios.get(\"/discussion/no-replies\");\n\n        case 3:\n          _yield$axios$get12 = _context19.sent;\n          data = _yield$axios$get12.data;\n          status = _yield$axios$get12.status;\n\n          if (status == 200) {\n            axiosUpdateMain($(this), data);\n          }\n\n          _context19.next = 12;\n          break;\n\n        case 9:\n          _context19.prev = 9;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.log(_context19.t0);\n\n        case 12:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _callee19, this, [[0, 9]]);\n}))); // $R(\"#post-body\", {\n//     buttons: [\n//         'html', 'undo', 'redo', 'format',\n//         'bold', 'underline', 'italic', 'deleted',\n//         'sup', 'sub', 'lists', 'file', 'link', 'image'\n//     ],\n//     style: false,\n//     plugins: [ 'alignment'],\n//     minHeight: '150px',\n//     imageResizable: true,\n//     imagePosition : {\n//         \"left\": \"image-left\",\n//         \"right\": \"image-right\",\n//         \"center\": \"image-center text-center\"\n//     },\n//     imageFloatMargin: '20px',\n//     imageUpload: \"/media/upload-images\",\n//     callbacks: {\n//         upload: {\n//             beforeSend: function(xhr)\n//             {\n//                 xhr.setRequestHeader('X-CSRF-Token', $('meta[name=\"csrf-token\"]').attr('content'));\n//             }\n//         }\n//     }\n// });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvaW5kZXgvZGlzY3Vzc2lvbnMvZGlzY3Vzc2lvbnMuanM/YzgzOSJdLCJuYW1lcyI6WyIkIiwiZG9jdW1lbnQiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImhyZWYiLCJvcHRpb24iLCJvcHRpb25zIiwic2VsZWN0ZWRJbmRleCIsInZhbHVlIiwiYXhpb3MiLCJnZXQiLCJwYXJhbXMiLCJoZWFkZXJzIiwiZGF0YSIsInN0YXR1cyIsImh0bWwiLCJmaW5kIiwib25IaWRlQm9keSIsImhpZGUiLCJldmVudFRvcEJhciIsImNvdXJzZSIsImZpbHRlck5hbWUiLCJhdHRyIiwicmVwbGFjZSIsIm9uU2hvd0JvZHkiLCJlYWNoIiwiaWR4IiwiZWwiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJvbkNoYW5nZUZpcnN0QnV0dG9uTmV3IiwiZmlyc3RCdG4iLCJpbm5lckhUTUwiLCJkYXRhc2V0IiwidGFyZ2V0Iiwib25GaXJzdFJlcGxheUJ0bkV2ZW50Iiwib25DaGFuZ2VGaXJzdEJ1dHRvblJlcGxheSIsImxlbmd0aCIsImRpc2FibGVkIiwidW5iaW5kIiwiYXhpb3NVcGRhdGVNYWluIiwidGhhdCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJ0aXRsZSIsInZhbCIsIm1vZGFsIiwiaW5zZXJ0QWZ0ZXIiLCJwb3N0IiwicmVzZXQiLCJjb25zb2xlIiwibG9nIiwiYm9keSIsInRleHQiLCJwb3N0SWQiLCJwYXJlbnRJZCIsInBhcmVudCIsInJhbmdlU2xpZGVyIiwiY2xvc2VzdCIsIm9mZiIsInNob3ciLCJvbkNvbW1lbnRSZXBsYXlCdG5FdmVudCIsIm9uU3ViQ29tbWVudFJlcGxheUJ0bkV2ZW50Iiwib25MaWtlYnRuIiwib25EZWxldGVDb21tZW50IiwiaGFuZGxlclJlcGx5IiwiYmVzdEFuc3dlciIsImNsb3NlZFBvc3QiLCJ0ZXJtIiwia2V5Q29kZSIsImluc2VydEJlZm9yZSIsImNsaWNrIiwiZm9jdXMiLCJjb21tZW50SWQiLCJhdXRob3IiLCJwYXRjaCIsImZpcnN0RWxlbWVudENoaWxkIiwidHJpbSIsInBhcnNlSW50IiwiaWQiLCJ0aHJlYWRJZCIsInJlcGx5IiwibWFwIiwiaW9uUmFuZ2VTbGlkZXIiLCJ2YWx1ZXMiLCJza2luIiwidG9wT2ZFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIm9mZnNldFRvcCIsIndpbmRvdyIsInNjcm9sbCIsInRvcCIsImJlaGF2aW9yIiwic2Nyb2xsVG8iLCJhbmltYXRlIiwic2Nyb2xsVG9wIiwiY2hpbGRyZW4iLCJjc3MiLCJlbGVtZW50IiwiaGFzQ2xhc3MiLCJzdHlsZSIsImNvbG9yIiwibm90IiwiYXBwZW5kIiwic3R5bGVDbG9zZWRQb3N0IiwidG9nZ2xlQ2xhc3MiLCJzaWJsaW5ncyIsInRvZ2dsZVRleHQiLCJwcm9wIiwibW91c2VvdmVyIiwibW91c2VvdXQiLCJmaXJzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQUEsQ0FBQyxDQUFDQyxRQUFELENBQUQsQ0FBWUMsRUFBWixDQUFlLE9BQWYsRUFBd0IsZUFBeEI7QUFBQSxvSEFBeUMsaUJBQWdCQyxDQUFoQjtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ3JDQSxhQUFDLENBQUNDLGNBQUY7QUFDTUMsZ0JBRitCLEdBRXhCLEtBQUtBLElBRm1CO0FBS2pDQyxrQkFMaUMsR0FLeEJOLENBQUMsQ0FBQyxpQkFBRCxDQUFELENBQXFCLENBQXJCLEVBQXdCTyxPQUF4QixDQUFnQ1AsQ0FBQyxDQUFDLGlCQUFELENBQUQsQ0FBcUIsQ0FBckIsRUFBd0JRLGFBQXhELEVBQXVFQyxLQUwvQztBQUFBO0FBQUEsbUJBT1JDLEtBQUssQ0FBQ0MsR0FBTixDQUFVTixJQUFWLEVBQWdCO0FBQ3pDTyxvQkFBTSxFQUFFO0FBQ0pOLHNCQUFNLEVBQU5BO0FBREksZUFEaUM7QUFHdENPLHFCQUFPLEVBQUU7QUFDUiwrQ0FBK0I7QUFEdkI7QUFINkIsYUFBaEIsQ0FQUTs7QUFBQTtBQUFBO0FBTzlC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QTtBQUFBLENBQXZELEksQ0FjQTs7QUFDQXJELENBQUMsQ0FBQyxtQkFBRCxDQUFELENBQXVCRSxFQUF2QixDQUEwQixPQUExQixFQUFtQyxvQkFBbkMsc0hBQXlEO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsaUJBR3BCUSxLQUFLLENBQUNDLEdBQU4sQ0FBVSx3QkFBVixDQUhvQjs7QUFBQTtBQUFBO0FBRzFDRyxjQUgwQyxzQkFHMUNBLElBSDBDO0FBR3BDQyxnQkFIb0Msc0JBR3BDQSxNQUhvQzs7QUFLakQsY0FBSUEsTUFBTSxJQUFJLEdBQWQsRUFBbUI7QUFDZjJCLDJCQUFlLENBQUMxQyxDQUFDLENBQUMsSUFBRCxDQUFGLEVBQVVjLElBQVYsQ0FBZjtBQUNIOztBQVBnRDtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQVdqRHNDLGlCQUFPLENBQUNDLEdBQVI7O0FBWGlEO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQXpELEksQ0FtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9pbmRleC9kaXNjdXNzaW9ucy9kaXNjdXNzaW9ucy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vcGFnaW5hdGlvbiBldmVudFxyXG4kKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiLnBhZ2luYXRpb24gYVwiLCBhc3luYyBmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgaHJlZiA9IHRoaXMuaHJlZjtcclxuXHJcblxyXG4gICAgbGV0IG9wdGlvbiA9ICQoXCIuZmlsdGVyLXNpZGViYXJcIilbMF0ub3B0aW9uc1skKFwiLmZpbHRlci1zaWRlYmFyXCIpWzBdLnNlbGVjdGVkSW5kZXhdLnZhbHVlXHJcblxyXG4gICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5nZXQoaHJlZiwge1xyXG4gICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICBvcHRpb25cclxuICAgICAgICB9LCBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKicsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICB9KVxyXG4gICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcclxuXHJcbiAgICAgICAgJChcIi5jbnQtdGhyZWFkcy1tYWluLWxpc3RcIikuaHRtbCgkKGRhdGEpLmZpbmQoXCIudGhyZWFkcy1tYWluLWxpc3RcIikpXHJcbiAgICAgICAgb25IaWRlQm9keSgpXHJcbiAgICB9XHJcbn0pXHJcbiQoXCIuZmlyc3QtdGhyZWFkXCIpLmhpZGUoKTtcclxuY29uc3QgZXZlbnRUb3BCYXIgID0gKCkgPT57XHJcbiAgICAkKFwiLmRpc2N1c3Npb25zLXJpZ2h0XCIpLm9uKFwiY2hhbmdlXCIsIFwiLmZpbHRlci1zaWRlYmFyXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgbGV0IGNvdXJzZSA9ICQoXCIuZmlsdGVyLWNvdXJzZVwiKVswXS5vcHRpb25zWyQoXCIuZmlsdGVyLWNvdXJzZVwiKVswXS5zZWxlY3RlZEluZGV4XS52YWx1ZVxyXG4gICAgICAgIGxldCBvcHRpb24gPSAkKFwiLmZpbHRlci1zaWRlYmFyXCIpWzBdLm9wdGlvbnNbJChcIi5maWx0ZXItc2lkZWJhclwiKVswXS5zZWxlY3RlZEluZGV4XS52YWx1ZVxyXG5cclxuICAgICAgICBsZXQgZmlsdGVyTmFtZSA9ICQoXCIuYWN0aXZlLXRocmVhZFwiKS5hdHRyKCdpZCcpLnJlcGxhY2UoXCJmaWx0ZXItXCIsIFwiXCIpXHJcbiAgICAgICAgZmlsdGVyTmFtZSA9IGZpbHRlck5hbWUgPT0gXCJhbGwtdGhyZWFkc1wiID8gXCJcIiA6IGZpbHRlck5hbWU7XHJcbiAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5nZXQoYC9kaXNjdXNzaW9uLyR7ZmlsdGVyTmFtZX1gLCB7XHJcbiAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLFxyXG4gICAgICAgICAgICAgICAgY291cnNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAkKFwiLmNudC10aHJlYWRzLW1haW4tbGlzdFwiKS5odG1sKCQoZGF0YSkuZmluZChcIi50aHJlYWRzLW1haW4tbGlzdFwiKSlcclxuICAgICAgICAgICAgb25IaWRlQm9keSgpXHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9KVxyXG5cclxuICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub24oXCJjaGFuZ2VcIiwgXCIuZmlsdGVyLWNvdXJzZVwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGxldCBjb3Vyc2UgPSAkKFwiLmZpbHRlci1jb3Vyc2VcIilbMF0ub3B0aW9uc1skKFwiLmZpbHRlci1jb3Vyc2VcIilbMF0uc2VsZWN0ZWRJbmRleF0udmFsdWVcclxuICAgICAgICBsZXQgb3B0aW9uID0gJChcIi5maWx0ZXItc2lkZWJhclwiKVswXS5vcHRpb25zWyQoXCIuZmlsdGVyLXNpZGViYXJcIilbMF0uc2VsZWN0ZWRJbmRleF0udmFsdWVcclxuXHJcbiAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5nZXQoXCIvZGlzY3Vzc2lvbi9jaGFuZ2UvZmlsdGVyLWNvdXJzZVwiLCB7XHJcbiAgICAgICAgICAgIHBhcmFtczoge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLFxyXG4gICAgICAgICAgICAgICAgY291cnNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAkKFwiLmNudC10aHJlYWRzLW1haW4tbGlzdFwiKS5odG1sKCQoZGF0YSkuZmluZChcIi50aHJlYWRzLW1haW4tbGlzdFwiKSlcclxuICAgICAgICAgICAgb25IaWRlQm9keSgpXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbi8vIGZpbHRlciBzaG93IGJvZHlcclxuICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub24oXCJjbGlja1wiLCBcIi5qcy1zaG93LWJvZHlcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIG9uU2hvd0JvZHkoKVxyXG4gICAgICAgICQoXCIuanMtcG9zdC1ib2R5XCIpLmVhY2goKGlkeCwgZWwpID0+IHtcclxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSlcclxuICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub24oXCJjbGlja1wiLCBcIi5qcy1oaWRkZW4tYm9keVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgb25IaWRlQm9keSgpXHJcblxyXG4gICAgICAgICQoXCIuanMtcG9zdC1ib2R5XCIpLmVhY2goKGlkeCwgZWwpID0+IHtcclxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChcImQtbm9uZVwiKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSlcclxufVxyXG5ldmVudFRvcEJhcigpO1xyXG5cclxuLy8gRXZlbmV0IGxpc3RlbmVyIHNob3cgYm9keVxyXG5jb25zdCBvbkhpZGVCb2R5ID0gKCkgPT4ge1xyXG4gICAgJChcIi5qcy1oaWRkZW4tYm9keVwiKVswXS5jbGFzc0xpc3QuYWRkKFwianMtYm9keS1hY3RpdmVcIilcclxuICAgICQoXCIuanMtc2hvdy1ib2R5XCIpWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJqcy1ib2R5LWFjdGl2ZVwiKVxyXG59XHJcbmNvbnN0IG9uU2hvd0JvZHkgPSAoKSA9PiB7XHJcbiAgICAkKFwiLmpzLXNob3ctYm9keVwiKVswXS5jbGFzc0xpc3QuYWRkKFwianMtYm9keS1hY3RpdmVcIilcclxuICAgICQoXCIuanMtaGlkZGVuLWJvZHlcIilbMF0uY2xhc3NMaXN0LnJlbW92ZShcImpzLWJvZHktYWN0aXZlXCIpXHJcbn1cclxuLy8gRXZlbmV0IGNoYW5nZSBmaXJzdCBidXR0b25cclxuY29uc3Qgb25DaGFuZ2VGaXJzdEJ1dHRvbk5ldyA9ICgpID0+IHtcclxuICAgIGxldCBmaXJzdEJ0biA9ICQoXCIuZmlyc3QtdGhyZWFkXCIpXHJcblxyXG4gICAgZmlyc3RCdG5bMF0uaW5uZXJIVE1MID0gYM6RzqDOkc6dzqTOl86jzpdgXHJcbiAgICBmaXJzdEJ0blswXS5kYXRhc2V0LnRhcmdldCA9IFwiI25ldy1yZXBseVwiXHJcbiAgICBmaXJzdEJ0blswXS5jbGFzc0xpc3QuYWRkKFwiZmlyc3QtdGhyZWFkLXJlcGxheVwiKVxyXG4gICAgZmlyc3RCdG5bMF0uY2xhc3NMaXN0LnJlbW92ZShcImZpcnN0LXRocmVhZFwiKVxyXG4gICAgb25GaXJzdFJlcGxheUJ0bkV2ZW50KCk7XHJcbn1cclxuY29uc3Qgb25DaGFuZ2VGaXJzdEJ1dHRvblJlcGxheSA9ICgpID0+IHtcclxuICAgIGlmICgkKFwiLmZpcnN0LXRocmVhZC1yZXBsYXlcIikubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgIGxldCBmaXJzdEJ0biA9ICQoXCIuZmlyc3QtdGhyZWFkLXJlcGxheVwiKVxyXG4gICAgICAgIGZpcnN0QnRuWzBdLmlubmVySFRNTCA9IGBORU8gUE9TVGBcclxuICAgICAgICBmaXJzdEJ0blswXS5kYXRhc2V0LnRhcmdldCA9IFwiI25ldy10aHJlYWRzXCJcclxuICAgICAgICBmaXJzdEJ0blswXS5jbGFzc0xpc3QucmVtb3ZlKFwiZmlyc3QtdGhyZWFkLXJlcGxheVwiKVxyXG4gICAgICAgIGZpcnN0QnRuWzBdLmNsYXNzTGlzdC5hZGQoXCJmaXJzdC10aHJlYWRcIilcclxuICAgICAgICBmaXJzdEJ0blswXS5kaXNhYmxlZCA9IGZhbHNlO1xyXG4vL25ldyBuYSB0YSB0c2VrYXJ3IVxyXG4gICAgICAgIGZpcnN0QnRuWzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJiZy1kYW5nZXJcIilcclxuICAgICAgICAkKFwiLnVsLXRocmVhZFwiKS5maW5kKFwiLmZpcnN0LXRocmVhZFwiKS51bmJpbmQoJ21vdXNlb3ZlcicpLnVuYmluZCgnbW91c2VvdXQnKTtcclxuXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vdXBkYXRlIG1haW4gcGFnZSByZWxvYWRcclxuY29uc3QgYXhpb3NVcGRhdGVNYWluID0gKHRoYXQsIGRhdGEpID0+IHtcclxuICAgICQoXCIudWwtdGhyZWFkIC5iZy10aHJlYWRcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmUtdGhyZWFkXCIpXHJcbiAgICAkKHRoYXQpLmFkZENsYXNzKFwiYWN0aXZlLXRocmVhZFwiKVxyXG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5odG1sKCQoZGF0YSkuZmluZChcIi5kaXNjdXNzaW9ucy1yaWdodD4gKlwiKSlcclxuICAgIG9uSGlkZUJvZHkoKVxyXG4gICAgb25DaGFuZ2VGaXJzdEJ1dHRvblJlcGxheSgpXHJcbiAgICAkKFwiLmZpcnN0LXRocmVhZFwiKS5oaWRlKCk7XHJcbn1cclxuXHJcblxyXG4vLyBzdWJtaXQgY3JlYXRlIGZvcm1cclxuJChcIi5qcy1mb3JtLWNyZWF0ZVwiKS5vbihcImNsaWNrXCIsYXN5bmMgZnVuY3Rpb24gKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgbGV0IHRpdGxlID0gJCgnaW5wdXQjcG9zdC10aXRsZScpLnZhbCgpXHJcbiAgICBsZXQgY291cnNlID0gJCgnI3Bvc3QtY291cnNlJykudmFsKClcclxuICAgIHRoaXMuZGlzYWJsZWQgPSB0cnVlXHJcblxyXG5cclxuICAgIGlmICghdGl0bGUpIHtcclxuICAgICAgICBpZiAoISQoXCIudmFsaWRhdGUtZm9ybS1wb3N0LWJvZHlcIikubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICQoJyNuZXctdGhyZWFkcycpLm1vZGFsKCdzaG93Jyk7XHJcbiAgICAgICAgICAgICQoXCI8cCBjbGFzcz0ndGV4dC1kYW5nZXIgbXQtMiB2YWxpZGF0ZS1mb3JtLXBvc3QtYm9keSc+Ks6jz4XOvM+AzrvOt8+Bz47Pg8+EzrUgz4zOu86xIM+EzrEgz4DOsc65zrTOuc6sPC9wPlwiKS5pbnNlcnRBZnRlcihcIiNwb3N0LWJvZHlcIik7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MucG9zdChcIi9kaXNjdXNzaW9uL3Bvc3Qvc3RvcmUtdGhyZWFkXCIsIHtcclxuICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgIGNvdXJzZVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikuaHRtbCgkKGRhdGEpLmZpbmQoXCIuZGlzY3Vzc2lvbnMtcmlnaHQ+ICpcIikpXHJcbiAgICAgICAgICAgIG9uSGlkZUJvZHkoKVxyXG4gICAgICAgICAgICAkKCcjbmV3LXRocmVhZHMnKS5tb2RhbCgnaGlkZScpXHJcbiAgICAgICAgICAgICQoJyNmb3JtLWNyZWF0ZS10aHJlYWQnKVswXS5yZXNldCgpXHJcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICB9XHJcbn0pXHJcblxyXG4vLyBzdWJtaXQgcmVwbHkgZm9ybVxyXG4kKFwiLmpzLWZvcm0tcmVwbHlcIikub24oXCJjbGlja1wiLCBhc3luYyBmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICBsZXQgYm9keSA9ICQoJ3RleHRhcmVhI3JlcGx5LWJvZHknKS52YWwoKVxyXG5cclxuXHJcbiAgICBpZiAoIWJvZHkpIHtcclxuICAgICAgICBpZiAoISQoXCIudmFsaWRhdGUtZm9ybS1wb3N0XCIpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAkKCcjbmV3LXJlcGx5JykubW9kYWwoJ3Nob3cnKTtcclxuICAgICAgICAgICAgJChcIjxwIGNsYXNzPSd0ZXh0LWRhbmdlciBtdC0yIHZhbGlkYXRlLWZvcm0tcG9zdCc+KlTOvyDPgM61zrTOr86/IM61zq/Ovc6xzrkgzrHPgM6xz4HOsc6vz4TOt8+Ezr88L3A+XCIpLmluc2VydEFmdGVyKFwiI3JlcGx5LWJvZHlcIik7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm5cclxuICAgIH1lbHNle1xyXG4gICAgICAgIGJvZHkgPSAgYDxzcGFuIGNsYXNzPVwidGV4dC1pbmZvXCI+JHskKFwiLnJlcGxheS1uYW1lXCIpLnRleHQoKX08L3NwYW4+ICR7Ym9keX1gXHJcblxyXG5cclxuICAgIH1cclxuICAgIGxldCBwb3N0SWQgPSB0aGlzLmRhdGFzZXQucG9zdDtcclxuICAgIGxldCBwYXJlbnRJZCA9IHRoaXMuZGF0YXNldC5wYXJlbnQ7XHJcbiAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZVxyXG4gICAgJChcIi52YWxpZGF0ZS1mb3JtLXBvc3RcIikucmVtb3ZlKCk7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLnBvc3QoXCIvZGlzY3Vzc2lvbi9wb3N0L3N0b3JlLXJlcGx5XCIsIHtcclxuICAgICAgICAgICAgcG9zdElkLFxyXG4gICAgICAgICAgICBwYXJlbnRJZCxcclxuICAgICAgICAgICAgYm9keVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICQoXCIuY250LXJlcGx5LWxpc3RcIikuaHRtbCgkKGRhdGEpLmZpbmQoXCIucmVwbHktbGlzdFwiKSkgLy9yZWxvYWQgcG9zdFxyXG4gICAgICAgICAgICAkKFwiLmNudC10b3AtYmFyLXBvc3RcIikuaHRtbCgkKGRhdGEpLmZpbmQoXCIudG9wLWJhci1wb3N0XCIpKSAvL3JlbG9hZCB0b3BiYXJcclxuICAgICAgICAgICAgJChcIi5wb3N0LXNjcm9sbGJhci1jbnRcIikuaHRtbCgkKGRhdGEpLmZpbmQoXCIucG9zdC1zY3JvbGxiYXJcIikpIC8vcm9sYWQgcmFuZ2VyIHNsaWRlclxyXG4gICAgICAgICAgICByYW5nZVNsaWRlcigpO1xyXG4gICAgICAgICAgICAkKCcjbmV3LXJlcGx5JykubW9kYWwoJ2hpZGUnKVxyXG4gICAgICAgICAgICAkKCcjZm9ybS1jcmVhdGUtcmVwbHknKVswXS5yZXNldCgpXHJcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICB9XHJcblxyXG59KVxyXG5cclxuLy8gc2hvdyBwb3N0XHJcblxyXG4kKGRvY3VtZW50KS5vbihcImNsaWNrXCIsICcuanMtdGhyZWFkLXRpdGxlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG4gICAgbGV0IHBvc3RJZCA9IHRoaXMuY2xvc2VzdChcIi5zaW5nbGUtdGhyZWFkXCIpLmRhdGFzZXQucG9zdElkXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MucGF0Y2goYC9kaXNjdXNzaW9uL3dhdGNoZWQvJHtwb3N0SWR9YClcclxuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmdldChgL2Rpc2N1c3Npb24vJHtwb3N0SWR9YClcclxuXHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub2ZmKCk7XHJcbiAgICAgICAgICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikuaHRtbChkYXRhKVxyXG4gICAgICAgICAgICAkKFwiLmZpcnN0LXRocmVhZFwiKS5zaG93KCk7XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlRmlyc3RCdXR0b25OZXcoKVxyXG4gICAgICAgICAgICBvbkNvbW1lbnRSZXBsYXlCdG5FdmVudCgpXHJcbiAgICAgICAgICAgIG9uU3ViQ29tbWVudFJlcGxheUJ0bkV2ZW50KClcclxuICAgICAgICAgICAgb25MaWtlYnRuKClcclxuICAgICAgICAgICAgb25EZWxldGVDb21tZW50KClcclxuICAgICAgICAgICAgcmFuZ2VTbGlkZXIoKVxyXG4gICAgICAgICAgICBoYW5kbGVyUmVwbHkoKVxyXG4gICAgICAgICAgICBiZXN0QW5zd2VyKClcclxuICAgICAgICAgICAgY2xvc2VkUG9zdCgpXHJcbiAgICAgICAgICAgIGV2ZW50VG9wQmFyKClcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKVxyXG4gICAgfVxyXG5cclxufSlcclxuXHJcbi8vIHNlYXJjaFxyXG4kKGRvY3VtZW50KS5vbihcImtleXVwXCIsIFwiLmpzLXNlYXJjaC1wb3N0XCIsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBsZXQgdGVybSA9IGUudGFyZ2V0LnZhbHVlO1xyXG5cclxuICAgIGlmIChlLmtleUNvZGUgPT09IDEzICYmIHRlcm0ubGVuZ3RoID49IDMpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLnBvc3QoXCIvZGlzY3Vzc2lvbi9zZWFyY2hcIiwge1xyXG4gICAgICAgICAgICAgICAgdGVybVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5odG1sKCQoZGF0YSkuZmluZChcIi5kaXNjdXNzaW9ucy1yaWdodD4qXCIpKVxyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQudmFsdWUgPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAkKCcjY2VudGVybW9kYWwnKS5tb2RhbCgnaGlkZScpXHJcbiAgICAgICAgICAgICAgICBvbkhpZGVCb2R5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KVxyXG4vLyBHbG9iYWwgc2VhcmNoXHJcbiQoZG9jdW1lbnQpLm9uKFwia2V5dXBcIiwgZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICBpZiAoZS5rZXlDb2RlID09PSAxOTEpIHtcclxuXHJcbiAgICAgICAgaWYgKCEkKFwiLmpzLXNlYXJjaC1zbmlwcGV0XCIpLmxlbmd0aClcclxuICAgICAgICAgICAgJChcIjxzcGFuIGNsYXNzPSdqcy1zZWFyY2gtc25pcHBldCcgZGF0YS10b2dnbGU9J21vZGFsJyBkYXRhLXRhcmdldD0nI2NlbnRlcm1vZGFsJz48L3NwYW4+XCIpXHJcbiAgICAgICAgICAgICAgICAuaW5zZXJ0QmVmb3JlKCcjY2VudGVybW9kYWwnKTtcclxuICAgICAgICAkKFwiLmpzLXNlYXJjaC1zbmlwcGV0XCIpLmNsaWNrKCk7XHJcblxyXG4gICAgICAgICQoJyNjZW50ZXJtb2RhbCcpLm9uKCdzaG93bi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCgnLmNzcy1zZWFyY2gtc25pcHBldCcpLmZvY3VzKCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcblxyXG59KVxyXG5cclxuLy9yZXBsYXkgY29tbWVudCBmaXJzdCBidXR0b25cclxuY29uc3Qgb25GaXJzdFJlcGxheUJ0bkV2ZW50ID0gKCkgPT4ge1xyXG5cclxuICAgICQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCIuZmlyc3QtdGhyZWFkLXJlcGxheVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IHBvc3RJZCA9ICQoXCIubWFpbi1wb3N0XCIpWzBdLmRhdGFzZXQucG9zdElkO1xyXG4gICAgICAgIGxldCBwYXJlbnRJZCA9IDA7XHJcblxyXG4gICAgICAgICQoXCIjbmV3LXJlcGx5XCIpLmZpbmQoXCIucmVwbGF5LW5hbWVcIikudGV4dChcIlwiKTtcclxuICAgICAgICAkKFwiLmpzLWZvcm0tcmVwbHlcIilbMF0uZGF0YXNldC5wb3N0ID0gcG9zdElkXHJcbiAgICAgICAgJChcIi5qcy1mb3JtLXJlcGx5XCIpWzBdLmRhdGFzZXQucGFyZW50ID0gcGFyZW50SWRcclxuXHJcbiAgICB9KVxyXG5cclxufVxyXG4vL3JlcGxheSBjb21tZW50XHJcbmNvbnN0IG9uQ29tbWVudFJlcGxheUJ0bkV2ZW50ID0gKCkgPT4ge1xyXG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLmpzLWNvbW1lbnQtcmVwbHlcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCBwb3N0SWQgPSAkKFwiLm1haW4tcG9zdFwiKVswXS5kYXRhc2V0LnBvc3RJZDtcclxuICAgICAgICBsZXQgcGFyZW50SWQgPSB0aGlzLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmRhdGFzZXQuY29tbWVudElkO1xyXG4gICAgICAgIGxldCBhdXRob3IgPSAkKHRoaXMpLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmZpbmQoXCIuYXV0aG9yLXBvc3QtbmFtZVwiKS50ZXh0KClcclxuXHJcbiAgICAgICAgJChcIiNuZXctcmVwbHlcIikuZmluZChcIi5yZXBsYXktbmFtZVwiKS50ZXh0KGBAJHthdXRob3J9YCk7XHJcbiAgICAgICAgJChcIi5qcy1mb3JtLXJlcGx5XCIpWzBdLmRhdGFzZXQucG9zdCA9IHBvc3RJZFxyXG4gICAgICAgICQoXCIuanMtZm9ybS1yZXBseVwiKVswXS5kYXRhc2V0LnBhcmVudCA9IHBhcmVudElkXHJcbiAgICB9KVxyXG59XHJcbi8vcmVwbGF5IHN1YmNvbW1lbnRcclxuY29uc3Qgb25TdWJDb21tZW50UmVwbGF5QnRuRXZlbnQgPSAoKSA9PiB7XHJcbiAgICAkKFwiLmRpc2N1c3Npb25zLXJpZ2h0XCIpLm9uKFwiY2xpY2tcIiwgXCIuanMtc3ViLWNvbW1lbnQtcmVwbHlcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCBwb3N0SWQgPSAkKFwiLm1haW4tcG9zdFwiKVswXS5kYXRhc2V0LnBvc3RJZDtcclxuICAgICAgICBsZXQgcGFyZW50SWQgPSB0aGlzLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmRhdGFzZXQuY29tbWVudElkO1xyXG4gICAgICAgIGxldCBhdXRob3IgPSAkKHRoaXMpLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmZpbmQoXCIuYXV0aG9yLXBvc3QtbmFtZVwiKS50ZXh0KClcclxuXHJcbiAgICAgICAgJChcIiNuZXctcmVwbHlcIikuZmluZChcIi5yZXBsYXktbmFtZVwiKS50ZXh0KGBAJHthdXRob3J9YCk7XHJcbiAgICAgICAgJChcIi5qcy1mb3JtLXJlcGx5XCIpWzBdLmRhdGFzZXQucG9zdCA9IHBvc3RJZFxyXG4gICAgICAgICQoXCIuanMtZm9ybS1yZXBseVwiKVswXS5kYXRhc2V0LnBhcmVudCA9IHBhcmVudElkXHJcbiAgICB9KVxyXG59XHJcblxyXG4vL2xpa2VzIHN5c3RlbSBjb21tZW50XHJcbmNvbnN0IG9uTGlrZWJ0biA9ICgpID0+IHtcclxuICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub24oXCJjbGlja1wiLCBcIi5idG4tcmVwbHktbGlrZVwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5wYXRjaChgL2Rpc2N1c3Npb24vbGlrZS1jb21tZW50LyR7dGhpcy5kYXRhc2V0LmNvbW1lbnRJZH1gKVxyXG5cclxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKFwibGlrZS1jbGFzc1wiKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTC50cmltKCkubGVuZ3RoID09IDAgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTCA9IHBhcnNlSW50KDEpIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUwgPSBwYXJzZUludCh0aGlzLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTCkgKyAxXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZShcImxpa2UtY2xhc3NcIilcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTC50cmltKCkgPT0gXCIxXCIgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTCA9IFwiXCIgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTCA9IHBhcnNlSW50KHRoaXMuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJIVE1MKSAtIDFcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZSlcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59XHJcbi8vZGVsZXRlIGNvbW1lbnRcclxuY29uc3Qgb25EZWxldGVDb21tZW50ID0gKCkgPT4ge1xyXG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLmpzLWRlbGV0ZS1jb21tZW50XCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBpZCA9IHRoaXMuY2xvc2VzdChcIi5tYWluLXBvc3RcIikuZGF0YXNldC50aHJlYWRJZFxyXG4gICAgICAgIGNvbnN0IHBvc3RJZCA9ICQoXCIubWFpbi1wb3N0XCIpWzBdLmRhdGFzZXQucG9zdElkO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MuZGVsZXRlKGAvZGlzY3Vzc2lvbi9kZWxldGUvJHtpZH1gLCB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBwb3N0SWRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAkKFwiLmNudC1yZXBseS1saXN0XCIpLmh0bWwoJChkYXRhKS5maW5kKFwiLnJlcGx5LWxpc3RcIikpIC8vcmVsb2FkIHBvc3RcclxuICAgICAgICAgICAgICAgICQoXCIuY250LXRvcC1iYXItcG9zdFwiKS5odG1sKCQoZGF0YSkuZmluZChcIi50b3AtYmFyLXBvc3RcIikpIC8vcmVsb2FkIHRvcGJhclxyXG4gICAgICAgICAgICAgICAgJChcIi5wb3N0LXNjcm9sbGJhci1jbnRcIikuaHRtbCgkKGRhdGEpLmZpbmQoXCIucG9zdC1zY3JvbGxiYXJcIikpIC8vcm9sYWQgcmFuZ2VyIHNsaWRlclxyXG4gICAgICAgICAgICAgICAgcmFuZ2VTbGlkZXIoKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlKVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG59XHJcblxyXG4vL3JhbmdlciBzeXN0ZW1cclxuY29uc3QgcmFuZ2VTbGlkZXIgPSAoKSA9PiB7XHJcblxyXG4gICAgbGV0IHJlcGx5ID0gJChcIi5tYWluLXJlcGx5XCIpLm1hcCgoaWR4LCBlbCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgZWwuaWQgPT0gXCJ1bmRlZmluZWRcIiA/IFwicG9zdC0xXCIgOiBlbC5pZFxyXG4gICAgfSlcclxuXHJcblxyXG4gICAgJChcIi5qcy1yYW5nZS1zbGlkZXJcIikuaW9uUmFuZ2VTbGlkZXIoe1xyXG4gICAgICAgIHZhbHVlczogcmVwbHksXHJcbiAgICAgICAgc2tpbjogXCJyb3VuZFwiXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoJChcIi5pcnMtZ3JpZC10ZXh0XCIpLnRleHQoKSA9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICQoXCIuaXJzLWdyaWQtdGV4dFwiKS50ZXh0KFwicmVwbHktMVwiKVxyXG4gICAgfVxyXG5cclxuICAgICQoXCIuanMtcmFuZ2Utc2xpZGVyXCIpLm9uKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgdmFyIHRvcE9mRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3RoaXMudmFsdWV9YCkub2Zmc2V0VG9wIC0gMTAwO1xyXG4gICAgICAgIHdpbmRvdy5zY3JvbGwoe3RvcDogdG9wT2ZFbGVtZW50LCBiZWhhdmlvcjogXCJzbW9vdGhcIn0pO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnZhbHVlKVxyXG4gICAgfSlcclxuXHJcbiAgICAkKFwiLm9yaWdpbmFsLXBvc3RcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7XHJcbiAgICAgICAgICAgIHRvcDogMCxcclxuICAgICAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSlcclxuXHJcbiAgICAkKFwiLm5ldy1wb3N0XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAkKCdodG1sLGJvZHknKS5hbmltYXRlKHtzY3JvbGxUb3A6IDk5OTl9LCAnc2xvdycpO1xyXG4gICAgfSlcclxuXHJcblxyXG59XHJcbi8vc2hvdyBoaWRlIHN1YmNvb21tZW50XHJcbmNvbnN0IGhhbmRsZXJSZXBseSA9ICgpID0+IHtcclxuXHJcbiAgICAkKFwiLmRpc2N1c3Npb25zLXJpZ2h0XCIpLm9uKFwiY2xpY2tcIiwgXCIuanMtc2hvdy1ib2R5XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBvblNob3dCb2R5KClcclxuICAgICAgICAkKFwiLnNpbmdsZS1wb3N0LXNob3dcIikuYWRkQ2xhc3MoXCJkLW5vbmVcIilcclxuXHJcbiAgICAgICAgJChcIi5qcy1yZXBseS1ib2R5XCIpLmVhY2goKGlkeCwgZWwpID0+IHtcclxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiKVxyXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKFwiZC1mbGV4XCIpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KVxyXG5cclxuICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub24oXCJjbGlja1wiLCBcIi5qcy1oaWRkZW4tYm9keVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgb25IaWRlQm9keSgpXHJcbiAgICAgICAgJChcIi5zaW5nbGUtcG9zdC1zaG93XCIpLnJlbW92ZUNsYXNzKFwiZC1ub25lXCIpXHJcbiAgICAgICAgJChcIi5zaW5nbGUtcG9zdC1zaG93XCIpLmNoaWxkcmVuKCdpJykuY3NzKCdjb2xvcicsICcjYzNjM2MzJylcclxuXHJcbiAgICAgICAgJChcIi5qcy1yZXBseS1ib2R5XCIpLmVhY2goKGlkeCwgZWwpID0+IHtcclxuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChcImQtbm9uZVwiKVxyXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKFwiZC1mbGV4XCIpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9KVxyXG5cclxuXHJcbiAgICAkKFwiLmRpc2N1c3Npb25zLXJpZ2h0XCIpLm9uKFwiY2xpY2tcIiwgXCIuc2luZ2xlLXBvc3Qtc2hvd1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IGNvbW1lbnRJZCA9IHRoaXMuY2xvc2VzdChcIi5tYWluLXBvc3RcIikuZGF0YXNldC5jb21tZW50SWRcclxuICAgICAgICBsZXQgZWxlbWVudCA9ICQoYC5qcy1yZXBseS1ib2R5W2RhdGEtY29tbWVudC1pZD0ke2NvbW1lbnRJZH1dYClcclxuXHJcblxyXG4gICAgICAgIGlmIChlbGVtZW50Lmhhc0NsYXNzKFwiZC1ub25lXCIpKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJkLW5vbmVcIilcclxuICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhcImQtZmxleFwiKVxyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuWzBdLnN0eWxlLmNvbG9yID0gJyM2NzY3NjcnXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhcImQtbm9uZVwiKVxyXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKFwiZC1mbGV4XCIpXHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW5bMF0uc3R5bGUuY29sb3IgPSAnI2MzYzNjMydcclxuXHJcblxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfSlcclxuXHJcblxyXG59XHJcbi8vaGFuZGxlciBiZXN0IGFuc3dlclxyXG5jb25zdCBiZXN0QW5zd2VyID0gKCkgPT4ge1xyXG4gICAgJChcIi5kaXNjdXNzaW9ucy1yaWdodFwiKS5vbihcImNsaWNrXCIsIFwiLmpzLWJlc3QtYW5zd2VyXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKFwiLmpzLWJlc3QtYW5zd2VyXCIpLm5vdCgkKHRoaXMpKS5yZW1vdmVDbGFzcyhcImlzLWFjdGl2ZS1iZXN0XCIpLmFkZENsYXNzKFwiaXMtYWN0aXZlLWJlc3QgdGV4dC1pbmZvXCIpXHJcblxyXG4gICAgICAgICQoXCIuanMtYmVzdC1hbnN3ZXJcIikubm90KCQodGhpcykpLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLnJlbW92ZUNsYXNzKFwiYmVzdC1hbnN3ZXItY250XCIpXHJcblxyXG5cclxuICAgICAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcyhcImlzLWFjdGl2ZS1iZXN0XCIpKSB7XHJcblxyXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmFkZENsYXNzKFwiYmVzdC1hbnN3ZXItY250XCIpXHJcblxyXG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwiaXMtYWN0aXZlLWJlc3QgdGV4dC1pbmZvXCIpLmFkZENsYXNzKFwidGV4dC1zdWNjZXNzXCIpXHJcblxyXG4gICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmFwcGVuZCgnPGEgaHJlZj1cIiNcIiBjbGFzcz1cIm1sLTMgbXQtMiBiYWRnZSBiYWRnZS1zdWNjZXNzIGJhZGdlLWJlc3QgZm9udC0xNFwiPkJlc3QgQW5zd2VyPC9hPlxcbicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAkKHRoaXMpLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLnJlbW92ZUNsYXNzKFwiYmVzdC1hbnN3ZXItY250XCIpXHJcblxyXG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKFwidGV4dC1zdWNjZXNzXCIpLmFkZENsYXNzKFwiaXMtYWN0aXZlLWJlc3QgdGV4dC1pbmZvXCIpXHJcblxyXG4gICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZpbmQoXCIuYmFkZ2UtYmVzdFwiKS5yZW1vdmUoKVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQoXCIuanMtYmVzdC1hbnN3ZXJcIikubm90KCQodGhpcykpLnBhcmVudCgpLmZpbmQoXCIuYmFkZ2UtYmVzdFwiKS5yZW1vdmUoKTtcclxuXHJcblxyXG4gICAgICAgIGxldCBjb21tZW50SWQgPSAkKHRoaXMpLmNsb3Nlc3QoXCIubWFpbi1wb3N0XCIpLmRhdGEoXCJ0aHJlYWRJZFwiKVxyXG4gICAgICAgIGxldCBwb3N0SWQgPSAkKFwiLm1haW4tcG9zdFwiKVswXS5kYXRhc2V0LnBvc3RJZDtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MucGF0Y2goYC9kaXNjdXNzaW9uL2Jlc3QvJHtjb21tZW50SWR9YCwge1xyXG4gICAgICAgICAgICAgICAgcG9zdElkXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0pXHJcblxyXG5cclxufVxyXG5cclxuLy9oYW5kbGVyIGNsb3NlcyBwb3N0XHJcbmNvbnN0IGNsb3NlZFBvc3QgPSAoKSA9PiB7XHJcbiAgICBzdHlsZUNsb3NlZFBvc3QoKVxyXG5cclxuICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikub24oXCJjbGlja1wiLCBcIi5qcy1wb3N0LWNsb3NlZFwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGV0IHBvc3RJZCA9ICQoXCIubWFpbi1wb3N0XCIpWzBdLmRhdGFzZXQucG9zdElkO1xyXG5cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3Qge3N0YXR1c30gPSBhd2FpdCBheGlvcy5wYXRjaChgL2Rpc2N1c3Npb24vY2xvc2VkLyR7cG9zdElkfWApXHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImJhZGdlLWRhbmdlclwiKVxyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS50b2dnbGVDbGFzcyhcImJhZGdlLWluZm9cIilcclxuICAgICAgICAgICAgICAgICQodGhpcykuc2libGluZ3MoXCJhXCIpLnRvZ2dsZUNsYXNzKFwiZC1ub25lXCIpXHJcbiAgICAgICAgICAgICAgICAkKFwiLmpzLWNvbW1lbnQtcmVwbHlcIikudG9nZ2xlQ2xhc3MoXCJkLW5vbmVcIilcclxuICAgICAgICAgICAgICAgICQoXCIuanMtc3ViLWNvbW1lbnQtcmVwbHlcIikudG9nZ2xlQ2xhc3MoXCJkLW5vbmVcIilcclxuICAgICAgICAgICAgICAgICQoXCIuZGlzY3Vzc2lvbnMtcmlnaHRcIikuZmluZChcIi5maXJzdC10aHJlYWQtcmVwbGF5XCIpLnRvZ2dsZUNsYXNzKFwiZC1ub25lXCIpXHJcbiAgICAgICAgICAgICAgICAkKFwiLnVsLXRocmVhZFwiKS5maW5kKFwiLmZpcnN0LXRocmVhZC1yZXBsYXlcIikudG9nZ2xlVGV4dCgnQ0xPU0VEJywgJ86RzqDOkc6dzqTOl86jzpcnKS50b2dnbGVDbGFzcyhcImJnLWRhbmdlclwiKTtcclxuICAgICAgICAgICAgICAgIHN0eWxlQ2xvc2VkUG9zdCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH0pXHJcbn1cclxuXHJcbi8vc3R5bGUgY2xvc2VzIHBvc3RcclxuY29uc3Qgc3R5bGVDbG9zZWRQb3N0ID0gKCkgPT4ge1xyXG5cclxuXHJcbiAgICBpZiAoJChcIi5qcy1wb3N0LWNsb3NlZFwiKS5oYXNDbGFzcyhcImJhZGdlLWRhbmdlclwiKSB8fCEkKFwiLmJhZGdlLWRhbmdlclwiKS5oYXNDbGFzcyhcImQtbm9uZVwiKSApIHtcclxuICAgICAgICAkKFwiLnVsLXRocmVhZFwiKS5maW5kKFwiLmZpcnN0LXRocmVhZC1yZXBsYXlcIikudGV4dChcIkNMT1NFRFwiKS5hZGRDbGFzcyhcImJnLWRhbmdlclwiKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpXHJcblxyXG4gICAgICAgICQoXCIudWwtdGhyZWFkXCIpLmZpbmQoXCIuZmlyc3QtdGhyZWFkLXJlcGxheVwiKS5tb3VzZW92ZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKHRoaXMpLmNzcyhcImN1cnNvclwiLCBcIm5vdC1hbGxvd2VkXCIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgJChcIi51bC10aHJlYWRcIikuZmluZChcIi5maXJzdC10aHJlYWQtcmVwbGF5XCIpLm1vdXNlb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5jc3MoXCJjdXJzb3JcIiwgXCJwb2ludGVyXCIpO1xyXG4gICAgICAgIH0pXHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICAkKFwiLnVsLXRocmVhZFwiKS5maW5kKFwiLmZpcnN0LXRocmVhZC1yZXBsYXlcIikudGV4dChcIs6RzqDOkc6dzqTOl86jzpdcIikucmVtb3ZlQ2xhc3MoXCJiZy1kYW5nZXJcIikucHJvcCgnZGlzYWJsZWQnLCBmYWxzZSlcclxuXHJcbiAgICAgICAgJChcIi51bC10aHJlYWRcIikuZmluZChcIi5maXJzdC10aHJlYWQtcmVwbGF5XCIpLnVuYmluZCgnbW91c2VvdmVyJykudW5iaW5kKCdtb3VzZW91dCcpO1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuLy9hbGwgdGhyZWFkIHNpZGViYXJcclxuJChcIi5kaXNjdXNzaW9ucy1sZWZ0XCIpLm9uKFwiY2xpY2tcIiwgXCIjZmlsdGVyLWFsbC10aHJlYWRzXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5nZXQoXCIvZGlzY3Vzc2lvblwiKVxyXG4gICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGF4aW9zVXBkYXRlTWFpbigkKHRoaXMpLCBkYXRhKVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICB9XHJcbn0pXHJcbi8vbXkgcXVlc3Rpb24gc2lkZWJhclxyXG4kKFwiLmRpc2N1c3Npb25zLWxlZnRcIikub24oXCJjbGlja1wiLCBcIiNmaWx0ZXItbXktcXVlc3Rpb25cIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5nZXQoXCIvZGlzY3Vzc2lvbi9teS1xdWVzdGlvblwiKVxyXG5cclxuICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICBheGlvc1VwZGF0ZU1haW4oJCh0aGlzKSwgZGF0YSlcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKVxyXG4gICAgfVxyXG59KVxyXG4vL215IHNpbWV0b3hpIHNlIHBvc3RcclxuJChcIi5kaXNjdXNzaW9ucy1sZWZ0XCIpLm9uKFwiY2xpY2tcIiwgXCIjZmlsdGVyLXBhcnRpY2lwYXRpb25cIiwgYXN5bmMgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3Qge2RhdGEsIHN0YXR1c30gPSBhd2FpdCBheGlvcy5nZXQoXCIvZGlzY3Vzc2lvbi9wYXJ0aWNpcGF0aW9uXCIpXHJcblxyXG4gICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGF4aW9zVXBkYXRlTWFpbigkKHRoaXMpLCBkYXRhKVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpXHJcbiAgICB9XHJcbn0pXHJcbi8vbXkga2FsaXRlcmkgYXBhbnRpc2lcclxuJChcIi5kaXNjdXNzaW9ucy1sZWZ0XCIpLm9uKFwiY2xpY2tcIiwgXCIjZmlsdGVyLWJlc3QtYW5zd2VyXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MuZ2V0KFwiL2Rpc2N1c3Npb24vYmVzdC1hbnN3ZXJcIilcclxuXHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICAgICAgYXhpb3NVcGRhdGVNYWluKCQodGhpcyksIGRhdGEpXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSlcclxuICAgIH1cclxufSlcclxuLy9teSBwb3B1bGFyIHRoaXMgd3dla1xyXG4kKFwiLmRpc2N1c3Npb25zLWxlZnRcIikub24oXCJjbGlja1wiLCBcIiNmaWx0ZXItcG9wdWxhci13ZWVrXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MuZ2V0KFwiL2Rpc2N1c3Npb24vcG9wdWxhci13ZWVrXCIpXHJcblxyXG4gICAgICAgIGlmIChzdGF0dXMgPT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGF4aW9zVXBkYXRlTWFpbigkKHRoaXMpLCBkYXRhKVxyXG4gICAgICAgICAgICAkKFwiLmZpbHRlci10aHJlYWRcIikuY2hpbGRyZW4oKS5maXJzdCgpLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlKVxyXG4gICAgfVxyXG59KVxyXG4vL215IHBvcHVsYXIgYWxsIHRpbWVcclxuJChcIi5kaXNjdXNzaW9ucy1sZWZ0XCIpLm9uKFwiY2xpY2tcIiwgXCIjZmlsdGVyLXBvcHVsYXItYWxsVGltZVwiLCBhc3luYyBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmdldChcIi9kaXNjdXNzaW9uL3BvcHVsYXItYWxsVGltZVwiKVxyXG5cclxuICAgICAgICBpZiAoc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICBheGlvc1VwZGF0ZU1haW4oJCh0aGlzKSwgZGF0YSlcclxuICAgICAgICAgICAgJChcIi5maWx0ZXItdGhyZWFkXCIpLmNoaWxkcmVuKCkuZmlyc3QoKS5jc3MoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSlcclxuICAgIH1cclxufSlcclxuLy9teSBwb3N0IHBvdSBlaW5haSBjbG9zZWRcclxuJChcIi5kaXNjdXNzaW9ucy1sZWZ0XCIpLm9uKFwiY2xpY2tcIiwgXCIjZmlsdGVyLWlzQ2xvc2VkXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHtkYXRhLCBzdGF0dXN9ID0gYXdhaXQgYXhpb3MuZ2V0KFwiL2Rpc2N1c3Npb24vaXNDbG9zZWRcIilcclxuXHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICAgICAgYXhpb3NVcGRhdGVNYWluKCQodGhpcyksIGRhdGEpXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSlcclxuICAgIH1cclxufSlcclxuLy9teSB4b3JpcyBhcGFudGlzaVxyXG4kKFwiLmRpc2N1c3Npb25zLWxlZnRcIikub24oXCJjbGlja1wiLCBcIiNmaWx0ZXItbm8tcmVwbGllc1wiLCBhc3luYyBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCB7ZGF0YSwgc3RhdHVzfSA9IGF3YWl0IGF4aW9zLmdldChcIi9kaXNjdXNzaW9uL25vLXJlcGxpZXNcIilcclxuXHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PSAyMDApIHtcclxuICAgICAgICAgICAgYXhpb3NVcGRhdGVNYWluKCQodGhpcyksIGRhdGEpXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSlcclxuICAgIH1cclxufSlcclxuXHJcblxyXG5cclxuXHJcblxyXG4vLyAkUihcIiNwb3N0LWJvZHlcIiwge1xyXG4vLyAgICAgYnV0dG9uczogW1xyXG4vLyAgICAgICAgICdodG1sJywgJ3VuZG8nLCAncmVkbycsICdmb3JtYXQnLFxyXG4vLyAgICAgICAgICdib2xkJywgJ3VuZGVybGluZScsICdpdGFsaWMnLCAnZGVsZXRlZCcsXHJcbi8vICAgICAgICAgJ3N1cCcsICdzdWInLCAnbGlzdHMnLCAnZmlsZScsICdsaW5rJywgJ2ltYWdlJ1xyXG4vLyAgICAgXSxcclxuLy8gICAgIHN0eWxlOiBmYWxzZSxcclxuLy8gICAgIHBsdWdpbnM6IFsgJ2FsaWdubWVudCddLFxyXG4vLyAgICAgbWluSGVpZ2h0OiAnMTUwcHgnLFxyXG4vLyAgICAgaW1hZ2VSZXNpemFibGU6IHRydWUsXHJcbi8vICAgICBpbWFnZVBvc2l0aW9uIDoge1xyXG4vLyAgICAgICAgIFwibGVmdFwiOiBcImltYWdlLWxlZnRcIixcclxuLy8gICAgICAgICBcInJpZ2h0XCI6IFwiaW1hZ2UtcmlnaHRcIixcclxuLy8gICAgICAgICBcImNlbnRlclwiOiBcImltYWdlLWNlbnRlciB0ZXh0LWNlbnRlclwiXHJcbi8vICAgICB9LFxyXG4vLyAgICAgaW1hZ2VGbG9hdE1hcmdpbjogJzIwcHgnLFxyXG4vLyAgICAgaW1hZ2VVcGxvYWQ6IFwiL21lZGlhL3VwbG9hZC1pbWFnZXNcIixcclxuLy8gICAgIGNhbGxiYWNrczoge1xyXG4vLyAgICAgICAgIHVwbG9hZDoge1xyXG4vLyAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbih4aHIpXHJcbi8vICAgICAgICAgICAgIHtcclxuLy8gICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLUNTUkYtVG9rZW4nLCAkKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuYXR0cignY29udGVudCcpKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgIH1cclxuLy8gfSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/index/discussions/discussions.js\n");
>>>>>>> a84d8db06b95b0c7b7937748a47d719a4db0a744

/***/ }),

/***/ 32:
/*!*************************************************************!*\
  !*** multi ./resources/js/index/discussions/discussions.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\Coding\Darkpony\Idrogeios\Demo LMS\resources\js\index\discussions\discussions.js */"./resources/js/index/discussions/discussions.js");


/***/ })

/******/ });