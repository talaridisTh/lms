/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/axios */ \"./node_modules/axios/lib/axios.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanM/YmMzYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxzREFBYSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/index.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"./node_modules/axios/lib/core/settle.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"./node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"./node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"./node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"./node_modules/axios/lib/core/createError.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = __webpack_require__(/*! ./../helpers/cookies */ \"./node_modules/axios/lib/helpers/cookies.js\");\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/adapters/xhr.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\nvar Axios = __webpack_require__(/*! ./core/Axios */ \"./node_modules/axios/lib/core/Axios.js\");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \"./node_modules/axios/lib/cancel/CancelToken.js\");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \"./node_modules/axios/lib/helpers/spread.js\");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzP2NlZTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLGtEQUFTO0FBQzdCLFdBQVcsbUJBQU8sQ0FBQyxnRUFBZ0I7QUFDbkMsWUFBWSxtQkFBTyxDQUFDLDREQUFjO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHdFQUFvQjtBQUM5QyxlQUFlLG1CQUFPLENBQUMsd0RBQVk7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxtQkFBTyxDQUFDLGtFQUFpQjtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQyw0RUFBc0I7QUFDbEQsaUJBQWlCLG1CQUFPLENBQUMsc0VBQW1COztBQUU1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxvRUFBa0I7O0FBRXpDOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/axios.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanM/N2E3NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/cancel/Cancel.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcz84ZGY0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGFBQWEsbUJBQU8sQ0FBQywyREFBVTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/cancel/CancelToken.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcz8yZTY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/cancel/isCancel.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"./node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"./node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanM/MGEwNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMscURBQVk7QUFDaEMsZUFBZSxtQkFBTyxDQUFDLHlFQUFxQjtBQUM1Qyx5QkFBeUIsbUJBQU8sQ0FBQyxpRkFBc0I7QUFDdkQsc0JBQXNCLG1CQUFPLENBQUMsMkVBQW1CO0FBQ2pELGtCQUFrQixtQkFBTyxDQUFDLG1FQUFlOztBQUV6QztBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/Axios.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzP2Y2YjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZOztBQUVoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQjtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/InterceptorManager.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \"./node_modules/axios/lib/helpers/isAbsoluteURL.js\");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \"./node_modules/axios/lib/helpers/combineURLs.js\");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcz84M2I5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLG9CQUFvQixtQkFBTyxDQUFDLG1GQUEwQjtBQUN0RCxrQkFBa0IsbUJBQU8sQ0FBQywrRUFBd0I7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/buildFullPath.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanM/MmQ4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBZ0I7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/createError.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"./node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzPzUyNzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZO0FBQ2hDLG9CQUFvQixtQkFBTyxDQUFDLHVFQUFpQjtBQUM3QyxlQUFlLG1CQUFPLENBQUMsdUVBQW9CO0FBQzNDLGVBQWUsbUJBQU8sQ0FBQyx5REFBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHVDQUF1QztBQUN2QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/dispatchRequest.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzPzM4N2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZVxuICAgIH07XG4gIH07XG4gIHJldHVybiBlcnJvcjtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/enhanceError.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',\n    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath'\n  ];\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {\n    if (utils.isObject(config2[prop])) {\n      config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n    } else if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (utils.isObject(config1[prop])) {\n      config[prop] = utils.deepMerge(config1[prop]);\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys);\n\n  var otherKeys = Object\n    .keys(config2)\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {\n    if (typeof config2[prop] !== 'undefined') {\n      config[prop] = config2[prop];\n    } else if (typeof config1[prop] !== 'undefined') {\n      config[prop] = config1[prop];\n    }\n  });\n\n  return config;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanM/NGE3YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsbURBQVU7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICB2YXIgdmFsdWVGcm9tQ29uZmlnMktleXMgPSBbJ3VybCcsICdtZXRob2QnLCAncGFyYW1zJywgJ2RhdGEnXTtcbiAgdmFyIG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzID0gWydoZWFkZXJzJywgJ2F1dGgnLCAncHJveHknXTtcbiAgdmFyIGRlZmF1bHRUb0NvbmZpZzJLZXlzID0gW1xuICAgICdiYXNlVVJMJywgJ3VybCcsICd0cmFuc2Zvcm1SZXF1ZXN0JywgJ3RyYW5zZm9ybVJlc3BvbnNlJywgJ3BhcmFtc1NlcmlhbGl6ZXInLFxuICAgICd0aW1lb3V0JywgJ3dpdGhDcmVkZW50aWFscycsICdhZGFwdGVyJywgJ3Jlc3BvbnNlVHlwZScsICd4c3JmQ29va2llTmFtZScsXG4gICAgJ3hzcmZIZWFkZXJOYW1lJywgJ29uVXBsb2FkUHJvZ3Jlc3MnLCAnb25Eb3dubG9hZFByb2dyZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICd2YWxpZGF0ZVN0YXR1cycsICdtYXhSZWRpcmVjdHMnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJ1xuICBdO1xuXG4gIHV0aWxzLmZvckVhY2godmFsdWVGcm9tQ29uZmlnMktleXMsIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzLCBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAodXRpbHMuaXNPYmplY3QoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IHV0aWxzLmRlZXBNZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICB1dGlscy5mb3JFYWNoKGRlZmF1bHRUb0NvbmZpZzJLZXlzLCBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGF4aW9zS2V5cyA9IHZhbHVlRnJvbUNvbmZpZzJLZXlzXG4gICAgLmNvbmNhdChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cylcbiAgICAuY29uY2F0KGRlZmF1bHRUb0NvbmZpZzJLZXlzKTtcblxuICB2YXIgb3RoZXJLZXlzID0gT2JqZWN0XG4gICAgLmtleXMoY29uZmlnMilcbiAgICAuZmlsdGVyKGZ1bmN0aW9uIGZpbHRlckF4aW9zS2V5cyhrZXkpIHtcbiAgICAgIHJldHVybiBheGlvc0tleXMuaW5kZXhPZihrZXkpID09PSAtMTtcbiAgICB9KTtcblxuICB1dGlscy5mb3JFYWNoKG90aGVyS2V5cywgZnVuY3Rpb24gb3RoZXJLZXlzRGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/mergeConfig.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar createError = __webpack_require__(/*! ./createError */ \"./node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzPzQ2N2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsa0JBQWtCLG1CQUFPLENBQUMsbUVBQWU7O0FBRXpDO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/settle.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcz9jNDAxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCLFdBQVcsTUFBTTtBQUNqQixXQUFXLGVBQWU7QUFDMUIsYUFBYSxFQUFFO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/core/transformData.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ \"./node_modules/axios/lib/helpers/normalizeHeaderName.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ./adapters/xhr */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ./adapters/http */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzPzI0NDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0NBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLGtEQUFTO0FBQzdCLDBCQUEwQixtQkFBTyxDQUFDLDhGQUErQjs7QUFFakU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsZ0VBQWdCO0FBQ3RDLEdBQUc7QUFDSDtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxpRUFBaUI7QUFDdkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sWUFBWTtBQUNuQjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/defaults.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcz8xZDJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/bind.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanM/MzBiNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMscURBQVk7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/buildURL.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanM/ZTY4MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/combineURLs.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcz83YWFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxxREFBWTs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBDQUEwQztBQUMxQyxTQUFTOztBQUVUO0FBQ0EsNERBQTRELHdCQUF3QjtBQUNwRjtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQywrQkFBK0IsYUFBYSxFQUFFO0FBQzlDO0FBQ0E7QUFDQSxLQUFLO0FBQ0wiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/cookies.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcz9kOTI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/isAbsoluteURL.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzPzM5MzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZOztBQUVoQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/isURLSameOrigin.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcz9jOGFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFlBQVksbUJBQU8sQ0FBQyxtREFBVTs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/normalizeHeaderName.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzP2MzNDUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLHFEQUFZOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLGVBQWU7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/parseHeaders.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzPzBkZjYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/helpers/spread.js\n");

/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Function equal to merge with the difference being that no reference\n * to original objects is kept.\n *\n * @see merge\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction deepMerge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = deepMerge(result[key], val);\n    } else if (typeof val === 'object') {\n      result[key] = deepMerge({}, val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  deepMerge: deepMerge,\n  extend: extend,\n  trim: trim\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/axios/lib/utils.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/sweetalert2/dist/sweetalert2.all.js":
/*!**********************************************************!*\
  !*** ./node_modules/sweetalert2/dist/sweetalert2.all.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n* sweetalert2 v9.17.1\n* Released under the MIT License.\n*/\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (_isNativeReflectConstruct()) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) _setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n    return function _createSuperInternal() {\n      var Super = _getPrototypeOf(Derived),\n          result;\n\n      if (hasNativeReflectConstruct) {\n        var NewTarget = _getPrototypeOf(this).constructor;\n\n        result = Reflect.construct(Super, arguments, NewTarget);\n      } else {\n        result = Super.apply(this, arguments);\n      }\n\n      return _possibleConstructorReturn(this, result);\n    };\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== \"undefined\" && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  var consolePrefix = 'SweetAlert2:';\n  /**\n   * Filter the unique values into a new array\n   * @param arr\n   */\n\n  var uniqueArray = function uniqueArray(arr) {\n    var result = [];\n\n    for (var i = 0; i < arr.length; i++) {\n      if (result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Capitalize the first letter of a string\n   * @param str\n   */\n\n  var capitalizeFirstLetter = function capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n  /**\n   * Returns the array of object values (Object.values isn't supported in IE11)\n   * @param obj\n   */\n\n  var objectValues = function objectValues(obj) {\n    return Object.keys(obj).map(function (key) {\n      return obj[key];\n    });\n  };\n  /**\n   * Convert NodeList to Array\n   * @param nodeList\n   */\n\n  var toArray = function toArray(nodeList) {\n    return Array.prototype.slice.call(nodeList);\n  };\n  /**\n   * Standardise console warnings\n   * @param message\n   */\n\n  var warn = function warn(message) {\n    console.warn(\"\".concat(consolePrefix, \" \").concat(message));\n  };\n  /**\n   * Standardise console errors\n   * @param message\n   */\n\n  var error = function error(message) {\n    console.error(\"\".concat(consolePrefix, \" \").concat(message));\n  };\n  /**\n   * Private global state for `warnOnce`\n   * @type {Array}\n   * @private\n   */\n\n  var previousWarnOnceMessages = [];\n  /**\n   * Show a console warning, but only if it hasn't already been shown\n   * @param message\n   */\n\n  var warnOnce = function warnOnce(message) {\n    if (!(previousWarnOnceMessages.indexOf(message) !== -1)) {\n      previousWarnOnceMessages.push(message);\n      warn(message);\n    }\n  };\n  /**\n   * Show a one-time console warning about deprecated params/methods\n   */\n\n  var warnAboutDepreation = function warnAboutDepreation(deprecatedParam, useInstead) {\n    warnOnce(\"\\\"\".concat(deprecatedParam, \"\\\" is deprecated and will be removed in the next major release. Please use \\\"\").concat(useInstead, \"\\\" instead.\"));\n  };\n  /**\n   * If `arg` is a function, call it (with no arguments or context) and return the result.\n   * Otherwise, just pass the value through\n   * @param arg\n   */\n\n  var callIfFunction = function callIfFunction(arg) {\n    return typeof arg === 'function' ? arg() : arg;\n  };\n  var hasToPromiseFn = function hasToPromiseFn(arg) {\n    return arg && typeof arg.toPromise === 'function';\n  };\n  var asPromise = function asPromise(arg) {\n    return hasToPromiseFn(arg) ? arg.toPromise() : Promise.resolve(arg);\n  };\n  var isPromise = function isPromise(arg) {\n    return arg && Promise.resolve(arg) === arg;\n  };\n\n  var DismissReason = Object.freeze({\n    cancel: 'cancel',\n    backdrop: 'backdrop',\n    close: 'close',\n    esc: 'esc',\n    timer: 'timer'\n  });\n\n  var isJqueryElement = function isJqueryElement(elem) {\n    return _typeof(elem) === 'object' && elem.jquery;\n  };\n\n  var isElement = function isElement(elem) {\n    return elem instanceof Element || isJqueryElement(elem);\n  };\n\n  var argsToParams = function argsToParams(args) {\n    var params = {};\n\n    if (_typeof(args[0]) === 'object' && !isElement(args[0])) {\n      _extends(params, args[0]);\n    } else {\n      ['title', 'html', 'icon'].forEach(function (name, index) {\n        var arg = args[index];\n\n        if (typeof arg === 'string' || isElement(arg)) {\n          params[name] = arg;\n        } else if (arg !== undefined) {\n          error(\"Unexpected type of \".concat(name, \"! Expected \\\"string\\\" or \\\"Element\\\", got \").concat(_typeof(arg)));\n        }\n      });\n    }\n\n    return params;\n  };\n\n  var swalPrefix = 'swal2-';\n  var prefix = function prefix(items) {\n    var result = {};\n\n    for (var i in items) {\n      result[items[i]] = swalPrefix + items[i];\n    }\n\n    return result;\n  };\n  var swalClasses = prefix(['container', 'shown', 'height-auto', 'iosfix', 'popup', 'modal', 'no-backdrop', 'no-transition', 'toast', 'toast-shown', 'toast-column', 'show', 'hide', 'close', 'title', 'header', 'content', 'html-container', 'actions', 'confirm', 'cancel', 'footer', 'icon', 'icon-content', 'image', 'input', 'file', 'range', 'select', 'radio', 'checkbox', 'label', 'textarea', 'inputerror', 'validation-message', 'progress-steps', 'active-progress-step', 'progress-step', 'progress-step-line', 'loading', 'styled', 'top', 'top-start', 'top-end', 'top-left', 'top-right', 'center', 'center-start', 'center-end', 'center-left', 'center-right', 'bottom', 'bottom-start', 'bottom-end', 'bottom-left', 'bottom-right', 'grow-row', 'grow-column', 'grow-fullscreen', 'rtl', 'timer-progress-bar', 'timer-progress-bar-container', 'scrollbar-measure', 'icon-success', 'icon-warning', 'icon-info', 'icon-question', 'icon-error']);\n  var iconTypes = prefix(['success', 'warning', 'info', 'question', 'error']);\n\n  var getContainer = function getContainer() {\n    return document.body.querySelector(\".\".concat(swalClasses.container));\n  };\n  var elementBySelector = function elementBySelector(selectorString) {\n    var container = getContainer();\n    return container ? container.querySelector(selectorString) : null;\n  };\n\n  var elementByClass = function elementByClass(className) {\n    return elementBySelector(\".\".concat(className));\n  };\n\n  var getPopup = function getPopup() {\n    return elementByClass(swalClasses.popup);\n  };\n  var getIcons = function getIcons() {\n    var popup = getPopup();\n    return toArray(popup.querySelectorAll(\".\".concat(swalClasses.icon)));\n  };\n  var getIcon = function getIcon() {\n    var visibleIcon = getIcons().filter(function (icon) {\n      return isVisible(icon);\n    });\n    return visibleIcon.length ? visibleIcon[0] : null;\n  };\n  var getTitle = function getTitle() {\n    return elementByClass(swalClasses.title);\n  };\n  var getContent = function getContent() {\n    return elementByClass(swalClasses.content);\n  };\n  var getHtmlContainer = function getHtmlContainer() {\n    return elementByClass(swalClasses['html-container']);\n  };\n  var getImage = function getImage() {\n    return elementByClass(swalClasses.image);\n  };\n  var getProgressSteps = function getProgressSteps() {\n    return elementByClass(swalClasses['progress-steps']);\n  };\n  var getValidationMessage = function getValidationMessage() {\n    return elementByClass(swalClasses['validation-message']);\n  };\n  var getConfirmButton = function getConfirmButton() {\n    return elementBySelector(\".\".concat(swalClasses.actions, \" .\").concat(swalClasses.confirm));\n  };\n  var getCancelButton = function getCancelButton() {\n    return elementBySelector(\".\".concat(swalClasses.actions, \" .\").concat(swalClasses.cancel));\n  };\n  var getActions = function getActions() {\n    return elementByClass(swalClasses.actions);\n  };\n  var getHeader = function getHeader() {\n    return elementByClass(swalClasses.header);\n  };\n  var getFooter = function getFooter() {\n    return elementByClass(swalClasses.footer);\n  };\n  var getTimerProgressBar = function getTimerProgressBar() {\n    return elementByClass(swalClasses['timer-progress-bar']);\n  };\n  var getCloseButton = function getCloseButton() {\n    return elementByClass(swalClasses.close);\n  }; // https://github.com/jkup/focusable/blob/master/index.js\n\n  var focusable = \"\\n  a[href],\\n  area[href],\\n  input:not([disabled]),\\n  select:not([disabled]),\\n  textarea:not([disabled]),\\n  button:not([disabled]),\\n  iframe,\\n  object,\\n  embed,\\n  [tabindex=\\\"0\\\"],\\n  [contenteditable],\\n  audio[controls],\\n  video[controls],\\n  summary\\n\";\n  var getFocusableElements = function getFocusableElements() {\n    var focusableElementsWithTabindex = toArray(getPopup().querySelectorAll('[tabindex]:not([tabindex=\"-1\"]):not([tabindex=\"0\"])')) // sort according to tabindex\n    .sort(function (a, b) {\n      a = parseInt(a.getAttribute('tabindex'));\n      b = parseInt(b.getAttribute('tabindex'));\n\n      if (a > b) {\n        return 1;\n      } else if (a < b) {\n        return -1;\n      }\n\n      return 0;\n    });\n    var otherFocusableElements = toArray(getPopup().querySelectorAll(focusable)).filter(function (el) {\n      return el.getAttribute('tabindex') !== '-1';\n    });\n    return uniqueArray(focusableElementsWithTabindex.concat(otherFocusableElements)).filter(function (el) {\n      return isVisible(el);\n    });\n  };\n  var isModal = function isModal() {\n    return !isToast() && !document.body.classList.contains(swalClasses['no-backdrop']);\n  };\n  var isToast = function isToast() {\n    return document.body.classList.contains(swalClasses['toast-shown']);\n  };\n  var isLoading = function isLoading() {\n    return getPopup().hasAttribute('data-loading');\n  };\n\n  var states = {\n    previousBodyPadding: null\n  };\n  var setInnerHtml = function setInnerHtml(elem, html) {\n    // #1926\n    elem.textContent = '';\n\n    if (html) {\n      var parser = new DOMParser();\n      var parsed = parser.parseFromString(html, \"text/html\");\n      toArray(parsed.querySelector('head').childNodes).forEach(function (child) {\n        elem.appendChild(child);\n      });\n      toArray(parsed.querySelector('body').childNodes).forEach(function (child) {\n        elem.appendChild(child);\n      });\n    }\n  };\n  var hasClass = function hasClass(elem, className) {\n    if (!className) {\n      return false;\n    }\n\n    var classList = className.split(/\\s+/);\n\n    for (var i = 0; i < classList.length; i++) {\n      if (!elem.classList.contains(classList[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var removeCustomClasses = function removeCustomClasses(elem, params) {\n    toArray(elem.classList).forEach(function (className) {\n      if (!(objectValues(swalClasses).indexOf(className) !== -1) && !(objectValues(iconTypes).indexOf(className) !== -1) && !(objectValues(params.showClass).indexOf(className) !== -1)) {\n        elem.classList.remove(className);\n      }\n    });\n  };\n\n  var applyCustomClass = function applyCustomClass(elem, params, className) {\n    removeCustomClasses(elem, params);\n\n    if (params.customClass && params.customClass[className]) {\n      if (typeof params.customClass[className] !== 'string' && !params.customClass[className].forEach) {\n        return warn(\"Invalid type of customClass.\".concat(className, \"! Expected string or iterable object, got \\\"\").concat(_typeof(params.customClass[className]), \"\\\"\"));\n      }\n\n      addClass(elem, params.customClass[className]);\n    }\n  };\n  function getInput(content, inputType) {\n    if (!inputType) {\n      return null;\n    }\n\n    switch (inputType) {\n      case 'select':\n      case 'textarea':\n      case 'file':\n        return getChildByClass(content, swalClasses[inputType]);\n\n      case 'checkbox':\n        return content.querySelector(\".\".concat(swalClasses.checkbox, \" input\"));\n\n      case 'radio':\n        return content.querySelector(\".\".concat(swalClasses.radio, \" input:checked\")) || content.querySelector(\".\".concat(swalClasses.radio, \" input:first-child\"));\n\n      case 'range':\n        return content.querySelector(\".\".concat(swalClasses.range, \" input\"));\n\n      default:\n        return getChildByClass(content, swalClasses.input);\n    }\n  }\n  var focusInput = function focusInput(input) {\n    input.focus(); // place cursor at end of text in text input\n\n    if (input.type !== 'file') {\n      // http://stackoverflow.com/a/2345915\n      var val = input.value;\n      input.value = '';\n      input.value = val;\n    }\n  };\n  var toggleClass = function toggleClass(target, classList, condition) {\n    if (!target || !classList) {\n      return;\n    }\n\n    if (typeof classList === 'string') {\n      classList = classList.split(/\\s+/).filter(Boolean);\n    }\n\n    classList.forEach(function (className) {\n      if (target.forEach) {\n        target.forEach(function (elem) {\n          condition ? elem.classList.add(className) : elem.classList.remove(className);\n        });\n      } else {\n        condition ? target.classList.add(className) : target.classList.remove(className);\n      }\n    });\n  };\n  var addClass = function addClass(target, classList) {\n    toggleClass(target, classList, true);\n  };\n  var removeClass = function removeClass(target, classList) {\n    toggleClass(target, classList, false);\n  };\n  var getChildByClass = function getChildByClass(elem, className) {\n    for (var i = 0; i < elem.childNodes.length; i++) {\n      if (hasClass(elem.childNodes[i], className)) {\n        return elem.childNodes[i];\n      }\n    }\n  };\n  var applyNumericalStyle = function applyNumericalStyle(elem, property, value) {\n    if (value || parseInt(value) === 0) {\n      elem.style[property] = typeof value === 'number' ? \"\".concat(value, \"px\") : value;\n    } else {\n      elem.style.removeProperty(property);\n    }\n  };\n  var show = function show(elem) {\n    var display = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'flex';\n    elem.style.opacity = '';\n    elem.style.display = display;\n  };\n  var hide = function hide(elem) {\n    elem.style.opacity = '';\n    elem.style.display = 'none';\n  };\n  var toggle = function toggle(elem, condition, display) {\n    condition ? show(elem, display) : hide(elem);\n  }; // borrowed from jquery $(elem).is(':visible') implementation\n\n  var isVisible = function isVisible(elem) {\n    return !!(elem && (elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length));\n  };\n  /* istanbul ignore next */\n\n  var isScrollable = function isScrollable(elem) {\n    return !!(elem.scrollHeight > elem.clientHeight);\n  }; // borrowed from https://stackoverflow.com/a/46352119\n\n  var hasCssAnimation = function hasCssAnimation(elem) {\n    var style = window.getComputedStyle(elem);\n    var animDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');\n    var transDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');\n    return animDuration > 0 || transDuration > 0;\n  };\n  var contains = function contains(haystack, needle) {\n    if (typeof haystack.contains === 'function') {\n      return haystack.contains(needle);\n    }\n  };\n  var animateTimerProgressBar = function animateTimerProgressBar(timer) {\n    var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var timerProgressBar = getTimerProgressBar();\n\n    if (isVisible(timerProgressBar)) {\n      if (reset) {\n        timerProgressBar.style.transition = 'none';\n        timerProgressBar.style.width = '100%';\n      }\n\n      setTimeout(function () {\n        timerProgressBar.style.transition = \"width \".concat(timer / 1000, \"s linear\");\n        timerProgressBar.style.width = '0%';\n      }, 10);\n    }\n  };\n  var stopTimerProgressBar = function stopTimerProgressBar() {\n    var timerProgressBar = getTimerProgressBar();\n    var timerProgressBarWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    timerProgressBar.style.removeProperty('transition');\n    timerProgressBar.style.width = '100%';\n    var timerProgressBarFullWidth = parseInt(window.getComputedStyle(timerProgressBar).width);\n    var timerProgressBarPercent = parseInt(timerProgressBarWidth / timerProgressBarFullWidth * 100);\n    timerProgressBar.style.removeProperty('transition');\n    timerProgressBar.style.width = \"\".concat(timerProgressBarPercent, \"%\");\n  };\n\n  // Detect Node env\n  var isNodeEnv = function isNodeEnv() {\n    return typeof window === 'undefined' || typeof document === 'undefined';\n  };\n\n  var sweetHTML = \"\\n <div aria-labelledby=\\\"\".concat(swalClasses.title, \"\\\" aria-describedby=\\\"\").concat(swalClasses.content, \"\\\" class=\\\"\").concat(swalClasses.popup, \"\\\" tabindex=\\\"-1\\\">\\n   <div class=\\\"\").concat(swalClasses.header, \"\\\">\\n     <ul class=\\\"\").concat(swalClasses['progress-steps'], \"\\\"></ul>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.error, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.question, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.warning, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.info, \"\\\"></div>\\n     <div class=\\\"\").concat(swalClasses.icon, \" \").concat(iconTypes.success, \"\\\"></div>\\n     <img class=\\\"\").concat(swalClasses.image, \"\\\" />\\n     <h2 class=\\\"\").concat(swalClasses.title, \"\\\" id=\\\"\").concat(swalClasses.title, \"\\\"></h2>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.close, \"\\\"></button>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.content, \"\\\">\\n     <div id=\\\"\").concat(swalClasses.content, \"\\\" class=\\\"\").concat(swalClasses['html-container'], \"\\\"></div>\\n     <input class=\\\"\").concat(swalClasses.input, \"\\\" />\\n     <input type=\\\"file\\\" class=\\\"\").concat(swalClasses.file, \"\\\" />\\n     <div class=\\\"\").concat(swalClasses.range, \"\\\">\\n       <input type=\\\"range\\\" />\\n       <output></output>\\n     </div>\\n     <select class=\\\"\").concat(swalClasses.select, \"\\\"></select>\\n     <div class=\\\"\").concat(swalClasses.radio, \"\\\"></div>\\n     <label for=\\\"\").concat(swalClasses.checkbox, \"\\\" class=\\\"\").concat(swalClasses.checkbox, \"\\\">\\n       <input type=\\\"checkbox\\\" />\\n       <span class=\\\"\").concat(swalClasses.label, \"\\\"></span>\\n     </label>\\n     <textarea class=\\\"\").concat(swalClasses.textarea, \"\\\"></textarea>\\n     <div class=\\\"\").concat(swalClasses['validation-message'], \"\\\" id=\\\"\").concat(swalClasses['validation-message'], \"\\\"></div>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.actions, \"\\\">\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.confirm, \"\\\">OK</button>\\n     <button type=\\\"button\\\" class=\\\"\").concat(swalClasses.cancel, \"\\\">Cancel</button>\\n   </div>\\n   <div class=\\\"\").concat(swalClasses.footer, \"\\\"></div>\\n   <div class=\\\"\").concat(swalClasses['timer-progress-bar-container'], \"\\\">\\n     <div class=\\\"\").concat(swalClasses['timer-progress-bar'], \"\\\"></div>\\n   </div>\\n </div>\\n\").replace(/(^|\\n)\\s*/g, '');\n\n  var resetOldContainer = function resetOldContainer() {\n    var oldContainer = getContainer();\n\n    if (!oldContainer) {\n      return false;\n    }\n\n    oldContainer.parentNode.removeChild(oldContainer);\n    removeClass([document.documentElement, document.body], [swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['has-column']]);\n    return true;\n  };\n\n  var oldInputVal; // IE11 workaround, see #1109 for details\n\n  var resetValidationMessage = function resetValidationMessage(e) {\n    if (Swal.isVisible() && oldInputVal !== e.target.value) {\n      Swal.resetValidationMessage();\n    }\n\n    oldInputVal = e.target.value;\n  };\n\n  var addInputChangeListeners = function addInputChangeListeners() {\n    var content = getContent();\n    var input = getChildByClass(content, swalClasses.input);\n    var file = getChildByClass(content, swalClasses.file);\n    var range = content.querySelector(\".\".concat(swalClasses.range, \" input\"));\n    var rangeOutput = content.querySelector(\".\".concat(swalClasses.range, \" output\"));\n    var select = getChildByClass(content, swalClasses.select);\n    var checkbox = content.querySelector(\".\".concat(swalClasses.checkbox, \" input\"));\n    var textarea = getChildByClass(content, swalClasses.textarea);\n    input.oninput = resetValidationMessage;\n    file.onchange = resetValidationMessage;\n    select.onchange = resetValidationMessage;\n    checkbox.onchange = resetValidationMessage;\n    textarea.oninput = resetValidationMessage;\n\n    range.oninput = function (e) {\n      resetValidationMessage(e);\n      rangeOutput.value = range.value;\n    };\n\n    range.onchange = function (e) {\n      resetValidationMessage(e);\n      range.nextSibling.value = range.value;\n    };\n  };\n\n  var getTarget = function getTarget(target) {\n    return typeof target === 'string' ? document.querySelector(target) : target;\n  };\n\n  var setupAccessibility = function setupAccessibility(params) {\n    var popup = getPopup();\n    popup.setAttribute('role', params.toast ? 'alert' : 'dialog');\n    popup.setAttribute('aria-live', params.toast ? 'polite' : 'assertive');\n\n    if (!params.toast) {\n      popup.setAttribute('aria-modal', 'true');\n    }\n  };\n\n  var setupRTL = function setupRTL(targetElement) {\n    if (window.getComputedStyle(targetElement).direction === 'rtl') {\n      addClass(getContainer(), swalClasses.rtl);\n    }\n  };\n  /*\n   * Add modal + backdrop to DOM\n   */\n\n\n  var init = function init(params) {\n    // Clean up the old popup container if it exists\n    var oldContainerExisted = resetOldContainer();\n    /* istanbul ignore if */\n\n    if (isNodeEnv()) {\n      error('SweetAlert2 requires document to initialize');\n      return;\n    }\n\n    var container = document.createElement('div');\n    container.className = swalClasses.container;\n\n    if (oldContainerExisted) {\n      addClass(container, swalClasses['no-transition']);\n    }\n\n    setInnerHtml(container, sweetHTML);\n    var targetElement = getTarget(params.target);\n    targetElement.appendChild(container);\n    setupAccessibility(params);\n    setupRTL(targetElement);\n    addInputChangeListeners();\n  };\n\n  var parseHtmlToContainer = function parseHtmlToContainer(param, target) {\n    // DOM element\n    if (param instanceof HTMLElement) {\n      target.appendChild(param); // Object\n    } else if (_typeof(param) === 'object') {\n      handleObject(param, target); // Plain string\n    } else if (param) {\n      setInnerHtml(target, param);\n    }\n  };\n\n  var handleObject = function handleObject(param, target) {\n    // JQuery element(s)\n    if (param.jquery) {\n      handleJqueryElem(target, param); // For other objects use their string representation\n    } else {\n      setInnerHtml(target, param.toString());\n    }\n  };\n\n  var handleJqueryElem = function handleJqueryElem(target, elem) {\n    target.textContent = '';\n\n    if (0 in elem) {\n      for (var i = 0; (i in elem); i++) {\n        target.appendChild(elem[i].cloneNode(true));\n      }\n    } else {\n      target.appendChild(elem.cloneNode(true));\n    }\n  };\n\n  var animationEndEvent = function () {\n    // Prevent run in Node env\n\n    /* istanbul ignore if */\n    if (isNodeEnv()) {\n      return false;\n    }\n\n    var testEl = document.createElement('div');\n    var transEndEventNames = {\n      WebkitAnimation: 'webkitAnimationEnd',\n      OAnimation: 'oAnimationEnd oanimationend',\n      animation: 'animationend'\n    };\n\n    for (var i in transEndEventNames) {\n      if (Object.prototype.hasOwnProperty.call(transEndEventNames, i) && typeof testEl.style[i] !== 'undefined') {\n        return transEndEventNames[i];\n      }\n    }\n\n    return false;\n  }();\n\n  // https://github.com/twbs/bootstrap/blob/master/js/src/modal.js\n\n  var measureScrollbar = function measureScrollbar() {\n    var scrollDiv = document.createElement('div');\n    scrollDiv.className = swalClasses['scrollbar-measure'];\n    document.body.appendChild(scrollDiv);\n    var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    return scrollbarWidth;\n  };\n\n  var renderActions = function renderActions(instance, params) {\n    var actions = getActions();\n    var confirmButton = getConfirmButton();\n    var cancelButton = getCancelButton(); // Actions (buttons) wrapper\n\n    if (!params.showConfirmButton && !params.showCancelButton) {\n      hide(actions);\n    } // Custom class\n\n\n    applyCustomClass(actions, params, 'actions'); // Render confirm button\n\n    renderButton(confirmButton, 'confirm', params); // render Cancel Button\n\n    renderButton(cancelButton, 'cancel', params);\n\n    if (params.buttonsStyling) {\n      handleButtonsStyling(confirmButton, cancelButton, params);\n    } else {\n      removeClass([confirmButton, cancelButton], swalClasses.styled);\n      confirmButton.style.backgroundColor = confirmButton.style.borderLeftColor = confirmButton.style.borderRightColor = '';\n      cancelButton.style.backgroundColor = cancelButton.style.borderLeftColor = cancelButton.style.borderRightColor = '';\n    }\n\n    if (params.reverseButtons) {\n      confirmButton.parentNode.insertBefore(cancelButton, confirmButton);\n    }\n  };\n\n  function handleButtonsStyling(confirmButton, cancelButton, params) {\n    addClass([confirmButton, cancelButton], swalClasses.styled); // Buttons background colors\n\n    if (params.confirmButtonColor) {\n      confirmButton.style.backgroundColor = params.confirmButtonColor;\n    }\n\n    if (params.cancelButtonColor) {\n      cancelButton.style.backgroundColor = params.cancelButtonColor;\n    } // Loading state\n\n\n    if (!isLoading()) {\n      var confirmButtonBackgroundColor = window.getComputedStyle(confirmButton).getPropertyValue('background-color');\n      confirmButton.style.borderLeftColor = confirmButtonBackgroundColor;\n      confirmButton.style.borderRightColor = confirmButtonBackgroundColor;\n    }\n  }\n\n  function renderButton(button, buttonType, params) {\n    toggle(button, params[\"show\".concat(capitalizeFirstLetter(buttonType), \"Button\")], 'inline-block');\n    setInnerHtml(button, params[\"\".concat(buttonType, \"ButtonText\")]); // Set caption text\n\n    button.setAttribute('aria-label', params[\"\".concat(buttonType, \"ButtonAriaLabel\")]); // ARIA label\n    // Add buttons custom classes\n\n    button.className = swalClasses[buttonType];\n    applyCustomClass(button, params, \"\".concat(buttonType, \"Button\"));\n    addClass(button, params[\"\".concat(buttonType, \"ButtonClass\")]);\n  }\n\n  function handleBackdropParam(container, backdrop) {\n    if (typeof backdrop === 'string') {\n      container.style.background = backdrop;\n    } else if (!backdrop) {\n      addClass([document.documentElement, document.body], swalClasses['no-backdrop']);\n    }\n  }\n\n  function handlePositionParam(container, position) {\n    if (position in swalClasses) {\n      addClass(container, swalClasses[position]);\n    } else {\n      warn('The \"position\" parameter is not valid, defaulting to \"center\"');\n      addClass(container, swalClasses.center);\n    }\n  }\n\n  function handleGrowParam(container, grow) {\n    if (grow && typeof grow === 'string') {\n      var growClass = \"grow-\".concat(grow);\n\n      if (growClass in swalClasses) {\n        addClass(container, swalClasses[growClass]);\n      }\n    }\n  }\n\n  var renderContainer = function renderContainer(instance, params) {\n    var container = getContainer();\n\n    if (!container) {\n      return;\n    }\n\n    handleBackdropParam(container, params.backdrop);\n\n    if (!params.backdrop && params.allowOutsideClick) {\n      warn('\"allowOutsideClick\" parameter requires `backdrop` parameter to be set to `true`');\n    }\n\n    handlePositionParam(container, params.position);\n    handleGrowParam(container, params.grow); // Custom class\n\n    applyCustomClass(container, params, 'container'); // Set queue step attribute for getQueueStep() method\n\n    var queueStep = document.body.getAttribute('data-swal2-queue-step');\n\n    if (queueStep) {\n      container.setAttribute('data-queue-step', queueStep);\n      document.body.removeAttribute('data-swal2-queue-step');\n    }\n  };\n\n  /**\n   * This module containts `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n   * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n   * This is the approach that Babel will probably take to implement private methods/fields\n   *   https://github.com/tc39/proposal-private-methods\n   *   https://github.com/babel/babel/pull/7555\n   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n   *   then we can use that language feature.\n   */\n  var privateProps = {\n    promise: new WeakMap(),\n    innerParams: new WeakMap(),\n    domCache: new WeakMap()\n  };\n\n  var inputTypes = ['input', 'file', 'range', 'select', 'radio', 'checkbox', 'textarea'];\n  var renderInput = function renderInput(instance, params) {\n    var content = getContent();\n    var innerParams = privateProps.innerParams.get(instance);\n    var rerender = !innerParams || params.input !== innerParams.input;\n    inputTypes.forEach(function (inputType) {\n      var inputClass = swalClasses[inputType];\n      var inputContainer = getChildByClass(content, inputClass); // set attributes\n\n      setAttributes(inputType, params.inputAttributes); // set class\n\n      inputContainer.className = inputClass;\n\n      if (rerender) {\n        hide(inputContainer);\n      }\n    });\n\n    if (params.input) {\n      if (rerender) {\n        showInput(params);\n      } // set custom class\n\n\n      setCustomClass(params);\n    }\n  };\n\n  var showInput = function showInput(params) {\n    if (!renderInputType[params.input]) {\n      return error(\"Unexpected type of input! Expected \\\"text\\\", \\\"email\\\", \\\"password\\\", \\\"number\\\", \\\"tel\\\", \\\"select\\\", \\\"radio\\\", \\\"checkbox\\\", \\\"textarea\\\", \\\"file\\\" or \\\"url\\\", got \\\"\".concat(params.input, \"\\\"\"));\n    }\n\n    var inputContainer = getInputContainer(params.input);\n    var input = renderInputType[params.input](inputContainer, params);\n    show(input); // input autofocus\n\n    setTimeout(function () {\n      focusInput(input);\n    });\n  };\n\n  var removeAttributes = function removeAttributes(input) {\n    for (var i = 0; i < input.attributes.length; i++) {\n      var attrName = input.attributes[i].name;\n\n      if (!(['type', 'value', 'style'].indexOf(attrName) !== -1)) {\n        input.removeAttribute(attrName);\n      }\n    }\n  };\n\n  var setAttributes = function setAttributes(inputType, inputAttributes) {\n    var input = getInput(getContent(), inputType);\n\n    if (!input) {\n      return;\n    }\n\n    removeAttributes(input);\n\n    for (var attr in inputAttributes) {\n      // Do not set a placeholder for <input type=\"range\">\n      // it'll crash Edge, #1298\n      if (inputType === 'range' && attr === 'placeholder') {\n        continue;\n      }\n\n      input.setAttribute(attr, inputAttributes[attr]);\n    }\n  };\n\n  var setCustomClass = function setCustomClass(params) {\n    var inputContainer = getInputContainer(params.input);\n\n    if (params.customClass) {\n      addClass(inputContainer, params.customClass.input);\n    }\n  };\n\n  var setInputPlaceholder = function setInputPlaceholder(input, params) {\n    if (!input.placeholder || params.inputPlaceholder) {\n      input.placeholder = params.inputPlaceholder;\n    }\n  };\n\n  var getInputContainer = function getInputContainer(inputType) {\n    var inputClass = swalClasses[inputType] ? swalClasses[inputType] : swalClasses.input;\n    return getChildByClass(getContent(), inputClass);\n  };\n\n  var renderInputType = {};\n\n  renderInputType.text = renderInputType.email = renderInputType.password = renderInputType.number = renderInputType.tel = renderInputType.url = function (input, params) {\n    if (typeof params.inputValue === 'string' || typeof params.inputValue === 'number') {\n      input.value = params.inputValue;\n    } else if (!isPromise(params.inputValue)) {\n      warn(\"Unexpected type of inputValue! Expected \\\"string\\\", \\\"number\\\" or \\\"Promise\\\", got \\\"\".concat(_typeof(params.inputValue), \"\\\"\"));\n    }\n\n    setInputPlaceholder(input, params);\n    input.type = params.input;\n    return input;\n  };\n\n  renderInputType.file = function (input, params) {\n    setInputPlaceholder(input, params);\n    return input;\n  };\n\n  renderInputType.range = function (range, params) {\n    var rangeInput = range.querySelector('input');\n    var rangeOutput = range.querySelector('output');\n    rangeInput.value = params.inputValue;\n    rangeInput.type = params.input;\n    rangeOutput.value = params.inputValue;\n    return range;\n  };\n\n  renderInputType.select = function (select, params) {\n    select.textContent = '';\n\n    if (params.inputPlaceholder) {\n      var placeholder = document.createElement('option');\n      setInnerHtml(placeholder, params.inputPlaceholder);\n      placeholder.value = '';\n      placeholder.disabled = true;\n      placeholder.selected = true;\n      select.appendChild(placeholder);\n    }\n\n    return select;\n  };\n\n  renderInputType.radio = function (radio) {\n    radio.textContent = '';\n    return radio;\n  };\n\n  renderInputType.checkbox = function (checkboxContainer, params) {\n    var checkbox = getInput(getContent(), 'checkbox');\n    checkbox.value = 1;\n    checkbox.id = swalClasses.checkbox;\n    checkbox.checked = Boolean(params.inputValue);\n    var label = checkboxContainer.querySelector('span');\n    setInnerHtml(label, params.inputPlaceholder);\n    return checkboxContainer;\n  };\n\n  renderInputType.textarea = function (textarea, params) {\n    textarea.value = params.inputValue;\n    setInputPlaceholder(textarea, params);\n\n    if ('MutationObserver' in window) {\n      // #1699\n      var initialPopupWidth = parseInt(window.getComputedStyle(getPopup()).width);\n      var popupPadding = parseInt(window.getComputedStyle(getPopup()).paddingLeft) + parseInt(window.getComputedStyle(getPopup()).paddingRight);\n\n      var outputsize = function outputsize() {\n        var contentWidth = textarea.offsetWidth + popupPadding;\n\n        if (contentWidth > initialPopupWidth) {\n          getPopup().style.width = \"\".concat(contentWidth, \"px\");\n        } else {\n          getPopup().style.width = null;\n        }\n      };\n\n      new MutationObserver(outputsize).observe(textarea, {\n        attributes: true,\n        attributeFilter: ['style']\n      });\n    }\n\n    return textarea;\n  };\n\n  var renderContent = function renderContent(instance, params) {\n    var content = getContent().querySelector(\"#\".concat(swalClasses.content)); // Content as HTML\n\n    if (params.html) {\n      parseHtmlToContainer(params.html, content);\n      show(content, 'block'); // Content as plain text\n    } else if (params.text) {\n      content.textContent = params.text;\n      show(content, 'block'); // No content\n    } else {\n      hide(content);\n    }\n\n    renderInput(instance, params); // Custom class\n\n    applyCustomClass(getContent(), params, 'content');\n  };\n\n  var renderFooter = function renderFooter(instance, params) {\n    var footer = getFooter();\n    toggle(footer, params.footer);\n\n    if (params.footer) {\n      parseHtmlToContainer(params.footer, footer);\n    } // Custom class\n\n\n    applyCustomClass(footer, params, 'footer');\n  };\n\n  var renderCloseButton = function renderCloseButton(instance, params) {\n    var closeButton = getCloseButton();\n    setInnerHtml(closeButton, params.closeButtonHtml); // Custom class\n\n    applyCustomClass(closeButton, params, 'closeButton');\n    toggle(closeButton, params.showCloseButton);\n    closeButton.setAttribute('aria-label', params.closeButtonAriaLabel);\n  };\n\n  var renderIcon = function renderIcon(instance, params) {\n    var innerParams = privateProps.innerParams.get(instance); // if the give icon already rendered, apply the custom class without re-rendering the icon\n\n    if (innerParams && params.icon === innerParams.icon && getIcon()) {\n      applyCustomClass(getIcon(), params, 'icon');\n      return;\n    }\n\n    hideAllIcons();\n\n    if (!params.icon) {\n      return;\n    }\n\n    if (Object.keys(iconTypes).indexOf(params.icon) !== -1) {\n      var icon = elementBySelector(\".\".concat(swalClasses.icon, \".\").concat(iconTypes[params.icon]));\n      show(icon); // Custom or default content\n\n      setContent(icon, params);\n      adjustSuccessIconBackgoundColor(); // Custom class\n\n      applyCustomClass(icon, params, 'icon'); // Animate icon\n\n      addClass(icon, params.showClass.icon);\n    } else {\n      error(\"Unknown icon! Expected \\\"success\\\", \\\"error\\\", \\\"warning\\\", \\\"info\\\" or \\\"question\\\", got \\\"\".concat(params.icon, \"\\\"\"));\n    }\n  };\n\n  var hideAllIcons = function hideAllIcons() {\n    var icons = getIcons();\n\n    for (var i = 0; i < icons.length; i++) {\n      hide(icons[i]);\n    }\n  }; // Adjust success icon background color to match the popup background color\n\n\n  var adjustSuccessIconBackgoundColor = function adjustSuccessIconBackgoundColor() {\n    var popup = getPopup();\n    var popupBackgroundColor = window.getComputedStyle(popup).getPropertyValue('background-color');\n    var successIconParts = popup.querySelectorAll('[class^=swal2-success-circular-line], .swal2-success-fix');\n\n    for (var i = 0; i < successIconParts.length; i++) {\n      successIconParts[i].style.backgroundColor = popupBackgroundColor;\n    }\n  };\n\n  var setContent = function setContent(icon, params) {\n    icon.textContent = '';\n\n    if (params.iconHtml) {\n      setInnerHtml(icon, iconContent(params.iconHtml));\n    } else if (params.icon === 'success') {\n      setInnerHtml(icon, \"\\n      <div class=\\\"swal2-success-circular-line-left\\\"></div>\\n      <span class=\\\"swal2-success-line-tip\\\"></span> <span class=\\\"swal2-success-line-long\\\"></span>\\n      <div class=\\\"swal2-success-ring\\\"></div> <div class=\\\"swal2-success-fix\\\"></div>\\n      <div class=\\\"swal2-success-circular-line-right\\\"></div>\\n    \");\n    } else if (params.icon === 'error') {\n      setInnerHtml(icon, \"\\n      <span class=\\\"swal2-x-mark\\\">\\n        <span class=\\\"swal2-x-mark-line-left\\\"></span>\\n        <span class=\\\"swal2-x-mark-line-right\\\"></span>\\n      </span>\\n    \");\n    } else {\n      var defaultIconHtml = {\n        question: '?',\n        warning: '!',\n        info: 'i'\n      };\n      setInnerHtml(icon, iconContent(defaultIconHtml[params.icon]));\n    }\n  };\n\n  var iconContent = function iconContent(content) {\n    return \"<div class=\\\"\".concat(swalClasses['icon-content'], \"\\\">\").concat(content, \"</div>\");\n  };\n\n  var renderImage = function renderImage(instance, params) {\n    var image = getImage();\n\n    if (!params.imageUrl) {\n      return hide(image);\n    }\n\n    show(image, ''); // Src, alt\n\n    image.setAttribute('src', params.imageUrl);\n    image.setAttribute('alt', params.imageAlt); // Width, height\n\n    applyNumericalStyle(image, 'width', params.imageWidth);\n    applyNumericalStyle(image, 'height', params.imageHeight); // Class\n\n    image.className = swalClasses.image;\n    applyCustomClass(image, params, 'image');\n  };\n\n  var currentSteps = [];\n  /*\n   * Global function for chaining sweetAlert popups\n   */\n\n  var queue = function queue(steps) {\n    var Swal = this;\n    currentSteps = steps;\n\n    var resetAndResolve = function resetAndResolve(resolve, value) {\n      currentSteps = [];\n      resolve(value);\n    };\n\n    var queueResult = [];\n    return new Promise(function (resolve) {\n      (function step(i, callback) {\n        if (i < currentSteps.length) {\n          document.body.setAttribute('data-swal2-queue-step', i);\n          Swal.fire(currentSteps[i]).then(function (result) {\n            if (typeof result.value !== 'undefined') {\n              queueResult.push(result.value);\n              step(i + 1, callback);\n            } else {\n              resetAndResolve(resolve, {\n                dismiss: result.dismiss\n              });\n            }\n          });\n        } else {\n          resetAndResolve(resolve, {\n            value: queueResult\n          });\n        }\n      })(0);\n    });\n  };\n  /*\n   * Global function for getting the index of current popup in queue\n   */\n\n  var getQueueStep = function getQueueStep() {\n    return getContainer() && getContainer().getAttribute('data-queue-step');\n  };\n  /*\n   * Global function for inserting a popup to the queue\n   */\n\n  var insertQueueStep = function insertQueueStep(step, index) {\n    if (index && index < currentSteps.length) {\n      return currentSteps.splice(index, 0, step);\n    }\n\n    return currentSteps.push(step);\n  };\n  /*\n   * Global function for deleting a popup from the queue\n   */\n\n  var deleteQueueStep = function deleteQueueStep(index) {\n    if (typeof currentSteps[index] !== 'undefined') {\n      currentSteps.splice(index, 1);\n    }\n  };\n\n  var createStepElement = function createStepElement(step) {\n    var stepEl = document.createElement('li');\n    addClass(stepEl, swalClasses['progress-step']);\n    setInnerHtml(stepEl, step);\n    return stepEl;\n  };\n\n  var createLineElement = function createLineElement(params) {\n    var lineEl = document.createElement('li');\n    addClass(lineEl, swalClasses['progress-step-line']);\n\n    if (params.progressStepsDistance) {\n      lineEl.style.width = params.progressStepsDistance;\n    }\n\n    return lineEl;\n  };\n\n  var renderProgressSteps = function renderProgressSteps(instance, params) {\n    var progressStepsContainer = getProgressSteps();\n\n    if (!params.progressSteps || params.progressSteps.length === 0) {\n      return hide(progressStepsContainer);\n    }\n\n    show(progressStepsContainer);\n    progressStepsContainer.textContent = '';\n    var currentProgressStep = parseInt(params.currentProgressStep === undefined ? getQueueStep() : params.currentProgressStep);\n\n    if (currentProgressStep >= params.progressSteps.length) {\n      warn('Invalid currentProgressStep parameter, it should be less than progressSteps.length ' + '(currentProgressStep like JS arrays starts from 0)');\n    }\n\n    params.progressSteps.forEach(function (step, index) {\n      var stepEl = createStepElement(step);\n      progressStepsContainer.appendChild(stepEl);\n\n      if (index === currentProgressStep) {\n        addClass(stepEl, swalClasses['active-progress-step']);\n      }\n\n      if (index !== params.progressSteps.length - 1) {\n        var lineEl = createLineElement(params);\n        progressStepsContainer.appendChild(lineEl);\n      }\n    });\n  };\n\n  var renderTitle = function renderTitle(instance, params) {\n    var title = getTitle();\n    toggle(title, params.title || params.titleText);\n\n    if (params.title) {\n      parseHtmlToContainer(params.title, title);\n    }\n\n    if (params.titleText) {\n      title.innerText = params.titleText;\n    } // Custom class\n\n\n    applyCustomClass(title, params, 'title');\n  };\n\n  var renderHeader = function renderHeader(instance, params) {\n    var header = getHeader(); // Custom class\n\n    applyCustomClass(header, params, 'header'); // Progress steps\n\n    renderProgressSteps(instance, params); // Icon\n\n    renderIcon(instance, params); // Image\n\n    renderImage(instance, params); // Title\n\n    renderTitle(instance, params); // Close button\n\n    renderCloseButton(instance, params);\n  };\n\n  var renderPopup = function renderPopup(instance, params) {\n    var popup = getPopup(); // Width\n\n    applyNumericalStyle(popup, 'width', params.width); // Padding\n\n    applyNumericalStyle(popup, 'padding', params.padding); // Background\n\n    if (params.background) {\n      popup.style.background = params.background;\n    } // Classes\n\n\n    addClasses(popup, params);\n  };\n\n  var addClasses = function addClasses(popup, params) {\n    // Default Class + showClass when updating Swal.update({})\n    popup.className = \"\".concat(swalClasses.popup, \" \").concat(isVisible(popup) ? params.showClass.popup : '');\n\n    if (params.toast) {\n      addClass([document.documentElement, document.body], swalClasses['toast-shown']);\n      addClass(popup, swalClasses.toast);\n    } else {\n      addClass(popup, swalClasses.modal);\n    } // Custom class\n\n\n    applyCustomClass(popup, params, 'popup');\n\n    if (typeof params.customClass === 'string') {\n      addClass(popup, params.customClass);\n    } // Icon class (#1842)\n\n\n    if (params.icon) {\n      addClass(popup, swalClasses[\"icon-\".concat(params.icon)]);\n    }\n  };\n\n  var render = function render(instance, params) {\n    renderPopup(instance, params);\n    renderContainer(instance, params);\n    renderHeader(instance, params);\n    renderContent(instance, params);\n    renderActions(instance, params);\n    renderFooter(instance, params);\n\n    if (typeof params.onRender === 'function') {\n      params.onRender(getPopup());\n    }\n  };\n\n  /*\n   * Global function to determine if SweetAlert2 popup is shown\n   */\n\n  var isVisible$1 = function isVisible$$1() {\n    return isVisible(getPopup());\n  };\n  /*\n   * Global function to click 'Confirm' button\n   */\n\n  var clickConfirm = function clickConfirm() {\n    return getConfirmButton() && getConfirmButton().click();\n  };\n  /*\n   * Global function to click 'Cancel' button\n   */\n\n  var clickCancel = function clickCancel() {\n    return getCancelButton() && getCancelButton().click();\n  };\n\n  function fire() {\n    var Swal = this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _construct(Swal, args);\n  }\n\n  /**\n   * Returns an extended version of `Swal` containing `params` as defaults.\n   * Useful for reusing Swal configuration.\n   *\n   * For example:\n   *\n   * Before:\n   * const textPromptOptions = { input: 'text', showCancelButton: true }\n   * const {value: firstName} = await Swal.fire({ ...textPromptOptions, title: 'What is your first name?' })\n   * const {value: lastName} = await Swal.fire({ ...textPromptOptions, title: 'What is your last name?' })\n   *\n   * After:\n   * const TextPrompt = Swal.mixin({ input: 'text', showCancelButton: true })\n   * const {value: firstName} = await TextPrompt('What is your first name?')\n   * const {value: lastName} = await TextPrompt('What is your last name?')\n   *\n   * @param mixinParams\n   */\n  function mixin(mixinParams) {\n    var MixinSwal = /*#__PURE__*/function (_this) {\n      _inherits(MixinSwal, _this);\n\n      var _super = _createSuper(MixinSwal);\n\n      function MixinSwal() {\n        _classCallCheck(this, MixinSwal);\n\n        return _super.apply(this, arguments);\n      }\n\n      _createClass(MixinSwal, [{\n        key: \"_main\",\n        value: function _main(params) {\n          return _get(_getPrototypeOf(MixinSwal.prototype), \"_main\", this).call(this, _extends({}, mixinParams, params));\n        }\n      }]);\n\n      return MixinSwal;\n    }(this);\n\n    return MixinSwal;\n  }\n\n  /**\n   * Show spinner instead of Confirm button\n   */\n\n  var showLoading = function showLoading() {\n    var popup = getPopup();\n\n    if (!popup) {\n      Swal.fire();\n    }\n\n    popup = getPopup();\n    var actions = getActions();\n    var confirmButton = getConfirmButton();\n    show(actions);\n    show(confirmButton, 'inline-block');\n    addClass([popup, actions], swalClasses.loading);\n    confirmButton.disabled = true;\n    popup.setAttribute('data-loading', true);\n    popup.setAttribute('aria-busy', true);\n    popup.focus();\n  };\n\n  var RESTORE_FOCUS_TIMEOUT = 100;\n\n  var globalState = {};\n\n  var focusPreviousActiveElement = function focusPreviousActiveElement() {\n    if (globalState.previousActiveElement && globalState.previousActiveElement.focus) {\n      globalState.previousActiveElement.focus();\n      globalState.previousActiveElement = null;\n    } else if (document.body) {\n      document.body.focus();\n    }\n  }; // Restore previous active (focused) element\n\n\n  var restoreActiveElement = function restoreActiveElement() {\n    return new Promise(function (resolve) {\n      var x = window.scrollX;\n      var y = window.scrollY;\n      globalState.restoreFocusTimeout = setTimeout(function () {\n        focusPreviousActiveElement();\n        resolve();\n      }, RESTORE_FOCUS_TIMEOUT); // issues/900\n\n      /* istanbul ignore if */\n\n      if (typeof x !== 'undefined' && typeof y !== 'undefined') {\n        // IE doesn't have scrollX/scrollY support\n        window.scrollTo(x, y);\n      }\n    });\n  };\n\n  /**\n   * If `timer` parameter is set, returns number of milliseconds of timer remained.\n   * Otherwise, returns undefined.\n   */\n\n  var getTimerLeft = function getTimerLeft() {\n    return globalState.timeout && globalState.timeout.getTimerLeft();\n  };\n  /**\n   * Stop timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  var stopTimer = function stopTimer() {\n    if (globalState.timeout) {\n      stopTimerProgressBar();\n      return globalState.timeout.stop();\n    }\n  };\n  /**\n   * Resume timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  var resumeTimer = function resumeTimer() {\n    if (globalState.timeout) {\n      var remaining = globalState.timeout.start();\n      animateTimerProgressBar(remaining);\n      return remaining;\n    }\n  };\n  /**\n   * Resume timer. Returns number of milliseconds of timer remained.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  var toggleTimer = function toggleTimer() {\n    var timer = globalState.timeout;\n    return timer && (timer.running ? stopTimer() : resumeTimer());\n  };\n  /**\n   * Increase timer. Returns number of milliseconds of an updated timer.\n   * If `timer` parameter isn't set, returns undefined.\n   */\n\n  var increaseTimer = function increaseTimer(n) {\n    if (globalState.timeout) {\n      var remaining = globalState.timeout.increase(n);\n      animateTimerProgressBar(remaining, true);\n      return remaining;\n    }\n  };\n  /**\n   * Check if timer is running. Returns true if timer is running\n   * or false if timer is paused or stopped.\n   * If `timer` parameter isn't set, returns undefined\n   */\n\n  var isTimerRunning = function isTimerRunning() {\n    return globalState.timeout && globalState.timeout.isRunning();\n  };\n\n  var defaultParams = {\n    title: '',\n    titleText: '',\n    text: '',\n    html: '',\n    footer: '',\n    icon: undefined,\n    iconHtml: undefined,\n    toast: false,\n    animation: true,\n    showClass: {\n      popup: 'swal2-show',\n      backdrop: 'swal2-backdrop-show',\n      icon: 'swal2-icon-show'\n    },\n    hideClass: {\n      popup: 'swal2-hide',\n      backdrop: 'swal2-backdrop-hide',\n      icon: 'swal2-icon-hide'\n    },\n    customClass: undefined,\n    target: 'body',\n    backdrop: true,\n    heightAuto: true,\n    allowOutsideClick: true,\n    allowEscapeKey: true,\n    allowEnterKey: true,\n    stopKeydownPropagation: true,\n    keydownListenerCapture: false,\n    showConfirmButton: true,\n    showCancelButton: false,\n    preConfirm: undefined,\n    confirmButtonText: 'OK',\n    confirmButtonAriaLabel: '',\n    confirmButtonColor: undefined,\n    cancelButtonText: 'Cancel',\n    cancelButtonAriaLabel: '',\n    cancelButtonColor: undefined,\n    buttonsStyling: true,\n    reverseButtons: false,\n    focusConfirm: true,\n    focusCancel: false,\n    showCloseButton: false,\n    closeButtonHtml: '&times;',\n    closeButtonAriaLabel: 'Close this dialog',\n    showLoaderOnConfirm: false,\n    imageUrl: undefined,\n    imageWidth: undefined,\n    imageHeight: undefined,\n    imageAlt: '',\n    timer: undefined,\n    timerProgressBar: false,\n    width: undefined,\n    padding: undefined,\n    background: undefined,\n    input: undefined,\n    inputPlaceholder: '',\n    inputValue: '',\n    inputOptions: {},\n    inputAutoTrim: true,\n    inputAttributes: {},\n    inputValidator: undefined,\n    validationMessage: undefined,\n    grow: false,\n    position: 'center',\n    progressSteps: [],\n    currentProgressStep: undefined,\n    progressStepsDistance: undefined,\n    onBeforeOpen: undefined,\n    onOpen: undefined,\n    onRender: undefined,\n    onClose: undefined,\n    onAfterClose: undefined,\n    onDestroy: undefined,\n    scrollbarPadding: true\n  };\n  var updatableParams = ['title', 'titleText', 'text', 'html', 'footer', 'icon', 'hideClass', 'customClass', 'allowOutsideClick', 'allowEscapeKey', 'showConfirmButton', 'showCancelButton', 'confirmButtonText', 'confirmButtonAriaLabel', 'confirmButtonColor', 'cancelButtonText', 'cancelButtonAriaLabel', 'cancelButtonColor', 'buttonsStyling', 'reverseButtons', 'showCloseButton', 'closeButtonHtml', 'closeButtonAriaLabel', 'imageUrl', 'imageWidth', 'imageHeight', 'imageAlt', 'progressSteps', 'currentProgressStep', 'onClose', 'onAfterClose', 'onDestroy'];\n  var deprecatedParams = {\n    animation: 'showClass\" and \"hideClass'\n  };\n  var toastIncompatibleParams = ['allowOutsideClick', 'allowEnterKey', 'backdrop', 'focusConfirm', 'focusCancel', 'heightAuto', 'keydownListenerCapture'];\n  /**\n   * Is valid parameter\n   * @param {String} paramName\n   */\n\n  var isValidParameter = function isValidParameter(paramName) {\n    return Object.prototype.hasOwnProperty.call(defaultParams, paramName);\n  };\n  /**\n   * Is valid parameter for Swal.update() method\n   * @param {String} paramName\n   */\n\n  var isUpdatableParameter = function isUpdatableParameter(paramName) {\n    return updatableParams.indexOf(paramName) !== -1;\n  };\n  /**\n   * Is deprecated parameter\n   * @param {String} paramName\n   */\n\n  var isDeprecatedParameter = function isDeprecatedParameter(paramName) {\n    return deprecatedParams[paramName];\n  };\n\n  var checkIfParamIsValid = function checkIfParamIsValid(param) {\n    if (!isValidParameter(param)) {\n      warn(\"Unknown parameter \\\"\".concat(param, \"\\\"\"));\n    }\n  };\n\n  var checkIfToastParamIsValid = function checkIfToastParamIsValid(param) {\n    if (toastIncompatibleParams.indexOf(param) !== -1) {\n      warn(\"The parameter \\\"\".concat(param, \"\\\" is incompatible with toasts\"));\n    }\n  };\n\n  var checkIfParamIsDeprecated = function checkIfParamIsDeprecated(param) {\n    if (isDeprecatedParameter(param)) {\n      warnAboutDepreation(param, isDeprecatedParameter(param));\n    }\n  };\n  /**\n   * Show relevant warnings for given params\n   *\n   * @param params\n   */\n\n\n  var showWarningsForParams = function showWarningsForParams(params) {\n    for (var param in params) {\n      checkIfParamIsValid(param);\n\n      if (params.toast) {\n        checkIfToastParamIsValid(param);\n      }\n\n      checkIfParamIsDeprecated(param);\n    }\n  };\n\n\n\n  var staticMethods = /*#__PURE__*/Object.freeze({\n    isValidParameter: isValidParameter,\n    isUpdatableParameter: isUpdatableParameter,\n    isDeprecatedParameter: isDeprecatedParameter,\n    argsToParams: argsToParams,\n    isVisible: isVisible$1,\n    clickConfirm: clickConfirm,\n    clickCancel: clickCancel,\n    getContainer: getContainer,\n    getPopup: getPopup,\n    getTitle: getTitle,\n    getContent: getContent,\n    getHtmlContainer: getHtmlContainer,\n    getImage: getImage,\n    getIcon: getIcon,\n    getIcons: getIcons,\n    getCloseButton: getCloseButton,\n    getActions: getActions,\n    getConfirmButton: getConfirmButton,\n    getCancelButton: getCancelButton,\n    getHeader: getHeader,\n    getFooter: getFooter,\n    getTimerProgressBar: getTimerProgressBar,\n    getFocusableElements: getFocusableElements,\n    getValidationMessage: getValidationMessage,\n    isLoading: isLoading,\n    fire: fire,\n    mixin: mixin,\n    queue: queue,\n    getQueueStep: getQueueStep,\n    insertQueueStep: insertQueueStep,\n    deleteQueueStep: deleteQueueStep,\n    showLoading: showLoading,\n    enableLoading: showLoading,\n    getTimerLeft: getTimerLeft,\n    stopTimer: stopTimer,\n    resumeTimer: resumeTimer,\n    toggleTimer: toggleTimer,\n    increaseTimer: increaseTimer,\n    isTimerRunning: isTimerRunning\n  });\n\n  /**\n   * Enables buttons and hide loader.\n   */\n\n  function hideLoading() {\n    // do nothing if popup is closed\n    var innerParams = privateProps.innerParams.get(this);\n\n    if (!innerParams) {\n      return;\n    }\n\n    var domCache = privateProps.domCache.get(this);\n\n    if (!innerParams.showConfirmButton) {\n      hide(domCache.confirmButton);\n\n      if (!innerParams.showCancelButton) {\n        hide(domCache.actions);\n      }\n    }\n\n    removeClass([domCache.popup, domCache.actions], swalClasses.loading);\n    domCache.popup.removeAttribute('aria-busy');\n    domCache.popup.removeAttribute('data-loading');\n    domCache.confirmButton.disabled = false;\n    domCache.cancelButton.disabled = false;\n  }\n\n  function getInput$1(instance) {\n    var innerParams = privateProps.innerParams.get(instance || this);\n    var domCache = privateProps.domCache.get(instance || this);\n\n    if (!domCache) {\n      return null;\n    }\n\n    return getInput(domCache.content, innerParams.input);\n  }\n\n  var fixScrollbar = function fixScrollbar() {\n    // for queues, do not do this more than once\n    if (states.previousBodyPadding !== null) {\n      return;\n    } // if the body has overflow\n\n\n    if (document.body.scrollHeight > window.innerHeight) {\n      // add padding so the content doesn't shift after removal of scrollbar\n      states.previousBodyPadding = parseInt(window.getComputedStyle(document.body).getPropertyValue('padding-right'));\n      document.body.style.paddingRight = \"\".concat(states.previousBodyPadding + measureScrollbar(), \"px\");\n    }\n  };\n  var undoScrollbar = function undoScrollbar() {\n    if (states.previousBodyPadding !== null) {\n      document.body.style.paddingRight = \"\".concat(states.previousBodyPadding, \"px\");\n      states.previousBodyPadding = null;\n    }\n  };\n\n  /* istanbul ignore file */\n\n  var iOSfix = function iOSfix() {\n    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1;\n\n    if (iOS && !hasClass(document.body, swalClasses.iosfix)) {\n      var offset = document.body.scrollTop;\n      document.body.style.top = \"\".concat(offset * -1, \"px\");\n      addClass(document.body, swalClasses.iosfix);\n      lockBodyScroll();\n      addBottomPaddingForTallPopups(); // #1948\n    }\n  };\n\n  var addBottomPaddingForTallPopups = function addBottomPaddingForTallPopups() {\n    var safari = !navigator.userAgent.match(/(CriOS|FxiOS|EdgiOS|YaBrowser|UCBrowser)/i);\n\n    if (safari) {\n      var bottomPanelHeight = 44;\n\n      if (getPopup().scrollHeight > window.innerHeight - bottomPanelHeight) {\n        getContainer().style.paddingBottom = \"\".concat(bottomPanelHeight, \"px\");\n      }\n    }\n  };\n\n  var lockBodyScroll = function lockBodyScroll() {\n    // #1246\n    var container = getContainer();\n    var preventTouchMove;\n\n    container.ontouchstart = function (e) {\n      preventTouchMove = shouldPreventTouchMove(e.target);\n    };\n\n    container.ontouchmove = function (e) {\n      if (preventTouchMove) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    };\n  };\n\n  var shouldPreventTouchMove = function shouldPreventTouchMove(target) {\n    var container = getContainer();\n\n    if (target === container) {\n      return true;\n    }\n\n    if (!isScrollable(container) && target.tagName !== 'INPUT' && // #1603\n    !(isScrollable(getContent()) && // #1944\n    getContent().contains(target))) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var undoIOSfix = function undoIOSfix() {\n    if (hasClass(document.body, swalClasses.iosfix)) {\n      var offset = parseInt(document.body.style.top, 10);\n      removeClass(document.body, swalClasses.iosfix);\n      document.body.style.top = '';\n      document.body.scrollTop = offset * -1;\n    }\n  };\n\n  /* istanbul ignore file */\n\n  var isIE11 = function isIE11() {\n    return !!window.MSInputMethodContext && !!document.documentMode;\n  }; // Fix IE11 centering sweetalert2/issues/933\n\n\n  var fixVerticalPositionIE = function fixVerticalPositionIE() {\n    var container = getContainer();\n    var popup = getPopup();\n    container.style.removeProperty('align-items');\n\n    if (popup.offsetTop < 0) {\n      container.style.alignItems = 'flex-start';\n    }\n  };\n\n  var IEfix = function IEfix() {\n    if (typeof window !== 'undefined' && isIE11()) {\n      fixVerticalPositionIE();\n      window.addEventListener('resize', fixVerticalPositionIE);\n    }\n  };\n  var undoIEfix = function undoIEfix() {\n    if (typeof window !== 'undefined' && isIE11()) {\n      window.removeEventListener('resize', fixVerticalPositionIE);\n    }\n  };\n\n  // Adding aria-hidden=\"true\" to elements outside of the active modal dialog ensures that\n  // elements not within the active modal dialog will not be surfaced if a user opens a screen\n  // reader’s list of elements (headings, form controls, landmarks, etc.) in the document.\n\n  var setAriaHidden = function setAriaHidden() {\n    var bodyChildren = toArray(document.body.children);\n    bodyChildren.forEach(function (el) {\n      if (el === getContainer() || contains(el, getContainer())) {\n        return;\n      }\n\n      if (el.hasAttribute('aria-hidden')) {\n        el.setAttribute('data-previous-aria-hidden', el.getAttribute('aria-hidden'));\n      }\n\n      el.setAttribute('aria-hidden', 'true');\n    });\n  };\n  var unsetAriaHidden = function unsetAriaHidden() {\n    var bodyChildren = toArray(document.body.children);\n    bodyChildren.forEach(function (el) {\n      if (el.hasAttribute('data-previous-aria-hidden')) {\n        el.setAttribute('aria-hidden', el.getAttribute('data-previous-aria-hidden'));\n        el.removeAttribute('data-previous-aria-hidden');\n      } else {\n        el.removeAttribute('aria-hidden');\n      }\n    });\n  };\n\n  /**\n   * This module containts `WeakMap`s for each effectively-\"private  property\" that a `Swal` has.\n   * For example, to set the private property \"foo\" of `this` to \"bar\", you can `privateProps.foo.set(this, 'bar')`\n   * This is the approach that Babel will probably take to implement private methods/fields\n   *   https://github.com/tc39/proposal-private-methods\n   *   https://github.com/babel/babel/pull/7555\n   * Once we have the changes from that PR in Babel, and our core class fits reasonable in *one module*\n   *   then we can use that language feature.\n   */\n  var privateMethods = {\n    swalPromiseResolve: new WeakMap()\n  };\n\n  /*\n   * Instance method to close sweetAlert\n   */\n\n  function removePopupAndResetState(instance, container, isToast$$1, onAfterClose) {\n    if (isToast$$1) {\n      triggerOnAfterCloseAndDispose(instance, onAfterClose);\n    } else {\n      restoreActiveElement().then(function () {\n        return triggerOnAfterCloseAndDispose(instance, onAfterClose);\n      });\n      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = false;\n    }\n\n    if (container.parentNode && !document.body.getAttribute('data-swal2-queue-step')) {\n      container.parentNode.removeChild(container);\n    }\n\n    if (isModal()) {\n      undoScrollbar();\n      undoIOSfix();\n      undoIEfix();\n      unsetAriaHidden();\n    }\n\n    removeBodyClasses();\n  }\n\n  function removeBodyClasses() {\n    removeClass([document.documentElement, document.body], [swalClasses.shown, swalClasses['height-auto'], swalClasses['no-backdrop'], swalClasses['toast-shown'], swalClasses['toast-column']]);\n  }\n\n  function close(resolveValue) {\n    var popup = getPopup();\n\n    if (!popup) {\n      return;\n    }\n\n    var innerParams = privateProps.innerParams.get(this);\n\n    if (!innerParams || hasClass(popup, innerParams.hideClass.popup)) {\n      return;\n    }\n\n    var swalPromiseResolve = privateMethods.swalPromiseResolve.get(this);\n    removeClass(popup, innerParams.showClass.popup);\n    addClass(popup, innerParams.hideClass.popup);\n    var backdrop = getContainer();\n    removeClass(backdrop, innerParams.showClass.backdrop);\n    addClass(backdrop, innerParams.hideClass.backdrop);\n    handlePopupAnimation(this, popup, innerParams);\n\n    if (typeof resolveValue !== 'undefined') {\n      resolveValue.isDismissed = typeof resolveValue.dismiss !== 'undefined';\n      resolveValue.isConfirmed = typeof resolveValue.dismiss === 'undefined';\n    } else {\n      resolveValue = {\n        isDismissed: true,\n        isConfirmed: false\n      };\n    } // Resolve Swal promise\n\n\n    swalPromiseResolve(resolveValue || {});\n  }\n\n  var handlePopupAnimation = function handlePopupAnimation(instance, popup, innerParams) {\n    var container = getContainer(); // If animation is supported, animate\n\n    var animationIsSupported = animationEndEvent && hasCssAnimation(popup);\n    var onClose = innerParams.onClose,\n        onAfterClose = innerParams.onAfterClose;\n\n    if (onClose !== null && typeof onClose === 'function') {\n      onClose(popup);\n    }\n\n    if (animationIsSupported) {\n      animatePopup(instance, popup, container, onAfterClose);\n    } else {\n      // Otherwise, remove immediately\n      removePopupAndResetState(instance, container, isToast(), onAfterClose);\n    }\n  };\n\n  var animatePopup = function animatePopup(instance, popup, container, onAfterClose) {\n    globalState.swalCloseEventFinishedCallback = removePopupAndResetState.bind(null, instance, container, isToast(), onAfterClose);\n    popup.addEventListener(animationEndEvent, function (e) {\n      if (e.target === popup) {\n        globalState.swalCloseEventFinishedCallback();\n        delete globalState.swalCloseEventFinishedCallback;\n      }\n    });\n  };\n\n  var triggerOnAfterCloseAndDispose = function triggerOnAfterCloseAndDispose(instance, onAfterClose) {\n    setTimeout(function () {\n      if (typeof onAfterClose === 'function') {\n        onAfterClose();\n      }\n\n      instance._destroy();\n    });\n  };\n\n  function setButtonsDisabled(instance, buttons, disabled) {\n    var domCache = privateProps.domCache.get(instance);\n    buttons.forEach(function (button) {\n      domCache[button].disabled = disabled;\n    });\n  }\n\n  function setInputDisabled(input, disabled) {\n    if (!input) {\n      return false;\n    }\n\n    if (input.type === 'radio') {\n      var radiosContainer = input.parentNode.parentNode;\n      var radios = radiosContainer.querySelectorAll('input');\n\n      for (var i = 0; i < radios.length; i++) {\n        radios[i].disabled = disabled;\n      }\n    } else {\n      input.disabled = disabled;\n    }\n  }\n\n  function enableButtons() {\n    setButtonsDisabled(this, ['confirmButton', 'cancelButton'], false);\n  }\n  function disableButtons() {\n    setButtonsDisabled(this, ['confirmButton', 'cancelButton'], true);\n  }\n  function enableInput() {\n    return setInputDisabled(this.getInput(), false);\n  }\n  function disableInput() {\n    return setInputDisabled(this.getInput(), true);\n  }\n\n  function showValidationMessage(error) {\n    var domCache = privateProps.domCache.get(this);\n    setInnerHtml(domCache.validationMessage, error);\n    var popupComputedStyle = window.getComputedStyle(domCache.popup);\n    domCache.validationMessage.style.marginLeft = \"-\".concat(popupComputedStyle.getPropertyValue('padding-left'));\n    domCache.validationMessage.style.marginRight = \"-\".concat(popupComputedStyle.getPropertyValue('padding-right'));\n    show(domCache.validationMessage);\n    var input = this.getInput();\n\n    if (input) {\n      input.setAttribute('aria-invalid', true);\n      input.setAttribute('aria-describedBy', swalClasses['validation-message']);\n      focusInput(input);\n      addClass(input, swalClasses.inputerror);\n    }\n  } // Hide block with validation message\n\n  function resetValidationMessage$1() {\n    var domCache = privateProps.domCache.get(this);\n\n    if (domCache.validationMessage) {\n      hide(domCache.validationMessage);\n    }\n\n    var input = this.getInput();\n\n    if (input) {\n      input.removeAttribute('aria-invalid');\n      input.removeAttribute('aria-describedBy');\n      removeClass(input, swalClasses.inputerror);\n    }\n  }\n\n  function getProgressSteps$1() {\n    var domCache = privateProps.domCache.get(this);\n    return domCache.progressSteps;\n  }\n\n  var Timer = /*#__PURE__*/function () {\n    function Timer(callback, delay) {\n      _classCallCheck(this, Timer);\n\n      this.callback = callback;\n      this.remaining = delay;\n      this.running = false;\n      this.start();\n    }\n\n    _createClass(Timer, [{\n      key: \"start\",\n      value: function start() {\n        if (!this.running) {\n          this.running = true;\n          this.started = new Date();\n          this.id = setTimeout(this.callback, this.remaining);\n        }\n\n        return this.remaining;\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        if (this.running) {\n          this.running = false;\n          clearTimeout(this.id);\n          this.remaining -= new Date() - this.started;\n        }\n\n        return this.remaining;\n      }\n    }, {\n      key: \"increase\",\n      value: function increase(n) {\n        var running = this.running;\n\n        if (running) {\n          this.stop();\n        }\n\n        this.remaining += n;\n\n        if (running) {\n          this.start();\n        }\n\n        return this.remaining;\n      }\n    }, {\n      key: \"getTimerLeft\",\n      value: function getTimerLeft() {\n        if (this.running) {\n          this.stop();\n          this.start();\n        }\n\n        return this.remaining;\n      }\n    }, {\n      key: \"isRunning\",\n      value: function isRunning() {\n        return this.running;\n      }\n    }]);\n\n    return Timer;\n  }();\n\n  var defaultInputValidators = {\n    email: function email(string, validationMessage) {\n      return /^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z0-9-]{2,24}$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid email address');\n    },\n    url: function url(string, validationMessage) {\n      // taken from https://stackoverflow.com/a/3809435 with a small change from #1306 and #2013\n      return /^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-z]{2,63}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)$/.test(string) ? Promise.resolve() : Promise.resolve(validationMessage || 'Invalid URL');\n    }\n  };\n\n  function setDefaultInputValidators(params) {\n    // Use default `inputValidator` for supported input types if not provided\n    if (!params.inputValidator) {\n      Object.keys(defaultInputValidators).forEach(function (key) {\n        if (params.input === key) {\n          params.inputValidator = defaultInputValidators[key];\n        }\n      });\n    }\n  }\n\n  function validateCustomTargetElement(params) {\n    // Determine if the custom target element is valid\n    if (!params.target || typeof params.target === 'string' && !document.querySelector(params.target) || typeof params.target !== 'string' && !params.target.appendChild) {\n      warn('Target parameter is not valid, defaulting to \"body\"');\n      params.target = 'body';\n    }\n  }\n  /**\n   * Set type, text and actions on popup\n   *\n   * @param params\n   * @returns {boolean}\n   */\n\n\n  function setParameters(params) {\n    setDefaultInputValidators(params); // showLoaderOnConfirm && preConfirm\n\n    if (params.showLoaderOnConfirm && !params.preConfirm) {\n      warn('showLoaderOnConfirm is set to true, but preConfirm is not defined.\\n' + 'showLoaderOnConfirm should be used together with preConfirm, see usage example:\\n' + 'https://sweetalert2.github.io/#ajax-request');\n    } // params.animation will be actually used in renderPopup.js\n    // but in case when params.animation is a function, we need to call that function\n    // before popup (re)initialization, so it'll be possible to check Swal.isVisible()\n    // inside the params.animation function\n\n\n    params.animation = callIfFunction(params.animation);\n    validateCustomTargetElement(params); // Replace newlines with <br> in title\n\n    if (typeof params.title === 'string') {\n      params.title = params.title.split('\\n').join('<br />');\n    }\n\n    init(params);\n  }\n\n  /**\n   * Open popup, add necessary classes and styles, fix scrollbar\n   *\n   * @param {Array} params\n   */\n\n  var openPopup = function openPopup(params) {\n    var container = getContainer();\n    var popup = getPopup();\n\n    if (typeof params.onBeforeOpen === 'function') {\n      params.onBeforeOpen(popup);\n    }\n\n    var bodyStyles = window.getComputedStyle(document.body);\n    var initialBodyOverflow = bodyStyles.overflowY;\n    addClasses$1(container, popup, params); // scrolling is 'hidden' until animation is done, after that 'auto'\n\n    setScrollingVisibility(container, popup);\n\n    if (isModal()) {\n      fixScrollContainer(container, params.scrollbarPadding, initialBodyOverflow);\n      setAriaHidden();\n    }\n\n    if (!isToast() && !globalState.previousActiveElement) {\n      globalState.previousActiveElement = document.activeElement;\n    }\n\n    if (typeof params.onOpen === 'function') {\n      setTimeout(function () {\n        return params.onOpen(popup);\n      });\n    }\n\n    removeClass(container, swalClasses['no-transition']);\n  };\n\n  function swalOpenAnimationFinished(event) {\n    var popup = getPopup();\n\n    if (event.target !== popup) {\n      return;\n    }\n\n    var container = getContainer();\n    popup.removeEventListener(animationEndEvent, swalOpenAnimationFinished);\n    container.style.overflowY = 'auto';\n  }\n\n  var setScrollingVisibility = function setScrollingVisibility(container, popup) {\n    if (animationEndEvent && hasCssAnimation(popup)) {\n      container.style.overflowY = 'hidden';\n      popup.addEventListener(animationEndEvent, swalOpenAnimationFinished);\n    } else {\n      container.style.overflowY = 'auto';\n    }\n  };\n\n  var fixScrollContainer = function fixScrollContainer(container, scrollbarPadding, initialBodyOverflow) {\n    iOSfix();\n    IEfix();\n\n    if (scrollbarPadding && initialBodyOverflow !== 'hidden') {\n      fixScrollbar();\n    } // sweetalert2/issues/1247\n\n\n    setTimeout(function () {\n      container.scrollTop = 0;\n    });\n  };\n\n  var addClasses$1 = function addClasses(container, popup, params) {\n    addClass(container, params.showClass.backdrop);\n    show(popup); // Animate popup right after showing it\n\n    addClass(popup, params.showClass.popup);\n    addClass([document.documentElement, document.body], swalClasses.shown);\n\n    if (params.heightAuto && params.backdrop && !params.toast) {\n      addClass([document.documentElement, document.body], swalClasses['height-auto']);\n    }\n  };\n\n  var handleInputOptionsAndValue = function handleInputOptionsAndValue(instance, params) {\n    if (params.input === 'select' || params.input === 'radio') {\n      handleInputOptions(instance, params);\n    } else if (['text', 'email', 'number', 'tel', 'textarea'].indexOf(params.input) !== -1 && (hasToPromiseFn(params.inputValue) || isPromise(params.inputValue))) {\n      handleInputValue(instance, params);\n    }\n  };\n  var getInputValue = function getInputValue(instance, innerParams) {\n    var input = instance.getInput();\n\n    if (!input) {\n      return null;\n    }\n\n    switch (innerParams.input) {\n      case 'checkbox':\n        return getCheckboxValue(input);\n\n      case 'radio':\n        return getRadioValue(input);\n\n      case 'file':\n        return getFileValue(input);\n\n      default:\n        return innerParams.inputAutoTrim ? input.value.trim() : input.value;\n    }\n  };\n\n  var getCheckboxValue = function getCheckboxValue(input) {\n    return input.checked ? 1 : 0;\n  };\n\n  var getRadioValue = function getRadioValue(input) {\n    return input.checked ? input.value : null;\n  };\n\n  var getFileValue = function getFileValue(input) {\n    return input.files.length ? input.getAttribute('multiple') !== null ? input.files : input.files[0] : null;\n  };\n\n  var handleInputOptions = function handleInputOptions(instance, params) {\n    var content = getContent();\n\n    var processInputOptions = function processInputOptions(inputOptions) {\n      return populateInputOptions[params.input](content, formatInputOptions(inputOptions), params);\n    };\n\n    if (hasToPromiseFn(params.inputOptions) || isPromise(params.inputOptions)) {\n      showLoading();\n      asPromise(params.inputOptions).then(function (inputOptions) {\n        instance.hideLoading();\n        processInputOptions(inputOptions);\n      });\n    } else if (_typeof(params.inputOptions) === 'object') {\n      processInputOptions(params.inputOptions);\n    } else {\n      error(\"Unexpected type of inputOptions! Expected object, Map or Promise, got \".concat(_typeof(params.inputOptions)));\n    }\n  };\n\n  var handleInputValue = function handleInputValue(instance, params) {\n    var input = instance.getInput();\n    hide(input);\n    asPromise(params.inputValue).then(function (inputValue) {\n      input.value = params.input === 'number' ? parseFloat(inputValue) || 0 : \"\".concat(inputValue);\n      show(input);\n      input.focus();\n      instance.hideLoading();\n    })[\"catch\"](function (err) {\n      error(\"Error in inputValue promise: \".concat(err));\n      input.value = '';\n      show(input);\n      input.focus();\n      instance.hideLoading();\n    });\n  };\n\n  var populateInputOptions = {\n    select: function select(content, inputOptions, params) {\n      var select = getChildByClass(content, swalClasses.select);\n\n      var renderOption = function renderOption(parent, optionLabel, optionValue) {\n        var option = document.createElement('option');\n        option.value = optionValue;\n        setInnerHtml(option, optionLabel);\n\n        if (params.inputValue.toString() === optionValue.toString()) {\n          option.selected = true;\n        }\n\n        parent.appendChild(option);\n      };\n\n      inputOptions.forEach(function (inputOption) {\n        var optionValue = inputOption[0];\n        var optionLabel = inputOption[1]; // <optgroup> spec:\n        // https://www.w3.org/TR/html401/interact/forms.html#h-17.6\n        // \"...all OPTGROUP elements must be specified directly within a SELECT element (i.e., groups may not be nested)...\"\n        // check whether this is a <optgroup>\n\n        if (Array.isArray(optionLabel)) {\n          // if it is an array, then it is an <optgroup>\n          var optgroup = document.createElement('optgroup');\n          optgroup.label = optionValue;\n          optgroup.disabled = false; // not configurable for now\n\n          select.appendChild(optgroup);\n          optionLabel.forEach(function (o) {\n            return renderOption(optgroup, o[1], o[0]);\n          });\n        } else {\n          // case of <option>\n          renderOption(select, optionLabel, optionValue);\n        }\n      });\n      select.focus();\n    },\n    radio: function radio(content, inputOptions, params) {\n      var radio = getChildByClass(content, swalClasses.radio);\n      inputOptions.forEach(function (inputOption) {\n        var radioValue = inputOption[0];\n        var radioLabel = inputOption[1];\n        var radioInput = document.createElement('input');\n        var radioLabelElement = document.createElement('label');\n        radioInput.type = 'radio';\n        radioInput.name = swalClasses.radio;\n        radioInput.value = radioValue;\n\n        if (params.inputValue.toString() === radioValue.toString()) {\n          radioInput.checked = true;\n        }\n\n        var label = document.createElement('span');\n        setInnerHtml(label, radioLabel);\n        label.className = swalClasses.label;\n        radioLabelElement.appendChild(radioInput);\n        radioLabelElement.appendChild(label);\n        radio.appendChild(radioLabelElement);\n      });\n      var radios = radio.querySelectorAll('input');\n\n      if (radios.length) {\n        radios[0].focus();\n      }\n    }\n  };\n  /**\n   * Converts `inputOptions` into an array of `[value, label]`s\n   * @param inputOptions\n   */\n\n  var formatInputOptions = function formatInputOptions(inputOptions) {\n    var result = [];\n\n    if (typeof Map !== 'undefined' && inputOptions instanceof Map) {\n      inputOptions.forEach(function (value, key) {\n        var valueFormatted = value;\n\n        if (_typeof(valueFormatted) === 'object') {\n          // case of <optgroup>\n          valueFormatted = formatInputOptions(valueFormatted);\n        }\n\n        result.push([key, valueFormatted]);\n      });\n    } else {\n      Object.keys(inputOptions).forEach(function (key) {\n        var valueFormatted = inputOptions[key];\n\n        if (_typeof(valueFormatted) === 'object') {\n          // case of <optgroup>\n          valueFormatted = formatInputOptions(valueFormatted);\n        }\n\n        result.push([key, valueFormatted]);\n      });\n    }\n\n    return result;\n  };\n\n  var handleConfirmButtonClick = function handleConfirmButtonClick(instance, innerParams) {\n    instance.disableButtons();\n\n    if (innerParams.input) {\n      handleConfirmWithInput(instance, innerParams);\n    } else {\n      confirm(instance, innerParams, true);\n    }\n  };\n  var handleCancelButtonClick = function handleCancelButtonClick(instance, dismissWith) {\n    instance.disableButtons();\n    dismissWith(DismissReason.cancel);\n  };\n\n  var handleConfirmWithInput = function handleConfirmWithInput(instance, innerParams) {\n    var inputValue = getInputValue(instance, innerParams);\n\n    if (innerParams.inputValidator) {\n      instance.disableInput();\n      var validationPromise = Promise.resolve().then(function () {\n        return asPromise(innerParams.inputValidator(inputValue, innerParams.validationMessage));\n      });\n      validationPromise.then(function (validationMessage) {\n        instance.enableButtons();\n        instance.enableInput();\n\n        if (validationMessage) {\n          instance.showValidationMessage(validationMessage);\n        } else {\n          confirm(instance, innerParams, inputValue);\n        }\n      });\n    } else if (!instance.getInput().checkValidity()) {\n      instance.enableButtons();\n      instance.showValidationMessage(innerParams.validationMessage);\n    } else {\n      confirm(instance, innerParams, inputValue);\n    }\n  };\n\n  var succeedWith = function succeedWith(instance, value) {\n    instance.closePopup({\n      value: value\n    });\n  };\n\n  var confirm = function confirm(instance, innerParams, value) {\n    if (innerParams.showLoaderOnConfirm) {\n      showLoading(); // TODO: make showLoading an *instance* method\n    }\n\n    if (innerParams.preConfirm) {\n      instance.resetValidationMessage();\n      var preConfirmPromise = Promise.resolve().then(function () {\n        return asPromise(innerParams.preConfirm(value, innerParams.validationMessage));\n      });\n      preConfirmPromise.then(function (preConfirmValue) {\n        if (isVisible(getValidationMessage()) || preConfirmValue === false) {\n          instance.hideLoading();\n        } else {\n          succeedWith(instance, typeof preConfirmValue === 'undefined' ? value : preConfirmValue);\n        }\n      });\n    } else {\n      succeedWith(instance, value);\n    }\n  };\n\n  var addKeydownHandler = function addKeydownHandler(instance, globalState, innerParams, dismissWith) {\n    if (globalState.keydownTarget && globalState.keydownHandlerAdded) {\n      globalState.keydownTarget.removeEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = false;\n    }\n\n    if (!innerParams.toast) {\n      globalState.keydownHandler = function (e) {\n        return keydownHandler(instance, e, dismissWith);\n      };\n\n      globalState.keydownTarget = innerParams.keydownListenerCapture ? window : getPopup();\n      globalState.keydownListenerCapture = innerParams.keydownListenerCapture;\n      globalState.keydownTarget.addEventListener('keydown', globalState.keydownHandler, {\n        capture: globalState.keydownListenerCapture\n      });\n      globalState.keydownHandlerAdded = true;\n    }\n  }; // Focus handling\n\n  var setFocus = function setFocus(innerParams, index, increment) {\n    var focusableElements = getFocusableElements(); // search for visible elements and select the next possible match\n\n    for (var i = 0; i < focusableElements.length; i++) {\n      index = index + increment; // rollover to first item\n\n      if (index === focusableElements.length) {\n        index = 0; // go to last item\n      } else if (index === -1) {\n        index = focusableElements.length - 1;\n      }\n\n      return focusableElements[index].focus();\n    } // no visible focusable elements, focus the popup\n\n\n    getPopup().focus();\n  };\n  var arrowKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'Left', 'Right', 'Up', 'Down' // IE11\n  ];\n  var escKeys = ['Escape', 'Esc' // IE11\n  ];\n\n  var keydownHandler = function keydownHandler(instance, e, dismissWith) {\n    var innerParams = privateProps.innerParams.get(instance);\n\n    if (innerParams.stopKeydownPropagation) {\n      e.stopPropagation();\n    } // ENTER\n\n\n    if (e.key === 'Enter') {\n      handleEnter(instance, e, innerParams); // TAB\n    } else if (e.key === 'Tab') {\n      handleTab(e, innerParams); // ARROWS - switch focus between buttons\n    } else if (arrowKeys.indexOf(e.key) !== -1) {\n      handleArrows(); // ESC\n    } else if (escKeys.indexOf(e.key) !== -1) {\n      handleEsc(e, innerParams, dismissWith);\n    }\n  };\n\n  var handleEnter = function handleEnter(instance, e, innerParams) {\n    // #720 #721\n    if (e.isComposing) {\n      return;\n    }\n\n    if (e.target && instance.getInput() && e.target.outerHTML === instance.getInput().outerHTML) {\n      if (['textarea', 'file'].indexOf(innerParams.input) !== -1) {\n        return; // do not submit\n      }\n\n      clickConfirm();\n      e.preventDefault();\n    }\n  };\n\n  var handleTab = function handleTab(e, innerParams) {\n    var targetElement = e.target;\n    var focusableElements = getFocusableElements();\n    var btnIndex = -1;\n\n    for (var i = 0; i < focusableElements.length; i++) {\n      if (targetElement === focusableElements[i]) {\n        btnIndex = i;\n        break;\n      }\n    }\n\n    if (!e.shiftKey) {\n      // Cycle to the next button\n      setFocus(innerParams, btnIndex, 1);\n    } else {\n      // Cycle to the prev button\n      setFocus(innerParams, btnIndex, -1);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n  };\n\n  var handleArrows = function handleArrows() {\n    var confirmButton = getConfirmButton();\n    var cancelButton = getCancelButton(); // focus Cancel button if Confirm button is currently focused\n\n    if (document.activeElement === confirmButton && isVisible(cancelButton)) {\n      cancelButton.focus(); // and vice versa\n    } else if (document.activeElement === cancelButton && isVisible(confirmButton)) {\n      confirmButton.focus();\n    }\n  };\n\n  var handleEsc = function handleEsc(e, innerParams, dismissWith) {\n    if (callIfFunction(innerParams.allowEscapeKey)) {\n      e.preventDefault();\n      dismissWith(DismissReason.esc);\n    }\n  };\n\n  var handlePopupClick = function handlePopupClick(instance, domCache, dismissWith) {\n    var innerParams = privateProps.innerParams.get(instance);\n\n    if (innerParams.toast) {\n      handleToastClick(instance, domCache, dismissWith);\n    } else {\n      // Ignore click events that had mousedown on the popup but mouseup on the container\n      // This can happen when the user drags a slider\n      handleModalMousedown(domCache); // Ignore click events that had mousedown on the container but mouseup on the popup\n\n      handleContainerMousedown(domCache);\n      handleModalClick(instance, domCache, dismissWith);\n    }\n  };\n\n  var handleToastClick = function handleToastClick(instance, domCache, dismissWith) {\n    // Closing toast by internal click\n    domCache.popup.onclick = function () {\n      var innerParams = privateProps.innerParams.get(instance);\n\n      if (innerParams.showConfirmButton || innerParams.showCancelButton || innerParams.showCloseButton || innerParams.input) {\n        return;\n      }\n\n      dismissWith(DismissReason.close);\n    };\n  };\n\n  var ignoreOutsideClick = false;\n\n  var handleModalMousedown = function handleModalMousedown(domCache) {\n    domCache.popup.onmousedown = function () {\n      domCache.container.onmouseup = function (e) {\n        domCache.container.onmouseup = undefined; // We only check if the mouseup target is the container because usually it doesn't\n        // have any other direct children aside of the popup\n\n        if (e.target === domCache.container) {\n          ignoreOutsideClick = true;\n        }\n      };\n    };\n  };\n\n  var handleContainerMousedown = function handleContainerMousedown(domCache) {\n    domCache.container.onmousedown = function () {\n      domCache.popup.onmouseup = function (e) {\n        domCache.popup.onmouseup = undefined; // We also need to check if the mouseup target is a child of the popup\n\n        if (e.target === domCache.popup || domCache.popup.contains(e.target)) {\n          ignoreOutsideClick = true;\n        }\n      };\n    };\n  };\n\n  var handleModalClick = function handleModalClick(instance, domCache, dismissWith) {\n    domCache.container.onclick = function (e) {\n      var innerParams = privateProps.innerParams.get(instance);\n\n      if (ignoreOutsideClick) {\n        ignoreOutsideClick = false;\n        return;\n      }\n\n      if (e.target === domCache.container && callIfFunction(innerParams.allowOutsideClick)) {\n        dismissWith(DismissReason.backdrop);\n      }\n    };\n  };\n\n  function _main(userParams) {\n    showWarningsForParams(userParams);\n\n    if (globalState.currentInstance) {\n      globalState.currentInstance._destroy();\n    }\n\n    globalState.currentInstance = this;\n    var innerParams = prepareParams(userParams);\n    setParameters(innerParams);\n    Object.freeze(innerParams); // clear the previous timer\n\n    if (globalState.timeout) {\n      globalState.timeout.stop();\n      delete globalState.timeout;\n    } // clear the restore focus timeout\n\n\n    clearTimeout(globalState.restoreFocusTimeout);\n    var domCache = populateDomCache(this);\n    render(this, innerParams);\n    privateProps.innerParams.set(this, innerParams);\n    return swalPromise(this, domCache, innerParams);\n  }\n\n  var prepareParams = function prepareParams(userParams) {\n    var showClass = _extends({}, defaultParams.showClass, userParams.showClass);\n\n    var hideClass = _extends({}, defaultParams.hideClass, userParams.hideClass);\n\n    var params = _extends({}, defaultParams, userParams);\n\n    params.showClass = showClass;\n    params.hideClass = hideClass; // @deprecated\n\n    if (userParams.animation === false) {\n      params.showClass = {\n        popup: 'swal2-noanimation',\n        backdrop: 'swal2-noanimation'\n      };\n      params.hideClass = {};\n    }\n\n    return params;\n  };\n\n  var swalPromise = function swalPromise(instance, domCache, innerParams) {\n    return new Promise(function (resolve) {\n      // functions to handle all closings/dismissals\n      var dismissWith = function dismissWith(dismiss) {\n        instance.closePopup({\n          dismiss: dismiss\n        });\n      };\n\n      privateMethods.swalPromiseResolve.set(instance, resolve);\n\n      domCache.confirmButton.onclick = function () {\n        return handleConfirmButtonClick(instance, innerParams);\n      };\n\n      domCache.cancelButton.onclick = function () {\n        return handleCancelButtonClick(instance, dismissWith);\n      };\n\n      domCache.closeButton.onclick = function () {\n        return dismissWith(DismissReason.close);\n      };\n\n      handlePopupClick(instance, domCache, dismissWith);\n      addKeydownHandler(instance, globalState, innerParams, dismissWith);\n\n      if (innerParams.toast && (innerParams.input || innerParams.footer || innerParams.showCloseButton)) {\n        addClass(document.body, swalClasses['toast-column']);\n      } else {\n        removeClass(document.body, swalClasses['toast-column']);\n      }\n\n      handleInputOptionsAndValue(instance, innerParams);\n      openPopup(innerParams);\n      setupTimer(globalState, innerParams, dismissWith);\n      initFocus(domCache, innerParams); // Scroll container to top on open (#1247, #1946)\n\n      setTimeout(function () {\n        domCache.container.scrollTop = 0;\n      });\n    });\n  };\n\n  var populateDomCache = function populateDomCache(instance) {\n    var domCache = {\n      popup: getPopup(),\n      container: getContainer(),\n      content: getContent(),\n      actions: getActions(),\n      confirmButton: getConfirmButton(),\n      cancelButton: getCancelButton(),\n      closeButton: getCloseButton(),\n      validationMessage: getValidationMessage(),\n      progressSteps: getProgressSteps()\n    };\n    privateProps.domCache.set(instance, domCache);\n    return domCache;\n  };\n\n  var setupTimer = function setupTimer(globalState$$1, innerParams, dismissWith) {\n    var timerProgressBar = getTimerProgressBar();\n    hide(timerProgressBar);\n\n    if (innerParams.timer) {\n      globalState$$1.timeout = new Timer(function () {\n        dismissWith('timer');\n        delete globalState$$1.timeout;\n      }, innerParams.timer);\n\n      if (innerParams.timerProgressBar) {\n        show(timerProgressBar);\n        setTimeout(function () {\n          if (globalState$$1.timeout.running) {\n            // timer can be already stopped at this point\n            animateTimerProgressBar(innerParams.timer);\n          }\n        });\n      }\n    }\n  };\n\n  var initFocus = function initFocus(domCache, innerParams) {\n    if (innerParams.toast) {\n      return;\n    }\n\n    if (!callIfFunction(innerParams.allowEnterKey)) {\n      return blurActiveElement();\n    }\n\n    if (innerParams.focusCancel && isVisible(domCache.cancelButton)) {\n      return domCache.cancelButton.focus();\n    }\n\n    if (innerParams.focusConfirm && isVisible(domCache.confirmButton)) {\n      return domCache.confirmButton.focus();\n    }\n\n    setFocus(innerParams, -1, 1);\n  };\n\n  var blurActiveElement = function blurActiveElement() {\n    if (document.activeElement && typeof document.activeElement.blur === 'function') {\n      document.activeElement.blur();\n    }\n  };\n\n  /**\n   * Updates popup parameters.\n   */\n\n  function update(params) {\n    var popup = getPopup();\n    var innerParams = privateProps.innerParams.get(this);\n\n    if (!popup || hasClass(popup, innerParams.hideClass.popup)) {\n      return warn(\"You're trying to update the closed or closing popup, that won't work. Use the update() method in preConfirm parameter or show a new popup.\");\n    }\n\n    var validUpdatableParams = {}; // assign valid params from `params` to `defaults`\n\n    Object.keys(params).forEach(function (param) {\n      if (Swal.isUpdatableParameter(param)) {\n        validUpdatableParams[param] = params[param];\n      } else {\n        warn(\"Invalid parameter to update: \\\"\".concat(param, \"\\\". Updatable params are listed here: https://github.com/sweetalert2/sweetalert2/blob/master/src/utils/params.js\"));\n      }\n    });\n\n    var updatedParams = _extends({}, innerParams, validUpdatableParams);\n\n    render(this, updatedParams);\n    privateProps.innerParams.set(this, updatedParams);\n    Object.defineProperties(this, {\n      params: {\n        value: _extends({}, this.params, params),\n        writable: false,\n        enumerable: true\n      }\n    });\n  }\n\n  function _destroy() {\n    var domCache = privateProps.domCache.get(this);\n    var innerParams = privateProps.innerParams.get(this);\n\n    if (!innerParams) {\n      return; // This instance has already been destroyed\n    } // Check if there is another Swal closing\n\n\n    if (domCache.popup && globalState.swalCloseEventFinishedCallback) {\n      globalState.swalCloseEventFinishedCallback();\n      delete globalState.swalCloseEventFinishedCallback;\n    } // Check if there is a swal disposal defer timer\n\n\n    if (globalState.deferDisposalTimer) {\n      clearTimeout(globalState.deferDisposalTimer);\n      delete globalState.deferDisposalTimer;\n    }\n\n    if (typeof innerParams.onDestroy === 'function') {\n      innerParams.onDestroy();\n    }\n\n    disposeSwal(this);\n  }\n\n  var disposeSwal = function disposeSwal(instance) {\n    // Unset this.params so GC will dispose it (#1569)\n    delete instance.params; // Unset globalState props so GC will dispose globalState (#1569)\n\n    delete globalState.keydownHandler;\n    delete globalState.keydownTarget; // Unset WeakMaps so GC will be able to dispose them (#1569)\n\n    unsetWeakMaps(privateProps);\n    unsetWeakMaps(privateMethods);\n  };\n\n  var unsetWeakMaps = function unsetWeakMaps(obj) {\n    for (var i in obj) {\n      obj[i] = new WeakMap();\n    }\n  };\n\n\n\n  var instanceMethods = /*#__PURE__*/Object.freeze({\n    hideLoading: hideLoading,\n    disableLoading: hideLoading,\n    getInput: getInput$1,\n    close: close,\n    closePopup: close,\n    closeModal: close,\n    closeToast: close,\n    enableButtons: enableButtons,\n    disableButtons: disableButtons,\n    enableInput: enableInput,\n    disableInput: disableInput,\n    showValidationMessage: showValidationMessage,\n    resetValidationMessage: resetValidationMessage$1,\n    getProgressSteps: getProgressSteps$1,\n    _main: _main,\n    update: update,\n    _destroy: _destroy\n  });\n\n  var currentInstance;\n\n  var SweetAlert = /*#__PURE__*/function () {\n    function SweetAlert() {\n      _classCallCheck(this, SweetAlert);\n\n      // Prevent run in Node env\n      if (typeof window === 'undefined') {\n        return;\n      } // Check for the existence of Promise\n\n\n      if (typeof Promise === 'undefined') {\n        error('This package requires a Promise library, please include a shim to enable it in this browser (See: https://github.com/sweetalert2/sweetalert2/wiki/Migration-from-SweetAlert-to-SweetAlert2#1-ie-support)');\n      }\n\n      currentInstance = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var outerParams = Object.freeze(this.constructor.argsToParams(args));\n      Object.defineProperties(this, {\n        params: {\n          value: outerParams,\n          writable: false,\n          enumerable: true,\n          configurable: true\n        }\n      });\n\n      var promise = this._main(this.params);\n\n      privateProps.promise.set(this, promise);\n    } // `catch` cannot be the name of a module export, so we define our thenable methods here instead\n\n\n    _createClass(SweetAlert, [{\n      key: \"then\",\n      value: function then(onFulfilled) {\n        var promise = privateProps.promise.get(this);\n        return promise.then(onFulfilled);\n      }\n    }, {\n      key: \"finally\",\n      value: function _finally(onFinally) {\n        var promise = privateProps.promise.get(this);\n        return promise[\"finally\"](onFinally);\n      }\n    }]);\n\n    return SweetAlert;\n  }(); // Assign instance methods from src/instanceMethods/*.js to prototype\n\n\n  _extends(SweetAlert.prototype, instanceMethods); // Assign static methods from src/staticMethods/*.js to constructor\n\n\n  _extends(SweetAlert, staticMethods); // Proxy to instance methods to constructor, for now, for backwards compatibility\n\n\n  Object.keys(instanceMethods).forEach(function (key) {\n    SweetAlert[key] = function () {\n      if (currentInstance) {\n        var _currentInstance;\n\n        return (_currentInstance = currentInstance)[key].apply(_currentInstance, arguments);\n      }\n    };\n  });\n  SweetAlert.DismissReason = DismissReason;\n  SweetAlert.version = '9.17.1';\n\n  var Swal = SweetAlert;\n  Swal[\"default\"] = Swal;\n\n  return Swal;\n\n}));\nif (typeof this !== 'undefined' && this.Sweetalert2){  this.swal = this.sweetAlert = this.Swal = this.SweetAlert = this.Sweetalert2}\n\n\"undefined\"!=typeof document&&function(e,t){var n=e.createElement(\"style\");if(e.getElementsByTagName(\"head\")[0].appendChild(n),n.styleSheet)n.styleSheet.disabled||(n.styleSheet.cssText=t);else try{n.innerHTML=t}catch(e){n.innerText=t}}(document,\".swal2-popup.swal2-toast{flex-direction:row;align-items:center;width:auto;padding:.625em;overflow-y:hidden;background:#fff;box-shadow:0 0 .625em #d9d9d9}.swal2-popup.swal2-toast .swal2-header{flex-direction:row;padding:0}.swal2-popup.swal2-toast .swal2-title{flex-grow:1;justify-content:flex-start;margin:0 .6em;font-size:1em}.swal2-popup.swal2-toast .swal2-footer{margin:.5em 0 0;padding:.5em 0 0;font-size:.8em}.swal2-popup.swal2-toast .swal2-close{position:static;width:.8em;height:.8em;line-height:.8}.swal2-popup.swal2-toast .swal2-content{justify-content:flex-start;padding:0;font-size:1em}.swal2-popup.swal2-toast .swal2-icon{width:2em;min-width:2em;height:2em;margin:0}.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:1.8em;font-weight:700}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-popup.swal2-toast .swal2-icon .swal2-icon-content{font-size:.25em}}.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line]{top:.875em;width:1.375em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:.3125em}.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:.3125em}.swal2-popup.swal2-toast .swal2-actions{flex-basis:auto!important;width:auto;height:auto;margin:0 .3125em}.swal2-popup.swal2-toast .swal2-styled{margin:0 .3125em;padding:.3125em .625em;font-size:1em}.swal2-popup.swal2-toast .swal2-styled:focus{box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(50,100,150,.4)}.swal2-popup.swal2-toast .swal2-success{border-color:#a5dc86}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line]{position:absolute;width:1.6em;height:3em;transform:rotate(45deg);border-radius:50%}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.8em;left:-.5em;transform:rotate(-45deg);transform-origin:2em 2em;border-radius:4em 0 0 4em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.25em;left:.9375em;transform-origin:0 1.5em;border-radius:0 4em 4em 0}.swal2-popup.swal2-toast .swal2-success .swal2-success-ring{width:2em;height:2em}.swal2-popup.swal2-toast .swal2-success .swal2-success-fix{top:0;left:.4375em;width:.4375em;height:2.6875em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line]{height:.3125em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=tip]{top:1.125em;left:.1875em;width:.75em}.swal2-popup.swal2-toast .swal2-success [class^=swal2-success-line][class$=long]{top:.9375em;right:.1875em;width:1.375em}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-toast-animate-success-line-tip .75s;animation:swal2-toast-animate-success-line-tip .75s}.swal2-popup.swal2-toast .swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-toast-animate-success-line-long .75s;animation:swal2-toast-animate-success-line-long .75s}.swal2-popup.swal2-toast.swal2-show{-webkit-animation:swal2-toast-show .5s;animation:swal2-toast-show .5s}.swal2-popup.swal2-toast.swal2-hide{-webkit-animation:swal2-toast-hide .1s forwards;animation:swal2-toast-hide .1s forwards}.swal2-container{display:flex;position:fixed;z-index:1060;top:0;right:0;bottom:0;left:0;flex-direction:row;align-items:center;justify-content:center;padding:.625em;overflow-x:hidden;transition:background-color .1s;-webkit-overflow-scrolling:touch}.swal2-container.swal2-backdrop-show,.swal2-container.swal2-noanimation{background:rgba(0,0,0,.4)}.swal2-container.swal2-backdrop-hide{background:0 0!important}.swal2-container.swal2-top{align-items:flex-start}.swal2-container.swal2-top-left,.swal2-container.swal2-top-start{align-items:flex-start;justify-content:flex-start}.swal2-container.swal2-top-end,.swal2-container.swal2-top-right{align-items:flex-start;justify-content:flex-end}.swal2-container.swal2-center{align-items:center}.swal2-container.swal2-center-left,.swal2-container.swal2-center-start{align-items:center;justify-content:flex-start}.swal2-container.swal2-center-end,.swal2-container.swal2-center-right{align-items:center;justify-content:flex-end}.swal2-container.swal2-bottom{align-items:flex-end}.swal2-container.swal2-bottom-left,.swal2-container.swal2-bottom-start{align-items:flex-end;justify-content:flex-start}.swal2-container.swal2-bottom-end,.swal2-container.swal2-bottom-right{align-items:flex-end;justify-content:flex-end}.swal2-container.swal2-bottom-end>:first-child,.swal2-container.swal2-bottom-left>:first-child,.swal2-container.swal2-bottom-right>:first-child,.swal2-container.swal2-bottom-start>:first-child,.swal2-container.swal2-bottom>:first-child{margin-top:auto}.swal2-container.swal2-grow-fullscreen>.swal2-modal{display:flex!important;flex:1;align-self:stretch;justify-content:center}.swal2-container.swal2-grow-row>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-grow-column{flex:1;flex-direction:column}.swal2-container.swal2-grow-column.swal2-bottom,.swal2-container.swal2-grow-column.swal2-center,.swal2-container.swal2-grow-column.swal2-top{align-items:center}.swal2-container.swal2-grow-column.swal2-bottom-left,.swal2-container.swal2-grow-column.swal2-bottom-start,.swal2-container.swal2-grow-column.swal2-center-left,.swal2-container.swal2-grow-column.swal2-center-start,.swal2-container.swal2-grow-column.swal2-top-left,.swal2-container.swal2-grow-column.swal2-top-start{align-items:flex-start}.swal2-container.swal2-grow-column.swal2-bottom-end,.swal2-container.swal2-grow-column.swal2-bottom-right,.swal2-container.swal2-grow-column.swal2-center-end,.swal2-container.swal2-grow-column.swal2-center-right,.swal2-container.swal2-grow-column.swal2-top-end,.swal2-container.swal2-grow-column.swal2-top-right{align-items:flex-end}.swal2-container.swal2-grow-column>.swal2-modal{display:flex!important;flex:1;align-content:center;justify-content:center}.swal2-container.swal2-no-transition{transition:none!important}.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.swal2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-left):not(.swal2-bottom-right):not(.swal2-grow-fullscreen)>.swal2-modal{margin:auto}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-container .swal2-modal{margin:0!important}}.swal2-popup{display:none;position:relative;box-sizing:border-box;flex-direction:column;justify-content:center;width:32em;max-width:100%;padding:1.25em;border:none;border-radius:.3125em;background:#fff;font-family:inherit;font-size:1rem}.swal2-popup:focus{outline:0}.swal2-popup.swal2-loading{overflow-y:hidden}.swal2-header{display:flex;flex-direction:column;align-items:center;padding:0 1.8em}.swal2-title{position:relative;max-width:100%;margin:0 0 .4em;padding:0;color:#595959;font-size:1.875em;font-weight:600;text-align:center;text-transform:none;word-wrap:break-word}.swal2-actions{display:flex;z-index:1;flex-wrap:wrap;align-items:center;justify-content:center;width:100%;margin:1.25em auto 0}.swal2-actions:not(.swal2-loading) .swal2-styled[disabled]{opacity:.4}.swal2-actions:not(.swal2-loading) .swal2-styled:hover{background-image:linear-gradient(rgba(0,0,0,.1),rgba(0,0,0,.1))}.swal2-actions:not(.swal2-loading) .swal2-styled:active{background-image:linear-gradient(rgba(0,0,0,.2),rgba(0,0,0,.2))}.swal2-actions.swal2-loading .swal2-styled.swal2-confirm{box-sizing:border-box;width:2.5em;height:2.5em;margin:.46875em;padding:0;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:.25em solid transparent;border-radius:100%;border-color:transparent;background-color:transparent!important;color:transparent!important;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-actions.swal2-loading .swal2-styled.swal2-cancel{margin-right:30px;margin-left:30px}.swal2-actions.swal2-loading :not(.swal2-styled).swal2-confirm::after{content:\\\"\\\";display:inline-block;width:15px;height:15px;margin-left:5px;-webkit-animation:swal2-rotate-loading 1.5s linear 0s infinite normal;animation:swal2-rotate-loading 1.5s linear 0s infinite normal;border:3px solid #999;border-radius:50%;border-right-color:transparent;box-shadow:1px 1px 1px #fff}.swal2-styled{margin:.3125em;padding:.625em 2em;box-shadow:none;font-weight:500}.swal2-styled:not([disabled]){cursor:pointer}.swal2-styled.swal2-confirm{border:0;border-radius:.25em;background:initial;background-color:#3085d6;color:#fff;font-size:1.0625em}.swal2-styled.swal2-cancel{border:0;border-radius:.25em;background:initial;background-color:#aaa;color:#fff;font-size:1.0625em}.swal2-styled:focus{outline:0;box-shadow:0 0 0 1px #fff,0 0 0 3px rgba(50,100,150,.4)}.swal2-styled::-moz-focus-inner{border:0}.swal2-footer{justify-content:center;margin:1.25em 0 0;padding:1em 0 0;border-top:1px solid #eee;color:#545454;font-size:1em}.swal2-timer-progress-bar-container{position:absolute;right:0;bottom:0;left:0;height:.25em;overflow:hidden;border-bottom-right-radius:.3125em;border-bottom-left-radius:.3125em}.swal2-timer-progress-bar{width:100%;height:.25em;background:rgba(0,0,0,.2)}.swal2-image{max-width:100%;margin:1.25em auto}.swal2-close{position:absolute;z-index:2;top:0;right:0;align-items:center;justify-content:center;width:1.2em;height:1.2em;padding:0;overflow:hidden;transition:color .1s ease-out;border:none;border-radius:0;background:0 0;color:#ccc;font-family:serif;font-size:2.5em;line-height:1.2;cursor:pointer}.swal2-close:hover{transform:none;background:0 0;color:#f27474}.swal2-close::-moz-focus-inner{border:0}.swal2-content{z-index:1;justify-content:center;margin:0;padding:0 1.6em;color:#545454;font-size:1.125em;font-weight:400;line-height:normal;text-align:center;word-wrap:break-word}.swal2-checkbox,.swal2-file,.swal2-input,.swal2-radio,.swal2-select,.swal2-textarea{margin:1em auto}.swal2-file,.swal2-input,.swal2-textarea{box-sizing:border-box;width:100%;transition:border-color .3s,box-shadow .3s;border:1px solid #d9d9d9;border-radius:.1875em;background:inherit;box-shadow:inset 0 1px 1px rgba(0,0,0,.06);color:inherit;font-size:1.125em}.swal2-file.swal2-inputerror,.swal2-input.swal2-inputerror,.swal2-textarea.swal2-inputerror{border-color:#f27474!important;box-shadow:0 0 2px #f27474!important}.swal2-file:focus,.swal2-input:focus,.swal2-textarea:focus{border:1px solid #b4dbed;outline:0;box-shadow:0 0 3px #c4e6f5}.swal2-file::-moz-placeholder,.swal2-input::-moz-placeholder,.swal2-textarea::-moz-placeholder{color:#ccc}.swal2-file:-ms-input-placeholder,.swal2-input:-ms-input-placeholder,.swal2-textarea:-ms-input-placeholder{color:#ccc}.swal2-file::-ms-input-placeholder,.swal2-input::-ms-input-placeholder,.swal2-textarea::-ms-input-placeholder{color:#ccc}.swal2-file::placeholder,.swal2-input::placeholder,.swal2-textarea::placeholder{color:#ccc}.swal2-range{margin:1em auto;background:#fff}.swal2-range input{width:80%}.swal2-range output{width:20%;color:inherit;font-weight:600;text-align:center}.swal2-range input,.swal2-range output{height:2.625em;padding:0;font-size:1.125em;line-height:2.625em}.swal2-input{height:2.625em;padding:0 .75em}.swal2-input[type=number]{max-width:10em}.swal2-file{background:inherit;font-size:1.125em}.swal2-textarea{height:6.75em;padding:.75em}.swal2-select{min-width:50%;max-width:100%;padding:.375em .625em;background:inherit;color:inherit;font-size:1.125em}.swal2-checkbox,.swal2-radio{align-items:center;justify-content:center;background:#fff;color:inherit}.swal2-checkbox label,.swal2-radio label{margin:0 .6em;font-size:1.125em}.swal2-checkbox input,.swal2-radio input{margin:0 .4em}.swal2-validation-message{display:none;align-items:center;justify-content:center;padding:.625em;overflow:hidden;background:#f0f0f0;color:#666;font-size:1em;font-weight:300}.swal2-validation-message::before{content:\\\"!\\\";display:inline-block;width:1.5em;min-width:1.5em;height:1.5em;margin:0 .625em;border-radius:50%;background-color:#f27474;color:#fff;font-weight:600;line-height:1.5em;text-align:center}.swal2-icon{position:relative;box-sizing:content-box;justify-content:center;width:5em;height:5em;margin:1.25em auto 1.875em;border:.25em solid transparent;border-radius:50%;font-family:inherit;line-height:5em;cursor:default;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.swal2-icon .swal2-icon-content{display:flex;align-items:center;font-size:3.75em}.swal2-icon.swal2-error{border-color:#f27474;color:#f27474}.swal2-icon.swal2-error .swal2-x-mark{position:relative;flex-grow:1}.swal2-icon.swal2-error [class^=swal2-x-mark-line]{display:block;position:absolute;top:2.3125em;width:2.9375em;height:.3125em;border-radius:.125em;background-color:#f27474}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=left]{left:1.0625em;transform:rotate(45deg)}.swal2-icon.swal2-error [class^=swal2-x-mark-line][class$=right]{right:1em;transform:rotate(-45deg)}.swal2-icon.swal2-error.swal2-icon-show{-webkit-animation:swal2-animate-error-icon .5s;animation:swal2-animate-error-icon .5s}.swal2-icon.swal2-error.swal2-icon-show .swal2-x-mark{-webkit-animation:swal2-animate-error-x-mark .5s;animation:swal2-animate-error-x-mark .5s}.swal2-icon.swal2-warning{border-color:#facea8;color:#f8bb86}.swal2-icon.swal2-info{border-color:#9de0f6;color:#3fc3ee}.swal2-icon.swal2-question{border-color:#c9dae1;color:#87adbd}.swal2-icon.swal2-success{border-color:#a5dc86;color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-circular-line]{position:absolute;width:3.75em;height:7.5em;transform:rotate(45deg);border-radius:50%}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=left]{top:-.4375em;left:-2.0635em;transform:rotate(-45deg);transform-origin:3.75em 3.75em;border-radius:7.5em 0 0 7.5em}.swal2-icon.swal2-success [class^=swal2-success-circular-line][class$=right]{top:-.6875em;left:1.875em;transform:rotate(-45deg);transform-origin:0 3.75em;border-radius:0 7.5em 7.5em 0}.swal2-icon.swal2-success .swal2-success-ring{position:absolute;z-index:2;top:-.25em;left:-.25em;box-sizing:content-box;width:100%;height:100%;border:.25em solid rgba(165,220,134,.3);border-radius:50%}.swal2-icon.swal2-success .swal2-success-fix{position:absolute;z-index:1;top:.5em;left:1.625em;width:.4375em;height:5.625em;transform:rotate(-45deg)}.swal2-icon.swal2-success [class^=swal2-success-line]{display:block;position:absolute;z-index:2;height:.3125em;border-radius:.125em;background-color:#a5dc86}.swal2-icon.swal2-success [class^=swal2-success-line][class$=tip]{top:2.875em;left:.8125em;width:1.5625em;transform:rotate(45deg)}.swal2-icon.swal2-success [class^=swal2-success-line][class$=long]{top:2.375em;right:.5em;width:2.9375em;transform:rotate(-45deg)}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-tip{-webkit-animation:swal2-animate-success-line-tip .75s;animation:swal2-animate-success-line-tip .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-line-long{-webkit-animation:swal2-animate-success-line-long .75s;animation:swal2-animate-success-line-long .75s}.swal2-icon.swal2-success.swal2-icon-show .swal2-success-circular-line-right{-webkit-animation:swal2-rotate-success-circular-line 4.25s ease-in;animation:swal2-rotate-success-circular-line 4.25s ease-in}.swal2-progress-steps{align-items:center;margin:0 0 1.25em;padding:0;background:inherit;font-weight:600}.swal2-progress-steps li{display:inline-block;position:relative}.swal2-progress-steps .swal2-progress-step{z-index:20;width:2em;height:2em;border-radius:2em;background:#3085d6;color:#fff;line-height:2em;text-align:center}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step{background:#3085d6}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step{background:#add8e6;color:#fff}.swal2-progress-steps .swal2-progress-step.swal2-active-progress-step~.swal2-progress-step-line{background:#add8e6}.swal2-progress-steps .swal2-progress-step-line{z-index:10;width:2.5em;height:.4em;margin:0 -1px;background:#3085d6}[class^=swal2]{-webkit-tap-highlight-color:transparent}.swal2-show{-webkit-animation:swal2-show .3s;animation:swal2-show .3s}.swal2-hide{-webkit-animation:swal2-hide .15s forwards;animation:swal2-hide .15s forwards}.swal2-noanimation{transition:none}.swal2-scrollbar-measure{position:absolute;top:-9999px;width:50px;height:50px;overflow:scroll}.swal2-rtl .swal2-close{right:auto;left:0}.swal2-rtl .swal2-timer-progress-bar{right:0;left:auto}@supports (-ms-accelerator:true){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.swal2-range input{width:100%!important}.swal2-range output{display:none}}@-moz-document url-prefix(){.swal2-close:focus{outline:2px solid rgba(50,100,150,.4)}}@-webkit-keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@keyframes swal2-toast-show{0%{transform:translateY(-.625em) rotateZ(2deg)}33%{transform:translateY(0) rotateZ(-2deg)}66%{transform:translateY(.3125em) rotateZ(2deg)}100%{transform:translateY(0) rotateZ(0)}}@-webkit-keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@keyframes swal2-toast-hide{100%{transform:rotateZ(1deg);opacity:0}}@-webkit-keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@keyframes swal2-toast-animate-success-line-tip{0%{top:.5625em;left:.0625em;width:0}54%{top:.125em;left:.125em;width:0}70%{top:.625em;left:-.25em;width:1.625em}84%{top:1.0625em;left:.75em;width:.5em}100%{top:1.125em;left:.1875em;width:.75em}}@-webkit-keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@keyframes swal2-toast-animate-success-line-long{0%{top:1.625em;right:1.375em;width:0}65%{top:1.25em;right:.9375em;width:0}84%{top:.9375em;right:0;width:1.125em}100%{top:.9375em;right:.1875em;width:1.375em}}@-webkit-keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@keyframes swal2-show{0%{transform:scale(.7)}45%{transform:scale(1.05)}80%{transform:scale(.95)}100%{transform:scale(1)}}@-webkit-keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@keyframes swal2-hide{0%{transform:scale(1);opacity:1}100%{transform:scale(.5);opacity:0}}@-webkit-keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@keyframes swal2-animate-success-line-tip{0%{top:1.1875em;left:.0625em;width:0}54%{top:1.0625em;left:.125em;width:0}70%{top:2.1875em;left:-.375em;width:3.125em}84%{top:3em;left:1.3125em;width:1.0625em}100%{top:2.8125em;left:.8125em;width:1.5625em}}@-webkit-keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@keyframes swal2-animate-success-line-long{0%{top:3.375em;right:2.875em;width:0}65%{top:3.375em;right:2.875em;width:0}84%{top:2.1875em;right:0;width:3.4375em}100%{top:2.375em;right:.5em;width:2.9375em}}@-webkit-keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@keyframes swal2-rotate-success-circular-line{0%{transform:rotate(-45deg)}5%{transform:rotate(-45deg)}12%{transform:rotate(-405deg)}100%{transform:rotate(-405deg)}}@-webkit-keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@keyframes swal2-animate-error-x-mark{0%{margin-top:1.625em;transform:scale(.4);opacity:0}50%{margin-top:1.625em;transform:scale(.4);opacity:0}80%{margin-top:-.375em;transform:scale(1.15)}100%{margin-top:0;transform:scale(1);opacity:1}}@-webkit-keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@keyframes swal2-animate-error-icon{0%{transform:rotateX(100deg);opacity:0}100%{transform:rotateX(0);opacity:1}}@-webkit-keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes swal2-rotate-loading{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow:hidden}body.swal2-height-auto{height:auto!important}body.swal2-no-backdrop .swal2-container{top:auto;right:auto;bottom:auto;left:auto;max-width:calc(100% - .625em * 2);background-color:transparent!important}body.swal2-no-backdrop .swal2-container>.swal2-modal{box-shadow:0 0 10px rgba(0,0,0,.4)}body.swal2-no-backdrop .swal2-container.swal2-top{top:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-top-left,body.swal2-no-backdrop .swal2-container.swal2-top-start{top:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-top-end,body.swal2-no-backdrop .swal2-container.swal2-top-right{top:0;right:0}body.swal2-no-backdrop .swal2-container.swal2-center{top:50%;left:50%;transform:translate(-50%,-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-left,body.swal2-no-backdrop .swal2-container.swal2-center-start{top:50%;left:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-center-end,body.swal2-no-backdrop .swal2-container.swal2-center-right{top:50%;right:0;transform:translateY(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom{bottom:0;left:50%;transform:translateX(-50%)}body.swal2-no-backdrop .swal2-container.swal2-bottom-left,body.swal2-no-backdrop .swal2-container.swal2-bottom-start{bottom:0;left:0}body.swal2-no-backdrop .swal2-container.swal2-bottom-end,body.swal2-no-backdrop .swal2-container.swal2-bottom-right{right:0;bottom:0}@media print{body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown){overflow-y:scroll!important}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown)>[aria-hidden=true]{display:none}body.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) .swal2-container{position:static!important}}body.swal2-toast-shown .swal2-container{background-color:transparent}body.swal2-toast-shown .swal2-container.swal2-top{top:0;right:auto;bottom:auto;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-top-end,body.swal2-toast-shown .swal2-container.swal2-top-right{top:0;right:0;bottom:auto;left:auto}body.swal2-toast-shown .swal2-container.swal2-top-left,body.swal2-toast-shown .swal2-container.swal2-top-start{top:0;right:auto;bottom:auto;left:0}body.swal2-toast-shown .swal2-container.swal2-center-left,body.swal2-toast-shown .swal2-container.swal2-center-start{top:50%;right:auto;bottom:auto;left:0;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-center{top:50%;right:auto;bottom:auto;left:50%;transform:translate(-50%,-50%)}body.swal2-toast-shown .swal2-container.swal2-center-end,body.swal2-toast-shown .swal2-container.swal2-center-right{top:50%;right:0;bottom:auto;left:auto;transform:translateY(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-left,body.swal2-toast-shown .swal2-container.swal2-bottom-start{top:auto;right:auto;bottom:0;left:0}body.swal2-toast-shown .swal2-container.swal2-bottom{top:auto;right:auto;bottom:0;left:50%;transform:translateX(-50%)}body.swal2-toast-shown .swal2-container.swal2-bottom-end,body.swal2-toast-shown .swal2-container.swal2-bottom-right{top:auto;right:0;bottom:0;left:auto}body.swal2-toast-column .swal2-toast{flex-direction:column;align-items:stretch}body.swal2-toast-column .swal2-toast .swal2-actions{flex:1;align-self:stretch;height:2.2em;margin-top:.3125em}body.swal2-toast-column .swal2-toast .swal2-loading{justify-content:center}body.swal2-toast-column .swal2-toast .swal2-input{height:2em;margin:.3125em auto;font-size:1em}body.swal2-toast-column .swal2-toast .swal2-validation-message{font-size:1em}\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sweetalert2/dist/sweetalert2.all.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./resources/js/app.js":
/*!*****************************!*\
  !*** ./resources/js/app.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("window.axios = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\nwindow.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\nwindow.Swal = __webpack_require__(/*! sweetalert2 */ \"./node_modules/sweetalert2/dist/sweetalert2.all.js\");\nwindow.$R = __webpack_require__(/*! ../plugins/redactor/redactor */ \"./resources/plugins/redactor/redactor.js\");\n\n__webpack_require__(/*! ../plugins/redactor/_plugins/alignment/alignment */ \"./resources/plugins/redactor/_plugins/alignment/alignment.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYXBwLmpzPzZkNDAiXSwibmFtZXMiOlsid2luZG93IiwiYXhpb3MiLCJyZXF1aXJlIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiU3dhbCIsIiRSIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxLQUFQLEdBQWVDLG1CQUFPLENBQUMsNENBQUQsQ0FBdEI7QUFDQUYsTUFBTSxDQUFDQyxLQUFQLENBQWFFLFFBQWIsQ0FBc0JDLE9BQXRCLENBQThCQyxNQUE5QixDQUFxQyxrQkFBckMsSUFBMkQsZ0JBQTNEO0FBRUFMLE1BQU0sQ0FBQ00sSUFBUCxHQUFjSixtQkFBTyxDQUFDLHVFQUFELENBQXJCO0FBRUFGLE1BQU0sQ0FBQ08sRUFBUCxHQUFZTCxtQkFBTyxDQUFDLDhFQUFELENBQW5COztBQUNBQSxtQkFBTyxDQUFDLHNIQUFELENBQVAiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYXBwLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsid2luZG93LmF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcbndpbmRvdy5heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1SZXF1ZXN0ZWQtV2l0aCddID0gJ1hNTEh0dHBSZXF1ZXN0Jztcblxud2luZG93LlN3YWwgPSByZXF1aXJlKCdzd2VldGFsZXJ0MicpO1xuXG53aW5kb3cuJFIgPSByZXF1aXJlKCcuLi9wbHVnaW5zL3JlZGFjdG9yL3JlZGFjdG9yJyk7XG5yZXF1aXJlKCcuLi9wbHVnaW5zL3JlZGFjdG9yL19wbHVnaW5zL2FsaWdubWVudC9hbGlnbm1lbnQnKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

/***/ }),

/***/ "./resources/plugins/redactor/_plugins/alignment/alignment.js":
/*!********************************************************************!*\
  !*** ./resources/plugins/redactor/_plugins/alignment/alignment.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function ($R) {\n  $R.add('plugin', 'alignment', {\n    translations: {\n      en: {\n        \"align\": \"Align\",\n        \"align-left\": \"Align Left\",\n        \"align-center\": \"Align Center\",\n        \"align-right\": \"Align Right\",\n        \"align-justify\": \"Align Justify\"\n      }\n    },\n    init: function init(app) {\n      this.app = app;\n      this.opts = app.opts;\n      this.lang = app.lang;\n      this.block = app.block;\n      this.toolbar = app.toolbar;\n    },\n    // public\n    start: function start() {\n      var dropdown = {};\n      dropdown.left = {\n        title: this.lang.get('align-left'),\n        api: 'plugin.alignment.set',\n        args: 'left'\n      };\n      dropdown.center = {\n        title: this.lang.get('align-center'),\n        api: 'plugin.alignment.set',\n        args: 'center'\n      };\n      dropdown.right = {\n        title: this.lang.get('align-right'),\n        api: 'plugin.alignment.set',\n        args: 'right'\n      };\n      dropdown.justify = {\n        title: this.lang.get('align-justify'),\n        api: 'plugin.alignment.set',\n        args: 'justify'\n      };\n      var $button = this.toolbar.addButton('alignment', {\n        title: this.lang.get('align')\n      });\n      $button.setIcon('<i class=\"re-icon-alignment\"></i>');\n      $button.setDropdown(dropdown);\n    },\n    set: function set(type) {\n      if (type === 'left' && this.opts.direction === 'ltr') {\n        return this._remove();\n      }\n\n      var args = {\n        style: {\n          'text-align': type\n        }\n      };\n      this.block.toggle(args);\n    },\n    // private\n    _remove: function _remove() {\n      this.block.remove({\n        style: 'text-align'\n      });\n    }\n  });\n})(Redactor);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvcGx1Z2lucy9yZWRhY3Rvci9fcGx1Z2lucy9hbGlnbm1lbnQvYWxpZ25tZW50LmpzPzRlMTgiXSwibmFtZXMiOlsiJFIiLCJhZGQiLCJ0cmFuc2xhdGlvbnMiLCJlbiIsImluaXQiLCJhcHAiLCJvcHRzIiwibGFuZyIsImJsb2NrIiwidG9vbGJhciIsInN0YXJ0IiwiZHJvcGRvd24iLCJsZWZ0IiwidGl0bGUiLCJnZXQiLCJhcGkiLCJhcmdzIiwiY2VudGVyIiwicmlnaHQiLCJqdXN0aWZ5IiwiJGJ1dHRvbiIsImFkZEJ1dHRvbiIsInNldEljb24iLCJzZXREcm9wZG93biIsInNldCIsInR5cGUiLCJkaXJlY3Rpb24iLCJfcmVtb3ZlIiwic3R5bGUiLCJ0b2dnbGUiLCJyZW1vdmUiLCJSZWRhY3RvciJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQyxVQUFTQSxFQUFULEVBQ0Q7QUFDSUEsSUFBRSxDQUFDQyxHQUFILENBQU8sUUFBUCxFQUFpQixXQUFqQixFQUE4QjtBQUMxQkMsZ0JBQVksRUFBRTtBQUNoQkMsUUFBRSxFQUFFO0FBQ0gsaUJBQVMsT0FETjtBQUVILHNCQUFjLFlBRlg7QUFHSCx3QkFBZ0IsY0FIYjtBQUlILHVCQUFlLGFBSlo7QUFLSCx5QkFBaUI7QUFMZDtBQURZLEtBRFk7QUFVMUJDLFFBQUksRUFBRSxjQUFTQyxHQUFULEVBQ047QUFDSSxXQUFLQSxHQUFMLEdBQVdBLEdBQVg7QUFDQSxXQUFLQyxJQUFMLEdBQVlELEdBQUcsQ0FBQ0MsSUFBaEI7QUFDQSxXQUFLQyxJQUFMLEdBQVlGLEdBQUcsQ0FBQ0UsSUFBaEI7QUFDQSxXQUFLQyxLQUFMLEdBQWFILEdBQUcsQ0FBQ0csS0FBakI7QUFDQSxXQUFLQyxPQUFMLEdBQWVKLEdBQUcsQ0FBQ0ksT0FBbkI7QUFDSCxLQWpCeUI7QUFrQjFCO0FBQ0FDLFNBQUssRUFBRSxpQkFDUDtBQUNJLFVBQUlDLFFBQVEsR0FBRyxFQUFmO0FBRU5BLGNBQVEsQ0FBQ0MsSUFBVCxHQUFnQjtBQUFFQyxhQUFLLEVBQUUsS0FBS04sSUFBTCxDQUFVTyxHQUFWLENBQWMsWUFBZCxDQUFUO0FBQXNDQyxXQUFHLEVBQUUsc0JBQTNDO0FBQW1FQyxZQUFJLEVBQUU7QUFBekUsT0FBaEI7QUFDQUwsY0FBUSxDQUFDTSxNQUFULEdBQWtCO0FBQUVKLGFBQUssRUFBRSxLQUFLTixJQUFMLENBQVVPLEdBQVYsQ0FBYyxjQUFkLENBQVQ7QUFBd0NDLFdBQUcsRUFBRSxzQkFBN0M7QUFBcUVDLFlBQUksRUFBRTtBQUEzRSxPQUFsQjtBQUNBTCxjQUFRLENBQUNPLEtBQVQsR0FBaUI7QUFBRUwsYUFBSyxFQUFFLEtBQUtOLElBQUwsQ0FBVU8sR0FBVixDQUFjLGFBQWQsQ0FBVDtBQUF1Q0MsV0FBRyxFQUFFLHNCQUE1QztBQUFvRUMsWUFBSSxFQUFFO0FBQTFFLE9BQWpCO0FBQ0FMLGNBQVEsQ0FBQ1EsT0FBVCxHQUFtQjtBQUFFTixhQUFLLEVBQUUsS0FBS04sSUFBTCxDQUFVTyxHQUFWLENBQWMsZUFBZCxDQUFUO0FBQXlDQyxXQUFHLEVBQUUsc0JBQTlDO0FBQXNFQyxZQUFJLEVBQUU7QUFBNUUsT0FBbkI7QUFFTSxVQUFJSSxPQUFPLEdBQUcsS0FBS1gsT0FBTCxDQUFhWSxTQUFiLENBQXVCLFdBQXZCLEVBQW9DO0FBQUVSLGFBQUssRUFBRSxLQUFLTixJQUFMLENBQVVPLEdBQVYsQ0FBYyxPQUFkO0FBQVQsT0FBcEMsQ0FBZDtBQUNBTSxhQUFPLENBQUNFLE9BQVIsQ0FBZ0IsbUNBQWhCO0FBQ1RGLGFBQU8sQ0FBQ0csV0FBUixDQUFvQlosUUFBcEI7QUFDTSxLQS9CeUI7QUFnQzFCYSxPQUFHLEVBQUUsYUFBU0MsSUFBVCxFQUNYO0FBQ0ksVUFBSUEsSUFBSSxLQUFLLE1BQVQsSUFBbUIsS0FBS25CLElBQUwsQ0FBVW9CLFNBQVYsS0FBd0IsS0FBL0MsRUFDQTtBQUNJLGVBQU8sS0FBS0MsT0FBTCxFQUFQO0FBQ0g7O0FBRUQsVUFBSVgsSUFBSSxHQUFHO0FBQ0pZLGFBQUssRUFBRTtBQUFFLHdCQUFjSDtBQUFoQjtBQURILE9BQVg7QUFJSCxXQUFLakIsS0FBTCxDQUFXcUIsTUFBWCxDQUFrQmIsSUFBbEI7QUFDQSxLQTVDK0I7QUE4Q2hDO0FBQ0FXLFdBQU8sRUFBRSxtQkFDVDtBQUNJLFdBQUtuQixLQUFMLENBQVdzQixNQUFYLENBQWtCO0FBQUVGLGFBQUssRUFBRTtBQUFULE9BQWxCO0FBQ0g7QUFsRCtCLEdBQTlCO0FBb0RILENBdERELEVBc0RHRyxRQXRESCIsImZpbGUiOiIuL3Jlc291cmNlcy9wbHVnaW5zL3JlZGFjdG9yL19wbHVnaW5zL2FsaWdubWVudC9hbGlnbm1lbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oJFIpXG57XG4gICAgJFIuYWRkKCdwbHVnaW4nLCAnYWxpZ25tZW50Jywge1xuICAgICAgICB0cmFuc2xhdGlvbnM6IHtcbiAgICBcdFx0ZW46IHtcbiAgICBcdFx0XHRcImFsaWduXCI6IFwiQWxpZ25cIixcbiAgICBcdFx0XHRcImFsaWduLWxlZnRcIjogXCJBbGlnbiBMZWZ0XCIsXG4gICAgXHRcdFx0XCJhbGlnbi1jZW50ZXJcIjogXCJBbGlnbiBDZW50ZXJcIixcbiAgICBcdFx0XHRcImFsaWduLXJpZ2h0XCI6IFwiQWxpZ24gUmlnaHRcIixcbiAgICBcdFx0XHRcImFsaWduLWp1c3RpZnlcIjogXCJBbGlnbiBKdXN0aWZ5XCJcbiAgICBcdFx0fVxuICAgICAgICB9LFxuICAgICAgICBpbml0OiBmdW5jdGlvbihhcHApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICAgICAgdGhpcy5vcHRzID0gYXBwLm9wdHM7XG4gICAgICAgICAgICB0aGlzLmxhbmcgPSBhcHAubGFuZztcbiAgICAgICAgICAgIHRoaXMuYmxvY2sgPSBhcHAuYmxvY2s7XG4gICAgICAgICAgICB0aGlzLnRvb2xiYXIgPSBhcHAudG9vbGJhcjtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gcHVibGljXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBkcm9wZG93biA9IHt9O1xuXG4gICAgXHRcdGRyb3Bkb3duLmxlZnQgPSB7IHRpdGxlOiB0aGlzLmxhbmcuZ2V0KCdhbGlnbi1sZWZ0JyksIGFwaTogJ3BsdWdpbi5hbGlnbm1lbnQuc2V0JywgYXJnczogJ2xlZnQnIH07XG4gICAgXHRcdGRyb3Bkb3duLmNlbnRlciA9IHsgdGl0bGU6IHRoaXMubGFuZy5nZXQoJ2FsaWduLWNlbnRlcicpLCBhcGk6ICdwbHVnaW4uYWxpZ25tZW50LnNldCcsIGFyZ3M6ICdjZW50ZXInIH07XG4gICAgXHRcdGRyb3Bkb3duLnJpZ2h0ID0geyB0aXRsZTogdGhpcy5sYW5nLmdldCgnYWxpZ24tcmlnaHQnKSwgYXBpOiAncGx1Z2luLmFsaWdubWVudC5zZXQnLCBhcmdzOiAncmlnaHQnIH07XG4gICAgXHRcdGRyb3Bkb3duLmp1c3RpZnkgPSB7IHRpdGxlOiB0aGlzLmxhbmcuZ2V0KCdhbGlnbi1qdXN0aWZ5JyksIGFwaTogJ3BsdWdpbi5hbGlnbm1lbnQuc2V0JywgYXJnczogJ2p1c3RpZnknIH07XG5cbiAgICAgICAgICAgIHZhciAkYnV0dG9uID0gdGhpcy50b29sYmFyLmFkZEJ1dHRvbignYWxpZ25tZW50JywgeyB0aXRsZTogdGhpcy5sYW5nLmdldCgnYWxpZ24nKSB9KTtcbiAgICAgICAgICAgICRidXR0b24uc2V0SWNvbignPGkgY2xhc3M9XCJyZS1pY29uLWFsaWdubWVudFwiPjwvaT4nKTtcblx0XHRcdCRidXR0b24uc2V0RHJvcGRvd24oZHJvcGRvd24pO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHR5cGUpXG5cdFx0e1xuICAgIFx0XHRpZiAodHlwZSA9PT0gJ2xlZnQnICYmIHRoaXMub3B0cy5kaXJlY3Rpb24gPT09ICdsdHInKVxuICAgIFx0XHR7XG4gICAgICAgIFx0XHRyZXR1cm4gdGhpcy5fcmVtb3ZlKCk7XG4gICAgXHRcdH1cblxuICAgIFx0XHR2YXIgYXJncyA9IHtcbiAgICAgICAgXHQgICAgc3R5bGU6IHsgJ3RleHQtYWxpZ24nOiB0eXBlIH1cbiAgICBcdFx0fTtcblxuXHRcdFx0dGhpcy5ibG9jay50b2dnbGUoYXJncyk7XG5cdFx0fSxcblxuXHRcdC8vIHByaXZhdGVcblx0XHRfcmVtb3ZlOiBmdW5jdGlvbigpXG5cdFx0e1xuXHRcdCAgICB0aGlzLmJsb2NrLnJlbW92ZSh7IHN0eWxlOiAndGV4dC1hbGlnbicgfSk7XG5cdFx0fVxuICAgIH0pO1xufSkoUmVkYWN0b3IpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/plugins/redactor/_plugins/alignment/alignment.js\n");

/***/ }),

/***/ "./resources/plugins/redactor/redactor.js":
/*!************************************************!*\
  !*** ./resources/plugins/redactor/redactor.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {function _typeof(obj){\"@babel/helpers - typeof\";if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}/*\n    Redactor\n    Version 3.4.2\n    Updated: July 17, 2020\n\n    http://imperavi.com/redactor/\n\n    Copyright (c) 2009-2020, Imperavi Ltd.\n    License: http://imperavi.com/redactor/license/\n*/(function(){var Ajax={};Ajax.settings={};Ajax.post=function(options){return new AjaxRequest('post',options);};Ajax.get=function(options){return new AjaxRequest('get',options);};var AjaxRequest=function AjaxRequest(method,options){var defaults={method:method,url:'',before:function before(){},success:function success(){},error:function error(){},data:false,async:true,headers:{}};this.p=this.extend(defaults,options);this.p=this.extend(this.p,Ajax.settings);this.p.method=this.p.method.toUpperCase();this.prepareData();this.xhr=new XMLHttpRequest();this.xhr.open(this.p.method,this.p.url,this.p.async);this.setHeaders();var before=typeof this.p.before==='function'?this.p.before(this.xhr):true;if(before!==false){this.send();}};AjaxRequest.prototype={extend:function extend(obj1,obj2){if(obj2)for(var name in obj2){obj1[name]=obj2[name];}return obj1;},prepareData:function prepareData(){if(this.p.method==='POST'&&!this.isFormData())this.p.headers['Content-Type']='application/x-www-form-urlencoded';if(_typeof(this.p.data)==='object'&&!this.isFormData())this.p.data=this.toParams(this.p.data);if(this.p.method==='GET')this.p.url=this.p.data?this.p.url+'?'+this.p.data:this.p.url;},setHeaders:function setHeaders(){this.xhr.setRequestHeader('X-Requested-With',this.p.headers['X-Requested-With']||'XMLHttpRequest');for(var name in this.p.headers){this.xhr.setRequestHeader(name,this.p.headers[name]);}},isFormData:function isFormData(){return typeof window.FormData!=='undefined'&&this.p.data instanceof window.FormData;},isComplete:function isComplete(){return!(this.xhr.status<200||this.xhr.status>=300&&this.xhr.status!==304);},send:function send(){if(this.p.async){this.xhr.onload=this.loaded.bind(this);this.xhr.send(this.p.data);}else{this.xhr.send(this.p.data);this.loaded.call(this);}},loaded:function loaded(){if(this.isComplete()){var response=this.xhr.response;var json=this.parseJson(response);response=json?json:response;if(typeof this.p.success==='function')this.p.success(response,this.xhr);}else{if(typeof this.p.error==='function')this.p.error(this.xhr.statusText);}},parseJson:function parseJson(str){try{var o=JSON.parse(str);if(o&&_typeof(o)==='object'){return o;}}catch(e){}return false;},toParams:function toParams(obj){return Object.keys(obj).map(function(k){return encodeURIComponent(k)+'='+encodeURIComponent(obj[k]);}).join('&');}};var DomCache=[0];var DomExpando='data'+new Date().getTime();var DomHClass='is-hidden';var DomHMClass='is-hidden-mobile';var Dom=function Dom(selector,context){return this.parse(selector,context);};Dom.ready=function(fn){if(document.readyState!='loading')fn();else document.addEventListener('DOMContentLoaded',fn);};Dom.prototype={get sdom(){return true;},get length(){return this.nodes.length;},parse:function parse(selector,context){var nodes;var reHtmlTest=/^\\s*<(\\w+|!)[^>]*>/;if(!selector){nodes=[];}else if(selector.sdom){this.nodes=selector.nodes;return selector;}else if(typeof selector!=='string'){if(selector.nodeType&&selector.nodeType===11){nodes=selector.childNodes;}else{nodes=selector.nodeType||selector===window?[selector]:selector;}}else if(reHtmlTest.test(selector)){nodes=this.create(selector);}else{nodes=this._query(selector,context);}this.nodes=this._slice(nodes);},create:function create(html){if(/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/.test(html)){return[document.createElement(RegExp.$1)];}var elements=[];var container=document.createElement('div');var children=container.childNodes;container.innerHTML=html;for(var i=0,l=children.length;i<l;i++){elements.push(children[i]);}return elements;},// add\nadd:function add(nodes){this.nodes=this.nodes.concat(this._toArray(nodes));},// get\nget:function get(index){return this.nodes[index||0]||false;},getAll:function getAll(){return this.nodes;},eq:function eq(index){return new Dom(this.nodes[index]);},first:function first(){return new Dom(this.nodes[0]);},last:function last(){return new Dom(this.nodes[this.nodes.length-1]);},contents:function contents(){return this.get().childNodes;},// loop\neach:function each(callback){var len=this.nodes.length;for(var i=0;i<len;i++){callback.call(this,this.nodes[i].sdom?this.nodes[i].get():this.nodes[i],i);}return this;},// traversing\nis:function is(selector){return this.filter(selector).length>0;},filter:function filter(selector){var callback;if(selector===undefined){return this;}else if(typeof selector==='function'){callback=selector;}else{callback=function callback(node){if(selector instanceof Node){return selector===node;}else if(selector&&selector.sdom){return selector.nodes.indexOf(node)!==-1;}else{node.matches=node.matches||node.msMatchesSelector||node.webkitMatchesSelector;return node.nodeType===1?node.matches(selector||'*'):false;}};}return new Dom(this.nodes.filter(callback));},not:function not(filter){return this.filter(function(node){return!new Dom(node).is(filter||true);});},find:function find(selector){var nodes=[];this.each(function(node){var ns=this._query(selector||'*',node);for(var i=0;i<ns.length;i++){nodes.push(ns[i]);}});return new Dom(nodes);},children:function children(selector){var nodes=[];this.each(function(node){if(node.children){var ns=node.children;for(var i=0;i<ns.length;i++){nodes.push(ns[i]);}}});return new Dom(nodes).filter(selector);},parent:function parent(selector){var nodes=[];this.each(function(node){if(node.parentNode)nodes.push(node.parentNode);});return new Dom(nodes).filter(selector);},parents:function parents(selector,context){context=this._getContext(context);var nodes=[];this.each(function(node){var parent=node.parentNode;while(parent&&parent!==context){if(selector){if(new Dom(parent).is(selector)){nodes.push(parent);}}else{nodes.push(parent);}parent=parent.parentNode;}});return new Dom(nodes);},closest:function closest(selector,context){context=this._getContext(context);selector=selector.sdom?selector.get():selector;var nodes=[];var isNode=selector&&selector.nodeType;this.each(function(node){do{if(isNode&&node===selector||new Dom(node).is(selector))return nodes.push(node);}while((node=node.parentNode)&&node!==context);});return new Dom(nodes);},next:function next(selector){return this._getSibling(selector,'nextSibling');},nextElement:function nextElement(selector){return this._getSibling(selector,'nextElementSibling');},prev:function prev(selector){return this._getSibling(selector,'previousSibling');},prevElement:function prevElement(selector){return this._getSibling(selector,'previousElementSibling');},// css\ncss:function css(name,value){if(value===undefined&&_typeof(name)!=='object'){var node=this.get();if(name==='width'||name==='height'){return node.style?this._getHeightOrWidth(name,node,false)+'px':undefined;}else{return node.style?getComputedStyle(node,null)[name]:undefined;}}// set\nreturn this.each(function(node){var obj={};if(_typeof(name)==='object')obj=name;else obj[name]=value;for(var key in obj){if(node.style)node.style[key]=obj[key];}});},// attr\nattr:function attr(name,value,data){data=data?'data-':'';if(value===undefined&&_typeof(name)!=='object'){var node=this.get();if(node&&node.nodeType!==3){return name==='checked'?node.checked:this._getBooleanFromStr(node.getAttribute(data+name));}else return;}// set\nreturn this.each(function(node){var obj={};if(_typeof(name)==='object')obj=name;else obj[name]=value;for(var key in obj){if(node.nodeType!==3){if(key==='checked')node.checked=obj[key];else node.setAttribute(data+key,obj[key]);}}});},data:function data(name,value){if(name===undefined){var reDataAttr=/^data\\-(.+)$/;var attrs=this.get().attributes;var data={};var replacer=function replacer(g){return g[1].toUpperCase();};for(var key in attrs){if(attrs[key]&&reDataAttr.test(attrs[key].nodeName)){var dataName=attrs[key].nodeName.match(reDataAttr)[1];var val=attrs[key].value;dataName=dataName.replace(/-([a-z])/g,replacer);if(this._isObjectString(val))val=this._toObject(val);else val=this._isNumber(val)?parseFloat(val):this._getBooleanFromStr(val);data[dataName]=val;}}return data;}return this.attr(name,value,true);},val:function val(value){if(value===undefined){var el=this.get();if(el.type&&el.type==='checkbox')return el.checked;else return el.value;}return this.each(function(node){node.value=value;});},removeAttr:function removeAttr(value){return this.each(function(node){var rmAttr=function rmAttr(name){if(node.nodeType!==3)node.removeAttribute(name);};value.split(' ').forEach(rmAttr);});},removeData:function removeData(value){return this.each(function(node){var rmData=function rmData(name){if(node.nodeType!==3)node.removeAttribute('data-'+name);};value.split(' ').forEach(rmData);});},// dataset/dataget\ndataset:function dataset(key,value){return this.each(function(node){DomCache[this.dataindex(node)][key]=value;});},dataget:function dataget(key){return DomCache[this.dataindex(this.get())][key];},dataindex:function dataindex(el){var cacheIndex=el[DomExpando];var nextCacheIndex=DomCache.length;if(!cacheIndex){cacheIndex=el[DomExpando]=nextCacheIndex;DomCache[cacheIndex]={};}return cacheIndex;},// class\naddClass:function addClass(value){return this._eachClass(value,'add');},removeClass:function removeClass(value){return this._eachClass(value,'remove');},toggleClass:function toggleClass(value){return this._eachClass(value,'toggle');},hasClass:function hasClass(value){return this.nodes.some(function(node){return node.classList?node.classList.contains(value):false;});},// html & text\nempty:function empty(){return this.each(function(node){node.innerHTML='';});},html:function html(_html){return _html===undefined?this.get().innerHTML||'':this.empty().append(_html);},text:function text(_text){return _text===undefined?this.get().textContent||'':this.each(function(node){node.textContent=_text;});},// manipulation\nafter:function after(html){return this._inject(html,function(frag,node){if(typeof frag==='string'){node.insertAdjacentHTML('afterend',frag);}else{if(node.parentNode!==null){for(var i=frag instanceof Node?[frag]:this._toArray(frag).reverse(),s=0;s<i.length;s++){node.parentNode.insertBefore(i[s],node.nextSibling);}}}return node;});},before:function before(html){return this._inject(html,function(frag,node){if(typeof frag==='string'){node.insertAdjacentHTML('beforebegin',frag);}else{var elms=frag instanceof Node?[frag]:this._toArray(frag);for(var i=0;i<elms.length;i++){node.parentNode.insertBefore(elms[i],node);}}return node;});},append:function append(html){return this._inject(html,function(frag,node){if(typeof frag==='string'||typeof frag==='number'){node.insertAdjacentHTML('beforeend',frag);}else{var elms=frag instanceof Node?[frag]:this._toArray(frag);for(var i=0;i<elms.length;i++){node.appendChild(elms[i]);}}return node;});},prepend:function prepend(html){return this._inject(html,function(frag,node){if(typeof frag==='string'||typeof frag==='number'){node.insertAdjacentHTML('afterbegin',frag);}else{var elms=frag instanceof Node?[frag]:this._toArray(frag).reverse();for(var i=0;i<elms.length;i++){node.insertBefore(elms[i],node.firstChild);}}return node;});},wrap:function wrap(html){return this._inject(html,function(frag,node){var wrapper=typeof frag==='string'||typeof frag==='number'?this.create(frag)[0]:frag instanceof Node?frag:this._toArray(frag)[0];if(node.parentNode){node.parentNode.insertBefore(wrapper,node);}wrapper.appendChild(node);return new Dom(wrapper);});},unwrap:function unwrap(){return this.each(function(node){var $node=new Dom(node);return $node.replaceWith($node.contents());});},replaceWith:function replaceWith(html){return this._inject(html,function(frag,node){var docFrag=document.createDocumentFragment();var elms=typeof frag==='string'||typeof frag==='number'?this.create(frag):frag instanceof Node?[frag]:this._toArray(frag);for(var i=0;i<elms.length;i++){docFrag.appendChild(elms[i]);}var result=docFrag.childNodes[0];node.parentNode.replaceChild(docFrag,node);return result;});},remove:function remove(){return this.each(function(node){if(node.parentNode)node.parentNode.removeChild(node);});},clone:function clone(events){var nodes=[];this.each(function(node){var copy=this._clone(node);if(events)copy=this._cloneEvents(node,copy);nodes.push(copy);});return new Dom(nodes);},// show/hide\nshow:function show(){return this.each(function(node){if(!node.style||!this._hasDisplayNone(node))return;var target=node.getAttribute('domTargetShow');var isHidden=node.classList?node.classList.contains(DomHClass):false;var isHiddenMobile=node.classList?node.classList.contains(DomHMClass):false;var type;if(isHidden){type=DomHClass;node.classList.remove(DomHClass);}else if(isHiddenMobile){type=DomHMClass;node.classList.remove(DomHMClass);}else{node.style.display=target?target:'block';}if(type)node.setAttribute('domTargetHide',type);node.removeAttribute('domTargetShow');}.bind(this));},hide:function hide(){return this.each(function(node){if(!node.style||this._hasDisplayNone(node))return;var display=node.style.display;var target=node.getAttribute('domTargetHide');if(target===DomHClass){node.classList.add(DomHClass);}else if(target===DomHMClass){node.classList.add(DomHMClass);}else{if(display!=='block')node.setAttribute('domTargetShow',display);node.style.display='none';}node.removeAttribute('domTargetHide');});},// dimensions\nscrollTop:function scrollTop(value){var node=this.get();var isWindow=node===window;var isDocument=node.nodeType===9;var el=isDocument?document.scrollingElement||document.body.parentNode||document.body||document.documentElement:node;if(value!==undefined){if(isWindow)window.scrollTo(0,value);else el.scrollTop=value;return;}if(isDocument){return typeof window.pageYOffset!='undefined'?window.pageYOffset:document.documentElement.scrollTop?document.documentElement.scrollTop:document.body.scrollTop?document.body.scrollTop:0;}else{return isWindow?window.pageYOffset:el.scrollTop;}},offset:function offset(){return this._getDim('Offset');},position:function position(){return this._getDim('Position');},width:function width(value,adjust){return this._getSize('width','Width',value,adjust);},height:function height(value,adjust){return this._getSize('height','Height',value,adjust);},outerWidth:function outerWidth(){return this._getInnerOrOuter('width','outer');},outerHeight:function outerHeight(){return this._getInnerOrOuter('height','outer');},innerWidth:function innerWidth(){return this._getInnerOrOuter('width','inner');},innerHeight:function innerHeight(){return this._getInnerOrOuter('height','inner');},// events\nclick:function click(){return this._triggerEvent('click');},focus:function focus(){return this._triggerEvent('focus');},trigger:function trigger(names){return this.each(function(node){var events=names.split(' ');for(var i=0;i<events.length;i++){var ev;var opts={bubbles:true,cancelable:true};try{ev=new window.CustomEvent(events[i],opts);}catch(e){ev=document.createEvent('CustomEvent');ev.initCustomEvent(events[i],true,true);}node.dispatchEvent(ev);}});},on:function on(names,handler,one){return this.each(function(node){var events=names.split(' ');for(var i=0;i<events.length;i++){var event=this._getEventName(events[i]);var namespace=this._getEventNamespace(events[i]);handler=one?this._getOneHandler(handler,names):handler;node.addEventListener(event,handler);node._e=node._e||{};node._e[namespace]=node._e[namespace]||{};node._e[namespace][event]=node._e[namespace][event]||[];node._e[namespace][event].push(handler);}});},one:function one(events,handler){return this.on(events,handler,true);},off:function off(names,handler){var testEvent=function testEvent(name,key,event){return name===event;};var testNamespace=function testNamespace(name,key,event,namespace){return key===namespace;};var testEventNamespace=function testEventNamespace(name,key,event,namespace){return name===event&&key===namespace;};var testPositive=function testPositive(){return true;};if(names===undefined){// ALL\nreturn this.each(function(node){this._offEvent(node,false,false,handler,testPositive);});}return this.each(function(node){var events=names.split(' ');for(var i=0;i<events.length;i++){var event=this._getEventName(events[i]);var namespace=this._getEventNamespace(events[i]);// 1) event without namespace\nif(namespace==='_events')this._offEvent(node,event,namespace,handler,testEvent);// 2) only namespace\nelse if(!event&&namespace!=='_events')this._offEvent(node,event,namespace,handler,testNamespace);// 3) event + namespace\nelse this._offEvent(node,event,namespace,handler,testEventNamespace);}});},// form\nserialize:function serialize(asObject){var obj={};var elms=this.get().elements;for(var i=0;i<elms.length;i++){var el=elms[i];if(/(checkbox|radio)/.test(el.type)&&!el.checked)continue;if(!el.name||el.disabled||el.type==='file')continue;if(el.type==='select-multiple'){for(var z=0;z<el.options.length;z++){var opt=el.options[z];if(opt.selected)obj[el.name]=opt.value;}}obj[el.name]=this._isNumber(el.value)?parseFloat(el.value):this._getBooleanFromStr(el.value);}return asObject?obj:this._toParams(obj);},ajax:function ajax(success,error){if(typeof AjaxRequest!=='undefined'){var method=this.attr('method')||'post';var options={url:this.attr('action'),data:this.serialize(),success:success,error:error};return new AjaxRequest(method,options);}},// private\n_queryContext:function _queryContext(selector,context){context=this._getContext(context);return context.nodeType!==3&&typeof context.querySelectorAll==='function'?context.querySelectorAll(selector):[];},_query:function _query(selector,context){if(context){return this._queryContext(selector,context);}else if(/^[.#]?[\\w-]*$/.test(selector)){if(selector[0]==='#'){var element=document.getElementById(selector.slice(1));return element?[element]:[];}if(selector[0]==='.'){return document.getElementsByClassName(selector.slice(1));}return document.getElementsByTagName(selector);}return document.querySelectorAll(selector);},_getContext:function _getContext(context){context=typeof context==='string'?document.querySelector(context):context;return context&&context.sdom?context.get():context||document;},_inject:function _inject(html,fn){var len=this.nodes.length;var nodes=[];while(len--){var res=typeof html==='function'?html.call(this,this.nodes[len]):html;var el=len===0?res:this._clone(res);var node=fn.call(this,el,this.nodes[len]);if(node){if(node.sdom)nodes.push(node.get());else nodes.push(node);}}return new Dom(nodes);},_cloneEvents:function _cloneEvents(node,copy){var events=node._e;if(events){copy._e=events;for(var name in events._events){for(var i=0;i<events._events[name].length;i++){copy.addEventListener(name,events._events[name][i]);}}}return copy;},_clone:function _clone(node){if(typeof node==='undefined')return;if(typeof node==='string')return node;else if(node instanceof Node||node.nodeType)return node.cloneNode(true);else if('length'in node){return[].map.call(this._toArray(node),function(el){return el.cloneNode(true);});}},_slice:function _slice(obj){return!obj||obj.length===0?[]:obj.length?[].slice.call(obj.nodes||obj):[obj];},_eachClass:function _eachClass(value,type){return this.each(function(node){if(value){var setClass=function setClass(name){if(node.classList)node.classList[type](name);};value.split(' ').forEach(setClass);}});},_triggerEvent:function _triggerEvent(name){var node=this.get();if(node&&node.nodeType!==3)node[name]();return this;},_getOneHandler:function _getOneHandler(handler,events){var self=this;return function(){handler.apply(this,arguments);self.off(events);};},_getEventNamespace:function _getEventNamespace(event){var arr=event.split('.');var namespace=arr[1]?arr[1]:'_events';return arr[2]?namespace+arr[2]:namespace;},_getEventName:function _getEventName(event){return event.split('.')[0];},_offEvent:function _offEvent(node,event,namespace,handler,condition){for(var key in node._e){for(var name in node._e[key]){if(condition(name,key,event,namespace)){var handlers=node._e[key][name];for(var i=0;i<handlers.length;i++){if(typeof handler!=='undefined'&&handlers[i].toString()!==handler.toString()){continue;}node.removeEventListener(name,handlers[i]);node._e[key][name].splice(i,1);if(node._e[key][name].length===0)delete node._e[key][name];if(Object.keys(node._e[key]).length===0)delete node._e[key];}}}}},_getInnerOrOuter:function _getInnerOrOuter(method,type){return this[method](undefined,type);},_getDocSize:function _getDocSize(node,type){var body=node.body,html=node.documentElement;return Math.max(body['scroll'+type],body['offset'+type],html['client'+type],html['scroll'+type],html['offset'+type]);},_getSize:function _getSize(type,captype,value,adjust){if(value===undefined){var el=this.get();if(el.nodeType===3)value=0;else if(el.nodeType===9)value=this._getDocSize(el,captype);else if(el===window)value=window['inner'+captype];else value=this._getHeightOrWidth(type,el,adjust||'normal');return Math.round(value);}return this.each(function(node){value=parseFloat(value);value=value+this._adjustResultHeightOrWidth(type,node,adjust||'normal');new Dom(node).css(type,value+'px');}.bind(this));},_getHeightOrWidth:function _getHeightOrWidth(type,el,adjust){if(!el)return 0;var name=type.charAt(0).toUpperCase()+type.slice(1);var result=0;var style=getComputedStyle(el,null);var $el=new Dom(el);var $targets=$el.parents().filter(function(node){return node.nodeType===1&&getComputedStyle(node,null).display==='none'?node:false;});if(style.display==='none')$targets.add(el);if($targets.length!==0){var fixStyle='visibility: hidden !important; display: block !important;';var tmp=[];$targets.each(function(node){var $node=new Dom(node);var thisStyle=$node.attr('style');if(thisStyle!==null)tmp.push(thisStyle);$node.attr('style',thisStyle!==null?thisStyle+';'+fixStyle:fixStyle);});result=$el.get()['offset'+name]-this._adjustResultHeightOrWidth(type,el,adjust);$targets.each(function(node,i){var $node=new Dom(node);if(tmp[i]===undefined)$node.removeAttr('style');else $node.attr('style',tmp[i]);});}else{result=el['offset'+name]-this._adjustResultHeightOrWidth(type,el,adjust);}return result;},_adjustResultHeightOrWidth:function _adjustResultHeightOrWidth(type,el,adjust){if(!el||adjust===false)return 0;var fix=0;var style=getComputedStyle(el,null);var isBorderBox=style.boxSizing===\"border-box\";if(type==='height'){if(adjust==='inner'||adjust==='normal'&&isBorderBox){fix+=(parseFloat(style.borderTopWidth)||0)+(parseFloat(style.borderBottomWidth)||0);}if(adjust==='outer')fix-=(parseFloat(style.marginTop)||0)+(parseFloat(style.marginBottom)||0);}else{if(adjust==='inner'||adjust==='normal'&&isBorderBox){fix+=(parseFloat(style.borderLeftWidth)||0)+(parseFloat(style.borderRightWidth)||0);}if(adjust==='outer')fix-=(parseFloat(style.marginLeft)||0)+(parseFloat(style.marginRight)||0);}return fix;},_getDim:function _getDim(type){var node=this.get();return node.nodeType===3?{top:0,left:0}:this['_get'+type](node);},_getPosition:function _getPosition(node){return{top:node.offsetTop,left:node.offsetLeft};},_getOffset:function _getOffset(node){var rect=node.getBoundingClientRect();var doc=node.ownerDocument;var docElem=doc.documentElement;var win=doc.defaultView;return{top:rect.top+win.pageYOffset-docElem.clientTop,left:rect.left+win.pageXOffset-docElem.clientLeft};},_getSibling:function _getSibling(selector,method){selector=selector&&selector.sdom?selector.get():selector;var isNode=selector&&selector.nodeType;var sibling;this.each(function(node){while(node=node[method]){if(isNode&&node===selector||new Dom(node).is(selector)){sibling=node;return;}}});return new Dom(sibling);},_toArray:function _toArray(obj){if(obj instanceof NodeList){var arr=[];for(var i=0;i<obj.length;i++){arr[i]=obj[i];}return arr;}else if(obj===undefined)return[];else{return obj.sdom?obj.nodes:obj;}},_toParams:function _toParams(obj){var params='';for(var key in obj){params+='&'+this._encodeUri(key)+'='+this._encodeUri(obj[key]);}return params.replace(/^&/,'');},_toObject:function _toObject(str){return new Function(\"return \"+str)();},_encodeUri:function _encodeUri(str){return encodeURIComponent(str).replace(/!/g,'%21').replace(/'/g,'%27').replace(/\\(/g,'%28').replace(/\\)/g,'%29').replace(/\\*/g,'%2A').replace(/%20/g,'+');},_isNumber:function _isNumber(str){return!isNaN(str)&&!isNaN(parseFloat(str));},_isObjectString:function _isObjectString(str){return str.search(/^{/)!==-1;},_getBooleanFromStr:function _getBooleanFromStr(str){if(str==='true')return true;else if(str==='false')return false;return str;},_hasDisplayNone:function _hasDisplayNone(el){return el.style.display==='none'||(el.currentStyle?el.currentStyle.display:getComputedStyle(el,null).display)==='none';}};// Unique ID\nvar uuid=0;// Wrapper\nvar $R=function $R(selector,options){return RedactorApp(selector,options,[].slice.call(arguments,2));};// Globals\n$R.app=[];$R.version='3.4.2';$R.options={};$R.modules={};$R.services={};$R.classes={};$R.plugins={};$R.mixins={};$R.modals={};$R.lang={};$R.dom=function(selector,context){return new Dom(selector,context);};$R.ajax=Ajax;$R.Dom=Dom;$R.keycodes={BACKSPACE:8,DELETE:46,UP:38,DOWN:40,ENTER:13,SPACE:32,ESC:27,TAB:9,CTRL:17,META:91,SHIFT:16,ALT:18,RIGHT:39,LEFT:37};$R.env={'plugin':'plugins','module':'modules','service':'services','class':'classes','mixin':'mixins'};// jQuery Wrapper\n/*eslint-env jquery*/if(typeof jQuery!=='undefined'){(function($){$.fn.redactor=function(options){return RedactorApp(this.toArray(),options,[].slice.call(arguments,1));};})(jQuery);}// Class\nvar RedactorApp=function RedactorApp(selector,options,args){var namespace='redactor';var nodes=Array.isArray(selector)?selector:selector&&selector.nodeType?[selector]:document.querySelectorAll(selector);var isApi=typeof options==='string'||typeof options==='function';var value=[];var instance;for(var i=0;i<nodes.length;i++){var el=nodes[i];var $el=$R.dom(el);instance=$el.dataget(namespace);if(!instance&&!isApi){// Initialization\ninstance=new App(el,options,uuid);$el.dataset(namespace,instance);$R.app[uuid]=instance;uuid++;}// API\nif(instance&&isApi){var isDestroy=options==='destroy';options=isDestroy?'stop':options;var methodValue;if(typeof options==='function'){methodValue=options.apply(instance,args);}else{args.unshift(options);methodValue=instance.api.apply(instance,args);}if(methodValue!==undefined)value.push(methodValue);if(isDestroy)$el.dataset(namespace,false);}}return value.length===0||value.length===1?value.length===0?instance:value[0]:value;};// add\n$R.add=function(type,name,obj){if(typeof $R.env[type]==='undefined')return;// translations\nif(obj.translations){$R.lang=$R.extend(true,{},$R.lang,obj.translations);}// modals\nif(obj.modals){$R.modals=$R.extend(true,{},$R.modals,obj.modals);}// mixin\nif(type==='mixin'){$R[$R.env[type]][name]=obj;}else{// prototype\nvar F=function F(){};F.prototype=obj;// mixins\nif(obj.mixins){for(var i=0;i<obj.mixins.length;i++){$R.inherit(F,$R.mixins[obj.mixins[i]]);}}$R[$R.env[type]][name]=F;}};// add lang\n$R.addLang=function(lang,obj){if(typeof $R.lang[lang]==='undefined'){$R.lang[lang]={};}$R.lang[lang]=$R.extend($R.lang[lang],obj);};// create\n$R.create=function(name){var arr=name.split('.');var args=[].slice.call(arguments,1);var type='classes';if(typeof $R.env[arr[0]]!=='undefined'){type=$R.env[arr[0]];name=arr.slice(1).join('.');}// construct\nvar instance=new $R[type][name]();// init\nif(instance.init){var res=instance.init.apply(instance,args);return res?res:instance;}return instance;};// inherit\n$R.inherit=function(current,parent){var F=function F(){};F.prototype=parent;var f=new F();for(var prop in current.prototype){if(current.prototype.__lookupGetter__(prop))f.__defineGetter__(prop,current.prototype.__lookupGetter__(prop));else f[prop]=current.prototype[prop];}current.prototype=f;current.prototype[\"super\"]=parent;return current;};// error\n$R.error=function(exception){throw exception;};// extend\n$R.extend=function(){var extended={};var deep=false;var i=0;var length=arguments.length;if(Object.prototype.toString.call(arguments[0])==='[object Boolean]'){deep=arguments[0];i++;}var merge=function merge(obj){for(var prop in obj){if(Object.prototype.hasOwnProperty.call(obj,prop)){if(deep&&Object.prototype.toString.call(obj[prop])==='[object Object]')extended[prop]=$R.extend(true,extended[prop],obj[prop]);else extended[prop]=obj[prop];}}};for(;i<length;i++){var obj=arguments[i];merge(obj);}return extended;};$R.opts={animation:true,lang:'en',direction:'ltr',spellcheck:true,structure:false,scrollTarget:false,styles:true,stylesClass:'redactor-styles',placeholder:false,source:true,showSource:false,inline:false,breakline:false,markup:'p',enterKey:true,clickToEdit:false,clickToSave:false,clickToCancel:false,focus:false,focusEnd:false,minHeight:false,// string, '100px'\nmaxHeight:false,// string, '100px'\nmaxWidth:false,// string, '700px'\nplugins:[],// array\ncallbacks:{},// pre & tab\npreClass:false,// string\npreSpaces:4,// or false\ntabindex:false,// int\ntabAsSpaces:false,// true or number of spaces\ntabKey:true,// autosave\nautosave:false,// false or url\nautosaveName:false,autosaveData:false,// toolbar\ntoolbar:true,toolbarFixed:true,toolbarFixedTarget:document,toolbarFixedTopOffset:0,// pixels\ntoolbarExternal:false,// ID selector\ntoolbarContext:true,// air\nair:false,// formatting\nformatting:['p','blockquote','pre','h1','h2','h3','h4','h5','h6'],formattingAdd:false,formattingHide:false,// buttons\nbuttons:['html','format','bold','italic','deleted','lists','image','file','link'],// + 'line', 'redo', 'undo', 'underline', 'ol', 'ul', 'indent', 'outdent'\nbuttonsTextLabeled:false,buttonsAdd:[],buttonsAddFirst:[],buttonsAddAfter:false,buttonsAddBefore:false,buttonsHide:[],buttonsHideOnMobile:[],// image\nimageUpload:false,imageUploadParam:'file',imageData:false,imageEditable:true,imageCaption:true,imageLink:true,imagePosition:false,imageResizable:false,imageFloatMargin:'10px',imageFigure:true,imageObserve:true,// file\nfileUpload:false,fileUploadParam:'file',fileData:false,fileAttachment:false,// upload opts\nuploadData:false,dragUpload:true,multipleUpload:true,clipboardUpload:true,uploadBase64:false,// link\nlinkTarget:false,linkTitle:false,linkNewTab:true,linkNofollow:false,linkSize:30,linkValidation:true,// clean\ncleanOnEnter:true,cleanInlineOnEnter:false,paragraphize:true,removeScript:true,removeNewLines:false,removeComments:true,replaceTags:{'b':'strong','i':'em','strike':'del'},// paste\npastePlainText:false,pasteLinkTarget:false,pasteImages:true,pasteLinks:true,pasteClean:true,pasteKeepStyle:[],pasteKeepClass:[],pasteKeepAttrs:['td','th'],pasteBlockTags:['pre','h1','h2','h3','h4','h5','h6','table','tbody','thead','tfoot','th','tr','td','ul','ol','li','blockquote','p','figure','figcaption'],pasteInlineTags:['a','img','br','strong','ins','code','del','span','samp','kbd','sup','sub','mark','var','cite','small','b','u','em','i','abbr'],// active buttons\nactiveButtons:{b:'bold',strong:'bold',i:'italic',em:'italic',del:'deleted',strike:'deleted',u:'underline'},activeButtonsAdd:{},activeButtonsObservers:{},// autoparser\nautoparse:true,autoparseStart:true,autoparsePaste:true,autoparseLinks:true,autoparseImages:true,autoparseVideo:true,// shortcodes\nshortcodes:{'p.':{format:'p'},'quote.':{format:'blockquote'},'pre.':{format:'pre'},'h1.':{format:'h1'},'h2.':{format:'h2'},'h3.':{format:'h3'},'h4.':{format:'h4'},'h5.':{format:'h5'},'h6.':{format:'h6'},//'1.': { format: 'ol' },\n'*.':{format:'ul'}},shortcodesAdd:false,// object\n// shortcuts\nshortcuts:{'ctrl+shift+m, meta+shift+m':{api:'module.inline.clearformat'},'ctrl+b, meta+b':{api:'module.inline.format',args:'b'},'ctrl+i, meta+i':{api:'module.inline.format',args:'i'},'ctrl+u, meta+u':{api:'module.inline.format',args:'u'},'ctrl+h, meta+h':{api:'module.inline.format',args:'sup'},'ctrl+l, meta+l':{api:'module.inline.format',args:'sub'},'ctrl+k, meta+k':{api:'module.link.open'},'ctrl+alt+0, meta+alt+0':{api:'module.block.format',args:'p'},'ctrl+alt+1, meta+alt+1':{api:'module.block.format',args:'h1'},'ctrl+alt+2, meta+alt+2':{api:'module.block.format',args:'h2'},'ctrl+alt+3, meta+alt+3':{api:'module.block.format',args:'h3'},'ctrl+alt+4, meta+alt+4':{api:'module.block.format',args:'h4'},'ctrl+alt+5, meta+alt+5':{api:'module.block.format',args:'h5'},'ctrl+alt+6, meta+alt+6':{api:'module.block.format',args:'h6'},'ctrl+shift+7, meta+shift+7':{api:'module.list.toggle',args:'ol'},'ctrl+shift+8, meta+shift+8':{api:'module.list.toggle',args:'ul'}},shortcutsAdd:false,// object\n// misc\ngrammarly:true,notranslate:false,// private\nbufferLimit:100,emptyHtml:'<p></p>',markerChar:\"\\uFEFF\",imageTypes:['image/png','image/jpeg','image/gif'],imageAttrs:['alt','title','src','class','width','height','srcset'],inlineTags:['a','span','strong','strike','b','u','em','i','code','del','ins','samp','kbd','sup','sub','mark','var','cite','small','abbr'],blockTags:['pre','ul','ol','li','p','h1','h2','h3','h4','h5','h6','dl','dt','dd','div','table','tbody','thead','tfoot','tr','th','td','blockquote','output','figcaption','figure','address','section','header','footer','aside','article','iframe'],regex:{youtube:/https?:\\/\\/(?:[0-9A-Z-]+\\.)?(?:youtu\\.be\\/|youtube\\.com\\S*[^\\w\\-\\s])([\\w\\-]{11})(?=[^\\w\\-]|$)(?![?=&+%\\w.-]*(?:['\"][^<>]*>|<\\/a>))[?=&+%\\w.-]*/gi,vimeo:/(http|https)?:\\/\\/(?:www.|player.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/(?:[^\\/]*)\\/videos\\/|album\\/(?:\\d+)\\/video\\/|video\\/|)(\\d+)(?:\\/[a-zA-Z0-9_-]+)?/gi,imageurl:/((https?|www)[^\\s]+\\.)(jpe?g|png|gif)(\\?[^\\s-]+)?/gi,url:/https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/gi},input:true,zindex:false,modes:{\"inline\":{pastePlainText:true,pasteImages:false,enterKey:false,toolbar:false,autoparse:false,source:false,showSource:false,styles:false,air:false},\"original\":{styles:false}}};$R.lang['en']={\"format\":\"Format\",\"image\":\"Image\",\"file\":\"File\",\"link\":\"Link\",\"bold\":\"Bold\",\"italic\":\"Italic\",\"deleted\":\"Strikethrough\",\"underline\":\"Underline\",\"superscript\":\"Superscript\",\"subscript\":\"Subscript\",\"bold-abbr\":\"B\",\"italic-abbr\":\"I\",\"deleted-abbr\":\"S\",\"underline-abbr\":\"U\",\"superscript-abbr\":\"Sup\",\"subscript-abbr\":\"Sub\",\"lists\":\"Lists\",\"link-insert\":\"Insert Link\",\"link-edit\":\"Edit Link\",\"link-in-new-tab\":\"Open link in new tab\",\"unlink\":\"Unlink\",\"cancel\":\"Cancel\",\"close\":\"Close\",\"insert\":\"Insert\",\"save\":\"Save\",\"delete\":\"Delete\",\"text\":\"Text\",\"edit\":\"Edit\",\"title\":\"Alt\",\"paragraph\":\"Normal text\",\"quote\":\"Quote\",\"code\":\"Code\",\"heading1\":\"Heading 1\",\"heading2\":\"Heading 2\",\"heading3\":\"Heading 3\",\"heading4\":\"Heading 4\",\"heading5\":\"Heading 5\",\"heading6\":\"Heading 6\",\"filename\":\"Name\",\"optional\":\"optional\",\"unorderedlist\":\"Unordered List\",\"orderedlist\":\"Ordered List\",\"outdent\":\"Outdent\",\"indent\":\"Indent\",\"horizontalrule\":\"Line\",\"upload\":\"Upload\",\"upload-label\":\"Drop files here or click to upload\",\"accessibility-help-label\":\"Rich text editor\",\"caption\":\"Caption\",\"bulletslist\":\"Bullets\",\"numberslist\":\"Numbers\",\"image-position\":\"Position\",\"none\":\"None\",\"left\":\"Left\",\"right\":\"Right\",\"center\":\"Center\",\"undo\":\"Undo\",\"redo\":\"Redo\"};$R.buttons={html:{title:'HTML',icon:true,api:'module.source.toggle'},undo:{title:'## undo ##',icon:true,api:'module.buffer.undo'},redo:{title:'## redo ##',icon:true,api:'module.buffer.redo'},format:{title:'## format ##',icon:true,dropdown:{p:{title:'## paragraph ##',api:'module.block.format',args:{tag:'p'}},blockquote:{title:'## quote ##',api:'module.block.format',args:{tag:'blockquote'}},pre:{title:'## code ##',api:'module.block.format',args:{tag:'pre'}},h1:{title:'## heading1 ##',api:'module.block.format',args:{tag:'h1'}},h2:{title:'## heading2 ##',api:'module.block.format',args:{tag:'h2'}},h3:{title:'## heading3 ##',api:'module.block.format',args:{tag:'h3'}},h4:{title:'## heading4 ##',api:'module.block.format',args:{tag:'h4'}},h5:{title:'## heading5 ##',api:'module.block.format',args:{tag:'h5'}},h6:{title:'## heading6 ##',api:'module.block.format',args:{tag:'h6'}}}},bold:{title:'## bold-abbr ##',icon:true,tooltip:'## bold ##',api:'module.inline.format',args:{tag:'b'}},italic:{title:'## italic-abbr ##',icon:true,tooltip:'## italic ##',api:'module.inline.format',args:{tag:'i'}},deleted:{title:'## deleted-abbr ##',icon:true,tooltip:'## deleted ##',api:'module.inline.format',args:{tag:'del'}},underline:{title:'## underline-abbr ##',icon:true,tooltip:'## underline ##',api:'module.inline.format',args:{tag:'u'}},sup:{title:'## superscript-abbr ##',icon:true,tooltip:'## superscript ##',api:'module.inline.format',args:{tag:'sup'}},sub:{title:'## subscript-abbr ##',icon:true,tooltip:'## subscript ##',api:'module.inline.format',args:{tag:'sub'}},lists:{title:'## lists ##',icon:true,observe:'list',dropdown:{observe:'list',unorderedlist:{title:'&bull; ## unorderedlist ##',api:'module.list.toggle',args:'ul'},orderedlist:{title:'1. ## orderedlist ##',api:'module.list.toggle',args:'ol'},outdent:{title:'< ## outdent ##',api:'module.list.outdent'},indent:{title:'> ## indent ##',api:'module.list.indent'}}},ul:{title:'&bull; ## bulletslist ##',icon:true,api:'module.list.toggle',observe:'list',args:'ul'},ol:{title:'1. ## numberslist ##',icon:true,api:'module.list.toggle',observe:'list',args:'ol'},outdent:{title:'## outdent ##',icon:true,api:'module.list.outdent',observe:'list'},indent:{title:'## indent ##',icon:true,api:'module.list.indent',observe:'list'},image:{title:'## image ##',icon:true,api:'module.image.open'},file:{title:'## file ##',icon:true,api:'module.file.open'},link:{title:'## link ##',icon:true,observe:'link',dropdown:{observe:'link',link:{title:'## link-insert ##',api:'module.link.open'},unlink:{title:'## unlink ##',api:'module.link.unlink'}}},line:{title:'## horizontalrule ##',icon:true,api:'module.line.insert'}};var App=function App(element,options,uuid){this.module={};this.plugin={};this.instances={};// start/stop\nthis.started=false;this.stopped=false;// environment\nthis.uuid=uuid;this.rootElement=element;this.rootOpts=options;this.dragInside=false;this.dragComponentInside=false;this.keycodes=$R.keycodes;this.namespace='redactor';this.$win=$R.dom(window);this.$doc=$R.dom(document);this.$body=$R.dom('body');this.editorReadOnly=false;// core services\nthis.opts=$R.create('service.options',options,element);this.lang=$R.create('service.lang',this);// build\nthis.buildServices();this.buildModules();this.buildPlugins();// start\nthis.start();};App.prototype={start:function start(){// start\nthis.stopped=false;this.broadcast('start');this.broadcast('startcode');if(this.opts.clickToEdit){this.broadcast('startclicktoedit');}else{this.broadcast('enable');if(this.opts.showSource)this.broadcast('startcodeshow');this.broadcast('enablefocus');}// started\nthis.broadcast('started');this.started=true;},stop:function stop(){this.started=false;this.stopped=true;this.broadcast('stop');this.broadcast('disable');this.broadcast('stopped');},// started & stopped\nisStarted:function isStarted(){return this.started;},isStopped:function isStopped(){return this.stopped;},// build\nbuildServices:function buildServices(){var core=['options','lang'];var bindable=['uuid','keycodes','opts','lang','$win','$doc','$body'];var services=[];for(var name in $R.services){if(core.indexOf(name)===-1){this[name]=$R.create('service.'+name,this);services.push(name);bindable.push(name);}}// binding\nfor(var i=0;i<services.length;i++){var service=services[i];for(var z=0;z<bindable.length;z++){var inj=bindable[z];if(service!==inj){this[service][inj]=this[inj];}}}},buildModules:function buildModules(){for(var name in $R.modules){this.module[name]=$R.create('module.'+name,this);this.instances[name]=this.module[name];}},buildPlugins:function buildPlugins(){var plugins=this.opts.plugins;for(var i=0;i<plugins.length;i++){var name=plugins[i];if(typeof $R.plugins[name]!=='undefined'){this.plugin[name]=$R.create('plugin.'+name,this);this.instances[name]=this.plugin[name];}}},// draginside\nisDragInside:function isDragInside(){return this.dragInside;},setDragInside:function setDragInside(dragInside){this.dragInside=dragInside;},isDragComponentInside:function isDragComponentInside(){return this.dragComponentInside;},setDragComponentInside:function setDragComponentInside(dragInside){this.dragComponentInside=dragInside;},getDragComponentInside:function getDragComponentInside(){return this.dragComponentInside;},// readonly\nisReadOnly:function isReadOnly(){return this.editorReadOnly;},enableReadOnly:function enableReadOnly(){this.editorReadOnly=true;this.broadcast('enablereadonly');this.component.clearActive();this.toolbar.disableButtons();},disableReadOnly:function disableReadOnly(){this.editorReadOnly=false;this.broadcast('disablereadonly');this.toolbar.enableButtons();},// messaging\ncallMessageHandler:function callMessageHandler(instance,name,args){var arr=name.split('.');if(arr.length===1){if(typeof instance['on'+name]==='function'){instance['on'+name].apply(instance,args);}}else{arr[0]='on'+arr[0];var func=this.utils.checkProperty(instance,arr);if(typeof func==='function'){func.apply(instance,args);}}},broadcast:function broadcast(name){var args=[].slice.call(arguments,1);for(var moduleName in this.instances){this.callMessageHandler(this.instances[moduleName],name,args);}// callback\nreturn this.callback.trigger(name,args);},// callback\non:function on(name,func){this.callback.add(name,func);},off:function off(name,func){this.callback.remove(name,func);},// api\napi:function api(name){if(!this.isStarted()&&name!=='start')return;if(this.isReadOnly()&&name!=='disableReadOnly')return;this.broadcast('state');var args=[].slice.call(arguments,1);var arr=name.split('.');var isApp=arr.length===1;var isCallback=arr[0]==='on'||arr[0]==='off';var isService=!isCallback&&arr.length===2;var isPlugin=arr[0]==='plugin';var isModule=arr[0]==='module';// app\nif(isApp){if(typeof this[arr[0]]==='function'){return this.callInstanceMethod(this,arr[0],args);}}// callback\nelse if(isCallback){return arr[0]==='on'?this.on(arr[1],args[0]):this.off(arr[1],args[0]||undefined);}// service\nelse if(isService){if(this.isInstanceExists(this,arr[0])){return this.callInstanceMethod(this[arr[0]],arr[1],args);}else{$R.error(new Error('Service \"'+arr[0]+'\" not found'));}}// plugin\nelse if(isPlugin){if(this.isInstanceExists(this.plugin,arr[1])){return this.callInstanceMethod(this.plugin[arr[1]],arr[2],args);}else{$R.error(new Error('Plugin \"'+arr[1]+'\" not found'));}}// module\nelse if(isModule){if(this.isInstanceExists(this.module,arr[1])){return this.callInstanceMethod(this.module[arr[1]],arr[2],args);}else{$R.error(new Error('Module \"'+arr[1]+'\" not found'));}}},isInstanceExists:function isInstanceExists(obj,name){return typeof obj[name]!=='undefined';},callInstanceMethod:function callInstanceMethod(instance,method,args){if(typeof instance[method]==='function'){return instance[method].apply(instance,args);}}};$R.add('mixin','formatter',{// public\nbuildArgs:function buildArgs(args){this.args={'class':args['class']||false,'style':args['style']||false,'attr':args['attr']||false};if(!this.args['class']&&!this.args['style']&&!this.args['attr']){this.args=false;}},applyArgs:function applyArgs(nodes,selection){if(this.args){nodes=this[this.type](this.args,false,nodes,selection);}else{nodes=this._clearAll(nodes,selection);}return nodes;},clearClass:function clearClass(tags,nodes){this.selection.save();var $elements=nodes?$R.dom(nodes):this.getElements(tags,true);$elements.removeAttr('class');nodes=this._unwrapSpanWithoutAttr($elements.getAll());this.selection.restore();return nodes;},clearStyle:function clearStyle(tags,nodes){this.selection.save();var $elements=nodes?$R.dom(nodes):this.getElements(tags,true);$elements.removeAttr('style');nodes=this._unwrapSpanWithoutAttr($elements.getAll());this.selection.restore();return nodes;},clearAttr:function clearAttr(tags,nodes){this.selection.save();var $elements=nodes?$R.dom(nodes):this.getElements(tags,true);this._removeAllAttr($elements);nodes=this._unwrapSpanWithoutAttr($elements.getAll());this.selection.restore();return nodes;},set:function set(args,tags,nodes,selection){if(selection!==false)this.selection.save();var $elements=nodes?$R.dom(nodes):this.getElements(tags);if(args['class']){$elements.removeAttr('class');$elements.addClass(args['class']);}if(args['style']){$elements.removeAttr('style');$elements.css(args['style']);$elements.each(function(node){var $node=$R.dom(node);$node.attr('data-redactor-style-cache',$node.attr('style'));});}if(args['attr']){this._removeAllAttr($elements);$elements.attr(args['attr']);}if(selection!==false)this.selection.restore();return $elements.getAll();},toggle:function toggle(args,tags,nodes,selection){if(selection!==false)this.selection.save();var $elements=nodes?$R.dom(nodes):this.getElements(tags);if(args['class']){$elements.toggleClass(args['class']);$elements.each(function(node){if(node.className==='')node.removeAttribute('class');});}var params;if(args['style']){params=args['style'];$elements.each(function(node){var $node=$R.dom(node);for(var key in params){var newVal=params[key];var oldVal=$node.css(key);oldVal=this.utils.isRgb(oldVal)?this.utils.rgb2hex(oldVal):oldVal.replace(/\"/g,'');newVal=this.utils.isRgb(newVal)?this.utils.rgb2hex(newVal):newVal.replace(/\"/g,'');oldVal=this.utils.hex2long(oldVal);newVal=this.utils.hex2long(newVal);var compareNew=typeof newVal==='string'?newVal.toLowerCase():newVal;var compareOld=typeof oldVal==='string'?oldVal.toLowerCase():oldVal;if(compareNew===compareOld)$node.css(key,'');else $node.css(key,newVal);}this._convertStyleQuotes($node);if(this.utils.removeEmptyAttr(node,'style')){$node.removeAttr('data-redactor-style-cache');}else{$node.attr('data-redactor-style-cache',$node.attr('style'));}}.bind(this));}if(args['attr']){params=args['attr'];$elements.each(function(node){var $node=$R.dom(node);for(var key in params){if($node.attr(key))$node.removeAttr(key);else $node.attr(key,params[key]);}});}if(selection!==false)this.selection.restore();return $elements.getAll();},add:function add(args,tags,nodes,selection){if(selection!==false)this.selection.save();var $elements=nodes?$R.dom(nodes):this.getElements(tags);if(args['class']){$elements.addClass(args['class']);}if(args['style']){var params=args['style'];$elements.each(function(node){var $node=$R.dom(node);$node.css(params);$node.attr('data-redactor-style-cache',$node.attr('style'));this._convertStyleQuotes($node);}.bind(this));}if(args['attr']){$elements.attr(args['attr']);}if(selection!==false)this.selection.restore();return $elements.getAll();},remove:function remove(args,tags,nodes,selection){if(selection!==false)this.selection.save();var $elements=nodes?$R.dom(nodes):this.getElements(tags);if(args['class']){$elements.removeClass(args['class']);$elements.each(function(node){if(node.className==='')node.removeAttribute('class');});}if(args['style']){var name=args['style'];$elements.each(function(node){var $node=$R.dom(node);$node.css(name,'');if(this.utils.removeEmptyAttr(node,'style')){$node.removeAttr('data-redactor-style-cache');}else{$node.attr('data-redactor-style-cache',$node.attr('style'));}}.bind(this));}if(args['attr']){$elements.removeAttr(args['attr']);}nodes=this._unwrapSpanWithoutAttr($elements.getAll());if(selection!==false)this.selection.restore();return nodes;},// private\n_removeAllAttr:function _removeAllAttr($elements){$elements.each(function(node){for(var i=node.attributes.length;i-->0;){var nodeAttr=node.attributes[i];var name=nodeAttr.name;if(name!=='style'&&name!=='class'){node.removeAttributeNode(nodeAttr);}}});},_convertStyleQuotes:function _convertStyleQuotes($node){var style=$node.attr('style');if(style)$node.attr('style',style.replace(/\"/g,'\\''));},_clearAll:function _clearAll(nodes,selection){if(selection!==false)this.selection.save();for(var i=0;i<nodes.length;i++){var node=nodes[i];while(node.attributes.length>0){node.removeAttribute(node.attributes[0].name);}}nodes=this._unwrapSpanWithoutAttr(nodes);if(selection!==false)this.selection.restore();return nodes;},_unwrapSpanWithoutAttr:function _unwrapSpanWithoutAttr(nodes){var finalNodes=[];for(var i=0;i<nodes.length;i++){var node=nodes[i];var len=node.attributes.length;if(len<=0&&node.nodeType!==3&&node.tagName==='SPAN'){$R.dom(node).unwrap();}else{finalNodes.push(node);}}return finalNodes;}});$R.add('mixin','dom',$R.Dom.prototype);$R.add('mixin','component',{get cmnt(){return true;}});$R.add('service','options',{init:function init(options,element){var $el=$R.dom(element);var opts=$R.extend({},$R.opts,element?$el.data():{},$R.options);opts=$R.extend(true,opts,options);return opts;}});$R.add('service','lang',{init:function init(app){this.app=app;this.opts=app.opts;// build\nthis.vars=this._build(this.opts.lang);},// public\nrebuild:function rebuild(lang){this.opts.lang=lang;this.vars=this._build(lang);},extend:function extend(obj){this.vars=$R.extend(this.vars,obj);},parse:function parse(str){if(str===undefined){return'';}var matches=str.match(/## (.*?) ##/g);if(matches){for(var i=0;i<matches.length;i++){var key=matches[i].replace(/^##\\s/g,'').replace(/\\s##$/g,'');str=str.replace(matches[i],this.get(key));}}return str;},get:function get(name){var str='';if(typeof this.vars[name]!=='undefined'){str=this.vars[name];}else if(this.opts.lang!=='en'&&typeof $R.lang['en'][name]!=='undefined'){str=$R.lang['en'][name];}return str;},// private\n_build:function _build(lang){var vars=$R.lang['en'];if(lang!=='en'){vars=$R.lang[lang]!==undefined?$R.lang[lang]:vars;}return vars;}});$R.add('service','callback',{init:function init(app){this.app=app;this.opts=app.opts;// local\nthis.callbacks={};// build\nif(this.opts.callbacks){this._set(this.opts.callbacks,'');}},stop:function stop(){this.callbacks={};},add:function add(name,handler){if(!this.callbacks[name])this.callbacks[name]=[];this.callbacks[name].push(handler);},remove:function remove(name,handler){if(handler===undefined){delete this.callbacks[name];}else{for(var i=0;i<this.callbacks[name].length;i++){this.callbacks[name].splice(i,1);}if(Object.keys(this.callbacks[name]).length===0)delete this.callbacks[name];}},trigger:function trigger(name,args){var value=this._loop(name,args,this.callbacks);return typeof value==='undefined'&&args&&args[0]!==false?args[0]:value;},// private\n_set:function _set(obj,name){for(var key in obj){var path=name===''?key:name+'.'+key;if(_typeof(obj[key])==='object'){this._set(obj[key],path);}else{this.callbacks[path]=[];this.callbacks[path].push(obj[key]);}}},_loop:function _loop(name,args,obj){var value;for(var key in obj){if(name===key){for(var i=0;i<obj[key].length;i++){value=obj[key][i].apply(this.app,args);}}}return value;}});$R.add('service','animate',{init:function init(app){this.animationOpt=app.opts.animation;},start:function start(element,animation,options,callback){var defaults={duration:false,iterate:false,delay:false,timing:false,prefix:'redactor-'};defaults=typeof options==='function'?defaults:$R.extend(defaults,options);callback=typeof options==='function'?options:callback;// play\nreturn new $R.AnimatePlay(element,animation,defaults,callback,this.animationOpt);},stop:function stop(element){this.$el=$R.dom(element);this.$el.removeClass('redactor-animated');var effect=this.$el.attr('redactor-animate-effect');this.$el.removeClass(effect);this.$el.removeAttr('redactor-animate-effect');var hide=this.$el.attr('redactor-animate-hide');if(hide){this.$el.addClass(hide).removeAttr('redactor-animate-hide');}this.$el.off('animationend webkitAnimationEnd');}});$R.AnimatePlay=function(element,animation,defaults,callback,animationOpt){this.hidableEffects=['fadeOut','flipOut','slideUp','zoomOut','slideOutUp','slideOutRight','slideOutLeft'];this.prefixes=['','-webkit-'];this.$el=$R.dom(element);this.$body=$R.dom('body');this.callback=callback;this.animation=!animationOpt?this.buildAnimationOff(animation):animation;this.defaults=defaults;if(this.animation==='slideUp'){this.$el.height(this.$el.height());}// animate\nreturn this.isInanimate()?this.inanimate():this.animate();};$R.AnimatePlay.prototype={buildAnimationOff:function buildAnimationOff(animation){return this.isHidable(animation)?'hide':'show';},buildHideClass:function buildHideClass(){return'redactor-animate-hide';},isInanimate:function isInanimate(){return this.animation==='show'||this.animation==='hide';},isAnimated:function isAnimated(){return this.$el.hasClass('redactor-animated');},isHidable:function isHidable(effect){return this.hidableEffects.indexOf(effect)!==-1;},inanimate:function inanimate(){this.defaults.timing='linear';var hide;if(this.animation==='show'){hide=this.buildHideClass();this.$el.attr('redactor-animate-hide',hide);this.$el.removeClass(hide);}else{hide=this.$el.attr('redactor-animate-hide');this.$el.addClass(hide).removeAttr('redactor-animate-hide');}if(typeof this.callback==='function')this.callback(this);return this;},animate:function animate(){var delay=this.defaults.delay?this.defaults.delay:0;setTimeout(function(){this.$body.addClass('no-scroll-x');this.$el.addClass('redactor-animated');if(!this.$el.attr('redactor-animate-hide')){var hide=this.buildHideClass();this.$el.attr('redactor-animate-hide',hide);this.$el.removeClass(hide);}this.$el.addClass(this.defaults.prefix+this.animation);this.$el.attr('redactor-animate-effect',this.defaults.prefix+this.animation);this.set(this.defaults.duration+'s',this.defaults.iterate,this.defaults.timing);this.complete();}.bind(this),delay*1000);return this;},set:function set(duration,iterate,timing){var len=this.prefixes.length;while(len--){if(duration!==false||duration==='')this.$el.css(this.prefixes[len]+'animation-duration',duration);if(iterate!==false||iterate==='')this.$el.css(this.prefixes[len]+'animation-iteration-count',iterate);if(timing!==false||timing==='')this.$el.css(this.prefixes[len]+'animation-timing-function',timing);}},clean:function clean(){this.$body.removeClass('no-scroll-x');this.$el.removeClass('redactor-animated');this.$el.removeClass(this.defaults.prefix+this.animation);this.$el.removeAttr('redactor-animate-effect');this.set('','','');},complete:function complete(){this.$el.one('animationend webkitAnimationEnd',function(){if(this.$el.hasClass(this.defaults.prefix+this.animation))this.clean();if(this.isHidable(this.animation)){var hide=this.$el.attr('redactor-animate-hide');this.$el.addClass(hide).removeAttr('redactor-animate-hide');}if(this.animation==='slideUp')this.$el.height('');if(typeof this.callback==='function')this.callback(this.$el);}.bind(this));}};$R.add('service','caret',{init:function init(app){this.app=app;},// set\nsetStart:function setStart(el){this._setCaret('Start',el);},setEnd:function setEnd(el){this._setCaret('End',el);},setBefore:function setBefore(el){this._setCaret('Before',el);},setAfter:function setAfter(el){this._setCaret('After',el);},// is\nisStart:function isStart(el){return this._isStartOrEnd(el,'First');},isEnd:function isEnd(el){return this._isStartOrEnd(el,'Last');},// set side\nsetAtEnd:function setAtEnd(node){var data=this.inspector.parse(node);var tag=data.getTag();var range=document.createRange();if(this._isInPage(node)){if(tag==='a'){var textNode=this.utils.createInvisibleChar();$R.dom(node).after(textNode);range.selectNodeContents(textNode);range.collapse(true);}else{range.selectNodeContents(node);range.collapse(false);}this.selection.setRange(range);}},setAtStart:function setAtStart(node){var range=document.createRange();var data=this.inspector.parse(node);if(this._isInPage(node)){range.setStart(node,0);range.collapse(true);if(data.isInline()||this.utils.isEmpty(node)){var textNode=this.utils.createInvisibleChar();range.insertNode(textNode);range.selectNodeContents(textNode);range.collapse(false);}this.selection.setRange(range);}},setAtBefore:function setAtBefore(node){var data=this.inspector.parse(node);var range=document.createRange();if(this._isInPage(node)){range.setStartBefore(node);range.collapse(true);if(data.isInline()){var textNode=this.utils.createInvisibleChar();node.parentNode.insertBefore(textNode,node);range.selectNodeContents(textNode);range.collapse(false);}this.selection.setRange(range);}},setAtAfter:function setAtAfter(node){var range=document.createRange();if(this._isInPage(node)){range.setStartAfter(node);range.collapse(true);var textNode=this.utils.createInvisibleChar();range.insertNode(textNode);range.selectNodeContents(textNode);range.collapse(false);this.selection.setRange(range);}},setAtPrev:function setAtPrev(node){var prev=node.previousSibling;if(prev){prev=prev.nodeType===3&&this._isEmptyTextNode(prev)?prev.previousElementSibling:prev;if(prev)this.setEnd(prev);}},setAtNext:function setAtNext(node){var next=node.nextSibling;if(next){next=next.nodeType===3&&this._isEmptyTextNode(next)?next.nextElementSibling:next;if(next)this.setStart(next);}},// private\n_setCaret:function _setCaret(type,el){var data=this.inspector.parse(el);var node=data.getNode();if(node){this.component.clearActive();this['_set'+type](node,data,data.getTag());}},_setStart:function _setStart(node,data,tag){// 1. text\nif(data.isText()){this.editor.focus();return this.setAtStart(node);}// 2. ul, ol\nelse if(tag==='ul'||tag==='ol'){node=data.findFirstNode('li');var item=this.utils.getFirstElement(node);var dataItem=this.inspector.parse(item);if(item&&dataItem.isComponent()){return this.setStart(dataItem.getComponent());}}// 3. dl\nelse if(tag==='dl'){node=data.findFirstNode('dt');}// 4. br / hr\nelse if(tag==='br'||tag==='hr'){return this.setBefore(node);}// 5. th, td\nelse if(tag==='td'||tag==='th'){var el=data.getFirstElement(node);if(el){return this.setStart(el);}}// 6. table\nelse if(tag==='table'||tag==='tr'){return this.setStart(data.findFirstNode('th, td'));}// 7. figure code\nelse if(data.isComponentType('code')&&!data.isFigcaption()){var code=data.findLastNode('pre, code');this.editor.focus();return this.setAtStart(code);}// 8. table component\nelse if(tag==='figure'&&data.isComponentType('table')){var table=data.getTable();var tableData=this.inspector.parse(table);return this.setStart(tableData.findFirstNode('th, td'));}// 9. non editable components\nelse if(!data.isComponentType('table')&&data.isComponent()&&!data.isFigcaption()){return this.component.setActive(node);}this.editor.focus();// set\nif(!this._setInline(node,'Start')){this.setAtStart(node);}},_setEnd:function _setEnd(node,data,tag){// 1. text\nif(data.isText()){this.editor.focus();return this.setAtEnd(node);}// 2. ul, ol\nelse if(tag==='ul'||tag==='ol'){node=data.findLastNode('li');var item=this.utils.getLastElement(node);var dataItem=this.inspector.parse(item);if(item&&dataItem.isComponent()){return this.setEnd(dataItem.getComponent());}}// 3. dl\nelse if(tag==='dl'){node=data.findLastNode('dd');}// 4. br / hr\nelse if(tag==='br'||tag==='hr'){return this.setAfter(node);}// 5. th, td\nelse if(tag==='td'||tag==='th'){var el=data.getLastElement();if(el){return this.setEnd(el);}}// 6. table\nelse if(tag==='table'||tag==='tr'){return this.setEnd(data.findLastNode('th, td'));}// 7. figure code\nelse if(data.isComponentType('code')&&!data.isFigcaption()){var code=data.findLastNode('pre, code');this.editor.focus();return this.setAtEnd(code);}// 8. table component\nelse if(tag==='figure'&&data.isComponentType('table')){var table=data.getTable();var tableData=this.inspector.parse(table);return this.setEnd(tableData.findLastNode('th, td'));}// 9. non editable components\nelse if(!data.isComponentType('table')&&data.isComponent()&&!data.isFigcaption()){return this.component.setActive(node);}this.editor.focus();// set\nif(!this._setInline(node,'End')){// is element empty\nif(this.utils.isEmpty(node)){return this.setStart(node);}this.setAtEnd(node);}},_setBefore:function _setBefore(node,data,tag){// text\nif(node.nodeType===3){return this.setAtBefore(node);}// inline\nelse if(data.isInline()){return this.setAtBefore(node);}// td / th\nelse if(data.isFirstTableCell()){return this.setAtPrev(data.getComponent());}else if(tag==='td'||tag==='th'){return this.setAtPrev(node);}// li\nelse if(data.isFirstListItem()){return this.setAtPrev(data.getList());}// figcaption\nelse if(data.isFigcaption()){return this.setStart(data.getComponent());}// component\nelse if(!data.isComponentType('table')&&data.isComponent()){return this.setAtPrev(data.getComponent());}// block\nelse if(data.isBlock()){return this.setAtPrev(node);}this.editor.focus();this.setAtBefore(node);},_setAfter:function _setAfter(node,data,tag){// text\nif(node.nodeType===3){return this.setAtAfter(node);}// inline\nelse if(data.isInline()){return this.setAtAfter(node);}// td / th\nelse if(data.isLastTableCell()){return this.setAtNext(data.getComponent());}else if(tag==='td'||tag==='th'){return this.setAtNext(node);}// li\nelse if(data.isFirstListItem()){return this.setAtNext(data.getList());}// component\nelse if(!data.isComponentType('table')&&data.isComponent()){return this.setAtNext(data.getComponent());}// block\nelse if(data.isBlock()){return this.setAtNext(node);}this.editor.focus();this.setAtAfter(node);},_setInline:function _setInline(node,type){// is first element inline (FF only)\nvar inline=this._hasInlineChild(node,type==='Start'?'first':'last');if(inline){if(type==='Start'){this.setStart(inline);}else{this.setEnd(inline);}return true;}},_isStartOrEnd:function _isStartOrEnd(el,type){var node=this.utils.getNode(el);if(!node)return false;var data=this.inspector.parse(node);node=this._getStartEndNode(node,data,type);if(node&&node.nodeType!==3&&node.tagName!=='LI'){var html=node.nodeType===3?node.textContent:node.innerHTML;html=this.utils.trimSpaces(html);if(html==='')return true;}if(!data.isFigcaption()&&data.isComponent()&&!data.isComponentEditable()){return true;}var offset=this.offset.get(node,true);if(offset){return type==='First'?offset.start===0:offset.end===this.offset.size(node,true);}else{return false;}},_isInPage:function _isInPage(node){if(node&&node.nodeType){return node===document.body?false:document.body.contains(node);}else{return false;}},_hasInlineChild:function _hasInlineChild(el,pos){var data=this.inspector.parse(el);var node=pos==='first'?data.getFirstNode():data.getLastNode();var $node=$R.dom(node);if(node&&node.nodeType!==3&&this.inspector.isInlineTag(node.tagName)&&!$node.hasClass('redactor-component')&&!$node.hasClass('non-editable')){return node;}},_isEmptyTextNode:function _isEmptyTextNode(node){var text=node.textContent.trim().replace(/\\n/,'');text=this.utils.removeInvisibleChars(text);return text==='';},_getStartEndNode:function _getStartEndNode(node,data,type){if(data.isFigcaption()){node=data.getFigcaption();}else if(data.isTable()){node=data['find'+type+'Node']('th, td');}else if(data.isList()){node=data['find'+type+'Node']('li');}else if(data.isComponentType('code')){node=data.findLastNode('pre, code');}return node;}});var containsNode=function containsNode(node){return document.getSelection().containsNode(node,true);};if(!('containsNode'in Selection.prototype)){containsNode=containsNodePolyfill;}var containsNodePolyfill=function polyfill(node){var selection=document.getSelection();var start=selection.anchorNode.parentNode;var finalnode=selection.focusNode.parentNode;var rectSelection=selection.getRangeAt(0).getBoundingClientRect();var rectBlock=node.getBoundingClientRect();if($R.dom(start).closest(node).length){return true;}if($R.dom(finalnode).closest(node).length){return true;}if(rectSelection.top<rectBlock.top&&rectSelection.height>rectBlock.height){return true;}return false;};$R.add('service','selection',{init:function init(app){this.app=app;},// is\nis:function is(){var sel=this.get();if(sel){var node=sel.anchorNode;var data=this.inspector.parse(node);return data.isInEditor()||data.isEditor();}return false;},isCollapsed:function isCollapsed(){var sel=this.get();var range=this.getRange();if(sel&&sel.isCollapsed)return true;else if(range&&range.toString().length===0)return true;return false;},isBackwards:function isBackwards(){var backwards=false;var sel=this.get();if(sel&&!sel.isCollapsed){var range=document.createRange();range.setStart(sel.anchorNode,sel.anchorOffset);range.setEnd(sel.focusNode,sel.focusOffset);backwards=range.collapsed;range.detach();}return backwards;},isIn:function isIn(el){var node=$R.dom(el).get();var current=this.getCurrent();return current&&node?node.contains(current):false;},isText:function isText(){var sel=this.get();if(sel){var el=sel.anchorNode;var block=this.getBlock(el);var blocks=this.getBlocks();// td, th or hasn't block\nif(block&&this.inspector.isTableCellTag(block.tagName)||block===false&&blocks.length===0){return true;}}return false;},isAll:function isAll(el){var node=this.utils.getNode(el);if(!node)return false;var isEditor=this.editor.isEditor(node);var data=this.inspector.parse(node);// component\nif(!data.isFigcaption()&&this.component.isNonEditable(node)&&this.component.isActive(node)){return true;}if(isEditor){var $editor=this.editor.getElement();var output=$editor.html().replace(/<p><\\/p>$/i,'');var htmlLen=this.getHtml(false).length;var outputLen=output.length;if(htmlLen!==outputLen){return false;}}// editor empty or collapsed\nif(isEditor&&this.editor.isEmpty()||this.isCollapsed()){return false;}// all\nvar offset=this.offset.get(node,true);var size=this.offset.size(node,true);// pre, table, or pre/code in figure\nif(!isEditor&&data.isComponentType('code')){size=this.getText().trim().length;}if(offset&&offset.start===0&&offset.end===size){return true;}return false;},// has\nhasNonEditable:function hasNonEditable(){var selected=this.getHtml();var $wrapper=$R.dom('<div>').html(selected);return!this.isCollapsed()&&$wrapper.find('.non-editable').length!==0;},// set\nsetRange:function setRange(range){var sel=window.getSelection();sel.removeAllRanges();sel.addRange(range);},setAll:function setAll(el){var node=this.utils.getNode(el);if(!node)return;var data=this.inspector.parse(node);this.component.clearActive();this.editor.focus();this.editor.saveScroll();this.editor.disableNonEditables();if(node&&node.tagName==='TABLE'){var first=data.findFirstNode('td, th');var last=data.findLastNode('td, th');$R.dom(first).prepend(this.marker.build('start'));$R.dom(last).append(this.marker.build('end'));this.restoreMarkers();}else if(!data.isFigcaption()&&this.component.isNonEditable(node)){this.component.setActive(node);}else{if(data.isComponentType('code')){node=data.getComponentCodeElement();node.focus();}var range=document.createRange();range.selectNodeContents(node);this.setRange(range);}this.editor.enableNonEditables();this.editor.restoreScroll();},// get\nget:function get(){var sel=window.getSelection();return sel.rangeCount>0?sel:null;},getRange:function getRange(){var sel=this.get();return sel?sel.getRangeAt(0)?sel.getRangeAt(0):null:null;},getTextBeforeCaret:function getTextBeforeCaret(num){num=typeof num==='undefined'?1:num;var el=this.editor.getElement().get();var range=this.getRange();var text=false;if(range){range=range.cloneRange();range.collapse(true);range.setStart(el,0);text=range.toString().slice(-num);}return text;},getTextAfterCaret:function getTextAfterCaret(num){num=typeof num==='undefined'?1:num;var el=this.editor.getElement().get();var range=this.getRange();var text=false;if(range){var clonedRange=range.cloneRange();clonedRange.selectNodeContents(el);clonedRange.setStart(range.endContainer,range.endOffset);text=clonedRange.toString().slice(0,num);}return text;},getPosition:function getPosition(){var range=this.getRange();var pos={top:0,left:0,width:0,height:0};if(window.getSelection&&range.getBoundingClientRect){range=range.cloneRange();var offset=range.startOffset-1;range.setStart(range.startContainer,offset<0?0:offset);var rect=range.getBoundingClientRect();pos={top:rect.top,left:rect.left,width:rect.right-rect.left,height:rect.bottom-rect.top};}return pos;},getCurrent:function getCurrent(){var node=false;var sel=this.get();var component=this.component.getActive();if(component){node=component;}else if(sel&&this.is()){var data=this.inspector.parse(sel.anchorNode);node=!data.isEditor()?sel.anchorNode:false;}return node;},getParent:function getParent(){var node=false;var current=this.getCurrent();if(current){var parent=current.parentNode;var data=this.inspector.parse(parent);node=!data.isEditor()?parent:false;}return node;},getElement:function getElement(el){var node=el||this.getCurrent();while(node){var data=this.inspector.parse(node);if(data.isElement()&&data.isInEditor()){return node;}node=node.parentNode;}return false;},getInline:function getInline(el){var node=el||this.getCurrent();var inline=false;while(node){if(this._isInlineNode(node)){inline=node;}node=node.parentNode;}return inline;},getInlineFirst:function getInlineFirst(el){var node=el||this.getCurrent();while(node){if(this._isInlineNode(node)){return node;}node=node.parentNode;}return false;},getInlineAll:function getInlineAll(el){var node=el||this.getCurrent();var inlines=[];while(node){if(this._isInlineNode(node)){inlines.push(node);}node=node.parentNode;}return inlines;},getBlock:function getBlock(el){var node=el||this.getCurrent();while(node){var data=this.inspector.parse(node);var isBlock=this.inspector.isBlockTag(node.tagName);if(isBlock&&data.isInEditor(node)){return node;}node=node.parentNode;}return false;},getInlinesAllSelected:function getInlinesAllSelected(options){if(this.isAll())return[];var inlines=this.getInlines({all:true});var textNodes=this.getNodes({textnodes:true,inline:false});var selected=this.getText().replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\"\\\\$&\");var finalNodes=[];if(textNodes.length!==0){return finalNodes;}if(selected===''){finalNodes=inlines;}else if(inlines.length>1){for(var i=0;i<inlines.length;i++){if(this._isTextSelected(inlines[i],selected)){finalNodes.push(inlines[i]);}}}else if(inlines.length===1){if(this._isTextSelected(inlines[0],selected)){finalNodes=inlines;}}finalNodes=options&&options.tags?this._filterNodesByTags(finalNodes,options.tags):finalNodes;return finalNodes;},getInlines:function getInlines(options){var nodes=this.getNodes();var filteredNodes=[];for(var i=0;i<nodes.length;i++){var node;if(options&&options.all){node=nodes[i];while(node){if(this._isInlineNode(node)&&!this._isInNodesArray(filteredNodes,node)){filteredNodes.push(node);}node=node.parentNode;}}else{node=this.getInline(nodes[i]);if(node&&!this._isInNodesArray(filteredNodes,node)){filteredNodes.push(node);}}}// filter\nfilteredNodes=options&&options.tags?this._filterNodesByTags(filteredNodes,options.tags):filteredNodes;filteredNodes=options&&options.inside?this._filterInlinesInside(filteredNodes,options):filteredNodes;return filteredNodes;},getBlocks:function getBlocks(options){var nodes=this.getNodes();var block=this.getBlock();nodes=nodes.length===0&&block?[block]:nodes;var filteredNodes=[];for(var i=0;i<nodes.length;i++){var node=this.getBlock(nodes[i]);var $node=$R.dom(node);if($node.hasClass('non-editable'))continue;if(node&&!this._isInNodesArray(filteredNodes,node)){filteredNodes.push(node);}}// filter\nfilteredNodes=options&&options.tags?this._filterNodesByTags(filteredNodes,options.tags):filteredNodes;filteredNodes=options&&options.first?this._filterBlocksFirst(filteredNodes,options):filteredNodes;return filteredNodes;},getElements:function getElements(options){var nodes=this.getNodes({textnodes:false});var block=this.getBlock();nodes=nodes.length===0&&block?[block]:nodes;var filteredNodes=[];for(var i=0;i<nodes.length;i++){if(!this._isInNodesArray(filteredNodes,nodes[i])){filteredNodes.push(nodes[i]);}}// filter\nfilteredNodes=options&&options.tags?this._filterNodesByTags(filteredNodes,options.tags):filteredNodes;return filteredNodes;},getNodes:function getNodes(options){var nodes=[];var activeComponent=this.component.getActive();if(activeComponent){nodes=this._getNodesComponent(activeComponent);}else if(this.isCollapsed()){var current=this.getCurrent();nodes=current?[current]:[];}else if(this.is()&&!activeComponent){nodes=this._getRangeSelectedNodes();}// filter\nnodes=this._filterServicesNodes(nodes);nodes=this._filterEditor(nodes);// options\nnodes=options&&options.tags?this._filterNodesByTags(nodes,options.tags):nodes;nodes=options&&options.textnodes?this._filterNodesTexts(nodes,options):nodes;nodes=options&&!options.textnodes?this._filterNodesElements(nodes):nodes;return nodes;},// text & html\ngetText:function getText(){var sel=this.get();return sel?this.utils.removeInvisibleChars(sel.toString()):'';},getHtml:function getHtml(clean){var html='';var sel=this.get();if(sel){var container=document.createElement('div');var len=sel.rangeCount;for(var i=0;i<len;++i){container.appendChild(sel.getRangeAt(i).cloneContents());}html=container.innerHTML;html=clean!==false?this.cleaner.output(html):html;html=html.replace(/<p><\\/p>$/i,'');}return html;},// clear\nclear:function clear(){this.component.clearActive();this.get().removeAllRanges();},// collapse\ncollapseToStart:function collapseToStart(){var sel=this.get();if(sel&&!sel.isCollapsed)sel.collapseToStart();},collapseToEnd:function collapseToEnd(){var sel=this.get();if(sel&&!sel.isCollapsed)sel.collapseToEnd();},// save\nsaveActiveComponent:function saveActiveComponent(){var activeComponent=this.component.getActive();if(activeComponent){this.savedComponent=activeComponent;return true;}return false;},restoreActiveComponent:function restoreActiveComponent(){if(this.savedComponent){this.component.setActive(this.savedComponent);return true;}return false;},save:function save(){this._clearSaved();var el=this.getElement();var tags=['TD','TH','P','DIV','PRE','H1','H2','H3','H4','H5','H6','LI','BLOCKQUOTE'];if(el&&tags.indexOf(el.tagName)!==-1&&(el.innerHTML===''||el.innerHTML==='<br>')){this.savedElement=el;}else if(!this.saveActiveComponent()){this.saved=this.offset.get();}},restore:function restore(){if(!this.saved&&!this.savedComponent&&!this.savedElement)return;this.editor.saveScroll();if(this.savedElement){this.caret.setStart(this.savedElement);}else if(!this.restoreActiveComponent()){this.offset.set(this.saved);}this._clearSaved();this.editor.restoreScroll();},saveMarkers:function saveMarkers(){this._clearSaved();if(!this.saveActiveComponent()){this.marker.insert();}},restoreMarkers:function restoreMarkers(){this.editor.saveScroll();if(!this.restoreActiveComponent()){this.marker.restore();}this._clearSaved();this.editor.restoreScroll();},// private\n_getNextNode:function _getNextNode(node){if(node.hasChildNodes())return node.firstChild;while(node&&!node.nextSibling){node=node.parentNode;}if(!node)return null;return node.nextSibling;},_getNodesComponent:function _getNodesComponent(component){var current=this.getCurrent();var data=this.inspector.parse(current);return data.isFigcaption()?[data.getFigcaption()]:[component];},_getRangeSelectedNodes:function _getRangeSelectedNodes(){var nodes=[];var range=this.getRange();var node=range.startContainer;var startNode=range.startContainer;var endNode=range.endContainer;var $editor=this.editor.getElement();// editor\nif(startNode===$editor.get()&&this.isAll()){nodes=this.utils.getChildNodes($editor);}// single node\nelse if(node==endNode){nodes=[node];}else{while(node&&node!=endNode){nodes.push(node=this._getNextNode(node));}node=range.startContainer;while(node&&node!=range.commonAncestorContainer){nodes.unshift(node);node=node.parentNode;}}return nodes;},_isInNodesArray:function _isInNodesArray(nodes,node){return nodes.indexOf(node)!==-1;},_filterEditor:function _filterEditor(nodes){var filteredNodes=[];for(var i=0;i<nodes.length;i++){var data=this.inspector.parse(nodes[i]);if(data.isInEditor()){filteredNodes.push(nodes[i]);}}return filteredNodes;},_filterServicesNodes:function _filterServicesNodes(nodes){var filteredNodes=[];for(var i=0;i<nodes.length;i++){var $el=$R.dom(nodes[i]);var skip=false;if(nodes[i]&&nodes[i].nodeType===3&&this.utils.isEmpty(nodes[i]))skip=true;if($el.hasClass('redactor-script-tag')||$el.hasClass('redactor-component-caret')||$el.hasClass('redactor-selection-marker')||$el.hasClass('non-editable'))skip=true;if(!skip){filteredNodes.push(nodes[i]);}}return filteredNodes;},_filterNodesTexts:function _filterNodesTexts(nodes,options){var filteredNodes=[];for(var i=0;i<nodes.length;i++){if(nodes[i].nodeType===3||options.keepbr&&nodes[i].tagName==='BR'){var inline=this.getInline(nodes[i]);var isInline=inline&&options&&options.inline===false;if(!isInline){filteredNodes.push(nodes[i]);}}}return filteredNodes;},_filterNodesElements:function _filterNodesElements(nodes){var filteredNodes=[];for(var i=0;i<nodes.length;i++){if(nodes[i].nodeType!==3){filteredNodes.push(nodes[i]);}}return filteredNodes;},_filterNodesByTags:function _filterNodesByTags(nodes,tags,passtexts){var filteredNodes=[];for(var i=0;i<nodes.length;i++){if(passtexts&&nodes[i].nodeType===3){filteredNodes.push(nodes[i]);}else if(nodes[i].nodeType!==3){var nodeTag=nodes[i].tagName.toLowerCase();if(tags.indexOf(nodeTag.toLowerCase())!==-1){filteredNodes.push(nodes[i]);}}}return filteredNodes;},_filterBlocksFirst:function _filterBlocksFirst(nodes){var filteredNodes=[];for(var i=0;i<nodes.length;i++){var $node=$R.dom(nodes[i]);var parent=$node.parent().get();var isFirst=$node.parent().hasClass('redactor-in');var isCellParent=parent&&(parent.tagName==='TD'||parent.tagName==='TH');if(isFirst||isCellParent){filteredNodes.push(nodes[i]);}}return filteredNodes;},_filterInlinesInside:function _filterInlinesInside(nodes){var filteredNodes=[];for(var i=0;i<nodes.length;i++){if(containsNode(nodes[i],true)){filteredNodes.push(nodes[i]);}}return filteredNodes;},_isTextSelected:function _isTextSelected(node,selected){var text=this.utils.removeInvisibleChars(node.textContent);return selected===text||text.search(selected)!==-1||selected.search(new RegExp('^'+this.utils.escapeRegExp(text)))!==-1||selected.search(new RegExp(this.utils.escapeRegExp(text)+'$'))!==-1;},_isInlineNode:function _isInlineNode(node){var data=this.inspector.parse(node);return this.inspector.isInlineTag(node.tagName)&&data.isInEditor();},_clearSaved:function _clearSaved(){this.saved=false;this.savedComponent=false;this.savedElement=false;}});$R.add('service','element',{init:function init(app){this.app=app;this.rootElement=app.rootElement;// local\nthis.$element={};this.type='inline';},start:function start(){this._build();this._buildType();},// public\nisType:function isType(type){return type===this.type;},getType:function getType(){return this.type;},getElement:function getElement(){return this.$element;},// private\n_build:function _build(){this.$element=$R.dom(this.rootElement);},_buildType:function _buildType(){var tag=this.$element.get().tagName;this.type=tag==='TEXTAREA'?'textarea':this.type;this.type=tag==='DIV'?'div':this.type;this.type=this.opts.inline?'inline':this.type;}});$R.add('service','editor',{init:function init(app){this.app=app;// local\nthis.scrolltop=false;this.pasting=false;},// start\nstart:function start(){this._build();},// focus\nfocus:function focus(){if(!this.isFocus()&&!this._isContenteditableFocus()){this.saveScroll();this.$editor.focus();this.restoreScroll();}},startFocus:function startFocus(){this.caret.setStart(this.getFirstNode());},endFocus:function endFocus(){this.caret.setEnd(this.getLastNode());},// pasting\nisPasting:function isPasting(){return this.pasting;},enablePasting:function enablePasting(){this.pasting=true;},disablePasting:function disablePasting(){this.pasting=false;},// scroll\nsaveScroll:function saveScroll(){this.scrolltop=this._getScrollTarget().scrollTop();if(this.opts.maxHeight){this.scrolltopin=this.$editor.scrollTop();}},restoreScroll:function restoreScroll(){if(this.scrolltop!==false){this._getScrollTarget().scrollTop(this.scrolltop);this.scrolltop=false;}if(this.scrolltopin){this.$editor.scrollTop(this.scrolltopin);this.scrolltopin=false;}},// non editables\ndisableNonEditables:function disableNonEditables(){this.$noneditables=this.$editor.find('[contenteditable=false]');this.$noneditables.attr('contenteditable',true);},enableNonEditables:function enableNonEditables(){if(this.$noneditables){setTimeout(function(){this.$noneditables.attr('contenteditable',false);}.bind(this),1);}},// nodes\ngetFirstNode:function getFirstNode(){return this.$editor.contents()[0];},getLastNode:function getLastNode(){var nodes=this.$editor.contents();return nodes[nodes.length-1];},// utils\nisSourceMode:function isSourceMode(){var $source=this.source.getElement();return $source.hasClass('redactor-source-open');},isEditor:function isEditor(el){var node=$R.dom(el).get();return node===this.$editor.get();},isEmpty:function isEmpty(keeplists){return this.utils.isEmptyHtml(this.$editor.html(),false,keeplists);},isFocus:function isFocus(){var $active=$R.dom(document.activeElement);var isComponentSelected=this.$editor.find('.redactor-component-active').length!==0;return isComponentSelected||$active.closest('.redactor-in-'+this.uuid).length!==0;},setEmpty:function setEmpty(){this.$editor.html(this.opts.emptyHtml);},// element\ngetElement:function getElement(){return this.$editor;},// private\n_build:function _build(){var $element=this.element.getElement();var editableElement=this.element.isType('textarea')?'<div>':$element.get();this.$editor=$R.dom(editableElement);},_getScrollTarget:function _getScrollTarget(){var $target=this.$doc;if(this.opts.toolbarFixedTarget!==document){$target=$R.dom(this.opts.toolbarFixedTarget);}else{$target=this.opts.scrollTarget?$R.dom(this.opts.scrollTarget):$target;}return $target;},_isContenteditableFocus:function _isContenteditableFocus(){var block=this.selection.getBlock();var $blockParent=block?$R.dom(block).closest('[contenteditable=true]').not('.redactor-in'):[];return $blockParent.length!==0;}});$R.add('service','container',{init:function init(app){this.app=app;},// public\nstart:function start(){this._build();},getElement:function getElement(){return this.$container;},// private\n_build:function _build(){var tag=this.element.isType('inline')?'<span>':'<div>';this.$container=$R.dom(tag);}});$R.add('service','source',{init:function init(app){this.app=app;// local\nthis.$source={};this.content='';},// public\nstart:function start(){this._build();this._buildName();this._buildStartedContent();},getElement:function getElement(){return this.$source;},getCode:function getCode(){return this.$source.val();},getName:function getName(){return this.$source.attr('name');},getStartedContent:function getStartedContent(){return this.content;},setCode:function setCode(html){return this.insertion.set(html,true,false);},isNameGenerated:function isNameGenerated(){return this.name;},rebuildStartedContent:function rebuildStartedContent(){this._buildStartedContent();},// private\n_build:function _build(){var $element=this.element.getElement();var isTextarea=this.element.isType('textarea');var sourceElement=isTextarea?$element.get():'<textarea>';this.$source=$R.dom(sourceElement);},_buildName:function _buildName(){var $element=this.element.getElement();this.name=$element.attr('name');this.$source.attr('name',this.name?this.name:'content-'+this.uuid);},_buildStartedContent:function _buildStartedContent(){var $element=this.element.getElement();var content=this.element.isType('textarea')?$element.val():$element.html();this.content=content.trim();}});$R.add('service','statusbar',{init:function init(app){this.app=app;// local\nthis.$statusbar={};this.items=[];},// public\nstart:function start(){this.$statusbar=$R.dom('<ul>');this.$statusbar.attr('dir',this.opts.direction);},add:function add(name,html){return this.update(name,html);},update:function update(name,html){var $item;if(typeof this.items[name]!=='undefined'){$item=this.items[name];}else{$item=$R.dom('<li>');this.$statusbar.append($item);this.items[name]=$item;}return $item.html(html);},get:function get(name){return this.items[name]?this.items[name]:false;},remove:function remove(name){if(this.items[name]){this.items[name].remove();delete this.items[name];}},getItems:function getItems(){return this.items;},removeItems:function removeItems(){this.items={};this.$statusbar.html('');},getElement:function getElement(){return this.$statusbar;}});$R.add('service','toolbar',{init:function init(app){this.app=app;// local\nthis.buttons=[];this.dropdownOpened=false;this.buttonsObservers={};},// public\nstart:function start(){if(this.is()){this.opts.activeButtons=this.opts.activeButtonsAdd?this._extendActiveButtons():this.opts.activeButtons;this.create();}},stopObservers:function stopObservers(){this.buttonsObservers={};},create:function create(){this.$wrapper=$R.dom('<div>');this.$toolbar=$R.dom('<div>');},observe:function observe(){if(!this.is())return;this.setButtonsInactive();var button,observer;// observers\nfor(var name in this.buttonsObservers){observer=this.buttonsObservers[name];button=this.getButton(name);if(!button.isDisabled()){this.app.broadcast('button.'+observer+'.observe',button);}}// inline buttons\nvar buttons=this.opts.activeButtons;var inlines=this.selection.getInlinesAllSelected();var current=this.selection.getInline();if(this.selection.isCollapsed()&&current){inlines.push(current);}var tags=this._inlinesToTags(inlines);for(var key in buttons){if(tags.indexOf(key)!==-1){button=this.getButton(buttons[key]);if(button){button.setActive();}}}},// is\nis:function is(){return!(!this.opts.toolbar||this.detector.isMobile()&&this.opts.air);},isAir:function isAir(){return this.is()?this.$toolbar.hasClass('redactor-air'):false;},isFixed:function isFixed(){return this.is()?this.$toolbar.hasClass('redactor-toolbar-fixed'):false;},isContextBar:function isContextBar(){var $bar=this.$body.find('#redactor-context-toolbar-'+this.uuid);return $bar.hasClass('open');},isTarget:function isTarget(){return this.opts.toolbarFixedTarget!==document;},// get\ngetElement:function getElement(){return this.$toolbar;},getWrapper:function getWrapper(){return this.$wrapper;},getDropdown:function getDropdown(){return this.dropdownOpened;},getTargetElement:function getTargetElement(){return $R.dom(this.opts.toolbarFixedTarget);},getButton:function getButton(name){var $btn=this._findButton('.re-'+name);return $btn.length!==0?$btn.dataget('data-button-instance'):false;},getButtons:function getButtons(){var buttons=[];this._findButtons().each(function(node){var $node=$R.dom(node);buttons.push($node.dataget('data-button-instance'));});return buttons;},getButtonsKeys:function getButtonsKeys(){var keys=[];this._findButtons().each(function(node){var $node=$R.dom(node);keys.push($node.attr('data-re-name'));});return keys;},// add\naddButton:function addButton(name,btnObj,position,$el,start){position=position||'end';var $button=$R.create('toolbar.button',this.app,name,btnObj);if(btnObj.observe){this.opts.activeButtonsObservers[name]={observe:btnObj.observe,button:$button};}if(this.is()){if(position==='first')this.$toolbar.prepend($button);else if(position==='after')$el.after($button);else if(position==='before')$el.before($button);else this.$toolbar.append($button);}return $button;},addButtonFirst:function addButtonFirst(name,btnObj){return this.addButton(name,btnObj,'first');},addButtonAfter:function addButtonAfter(after,name,btnObj){var $btn=this.getButton(after);return $btn?this.addButton(name,btnObj,'after',$btn):this.addButton(name,btnObj);},addButtonBefore:function addButtonBefore(before,name,btnObj){var $btn=this.getButton(before);return $btn?this.addButton(name,btnObj,'before',$btn):this.addButton(name,btnObj);},addButtonObserver:function addButtonObserver(name,observer){this.buttonsObservers[name]=observer;},// set\nsetButtons:function setButtons(buttons){this.buttons=buttons;},setDropdown:function setDropdown(dropdown){this.dropdownOpened=dropdown;},setButtonsInactive:function setButtonsInactive(){var $buttons=this.getButtons();for(var i=0;i<$buttons.length;i++){$buttons[i].setInactive();}},setButtonsActive:function setButtonsActive(){var $buttons=this.getButtons();for(var i=0;i<$buttons.length;i++){$buttons[i].setActive();}},// disable & enable\ndisableButtons:function disableButtons(){var $buttons=this.getButtons();for(var i=0;i<$buttons.length;i++){$buttons[i].disable();}},enableButtons:function enableButtons(){var $buttons=this.getButtons();for(var i=0;i<$buttons.length;i++){$buttons[i].enable();}},// private\n_findButton:function _findButton(selector){return this.is()?this.$toolbar.find(selector):$R.dom();},_findButtons:function _findButtons(){return this.is()?this.$toolbar.find('.re-button'):$R.dom();},_extendActiveButtons:function _extendActiveButtons(){return $R.extend({},this.opts.activeButtons,this.opts.activeButtonsAdd);},_inlinesToTags:function _inlinesToTags(inlines){var tags=[];for(var i=0;i<inlines.length;i++){tags.push(inlines[i].tagName.toLowerCase());}return tags;}});$R.add('class','toolbar.button',{mixins:['dom'],init:function init(app,name,btnObj){this.app=app;this.opts=app.opts;this.lang=app.lang;this.$body=app.$body;this.toolbar=app.toolbar;this.detector=app.detector;// local\nthis.obj=btnObj;this.name=name;this.dropdown=false;this.tooltip=false;// init\nthis._init();},// is\nisActive:function isActive(){return this.hasClass('redactor-button-active');},isDisabled:function isDisabled(){return this.hasClass('redactor-button-disabled');},// has\nhasIcon:function hasIcon(){return this.obj.icon&&!this.opts.buttonsTextLabeled;},// set\nsetDropdown:function setDropdown(dropdown){this.obj.dropdown=dropdown;this.obj.message=false;this.dropdown=$R.create('toolbar.dropdown',this.app,this.name,this.obj.dropdown);this.attr('data-dropdown',true);},setMessage:function setMessage(message,args){this.obj.message=message;this.obj.args=args;this.obj.dropdown=false;},setApi:function setApi(api,args){this.obj.api=api;this.obj.args=args;this.obj.dropdown=false;},setTitle:function setTitle(title){this.obj.title=this.lang.parse(title);this.obj.tooltip=this.obj.title;this.attr({'alt':this.obj.tooltip,'aria-label':this.obj.tooltip});if(!this.attr('data-re-icon'))this.html(this.obj.title);},setTooltip:function setTooltip(tooltip){this.obj.tooltip=this.lang.parse(tooltip);this.attr({'alt':this.obj.tooltip,'aria-label':this.obj.tooltip});},setIcon:function setIcon(icon){if(this.opts.buttonsTextLabeled)return;this.obj.icon=true;this.$icon=$R.dom(icon);this.html('');this.append(this.$icon);this.attr('data-re-icon',true);this.addClass('re-button-icon');this.setTooltip(this.obj.title);this._buildTooltip();},setActive:function setActive(){this.addClass('redactor-button-active');},setInactive:function setInactive(){this.removeClass('redactor-button-active');},// hide\nhideTooltip:function hideTooltip(){this.$body.find('.re-button-tooltip').remove();},// get\ngetDropdown:function getDropdown(){return this.dropdown;},// enable & disable\ndisable:function disable(){this.addClass('redactor-button-disabled');},enable:function enable(){this.removeClass('redactor-button-disabled');},// toggle\ntoggle:function toggle(e){if(e)e.preventDefault();if(this.isDisabled())return;if(this.obj.dropdown){this.dropdown.toggle(e);}else if(this.obj.api){// broadcast\nthis.app.api(this.obj.api,this.obj.args,this.name);}else if(this.obj.message){// broadcast\nthis.app.broadcast(this.obj.message,this.obj.args,this.name);}this.hideTooltip();},// private\n_init:function _init(){// parse\nthis._parseTitle();this._parseTooltip();// build\nthis._build();this._buildCallback();this._buildAttributes();this._buildObserver();if(this.hasIcon()){this._buildIcon();this._buildTooltip();}else{this.html(this.obj.title);}},_parseTooltip:function _parseTooltip(){this.obj.tooltip=this.obj.tooltip?this.lang.parse(this.obj.tooltip):this.obj.title;},_parseTitle:function _parseTitle(){this.obj.title=this.lang.parse(this.obj.title);},_build:function _build(){this.parse('<a>');this.addClass('re-button re-'+this.name);this.attr('data-re-name',this.name);this.dataset('data-button-instance',this);if(this.obj.dropdown)this.setDropdown(this.obj.dropdown);},_buildCallback:function _buildCallback(){this.on('click',this.toggle.bind(this));},_buildAttributes:function _buildAttributes(){var attrs={'href':'#','alt':this.obj.tooltip,'rel':this.name,'role':'button','aria-label':this.obj.tooltip,'tabindex':'-1'};this.attr(attrs);},_buildObserver:function _buildObserver(){if(typeof this.obj.observe!=='undefined'){this.toolbar.addButtonObserver(this.name,this.obj.observe);}},_buildIcon:function _buildIcon(){var icon=this.obj.icon;var isHtml=/(<([^>]+)>)/ig.test(icon);this.$icon=isHtml?$R.dom(icon):$R.dom('<i>');if(!isHtml)this.$icon.addClass('re-icon-'+this.name);this.append(this.$icon);this.attr('data-re-icon',true);this.addClass('re-button-icon');},_buildTooltip:function _buildTooltip(){if(this.detector.isDesktop()){this.tooltip=$R.create('toolbar.button.tooltip',this.app,this);}}});$R.add('class','toolbar.button.tooltip',{mixins:['dom'],init:function init(app,$button){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.$body=app.$body;this.toolbar=app.toolbar;// local\nthis.$button=$button;this.created=false;// init\nthis._init();},open:function open(){if(this.$button.hasClass('redactor-button-disabled')||this.$button.hasClass('redactor-button-active'))return;this.created=true;this.parse('<span>');this.addClass('re-button-tooltip re-button-tooltip-'+this.uuid);this.$body.append(this);this.html(this.$button.attr('alt'));var offset=this.$button.offset();var position='absolute';var height=this.$button.height();var width=this.$button.width();var arrowOffset=4;this.css({top:offset.top+height+arrowOffset+'px',left:offset.left+width/2-this.width()/2+'px',position:position});this.show();},close:function close(){if(!this.created||this.$button.hasClass('redactor-button-disabled'))return;this.remove();this.created=false;},// private\n_init:function _init(){this.$button.on('mouseover',this.open.bind(this));this.$button.on('mouseout',this.close.bind(this));}});$R.add('class','toolbar.dropdown',{mixins:['dom'],init:function init(app,name,items){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.$win=app.$win;this.$doc=app.$doc;this.$body=app.$body;this.animate=app.animate;this.toolbar=app.toolbar;// local\nthis.name=name;this.started=false;this.items=name==='format'?$R.extend({},true,items):items;this.$items=[];},// public\ntoggle:function toggle(e){if(!this.started){this._build();}// toggle\nif(this.isOpened()&&this.isActive()){this.close(false);}else{this.open(e);}},isOpened:function isOpened(){var $dropdown=this.$body.find('.redactor-dropdown-'+this.uuid+'.open');return $dropdown.length!==0&&$dropdown.attr('data-re-name')===this.name;},isActive:function isActive(){var $dropdown=this.$body.find('#redactor-dropdown-'+this.uuid+'-'+this.name+'.open');return $dropdown.length!==0;},getName:function getName(){return this.attr('data-re-name');},getItem:function getItem(name){return this.$items[name];},getItemsByClass:function getItemsByClass(classname){var result=[];for(var key in this.$items){var item=this.$items[key];if(_typeof(item)==='object'&&item.attr('data-re-name')&&item.hasClass(classname)){result.push(item);}}return result;},open:function open(e){this._closeAll();this.$btn=this.toolbar.getButton(this.name);this.app.broadcast('dropdown.open',e,this,this.$btn);this.toolbar.setDropdown(this);this.show();this.removeClass('redactor-animate-hide');this.addClass('open');this._observe();this.$btn.hideTooltip();this.$btn.setActive();this.$doc.on('keyup.redactor.dropdown-'+this.uuid,this._handleKeyboard.bind(this));this.$doc.on('click.redactor.dropdown-'+this.uuid,this.close.bind(this));this.updatePosition();this.app.broadcast('dropdown.opened',e,this,this.$btn);},close:function close(e,animate){if(e){var $el=$R.dom(e.target);if(this._isButton(e)||$el.hasClass('redactor-dropdown-not-close')||$el.hasClass('redactor-dropdown-item-disabled')){e.preventDefault();return;}}this.app.broadcast('dropdown.close',this,this.$btn);this.toolbar.setDropdown(false);this.$btn.setInactive();if(animate===false){this._close();}else{this.animate.start(this,'fadeOut',this._close.bind(this));}},updatePosition:function updatePosition(){var isFixed=this.toolbar.isFixed();var isTarget=this.toolbar.isTarget();var btnHeight=this.$btn.height();var btnWidth=this.$btn.width();var pos=this.$btn.offset();var position='absolute';var topOffset=2;if(isFixed){pos.top=isTarget?this.$btn.offset().top:this.$btn.position().top;position='fixed';topOffset=topOffset+this.opts.toolbarFixedTopOffset;}var leftOffset=0;var left=pos.left+leftOffset;var width=parseFloat(this.css('width'));var winWidth=this.$win.width();var leftFix=winWidth<left+width?width-btnWidth:0;var leftPos=left-leftFix;var top=pos.top+btnHeight+topOffset;leftPos=leftPos<0?4:leftPos;this.css({maxHeight:'',position:position,top:top+'px',left:leftPos+'px'});// height adaptive\nvar heightTolerance=10;var winHeight=this.$win.height();var scrollTop=this.$doc.scrollTop();var cropHeight=winHeight-(top-scrollTop)-heightTolerance;this.css('max-height',cropHeight+'px');},// private\n_build:function _build(){this.parse('<div>');this.attr('dir',this.opts.direction);this.attr('id','redactor-dropdown-'+this.uuid+'-'+this.name);this.attr('data-re-name',this.name);this.addClass('redactor-dropdown redactor-dropdown-'+this.uuid+' redactor-dropdown-'+this.name);this.dataset('data-dropdown-instance',this);var isDom=this.items.sdom||typeof this.items==='string';if(isDom)this._buildDom();else this._buildItems();this.$body.append(this);this.started=true;},_buildDom:function _buildDom(){this.html('').append($R.dom(this.items));},_buildItems:function _buildItems(){this.items=this.name==='format'?this._buildFormattingItems():this.items;for(var key in this.items){var obj=this.items[key];if(key==='observe'){this.attr('data-observe',this.items[key]);}else{var $item=$R.create('toolbar.dropdown.item',this.app,key,obj,this);this.$items[key]=$item;this.append($item);}}},_buildFormattingItems:function _buildFormattingItems(){// build the format set\nfor(var key in this.items){if(this.opts.formatting.indexOf(key)===-1)delete this.items[key];}// remove from the format set\nif(this.opts.formattingHide){for(var key in this.items){if(this.opts.formattingHide.indexOf(key)!==-1)delete this.items[key];}}// add to the format set\nif(this.opts.formattingAdd){for(var key in this.opts.formattingAdd){this.items[key]=this.opts.formattingAdd[key];}}return this.items;},_handleKeyboard:function _handleKeyboard(e){if(e.which===27)this.close();},_isButton:function _isButton(e){var $el=$R.dom(e.target);var $btn=$el.closest('.re-button');return $btn.get()===this.$btn.get();},_close:function _close(){this.$btn.setInactive();this.$doc.off('.redactor.dropdown-'+this.uuid);this.removeClass('open');this.addClass('redactor-animate-hide');this.app.broadcast('dropdown.closed',this,this.$btn);},_closeAll:function _closeAll(){this.$body.find('.redactor-dropdown-'+this.uuid+'.open').each(function(node){var $node=$R.dom(node);var instance=$node.dataget('data-dropdown-instance');instance._close();});},_observe:function _observe(){var observer=this.attr('data-observe');if(observer){this.app.broadcast('dropdown.'+observer+'.observe',this);}}});$R.add('class','toolbar.dropdown.item',{mixins:['dom'],init:function init(app,name,obj,dropdown){this.app=app;this.lang=app.lang;// local\nthis.dropdown=dropdown;this.name=name;this.obj=obj;// init\nthis._init();},setTitle:function setTitle(html){this.$span.html(html);},getTitle:function getTitle(){return this.$span.html();},enable:function enable(){this.removeClass('redactor-dropdown-item-disabled');},disable:function disable(){this.addClass('redactor-dropdown-item-disabled');},toggle:function toggle(e){if(e)e.preventDefault();if(this.hasClass('redactor-dropdown-item-disabled'))return;if(this.obj.message){// broadcast\nthis.app.broadcast(this.obj.message,this.obj.args,this.name);}else if(this.obj.api){this.app.api(this.obj.api,this.obj.args,this.name);}},// private\n_init:function _init(){this.parse('<a>');this.attr('href','#');this.addClass('redactor-dropdown-item-'+this.name);if(this.obj.classname){this.addClass(this.obj.classname);}this.attr('data-re-name',this.name);this.on('click',this.toggle.bind(this));this.$span=$R.dom('<span>');this.append(this.$span);this.setTitle(this.lang.parse(this.obj.title));}});$R.add('service','cleaner',{init:function init(app){this.app=app;this.opts=app.opts;// local\nthis.storedComponents=[];this.storedComments=[];this.storedImages=[];this.storedLinks=[];this.deniedTags=['font','html','head','link','title','body','meta','applet'];this.convertRules={};this.unconvertRules={};// regex\nthis.reComments=/<!--[\\s\\S]*?-->\\n?/g;this.reSpacedEmpty=/^(||\\s||<br\\s?\\/?>||&nbsp;)$/i;this.reScriptTag=/<script(.*?[^>]?)>([\\w\\W]*?)<\\/script>/gi;},// public\naddConvertRules:function addConvertRules(name,func){this.convertRules[name]=func;},addUnconvertRules:function addUnconvertRules(name,func){this.unconvertRules[name]=func;},input:function input(html,paragraphize,started){// store\nvar storedComments=[];html=this.storeComments(html,storedComments);// pre/code\nhtml=this.encodeCode(html);// sanitize\nvar $wrapper=this.utils.buildWrapper(html);$wrapper.find('img, svg, details').removeAttr('onload onerror ontoggle');var imageattrs=['alt','title','src','class','width','height','srcset','style','usemap'];$wrapper.find('img').each(function(node){if(node.attributes.length>0){var attrs=node.attributes;for(var i=attrs.length-1;i>=0;i--){if(attrs[i].name.search(/^data\\-/)===-1&&imageattrs.indexOf(attrs[i].name)===-1){node.removeAttribute(attrs[i].name);}}}});// get wrapper html\nhtml=this.utils.getWrapperHtml($wrapper);// converting entity\nhtml=html.replace(/\\$/g,'&#36;');html=html.replace(/&amp;/g,'&');// convert to figure\nvar converter=$R.create('cleaner.figure',this.app);html=converter.convert(html,this.convertRules);// store components\nhtml=this.storeComponents(html);// clean\nhtml=this.replaceTags(html,this.opts.replaceTags);html=this._setSpanAttr(html);html=this._setStyleCache(html);html=this.removeTags(html,this.deniedTags);html=this.opts.removeScript?this._removeScriptTag(html):this._replaceScriptTag(html);//html = (this.opts.removeScript) ? this._removeScriptTag(html) : html;\nhtml=this.opts.removeComments?this.removeComments(html):html;html=this._isSpacedEmpty(html)?this.opts.emptyHtml:html;// restore components\nhtml=this.restoreComponents(html);// clear wrapped components\nhtml=this._cleanWrapped(html);// restore comments\nhtml=this.restoreComments(html,storedComments);// paragraphize\nhtml=paragraphize?this.paragraphize(html):html;return html;},output:function output(html,removeMarkers){html=this.removeInvisibleSpaces(html);if(this.opts.breakline){html=html.replace(/<\\/(span|strong|b|i|em)><br\\s?\\/?><\\/div>/gi,\"</$1></div>\");html=html.replace(/<br\\s?\\/?><\\/(span|strong|b|i|em)><\\/div>/gi,\"</$1></div>\");}html=html.replace(/&#36;/g,'$');// empty\nif(this._isSpacedEmpty(html))return'';if(this._isParagraphEmpty(html))return'';html=this.removeServiceTagsAndAttrs(html,removeMarkers);// store components\nhtml=this.storeComponents(html);html=this.removeSpanWithoutAttributes(html);html=this.removeFirstBlockBreaklineInHtml(html);html=this.opts.removeScript?html:this._unreplaceScriptTag(html);html=this.opts.preClass?this._setPreClass(html):html;html=this.opts.linkNofollow?this._setLinkNofollow(html):html;html=this.opts.removeNewLines?this.cleanNewLines(html):html;// restore components\nhtml=this.restoreComponents(html);// convert to figure\nvar converter=$R.create('cleaner.figure',this.app);html=converter.unconvert(html,this.unconvertRules);// final clean up\nhtml=this.removeEmptyAttributes(html,['style','class','rel','alt','title']);html=this.cleanSpacesInPre(html);html=this.tidy(html);// converting entity\nhtml=html.replace(/&amp;/g,'&');// breakline tidy\nif(this.opts.breakline){html=html.replace(/<br\\s?\\/?>/gi,\"<br>\\n\");html=html.replace(/<br\\s?\\/?>\\n+/gi,\"<br>\\n\");}// check whitespaces\nhtml=html.replace(/\\n/g,'')===''?'':html;return html;},paste:function paste(html){// store components\nhtml=this.storeComponents(html);// remove tags\nvar deniedTags=this.deniedTags.concat(['iframe']);html=this.removeTags(html,deniedTags);// remove doctype tag\nhtml=html.replace(new RegExp(\"<\\!doctype([\\\\s\\\\S]+?)>\",'gi'),'');// remove style tag\nhtml=html.replace(new RegExp(\"<style([\\\\s\\\\S]+?)</style>\",'gi'),'');// remove br between\nhtml=html.replace(new RegExp(\"</p><br /><p\",'gi'),'</p><p');// gdocs & word\nvar isMsWord=this._isHtmlMsWord(html);html=this._cleanGDocs(html);html=isMsWord?this._cleanMsWord(html):html;// do not clean\nif(!this.opts.pasteClean){// restore components\nhtml=this.restoreComponents(html);return html;}// plain text\nif(this.opts.pastePlainText){// restore components\nhtml=this.restoreComponents(html);return this.pastePlainText(html);}// unconvert data redactor tag\nvar $wrapper=this.utils.buildWrapper(html);$wrapper.find('*').removeAttr('style');$wrapper.find('[data-redactor-tag]').each(function(node){var $node=$R.dom(node);$node.removeAttr('data-redactor-tag');if(this.utils.isEmptyHtml($node.html())){$node.html('<br>').unwrap();}else if(node.lastChild&&node.lastChild.tagName==='BR'){$node.unwrap();}else{$node.append('<br>').unwrap();}}.bind(this));html=this.utils.getWrapperHtml($wrapper);html=html.replace(/<br\\s?\\/?>$/,'');html=html.replace(/<br\\s?\\/?><\\/(td|th)>/,'</$1>');// remove tags\nvar exceptedTags=this.opts.pasteBlockTags.concat(this.opts.pasteInlineTags);html=this.removeTagsExcept(html,exceptedTags);// links & images\nhtml=this.opts.pasteLinks?html:this.removeTags(html,['a']);html=this.opts.pasteImages?html:this.removeTags(html,['img']);// build wrapper\nvar $wrapper=this.utils.buildWrapper(html);// clean attrs\nvar $elms=$wrapper.find('*');// remove style\nvar filterStyle=this.opts.pasteKeepStyle.length!==0?','+this.opts.pasteKeepStyle.join(','):'';$elms.not('[data-redactor-style-cache]'+filterStyle).removeAttr('style');// remove class\nvar filterClass=this.opts.pasteKeepClass.length!==0?','+this.opts.pasteKeepClass.join(','):'';$elms.not('[data-redactor-style-cache], span.redactor-component'+filterClass).removeAttr('class');// remove attrs\nvar filterAttrs=this.opts.pasteKeepAttrs.length!==0?','+this.opts.pasteKeepAttrs.join(','):'';$elms.not('img, a, span.redactor-component, [data-redactor-style-cache]'+filterAttrs).each(function(node){var attrs=node.attributes;for(var i=attrs.length-1;i>=0;i--){if(node.attributes[0].name!=='class'){node.removeAttribute(attrs[i].name);}}});// paste link target\nif(this.opts.pasteLinks&&this.opts.pasteLinkTarget!==false){$wrapper.find('a').attr('target',this.opts.pasteLinkTarget);}// keep style\n$wrapper.find('[data-redactor-style-cache]').each(function(node){var style=node.getAttribute('data-redactor-style-cache');node.setAttribute('style',style);});// remove image attributes\nvar imageattrs=this.opts.imageAttrs;$wrapper.find('img').each(function(node){if(node.attributes.length>0){var attrs=node.attributes;for(var i=attrs.length-1;i>=0;i--){if(imageattrs.indexOf(attrs[i].name)===-1){node.removeAttribute(attrs[i].name);}}}});// remove empty span\n$wrapper.find('span').each(function(node){if(node.attributes.length===0){$R.dom(node).unwrap();}});// remove empty inline\n$wrapper.find(this.opts.inlineTags.join(',')).each(function(node){if(node.attributes.length===0&&this.utils.isEmptyHtml(node.innerHTML)){$R.dom(node).unwrap();}}.bind(this));// place ul/ol into li\n$wrapper.find('ul, ol').each(function(node){var prev=node.previousSibling;if(prev&&prev.tagName==='LI'){var $li=$R.dom(prev);$li.find('p').unwrap();$li.append(node);}});// get wrapper\nhtml=this.utils.getWrapperHtml($wrapper);// remove paragraphs form lists (google docs bug)\nhtml=html.replace(/<li><p>/gi,'<li>');html=html.replace(/<\\/p><\\/li>/gi,'</li>');// gmail list paste\nhtml=html.replace(/^<li/gi,'<ul><li');html=html.replace(/<\\/li>$/gi,'</li></ul>');// convert lines to br\nif(this.opts.breakline){html=html.replace(/\\n/g,'<br>');}// clean empty p\nhtml=html.replace(/<p>&nbsp;<\\/p>/gi,'<p></p>');html=html.replace(/<p><br\\s?\\/?><\\/p>/gi,'<p></p>');if(isMsWord){html=html.replace(/<p><\\/p>/gi,'');html=html.replace(/<p>\\s<\\/p>/gi,'');}// restore components\nhtml=this.restoreComponents(html);return html;},pastePlainText:function pastePlainText(html){html=this.opts.pasteLinks?this.storeLinks(html):html;html=this.opts.pasteImages?this.storeImages(html):html;html=this.getPlainText(html);html=this._replaceNlToBr(html);html=this.opts.pasteLinks?this.restoreLinks(html):html;html=this.opts.pasteImages?this.restoreImages(html):html;return html;},tidy:function tidy(html){return html;},paragraphize:function paragraphize(html){var paragraphize=$R.create('cleaner.paragraphize',this.app);html=paragraphize.convert(html);return html;},storeComments:function storeComments(html,storedComments){var comments=html.match(new RegExp('<!--([\\\\w\\\\W]*?)-->','gi'));if(comments!==null){for(var i=0;i<comments.length;i++){html=html.replace(comments[i],'#####xstarthtmlcommentzz'+i+'xendhtmlcommentzz#####');storedComments.push(comments[i]);}}return html;},restoreComments:function restoreComments(html,storedComments){for(var i=0;i<storedComments.length;i++){html=html.replace('#####xstarthtmlcommentzz'+i+'xendhtmlcommentzz#####',storedComments[i]);}return html;},// get\ngetFlatText:function getFlatText(html){var $div=$R.dom('<div>');if(!html.nodeType&&!html.dom){html=html.toString();html=html.trim();$div.html(html);}else{$div.append(html);}html=$div.get().textContent||$div.get().innerText||'';return html===undefined?'':html;},getPlainText:function getPlainText(html){html=html.replace(/<!--[\\s\\S]*?-->/gi,'');html=html.replace(/<style[\\s\\S]*?style>/gi,'');html=html.replace(/<p><\\/p>/g,'');html=html.replace(/<\\/div>|<\\/li>|<\\/td>/gi,'\\n');html=html.replace(/<\\/p>/gi,'\\n\\n');html=html.replace(/<\\/H[1-6]>/gi,'\\n\\n');var tmp=document.createElement('div');tmp.innerHTML=html;html=tmp.textContent||tmp.innerText;return html.trim();},// replace\nreplaceTags:function replaceTags(html,tags){if(tags){var self=this;var keys=Object.keys(tags);var $wrapper=this.utils.buildWrapper(html);$wrapper.find(keys.join(',')).each(function(node){self.utils.replaceToTag(node,tags[node.tagName.toLowerCase()]);});html=this.utils.getWrapperHtml($wrapper);}return html;},replaceNbspToSpaces:function replaceNbspToSpaces(html){return html.replace('&nbsp;',' ');},replaceBlocksToBr:function replaceBlocksToBr(html){html=html.replace(/<\\/div>|<\\/li>|<\\/td>|<\\/p>|<\\/H[1-6]>/gi,'<br>');return html;},// clean\ncleanNewLines:function cleanNewLines(html){return html.replace(/\\r?\\n/g,\"\");},cleanSpacesInPre:function cleanSpacesInPre(html){return html.replace('&nbsp;&nbsp;&nbsp;&nbsp;','    ');},// remove\nremoveInvisibleSpaces:function removeInvisibleSpaces(html){html=this.utils.removeInvisibleChars(html);html=html.replace(/&#65279;/gi,'');return html;},removeNl:function removeNl(html){html=html.replace(/\\n/g,\" \");html=html.replace(/\\s+/g,\"\\s\");return html;},removeBrAtEnd:function removeBrAtEnd(html){html=html.replace(/<br\\s?\\/?>$/gi,' ');html=html.replace(/<br\\s?\\/?><li/gi,'<li');return html;},removeTags:function removeTags(input,denied){var re=denied?/<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi:/(<([^>]+)>)/gi;var replacer=!denied?'':function($0,$1){return denied.indexOf($1.toLowerCase())===-1?$0:'';};return input.replace(re,replacer);},removeTagsExcept:function removeTagsExcept(input,except){if(except===undefined)return input.replace(/(<([^>]+)>)/gi,'');var tags=/<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;return input.replace(tags,function($0,$1){return except.indexOf($1.toLowerCase())===-1?'':$0;});},removeComments:function removeComments(html){return html.replace(this.reComments,'');},removeServiceTagsAndAttrs:function removeServiceTagsAndAttrs(html,removeMarkers){var $wrapper=this.utils.buildWrapper(html);var self=this;if(removeMarkers!==false){$wrapper.find('.redactor-selection-marker').each(function(node){var $el=$R.dom(node);var text=self.utils.removeInvisibleChars($el.text());return text===''?$el.remove():$el.unwrap();});}$wrapper.find('[data-redactor-style-cache]').removeAttr('data-redactor-style-cache');return this.utils.getWrapperHtml($wrapper);},removeSpanWithoutAttributes:function removeSpanWithoutAttributes(html){var $wrapper=this.utils.buildWrapper(html);$wrapper.find('span').removeAttr('data-redactor-span data-redactor-style-cache').each(function(node){if(node.attributes.length===0)$R.dom(node).unwrap();});return this.utils.getWrapperHtml($wrapper);},removeFirstBlockBreaklineInHtml:function removeFirstBlockBreaklineInHtml(html){return html.replace(new RegExp('</li><br\\\\s?/?>','gi'),'</li>');},removeEmptyAttributes:function removeEmptyAttributes(html,attrs){var $wrapper=this.utils.buildWrapper(html);for(var i=0;i<attrs.length;i++){$wrapper.find('['+attrs[i]+'=\"\"]').removeAttr(attrs[i]);}return this.utils.getWrapperHtml($wrapper);},// encode / decode\nencodeHtml:function encodeHtml(html){html=html.replace(/<br\\s?\\/?>/g,\"\\n\");html=html.replace(/&nbsp;/g,' ');html=html.replace(/”/g,'\"');html=html.replace(/“/g,'\"');html=html.replace(/‘/g,'\\'');html=html.replace(/’/g,'\\'');html=this.encodeEntities(html);html=html.replace(/\\$/g,'&#36;');if(this.opts.preSpaces){html=html.replace(/\\t/g,new Array(this.opts.preSpaces+1).join(' '));}return html;},encodeCode:function encodeCode(html){// replace all tags\nhtml=html.replace(/<(.*?)>/gi,'xtagstartz$1xtagendz');// revert pre / code\nhtml=html.replace(/xtagstartzpre(.*?)xtagendz/g,'<pre$1>');html=html.replace(/xtagstartzcode(.*?)xtagendz/g,'<code$1>');html=html.replace(/xtagstartz\\/codextagendz/g,'</code>');html=html.replace(/xtagstartz\\/prextagendz/g,'</pre>');// encode\nhtml=this._encodeCode(html);// revert all tags\nhtml=html.replace(/xtagstartz(.*?)xtagendz/g,'<$1>');html=html.replace(/xtagstartz\\/(.*?)xtagendz/g,'</$1>');return html;},_encodeCode:function _encodeCode(html){var $wrapper=this.utils.buildWrapper(html);$wrapper.find('pre code, pre, code').each(this._encodeNode.bind(this));return this.utils.getWrapperHtml($wrapper);},_encodeNode:function _encodeNode(node){var first=node.firstChild;var html=node.innerHTML;if(node.tagName==='PRE'&&first&&first.tagName==='CODE'){return;}html=html.replace(/xtagstartz/g,'<');html=html.replace(/xtagendz/g,'>');var encoded=this.decodeEntities(html);node.textContent=this._encodeNodeHtml(encoded);},_encodeNodeHtml:function _encodeNodeHtml(html){html=html.replace(/&nbsp;/g,' ').replace(/<br\\s?\\/?>/g,'\\n');html=this.opts.preSpaces?html.replace(/\\t/g,new Array(this.opts.preSpaces+1).join(' ')):html;return html;},encodeEntities:function encodeEntities(str){str=this.decodeEntities(str);str=str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/\"/g,'&quot;');return str;},encodePhpCode:function encodePhpCode(html){html=html.replace('<?php','&lt;?php');html=html.replace('<?','&lt;?');html=html.replace('?>','?&gt;');return html;},decodeEntities:function decodeEntities(str){return String(str).replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&quot;/g,'\"').replace(/&amp;/g,'&');},// store / restore\nstoreComponents:function storeComponents(html){var matched=this.utils.getElementsFromHtml(html,'figure','table');return this._storeMatched(html,matched,'Components','figure');},restoreComponents:function restoreComponents(html){return this._restoreMatched(html,'Components','figure');},storeLinks:function storeLinks(html){var matched=this.utils.getElementsFromHtml(html,'a');return this._storeMatched(html,matched,'Links','a');},storeImages:function storeImages(html){var matched=this.utils.getElementsFromHtml(html,'img');return this._storeMatched(html,matched,'Images','img');},restoreLinks:function restoreLinks(html){return this._restoreMatched(html,'Links','a');},restoreImages:function restoreImages(html){return this._restoreMatched(html,'Images','img');},// PRIVATE\n// clean\n_cleanWrapped:function _cleanWrapped(html){html=html.replace(new RegExp('<p><figure([\\\\w\\\\W]*?)</figure></p>','gi'),'<figure$1</figure>');return html;},_cleanGDocs:function _cleanGDocs(html){// remove google docs markers\nhtml=html.replace(/<b\\sid=\"internal-source-marker(.*?)\">([\\w\\W]*?)<\\/b>/gi,\"$2\");html=html.replace(/<b(.*?)id=\"docs-internal-guid(.*?)\">([\\w\\W]*?)<\\/b>/gi,\"$3\");html=html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?bold|font-weight:\\s?bold;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi,'<b><i>$2</i></b>');html=html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?600|font-weight:\\s?600;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi,'<b><i>$2</i></b>');html=html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?700|font-weight:\\s?700;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi,'<b><i>$2</i></b>');html=html.replace(/<span[^>]*font-style:\\s?italic[^>]*>([\\w\\W]*?)<\\/span>/gi,'<i>$1</i>');html=html.replace(/<span[^>]*font-weight:\\s?bold[^>]*>([\\w\\W]*?)<\\/span>/gi,'<b>$1</b>');html=html.replace(/<span[^>]*font-weight:\\s?700[^>]*>([\\w\\W]*?)<\\/span>/gi,'<b>$1</b>');html=html.replace(/<span[^>]*font-weight:\\s?600[^>]*>([\\w\\W]*?)<\\/span>/gi,'<b>$1</b>');return html;},_cleanMsWord:function _cleanMsWord(html){html=html.replace(/<!--[\\s\\S]+?-->/gi,'');html=html.replace(/<(!|script[^>]*>.*?<\\/script(?=[>\\s])|\\/?(\\?xml(:\\w+)?|img|meta|link|style|\\w:\\w+)(?=[\\s\\/>]))[^>]*>/gi,'');html=html.replace(/<(\\/?)s>/gi,\"<$1strike>\");html=html.replace(/&nbsp;/gi,' ');html=html.replace(/<span\\s+style\\s*=\\s*\"\\s*mso-spacerun\\s*:\\s*yes\\s*;?\\s*\"\\s*>([\\s\\u00a0]*)<\\/span>/gi,function(str,spaces){return spaces.length>0?spaces.replace(/./,\" \").slice(Math.floor(spaces.length/2)).split(\"\").join(\"\\xA0\"):'';});// build wrapper\nvar $wrapper=this.utils.buildWrapper(html);// footnote fix\n$wrapper.find('.MsoFootnoteText').each(function(node){var $node=$R.dom(node);var $parent=$node.parent();if($parent.length!==0&&$parent.attr('style').search(/mso-element:footnote/)!==-1){$node.find('a').attr('id','_'+$parent.attr('id'));}});$wrapper.find('.MsoFootnoteReference').each(function(node){var $node=$R.dom(node);var $parent=$node.parent();if($parent.length!==0&&$parent.get().tagName==='A'){$parent.attr('id',$parent.attr('name'));}});// build lists\n$wrapper.find('p').each(function(node){var $node=$R.dom(node);var str=$node.attr('style');var matches=/mso-list:\\w+ \\w+([0-9]+)/.exec(str);if(matches){$node.attr('data-listLevel',parseInt(matches[1],10));}});// parse Lists\nthis._parseWordLists($wrapper);$wrapper.find('[align]').removeAttr('align');$wrapper.find('[name]').removeAttr('name');$wrapper.find('span').each(function(node){var $node=$R.dom(node);var str=$node.attr('style');var matches=/mso-list:Ignore/.exec(str);if(matches)$node.remove();else $node.unwrap();});$wrapper.find('[style]').removeAttr('style');$wrapper.find(\"[class^='Mso']\").removeAttr('class');$wrapper.find('a').filter(function(node){return!node.hasAttribute('href');}).unwrap();// get wrapper\nhtml=this.utils.getWrapperHtml($wrapper);html=html.replace(/<p[^>]*><\\/p>/gi,'');html=html.replace(/<li>·/gi,'<li>');html=html.trim();// remove spaces between\nhtml=html.replace(/\\/(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)>\\s+<(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)/gi,'/$1>\\n<$2');var result='';var lines=html.split(/\\n/);for(var i=0;i<lines.length;i++){var space=lines[i]!==''&&lines[i].search(/>$/)===-1?' ':'\\n';result+=lines[i]+space;}return result;},_parseWordLists:function _parseWordLists($wrapper){var lastLevel=0;var $item=null;var $list=null;var $listChild=null;$wrapper.find('p').each(function(node){var $node=$R.dom(node);var level=$node.attr('data-listLevel');if(level===null&&$node.hasClass('MsoListParagraphCxSpMiddle')){level=1;}if(level!==null){var txt=$node.text();var listTag=/^\\s*\\w+\\./.test(txt)?'<ol></ol>':'<ul></ul>';// new parent list\nif($node.hasClass('MsoListParagraphCxSpFirst')||$node.hasClass('MsoNormal')){$list=$R.dom(listTag);$node.before($list);}// new child list\nelse if(level>lastLevel&&lastLevel!==0){$listChild=$R.dom(listTag);$item.append($listChild);$list=$listChild;}// level up\nif(level<lastLevel){var len=lastLevel-level+1;for(var i=0;i<len;i++){$list=$list.parent();}}// create item\n$node.find('span').first().unwrap();$item=$R.dom('<li>'+$node.html().trim()+'</li>');if($list===null){$node.before(listTag);$list=$node.prev();}// append\n$list.append($item);$node.remove();lastLevel=level;}else{$list=null;lastLevel=0;}});},// is\n_isSpacedEmpty:function _isSpacedEmpty(html){return html.search(this.reSpacedEmpty)!==-1;},_isParagraphEmpty:function _isParagraphEmpty(html){return html.search(/^<p><\\/p>$/i)!==-1;},_isHtmlMsWord:function _isHtmlMsWord(html){return html.match(/class=\"?Mso|style=\"[^\"]*\\bmso-|style='[^'']*\\bmso-|w:WordDocument/i);},// set\n_setSpanAttr:function _setSpanAttr(html){var $wrapper=this.utils.buildWrapper(html);$wrapper.find('span').attr('data-redactor-span',true);return this.utils.getWrapperHtml($wrapper);},_setStyleCache:function _setStyleCache(html){var $wrapper=this.utils.buildWrapper(html);$wrapper.find('[style]').each(function(node){var $el=$R.dom(node);$el.attr('data-redactor-style-cache',$el.attr('style'));});return this.utils.getWrapperHtml($wrapper);},_setPreClass:function _setPreClass(html){var $wrapper=this.utils.buildWrapper(html);$wrapper.find('pre').addClass(this.opts.preClass);return this.utils.getWrapperHtml($wrapper);},_setLinkNofollow:function _setLinkNofollow(html){var $wrapper=this.utils.buildWrapper(html);$wrapper.find('a').attr('rel','nofollow');return this.utils.getWrapperHtml($wrapper);},// replace\n_replaceScriptTag:function _replaceScriptTag(html){return html.replace(this.reScriptTag,'<script class=\"redactor-script-tag\" $1>$2</script>');},_unreplaceScriptTag:function _unreplaceScriptTag(html){return html.replace(/<script class=\"redactor-script-tag\"(.*?[^>]?)>([\\w\\W]*?)<\\/script>/gi,'<script$1>$2</script>');},_replaceNlToBr:function _replaceNlToBr(html){return html.replace(/\\n/g,'<br />');},// remove\n_removeScriptTag:function _removeScriptTag(html){return html.replace(this.reScriptTag,'');},// private\n_storeMatched:function _storeMatched(html,matched,stored,name){this['stored'+stored]=[];if(matched){for(var i=0;i<matched.length;i++){this['stored'+stored][i]=matched[i];html=html.replace(matched[i],'####'+name+i+'####');}}return html;},_restoreMatched:function _restoreMatched(html,stored,name){if(this['stored'+stored]){for(var i=0;i<this['stored'+stored].length;i++){html=html.replace('####'+name+i+'####',this['stored'+stored][i]);}}return html;}});$R.add('class','cleaner.figure',{init:function init(app){this.app=app;this.opts=app.opts;this.utils=app.utils;this.detector=app.detector;},// public\nconvert:function convert(html,rules){var $wrapper=this.utils.buildWrapper(html);// convert\n$wrapper.find('img').each(this._convertImage.bind(this));$wrapper.find('hr').each(this._convertLine.bind(this));$wrapper.find('iframe').each(this._convertIframe.bind(this));$wrapper.find('table').each(this._convertTable.bind(this));$wrapper.find('form').each(this._convertForm.bind(this));$wrapper.find('figure pre').each(this._convertCode.bind(this));// variables\n$wrapper.find('[data-redactor-type=variable]').addClass('redactor-component');// widgets\n$wrapper.find('figure').not('.redactor-component, .redactor-figure-code').each(this._convertWidget.bind(this));// contenteditable\n$wrapper.find('figure pre').each(this._setContenteditableCode.bind(this));$wrapper.find('.redactor-component, .non-editable').attr('contenteditable',false);if(this.detector.isIe()){$wrapper.find('[data-redactor-type=table]').removeAttr('contenteditable');}$wrapper.find('figcaption, td, th').attr('contenteditable',true);$wrapper.find('.redactor-component, figcaption').attr('tabindex','-1');// extra rules\nthis._acceptExtraRules($wrapper,rules);return this.utils.getWrapperHtml($wrapper);},unconvert:function unconvert(html,rules){html=html.replace(/<\\/([^>]+)><div data-redactor-tag/g,'</$1>\\n<div data-redactor-tag');html=html.replace(/<\\/([^>]+)><p/g,'</$1>\\n<p');var $wrapper=this.utils.buildWrapper(html);// contenteditable\n$wrapper.find('th, td, figcaption, figure, pre, code, .redactor-component').removeAttr('contenteditable tabindex');// remove class\n$wrapper.find('figure').removeClass('redactor-component redactor-component-active redactor-uploaded-figure');// unconvert\n$wrapper.find('[data-redactor-type=variable]').removeClass('redactor-component redactor-component-active');$wrapper.find('figure[data-redactor-type=line]').unwrap();$wrapper.find('figure[data-redactor-type=widget]').each(this._unconvertWidget.bind(this));$wrapper.find('figure[data-redactor-type=form]').each(this._unconvertForm.bind(this));$wrapper.find('figure[data-redactor-type=table]').each(this._unconvertTable.bind(this));$wrapper.find('figure[data-redactor-type=image]').removeAttr('rel').each(this._unconvertImages.bind(this));$wrapper.find('img').removeAttr('data-redactor-type').removeClass('redactor-component');$wrapper.find('.non-editable').removeAttr('contenteditable');// remove types\n$wrapper.find('figure').each(this._removeTypes.bind(this));// remove caret\n$wrapper.find('span.redactor-component-caret').remove();// break div\n$wrapper=this._unconvertBreakTag($wrapper);// extra rules\nthis._acceptExtraRules($wrapper,rules);html=this.utils.getWrapperHtml($wrapper);html=html.replace(/<br\\s?\\/?>$/,'');html=html.replace(/<br\\s?\\/?><\\/(td|th)>/,'</$1>');return html;},// private\n_convertImage:function _convertImage(node){var $node=$R.dom(node);if(this._isNonEditable($node))return;// set id\nif(this.opts.imageObserve&&!$node.attr('data-image')){$node.attr('data-image',this.utils.getRandomId());}var $link=$node.closest('a');var $figure=$node.closest('figure');var isImage=$figure.children().not('a, img, br, figcaption').length===0;if(!isImage)return;if($figure.length===0){var $parent=$link.length!==0?$link.closest('p'):$node.closest('p');if(this.opts.imageFigure===false&&$parent.length!==0){var $el=this.utils.replaceToTag($parent,'figure');$figure=$el;$figure.addClass('redactor-replace-figure');}else{if($parent.length!==0){$parent.unwrap();}$figure=$link.length!==0?$link.wrap('<figure>'):$node.wrap('<figure>');}}else{if($figure.hasClass('redactor-uploaded-figure')){$figure.removeClass('redactor-uploaded-figure');}else{$figure.addClass('redactor-keep-figure');}}this._setFigure($figure,'image');},_convertTable:function _convertTable(node){if(this._isNonEditable(node))return;var $figure=this._wrapFigure(node);this._setFigure($figure,'table');},_convertLine:function _convertLine(node){if(this._isNonEditable(node))return;var $figure=this._wrapFigure(node);this._setFigure($figure,'line');},_convertForm:function _convertForm(node){if(this._isNonEditable(node))return;var $figure=this.utils.replaceToTag(node,'figure');this._setFigure($figure,'form');},_convertIframe:function _convertIframe(node){if(this._isNonEditable(node))return;var $node=$R.dom(node);if($node.closest('.redactor-component').length!==0)return;var src=node.getAttribute('src');var isVideo=src&&(src.match(this.opts.regex.youtube)||src.match(this.opts.regex.vimeo));var $figure=this._wrapFigure(node);if(isVideo){this._setFigure($figure,'video');}},_convertCode:function _convertCode(node){if(this._isNonEditable(node))return;var $figure=this._wrapFigure(node);this._setFigure($figure,'code');},_convertWidget:function _convertWidget(node){if(this._isNonEditable(node))return;var $node=$R.dom(node);$node.addClass('redactor-component');$node.attr('data-redactor-type','widget');$node.attr('data-widget-code',encodeURI(node.innerHTML.trim()));},// unconvert\n_unconvertBreakTag:function _unconvertBreakTag($wrapper){$wrapper.find('[data-redactor-tag]').each(function(node){var $node=$R.dom(node);$node.removeAttr('data-redactor-tag');if(this.utils.isEmptyHtml($node.html())){$node.unwrap();}else if(node.lastChild&&node.lastChild.tagName==='BR'){$node.unwrap();}else{var $next=$node.nextElement();if($next.length!==0&&$next.attr('data-redactor-tag')){node.appendChild(document.createElement('br'));}$node.unwrap();}}.bind(this));return $wrapper;},_unconvertForm:function _unconvertForm(node){this.utils.replaceToTag(node,'form');},_unconvertTable:function _unconvertTable(node){var $node=$R.dom(node);$node.unwrap();},_unconvertWidget:function _unconvertWidget(node){var $node=$R.dom(node);$node.html(decodeURI($node.attr('data-widget-code')));$node.removeAttr('data-widget-code');},_unconvertImages:function _unconvertImages(node){var $node=$R.dom(node);$node.removeClass('redactor-component');var isList=$node.closest('li').length!==0;var isTable=$node.closest('table').length!==0;var hasFigcaption=$node.find('figcaption').length!==0;var style=$node.attr('style');var hasStyle=!(style===null||style==='');var hasClass=$node.attr('class')!=='';if(isList||isTable&&!hasFigcaption&&!hasStyle&&!hasClass){$node.unwrap();}},_removeTypes:function _removeTypes(node){var $node=$R.dom(node);var type=$node.attr('data-redactor-type');var removed=['image','widget','line','video','code','form','table'];if(type&&removed.indexOf(type)!==-1){$node.removeAttr('data-redactor-type');}// keep figure\nif($node.hasClass('redactor-keep-figure')){$node.removeClass('redactor-keep-figure');}// unwrap figure\nelse if(type==='image'&&this.opts.imageFigure===false){var hasFigcaption=$node.find('figcaption').length!==0;if(!hasFigcaption){// replace\nif($node.hasClass('redactor-replace-figure')){$node.removeClass('redactor-replace-figure');this.utils.replaceToTag($node,'p');}else{$node.unwrap();}}}$node.removeClass('redactor-replace-figure');},// wrap\n_wrapFigure:function _wrapFigure(node){var $node=$R.dom(node);var $figure=$node.closest('figure');return $figure.length===0?$node.wrap('<figure>'):$figure;},// set\n_setFigure:function _setFigure($figure,type){$figure.addClass('redactor-component');$figure.attr('data-redactor-type',type);},_setContenteditableCode:function _setContenteditableCode(node){if(this._isNonEditable(node))return;var $node=$R.dom(node);var $code=$node.children('code').first();var $el=$code.length!==0?$code:$node;$el.attr('contenteditable',true).attr('tabindex','-1');},// utils\n_acceptExtraRules:function _acceptExtraRules($wrapper,rules){for(var key in rules){if(typeof rules[key]==='function'){rules[key]($wrapper);}}},_isNonEditable:function _isNonEditable(node){return $R.dom(node).closest('.non-editable').length!==0;}});$R.add('class','cleaner.paragraphize',{init:function init(app){this.app=app;this.opts=app.opts;this.utils=app.utils;this.cleaner=app.cleaner;this.element=app.element;// local\nthis.stored=[];this.remStart='#####replace';this.remEnd='#####';this.paragraphizeTags=['table','div','pre','form','ul','ol','h1','h2','h3','h4','h5','h6','dl','blockquote','figcaption','address','section','header','footer','aside','article','object','style','script','iframe','select','input','textarea','button','option','map','area','math','hr','fieldset','legend','hgroup','nav','figure','details','menu','summary','p'];},// public\nconvert:function convert(html){var value=this._isConverted(html);value=value===true?this._convert(html):value;value=this._convertTable(value);return value;},// private\n_convert:function _convert(html,tablemarkup){// build markup tag\nvar tag=this.opts.breakline||tablemarkup?'sdivtag':this.opts.markup;var attr=tablemarkup?'tbr':'br';// store\nhtml=this._storeTags(html);var storedComments=[];html=this.cleaner.storeComments(html,storedComments);// trim\nhtml=html.trim();html=this._trimLinks(html);// replace new lines\nhtml=html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)$/g,'');html=html.replace(/xparagraphmarkerz$/g,'');html=html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)/g,'\\n');html=html.replace(/xparagraphmarkerz/g,'\\n');if(this.opts.breakline){html=html.replace(/<br\\s?\\/?>(?:\\r\\n|\\r|\\n)/gi,'xbreakmarkerz\\n');html=html.replace(/<br\\s?\\/?>/gi,'xbreakmarkerz\\n');html=html.replace(/xbreakmarkerz\\n<\\//gi,'xbreakmarkerz</');}else{html=html.replace(/[\\n]+/g,\"\\n\");}// wrap to tag\nvar str='';var arr=html.split(\"\\n\");for(var i=0;i<arr.length;i++){str+='<'+tag+'>'+arr[i]+'</'+tag+'>\\n';}html=str.replace(/\\n$/,'');// clean\nhtml=html.replace(new RegExp('<'+tag+'>\\\\s+#####','gi'),'#####');html=html.replace(new RegExp('<'+tag+'>#####','gi'),'#####');html=html.replace(new RegExp('#####</'+tag+'>','gi'),'#####');// replace marker\nhtml=this.opts.breakline?html.replace(/xbreakmarkerz/gi,\"<br>\"):html;// restore\nhtml=this._restoreTags(html);html=this.cleaner.restoreComments(html,storedComments);// remove empty\nif(this.opts.breakline){html=html.replace(new RegExp('<'+tag+'></'+tag+'>','gi'),'<'+tag+'><br></'+tag+'>');}else{//html = html.replace(new RegExp('<' + tag + '><br\\\\s?/?></' + tag + '>', 'gi'), '');\n//html = html.replace(new RegExp('<' + tag + '></' + tag + '>', 'gi'), '');\n}// clean restored\nhtml=html.replace(new RegExp('<sdivtag>','gi'),'<div data-redactor-tag=\"'+attr+'\">');html=html.replace(new RegExp('sdivtag','gi'),'div');html=html.replace(/<\\/([^>]+)><div data-redactor-tag/g,'</$1>\\n<div data-redactor-tag');return html;},_convertTable:function _convertTable(html){var $wrapper=this.utils.buildWrapper(html);$wrapper.find('td, th').each(this._convertCell.bind(this));html=this.utils.getWrapperHtml($wrapper);return html;},_convertCell:function _convertCell(node){var $node=$R.dom(node);this.stored=[];var code=this._convert($node.html(),true);$node.html(code);},_storeTags:function _storeTags(html){var self=this;var $wrapper=this.utils.buildWrapper(html);$wrapper.find(this.paragraphizeTags.join(', ')).each(function(node,i){var replacement=document.createTextNode(self.remStart+i+self.remEnd+'xparagraphmarkerz');//  + \"\\n\"\nself.stored.push(node.outerHTML);node.parentNode.replaceChild(replacement,node);});return this.utils.getWrapperHtml($wrapper);},_restoreTags:function _restoreTags(html){for(var i=0;i<this.stored.length;i++){this.stored[i]=this.stored[i].replace(/\\$/g,'&#36;');html=html.replace(this.remStart+i+this.remEnd,this.stored[i]);}return html;},_trimLinks:function _trimLinks(html){var $wrapper=this.utils.buildWrapper(html);$wrapper.find('a').each(this._trimLink.bind(this));html=this.utils.getWrapperHtml($wrapper);return html;},_trimLink:function _trimLink(node){var $node=$R.dom(node);$node.html($node.html().trim());},_isConverted:function _isConverted(html){if(this._isDisabled(html))return html;else if(this._isEmptyHtml(html))return this.opts.emptyHtml;else return true;},_isDisabled:function _isDisabled(){return this.opts.paragraphize===false||this.element.isType('inline');},_isEmptyHtml:function _isEmptyHtml(html){return html===''||html==='<p></p>'||html==='<div></div>';}});$R.add('service','detector',{init:function init(app){this.app=app;// local\nthis.userAgent=navigator.userAgent.toLowerCase();},isWebkit:function isWebkit(){return /webkit/.test(this.userAgent);},isFirefox:function isFirefox(){return this.userAgent.indexOf('firefox')>-1;},isIe:function isIe(v){if(document.documentMode||/Edge/.test(navigator.userAgent))return'edge';var ie;ie=RegExp('msie'+(!isNaN(v)?'\\\\s'+v:''),'i').test(navigator.userAgent);if(!ie)ie=!!navigator.userAgent.match(/Trident.*rv[ :]*11\\./);return ie;},isMobile:function isMobile(){return /(iPhone|iPod|Android)/.test(navigator.userAgent);},isDesktop:function isDesktop(){return!/(iPhone|iPod|iPad|Android)/.test(navigator.userAgent);},isIpad:function isIpad(){return /iPad/.test(navigator.userAgent);}});$R.add('service','offset',{init:function init(app){this.app=app;},get:function get(el,trimmed){var offset={start:0,end:0};var node=this.utils.getNode(el);if(!node)return false;var isEditor=this.editor.isEditor(node);var isIn=isEditor?true:this.selection.isIn(node);var range=this.selection.getRange();if(!isEditor&&!isIn){offset=false;}else if(this.selection.is()&&isIn){var $startNode=$R.dom(range.startContainer);var fix=$startNode.hasClass('redactor-component')?range.startOffset:0;var clonedRange=range.cloneRange();clonedRange.selectNodeContents(node);clonedRange.setEnd(range.startContainer,range.startOffset);var selection=this._getString(range,trimmed);offset.start=this._getString(clonedRange,trimmed).length-fix;offset.end=offset.start+selection.length+fix;}return offset;},set:function set(offset,el){if(this._setComponentOffset(el))return;this.component.clearActive();var node=this.utils.getNode(el);if(!node)return;var size=this.size(node);var charIndex=0,range=document.createRange();offset.end=offset.end>size?size:offset.end;range.setStart(node,0);range.collapse(true);var nodeStack=[node],foundStart=false,stop=false;while(!stop&&(node=nodeStack.pop())){if(node.nodeType==3){var nextCharIndex=charIndex+node.length;if(!foundStart&&!this._isFigcaptionNext(node)&&offset.start>=charIndex&&offset.start<=nextCharIndex){range.setStart(node,offset.start-charIndex);foundStart=true;}if(foundStart&&offset.end>=charIndex&&offset.end<=nextCharIndex){range.setEnd(node,offset.end-charIndex);stop=true;}charIndex=nextCharIndex;}else{var i=node.childNodes.length;while(i--){nodeStack.push(node.childNodes[i]);}}}this.selection.setRange(range);},size:function size(el,trimmed){var node=this.utils.getNode(el);if(node){var range=document.createRange();var clonedRange=range.cloneRange();clonedRange.selectNodeContents(node);return this._getString(clonedRange,trimmed).length;}return 0;},// private\n_getString:function _getString(obj,trimmed){var str=obj.toString();str=this.editor.isEmpty()?str.replace(/\\uFEFF/g,''):str;str=trimmed?str.trim():str;return str;},_setComponentOffset:function _setComponentOffset(el){return this.component.isNonEditable(el)?this.component.setActive(el):false;},_isFigcaptionNext:function _isFigcaptionNext(node){var next=node.nextSibling;return node.nodeValue.trim()===''&&next&&next.tagName==='FIGCAPTION';}});$R.add('service','inspector',{init:function init(app){this.app=app;},// parse\nparse:function parse(el){return $R.create('inspector.parser',this.app,this,el);},// text detection\nisText:function isText(el){if(typeof el==='string'&&!/^\\s*<(\\w+|!)[^>]*>/.test(el)){return true;}var node=$R.dom(el).get();return node&&node.nodeType===3;//  && !this.selection.getBlock(el)\n},// tag detection\nisInlineTag:function isInlineTag(tag,extend){var tags=this._extendTags(this.opts.inlineTags,extend);return this._isTag(tag)&&tags.indexOf(tag.toLowerCase())!==-1;},isBlockTag:function isBlockTag(tag,extend){var tags=this._extendTags(this.opts.blockTags,extend);return this._isTag(tag)&&tags.indexOf(tag.toLowerCase())!==-1;},isTableCellTag:function isTableCellTag(tag){return['td','th'].indexOf(tag.toLowerCase())!==-1;},isHeadingTag:function isHeadingTag(tag){return['h1','h2','h3','h4','h5','h6'].indexOf(tag.toLowerCase())!==-1;},_isTag:function _isTag(tag){return tag!==undefined&&tag;},_extendTags:function _extendTags(tags,extend){tags=tags.concat(tags);if(extend){for(var i=0;i<extend.length;i++){tags.push(extend[i]);}}return tags;}});$R.add('class','inspector.parser',{init:function init(app,inspector,el){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.utils=app.utils;this.editor=app.editor;this.selection=app.selection;this.inspector=inspector;// local\nthis.el=el;this.$el=$R.dom(this.el,'.redactor-in-'+this.uuid);this.node=this.$el.get();// comment node\nif(this.node&&this.node.nodeType===8){this.node=false;}this.$component=this.$el.closest('.redactor-component','.redactor-in');},// is\nisEditor:function isEditor(){return this.node===this.editor.getElement().get();},isInEditor:function isInEditor(){return this.$el.parents('.redactor-in-'+this.uuid).length!==0;},isComponent:function isComponent(){return this.$component.length!==0;},isComponentType:function isComponentType(type){return this.getComponentType()===type;},isComponentActive:function isComponentActive(){return this.isComponent()&&this.$component.hasClass('redactor-component-active');},isComponentEditable:function isComponentEditable(){var types=['code','table'];var type=this.getComponentType();return this.isComponent()&&types.indexOf(type)!==-1;},isFigcaption:function isFigcaption(){return this.getFigcaption();},isPre:function isPre(){return this.getPre();},isCode:function isCode(){var $code=this.$el.closest('code');var $parent=$code.parent('pre');return $code.length!==0&&$parent.length===0;},isList:function isList(){return this.getList();},isFirstListItem:function isFirstListItem(){return this._getLastOrFirstListItem('first');},isLastListItem:function isLastListItem(){return this._getLastOrFirstListItem('last');},isFirstTableCell:function isFirstTableCell(){return this._getLastOrFirstTableCell('first');},isLastTableCell:function isLastTableCell(){return this._getLastOrFirstTableCell('last');},isTable:function isTable(){return this.isComponentType('table')||this.getTable();},isHeading:function isHeading(){return this.getHeading();},isBlockquote:function isBlockquote(){return this.getBlockquote();},isDl:function isDl(){return this.getDl();},isParagraph:function isParagraph(){return this.getParagraph();},isLink:function isLink(){return this.getLink();},isFile:function isFile(){return this.getFile();},isText:function isText(){return this.inspector.isText(this.el);},isInline:function isInline(){var tags=this.opts.inlineTags;return this.isElement()?tags.indexOf(this.node.tagName.toLowerCase())!==-1:false;},isBlock:function isBlock(){var tags=this.opts.blockTags;return this.isElement()?tags.indexOf(this.node.tagName.toLowerCase())!==-1:false;},isElement:function isElement(){return this.node&&this.node.nodeType&&this.node.nodeType!==3;},// has\nhasParent:function hasParent(tags){return this.$el.closest(tags.join(',')).length!==0;},// get\ngetNode:function getNode(){return this.node;},getTag:function getTag(){return this.isElement()?this.node.tagName.toLowerCase():false;},getComponent:function getComponent(){return this.isComponent()?this.$component.get():false;},getComponentType:function getComponentType(){return this.isComponent()?this.$component.attr('data-redactor-type'):false;},getFirstNode:function getFirstNode(){return this.utils.getFirstNode(this.node);},getLastNode:function getLastNode(){return this.utils.getLastNode(this.node);},getFirstElement:function getFirstElement(){return this.utils.getFirstElement(this.node);},getLastElement:function getLastElement(){return this.utils.getLastElement(this.node);},getFigcaption:function getFigcaption(){return this._getClosestNode('figcaption');},getPre:function getPre(){return this._getClosestNode('pre');},getCode:function getCode(){return this._getClosestNode('code');},getList:function getList(){return this._getClosestNode('ul, ol');},getParentList:function getParentList(){return this._getClosestUpNode('ul, ol');},getListItem:function getListItem(){return this._getClosestNode('li');},getTable:function getTable(){if(this.getComponentType('table')){return this.$component.find('table').get();}else{return this._getClosestNode('table');}},getTableCell:function getTableCell(){var $td=this.$el.closest('td, th');return $td.length!==0?$td.get():false;},getComponentCodeElement:function getComponentCodeElement(){return this.isComponentType('code')?this.$component.find('pre code, pre').last().get():false;},getImageElement:function getImageElement(){return this.isComponentType('image')?this.$component.find('img').get():false;},getParagraph:function getParagraph(){return this._getClosestNode('p');},getHeading:function getHeading(){return this._getClosestNode('h1, h2, h3, h4, h5, h6');},getDl:function getDl(){return this._getClosestNode('dl');},getBlockquote:function getBlockquote(){return this._getClosestNode('blockquote');},getLink:function getLink(){var isComponent=this.isComponent()&&!this.isFigcaption();var isTable=this.isComponentType('table');if(isTable||!isComponent){var $el=this._getClosestElement('a');return $el&&!$el.attr('data-file')?$el.get():false;}return false;},getFile:function getFile(){var isComponent=this.isComponent();var isTable=this.isComponentType('table');if(isTable||!isComponent){var $el=this._getClosestElement('a');return $el&&$el.attr('data-file')?$el.get():false;}return false;},// find\nfindFirstNode:function findFirstNode(selector){return this.$el.find(selector).first().get();},findLastNode:function findLastNode(selector){return this.$el.find(selector).last().get();},// private\n_getLastOrFirstListItem:function _getLastOrFirstListItem(type){var list=this.getList();var tag=this.getTag();if(list&&tag==='li'){var item=$R.dom(list).find('li')[type]().get();if(item&&this.node===item){return true;}}return false;},_getLastOrFirstTableCell:function _getLastOrFirstTableCell(type){var table=this.getTable();var tag=this.getTag();if(table&&(tag==='td'||tag==='th')){var item=$R.dom(table).find('td, th')[type]().get();if(item&&this.node===item){return true;}}return false;},_getClosestUpNode:function _getClosestUpNode(selector){var $el=this.$el.parents(selector,'.redactor-in-'+this.uuid).last();return $el.length!==0?$el.get():false;},_getClosestNode:function _getClosestNode(selector){var $el=this.$el.closest(selector,'.redactor-in-'+this.uuid);return $el.length!==0?$el.get():false;},_getClosestElement:function _getClosestElement(selector){var $el=this.$el.closest(selector,'.redactor-in-'+this.uuid);return $el.length!==0?$el:false;}});$R.add('service','marker',{init:function init(app){this.app=app;},build:function build(pos,html){var marker=document.createElement('span');marker.id='selection-marker-'+this._getPos(pos);marker.className='redactor-selection-marker';marker.innerHTML=this.opts.markerChar;return html?marker.outerHTML:marker;},buildHtml:function buildHtml(pos){return this.build(pos,true);},insert:function insert(side){this.remove();var atStart=side!=='both'&&(side==='start'||this.selection.isCollapsed());if(!this.selection.is())this.editor.focus();var range=this.selection.getRange();if(range){var start=this.build('start');var end=this.build('end');var cloned=range.cloneRange();if(!atStart){cloned.collapse(false);cloned.insertNode(end);}cloned.setStart(range.startContainer,range.startOffset);cloned.collapse(true);cloned.insertNode(start);range.setStartAfter(start);if(!atStart){range.setEndBefore(end);}this.selection.setRange(range);return start;}},find:function find(pos,$context){var $editor=this.editor.getElement();var $marker=($context||$editor).find('span#selection-marker-'+this._getPos(pos));return $marker.length!==0?$marker.get():false;},restore:function restore(){var start=this.find('start');var end=this.find('end');var range=this.selection.getRange();if(!range||!this.selection.is()){this.editor.focus();range=document.createRange();}if(start){var prev=end?end.previousSibling:false;var next=start.nextSibling;next=next&&next.nodeType===3&&next.textContent.replace(/[\\n\\t]/g,'')===''?false:next;if(!end){if(next){range.selectNodeContents(next);range.collapse(true);}else{this._restoreInject(range,start);}}else if(next&&next.id==='selection-marker-end'){this._restoreInject(range,start);}else{if(prev&&next){range.selectNodeContents(prev);range.collapse(false);range.setStart(next,0);}else if(prev&&!next){range.selectNodeContents(prev);range.collapse(false);range.setStartAfter(start);}else{range.setStartAfter(start);range.setEndBefore(end);}}this.selection.setRange(range);if(start)start.parentNode.removeChild(start);if(end)end.parentNode.removeChild(end);}},remove:function remove(){var start=this.find('start');var end=this.find('end');if(start)start.parentNode.removeChild(start);if(end)end.parentNode.removeChild(end);},// private\n_getPos:function _getPos(pos){return pos===undefined?'start':pos;},_restoreInject:function _restoreInject(range,start){var textNode=this.utils.createInvisibleChar();$R.dom(start).after(textNode);range.selectNodeContents(textNode);range.collapse(false);}});$R.add('service','component',{init:function init(app){this.app=app;// local\nthis.activeClass='redactor-component-active';},create:function create(type,el){return $R.create(type+'.component',this.app,el);},build:function build(el){var $el=$R.dom(el);var component;var type=$el.attr('data-redactor-type');if(type){component=this.create(type,el);}return component?component:el;},remove:function remove(el,caret){var $component=$R.dom(el).closest('.redactor-component');var type=$component.attr('data-redactor-type');var current=$component.parent();var data=this.inspector.parse(current);var prev=this.utils.findSiblings($component,'prev');var next=this.utils.findSiblings($component,'next');var stop=this.app.broadcast(type+'.delete',$component);if(stop!==false){$component.remove();// callback\nthis.app.broadcast(type+'.deleted',$component);this.app.broadcast('contextbar.close');this.app.broadcast('imageresizer.stop');if(caret!==false){var cell=data.getTableCell();if(cell&&this.utils.isEmptyHtml(cell.innerHTML)){this.caret.setStart(cell);}else if(next)this.caret.setStart(next);else if(prev)this.caret.setEnd(prev);else{this.editor.startFocus();}}// is empty\nif(this.editor.isEmpty()){this.editor.setEmpty();this.editor.startFocus();this.app.broadcast('empty');}}},isNonEditable:function isNonEditable(el){var data=this.inspector.parse(el);return data.isComponent()&&!data.isComponentEditable();},isActive:function isActive(el){var $component;if(el){var data=this.inspector.parse(el);$component=$R.dom(data.getComponent());return $component.hasClass(this.activeClass);}else{$component=this._find();return $component.length!==0;}},getActive:function getActive(dom){var $component=this._find();return $component.length!==0?dom?$component:$component.get():false;},setActive:function setActive(el){this.clearActive();this.editor.focus();var data=this.inspector.parse(el);var component=data.getComponent();var $component=$R.dom(component);if(!data.isFigcaption()){var $caret=$component.find('.redactor-component-caret');if($caret.length===0){$caret=this._buildCaret();$component.prepend($caret);}this.caret.setAtStart($caret.get());}$component.addClass(this.activeClass);},clearActive:function clearActive(){var $component=this._find();$component.removeClass(this.activeClass);$component.find('.redactor-component-caret').remove();this.app.broadcast('imageresizer.stop');},setOnEvent:function setOnEvent(e,contextmenu){this.clearActive();var data=this.inspector.parse(e.target);if(data.isFigcaption()||data.isComponentEditable()){return;}// component\nif(data.isComponent()){this.setActive(e.target);if(contextmenu!==true)e.preventDefault();}},executeScripts:function executeScripts(scripts){if(scripts===undefined){var $editor=this.editor.getElement();var scripts=$editor.find('[data-redactor-type]').find(\"script\").getAll();this.executeScripts.call(this,scripts);}else{for(var i=0;i<scripts.length;i++){if(scripts[i].src!==''){var src=scripts[i].src;this.$doc.find('head script[src=\"'+src+'\"]').remove();var $script=$R.dom('<script>');$script.attr('src',src);$script.attr('async defer');$script.get().onload=function(){if(src.search('instagram')!==-1)window.instgrm.Embeds.process();this.executeScripts(scripts.slice(i+1));}.bind(this);var head=document.getElementsByTagName('head')[0];if(head)head.appendChild($script.get());break;}else{try{eval(scripts[i].innerHTML);}catch(e){}}}}},// private\n_find:function _find(){return this.editor.getElement().find('.'+this.activeClass);},_buildCaret:function _buildCaret(){var $caret=$R.dom('<span>');$caret.addClass('redactor-component-caret');$caret.attr('contenteditable',true);return $caret;}});$R.add('service','insertion',{init:function init(app){this.app=app;},set:function set(html,clean,focus){if(html===null){html='';}html=clean!==false?this.cleaner.input(html):html;html=clean!==false?this.cleaner.paragraphize(html):html;// set html\nvar $editor=this.editor.getElement();$editor.html(html);// set focus at the end\nif(focus!==false)this.editor.endFocus();return html;},insertNode:function insertNode(node,caret){this.editor.focus();var fragment=this.utils.isFragment(node)?node:this.utils.createFragment(node);this._collapseSelection();this._insertFragment(fragment);this._setCaret(caret,fragment);return this._sendNodes(fragment.nodes);},insertBreakLine:function insertBreakLine(){return this.insertNode(document.createElement('br'),'after');},insertNewline:function insertNewline(){return this.insertNode(document.createTextNode('\\n'),'after');},insertText:function insertText(text){return this.insertHtml(this.cleaner.getFlatText(text));},insertChar:function insertChar(charhtml){return this.insertNode(charhtml,'after');},insertRaw:function insertRaw(html){return this.insertHtml(html,false);},insertToEnd:function insertToEnd(lastNode,type){if(!lastNode)return;if(lastNode.nodeType===3&&lastNode.nodeValue.search(/^\\n/)!==-1){lastNode=lastNode.previousElementSibling;}var $lastNode=$R.dom(lastNode);if($lastNode.attr('data-redactor-type')===type){var tag=this.opts.breakline?'<br>':'<p>';var $newNode=$R.dom(tag);$lastNode.after($newNode);this.caret.setStart($newNode);}},insertPoint:function insertPoint(e){var range,data;var marker=this.marker.build('start');var markerInserted=false;var x=e.clientX,y=e.clientY;if(document.caretPositionFromPoint){var pos=document.caretPositionFromPoint(x,y);var sel=document.getSelection();data=this.inspector.parse(pos.offsetNode);if(data.isInEditor()){range=sel.getRangeAt(0);range.setStart(pos.offsetNode,pos.offset);range.collapse(true);range.insertNode(marker);markerInserted=true;}}else if(document.caretRangeFromPoint){range=document.caretRangeFromPoint(x,y);data=this.inspector.parse(range.startContainer);if(data.isInEditor()){range.insertNode(marker);markerInserted=true;}}return markerInserted;},insertToPoint:function insertToPoint(e,html,point,clean){var pointInserted=point===true?true:this.insertPoint(e);if(!pointInserted){var lastNode=this.editor.getLastNode();$R.dom(lastNode).after(this.marker.build('start'));}this.component.clearActive();this.selection.restoreMarkers();return this.insertHtml(html,clean);},insertToOffset:function insertToOffset(start,html){this.offset.set({start:start,end:start});return this.insertHtml(html);},insertHtml:function insertHtml(html,clean){if(!this.opts.input)return;// parse\nvar parsedInput=this.utils.parseHtml(html);// all selection\nif(this.selection.isAll()){return this._insertToAllSelected(parsedInput);}// there is no selection\nif(!this.selection.is()){var $el=$R.dom('<p>');var $editor=this.editor.getElement();$editor.append($el);this.caret.setStart($el);}// environment\nvar isCollapsed=this.selection.isCollapsed();var isText=this.selection.isText();var current=this.selection.getCurrent();var block=this.selection.getBlock();var dataCurrent=this.inspector.parse(current);// collapse air\nthis._collapseSelection();// clean\nparsedInput=this._getCleanedInput(parsedInput,dataCurrent,clean);// input is figure or component span\nvar isFigure=this._isFigure(parsedInput.html);var isComponentSpan=this._isComponentSpan(parsedInput.html);var isInsertedText=this.inspector.isText(parsedInput.html);var fragment,except;// empty editor\nif(this.editor.isEmpty()){return this._insertToEmptyEditor(parsedInput.html);}// to component\nelse if(dataCurrent.isComponent()&&!dataCurrent.isComponentEditable()){return this._insertToWidget(current,dataCurrent,parsedInput.html);}// component span\nelse if(isComponentSpan){return this.insertNode(parsedInput.nodes,'end');}// inserting figure & split node\nelse if(isFigure&&!isText&&!dataCurrent.isList()){if(dataCurrent.isInline()){return this._insertToInline(current,parsedInput);}fragment=this.utils.createFragment(parsedInput.html);this.utils.splitNode(current,fragment);this.caret.setEnd(fragment.last);return this._sendNodes(fragment.nodes);}// to code\nelse if(dataCurrent.isCode()){return this._insertToCode(parsedInput,current,clean);}// to pre\nelse if(dataCurrent.isPre()){return this._insertToPre(parsedInput,clean);}// to h1-h6 & figcaption\nelse if(dataCurrent.isHeading()||dataCurrent.isFigcaption()){parsedInput.html=clean!==false?this.cleaner.removeTagsExcept(parsedInput.html,['a']):parsedInput.html;parsedInput.html=clean!==false?this.cleaner.replaceNbspToSpaces(parsedInput.html):parsedInput.html;fragment=this.utils.createFragment(parsedInput.html);return this.insertNode(fragment,'end');}// breakline div\nelse if(this.opts.breakline&&block&&block.tagName==='DIV'){parsedInput.html=clean!==false?this.cleaner.paragraphize(parsedInput.html):parsedInput.html;fragment=this.utils.createFragment(parsedInput.html);var range=this.selection.getRange();if(range&&this.selection.isCollapsed()){range.deleteContents();}this.utils.splitNode(current,fragment);this.caret.setEnd(fragment.last);return this._sendNodes(fragment.nodes);}// text inserting\nelse if(isInsertedText){if(!isText&&this.opts.markup!=='br'&&this._hasBlocksAndImages(parsedInput.nodes)){parsedInput.html=clean!==false?this.cleaner.paragraphize(parsedInput.html):parsedInput.html;fragment=this.utils.createFragment(parsedInput.html);this.utils.splitNode(current,fragment);this.caret.setEnd(fragment.last);return this._sendNodes(fragment.nodes);}parsedInput.html=clean!==false?parsedInput.html.replace(/\\n/g,'<br>'):parsedInput.html;fragment=this.utils.createFragment(parsedInput.html);return this.insertNode(fragment.nodes,'end');}// uncollapsed\nelse if(!isCollapsed&&!isFigure){parsedInput.html=clean!==false?this.cleaner.paragraphize(parsedInput.html):parsedInput.html;fragment=this.utils.createFragment(parsedInput.html);return this.insertNode(fragment,'end');}// to inline tag\nelse if(dataCurrent.isInline()&&!this._isPlainHtml(parsedInput.html)){return this._insertToInline(current,parsedInput);}// to blockquote or dt, dd\nelse if(dataCurrent.isBlockquote()||dataCurrent.isDl()){except=this.opts.inlineTags;except.concat(['br']);parsedInput.html=clean!==false?this.cleaner.replaceBlocksToBr(parsedInput.html):parsedInput.html;parsedInput.html=clean!==false?this.cleaner.removeTagsExcept(parsedInput.html,except):parsedInput.html;fragment=this.utils.createFragment(parsedInput.html);return this.insertNode(fragment,'end');}// to p\nelse if(dataCurrent.isParagraph()){if(this._isPlainHtml(parsedInput.html)){return this.insertNode(parsedInput.nodes,'end');}parsedInput.html=clean!==false?this.cleaner.paragraphize(parsedInput.html):parsedInput.html;fragment=this.utils.createFragment(parsedInput.html);this.utils.splitNode(current,fragment);this.caret.setEnd(fragment.last);return this._sendNodes(fragment.nodes);}// to li\nelse if(dataCurrent.isList()){except=this.opts.inlineTags;except=except.concat(['br','li','ul','ol','img']);parsedInput.html=clean!==false?this.cleaner.replaceBlocksToBr(parsedInput.html):parsedInput.html;parsedInput.html=clean!==false?this.cleaner.removeTagsExcept(parsedInput.html,except):parsedInput.html;parsedInput.html=clean!==false?this.cleaner.removeBrAtEnd(parsedInput.html):parsedInput.html;fragment=this.utils.createFragment(parsedInput.html);parsedInput.nodes=fragment.nodes;if(this._containsTags(parsedInput.html,['ul','ol','li'])){var element=this.selection.getElement(current);if(element&&element.tagName==='LI'&&this.caret.isStart(element)){parsedInput.nodes=$R.dom(fragment.nodes).unwrap('ul, ol').getAll();$R.dom(element).before(parsedInput.nodes);var lastNode=parsedInput.nodes[parsedInput.nodes.length-1];this.caret.setEnd(lastNode);return this._sendNodes(parsedInput.nodes);}else if(this._isPlainHtml(parsedInput.html)){return this.insertNode(fragment,'end');}else{fragment=this._buildList(parsedInput,element,fragment);this.utils.splitNode(current,fragment,true);this.caret.setEnd(fragment.last);return this._sendNodes(fragment.nodes);}}}// other cases\nreturn this.insertNode(parsedInput.nodes,'end');},// private\n_insertToAllSelected:function _insertToAllSelected(parsedInput){var insertedHtml=this.set(parsedInput.html);var dataInserted=this.utils.parseHtml(insertedHtml);return this._sendNodes(dataInserted.nodes);},_insertToEmptyEditor:function _insertToEmptyEditor(html){html=this.cleaner.paragraphize(html);var fragment=this.utils.createFragment(html);var $editor=this.editor.getElement();$editor.html('');$editor.append(fragment.frag);this.caret.setEnd(fragment.last);return this._sendNodes(fragment.nodes);},_insertToInline:function _insertToInline(current,parsedInput){var fragment=this.utils.createFragment(parsedInput.html);this.utils.splitNode(current,fragment,false,true);this.caret.setEnd(fragment.last);return this._sendNodes(fragment.nodes);},_insertToCode:function _insertToCode(parsedInput,current,clean){parsedInput.html=clean!==false?this.cleaner.encodeHtml(parsedInput.html):parsedInput.html;parsedInput.html=clean!==false?this.cleaner.removeNl(parsedInput.html):parsedInput.html;var fragment=this.utils.createFragment(parsedInput.html);var nodes=this.insertNode(fragment,'end');this.utils.normalizeTextNodes(current);return nodes;},_insertToPre:function _insertToPre(parsedInput,clean){parsedInput.html=clean!==false?this.cleaner.encodeHtml(parsedInput.html):parsedInput.html;var fragment=this.utils.createFragment(parsedInput.html);return this.insertNode(fragment,'end');},_insertToWidget:function _insertToWidget(current,dataCurrent,html){html=this._isComponentSpan(html)?html:this.cleaner.paragraphize(html);var fragment=this.utils.createFragment(html);var component=dataCurrent.getComponent();var $component=$R.dom(component);$component.after(fragment.frag);$component.remove();this.caret.setEnd(fragment.last);return this._sendNodes(fragment.nodes);},_insertFragment:function _insertFragment(fragment){var range=this.selection.getRange();if(range){if(this.selection.isCollapsed()){var startNode=range.startContainer;if(startNode.nodeType!==3&&startNode.tagName==='BR'){this.caret.setAfter(startNode);startNode.parentNode.removeChild(startNode);}}else{range.deleteContents();}range.insertNode(fragment.frag);}},_sendNodes:function _sendNodes(nodes){for(var i=0;i<nodes.length;i++){var el=nodes[i];var type=el.nodeType!==3&&typeof el.getAttribute==='function'?el.getAttribute('data-redactor-type'):false;if(type){this.app.broadcast(type+'.inserted',this.component.build(el));}}if(this.detector.isIe()){this.editor.getElement().find('[data-redactor-type=table]').attr('contenteditable',true);}// callback\nthis.app.broadcast('inserted',nodes);// widget's scripts\nthis.component.executeScripts();return nodes;},_setCaret:function _setCaret(caret,fragment){var isLastInline=this._isLastInline(fragment);if(caret){caret=isLastInline&&caret==='end'?'after':caret;this.caret['set'+this.utils.ucfirst(caret)](fragment.last);}else if(caret!==false){if(isLastInline)this.caret.setAfter(fragment.last);}},_isLastInline:function _isLastInline(fragment){if(fragment.last){var data=this.inspector.parse(fragment.last);return data.isInline();}return false;},_getCleanedInput:function _getCleanedInput(parsedInput,dataCurrent,clean){var isPreformatted=dataCurrent.isCode()||dataCurrent.isPre();parsedInput.html=parsedInput.html.replace(/&nbsp;/g,' ');parsedInput.html=!isPreformatted&&clean!==false?this.cleaner.input(parsedInput.html):parsedInput.html;parsedInput=!isPreformatted&&clean!==false?this.utils.parseHtml(parsedInput.html):parsedInput;return parsedInput;},_getContainer:function _getContainer(nodes){return $R.dom(this.utils.createTmpContainer(nodes));},_buildList:function _buildList(parsedInput,list,fragment){var nodes=parsedInput.nodes;var first=nodes[0];if(first&&first.nodeType!==3&&first.tagName==='li'){var $parent=$R.dom(list);var parentListTag=$parent.get().tagName.toLowerCase();var $list=$R.dom('<'+parentListTag+' />');$list.append(fragment.nodes);return this.utils.createFragment($list.get().outerHTML);}return fragment;},_containsTags:function _containsTags(html,tags){return this._getContainer(html).find(tags.join(',')).length!==0;},_collapseSelection:function _collapseSelection(){//if (this.app.isAirToolbar()) this.selection.collapseToEnd();\n},_hasFigureOrTable:function _hasFigureOrTable(nodes){return this._getContainer(nodes).find('figure, table').length!==0;},_hasBlocks:function _hasBlocks(nodes){return this._getContainer(nodes).find(this.opts.blockTags.join(',')).length!==0;},_hasBlocksAndImages:function _hasBlocksAndImages(nodes){return this._getContainer(nodes).find(this.opts.blockTags.join(',')+',img').length!==0;},_isPlainHtml:function _isPlainHtml(html){return this._getContainer(html).find(this.opts.blockTags.join(',')+', img').length===0;},_isFigure:function _isFigure(html){if(this._isHtmlString(html)){return $R.dom(html).closest('figure').length!==0;}},_isComponentSpan:function _isComponentSpan(html){if(this._isHtmlString(html)){return $R.dom(html).closest('span.redactor-component').length!==0;}},_isHtmlString:function _isHtmlString(html){return!(typeof html==='string'&&!/^\\s*<(\\w+|!)[^>]*>/.test(html));}});$R.add('service','block',{init:function init(app){this.app=app;this.tags=['p','div','blockquote','pre','h1','h2','h3','h4','h5','h6'];},// format\nformat:function format(args){// params\nthis.params={args:false};// type of applying styles and attributes\nthis.params.type=args.type?args.type:'set';// add, remove, toggle\n// tag\nthis.params.tag=typeof args==='string'?args:args.tag||this.opts.markup;this.params.tag=this.params.tag.toLowerCase();// args\nthis.params.args={'class':args['class']||false,'style':args['style']||false,'attr':args['attr']||false};if(!args['class']&&!args['style']&&!args['attr']){this.params.args=false;}// format\nreturn this._format();},// funcs\nadd:function add(args,tags){return this._apply('add',args,tags);},set:function set(args,tags){return this._apply('set',args,tags);},toggle:function toggle(args,tags){return this._apply('toggle',args,tags);},remove:function remove(args,tags){return this._apply('remove',args,tags);},// clear\nclearFormat:function clearFormat(tags){return this._clear(tags,'all');},clearStyle:function clearStyle(tags){return this._clear(tags,'style');},clearClass:function clearClass(){return this._clear(tags,'class');},clearAttr:function clearAttr(){return this._clear(tags,'attr');},// format\n_format:function _format(){var nodes=[];// collapsed\nthis.collapsed=this.selection.isCollapsed();// save selection\nthis.selection.save();// blocks\nvar block=this.selection.getBlock();var blocks=this._getBlocks();var type=this._isToggleFormatType(blocks)?'toggle':'set';var replacedTag=this._getReplacedTag(type);nodes=this._replaceBlocks(blocks,replacedTag);// apply args & clean\nnodes=this._buildNodes(nodes);// restore selection\nthis._restoreSelection(nodes);return nodes;},// clear\n_clear:function _clear(tags,type,selection,nodes){// save selection\nif(selection!==false){this.selection.save();}// get elements\nvar $elements=this._getElements(tags,nodes);// remove all format\nif(type==='all'){this._removeAllAttr($elements,false);}// remove style\nelse if(type==='style'){$elements.removeAttr('style');$elements.removeAttr('data-redactor-style-cache');}// remove class\nelse if(type==='class'){$elements.removeAttr('class');}// remove attrs\nelse if(type==='attr'){this._removeAllAttr($elements);}// get nodes\nnodes=$elements.getAll();// restore selection\nif(selection!==false){this._restoreSelection(nodes);}return nodes;},// get\n_getElements:function _getElements(tags,nodes){return nodes?$R.dom(nodes):$R.dom(this._getBlocks(tags));},_getBlocks:function _getBlocks(tags){var blocks=this.selection.getBlocks({tags:tags||this.tags});var finalBlocks=[];for(var i=0;i<blocks.length;i++){if(blocks[i].tagName==='DIV'&&!blocks[i].getAttribute('data-redactor-tag')){continue;}else{finalBlocks.push(blocks[i]);}}return finalBlocks;},_getReplacedTag:function _getReplacedTag(type){if(this.opts.breakline){return type==='toggle'?'div':this.params.tag==='p'?'div':this.params.tag;}else{return type==='toggle'?this.opts.markup:this.params.tag;}},// is\n_isStandardParagraph:function _isStandardParagraph(){return!this.opts.breakline&&this.opts.markup==='p';},_isStandardDiv:function _isStandardDiv(){return!this.opts.breakline&&this.opts.markup==='div';},_isBreaklineBlock:function _isBreaklineBlock(block){return block&&block.tagName==='DIV'&&block.getAttribute('data-redactor-tag')==='br';},_isToggleFormatType:function _isToggleFormatType(blocks){var count=0;var len=blocks.length;for(var i=0;i<len;i++){if(blocks[i]&&this.params.tag===blocks[i].tagName.toLowerCase())count++;}return count===len;},_isCurrentBlockOneAndEmpty:function _isCurrentBlockOneAndEmpty(nodes){return this.collapsed&&nodes.length===1&&this.utils.isEmpty(nodes[0]);},// build\n_buildNodes:function _buildNodes(nodes){if(nodes.length>0){// clean & appliyng styles and attributes\nnodes=this._applyArgs(nodes,false);nodes=this._combinePre(nodes);nodes=this._cleanBlocks(nodes);}return nodes;},// replace\n_replaceBlocks:function _replaceBlocks(blocks,replacedTag){var nodes=[];for(var i=0;i<blocks.length;i++){var $node=this.utils.replaceToTag(blocks[i],replacedTag);nodes.push($node.get());}return nodes;},// combine\n_combinePre:function _combinePre(nodes){var combinedNodes=[];for(var i=0;i<nodes.length;i++){var next=nodes[i].nextElementSibling;if(next&&nodes[i].tagName==='PRE'&&next.tagName==='PRE'){var $current=$R.dom(nodes[i]);var $next=$R.dom(next);var newline=document.createTextNode('\\n');$current.append(newline);$current.append($next);$next.unwrap('pre');}combinedNodes.push(nodes[i]);}return combinedNodes;},// clean\n_cleanBlocks:function _cleanBlocks(nodes){var headings=['h1','h2','h3','h4','h5','h6'];var tags=this.opts.inlineTags;for(var i=0;i<nodes.length;i++){var tag=nodes[i].tagName.toLowerCase();var $node=$R.dom(nodes[i]);// remove all spans in headings\nif(headings.indexOf(tag)!==-1){$node.find('span').not('.redactor-component, .non-editable, .redactor-selection-marker').unwrap();}// remove all inlines in pre\nelse if(tag==='pre'){$node.find(tags.join(',')).not('.redactor-selection-marker').unwrap();}if(this.params.args===false&&this.params.tag==='p'){$node.removeAttr('class');}// breakline attr\nif(this.opts.breakline&&tag==='div'){$node.attr('data-redactor-tag','br');}else{$node.removeAttr('data-redactor-tag');}// normalize\nthis.utils.normalizeTextNodes(nodes[i]);}return nodes;},_cleanEmptyClass:function _cleanEmptyClass($elements){$elements.each(function(node){if(node.className==='')node.removeAttribute('class');});},_cleanEmptyStyle:function _cleanEmptyStyle($node){if(this.utils.removeEmptyAttr($node.get(),'style')){$node.removeAttr('data-redactor-style-cache');}else{$node.attr('data-redactor-style-cache',$node.attr('style'));}},// apply\n_apply:function _apply(type,args,tags,selection,nodes){// save selection\nif(selection!==false){this.selection.save();}// get elements\nvar $elements=this._getElements(tags,nodes);// class\nif(args['class']){if(type==='set'){$elements.removeAttr('class');$elements.addClass(args['class']);}else if(type==='add'){$elements.addClass(args['class']);}else if(type==='toggle'){$elements.toggleClass(args['class']);}else if(type==='remove'){$elements.removeClass(args['class']);}this._cleanEmptyClass($elements);}// attr\nif(args['attr']){if(type==='set'){this._removeAllAttr($elements);$elements.attr(args['attr']);}else if(type==='add'){$elements.attr(args['attr']);}else if(type==='toggle'){params=args['attr'];$elements.each(function(node){var $node=$R.dom(node);for(var key in params){if($node.attr(key))$node.removeAttr(key);else $node.attr(key,params[key]);}});}else if(type==='remove'){$elements.removeAttr(args['attr']);}}// style\nif(args['style']){if(type==='set'){$elements.removeAttr('style');$elements.css(args['style']);$elements.each(function(node){var $node=$R.dom(node);$node.attr('data-redactor-style-cache',$node.attr('style'));});}else if(type==='add'){var params=args['style'];$elements.each(function(node){var $node=$R.dom(node);$node.css(params);$node.attr('data-redactor-style-cache',$node.attr('style'));this._convertStyleQuotes($node);}.bind(this));}else if(type==='toggle'){var params=args['style'];$elements.each(function(node){var $node=$R.dom(node);for(var key in params){var newVal=params[key];var oldVal=$node.css(key);oldVal=this.utils.isRgb(oldVal)?this.utils.rgb2hex(oldVal):oldVal.replace(/\"/g,'');newVal=this.utils.isRgb(newVal)?this.utils.rgb2hex(newVal):newVal.replace(/\"/g,'');oldVal=this.utils.hex2long(oldVal);newVal=this.utils.hex2long(newVal);var compareNew=typeof newVal==='string'?newVal.toLowerCase():newVal;var compareOld=typeof oldVal==='string'?oldVal.toLowerCase():oldVal;if(compareNew===compareOld)$node.css(key,'');else $node.css(key,newVal);}this._convertStyleQuotes($node);this._cleanEmptyStyle($node);}.bind(this));}else if(type==='remove'){var name=args['style'];$elements.each(function(node){var $node=$R.dom(node);$node.css(name,'');this._cleanEmptyStyle($node);}.bind(this));}}// get nodes\nnodes=$elements.getAll();// restore selection\nif(selection!==false){this._restoreSelection(nodes);}return nodes;},_applyArgs:function _applyArgs(nodes){if(this.params.args){nodes=this._apply(this.params.type,this.params.args,false,false,nodes);}else{nodes=this._clear(false,'all',false,nodes);}return nodes;},// remove\n_removeAllAttr:function _removeAllAttr($elements,keepStyleAndClass){$elements.each(function(node){var keepAttrs=['data-redactor-tag','data-redactor-style-cache'];if(keepStyleAndClass===false){keepAttrs.push('style');keepAttrs.push('class');}for(var i=node.attributes.length;i-->0;){var nodeAttr=node.attributes[i];var name=nodeAttr.name;if(keepAttrs.indexOf(name)===-1){node.removeAttributeNode(nodeAttr);}}});},// selection\n_restoreSelection:function _restoreSelection(nodes){if(this._isCurrentBlockOneAndEmpty(nodes)){this.caret.setStart(nodes[0]);}else{setTimeout(function(){this.selection.restore();}.bind(this),1);}},// convert\n_convertStyleQuotes:function _convertStyleQuotes($node){var style=$node.attr('style');if(style)$node.attr('style',style.replace(/\"/g,'\\''));}});$R.add('service','inline',{mixins:['formatter'],init:function init(app){this.app=app;this.count=0;},// public\nformat:function format(args){if(!this._isFormat())return[];// type of applying styles and attributes\nthis.type=args.type?args.type:'set';// add, remove, toggle\n// tag\nthis.tag=typeof args==='string'?args:args.tag;this.tag=this.tag.toLowerCase();this.tag=this.arrangeTag(this.tag);if(typeof args==='string')this.args=false;else this.buildArgs(args);if(!this.detector.isIe()){this.editor.disableNonEditables();}// format\nvar nodes=this.selection.isCollapsed()?this.formatCollapsed():this.formatUncollapsed();if(!this.detector.isIe()){this.editor.enableNonEditables();}return nodes;},// private\n_isFormat:function _isFormat(){var current=this.selection.getCurrent();var data=this.inspector.parse(current);var isComponent=data.isComponent()&&!data.isComponentType('table')&&!data.isFigcaption();if(current===false&&this.selection.isAll()){return true;}else if(!current||data.isPre()||data.isCode()||isComponent){return false;}return true;},arrangeTag:function arrangeTag(tag){var replaced=this.opts.replaceTags;for(var key in replaced){if(tag===key)tag=replaced[key];}return tag;},formatCollapsed:function formatCollapsed(){var nodes=[];var inline=this.selection.getInlineFirst();var inlines=this.selection.getInlines({all:true});var $inline=$R.dom(inline);var $parent,parent,$secondPart,extractedContent;// 1) not inline\nif(!inline){nodes=this.insertInline(nodes);}else{var dataInline=this.inspector.parse(inline);var isEmpty=this.utils.isEmptyHtml(inline.innerHTML);// 2) inline is empty\nif(isEmpty){// 2.1) has same tag\nif(inline.tagName.toLowerCase()===this.tag){// 2.1.1) has same args or hasn't args\nif(this.hasSameArgs(inline)){this.caret.setAfter(inline);$inline.remove();var el=this.selection.getElement();this.utils.normalizeTextNodes(el);}// 2.1.2) has different args and it is span tag\nelse if(this.tag==='span'){nodes=this.applyArgs([inline],false);this.caret.setStart(inline);}// 2.1.3) has different args and it is not span tag\nelse{nodes=this.insertInline(nodes);}}// 2.2) has another tag\nelse{// 2.2.1) has parent\nif(dataInline.hasParent([this.tag])){$parent=$inline.closest(this.tag);parent=$parent.get();if(this.hasSameArgs(parent)){$parent.unwrap();this.caret.setStart(inline);}else{nodes=this.insertInline(nodes);}}// 2.2.2) hasn't parent\nelse{nodes=this.insertInline(nodes);}}}// 3) inline isn't empty\nelse{// 3.1) has same tag\nif(inline.tagName.toLowerCase()===this.tag){// 3.1.1) has same args or hasn't args\nif(this.hasSameArgs(inline)){// insert break\nextractedContent=this.utils.extractHtmlFromCaret(inline);$secondPart=$R.dom('<'+this.tag+' />');$secondPart=this.utils.cloneAttributes(inline,$secondPart);$inline.after($secondPart.append(extractedContent));if($secondPart.html().trim()===''){$secondPart.remove();}this.caret.setAfter(inline);}else{nodes=this.insertInline(nodes);}}// 3.2) has another tag\nelse{// 3.2.1) has parent\nif(dataInline.hasParent([this.tag])){$parent=$inline.closest(this.tag);parent=$parent.get();if(this.hasSameArgs(parent)){// insert break\nextractedContent=this.utils.extractHtmlFromCaret(parent,parent);$secondPart=$R.dom('<'+this.tag+' />');$secondPart=this.utils.cloneAttributes(parent,$secondPart);var $breaked,$last;var z=0;inlines=inlines.reverse();for(var i=0;i<inlines.length;i++){if(inlines[i]!==parent){$last=$R.dom('<'+inlines[i].tagName.toLowerCase()+'>');if(z===0){$breaked=$last;}else{$breaked.append($last);}z++;}}$parent.after($secondPart.append(extractedContent));$parent.after($breaked);this.caret.setStart($last);}else{nodes=this.insertInline(nodes);}}// 3.2.2) hasn't parent\nelse{nodes=this.insertInline(nodes);}}}}return nodes;},insertInline:function insertInline(nodes){var node=document.createElement(this.tag);nodes=this.insertion.insertNode(node,'start');return this.applyArgs(nodes,false);},hasSameArgs:function hasSameArgs(inline){if(inline.attributes.length===0&&this.args===false){return true;}else{var same=true;if(this.args){var count=0;for(var key in this.args){var $node=$R.dom(inline);var args=this.args[key];var value=this.utils.toParams(args);var nodeAttrValue=$node.attr(key);if(args){if(key==='style'){value=value.trim().replace(/;$/,'');var origRules=this.utils.styleToObj($node.attr('style'));var rules=value.split(';');var innerCount=0;for(var i=0;i<rules.length;i++){var arr=rules[i].split(':');var ruleName=arr[0].trim();var ruleValue=arr[1].trim();if(ruleName.search(/color/)!==-1){var val=$node.css(ruleName);if(val&&(val===ruleValue||this.utils.rgb2hex(val)===ruleValue)){innerCount++;}}else if($node.css(ruleName)===ruleValue){innerCount++;}}if(innerCount===rules.length&&Object.keys(origRules).length===rules.length){count++;}}else{if(nodeAttrValue===value){count++;}}}else{if(!nodeAttrValue||nodeAttrValue===''){count++;}}}same=count===Object.keys(this.args).length;}return same;}},formatUncollapsed:function formatUncollapsed(){var inlines=this.selection.getInlines({all:true,inside:true});if(this.detector.isIe())this.selection.saveMarkers();else this.selection.save();// convert del / u\nthis._convertTags('u');this._convertTags('del');// convert target tags\nthis._convertToStrike(inlines);if(this.detector.isIe())this.selection.restoreMarkers();else this.selection.restore();// apply strike\ndocument.execCommand('strikethrough');// clear decoration\nthis._clearDecoration();this.selection.save();// revert and set style\nvar nodes=this._revertToInlines();nodes=this.applyArgs(nodes,false);// unwrap if attributes was removed\nfor(var i=0;i<nodes.length;i++){var node=nodes[i];var tag=node.tagName.toLowerCase();var len=node.attributes.length;if(tag===this.tag&&len===0&&this.args){$R.dom(node).unwrap();nodes.splice(i,1);}}this.selection.restore();// clear and normalize\nthis._clearEmptyStyle();nodes=this._normalizeBlocks(nodes);return nodes;},_convertTags:function _convertTags(tag){if(this.tag!==tag){var $editor=this.editor.getElement();$editor.find(tag).each(function(node){var $el=this.utils.replaceToTag(node,'span');$el.addClass('redactor-convertable-'+tag);}.bind(this));}},_revertTags:function _revertTags(tag){var $editor=this.editor.getElement();$editor.find('span.redactor-convertable-'+tag).each(function(node){var $el=this.utils.replaceToTag(node,tag);$el.removeClass('redactor-convertable-'+tag);if(this.utils.removeEmptyAttr($el,'class'))$el.removeAttr('class');}.bind(this));},_convertToStrike:function _convertToStrike(inlines){var selected=this.selection.getText().replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\"\\\\$&\");for(var i=0;i<inlines.length;i++){var tag=this.arrangeTag(inlines[i].tagName.toLowerCase());var inline=inlines[i];var $inline=$R.dom(inline);var hasSameArgs=this.hasSameArgs(inline);if(tag===this.tag){if(this.tag==='span'&&this._isTextSelected(inline,selected)){$inline.addClass('redactor-convertable-apply');}else if(hasSameArgs&&this.tag!=='a'){this._replaceToStrike($inline);}else if(this.tag==='span'){$inline.addClass('redactor-unconvertable-apply');}else if(!hasSameArgs){$inline.addClass('redactor-convertable-apply');}}}},_replaceToStrike:function _replaceToStrike($el){$el.replaceWith(function(){return $R.dom('<strike>').append($el.contents());});},_revertToInlines:function _revertToInlines(){var nodes=[];var $editor=this.editor.getElement();if(this.tag!=='u')$editor.find('u').unwrap();$editor.find('.redactor-convertable-u').each(function(node){nodes.push(node);}.bind(this));// span convertable\n$editor.find('.redactor-convertable-apply').each(function(node){var $node=$R.dom(node);$node.find('strike').unwrap();this._forceRemoveClass($node,'redactor-convertable-apply');nodes.push(node);}.bind(this));// span unconvertable\n$editor.find('span.redactor-unconvertable-apply').each(function(node){var $node=$R.dom(node);this._forceRemoveClass($node,'redactor-unconvertable-apply');}.bind(this));// strike\n$editor.find('strike').each(function(node){var $node=this.utils.replaceToTag(node,this.tag);nodes.push($node.get());}.bind(this));this._revertTags('u');this._revertTags('del');return nodes;},_normalizeBlocks:function _normalizeBlocks(nodes){var tags=this.opts.inlineTags;var blocks=this.selection.getBlocks();if(blocks){for(var i=0;i<blocks.length;i++){if(blocks[i].tagName==='PRE'){var $node=$R.dom(blocks[i]);$node.find(tags.join(',')).not('.redactor-selection-marker').each(function(inline){if(nodes.indexOf(inline)!==-1){nodes=this.utils.removeFromArrayByValue(nodes,inline);}$R.dom(inline).unwrap();}.bind(this));}}}return nodes;},_clearDecoration:function _clearDecoration(){var $editor=this.editor.getElement();$editor.find(this.opts.inlineTags.join(',')).each(function(node){if(node.style.textDecoration==='line-through'||node.style.textDecorationLine==='line-through'){var $el=$R.dom(node);$el.css('textDecorationLine','');$el.css('textDecoration','');$el.wrap('<strike>');}});},_clearEmptyStyle:function _clearEmptyStyle(){var inlines=this.getInlines();for(var i=0;i<inlines.length;i++){this._clearEmptyStyleAttr(inlines[i]);var childNodes=inlines[i].childNodes;if(childNodes){for(var z=0;z<childNodes.length;z++){this._clearEmptyStyleAttr(childNodes[z]);}}}},_clearEmptyStyleAttr:function _clearEmptyStyleAttr(node){if(node.nodeType!==3&&this.utils.removeEmptyAttr(node,'style')){node.removeAttribute('style');node.removeAttribute('data-redactor-style-cache');}},_forceRemoveClass:function _forceRemoveClass($node,classname){$node.removeClass(classname);if(this.utils.removeEmptyAttr($node,'class'))$node.removeAttr('class');},_isTextSelected:function _isTextSelected(node,selected){var text=this.utils.removeInvisibleChars(node.textContent);return selected===text||selected.search(new RegExp('^'+this.utils.escapeRegExp(text)+'$'))!==-1;},getInlines:function getInlines(tags){return tags?this.selection.getInlines({tags:tags,all:true}):this.selection.getInlines({all:true});},getElements:function getElements(tags){return $R.dom(this.getInlines(tags));},clearFormat:function clearFormat(){this.selection.save();var nodes=this.selection.getInlines({all:true});for(var i=0;i<nodes.length;i++){var $el=$R.dom(nodes[i]);var inline=this.selection.getInline(nodes[i]);if(inline){$el.unwrap();}}this.selection.restore();}});$R.add('service','autoparser',{init:function init(app){this.app=app;this.cleaner=this.app.cleaner;},observe:function observe(){var $editor=this.editor.getElement();var $objects=$editor.find('.redactor-autoparser-object').each(function(node){var $node=$R.dom(node);$node.removeClass('redactor-autoparser-object');if($node.attr('class')==='')$node.removeAttr('class');});if($objects.length>0){$objects.each(function(node){var type;var $object=false;var tag=node.tagName;if(tag==='A')type='link';else if(tag==='IMG')type='image';else if(tag==='IFRAME')type='video';if(type){$object=$R.create(type+'.component',this.app,node);this.app.broadcast(type+'.inserted',$object);this.app.broadcast('autoparse',type,$object);}}.bind(this));}},format:function format(e,key){if(this._isKey(key)){this._format(key===this.keycodes.ENTER);}},parse:function parse(html){var tags=['figure','form','pre','iframe','code','a','img'];var stored=[];var z=0;// store\nvar storedComments=[];html=this.cleaner.storeComments(html,storedComments);// encode\nhtml=this.cleaner.encodeCode(html);// converting entity\nhtml=html.replace(/\\$/g,'&#36;');html=html.replace(/&amp;/g,'&');// store tags\nfor(var i=0;i<tags.length;i++){var reTags=tags[i]==='img'?'<'+tags[i]+'[^>]*>':'<'+tags[i]+'([\\\\w\\\\W]*?)</'+tags[i]+'>';var matched=html.match(new RegExp(reTags,'gi'));if(matched!==null){for(var y=0;y<matched.length;y++){html=html.replace(matched[y],'#####replaceparse'+z+'#####');stored.push(matched[y]);z++;}}}// images\nif(this.opts.autoparseImages&&html.match(this.opts.regex.imageurl)){var imagesMatches=html.match(this.opts.regex.imageurl);for(var i=0;i<imagesMatches.length;i++){html=html.replace(imagesMatches[i],'<img class=\"redactor-autoparser-object\" src=\"'+imagesMatches[i]+'\">');}}// video\nif(this.opts.autoparseVideo&&(html.match(this.opts.regex.youtube)||html.match(this.opts.regex.vimeo))){var iframeStart='<iframe width=\"500\" height=\"281\" src=\"';var iframeEnd='\" frameborder=\"0\" allowfullscreen></iframe>';var str,re;if(html.match(this.opts.regex.youtube)){str='//www.youtube.com/embed/$1';re=this.opts.regex.youtube;}else if(html.match(this.opts.regex.vimeo)){str='//player.vimeo.com/video/$2';re=this.opts.regex.vimeo;}var $video=this.component.create('video',iframeStart+str+iframeEnd);html=html.replace(re,$video.get().outerHTML);}// store tags\nfor(var i=0;i<tags.length;i++){var reTags=tags[i]==='img'?'<'+tags[i]+'[^>]*>':'<'+tags[i]+'([\\\\w\\\\W]*?)</'+tags[i]+'>';var matched=html.match(new RegExp(reTags,'gi'));if(matched!==null){for(var y=0;y<matched.length;y++){html=html.replace(matched[y],'#####replaceparse'+z+'#####');stored.push(matched[y]);z++;}}}// links\nif(this.opts.autoparseLinks&&html.match(this.opts.regex.url)){html=this._formatLinks(html);}// restore\nhtml=this._restoreReplaced(stored,html);// repeat for nested tags\nhtml=this._restoreReplaced(stored,html);// restore comments\nhtml=this.cleaner.restoreComments(html,storedComments);return html;},// private\n_isKey:function _isKey(key){return key===this.keycodes.ENTER||key===this.keycodes.SPACE;},_format:function _format(enter){var parent=this.selection.getParent();var $parent=$R.dom(parent);var isNotFormatted=parent&&$parent.closest('figure, pre, code, img, a, iframe').length!==0;if(isNotFormatted||!this.selection.isCollapsed()){return;}// add split marker\nvar marker=this.utils.createInvisibleChar();var range=this.selection.getRange();range.insertNode(marker);var current=this.selection.getCurrent();var data=this.inspector.parse(current);var $current=$R.dom(current);// remove split marker\nmarker.parentNode.removeChild(marker);if(current&&current.nodeType===3){var content=current.textContent;var type;// images\nif(this.opts.autoparseImages&&content.match(this._convertToRegExp(this.opts.regex.imageurl))){var isList=data.isList();var matches=content.match(this.opts.regex.imageurl);var el=isList?undefined:'<figure><img></figure>';var $img=this.component.create('image',el);$img.setSrc(matches[0]);$img.addClass('redactor-autoparser-object');content=content.replace(matches[0],$img.get().outerHTML);type='image';}// video\nelse if(this.opts.autoparseVideo&&(content.match(this._convertToRegExp(this.opts.regex.youtube))||content.match(this._convertToRegExp(this.opts.regex.vimeo)))){var iframeStart='<iframe width=\"500\" height=\"281\" src=\"';var iframeEnd='\" frameborder=\"0\" allowfullscreen></iframe>';var str,re;if(content.match(this.opts.regex.youtube)){str='//www.youtube.com/embed/$1';re=this.opts.regex.youtube;}else if(content.match(this.opts.regex.vimeo)){str='//player.vimeo.com/video/$2';re=this.opts.regex.vimeo;}var $video=this.component.create('video',iframeStart+str+iframeEnd);$video.addClass('redactor-autoparser-object');content=content.replace(re,$video.get().outerHTML);type='video';}// links\nelse if(this.opts.autoparseLinks&&content.match(this._convertToRegExp(this.opts.regex.url))){content=this._formatLinks(content,enter);type='link';}// replace\nif(type){if(enter){this.selection.save();$current.replaceWith(content);this.selection.restore();}else{$current.replaceWith(content);}// object\nvar $editor=this.editor.getElement();var $object=$editor.find('.redactor-autoparser-object').removeClass('redactor-autoparser-object');$object=type==='link'?$R.create('link.component',this.app,$object):$object;// caret\nif(type==='link'){if(!enter)this.caret.setAfter($object);this.app.broadcast('link.inserted',$object);}else{this.caret.setAfter($object);var $cloned=$object.clone();$object.remove();$object=this.insertion.insertHtml($cloned);$object=this.component.build($object);}// callback\nthis.app.broadcast('autoparse',type,$object);}}},_formatLinks:function _formatLinks(content,enter){var matches=content.match(this.opts.regex.url);var obj={};for(var i=0;i<matches.length;i++){if(enter&&matches[i].search(/\\.$/)!==-1){matches[i]=matches[i].replace(/\\.$/,'');}var href=matches[i],text=href;var linkProtocol=href.match(/(https?|ftp):\\/\\//i)!==null?'':'http://';var regexB=[\"/\",\"&\",\"=\"].indexOf(href.slice(-1))!==-1?\"\":\"\\\\b\";var target=this.opts.pasteLinkTarget!==false?' target=\"'+this.opts.pasteLinkTarget+'\"':'';text=text.length>this.opts.linkSize?text.substring(0,this.opts.linkSize)+'...':text;text=text.search('%')===-1?decodeURIComponent(text):text;// escaping url\nvar regexp='('+href.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g,\"\\\\$&\")+regexB+')';var classstr=' class=\"redactor-autoparser-object\"';obj[regexp]='<a href=\"'+linkProtocol+href.trim()+'\"'+target+classstr+'>'+text.trim()+'</a>';}// replace\nfor(var key in obj){content=content.replace(new RegExp(key,'g'),obj[key]);}return content;},_restoreReplaced:function _restoreReplaced(stored,html){for(var i=0;i<stored.length;i++){html=html.replace('#####replaceparse'+i+'#####',stored[i]);}return html;},_convertToRegExp:function _convertToRegExp(str){return new RegExp(String(str).replace(/^\\//,'').replace(/\\/ig$/,'').replace(/\\/gi$/,'')+'$','gi');}});$R.add('service','storage',{init:function init(app){this.app=app;// local\nthis.data=[];},// public\nobserveImages:function observeImages(){if(this.opts.imageObserve){var $editor=this.editor.getElement();var $images=$editor.find('[data-image]');$images.each(this._addImage.bind(this));}},observeFiles:function observeFiles(){var $editor=this.editor.getElement();var $files=$editor.find('[data-file]');$files.each(this._addFile.bind(this));},setStatus:function setStatus(url,status){this.data[url].status=status;},getChanges:function getChanges(){var $editor=this.editor.getElement();// check status\nfor(var key in this.data){var data=this.data[key];var $el=$editor.find('[data-'+data.type+'=\"'+data.id+'\"]');this.setStatus(data.id,$el.length===0?false:true);}return this.data;},add:function add(type,node){var $node=$R.dom(node);var id=$node.attr('data-'+type);this.data[id]={type:type,status:true,node:$node.get(),id:$node.attr('data-'+type)};},// private\n_addImage:function _addImage(node){this.add('image',node);},_addFile:function _addFile(node){this.add('file',node);}});$R.add('service','utils',{init:function init(app){this.app=app;},// empty\nisEmpty:function isEmpty(el){var isEmpty=false;el=$R.dom(el).get();if(el){isEmpty=el.nodeType===3?el.textContent.trim().replace(/\\n/,'')==='':el.innerHTML==='';}return isEmpty;},isEmptyHtml:function isEmptyHtml(html,keepbr,keeplists){html=this.removeInvisibleChars(html);html=html.replace(/&nbsp;/gi,'');html=html.replace(/<\\/?br\\s?\\/?>/g,keepbr?'br':'');html=html.replace(/\\s/g,'');html=html.replace(/^<p>[^\\W\\w\\D\\d]*?<\\/p>$/i,'');html=html.replace(/^<div>[^\\W\\w\\D\\d]*?<\\/div>$/i,'');if(keeplists){html=html.replace(/<ul(.*?[^>])>$/i,'ul');html=html.replace(/<ol(.*?[^>])>$/i,'ol');}html=html.replace(/<hr(.*?[^>])>$/i,'hr');html=html.replace(/<iframe(.*?[^>])>$/i,'iframe');html=html.replace(/<source(.*?[^>])>$/i,'source');// remove empty tags\nhtml=html.replace(/<[^\\/>][^>]*><\\/[^>]+>/gi,'');html=html.replace(/<[^\\/>][^>]*><\\/[^>]+>/gi,'');// trim\nhtml=html.trim();return html==='';},trimSpaces:function trimSpaces(html){return html=this.removeInvisibleChars(html.trim());},// invisible chars\ncreateInvisibleChar:function createInvisibleChar(){return document.createTextNode(this.opts.markerChar);},searchInvisibleChars:function searchInvisibleChars(str){return str.search(/^\\uFEFF$/g);},removeInvisibleChars:function removeInvisibleChars(html){return html.replace(/\\uFEFF/g,'');},trimInvisibleChars:function trimInvisibleChars(direction){if(!this.selection.isCollapsed())return;var current=this.selection.getCurrent();var side=direction==='left'?this.selection.getTextBeforeCaret():this.selection.getTextAfterCaret();var isSpace=current&&current.nodeType===3&&this.searchInvisibleChars(side)===0;if(isSpace){if(direction==='left'){$R.dom(current).replaceWith(current.textContent.trim());}else{var offset=this.offset.get();this.offset.set({start:offset.start+1,end:offset.end+1});}}},// wrapper\nbuildWrapper:function buildWrapper(html){return $R.dom('<div>').html(html);},getWrapperHtml:function getWrapperHtml($wrapper){var html=$wrapper.html();$wrapper.remove();return html;},// fragment\ncreateTmpContainer:function createTmpContainer(html){var $div=$R.dom('<div>');if(typeof html==='string'){$div.html(html);}else{$div.append($R.dom(html).clone(true));}return $div.get();},createFragment:function createFragment(html){var el=this.createTmpContainer(html);var frag=document.createDocumentFragment(),node,firstNode,lastNode;var nodes=[];var i=0;while(node=el.firstChild){i++;var n=frag.appendChild(node);if(i===1)firstNode=n;nodes.push(n);lastNode=n;}return{frag:frag,first:firstNode,last:lastNode,nodes:nodes};},isFragment:function isFragment(obj){return _typeof(obj)==='object'&&obj.frag;},parseHtml:function parseHtml(html){var div=this.createTmpContainer(html);return{html:div.innerHTML,nodes:div.childNodes};},splitNode:function splitNode(current,nodes,isList,inline){nodes=this.isFragment(nodes)?nodes.frag:nodes;var element;if(inline){element=this.inspector.isInlineTag(current.tagName)?current:this.selection.getInline(current);}else{element=this.inspector.isBlockTag(current.tagName)?current:this.selection.getBlock(current);}var $element=$R.dom(element);// replace is empty\nif(!inline&&this.isEmptyHtml(element.innerHTML,true)){$element.after(nodes);$element.remove();return nodes;}var tag=$element.get().tagName.toLowerCase();var isEnd=this.caret.isEnd(element);var isStart=this.caret.isStart(element);if(!isEnd&&!isStart){var extractedContent=this.extractHtmlFromCaret(inline);var $secondPart=$R.dom('<'+tag+' />');$secondPart=this.cloneAttributes(element,$secondPart);$element.after($secondPart.append(extractedContent));}if(isStart){return $element.before(nodes);}else{if(isList){return $element.append(nodes);}else{nodes=$element.after(nodes);var html=$element.html();html=this.removeInvisibleChars(html);html=html.replace(/&nbsp;/gi,'');if(html==='')$element.remove();return nodes;}}},extractHtmlFromCaret:function extractHtmlFromCaret(inline,element){var range=this.selection.getRange();if(range){element=element?element:inline?this.selection.getInline():this.selection.getBlock();if(element){var clonedRange=range.cloneRange();clonedRange.selectNodeContents(element);clonedRange.setStart(range.endContainer,range.endOffset);return clonedRange.extractContents();}}},createMarkup:function createMarkup(el){var markup=document.createElement(this.opts.markup);if(this.opts.breakline)markup.setAttribute('data-redactor-tag','br');var $el=$R.dom(el);$el.after(markup);this.caret.setStart(markup);},createMarkupBefore:function createMarkupBefore(el){var markup=document.createElement(this.opts.markup);if(this.opts.breakline)markup.setAttribute('data-redactor-tag','br');var $el=$R.dom(el);$el.before(markup);this.caret.setEnd(markup);},getNode:function getNode(el){var node=$R.dom(el).get();var editor=this.editor.getElement().get();return typeof el==='undefined'?editor:node?node:false;},findSiblings:function findSiblings(node,type){node=$R.dom(node).get();type=type==='next'?'nextSibling':'previousSibling';while(node=node[type]){if(node.nodeType===3&&node.textContent.trim()===''||node.tagName==='BR'){continue;}return node;}return false;},getElementsFromHtml:function getElementsFromHtml(html,selector,exclude){var div=document.createElement(\"div\");div.innerHTML=html;var elems=div.querySelectorAll(selector);// array map polyfill\nvar mapping=function mapping(callback,thisArg){if(typeof this.length!=='number')return;if(typeof callback!=='function')return;var newArr=[];if(_typeof(this)=='object'){for(var i=0;i<this.length;i++){if(i in this)newArr[i]=callback.call(thisArg||this,this[i],i,this);else return;}}return newArr;};return mapping.call(elems,function(el){var type=el.getAttribute('data-redactor-type');if(exclude&&type&&type===exclude){}else return el.outerHTML;});},// childnodes\ngetChildNodes:function getChildNodes(el,recursive,elements){el=el&&el.nodeType&&el.nodeType===11?el:$R.dom(el).get();var nodes=el.childNodes;var result=[];if(nodes){for(var i=0;i<nodes.length;i++){if(elements===true&&nodes[i].nodeType===3)continue;else if(nodes[i].nodeType===3&&this.isEmpty(nodes[i]))continue;result.push(nodes[i]);if(recursive!==false){var nestedNodes=this.getChildNodes(nodes[i],elements);if(nestedNodes.length>0){result=result.concat(nestedNodes);}}}}return result;},getChildElements:function getChildElements(el){return this.getChildNodes(el,true,true);},getFirstNode:function getFirstNode(el){return this._getFirst(this.getChildNodes(el,false));},getLastNode:function getLastNode(el){return this._getLast(this.getChildNodes(el,false));},getFirstElement:function getFirstElement(el){return this._getFirst(this.getChildNodes(el,false,true));},getLastElement:function getLastElement(el){return this._getLast(this.getChildNodes(el,false,true));},// replace\nreplaceToTag:function replaceToTag(node,tag){var $node=$R.dom(node);return $node.replaceWith(function(node){var $replaced=$R.dom('<'+tag+'>').append($R.dom(node).contents());if(node.attributes){var attrs=node.attributes;for(var i=0;i<attrs.length;i++){$replaced.attr(attrs[i].nodeName,attrs[i].value);}}return $replaced;});},// string\nucfirst:function ucfirst(str){return str.charAt(0).toUpperCase()+str.slice(1);},// array\nremoveFromArrayByValue:function removeFromArrayByValue(arr,value){var a=arguments,len=a.length,ax;while(len>1&&arr.length){value=a[--len];while((ax=arr.indexOf(value))!==-1){arr.splice(ax,1);}}return arr;},// attributes\nremoveEmptyAttr:function removeEmptyAttr(el,attr){var $el=$R.dom(el);if(typeof $el.attr(attr)==='undefined'||$el.attr(attr)===null)return true;else if($el.attr(attr)===''){$el.removeAttr(attr);return true;}return false;},cloneAttributes:function cloneAttributes(elFrom,elTo){elFrom=$R.dom(elFrom).get();elTo=$R.dom(elTo);var attrs=elFrom.attributes;var len=attrs.length;while(len--){var attr=attrs[len];elTo.attr(attr.name,attr.value);}return elTo;},// object\ntoParams:function toParams(obj){if(_typeof(obj)!=='object')return obj;var keys=Object.keys(obj);if(!keys.length)return'';var result='';for(var i=0;i<keys.length;i++){var key=keys[i];result+=key+':'+obj[key]+';';}return result;},styleToObj:function styleToObj(str){var obj={};if(str){var style=str.replace(/;$/,'').split(';');for(var i=0;i<style.length;i++){var rule=style[i].split(':');obj[rule[0].trim()]=rule[1].trim();}}return obj;},checkProperty:function checkProperty(obj){var args=arguments[1]&&Array.isArray(arguments[1])?arguments[1]:[].slice.call(arguments,1);for(var i=0;i<args.length;i++){if(!obj||typeof obj[args[i]]==='undefined'){return false;}obj=obj[args[i]];}return obj;},// data\nextendData:function extendData(data,obj){for(var key in obj){if(key==='elements'){var $elms=$R.dom(obj[key]);$elms.each(function(node){var $node=$R.dom(node);if(node.tagName==='FORM'){var serializedData=$node.serialize(true);for(var z in serializedData){data=this._setData(data,z,serializedData[z]);}}else{var name=$node.attr('name')?$node.attr('name'):$node.attr('id');data=this._setData(data,name,$node.val());}}.bind(this));}else{data=this._setData(data,key,obj[key]);}}return data;},_setData:function _setData(data,name,value){if(data instanceof FormData)data.append(name,value);else data[name]=value;return data;},// normalize\nnormalizeTextNodes:function normalizeTextNodes(el){el=$R.dom(el).get();if(el)el.normalize();},// color\nisRgb:function isRgb(str){return str.search(/^rgb/i)===0;},rgb2hex:function rgb2hex(rgb){rgb=rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);return rgb&&rgb.length===4?\"#\"+(\"0\"+parseInt(rgb[1],10).toString(16)).slice(-2)+(\"0\"+parseInt(rgb[2],10).toString(16)).slice(-2)+(\"0\"+parseInt(rgb[3],10).toString(16)).slice(-2):'';},hex2long:function hex2long(val){if(val.search(/^#/)!==-1&&val.length===4){val='#'+val[1]+val[1]+val[2]+val[2]+val[3]+val[3];}return val;},// escape\nescapeRegExp:function escapeRegExp(s){return s.replace(/[-\\/\\\\^$*~+?.()|[\\]{}]/g,'\\\\$&');},// random\ngetRandomId:function getRandomId(){var id='';var possible='abcdefghijklmnopqrstuvwxyz0123456789';for(var i=0;i<12;i++){id+=possible.charAt(Math.floor(Math.random()*possible.length));}return id;},// private\n_getFirst:function _getFirst(nodes){return nodes.length!==0?nodes[0]:false;},_getLast:function _getLast(nodes){return nodes.length!==0?nodes[nodes.length-1]:false;}});$R.add('service','progress',{init:function init(app){this.app=app;// local\nthis.$box=null;this.$bar=null;},// public\nshow:function show(){if(!this._is())this._build();this.$box.show();},hide:function hide(){if(this._is()){this.animate.start(this.$box,'fadeOut',this._destroy.bind(this));}},update:function update(value){this.show();this.$bar.css('width',value+'%');},// private\n_is:function _is(){return this.$box!==null;},_build:function _build(){this.$bar=$R.dom('<span />');this.$box=$R.dom('<div id=\"redactor-progress\" />');this.$box.append(this.$bar);this.$body.append(this.$box);},_destroy:function _destroy(){if(this._is())this.$box.remove();this.$box=null;this.$bar=null;}});$R.add('module','starter',{init:function init(app){this.app=app;this.opts=app.opts;this.plugin=app.plugin;this.module=app.module;},// messages\nonstart:function onstart(){var services=['element','container','source','editor','statusbar','toolbar'];var modules=['element','container','source','editor','statusbar','contextbar','input'];this._startStop('start',this.app,services);this._startStop('start',this.module,modules);},onstop:function onstop(){var modules=['observer','element','container','source','editor','contextbar'];this._startStop('stop',this.module,modules);},onenable:function onenable(){var modules=['observer','toolbar'];var plugins=this.opts.plugins;this._startStop('start',this.module,modules);this._startStop('start',this.plugin,plugins);},ondisable:function ondisable(){var modules=['observer','toolbar'];var plugins=this.opts.plugins;this._startStop('stop',this.module,modules);this._startStop('stop',this.plugin,plugins);},// private\n_startStop:function _startStop(type,obj,arr){for(var i=0;i<arr.length;i++){if(typeof obj[arr[i]]!=='undefined'){this.app.callInstanceMethod(obj[arr[i]],type);}}}});$R.add('module','element',{init:function init(app){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.namespace=app.namespace;this.element=app.element;this.rootOpts=$R.extend({},true,$R.options,app.rootOpts);},// public\nstart:function start(){this._build();this._buildModes();this._buildMarkup();},stop:function stop(){var $element=this.element.getElement();$element.removeData(this.namespace+'-uuid');},// private\n_build:function _build(){var $element=this.element.getElement();$element.data(this.namespace+'-uuid',this.uuid);},_buildModes:function _buildModes(){var type=this.element.getType();if(type==='inline')this._redefineOptions(this.opts.modes['inline']);if(type==='div')this._redefineOptions(this.opts.modes['original']);if(type!=='inline'){if(this._isRootOption('styles')&&this.rootOpts.styles)this.opts.styles=true;if(this._isRootOption('source')&&!this.rootOpts.source)this.opts.showSource=false;}},_buildMarkup:function _buildMarkup(){var type=this.element.getType();if(type==='inline'){this.opts.emptyHtml='';}else if(this.opts.breakline){this.opts.markup='div';this.opts.emptyHtml='<div data-redactor-tag=\"br\">'+this.opts.markerChar+'</div>';}else{this.opts.emptyHtml='<'+this.opts.markup+'></'+this.opts.markup+'>';}},_redefineOptions:function _redefineOptions(opts){for(var key in opts){this.opts[key]=opts[key];}},_isRootOption:function _isRootOption(){return typeof this.rootOpts['styles']!=='undefined';}});$R.add('module','editor',{init:function init(app){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.editor=app.editor;this.source=app.source;this.element=app.element;this.component=app.component;this.container=app.container;this.inspector=app.inspector;this.autoparser=app.autoparser;// local\nthis.placeholder=false;this.events=false;},// messages\nonenable:function onenable(){this.enable();},ondisable:function ondisable(){this.disable();},onenablefocus:function onenablefocus(){this._enableFocus();},oncontextmenu:function oncontextmenu(e){this.component.setOnEvent(e,true);},onclick:function onclick(e){this.component.setOnEvent(e);},onkeyup:function onkeyup(e){var data=this.inspector.parse(e.target);if(!data.isComponent()){this.component.clearActive();}},onenablereadonly:function onenablereadonly(){this._enableReadOnly();},ondisablereadonly:function ondisablereadonly(){this._disableReadOnly();},onautoparseobserve:function onautoparseobserve(){this.autoparser.observe();},onplaceholder:{build:function build(){this._buildPlaceholder();},toggle:function toggle(){this._togglePlacehodler();}},// public\nstart:function start(){this._build();this._buildEvents();this._buildOptions();this._buildAccesibility();},stop:function stop(){var $editor=this.editor.getElement();var $container=this.container.getElement();var classesEditor=['redactor-in','redactor-in-'+this.uuid,'redactor-structure','redactor-placeholder','notranslate'];if(this.opts.stylesClass!==''){classesEditor.push(this.opts.stylesClass);}var classesContainer=['redactor-focus','redactor-blur','redactor-over','redactor-styles-on','redactor-styles-off','redactor-toolbar-on','redactor-text-labeled-on','redactor-source-view'];$editor.removeAttr('spellcheck');$editor.removeAttr('dir');$editor.removeAttr('contenteditable');$editor.removeAttr('placeholder');$editor.removeAttr('data-gramm_editor');$editor.removeClass(classesEditor.join(' '));$container.removeClass(classesContainer.join(' '));this._destroyEvents();if($editor.get().classList.length===0)$editor.removeAttr('class');},enable:function enable(){var $editor=this.editor.getElement();var $container=this.container.getElement();$editor.addClass('redactor-in redactor-in-'+this.uuid);$editor.attr({'contenteditable':true});if(this.opts.structure){$editor.addClass('redactor-structure');}if(this.opts.toolbar&&!this.opts.air&&!this.opts.toolbarExternal){$container.addClass('redactor-toolbar-on');}// prevent editing\nthis._disableBrowsersEditing();},disable:function disable(){var $editor=this.editor.getElement();var $container=this.container.getElement();$editor.removeClass('redactor-in redactor-in-'+this.uuid);$editor.removeClass('redactor-structure');$editor.removeAttr('contenteditable');$container.addClass('redactor-toolbar-on');},// private\n_build:function _build(){var $editor=this.editor.getElement();var $element=this.element.getElement();var $container=this.container.getElement();$container.addClass('redactor-blur');if(!this.opts.grammarly){$editor.attr('data-gramm_editor',false);}if(this.opts.notranslate){$editor.addClass('notranslate');}if(this.opts.styles){$editor.addClass(this.opts.stylesClass);$container.addClass('redactor-styles-on');}else{$container.addClass('redactor-styles-off');}if(this.opts.buttonsTextLabeled){$container.addClass('redactor-text-labeled-on');}if(this.element.isType('textarea'))$element.before($editor);},_buildEvents:function _buildEvents(){this.events=$R.create('editor.events',this.app);},_buildOptions:function _buildOptions(){var $editor=this.editor.getElement();$editor.attr('dir',this.opts.direction);if(!this.opts.spellcheck)$editor.attr('spellcheck',false);if(this.opts.tabindex)$editor.attr('tabindex',this.opts.tabindex);if(this.opts.minHeight)$editor.css('min-height',this.opts.minHeight);if(this.opts.maxHeight)$editor.css('max-height',this.opts.maxHeight);if(this.opts.maxWidth)$editor.css({'max-width':this.opts.maxWidth,'margin':'auto'});},_buildAccesibility:function _buildAccesibility(){var $editor=this.editor.getElement();$editor.attr({'aria-labelledby':'redactor-voice-'+this.uuid,'role':'presentation'});},_buildPlaceholder:function _buildPlaceholder(){this.placeholder=$R.create('editor.placeholder',this.app);},_enableFocus:function _enableFocus(){if(this.opts.showSource)this._enableFocusSource();else this._enableFocusEditor();},_enableFocusSource:function _enableFocusSource(){var $source=this.source.getElement();if(this.opts.focus){$source.focus();$source.get().setSelectionRange(0,0);}else if(this.opts.focusEnd){$source.focus();}},_enableFocusEditor:function _enableFocusEditor(){if(this.opts.focus){setTimeout(this.editor.startFocus.bind(this.editor),100);}else if(this.opts.focusEnd){setTimeout(this.editor.endFocus.bind(this.editor),100);}},_togglePlacehodler:function _togglePlacehodler(){if(this.placeholder)this.placeholder.toggle();},_disableBrowsersEditing:function _disableBrowsersEditing(){try{// FF fix\ndocument.execCommand('enableObjectResizing',false,false);document.execCommand('enableInlineTableEditing',false,false);// IE prevent converting links\ndocument.execCommand(\"AutoUrlDetect\",false,false);// IE disable image resizing\nvar $editor=this.editor.getElement();var el=$editor.get();if(el.addEventListener)el.addEventListener('mscontrolselect',function(e){e.preventDefault();});else el.attachEvent('oncontrolselect',function(e){e.returnValue=false;});}catch(e){}},_destroyEvents:function _destroyEvents(){if(this.events){this.events.destroy();}},_enableReadOnly:function _enableReadOnly(){var $editor=this.editor.getElement();this._getEditables($editor).removeAttr('contenteditable');$editor.removeAttr('contenteditable');$editor.addClass('redactor-read-only');if(this.events)this.events.destroy();},_disableReadOnly:function _disableReadOnly(){var $editor=this.editor.getElement();this._getEditables($editor).attr({'contenteditable':true});$editor.removeClass('redactor-read-only');$editor.attr({'contenteditable':true});this._buildEvents();},_getEditables:function _getEditables($editor){return $editor.find('figcaption, td, th');}});$R.add('class','editor.placeholder',{init:function init(app){this.app=app;this.opts=app.opts;this.editor=app.editor;this.element=app.element;// build\nthis.build();},build:function build(){var $element=this.element.getElement();var $editor=this.editor.getElement();if(this.opts.placeholder!==false||$element.attr('placeholder')){var text=this.opts.placeholder!==false?this.opts.placeholder:$element.attr('placeholder');$editor.attr('placeholder',text);this.toggle();}},toggle:function toggle(){return this.editor.isEmpty(true)?this.show():this.hide();},show:function show(){var $editor=this.editor.getElement();$editor.addClass('redactor-placeholder');},hide:function hide(){var $editor=this.editor.getElement();$editor.removeClass('redactor-placeholder');}});$R.add('class','editor.events',{init:function init(app){this.app=app;this.opts=app.opts;this.$doc=app.$doc;this.uuid=app.uuid;this.source=app.source;this.editor=app.editor;this.cleaner=app.cleaner;this.container=app.container;this.insertion=app.insertion;this.inspector=app.inspector;this.selection=app.selection;this.component=app.component;// local\nthis.blurNamespace='.redactor-blur.'+this.uuid;this.eventsList=['paste','click','contextmenu','keydown','keyup','mouseup','touchstart','cut','copy','dragenter','dragstart','drop','dragover','dragleave'];// init\nthis._init();},destroy:function destroy(){var $editor=this.editor.getElement();$editor.off('.redactor-focus');this.$doc.off('keyup'+this.blurNamespace+' mousedown'+this.blurNamespace);// all events\nthis._loop('off');},focus:function focus(e){var $container=this.container.getElement();if(this.editor.isPasting()||$container.hasClass('redactor-focus'))return;$container.addClass('redactor-focus');$container.removeClass('redactor-blur');this.app.broadcast('observe',e);this.app.broadcast('focus',e);this.isFocused=true;this.isBlured=false;},blur:function blur(e){var $container=this.container.getElement();var $target=$R.dom(e.target);var targets=['.redactor-in-'+this.uuid,'.redactor-toolbar','.redactor-dropdown','.redactor-context-toolbar','#redactor-modal','#redactor-image-resizer'];this.app.broadcast('originalblur',e);if(this.app.stopBlur)return;if(!this.app.isStarted()||this.editor.isPasting())return;if($target.closest(targets.join(',')).length!==0)return;if(!this.isBlured&&!$container.hasClass('redactor-blur')){$container.removeClass('redactor-focus');$container.addClass('redactor-blur');this.app.broadcast('blur',e);this.isFocused=false;this.isBlured=true;}},cut:function cut(e){var current=this.selection.getCurrent();var data=this.inspector.parse(current);this.app.broadcast('state',e);if(this.component.isNonEditable(current)){this._passSelectionToClipboard(e,data,true);e.preventDefault();}},copy:function copy(e){var current=this.selection.getCurrent();var data=this.inspector.parse(current);this.app.broadcast('state',e);if(this.component.isNonEditable(current)){this._passSelectionToClipboard(e,data,false);e.preventDefault();}},drop:function drop(e){e=e.originalEvent||e;e.stopPropagation();this._removeOverClass();if(this.opts.dragUpload===false){e.preventDefault();return;}if(this.app.isDragComponentInside()){var $dragComponent=$R.dom(this.app.getDragComponentInside());var $component=$dragComponent.clone(true);this.insertion.insertToPoint(e,$component);$dragComponent.remove();this.app.setDragComponentInside(false);this.app.broadcast('state',e);this.app.broadcast('drop',e);this.app.broadcast('image.observe',e);e.preventDefault();return;}else if(this.app.isDragInside()&&this.opts.input){this.insertion.insertPoint(e);var dt=e.dataTransfer;var html=dt.getData('text/html');// clear selected\nvar range=this.selection.getRange();if(range){var blocks=this.selection.getBlocks();range.deleteContents();// remove empty blocks\nfor(var i=0;i<blocks.length;i++){if(blocks[i].innerHTML==='')$R.dom(blocks[i]).remove();}}// paste\n$R.create('input.paste',this.app,e,true,html,true);this.app.broadcast('state',e);this.app.broadcast('drop',e);this.app.setDragInside(false);e.preventDefault();return;}this.app.broadcast('state',e);this.app.broadcast('paste',e,e.dataTransfer);this.app.broadcast('drop',e);},dragenter:function dragenter(e){e.preventDefault();},dragstart:function dragstart(e){this.app.setDragComponentInside(false);this.app.setDragInside(false);var data=this.inspector.parse(e.target);if(data.isComponent()&&!data.isComponentEditable()&&!data.isFigcaption()){this.app.setDragComponentInside(data.getComponent());}else if(this.selection.is()&&!this.selection.isCollapsed()){// drag starts inside editor\nthis.app.setDragInside(true);this._setDragData(e);}this.app.broadcast('dragstart',e);},dragover:function dragover(e){this.app.broadcast('dragover',e);},dragleave:function dragleave(e){this.app.broadcast('dragleave',e);},paste:function paste(e){this.app.broadcast('paste',e);},contextmenu:function contextmenu(e){// chrome crashes fix\n//this.editor.disableNonEditables();\n//setTimeout(function()\n//{\n//  this.editor.enableNonEditables();\n// this.app.broadcast('contextmenu', e);\n//}.bind(this), 0);\n},click:function click(e){// triple click selection\nif(e.detail===3){e.preventDefault();var block=this.selection.getBlock();if(block){var range=document.createRange();range.selectNodeContents(block);this.selection.setRange(range);}}// observe bottom click & start click & outside click\nvar $target=$R.dom(e.target);if($target.hasClass('redactor-in')){var top=$target.offset().top;var pad=parseFloat($target.css('padding-bottom'));var height=$target.height();var posHeight=top+height-pad*2;if(posHeight<e.pageY){this.app.broadcast('bottomclick',e);}else if($target.hasClass('redactor-placeholder')){this.editor.startFocus(this.editor);}}this.app.broadcast('state',e);this.app.broadcast('click',e);},keydown:function keydown(e){this.app.broadcast('state',e);var stop=this.app.broadcast('keydown',e);if(stop===false){return e.preventDefault();}},keyup:function keyup(e){this.app.broadcast('keyup',e);},mouseup:function mouseup(e){this.app.broadcast('observe',e);this.app.broadcast('state',e);},touchstart:function touchstart(e){this.app.broadcast('observe',e);this.app.broadcast('state',e);},// private\n_init:function _init(){var $editor=this.editor.getElement();$editor.on('focus.redactor-focus click.redactor-focus',this.focus.bind(this));this.$doc.on('keyup'+this.blurNamespace+' mousedown'+this.blurNamespace,this.blur.bind(this));// all events\nthis._loop('on');},_removeOverClass:function _removeOverClass(){var $editor=this.editor.getElement();$editor.removeClass('over');},_loop:function _loop(func){var $editor=this.editor.getElement();for(var i=0;i<this.eventsList.length;i++){var event=this.eventsList[i]+'.redactor-events';var method=this.eventsList[i];$editor[func](event,this[method].bind(this));}},_passAllToClipboard:function _passAllToClipboard(e){var clipboard=e.clipboardData;var content=this.source.getCode();clipboard.setData('text/html',content);clipboard.setData('text/plain',content.toString().replace(/\\n$/,\"\"));},_passSelectionToClipboard:function _passSelectionToClipboard(e,data,remove){var clipboard=e.clipboardData;var node=data.getComponent();var $node=$R.dom(node);var $cloned=$node.clone();// clean\n$cloned.find('.redactor-component-caret').remove();$cloned.removeClass('redactor-component-active');$cloned.removeAttr('contenteditable');$cloned.removeAttr('tabindex');// html\nvar content=$cloned.get().outerHTML;if(remove)this.component.remove(node);clipboard.setData('text/html',content);clipboard.setData('text/plain',content.toString().replace(/\\n$/,\"\"));},_setDragData:function _setDragData(e){e=e.originalEvent||e;var dt=e.dataTransfer;dt.effectAllowed='move';dt.setData('text/Html',this.selection.getHtml());}});$R.add('module','container',{init:function init(app){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.lang=app.lang;this.element=app.element;this.container=app.container;},// public\nstart:function start(){this._build();this._buildAccesibility();},stop:function stop(){var $element=this.element.getElement();var $container=this.container.getElement();$container.after($element);$container.remove();$element.show();},// private\n_build:function _build(){var $element=this.element.getElement();var $container=this.container.getElement();$container.addClass('redactor-box');$container.attr('dir',this.opts.direction);if(this.element.isType('inline'))$container.addClass('redactor-inline');$element.after($container);$container.append($element);},_buildAccesibility:function _buildAccesibility(){var $container=this.container.getElement();var $label=$R.dom('<span />');$label.addClass('redactor-voice-label');$label.attr({'id':'redactor-voice-'+this.uuid,'aria-hidden':false});$label.html(this.lang.get('accessibility-help-label'));$container.prepend($label);}});$R.add('module','source',{init:function init(app){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.utils=app.utils;this.element=app.element;this.source=app.source;this.editor=app.editor;this.toolbar=app.toolbar;this.cleaner=app.cleaner;this.component=app.component;this.container=app.container;this.autoparser=app.autoparser;this.selection=app.selection;// local\nthis.syncedHtml='';},// messages\nonstartcode:function onstartcode(){var sourceContent=this.source.getStartedContent();var $editor=this.editor.getElement();var $source=this.source.getElement();// autoparse\nif(this.opts.autoparse&&this.opts.autoparseStart){sourceContent=this.autoparser.parse(sourceContent);}// started content\nvar startContent=this.cleaner.input(sourceContent,true,true);var syncContent=this.cleaner.output(startContent);// set content\n$editor.html(startContent);$source.val(syncContent);this.syncedHtml=syncContent;this.app.broadcast('placeholder.build');this.app.broadcast('autoparseobserve');// widget's scripts\nthis.component.executeScripts();},onstartcodeshow:function onstartcodeshow(){this.show();},ontrytosync:function ontrytosync(){this.sync();},onhardsync:function onhardsync(){var $editor=this.editor.getElement();var html=$editor.html();html=this.app.broadcast('syncBefore',html);html=this.cleaner.output(html);this._syncing(html);},// public\nstart:function start(){this._build();this._buildClasses();},stop:function stop(){var $element=this.element.getElement();var $source=this.source.getElement();$element.removeClass('redactor-source redactor-source-open');$source.off('input.redactor-source');$source.removeAttr('data-gramm_editor');if($source.get().classList.length===0)$source.removeAttr('class');if(!this.source.isNameGenerated())$element.removeAttr('name');if(!this.element.isType('textarea'))$source.remove();},getCode:function getCode(){return this.source.getCode();},// public\ntoggle:function toggle(){if(!this.opts.source)return;var $source=this.source.getElement();return $source.hasClass('redactor-source-open')?this.hide():this.show();},show:function show(){if(!this.opts.source)return;var $editor=this.editor.getElement();var $source=this.source.getElement();var $container=this.container.getElement();var html=$source.val();if(this.app.isStarted())html=this.app.broadcast('source.open',html);// get height\nvar editorHeight=$editor.height();$editor.hide();$source.height(editorHeight);$source.val(html.trim());$source.show();$source.addClass('redactor-source-open');$source.on('input.redactor-source-events',this._onChangedSource.bind(this));$source.on('keydown.redactor-source-events',this._onTabKey.bind(this));$source.on('focus.redactor-source-events',this._onFocus.bind(this));if(this.opts.source.hasOwnProperty('codemirror')){var opts=_typeof(this.opts.source.codemirror)==='object'?this.opts.source.codemirror:{};var codemirrorSrc=typeof this.opts.source.codemirrorSrc!=='undefined'?this.opts.source.codemirrorSrc:CodeMirror;this.codemirror=codemirrorSrc.fromTextArea($source.get(),opts);this.codemirror.setSize(null,editorHeight);this.codemirror.on('change',function(cm,changeObj){cm.save();});this.codemirror.on('change',this._onChangedSource.bind(this));}else{$container.addClass('redactor-source-view');}// buttons\nsetTimeout(function(){this._disableButtons();this._setActiveSourceButton();}.bind(this),100);if(this.app.isStarted())this.app.broadcast('source.opened');},hide:function hide(){if(!this.opts.source)return;var $editor=this.editor.getElement();var $source=this.source.getElement();var $container=this.container.getElement();var html=$source.val();if(this.opts.source.hasOwnProperty('codemirror')){html=this.codemirror.getValue();this.codemirror.toTextArea();}// clean\nhtml=this.cleaner.input(html,true);html=this.utils.isEmptyHtml(html)?this.opts.emptyHtml:html;html=this.app.broadcast('source.close',html);// buttons\nthis._enableButtons();this._setInactiveSourceButton();$source.hide();$source.removeClass('redactor-source-open');$source.off('.redactor-source-events');$editor.show();$editor.html(html);$container.removeClass('redactor-source-view');setTimeout(function(){this.editor.startFocus();// widget's scripts\nthis.component.executeScripts();}.bind(this),0);this.app.broadcast('source.closed');},sync:function sync(){var self=this;var $editor=this.editor.getElement();var html=$editor.html();html=this.app.broadcast('syncBefore',html);html=this.cleaner.output(html);if(this._isSync(html)){if(this.timeout)clearTimeout(this.timeout);this.timeout=setTimeout(function(){self._syncing(html);},200);}},// private\n_build:function _build(){var $source=this.source.getElement();var $element=this.element.getElement();$source.hide();if(!this.opts.grammarly){$source.attr('data-gramm_editor',false);}if(!this.element.isType('textarea')){$element.after($source);}},_buildClasses:function _buildClasses(){var $source=this.source.getElement();$source.addClass('redactor-source');},_syncing:function _syncing(html){html=this.app.broadcast('syncing',html);var $source=this.source.getElement();$source.val(html);this.app.broadcast('synced',html);this.app.broadcast('changed',html);},_isSync:function _isSync(html){if(this.syncedHtml!==html){this.syncedHtml=html;return true;}return false;},_onChangedSource:function _onChangedSource(){var $source=this.source.getElement();var html=$source.val();this.app.broadcast('changed',html);this.app.broadcast('source.changed',html);},_onTabKey:function _onTabKey(e){if(e.keyCode!==9)return true;e.preventDefault();var $source=this.source.getElement();var el=$source.get();var start=el.selectionStart;$source.val($source.val().substring(0,start)+\"    \"+$source.val().substring(el.selectionEnd));el.selectionStart=el.selectionEnd=start+4;},_onFocus:function _onFocus(){this.app.broadcast('sourcefocus');},_disableButtons:function _disableButtons(){this.toolbar.disableButtons();},_enableButtons:function _enableButtons(){this.toolbar.enableButtons();},_setActiveSourceButton:function _setActiveSourceButton(){var $btn=this.toolbar.getButton('html');$btn.enable();$btn.setActive();},_setInactiveSourceButton:function _setInactiveSourceButton(){var $btn=this.toolbar.getButton('html');$btn.setInactive();}});$R.add('module','observer',{init:function init(app){this.app=app;this.editor=app.editor;// local\nthis.observerUnit=false;},// public\nstart:function start(){if(window.MutationObserver){var $editor=this.editor.getElement();var el=$editor.get();this.observerUnit=this._build(el);this.observerUnit.observe(el,{attributes:true,subtree:true,childList:true,characterData:true,characterDataOldValue:true});}},stop:function stop(){if(this.observerUnit)this.observerUnit.disconnect();},// private\n_build:function _build(el){var self=this;return new MutationObserver(function(mutations){self._observe(mutations[mutations.length-1],el);});},_observe:function _observe(mutation,el){if(this.app.isReadOnly()||mutation.type==='attributes'&&mutation.target===el){return;}this.app.broadcast('observe');this.app.broadcast('trytosync');this.app.broadcast('placeholder.toggle');}});$R.add('module','clicktoedit',{init:function init(app){this.app=app;this.opts=app.opts;this.source=app.source;this.editor=app.editor;this.container=app.container;this.selection=app.selection;},// messages\nonstartclicktoedit:function onstartclicktoedit(){this.start();},onenablereadonly:function onenablereadonly(){if(!this.opts.clickToEdit)return;if(!this._isEnabled())this.stop();},ondisablereadonly:function ondisablereadonly(){if(!this.opts.clickToEdit)return;if(!this._isEnabled())this.start();},onstop:function onstop(){this.stop();},// public\nstart:function start(){this._build();},stop:function stop(){if(this.buttonSave)this.buttonSave.stop();if(this.buttonCancel)this.buttonCancel.stop();this._destroy();this.app.broadcast('disable');},enable:function enable(){this.app.broadcast('clickStart');var isEmpty=this.editor.isEmpty();if(!isEmpty)this.selection.saveMarkers();this._setFocus();this._destroy();this.app.broadcast('enable');this.buttonSave.enable();this.buttonCancel.enable();if(!isEmpty)this.selection.restoreMarkers();if(isEmpty)this.editor.focus();var $container=this.container.getElement();$container.addClass('redactor-clicktoedit-enabled');this.source.rebuildStartedContent();this.app.broadcast('startcode');this.app.broadcast('image.observe');},save:function save(e){if(e)e.preventDefault();var html=this.source.getCode();this.app.broadcast('disable');this.app.broadcast('clickSave',html);this.app.broadcast('clickStop');this.app.broadcast('toolbar.removeexternal');this._build();},cancel:function cancel(e){if(e)e.preventDefault();var html=this.saved;var $editor=this.editor.getElement();$editor.html(html);this.saved='';this.app.broadcast('disable');this.app.broadcast('clickCancel',html);this.app.broadcast('clickStop');this.app.broadcast('toolbar.removeexternal');this._build();},// private\n_build:function _build(){// buttons\nthis.buttonSave=$R.create('clicktoedit.button','save',this.app,this);this.buttonCancel=$R.create('clicktoedit.button','cancel',this.app,this);this.buttonSave.stop();this.buttonCancel.stop();var $editor=this.editor.getElement();var $container=this.container.getElement();$editor.on('click.redactor-click-to-edit mouseup.redactor-click-to-edit',this.enable.bind(this));$container.addClass('redactor-over');$container.removeClass('redactor-clicktoedit-enabled');},_isEnabled:function _isEnabled(){return this.container.getElement().hasClass('redactor-clicktoedit-enabled');},_destroy:function _destroy(){var $editor=this.editor.getElement();var $container=this.container.getElement();$editor.off('.redactor-click-to-edit');$container.removeClass('redactor-over redactor-clicktoedit-enabled');},_setFocus:function _setFocus(){this.saved=this.source.getCode();this.buttonSave.start();this.buttonCancel.start();}});$R.add('class','clicktoedit.button',{init:function init(type,app,context){this.app=app;this.opts=app.opts;this.toolbar=app.toolbar;this.context=context;// local\nthis.type=type;this.name=type==='save'?'clickToSave':'clickToCancel';this.objected=false;this.enabled=false;this.namespace='.redactor-click-to-edit';// build\nthis._build();},enable:function enable(){if(!this.objected)return;var data=this.opts[this.name];data.api='module.clicktoedit.'+this.type;this.toolbar.addButton(this.type,data);this.enabled=true;},start:function start(){if(this.objected)return;this.$button.off(this.namespace);this.$button.show();this.$button.on('click'+this.namespace,this.context[this.type].bind(this.context));},stop:function stop(){if(this.objected||!this.enabled)return;this.$button.hide();},// private\n_build:function _build(){this.objected=_typeof(this.opts[this.name])==='object';if(!this.objected){this.$button=$R.dom(this.opts[this.name]);this.enabled=true;}}});$R.add('module','statusbar',{init:function init(app){this.app=app;this.opts=app.opts;this.element=app.element;this.statusbar=app.statusbar;this.container=app.container;},// public\nstart:function start(){if(!this.element.isType('inline')){var $statusbar=this.statusbar.getElement();var $container=this.container.getElement();$statusbar.addClass('redactor-statusbar');$container.append($statusbar);}}});$R.add('module','contextbar',{init:function init(app){this.app=app;this.opts=app.opts;this.uuid=app.uuid;this.$win=app.$win;this.$doc=app.$doc;this.$body=app.$body;this.editor=app.editor;this.toolbar=app.toolbar;this.detector=app.detector;// local\nthis.$target=this.toolbar.isTarget()?this.toolbar.getTargetElement():this.$body;},// messages\nonstop:function onstop(){this.stop();},onenablereadonly:function onenablereadonly(){this.stop();},ondisablereadonly:function ondisablereadonly(){this.start();},oncontextbar:{close:function close(){this.close();}},// public\nstart:function start(){if(this.opts.toolbarContext){var $editor=this.editor.getElement();this._build();$editor.on('click.redactor-context mouseup.redactor-context',this.open.bind(this));if(this.opts.scrollTarget){$R.dom(this.opts.scrollTarget).on('scroll.redactor-context',this.close.bind(this));}else if(this.opts.maxHeight!==false){$editor.on('scroll.redactor-context',this.close.bind(this));}}},stop:function stop(){var $editor=this.editor.getElement();$editor.off('.redactor-context');this.$doc.off('.redactor-context');this.$win.off('.redactor-context');if(this.$contextbar)this.$contextbar.remove();if(this.opts.scrollTarget){$R.dom(this.opts.scrollTarget).off('.redactor-context');}},is:function is(){return this.$contextbar&&this.$contextbar.hasClass('open');},set:function set(e,node,buttons,position){this.$contextbar.html('');this.$el=$R.dom(node);// buttons\nfor(var key in buttons){var $btn=$R.create('contextbar.button',this.app,buttons[key]);if($btn.html()!==''){this.$contextbar.append($btn);}}// show\nvar pos=this._buildPosition(e,this.$el,position);this.$contextbar.css(pos);this.$contextbar.show();this.$contextbar.addClass('open');this.$doc.on('click.redactor-context mouseup.redactor-context',this.close.bind(this));this.$win.on('resize.redactor-context',this.close.bind(this));},open:function open(e){setTimeout(function(){this.app.broadcast('contextbar',e,this);}.bind(this),0);},close:function close(e){if(!this.$contextbar)return;if(e){var $target=$R.dom(e.target);if(this.$el&&$target.closest(this.$el).length!==0){return;}}this.$contextbar.hide();this.$contextbar.removeClass('open');this.$doc.off('.redactor.context');},// private\n_build:function _build(){this.$contextbar=$R.dom('<div>');this.$contextbar.attr('id','redactor-context-toolbar-'+this.uuid);this.$contextbar.attr('dir',this.opts.direction);this.$contextbar.addClass('redactor-context-toolbar');this.$contextbar.hide();this.$target.append(this.$contextbar);},_buildPosition:function _buildPosition(e,$el,position){var top,left;var isTarget=this.toolbar.isTarget();var offset=isTarget?$el.position():$el.offset();var width=$el.width();var height=$el.height();var barWidth=this.$contextbar.width();var barHeight=this.$contextbar.height();var docScrollTop=isTarget?this.$target.scrollTop()+this.$doc.scrollTop():this.$doc.scrollTop();var targetOffset=this.$target.offset();var leftFix=isTarget?targetOffset.left:0;var topFix=isTarget?targetOffset.top:0;if(!position){top=e.clientY+docScrollTop-barHeight;left=e.clientX-barWidth/2;}else if(position==='top'){top=offset.top-barHeight;left=offset.left+width/2-barWidth/2;}else if(position==='bottom'){top=offset.top+height;left=offset.left+width/2-barWidth/2;}if(left<0)left=0;return{top:top-topFix+'px',left:left-leftFix+'px'};}});$R.add('class','contextbar.button',{mixins:['dom'],init:function init(app,obj){this.app=app;// local\nthis.obj=obj;// init\nthis._init();},// private\n_init:function _init(){this.parse('<a>');if(typeof this.obj.title!=='string'){var url=this.obj.title.attr('href');this.attr('href',url);if(url.search(/^#/)===-1){this.attr('target','_blank');}this.text(this.obj.html||url);}else{this.attr('href','#');this._buildTitle();this._buildMessage();}},_buildTitle:function _buildTitle(){this.html(this.obj.title);},_buildMessage:function _buildMessage(){if(typeof this.obj.message!=='undefined'||typeof this.obj.api!=='undefined'){this.on('click',this._toggle.bind(this));}},_toggle:function _toggle(e){e.preventDefault();if(this.obj.message){this.app.broadcast(this.obj.message,this.obj.args);}else if(this.obj.api){this.app.api(this.obj.api,this.obj.args);}}});$R.add('module','toolbar',{init:function init(app){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.utils=app.utils;this.toolbar=app.toolbar;// local\nthis.buttons=[];this.toolbarModule=false;},// messages\nonsource:{open:function open(){if(!this.toolbar.isAir()&&this.toolbar.isFixed()){this.toolbarModule.resetPosition();}},opened:function opened(){if(this.toolbar.isAir()&&this.toolbarModule){this.toolbarModule.createSourceHelper();}// hide tooltips\nsetTimeout(function(){$R.dom('.re-button-tooltip-'+this.uuid).remove();}.bind(this),100);},close:function close(){if(this.toolbar.isAir()&&this.toolbarModule){this.toolbarModule.destroySourceHelper();}},closed:function closed(){if(this.toolbar.is()&&this.opts.air){this.toolbarModule.openSelected();}}},ontoolbar:{removeexternal:function removeexternal(){if(!this.opts.air&&this.opts.toolbarExternal&&this.opts.clickToEdit){$R.dom(this.opts.toolbarExternal).html('');}}},onobserve:function onobserve(){if(this.toolbar.is()){this.toolbar.observe();}},onfocus:function onfocus(){this._setExternalOnFocus();},onsourcefocus:function onsourcefocus(){this._setExternalOnFocus();},onempty:function onempty(){if(this.toolbar.isFixed()){this.toolbarModule.resetPosition();}},onenablereadonly:function onenablereadonly(){if(this.toolbar.isAir()){this.toolbarModule.close();}},// public\nstart:function start(){if(this.toolbar.is()){this._buildButtons();this._initToolbar();this._initButtons();}},stop:function stop(){if(this.toolbarModule){this.toolbarModule.stop();}// stop dropdowns\n$R.dom('.redactor-dropdown-'+this.uuid).remove();},// private\n_buildButtons:function _buildButtons(){this.buttons=this.opts.buttons.concat();this._buildImageButton();this._buildFileButton();this._buildSourceButton();this._buildAdditionalButtons();this._buildHiddenButtons();},_buildImageButton:function _buildImageButton(){if(!this.opts.imageUpload&&!this.opts.imageManagerJson)this.utils.removeFromArrayByValue(this.buttons,'image');},_buildFileButton:function _buildFileButton(){if(!this.opts.fileUpload)this.utils.removeFromArrayByValue(this.buttons,'file');},_buildSourceButton:function _buildSourceButton(){if(!this.opts.source)this.utils.removeFromArrayByValue(this.buttons,'html');},_buildAdditionalButtons:function _buildAdditionalButtons(){// end\nif(this.opts.buttonsAdd.length!==0){this.opts.buttonsAdd=this._removeExistButtons(this.opts.buttonsAdd);this.buttons=this.buttons.concat(this.opts.buttonsAdd);}// beginning\nif(this.opts.buttonsAddFirst.length!==0){this.opts.buttonsAddFirst=this._removeExistButtons(this.opts.buttonsAddFirst);this.buttons.unshift(this.opts.buttonsAddFirst);}var index,btns;// after\nif(this.opts.buttonsAddAfter!==false){index=this.buttons.indexOf(this.opts.buttonsAddAfter.after)+1;btns=this.opts.buttonsAddAfter.buttons;for(var i=0;i<btns.length;i++){this.buttons.splice(index+i,0,btns[i]);}}// before\nif(this.opts.buttonsAddBefore!==false){index=this.buttons.indexOf(this.opts.buttonsAddBefore.before)+1;btns=this.opts.buttonsAddBefore.buttons;for(var i=0;i<btns.length;i++){this.buttons.splice(index-(1-i),0,btns[i]);}}},_buildHiddenButtons:function _buildHiddenButtons(){if(this.opts.buttonsHide.length!==0){var buttons=this.opts.buttonsHide;for(var i=0;i<buttons.length;i++){this.utils.removeFromArrayByValue(this.buttons,buttons[i]);}}},_removeExistButtons:function _removeExistButtons(buttons){for(var i=0;i<buttons.length;i++){if(this.opts.buttons.indexOf(buttons[i])!==-1){this.utils.removeFromArrayByValue(buttons,buttons[i]);}}return buttons;},_setExternalOnFocus:function _setExternalOnFocus(){if(!this.opts.air&&this.opts.toolbarExternal){this.toolbarModule.setExternal();}},_initToolbar:function _initToolbar(){this.toolbarModule=this.opts.air?$R.create('toolbar.air',this.app):$R.create('toolbar.standard',this.app);},_initButtons:function _initButtons(){this.toolbar.setButtons(this.buttons);for(var i=0;i<this.buttons.length;i++){var name=this.buttons[i];if($R.buttons[name]){this.toolbar.addButton(name,$R.buttons[name],false,false,true);}}}});$R.add('class','toolbar.air',{init:function init(app){this.app=app;this.uuid=app.uuid;this.$doc=app.$doc;this.$win=app.$win;this.utils=app.utils;this.editor=app.editor;this.animate=app.animate;this.toolbar=app.toolbar;this.container=app.container;this.inspector=app.inspector;this.selection=app.selection;// local\nthis.clicks=0;// init\nthis._init();},// public\nstop:function stop(){var $wrapper=this.toolbar.getWrapper();$wrapper.remove();var $editor=this.editor.getElement();$editor.off('.redactor-air-trigger-'+this.uuid);this.$doc.off('.redactor-air-'+this.uuid);this.$doc.off('.redactor-air-trigger-'+this.uuid);this.toolbar.stopObservers();},createSourceHelper:function createSourceHelper(){this.$airHelper=$R.dom('<span>');this.$airHelper.addClass('redactor-air-helper');this.$airHelper.html('<i class=\"re-icon-html\"></i>');this.$airHelper.on('click',function(e){e.preventDefault();this.app.api('module.source.hide');}.bind(this));var $container=this.container.getElement();$container.append(this.$airHelper);},destroySourceHelper:function destroySourceHelper(){if(this.$airHelper)this.$airHelper.remove();},openSelected:function openSelected(){setTimeout(function(){if(this._isSelection())this._open(false);}.bind(this),0);},close:function close(){this.$doc.off('.redactor-air-'+this.uuid);var $toolbar=this.toolbar.getElement();$toolbar.removeClass('open');$toolbar.hide();},// private\n_init:function _init(){this.toolbar.create();var $wrapper=this.toolbar.getWrapper();var $toolbar=this.toolbar.getElement();var $editor=this.editor.getElement();var $container=this.container.getElement();$wrapper.addClass('redactor-toolbar-wrapper-air');$toolbar.addClass('redactor-air');//$toolbar.addClass('redactor-animate-hide');\n$toolbar.hide();$wrapper.append($toolbar);$container.prepend($wrapper);// open selected\nthis.openSelected();// events\nthis.$doc.on('mouseup.redactor-air-trigger-'+this.uuid,this._open.bind(this));$editor.on('keyup.redactor-air-trigger-'+this.uuid,this._openCmd.bind(this));},_isSelection:function _isSelection(){return this.selection.is()&&!this.selection.isCollapsed();},_isOpened:function _isOpened(){var $toolbar=this.toolbar.getElement();return $toolbar.hasClass('open');},_open:function _open(e){var target=e?e.target:false;var $el=e?$R.dom(e.target):false;var dataTarget=this.inspector.parse(target);var isComponent=dataTarget.isComponent()&&!dataTarget.isComponentType('table');var isFigcaption=dataTarget.isFigcaption();var isModalTarget=$el&&$el.closest('.redactor-modal').length!==0;var isButtonCall=e&&$el.closest('.re-button').length!==0;var isDropdownCall=e&&$el.closest('.redactor-dropdown').length!==0;if(isDropdownCall||isButtonCall||isModalTarget||isFigcaption||isComponent||this.toolbar.isContextBar()||!this._isSelection()){return;}var pos=this.selection.getPosition();setTimeout(function(){if(this.app.isReadOnly())return;if(this._isSelection())this._doOpen(pos);}.bind(this),1);},_openCmd:function _openCmd(){if(this.selection.isAll()){var $toolbar=this.toolbar.getElement();var pos=this.selection.getPosition();pos.top=pos.top<20?0:pos.top-$toolbar.height();pos.height=0;this._doOpen(pos);}},_doOpen:function _doOpen(pos){var $wrapper=this.toolbar.getWrapper();var $toolbar=this.toolbar.getElement();var $container=this.container.getElement();var containerOffset=$container.offset();var leftFix=0;var winWidth=this.$win.width();var toolbarWidth=$toolbar.width();if(winWidth<pos.left+toolbarWidth){var selPos=this.selection.getPosition();leftFix=toolbarWidth-selPos.width;}$wrapper.css({left:pos.left-containerOffset.left-leftFix+'px',top:pos.top-containerOffset.top+pos.height+this.$doc.scrollTop()+'px'});this.app.broadcast('airOpen');$toolbar.addClass('open');$toolbar.show();this.$doc.on('click.redactor-air-'+this.uuid,this._close.bind(this));this.$doc.on('keydown.redactor-air-'+this.uuid,this._close.bind(this));this.app.broadcast('airOpened');},_close:function _close(e){var $el=e?$R.dom(e.target):false;var isDropdownCall=e&&$el.closest('[data-dropdown], .redactor-dropdown-not-close').length!==0;var isButtonCall=!isDropdownCall&&e&&$el.closest('.re-button').length!==0;if(!isButtonCall&&(isDropdownCall||!this._isOpened())){return;}// close\nthis.app.broadcast('airClose');this.close();this.app.broadcast('airClosed');}});$R.add('class','toolbar.fixed',{init:function init(app){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.$doc=app.$doc;this.$win=app.$win;this.editor=app.editor;this.toolbar=app.toolbar;this.detector=app.detector;this.container=app.container;// init\nthis._init();},// public\nstop:function stop(){this.$fixedTarget.off('.redactor-toolbar-'+this.uuid);this.$win.off('.redactor-toolbar-'+this.uuid);},reset:function reset(){var $toolbar=this.toolbar.getElement();var $wrapper=this.toolbar.getWrapper();$wrapper.css('height','');$toolbar.removeClass('redactor-toolbar-fixed');$toolbar.css({position:'',top:'',left:'',width:''});var dropdown=this.toolbar.getDropdown();if(dropdown)dropdown.updatePosition();},// private\n_init:function _init(){this.$fixedTarget=this.toolbar.isTarget()?this.toolbar.getTargetElement():this.$win;this._doFixed();if(this.toolbar.isTarget()){this.$win.on('scroll.redactor-toolbar-'+this.uuid,this._doFixed.bind(this));this.$win.on('resize.redactor-toolbar-'+this.uuid,this._doFixed.bind(this));}this.$fixedTarget.on('scroll.redactor-toolbar-'+this.uuid,this._doFixed.bind(this));this.$fixedTarget.on('resize.redactor-toolbar-'+this.uuid,this._doFixed.bind(this));},_doFixed:function _doFixed(){var $editor=this.editor.getElement();var $container=this.container.getElement();var $toolbar=this.toolbar.getElement();var $wrapper=this.toolbar.getWrapper();if(this.editor.isSourceMode()){return;}var $targets=$container.parents().filter(function(node){return getComputedStyle(node,null).display==='none'?node:false;});// has hidden parent\nif($targets.length!==0)return;var isHeight=$editor.height()<100;var isEmpty=this.editor.isEmpty();if(isHeight||isEmpty){this.reset();return;}if(this.editor.isSourceMode()){return;}var toolbarHeight=$toolbar.height();var toleranceEnd=60;var containerOffset=this.toolbar.isTarget()?$container.position():$container.offset();var boxOffset=containerOffset.top;var boxEnd=boxOffset+$container.height()-toleranceEnd;var scrollOffset=this.$fixedTarget.scrollTop()+this.opts.toolbarFixedTopOffset;var top=!this.toolbar.isTarget()?0:this.$fixedTarget.offset().top-this.$win.scrollTop();if(this.toolbar.isTarget()&&this.$fixedTarget.css('position')==='fixed'){var bs=this.$fixedTarget.hasClass('modal')&&this.$fixedTarget.hasClass('fade');var bsFix=bs?$container.closest('.modal-dialog').position().top:0;top=this.$fixedTarget.scrollTop()-bsFix;}if(scrollOffset>boxOffset&&scrollOffset<boxEnd){var position=this.detector.isDesktop()?'fixed':'absolute';top=this.detector.isDesktop()?top:scrollOffset-boxOffset;if(this.detector.isMobile()){if(this.fixedScrollTimeout){clearTimeout(this.fixedScrollTimeout);}$toolbar.hide();this.fixedScrollTimeout=setTimeout(function(){$toolbar.show();},250);}$wrapper.height(toolbarHeight);$toolbar.addClass('redactor-toolbar-fixed');if($container.hasClass('redactor-box-fullscreen')){$toolbar.css({position:position,top:'0px',width:$container.width()+'px'});}else{$toolbar.css({position:position,top:top+this.opts.toolbarFixedTopOffset+'px',width:$container.width()+'px'});}var dropdown=this.toolbar.getDropdown();if(dropdown)dropdown.updatePosition();this.app.broadcast('toolbar.fixed');}else{this.reset();this.app.broadcast('toolbar.unfixed');}}});$R.add('class','toolbar.standard',{init:function init(app){this.app=app;this.opts=app.opts;this.uuid=app.uuid;this.$body=app.$body;this.toolbar=app.toolbar;this.container=app.container;// local\nthis.isExternalMultiple=false;this.toolbarFixed=false;// init\nthis._init();},// public\nstop:function stop(){var $wrapper=this.toolbar.getWrapper();$wrapper.remove();if(this.toolbarFixed)this.toolbarFixed.stop();if(this.opts.toolbarExternal)this._findToolbars();this.toolbar.stopObservers();this.$body.find('.re-button-tooltip-'+this.uuid).remove();},setExternal:function setExternal(){this._findToolbars();if(this.isExternalMultiple){this.$toolbars.hide();var $current=this.$external.find('.redactor-toolbar-external-'+this.uuid);$current.show();}},resetPosition:function resetPosition(){if(this.toolbarFixed)this.toolbarFixed.reset();},// private\n_init:function _init(){this._build();if(this.opts.toolbarExternal){this._buildExternal();}else{this._buildFixed();var $toolbar=this.toolbar.getElement();$toolbar.show();}},_build:function _build(){this.toolbar.create();var $wrapper=this.toolbar.getWrapper();var $toolbar=this.toolbar.getElement();$wrapper.addClass('redactor-toolbar-wrapper');$toolbar.addClass('redactor-toolbar');$toolbar.hide();$wrapper.append($toolbar);if(!this.opts.toolbarExternal){var $container=this.container.getElement();$container.prepend($wrapper);}},_buildExternal:function _buildExternal(){this._initExternal();this._findToolbars();if(this.isExternalMultiple){this._hideToolbarsExceptFirst();}else{var $toolbar=this.toolbar.getElement();$toolbar.show();}},_buildFixed:function _buildFixed(){if(this.opts.toolbarFixed){this.toolbarFixed=$R.create('toolbar.fixed',this.app);}},_initExternal:function _initExternal(){var $toolbar=this.toolbar.getElement();var $wrapper=this.toolbar.getElement();$toolbar.addClass('redactor-toolbar-external redactor-toolbar-external-'+this.uuid);this.$external=$R.dom(this.opts.toolbarExternal);this.$external.append($wrapper);},_findToolbars:function _findToolbars(){this.$toolbars=this.$external.find('.redactor-toolbar-external');this.isExternalMultiple=this.$toolbars.length>1;},_hideToolbarsExceptFirst:function _hideToolbarsExceptFirst(){this.$toolbars.hide();var $first=this.$toolbars.first();$first.show();}});$R.add('module','line',{init:function init(app){this.app=app;this.lang=app.lang;this.component=app.component;this.inspector=app.inspector;this.insertion=app.insertion;},// messages\noncontextbar:function oncontextbar(e,contextbar){var data=this.inspector.parse(e.target);if(data.isComponentType('line')){var node=data.getComponent();var buttons={\"remove\":{title:this.lang.get('delete'),api:'module.line.remove',args:node}};contextbar.set(e,node,buttons,'bottom');}},// public\ninsert:function insert(){var line=this.component.create('line');this.insertion.insertRaw(line);},remove:function remove(node){this.component.remove(node);}});$R.add('class','line.component',{mixins:['dom','component'],init:function init(app,el){this.app=app;// init\nreturn el&&el.cmnt!==undefined?el:this._init(el);},// private\n_init:function _init(el){var wrapper,element;if(typeof el!=='undefined'){var $node=$R.dom(el);var node=$node.get();if(node.tagName==='HR')element=node;else if(node.tagName==='FIGURE'){wrapper=node;element=$node.find('hr').get();}}this._buildWrapper(wrapper);this._buildElement(element);this._initWrapper();},_buildElement:function _buildElement(node){if(node){this.$element=$R.dom(node);}else{this.$element=$R.dom('<hr>');this.append(this.$element);}},_buildWrapper:function _buildWrapper(node){node=node||'<figure>';this.parse(node);},_initWrapper:function _initWrapper(){this.addClass('redactor-component');this.attr({'data-redactor-type':'line','tabindex':'-1','contenteditable':false});}});$R.add('module','link',{modals:{'link':'<form action=\"\"> \\\n                <div class=\"form-item\"> \\\n                    <label for=\"modal-link-url\">URL <span class=\"req\">*</span></label> \\\n                    <input type=\"text\" id=\"modal-link-url\" name=\"url\"> \\\n                </div> \\\n                <div class=\"form-item\"> \\\n                    <label for=\"modal-link-text\">## text ##</label> \\\n                    <input type=\"text\" id=\"modal-link-text\" name=\"text\"> \\\n                </div> \\\n                <div class=\"form-item form-item-title\"> \\\n                    <label for=\"modal-link-title\">## title ##</label> \\\n                    <input type=\"text\" id=\"modal-link-title\" name=\"title\"> \\\n                </div> \\\n                <div class=\"form-item form-item-target\"> \\\n                    <label class=\"checkbox\"> \\\n                        <input type=\"checkbox\" name=\"target\"> ## link-in-new-tab ## \\\n                    </label> \\\n                </div> \\\n            </form>'},init:function init(app){this.app=app;this.opts=app.opts;this.lang=app.lang;this.caret=app.caret;this.utils=app.utils;this.inline=app.inline;this.editor=app.editor;this.inspector=app.inspector;this.insertion=app.insertion;this.selection=app.selection;// local\nthis.isCurrentLink=false;this.currentText=false;},// messages\nonmodal:{link:{open:function open($modal,$form){this._setFormData($form,$modal);},opened:function opened($modal,$form){this._setFormFocus($form);},update:function update($modal,$form){var data=$form.getData();if(this._validateData($form,data)){this._update(data);}},insert:function insert($modal,$form){var data=$form.getData();if(this._validateData($form,data)){this._insert(data);}},unlink:function unlink(){this._unlink();}}},onbutton:{link:{observe:function observe(button){this._observeButton(button);}}},ondropdown:{link:{observe:function observe(dropdown){this._observeUnlink(dropdown);this._observeEdit(dropdown);}}},oncontextbar:function oncontextbar(e,contextbar){var current=this._getCurrent();var data=this.inspector.parse(current);if(data.isLink()||data.isFile()){var node=data.isFile()?data.getFile():data.getLink();var $el=$R.dom(node);var $point=$R.dom('<a>');var url=$el.attr('href');$point.text(this._truncateText(url));$point.attr('href',url);$point.attr('target','_blank');var buttons={\"link\":{title:$point,html:this._truncateText(url)},\"edit\":{title:this.lang.get('edit'),api:'module.link.open'},\"unlink\":{title:this.lang.get('unlink'),api:'module.link.unlink'}};contextbar.set(e,node,buttons,'bottom');}},// public\nopen:function open(){this.$link=this._buildCurrent();this.app.api('module.modal.build',this._getModalData());},insert:function insert(data){this._insert(data);},update:function update(data){this._update(data);},unlink:function unlink(){this._unlink();},// private\n_observeButton:function _observeButton(button){var current=this.selection.getCurrent();var data=this.inspector.parse(current);if(data.isPre()||data.isCode()){button.disable();}else{button.enable();}},_observeUnlink:function _observeUnlink(dropdown){var $item=dropdown.getItem('unlink');var links=this._getLinks();if(links.length===0)$item.disable();else $item.enable();},_observeEdit:function _observeEdit(dropdown){var current=this._getCurrent();var $item=dropdown.getItem('link');var data=this.inspector.parse(current);var title=data.isLink()||data.isFile()?this.lang.get('link-edit'):this.lang.get('link-insert');$item.setTitle(title);},_unlink:function _unlink(){this.app.api('module.modal.close');var elms=[];var nodes=this._getLinks();this.selection.save();for(var i=0;i<nodes.length;i++){var $link=$R.create('link.component',this.app,nodes[i]);elms.push(this.selection.getElement(nodes[i]));$link.unwrap();// callback\nthis.app.broadcast('link.deleted',$link);}this.selection.restore();// normalize\nfor(var i=0;i<elms.length;i++){var el=elms[i]?elms[i]:this.editor.getElement();this.utils.normalizeTextNodes(el);}this._resetCurrent();},_update:function _update(data){this.app.api('module.modal.close');var nodes=this._getLinks();this._setLinkData(nodes,data,'updated');this._resetCurrent();// callback\nthis.app.broadcast('link.changed',nodes);},_insert:function _insert(data){this.app.api('module.modal.close');var links=this._getLinks();if(!this._insertSingle(links,data)){this._removeInSelection(links);this._insertMultiple(data);}this._resetCurrent();},_removeInSelection:function _removeInSelection(links){this.selection.save();for(var i=0;i<links.length;i++){var $link=$R.create('link.component',this.app,links[i]);var $clonedLink=$link.clone();$link.unwrap();// callback\nthis.app.broadcast('link.deleted',$clonedLink);}this.selection.restore();},_insertMultiple:function _insertMultiple(data){var range=this.selection.getRange();if(range&&this._isCurrentTextChanged(data)){this._deleteContents(range);}var nodes=this.inline.format({tag:'a'});this._setLinkData(nodes,data,'inserted');},_insertSingle:function _insertSingle(links,data){var inline=this.selection.getInline();if(links.length===1&&links[0].textContext===this.selection.getText()||inline&&inline.tagName==='A'){var $link=$R.create('link.component',this.app,links[0]);$link.setData(data);this.caret.setAfter($link);// callback\nthis.app.broadcast('link.inserted',$link);return true;}return false;},_setLinkData:function _setLinkData(nodes,data,type){data.text=data.text.trim()===''?this._truncateText(data.url):data.text;var isTextChanged=!this.currentText||this.currentText!==data.text;this.selection.save();for(var i=0;i<nodes.length;i++){var $link=$R.create('link.component',this.app,nodes[i]);var linkData={};if(data.text&&isTextChanged)linkData.text=data.text;if(data.url)linkData.url=data.url;if(data.title!==undefined)linkData.title=data.title;if(data.target!==undefined)linkData.target=data.target;$link.setData(linkData);// callback\nthis.app.broadcast('link.'+type,$link);}setTimeout(this.selection.restore.bind(this.selection),0);},_deleteContents:function _deleteContents(range){var html=this.selection.getHtml();var parsed=this.utils.parseHtml(html);var first=parsed.nodes[0];if(first&&first.nodeType!==3){var tag=first.tagName.toLowerCase();var container=document.createElement(tag);this.insertion.insertNode(container,'start');}else{range.deleteContents();}},_getModalData:function _getModalData(){var commands;if(this._isLink()){commands={update:{title:this.lang.get('save')},unlink:{title:this.lang.get('unlink'),type:'danger'},cancel:{title:this.lang.get('cancel')}};}else{commands={insert:{title:this.lang.get('insert')},cancel:{title:this.lang.get('cancel')}};}var modalData={name:'link',title:this._isLink()?this.lang.get('link-edit'):this.lang.get('link-insert'),handle:this._isLink()?'update':'insert',commands:commands};return modalData;},_isLink:function _isLink(){return this.currentLink;},_isCurrentTextChanged:function _isCurrentTextChanged(data){return this.currentText&&this.currentText!==data.text;},_buildCurrent:function _buildCurrent(){var current=this._getCurrent();var data=this.inspector.parse(current);var $link;if(data.isLink()||data.isFile()){this.currentLink=true;$link=data.isFile()?data.getFile():data.getLink();$link=$R.create('link.component',this.app,$link);}else{this.currentLink=false;$link=$R.create('link.component',this.app);var linkData={text:this.selection.getText()};$link.setData(linkData);}return $link;},_getCurrent:function _getCurrent(){return this.selection.getInlinesAllSelected({tags:['a']})[0];},_getLinks:function _getLinks(){var links=this.selection.getInlines({all:true,tags:['a']});var arr=[];for(var i=0;i<links.length;i++){var data=this.inspector.parse(links[i]);if(data.isLink()||data.isFile()){arr.push(links[i]);}}return arr;},_resetCurrent:function _resetCurrent(){this.isCurrentLink=false;this.currentText=false;},_truncateText:function _truncateText(url){return url&&url.length>this.opts.linkSize?url.substring(0,this.opts.linkSize)+'...':url;},_validateData:function _validateData($form,data){return data.url.trim()===''?$form.setError('url'):true;},_setFormFocus:function _setFormFocus($form){$form.getField('url').focus();},_setFormData:function _setFormData($form,$modal){var linkData=this.$link.getData();var data={url:linkData.url,text:linkData.text,title:linkData.title,target:this.opts.linkTarget||linkData.target};if(!this.opts.linkNewTab)$modal.find('.form-item-target').hide();if(!this.opts.linkTitle)$modal.find('.form-item-title').hide();$form.setData(data);this.currentText=$form.getField('text').val();}});$R.add('class','link.component',{mixins:['dom','component'],init:function init(app,el){this.app=app;this.opts=app.opts;// local\nthis.reUrl=/^(?:(?:(?:https?|ftp):)?\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;// init\nreturn el&&el.cmnt!==undefined?el:this._init(el);},// public\nsetData:function setData(data){for(var name in data){this._set(name,data[name]);}},getData:function getData(){var names=['url','text','target','title'];var data={};for(var i=0;i<names.length;i++){data[names[i]]=this._get(names[i]);}return data;},// private\n_init:function _init(el){var $el=$R.dom(el);if(el===undefined){this.parse('<a>');}else{this.parse($el);}},_set:function _set(name,value){this['_set_'+name](value);},_get:function _get(name){return this['_get_'+name]();},_get_target:function _get_target(){return this.attr('target')?this.attr('target'):false;},_get_url:function _get_url(){return this.attr('href');},_get_title:function _get_title(){return this.attr('title');},_get_text:function _get_text(){return this._getContext().text();},_getContext:function _getContext(){return this._findDeepestChild(this).element;},_set_target:function _set_target(target){if(target===false)this.removeAttr('target');else if(target){this.attr('target',target===true?'_blank':target);}},_set_text:function _set_text(text){this._getContext().html(text);},_set_title:function _set_title(title){if(!title||title==='')this.removeAttr('title');else this.attr('title',title);},_set_url:function _set_url(url){if(this.opts.linkValidation){url=this._cleanUrl(url);if(this._isMailto(url)){url='mailto:'+url.replace('mailto:','');}else if(this._isUrl(url)&&url.search(/^(ftp|https?)/i)===-1){url='http://'+url.replace(/(ftp|https?):\\/\\//i,'');}}this.attr('href',url);},_isMailto:function _isMailto(url){return url.search('@')!==-1&&/(ftp|https?):\\/\\//i.test(url)===false;},_isUrl:function _isUrl(url){return this.reUrl.test(url);},_cleanUrl:function _cleanUrl(url){url=url.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&#039;\");return url.trim().replace(/[^\\W\\w\\D\\d+&\\'@#/%?=~_|!:,.;\\(\\)]/gi,'');},_findDeepestChild:function _findDeepestChild(parent){var result={depth:0,element:parent};parent.children().each(function(node){var child=$R.dom(node);if(node.outerHTML!==parent.html()){return;}else{var childResult=this._findDeepestChild(child);if(childResult.depth+1>result.depth){result={depth:1+childResult.depth,element:childResult.element};}}}.bind(this));return result;}});$R.add('module','modal',{init:function init(app){this.app=app;this.uuid=app.uuid;this.lang=app.lang;this.$doc=app.$doc;this.$win=app.$win;this.$body=app.$body;this.utils=app.utils;this.editor=app.editor;this.animate=app.animate;this.detector=app.detector;this.selection=app.selection;// local\nthis.$box=false;this.$modal=false;this.selectionMarkers=false;// defaults\nthis.defaults={name:false,url:false,title:false,width:'600px',height:false,handle:false,commands:false};},// public\nbuild:function build(data){this._open(data);},close:function close(){this._close();},onstop:function onstop(){this.$body.find('#redactor-modal-'+this.uuid).remove();this.$body.find('#redactor-overlay-'+this.uuid).remove();},stop:function stop(){if(this.$box){this.$box.remove();this.$box=false;this.$modal=false;}if(this.$overlay){this.$overlay.remove();}this.$doc.off('.redactor.modal');this.$win.off('.redactor.modal');},resize:function resize(){this.$modal.setWidth(this.p.width);this.$modal.updatePosition();},// private\n_isOpened:function _isOpened(){return this.$modal&&this.$modal.hasClass('open');},_open:function _open(data){this._buildDefaults(data);if(this.p.url)this._openUrl();else this._openTemplate();},_openUrl:function _openUrl(){$R.ajax.post({url:this.p.url,success:this._doOpen.bind(this)});},_openTemplate:function _openTemplate(){if(typeof $R.modals[this.p.name]!=='undefined'){var template=this.lang.parse($R.modals[this.p.name]);this._doOpen(template);}},_doOpen:function _doOpen(template){this.stop();if(this.selection.isCollapsed()){this.selection.save();this.selectionMarkers=false;}else{this.selection.saveMarkers();this.selectionMarkers=true;}if(!this.detector.isDesktop()){document.activeElement.blur();}this._createModal(template);this._buildModalBox();this._buildOverlay();this._buildModal();this._buildModalForm();this._buildModalCommands();this._broadcast('open');this.$modal.updatePosition();this._buildModalTabs();this.animate.start(this.$box,'fadeIn',this._opened.bind(this));this.animate.start(this.$overlay,'fadeIn');},_opened:function _opened(){this.$modal.addClass('open');this.$box.on('mousedown.redactor.modal',this._close.bind(this));this.$doc.on('keyup.redactor.modal',this._handleEscape.bind(this));this.$win.on('resize.redactor.modal',this.resize.bind(this));this.$modal.getBody().find('input[type=text],input[type=url],input[type=email]').on('keydown.redactor.modal',this._handleEnter.bind(this));// fix bootstrap modal focus\nif(window.jQuery)jQuery(document).off('focusin.modal');this._broadcast('opened');},_close:function _close(e){if(!this.$box||!this._isOpened())return;if(e){if(!this._needToClose(e.target)){return;}e.stopPropagation();e.preventDefault();}if(this.selectionMarkers)this.selection.restoreMarkers();else this.selection.restore();this.selectionMarkers=false;this._broadcast('close');this.animate.start(this.$box,'fadeOut',this._closed.bind(this));this.animate.start(this.$overlay,'fadeOut');},_closed:function _closed(){this.$modal.removeClass('open');this.$box.off('.redactor.modal');this.$doc.off('.redactor.modal');this.$win.off('.redactor.modal');this._broadcast('closed');},_createModal:function _createModal(template){this.$modal=$R.create('modal.element',this.app,template);},_broadcast:function _broadcast(message){this.app.broadcast('modal.'+message,this.$modal,this.$modalForm);this.app.broadcast('modal.'+this.p.name+'.'+message,this.$modal,this.$modalForm);},_buildDefaults:function _buildDefaults(data){this.p=$R.extend({},this.defaults,data);},_buildModalBox:function _buildModalBox(){this.$box=$R.dom('<div>');this.$box.attr('id','redactor-modal-'+this.uuid);this.$box.addClass('redactor-modal-box redactor-animate-hide');this.$box.html('');this.$body.append(this.$box);},_buildOverlay:function _buildOverlay(){this.$overlay=$R.dom('#redactor-overlay-'+this.uuid);if(this.$overlay.length===0){this.$overlay=$R.dom('<div>');this.$overlay.attr('id','redactor-overlay-'+this.uuid);this.$overlay.addClass('redactor-overlay redactor-animate-hide');this.$body.prepend(this.$overlay);}},_buildModal:function _buildModal(){this.$box.append(this.$modal);this.$modal.setTitle(this.p.title);this.$modal.setHeight(this.p.height);this.$modal.setWidth(this.p.width);},_buildModalCommands:function _buildModalCommands(){if(this.p.commands){var commands=this.p.commands;var $footer=this.$modal.getFooter();for(var key in commands){var $btn=$R.dom('<button>');$btn.html(commands[key].title);$btn.attr('data-command',key);// cancel\nif(key==='cancel'){$btn.attr('data-action','close');$btn.addClass('redactor-button-unstyled');}// danger\nif(typeof commands[key].type!=='undefined'&&commands[key].type==='danger'){$btn.addClass('redactor-button-danger');}$btn.on('click',this._handleCommand.bind(this));$footer.append($btn);}}},_buildModalTabs:function _buildModalTabs(){var $body=this.$modal.getBody();var $tabs=$body.find('.redactor-modal-tab');var $box=$body.find('.redactor-modal-tabs');if($tabs.length>1){$box=$box.length===0?$R.dom('<div>'):$box.html('');$box.addClass('redactor-modal-tabs');$tabs.each(function(node,i){var $node=$R.dom(node);var $item=$R.dom('<a>');$item.attr('href','#');$item.attr('rel',i);$item.text($node.attr('data-title'));$item.on('click',this._showTab.bind(this));if(i===0){$item.addClass('active');}$box.append($item);}.bind(this));$body.prepend($box);}if($tabs.length===1){$tabs.show();}},_buildModalForm:function _buildModalForm(){this.$modalForm=$R.create('modal.form',this.app,this.$modal.getForm());},_showTab:function _showTab(e){e.preventDefault();var $el=$R.dom(e.target);var index=$el.attr('rel');var $body=this.$modal.getBody();var $tabs=$body.find('.redactor-modal-tab');$tabs.hide();$tabs.eq(index).show();$body.find('.redactor-modal-tabs a').removeClass('active');$el.addClass('active');},_needToClose:function _needToClose(el){var $target=$R.dom(el);if($target.attr('data-action')==='close'||this.$modal.isCloseNode(el)||$target.closest('.redactor-modal').length===0){return true;}return false;},_handleCommand:function _handleCommand(e){var $btn=$R.dom(e.target).closest('button');var command=$btn.attr('data-command');if(command!=='cancel')e.preventDefault();this._broadcast(command);},_handleEnter:function _handleEnter(e){if(e.which===13){if(this.p.handle){e.preventDefault();this._broadcast(this.p.handle);}}},_handleEscape:function _handleEscape(e){if(e.which===27)this._close();}});$R.add('class','modal.element',{mixins:['dom'],init:function init(app,template){this.app=app;this.opts=app.opts;this.$win=app.$win;// init\nthis._init(template);},// get\ngetForm:function getForm(){return this.find('form');},getHeader:function getHeader(){return this.$modalHeader;},getBody:function getBody(){return this.$modalBody;},getFooter:function getFooter(){return this.$modalFooter;},// set\nsetTitle:function setTitle(title){if(title)this.$modalHeader.html(title);},setWidth:function setWidth(width){width=parseInt(width)>=this.$win.width()?'96%':width;this.css('max-width',width);},setHeight:function setHeight(height){if(height!==false)this.$modalBody.css('height',height);},// update\nupdatePosition:function updatePosition(){var width=this.width();this.css({'left':'50%','margin-left':'-'+width/2+'px'});var windowHeight=this.$win.height();var height=this.height();var marginTop=windowHeight/2-height/2;if(height<windowHeight&&marginTop!==0){this.css('margin-top',marginTop+'px');}},// is\nisCloseNode:function isCloseNode(el){return el===this.$modalClose.get();},// private\n_init:function _init(template){this._build();this._buildClose();this._buildHeader();this._buildBody();this._buildFooter();this._buildTemplate(template);},_build:function _build(){this.parse('<div>');this.addClass('redactor-modal');this.attr('dir',this.opts.direction);},_buildClose:function _buildClose(){this.$modalClose=$R.dom('<span>');this.$modalClose.addClass('redactor-close');this.append(this.$modalClose);},_buildHeader:function _buildHeader(){this.$modalHeader=$R.dom('<div>');this.$modalHeader.addClass('redactor-modal-header');this.append(this.$modalHeader);},_buildBody:function _buildBody(){this.$modalBody=$R.dom('<div>');this.$modalBody.addClass('redactor-modal-body');this.append(this.$modalBody);},_buildFooter:function _buildFooter(){this.$modalFooter=$R.dom('<div>');this.$modalFooter.addClass('redactor-modal-footer');this.append(this.$modalFooter);},_buildTemplate:function _buildTemplate(template){this.$modalBody.html(template);}});$R.add('class','modal.form',{mixins:['dom'],init:function init(app,element){this.app=app;// build\nthis.build(element);},// public\nbuild:function build(element){this.parse(element);},getData:function getData(){var data={};this.find('[name]').each(function(node){var $node=$R.dom(node);data[$node.attr('name')]=$node.val();});return data;},setData:function setData(data){this.find('[name]').each(function(node){var $node=$R.dom(node);var name=$node.attr('name');if(data.hasOwnProperty(name)){if(node.type&&node.type==='checkbox')node.checked=data[name];else $node.val(data[name]);}});},getField:function getField(name){return this.find('[name='+name+']');},setError:function setError(name){var $el=this.getField(name);$el.addClass('error');$el.one(this._getFieldEventName($el.get()),this._clearError);return false;},// private\n_clearError:function _clearError(){return $R.dom(this).removeClass('error');},_getFieldEventName:function _getFieldEventName(el){return el.tagName==='SELECT'||el.type==='checkbox'||el.type==='radio'?'change':'keyup';}});$R.add('module','block',{init:function init(app){this.app=app;this.block=app.block;},// public\nformat:function format(args){var nodes=this.block.format(args);// callback\nthis.app.broadcast('format','block',nodes);},clearformat:function clearformat(){this.block.clearFormat();},clearstyle:function clearstyle(){this.block.clearStyle();},clearclass:function clearclass(){this.block.clearClass();},clearattr:function clearattr(){this.block.clearAttr();},add:function add(args,tags){this.block.add(args,tags);},toggle:function toggle(args,tags){this.block.toggle(args,tags);},set:function set(args,tags){this.block.set(args,tags);},remove:function remove(args,tags){this.block.remove(args,tags);}});$R.add('module','inline',{init:function init(app){this.app=app;this.inline=app.inline;},format:function format(args){var nodes=this.inline.format(args);// callback\nthis.app.broadcast('format','inline',nodes);},clearformat:function clearformat(){this.inline.clearFormat();},clearstyle:function clearstyle(){this.inline.clearStyle();},clearclass:function clearclass(){this.inline.clearClass();},clearattr:function clearattr(){this.inline.clearAttr();},add:function add(args,tags){this.inline.add(args,tags);},toggle:function toggle(args,tags){this.inline.toggle(args,tags);},set:function set(args,tags){this.inline.set(args,tags);},remove:function remove(args,tags){this.inline.remove(args,tags);}});$R.add('module','autosave',{init:function init(app){this.app=app;this.opts=app.opts;this.utils=app.utils;this.source=app.source;},// messages\nonsynced:function onsynced(){if(this.opts.autosave){this._send();}},// private\n_send:function _send(){var name=this.opts.autosaveName?this.opts.autosaveName:this.source.getName();var data={};data[name]=this.source.getCode();data=this.utils.extendData(data,this.opts.autosaveData);$R.ajax.post({url:this.opts.autosave,data:data,success:function(response){this._complete(response,name,data);}.bind(this)});},_complete:function _complete(response,name,data){var callback=response&&response.error?'autosaveError':'autosave';this.app.broadcast(callback,name,data,response);}});$R.add('module','input',{init:function init(app){this.app=app;this.opts=app.opts;this.utils=app.utils;this.editor=app.editor;this.keycodes=app.keycodes;this.element=app.element;this.selection=app.selection;this.insertion=app.insertion;this.inspector=app.inspector;this.autoparser=app.autoparser;// local\nthis.lastShiftKey=false;},// messages\nonpaste:function onpaste(e,dataTransfer){if(!this.opts.input)return;return $R.create('input.paste',this.app,e,dataTransfer);},onkeydown:function onkeydown(e){if(!this.opts.input)return;// key\nvar key=e.which;// shortcuts\nvar shortcut=$R.create('input.shortcut',this.app,e);if(shortcut.is())return;// select all\nif((e.ctrlKey||e.metaKey)&&!e.altKey&&key===65){e.preventDefault();return this._selectAll();}// set empty if all selected\nvar keys=[this.keycodes.ENTER,this.keycodes.SPACE,this.keycodes.BACKSPACE,this.keycodes.DELETE];var arrowKeys=[this.keycodes.UP,this.keycodes.DOWN,this.keycodes.LEFT,this.keycodes.RIGHT];var isKeys=keys.indexOf(key)!==-1;var isArrowKeys=arrowKeys.indexOf(key)!==-1;var isXKey=(e.ctrlKey||e.metaKey)&&key===88;// x\nvar isAlphaKeys=!e.ctrlKey&&!e.metaKey&&(key>=48&&key<=57||key>=65&&key<=90);if(this.selection.isAll()&&isArrowKeys&&(isXKey||!e.ctrlKey&&!e.metaKey&&!e.altKey&&!e.shiftKey)){if(isXKey){this.editor.disableNonEditables();this.app.broadcast('empty');return;}if(this._isArrowKey(key))return true;if(isKeys)e.preventDefault();if(this.element.isType('inline')){var $editor=this.editor.getElement();$editor.html('');this.editor.startFocus();}else{this.insertion.set(this.opts.emptyHtml);}if(isKeys)return;else this.app.broadcast('empty');}// autoparse\nif(this.opts.autoparse){this.autoparser.format(e,key);}// a-z, 0-9 - non editable\nif(isAlphaKeys){// has non-editable\nif(this.selection.hasNonEditable()){e.preventDefault();return;}}// enter, shift/ctrl + enter\nif(key===this.keycodes.ENTER){return $R.create('input.enter',this.app,e,key);}// cmd + [\nelse if(e.metaKey&&key===219){e.preventDefault();this.app.api('module.list.outdent');return;}// tab or cmd + ]\nelse if(key===this.keycodes.TAB||e.metaKey&&key===221){return $R.create('input.tab',this.app,e,key);}// space\nelse if(key===this.keycodes.SPACE){return $R.create('input.space',this.app,e,key,this.lastShiftKey);}// backspace or delete\nelse if(this._isDeleteKey(key)){return $R.create('input.delete',this.app,e,key);}else if(this._isArrowKey(key)){return $R.create('input.arrow',this.app,e,key);}},onkeyup:function onkeyup(e){if(!this.opts.input)return;// key\nvar key=e.which;// shift key\nthis.lastShiftKey=e.shiftKey;// hide context toolbar\nthis.app.broadcast('contextbar.close');// shortcode\nvar shortcode=$R.create('input.shortcode',this.app,e,key);if(shortcode.is())return;// is empty\nif(key===this.keycodes.BACKSPACE){var $editor=this.editor.getElement();var html=this.utils.trimSpaces($editor.html());html=html.replace(/<br\\s?\\/?>/g,'');html=html.replace(/<div><\\/div>/,'');if(html===''){e.preventDefault();this.editor.setEmpty();this.editor.startFocus();return;}}if(this.editor.isEmpty()){this.app.broadcast('empty');}},// public\nstart:function start(){// extend shortcuts\nif(this.opts.shortcutsAdd){this.opts.shortcuts=$R.extend({},true,this.opts.shortcuts,this.opts.shortcutsAdd);}},// private\n_selectAll:function _selectAll(){var current=this.selection.getCurrent();var data=this.inspector.parse(current);var el;if(data.isComponentType('table')){el=data.getTable();this.selection.setAll(el);return;}else if(data.isComponentType('code')){el=data.getComponentCodeElement();this.selection.setAll(el);return;}this.selection.setAll();},_isArrowKey:function _isArrowKey(key){return[this.keycodes.UP,this.keycodes.DOWN,this.keycodes.RIGHT,this.keycodes.LEFT].indexOf(key)!==-1;},_isDeleteKey:function _isDeleteKey(key){return key===this.keycodes.BACKSPACE||key===this.keycodes.DELETE;}});$R.add('class','input.arrow',{init:function init(app,e,key){this.app=app;this.opts=app.opts;this.utils=app.utils;this.caret=app.caret;this.offset=app.offset;this.marker=app.marker;this.editor=app.editor;this.keycodes=app.keycodes;this.component=app.component;this.inspector=app.inspector;this.selection=app.selection;// local\nthis.key=key;// init\nthis._init(e);},// private\n_init:function _init(e){if(this._isRightLeftKey()&&this._isExitVariable(e))return;if(this._isRightDownKey()){if(this._isExitOnDownRight(e))return;if(this._selectComponent(e,'End','next'))return;}if(this._isLeftUpKey()){if(this._isExitOnUpLeft(e))return;if(this._selectComponent(e,'Start','prev'))return;}if(this.key===this.keycodes.LEFT)this.utils.trimInvisibleChars('left');else if(this.key===this.keycodes.RIGHT)this.utils.trimInvisibleChars('right');},_isRightDownKey:function _isRightDownKey(){return[this.keycodes.DOWN,this.keycodes.RIGHT].indexOf(this.key)!==-1;},_isLeftUpKey:function _isLeftUpKey(){return[this.keycodes.UP,this.keycodes.LEFT].indexOf(this.key)!==-1;},_isRightLeftKey:function _isRightLeftKey(){return[this.keycodes.RIGHT,this.keycodes.LEFT].indexOf(this.key)!==-1;},_isExitVariable:function _isExitVariable(e){var current=this.selection.getCurrent();var data=this.inspector.parse(current);var component=data.getComponent();if(data.isComponentType('variable')&&data.isComponentActive()){e.preventDefault();var func=this.key===this.keycodes.LEFT?'setBefore':'setAfter';this.caret[func](component);return;}},_isExitOnUpLeft:function _isExitOnUpLeft(e){var current=this.selection.getCurrent();var block=this.selection.getBlock(current);var data=this.inspector.parse(current);var prev=block.previousElementSibling;var isStart=this.caret.isStart(block);// prev table\nif(isStart&&prev&&prev.tagName==='TABLE'){e.preventDefault();this.caret.setEnd(prev);return true;}// figcaption\nelse if(data.isFigcaption()){block=data.getFigcaption();isStart=this.caret.isStart(block);var $component=$R.dom(block).closest('.redactor-component');if(isStart&&$component.length!==0){e.preventDefault();this.caret.setEnd($component);return true;}}// exit table\nelse if(data.isTable()&&isStart){e.preventDefault();this.caret.setEnd(block.previousElementSibling);return true;}// component\nelse if(!data.isComponentEditable()&&data.isComponent()&&!data.isComponentType('variable')){var component=data.getComponent();if(!component.previousElementSibling){e.preventDefault();this.component.clearActive();return this._exitPrevElement(e,data.getComponent());}else if(component.previousElementSibling){e.preventDefault();this.component.clearActive();this.caret.setEnd(component.previousElementSibling);return true;}}},_isExitOnDownRight:function _isExitOnDownRight(e){var $editor=this.editor.getElement();var current=this.selection.getCurrent();var data=this.inspector.parse(current);var isEndEditor=this.caret.isEnd();var block,isEnd;// table\nif(data.isTable()){block=data.getTable();isEnd=this.caret.isEnd(block);if(isEnd||isEndEditor){return this._exitNextElement(e,data.getComponent());}}// figcaption\nelse if(data.isFigcaption()){block=data.getFigcaption();isEnd=this.caret.isEnd(block);if(isEnd||isEndEditor){return this._exitNextElement(e,data.getComponent());}}// figure/code\nelse if(data.isComponentType('code')){var component=data.getComponent();var pre=$R.dom(data.getComponentCodeElement()).closest('pre');isEnd=this.caret.isEnd(block);var isNext=pre&&pre.get().nextElementSibling;if(isEnd&&!isNext){return this._exitNextElement(e,component);}}// pre & blockquote & dl\nelse if(data.isPre()||data.isBlockquote()||data.isDl()){if(isEndEditor){if(data.isPre())return this._exitNextElement(e,data.getPre());else if(data.isBlockquote())return this._exitNextElement(e,data.getBlockquote());else if(data.isDl())return this._exitNextElement(e,data.getDl());}}// li\nelse if(data.isList()){var $list=$R.dom(current).parents('ul, ol',$editor).last();isEnd=this.caret.isEnd($list);if(isEnd||isEndEditor){return this._exitNextElement(e,$list.get());}}// component\nelse if(data.isComponent()&&!data.isComponentType('variable')&&data.getTag()!=='span'){this.component.clearActive();return this._exitNextElement(e,data.getComponent());}},_exitPrevElement:function _exitPrevElement(e,node){e.preventDefault();if(node.previousElementSibling)this.caret.setEnd(node.previousElementSibling);else this.utils.createMarkupBefore(node);return true;},_exitNextElement:function _exitNextElement(e,node){e.preventDefault();if(node.nextElementSibling)this.caret.setStart(node.nextElementSibling);else this.utils.createMarkup(node);return true;},_selectComponent:function _selectComponent(e,caret,type){var current=this.selection.getCurrent();var block=this.selection.getBlock(current);var sibling=this.utils.findSiblings(current,type);var siblingBlock=this.utils.findSiblings(block,type);if(sibling&&this.caret['is'+caret](current)){this._selectComponentItem(e,sibling,caret);}else if(siblingBlock&&this.caret['is'+caret](block)){this._selectComponentItem(e,siblingBlock,caret);}},_selectComponentItem:function _selectComponentItem(e,item,caret){if(this.component.isNonEditable(item)){e.preventDefault();this.caret['set'+caret](item);return true;}}});$R.add('class','input.delete',{init:function init(app,e,key){this.app=app;this.opts=app.opts;this.caret=app.caret;this.utils=app.utils;this.editor=app.editor;this.marker=app.marker;this.keycodes=app.keycodes;this.component=app.component;this.inspector=app.inspector;this.selection=app.selection;this.insertion=app.insertion;// local\nthis.key=key;// init\nthis._init(e);},// private\n_init:function _init(e){if(this._removeActiveComponent(e))return;if(this._removeAllSelectedTable(e))return;// is empty\nif(this.key===this.keycodes.BACKSPACE){var $editor=this.editor.getElement();var html=this.utils.trimSpaces($editor.html());if(html===this.opts.emptyHtml){e.preventDefault();return;}}// variable or non editable prev/next or selection\nif(this._detectVariableOrNonEditable()||this.selection.hasNonEditable()){e.preventDefault();return;}// all selected\nif(this.selection.isAll()){e.preventDefault();this.insertion.set(this.opts.emptyHtml);return;}// collapsed\nif(this.selection.isCollapsed()){// next / prev\nif(this.key===this.keycodes.BACKSPACE)this._traverseBackspace(e);else if(this.key===this.keycodes.DELETE)this._traverseDelete(e);}if(this.key===this.keycodes.BACKSPACE)this.utils.trimInvisibleChars('left');this._removeUnwantedStyles();this._removeEmptySpans();this._removeSpanTagsInHeadings();this._removeInlineTagsInPre();},_detectVariableOrNonEditable:function _detectVariableOrNonEditable(){var block=this.selection.getBlock();var isBlockStart=this.caret.isStart(block);var isBlockEnd=this.caret.isEnd(block);var el;// backspace\nif(this.key===this.keycodes.BACKSPACE&&isBlockStart){el=block.previousSibling;if(this._isNonEditable(el))return true;}// delete\nelse if(this.key===this.keycodes.DELETE&&isBlockEnd){el=block.nextSibling;if(this._isNonEditable(el))return true;}var current=this.selection.getCurrent();var isCurrentStart=this.caret.isStart(current);var isCurrentEnd=this.caret.isEnd(current);var isCurrentStartSpace=this.selection.getTextBeforeCaret().trim()==='';var isCurrentEndSpace=this.selection.getTextAfterCaret().trim()==='';// backspace\nif(this.key===this.keycodes.BACKSPACE&&isCurrentStart&&!isCurrentStartSpace){el=current.previousSibling;if(this._isVariable(el)){this.caret.setEnd(el);return true;}else if(this._isNonEditable(el))return true;}// delete\nelse if(this.key===this.keycodes.DELETE&&isCurrentEnd&&!isCurrentEndSpace){el=current.nextSibling;if(this._isVariable(el)){this.caret.setStart(el);return true;}else if(this._isNonEditable(el))return true;}},_isVariable:function _isVariable(node){return $R.dom(node).closest('[data-redactor-type=\"variable\"]').length!==0;},_isNonEditable:function _isNonEditable(node){return $R.dom(node).closest('.non-editable').length!==0;},_getBlock:function _getBlock(){var $editor=this.editor.getElement();var block=this.selection.getBlock();var data=this.inspector.parse(block);block=data.isList()?$R.dom(block).parents('ul, ol',$editor).last().get():block;block=data.isDl()?data.getDl():block;block=data.isTable()?data.getTable():block;return block;},_traverseDelete:function _traverseDelete(e){var current=this.selection.getCurrent();var data=this.inspector.parse(current);var block,isEnd,$next;// figcaption\nif(data.isFigcaption()){block=data.getFigcaption();isEnd=this.caret.isEnd(block);if(isEnd){e.preventDefault();return;}}// figure/code\nelse if(data.isComponentType('code')){block=data.getComponent();isEnd=this.caret.isEnd(block);if(isEnd){e.preventDefault();return;}}// next\nblock=this._getBlock();var next=this.utils.findSiblings(block,'next');if(!next)return;isEnd=this.caret.isEnd(block);var dataNext=this.inspector.parse(next);var isNextBlock=next.tagName==='P'||next.tagName==='DIV';// figure/code or table\nif(isEnd&&dataNext.isComponentEditable()){e.preventDefault();this.component.remove(next,false);return;}// component\nelse if(isEnd&&dataNext.isComponent()){e.preventDefault();// select component\nthis.caret.setStart(next);// remove current if empty\nif(this.utils.isEmptyHtml(block.innerHTML)){$R.dom(block).remove();}return;}// combine list\nelse if(isEnd&&dataNext.isList()){var $currentList=$R.dom(block);$next=$R.dom(next);// current list\nif(data.isList()){e.preventDefault();$currentList.append($next);$next.unwrap();return;}else{var $first=$next.children('li').first();var $lists=$first.find('ul, ol');if($lists.length!==0){e.preventDefault();$next.prepend($lists);$lists.unwrap();$currentList.append($first);$first.unwrap();return;}}}// block\nelse if(isEnd&&!data.isList()&&!data.isTable()&&isNextBlock&&!this.utils.isEmptyHtml(block.innerHTML)){e.preventDefault();var $current=$R.dom(block);$next=$R.dom(next);$current.append($next);$next.unwrap();return;}},_traverseBackspace:function _traverseBackspace(e){var current=this.selection.getCurrent();var data=this.inspector.parse(current);var block,isStart,$prev,$currentList;// figcaption\nif(data.isFigcaption()){block=data.getFigcaption();isStart=this.caret.isStart(block);if(isStart){e.preventDefault();return;}}// figure/code\nelse if(data.isComponentType('code')){block=data.getComponent();isStart=this.caret.isStart(block);if(isStart&&block.previousElementSibling){e.preventDefault();this.caret.setEnd(block.previousElementSibling);return true;}}// prev\nblock=this._getBlock();var prev=this.utils.findSiblings(block,'prev');if(!prev){setTimeout(this._replaceBlock.bind(this),1);return;}isStart=this.caret.isStart(block);var dataPrev=this.inspector.parse(prev);var isPrevBlock=prev.tagName==='P'||prev.tagName==='DIV';// figure/code or table\nif(isStart&&dataPrev.isComponentEditable()){e.preventDefault();this.component.remove(prev,false);return;}// component\nelse if(isStart&&dataPrev.isComponent()){e.preventDefault();// select component\nthis.caret.setStart(prev);// remove current if empty\nif(this.utils.isEmptyHtml(block.innerHTML)){$R.dom(block).remove();}return;}// lists\nelse if(isStart&&data.isList()){e.preventDefault();$currentList=$R.dom(block);$prev=$R.dom(prev);if(dataPrev.isList()){$currentList.children('li').first().prepend(this.marker.build('start'));$prev.append($currentList);$currentList.unwrap();this.selection.restoreMarkers();}else{var $first=$currentList.children('li').first();var first=$first.get();var $lists=$first.find('ul, ol');var $newnode=this.utils.replaceToTag(first,this.opts.markup);if(this.opts.breakline)$newnode.attr('data-redactor-tag','br');$currentList.before($newnode);this.caret.setStart($newnode);if($lists.length!==0){$currentList.prepend($lists);$lists.unwrap();}}return;}// block\nelse if(isStart&&isPrevBlock){e.preventDefault();if(this.utils.isEmpty(prev)){$prev=$R.dom(prev);$prev.remove();return;}var textNode=this.utils.createInvisibleChar();var $current=$R.dom(block);$prev=$R.dom(prev);this.caret.setEnd($prev);$current.prepend(textNode);$prev.append($current.contents());$current.remove();return;}},_replaceBlock:function _replaceBlock(){var block=this.selection.getBlock();var $block=$R.dom(block);if(this.opts.markup==='p'&&block&&this._isNeedToReplaceBlock(block)){var markup=document.createElement(this.opts.markup);$block.replaceWith(markup);this.caret.setStart(markup);}if(this.opts.breakline&&block&&block.tagName==='DIV'){$block.attr('data-redactor-tag','br');}},_isNeedToReplaceBlock:function _isNeedToReplaceBlock(block){return block.tagName==='DIV'&&this.utils.isEmptyHtml(block.innerHTML);},_removeActiveComponent:function _removeActiveComponent(e){var current=this.selection.getCurrent();var data=this.inspector.parse(current);var component=data.getComponent();if(data.isComponent()&&this.component.isActive(component)){e.preventDefault();this.component.remove(component);return true;}},_removeAllSelectedTable:function _removeAllSelectedTable(e){var current=this.selection.getCurrent();var data=this.inspector.parse(current);var table=data.getTable();if(table&&this.selection.isAll(table)){e.preventDefault();this.component.remove(table);return true;}},_removeUnwantedStyles:function _removeUnwantedStyles(){var $editor=this.editor.getElement();setTimeout(function(){var $tags=$editor.find('*[style]');$tags.not('img, figure, iframe, [data-redactor-style-cache], [data-redactor-span]').removeAttr('style');},0);},_removeEmptySpans:function _removeEmptySpans(){var $editor=this.editor.getElement();setTimeout(function(){$editor.find('span').each(function(node){if(node.attributes.length===0){$R.dom(node).replaceWith(node.childNodes);}});},0);},_removeSpanTagsInHeadings:function _removeSpanTagsInHeadings(){var $editor=this.editor.getElement();setTimeout(function(){$editor.find('h1, h2, h3, h4, h5, h6').each(function(node){var $node=$R.dom(node);if($node.closest('figure').length===0){$node.find('span').not('.redactor-component, .non-editable, .redactor-selection-marker, [data-redactor-style-cache], [data-redactor-span]').unwrap();}});},1);},_removeInlineTagsInPre:function _removeInlineTagsInPre(){var $editor=this.editor.getElement();var tags=this.opts.inlineTags;setTimeout(function(){$editor.find('pre').each(function(node){var $node=$R.dom(node);if($node.closest('figure').length===0){$node.find(tags.join(',')).not('code, .redactor-selection-marker').unwrap();}});},1);}});$R.add('class','input.enter',{init:function init(app,e){this.app=app;this.opts=app.opts;this.utils=app.utils;this.caret=app.caret;this.editor=app.editor;this.insertion=app.insertion;this.selection=app.selection;this.inspector=app.inspector;// init\nthis._init(e);},// private\n_init:function _init(e){// turn off\nif(!this.opts.enterKey)return this._disable(e);// callback\nvar stop=this.app.broadcast('enter',e);if(stop===false)return e.preventDefault();// has non-editable\nif(this.selection.hasNonEditable()){e.preventDefault();return;}// shift enter\nif(e.ctrlKey||e.shiftKey)return this._insertBreak(e);// enter & exit\nif(this._isExit(e))return;// traverse\nthis._traverse(e);},_disable:function _disable(e){e.preventDefault();var range=this.selection.getRange();if(range&&!range.collapsed)range.deleteContents();},_insertBreak:function _insertBreak(e){e.preventDefault();var current=this.selection.getCurrent();var data=this.inspector.parse(current);if(data.isComponent()&&!data.isComponentEditable()||data.isCode())return;else if(data.isPre())this.insertion.insertNewline();else this.insertion.insertBreakLine();},_isExit:function _isExit(e){var $editor=this.editor.getElement();var block=this.selection.getBlock();var data=this.inspector.parse(block);var isEnd=this.caret.isEnd(block);var current=this.selection.getCurrent();var prev=current.previousSibling;// blockquote\nif(data.isBlockquote()){var isParagraphExit=isEnd&&this._isExitableBlock(block,'P');var isBreaklineExit=isEnd&&this._isExitableDblBreak(prev);if(isParagraphExit||isBreaklineExit){return this._exitFromElement(e,isBreaklineExit?prev:block,data.getBlockquote());}}// pre\nelse if(!data.isComponentType('code')&&data.isPre()){if(isEnd){var html=block.innerHTML;html=this.utils.removeInvisibleChars(html);if(html.match(/(\\n\\n\\n)$/)!==null){$R.dom(prev.previousSibling.previousSibling).remove();return this._exitFromElement(e,prev,block);}}}// dl\nelse if(data.isDl()){if(isEnd&&this._isExitableBlock(block,'DT')){return this._exitFromElement(e,block,data.getDl());}}// li\nelse if(data.isList()){var list=$R.dom(current).parents('ul, ol',$editor).last();isEnd=this.caret.isEnd(list);if(isEnd&&this._isExitableBlock(block,'LI')){return this._exitFromElement(e,block,list);}}else if(data.isComponent()&&data.isComponentActive()&&!data.isFigcaption()&&!data.isComponentEditable()){return this._exitFromElement(e,false,data.getComponent());}},_isExitableDblBreak:function _isExitableDblBreak(prev){var next=prev?prev.nextSibling:false;if(next){var text=this.utils.removeInvisibleChars(next.textContent);return next.nodeType===3&&text.trim()==='';}},_isExitableBlock:function _isExitableBlock(block,tag){return block&&block.tagName===tag&&this.utils.isEmptyHtml(block.innerHTML);},_exitFromElement:function _exitFromElement(e,prev,el){e.preventDefault();if(prev)$R.dom(prev).remove();this.utils.createMarkup(el);return true;},_exitNextElement:function _exitNextElement(e,node){e.preventDefault();if(node.nextSibling)this.caret.setStart(node.nextSibling);else this.utils.createMarkup(node);return true;},_traverse:function _traverse(e){var current=this.selection.getCurrent();var isText=this.selection.isText();var block=this.selection.getBlock();var data=this.inspector.parse(current);var blockTag=block?block.tagName.toLowerCase():false;var $variable=$R.dom(current).closest('[data-redactor-type=variable]');// variable parent\nif($variable.length!==0){this.caret.setAfter($variable);}// pre\nif(data.isPre()){e.preventDefault();return this.insertion.insertNewline();}// blockquote\nelse if(data.isBlockquote()){block=this.selection.getBlock(current);if(block&&block.tagName==='BLOCKQUOTE'){e.preventDefault();return this.insertion.insertBreakLine();}}// figcaption\nelse if(data.isFigcaption()){block=data.getFigcaption();var isEnd=this.caret.isEnd(block);var isEndEditor=this.caret.isEnd();if(isEnd||isEndEditor){return this._exitNextElement(e,data.getComponent());}else{e.preventDefault();return;}}// dl\nelse if(data.isDl()){e.preventDefault();return this._traverseDl(current);}// breakline\nelse if(this.opts.breakline&&blockTag==='div'){setTimeout(this._replaceBlock.bind(this),1);return;}// text\nelse if(isText){e.preventDefault();return this.insertion.insertBreakLine();}// list\nelse if(data.isList()){return;}// div / p\nelse{setTimeout(this._replaceBlock.bind(this),1);return;}},_traverseDl:function _traverseDl(current){var block=this.selection.getBlock(current);var data=this.inspector.parse(block);var tag=data.getTag();var $el=$R.dom(block);var next=$el.get().nextSibling||false;var $next=$R.dom(next);var nextDd=next&&$next.is('dd');var nextDt=next&&$next.is('dt');var isEnd=this.caret.isEnd(block);if(tag==='dt'&&!nextDd&&isEnd){var dd=document.createElement('dd');$el.after(dd);this.caret.setStart(dd);return;}else if(tag==='dd'&&!nextDt&&isEnd){var dt=document.createElement('dt');$el.after(dt);this.caret.setStart(dt);return;}return this.insertion.insertBreakLine();},_replaceBlock:function _replaceBlock(){var block=this.selection.getBlock();var $block=$R.dom(block);if(this.opts.markup==='p'&&block&&this._isNeedToReplaceBlock(block)){var markup=document.createElement(this.opts.markup);$block.replaceWith(markup);this.caret.setStart(markup);}else{if(block){if(this.utils.isEmptyHtml(block.innerHTML)){this._clearBlock($block,block);}else{var first=this.utils.getFirstNode(block);if(first&&first.tagName==='BR'){$R.dom(first).remove();this.caret.setStart(block);}}}}if(block&&this._isNeedToCleanBlockStyle(block)&&this.opts.cleanOnEnter){$block.removeAttr('class style');}if(this.opts.breakline&&block&&block.tagName==='DIV'){$block.append(document.createElement('br'));$block.attr('data-redactor-tag','br');}},_clearBlock:function _clearBlock($block,block){if(block.tagName==='DIV'){$block.find('br').remove();}if(this.opts.cleanInlineOnEnter||block.innerHTML==='<br>'){$block.html('');}this.caret.setStart(block);},_isNeedToReplaceBlock:function _isNeedToReplaceBlock(block){return block.tagName==='DIV'&&this.utils.isEmptyHtml(block.innerHTML);},_isNeedToCleanBlockStyle:function _isNeedToCleanBlockStyle(block){return block.tagName==='P'&&this.utils.isEmptyHtml(block.innerHTML);}});$R.add('class','input.paste',{init:function init(app,e,dataTransfer,html,point){this.app=app;this.opts=app.opts;this.editor=app.editor;this.cleaner=app.cleaner;this.container=app.container;this.inspector=app.inspector;this.insertion=app.insertion;this.selection=app.selection;this.autoparser=app.autoparser;// local\nthis.pasteHtml=html;this.pointInserted=point;this.dataTransfer=dataTransfer;// init\nthis._init(e);},// private\n_init:function _init(e){var clipboard=this.dataTransfer||e.clipboardData;var current=this.selection.getCurrent();var dataCurrent=this.inspector.parse(current);this.dropPasted=this.dataTransfer;//this.isRawCode = (this.dropPasted) ? (dataCurrent.isPre() || dataCurrent.isCode()) : this._isPlainText(clipboard);\nthis.isRawCode=dataCurrent.isPre()||dataCurrent.isCode();this.editor.enablePasting();this.editor.saveScroll();if(!this.dropPasted){this.selection.saveMarkers();}if(this.isRawCode||!clipboard){var text;if(!this.isRawCode&&!clipboard&&window.clipboardData){text=window.clipboardData.getData(\"text\");}else{text=clipboard.getData(\"text/plain\");}e.preventDefault();this._insert(e,text);return;}else if(this.pasteHtml){e.preventDefault();this._insert(e,this.pasteHtml);}else{// html / text\nvar url=clipboard.getData('URL');var html=this._isPlainText(clipboard)?this.cleaner.encodeEntities(clipboard.getData(\"text/plain\")):clipboard.getData(\"text/html\");// safari anchor links\nhtml=!url||url===''?html:url;// file\nif(clipboard.files!==null&&clipboard.files.length>0&&html===''){var files=[];for(var i=0;i<clipboard.files.length;i++){var file=clipboard.files[i]||clipboard.items[i].getAsFile();if(file)files.push(file);}if(files.length>0){e.preventDefault();this._insertFiles(e,files);return;}}e.preventDefault();this._insert(e,html);}},_isPlainText:function _isPlainText(clipboard){var text=clipboard.getData(\"text/plain\");var html=clipboard.getData(\"text/html\");if(text&&html){var element=document.createElement(\"div\");element.innerHTML=html;if(element.textContent===text){return!element.querySelector(\":not(meta)\");}}else{return text!==null;}},_restoreSelection:function _restoreSelection(){this.editor.restoreScroll();this.editor.disablePasting();if(!this.dropPasted){this.selection.restoreMarkers();}},_insert:function _insert(e,html){// pasteBefore callback\nvar returned=this.app.broadcast('pasteBefore',html);html=returned===undefined?html:returned;// clean\nhtml=html.trim();html=this.isRawCode?html:this.cleaner.paste(html);html=html.trim();html=this.isRawCode?this.cleaner.encodePhpCode(html):html;// paste callback\nreturned=this.app.broadcast('pasting',html);html=returned===undefined?html:returned;this._restoreSelection();// stop input\nif(!this.opts.input)return;this.app.broadcast('state',false);// insert\nvar nodes=[];if(this.isRawCode){html=html.replace('&lt;?php','<?php');var textNode=document.createTextNode(html);nodes=this.insertion.insertNode(textNode,'after');this.app.broadcast('pasted',nodes);}else{// autoparse\nif(this.opts.autoparse&&this.opts.autoparsePaste){html=this.autoparser.parse(html);}nodes=this.dropPasted?this.insertion.insertToPoint(e,html,this.pointInserted):this.insertion.insertHtml(html);// pasted callback\nthis.app.broadcast('pasted',nodes);this.app.broadcast('autoparseobserve');}},_insertFiles:function _insertFiles(e,files){this._restoreSelection();// drop or clipboard\nvar isImage=this.opts.imageTypes.indexOf(files[0].type)!==-1;var isClipboard=typeof this.dropPasted==='undefined';if(isImage)this.app.broadcast('dropimage',e,files,isClipboard);else this.app.broadcast('dropfile',e,files,isClipboard);}});$R.add('class','input.shortcode',{init:function init(app,e,key){this.app=app;this.opts=app.opts;this.utils=app.utils;this.marker=app.marker;this.keycodes=app.keycodes;this.selection=app.selection;// local\nthis.worked=false;// init\nif(key===this.keycodes.SPACE)this._init();},// public\nis:function is(){return this.worked;},// private\n_init:function _init(){var current=this.selection.getCurrent();if(current&&current.nodeType===3){var text=this.utils.removeInvisibleChars(current.textContent);var shortcodes=this.opts.shortcodes;for(var name in shortcodes){var re=new RegExp('^'+this.utils.escapeRegExp(name));var match=text.match(re);if(match!==null){if(typeof shortcodes[name].format!=='undefined'){return this._format(shortcodes[name].format,current,re);}}}}},_format:function _format(tag,current,re){var marker=this.marker.insert('start');current=marker.previousSibling;var text=current.textContent;text=this.utils.trimSpaces(text);text=text.replace(re,'');current.textContent=text;var api=tag==='ul'||tag==='ol'?'module.list.toggle':'module.block.format';this.app.api(api,tag);this.selection.restoreMarkers();this.worked=true;}});$R.add('class','input.shortcut',{init:function init(app,e){this.app=app;this.opts=app.opts;// local\nthis.worked=false;// based on https://github.com/jeresig/jquery.hotkeys\nthis.hotkeys={8:\"backspace\",9:\"tab\",10:\"return\",13:\"return\",16:\"shift\",17:\"ctrl\",18:\"alt\",19:\"pause\",20:\"capslock\",27:\"esc\",32:\"space\",33:\"pageup\",34:\"pagedown\",35:\"end\",36:\"home\",37:\"left\",38:\"up\",39:\"right\",40:\"down\",45:\"insert\",46:\"del\",59:\";\",61:\"=\",96:\"0\",97:\"1\",98:\"2\",99:\"3\",100:\"4\",101:\"5\",102:\"6\",103:\"7\",104:\"8\",105:\"9\",106:\"*\",107:\"+\",109:\"-\",110:\".\",111:\"/\",112:\"f1\",113:\"f2\",114:\"f3\",115:\"f4\",116:\"f5\",117:\"f6\",118:\"f7\",119:\"f8\",120:\"f9\",121:\"f10\",122:\"f11\",123:\"f12\",144:\"numlock\",145:\"scroll\",173:\"-\",186:\";\",187:\"=\",188:\",\",189:\"-\",190:\".\",191:\"/\",192:\"`\",219:\"[\",220:\"\\\\\",221:\"]\",222:\"'\"};this.hotkeysShiftNums={\"`\":\"~\",\"1\":\"!\",\"2\":\"@\",\"3\":\"#\",\"4\":\"$\",\"5\":\"%\",\"6\":\"^\",\"7\":\"&\",\"8\":\"*\",\"9\":\"(\",\"0\":\")\",\"-\":\"_\",\"=\":\"+\",\";\":\": \",\"'\":\"\\\"\",\",\":\"<\",\".\":\">\",\"/\":\"?\",\"\\\\\":\"|\"};// init\nthis._init(e);},// public\nis:function is(){return this.worked;},// private\n_init:function _init(e){// disable browser's hot keys for bold and italic if shortcuts off\nif(this.opts.shortcuts===false){if((e.ctrlKey||e.metaKey)&&(e.which===66||e.which===73))e.preventDefault();return;}// build\nfor(var key in this.opts.shortcuts){this._build(e,key,this.opts.shortcuts[key]);}},_build:function _build(e,str,command){var keys=str.split(',');var len=keys.length;for(var i=0;i<len;i++){if(typeof keys[i]==='string'){this._handler(e,keys[i].trim(),command);}}},_handler:function _handler(e,keys,command){keys=keys.toLowerCase().split(\" \");var special=this.hotkeys[e.keyCode];var character=String.fromCharCode(e.which).toLowerCase();var modif=\"\",possible={};var cmdKeys=[\"meta\",\"ctrl\",\"alt\",\"shift\"];for(var i=0;i<cmdKeys.length;i++){var specialKey=cmdKeys[i];if(e[specialKey+'Key']&&special!==specialKey){modif+=specialKey+'+';}}if(special)possible[modif+special]=true;if(character){possible[modif+character]=true;possible[modif+this.hotkeysShiftNums[character]]=true;// \"$\" can be triggered as \"Shift+4\" or \"Shift+$\" or just \"$\"\nif(modif===\"shift+\"){possible[this.hotkeysShiftNums[character]]=true;}}var len=keys.length;for(var i=0;i<len;i++){if(possible[keys[i]]){e.preventDefault();this.worked=true;if(command.message){this.app.broadcast(command.message,command.args);this.app.broadcast('buffer.trigger');}else if(command.api){this.app.api(command.api,command.args);this.app.broadcast('buffer.trigger');}return;}}}});$R.add('class','input.space',{init:function init(app,e,key,lastShiftKey){this.app=app;this.keycodes=app.keycodes;this.insertion=app.insertion;this.selection=app.selection;// local\nthis.key=key;this.lastShiftKey=lastShiftKey;// init\nthis._init(e);},// private\n_init:function _init(e){// has non-editable\nif(this.selection.hasNonEditable()){e.preventDefault();return;}// shift/ctrl + space\nif(!this.lastShiftKey&&this.key===this.keycodes.SPACE&&(e.ctrlKey||e.shiftKey)&&!e.metaKey){e.preventDefault();this.insertion.insertChar('&nbsp;');return;}}});$R.add('class','input.tab',{init:function init(app,e){this.app=app;this.opts=app.opts;this.inspector=app.inspector;this.insertion=app.insertion;this.selection=app.selection;// init\nthis._init(e);},// private\n_init:function _init(e){// turn off tab\nif(!this.opts.tabKey)return;// callback\nvar stop=this.app.broadcast('tab',e);if(stop===false)return e.preventDefault();// traverse\nthis._traverse(e);},_traverse:function _traverse(e){var current=this.selection.getCurrent();var data=this.inspector.parse(current);// hard tab\nif(!data.isComponent()&&e.shiftKey){return this._insertHardTab(e,4);}// list\nif(data.isList()){e.preventDefault();return this.app.api('module.list.indent');}// pre\nif(data.isPre()||data.isComponentType('code')&&!data.isFigcaption()){return this._tabCode(e);}// tab as spaces\nif(this.opts.tabAsSpaces!==false){return this._insertHardTab(e,this.opts.tabAsSpaces);}},_insertHardTab:function _insertHardTab(e,num){e.preventDefault();var node=document.createTextNode(Array(num+1).join(\"\\xA0\"));return this.insertion.insertNode(node,'end');},_tabCode:function _tabCode(e){e.preventDefault();var node=this.opts.preSpaces?document.createTextNode(Array(this.opts.preSpaces+1).join(\"\\xA0\")):document.createTextNode('\\t');return this.insertion.insertNode(node,'end');}});$R.add('module','upload',{init:function init(app){this.app=app;this.opts=app.opts;this.lang=app.lang;this.utils=app.utils;this.editor=app.editor;this.progress=app.progress;// local\nthis.defaults={event:false,element:false,name:false,files:false,url:false,data:false,paramName:false};},// public\nbuild:function build(options){this.p=$R.extend(this.defaults,options);this.$el=$R.dom(this.p.element);if(this.$el.get().tagName==='INPUT')this._buildInput();else this._buildBox();},send:function send(options){this.p=$R.extend(this.defaults,options);this.$uploadbox=this.editor.getElement();this._send(this.p.event,this.p.files);},complete:function complete(response,e){this._complete(response,e);},// private\n_buildInput:function _buildInput(){this.box=false;this.prefix='';this.$uploadbox=$R.dom('<div class=\"upload-redactor-box\" />');this.$el.hide();this.$el.after(this.$uploadbox);if(this.opts.multipleUpload)this.$el.attr('multiple','multiple');else this.$el.removeAttr('multiple');if(this.p.name!=='file'){this.$el.attr('accept','image/*');}this._buildPlaceholder();this._buildEvents();},_buildBox:function _buildBox(){this.box=true;this.prefix='box-';this.$uploadbox=this.$el;this.$uploadbox.attr('ondragstart','return false;');// events\nthis.$uploadbox.on('drop.redactor.upload',this._onDropBox.bind(this));this.$uploadbox.on('dragover.redactor.upload',this._onDragOver.bind(this));this.$uploadbox.on('dragleave.redactor.upload',this._onDragLeave.bind(this));},_buildPlaceholder:function _buildPlaceholder(){this.$placeholder=$R.dom('<div class=\"upload-redactor-placeholder\" />');this.$placeholder.html(this.lang.get('upload-label'));this.$uploadbox.append(this.$placeholder);},_buildEvents:function _buildEvents(){this.$el.on('change.redactor.upload',this._onChange.bind(this));this.$uploadbox.on('click.redactor.upload',this._onClick.bind(this));this.$uploadbox.on('drop.redactor.upload',this._onDrop.bind(this));this.$uploadbox.on('dragover.redactor.upload',this._onDragOver.bind(this));this.$uploadbox.on('dragleave.redactor.upload',this._onDragLeave.bind(this));},_onClick:function _onClick(e){e.preventDefault();this.$el.click();},_onChange:function _onChange(e){this._send(e,this.$el.get().files);},_onDrop:function _onDrop(e){e.preventDefault();this._clear();this._setStatusDrop();this._send(e);},_onDragOver:function _onDragOver(e){e.preventDefault();this._setStatusHover();return false;},_onDragLeave:function _onDragLeave(e){e.preventDefault();this._removeStatusHover();return false;},_onDropBox:function _onDropBox(e){e.preventDefault();this._clear();this._setStatusDrop();this._send(e);},_removeStatusHover:function _removeStatusHover(){this.$uploadbox.removeClass('upload-redactor-'+this.prefix+'hover');},_setStatusDrop:function _setStatusDrop(){this.$uploadbox.addClass('upload-redactor-'+this.prefix+'drop');},_setStatusHover:function _setStatusHover(){this.$uploadbox.addClass('upload-redactor-'+this.prefix+'hover');},_setStatusError:function _setStatusError(){this.$uploadbox.addClass('upload-redactor-'+this.prefix+'error');},_setStatusSuccess:function _setStatusSuccess(){this.$uploadbox.addClass('upload-redactor-'+this.prefix+'success');},_clear:function _clear(){var classes=['drop','hover','error','success'];for(var i=0;i<classes.length;i++){this.$uploadbox.removeClass('upload-redactor-'+this.prefix+classes[i]);}this.$uploadbox.removeAttr('ondragstart');},_send:function _send(e,files){e=e.originalEvent||e;files=files?files:e.dataTransfer.files;var data=new FormData();var name=this._getUploadParam();data=this._buildData(name,files,data);data=this.utils.extendData(data,this.p.data);var stop=this.app.broadcast('upload.start',e,data,files);if(stop!==false){this._sendData(data,files,e);}},_sendData:function _sendData(data,files,e){this.progress.show();if(typeof this.p.url==='function'){var res=this.p.url(data,files,e,this);if(!(res instanceof Promise)){this._complete(res,e);}}else{$R.ajax.post({url:this.p.url,data:data,before:function(xhr){return this.app.broadcast('upload.beforeSend',xhr);}.bind(this),success:function(response){this._complete(response,e);}.bind(this)});}},_getUploadParam:function _getUploadParam(){return this.p.paramName?this.p.paramName:'file';},_buildData:function _buildData(name,files,data){if(files.length===1){data.append(name+'[]',files[0]);}else if(files.length>1&&this.opts.multipleUpload!==false){for(var i=0;i<files.length;i++){data.append(name+'[]',files[i]);}}return data;},_complete:function _complete(response,e){this._clear();this.progress.hide();if(response&&response.error){this._setStatusError();this.app.broadcast('upload.'+this.p.name+'.error',response,e);this.app.broadcast('upload.error',response);}else{this._setStatusSuccess();this.app.broadcast('upload.'+this.p.name+'.complete',response,e);this.app.broadcast('upload.complete',response);setTimeout(this._clear.bind(this),500);}}});$R.add('class','code.component',{mixins:['dom','component'],init:function init(app,el){this.app=app;// init\nreturn el&&el.cmnt!==undefined?el:this._init(el);},// private\n_init:function _init(el){var $pre;if(typeof el!=='undefined'){var $node=$R.dom(el);var $wrapper=$node.closest('figure');if($wrapper.length!==0){this.parse($wrapper);}else{this.parse('<figure>');this.append(el);}$pre=this.find('pre code, pre').last();}else{$pre=$R.dom('<pre>');this.parse('<figure>');this.append($pre);}this._initElement($pre);this._initWrapper();},_initElement:function _initElement($pre){$pre.attr({'tabindex':'-1','contenteditable':true});},_initWrapper:function _initWrapper(){this.addClass('redactor-component');this.attr({'data-redactor-type':'code','tabindex':'-1','contenteditable':false});}});$R.add('module','form',{init:function init(app){this.app=app;this.lang=app.lang;this.component=app.component;this.inspector=app.inspector;},// messages\nonform:{remove:function remove(node){this._remove(node);}},oncontextbar:function oncontextbar(e,contextbar){var data=this.inspector.parse(e.target);if(data.isComponentType('form')){var node=data.getComponent();var buttons={\"remove\":{title:this.lang.get('delete'),api:'module.form.remove',args:node}};contextbar.set(e,node,buttons,'top');}},// private\n_remove:function _remove(node){this.component.remove(node);}});$R.add('class','form.component',{mixins:['dom','component'],init:function init(app,el){this.app=app;this.utils=app.utils;// init\nreturn el&&el.cmnt!==undefined?el:this._init(el);},// private\n_init:function _init(el){if(typeof el!=='undefined'){var $node=$R.dom(el);var $wrapper=$node.closest('form');if($wrapper.length!==0){var $figure=this.utils.replaceToTag(el,'figure');this.parse($figure);}else{this.parse('<figure>');this.append(el);}}else{this.parse('<figure>');}this._initWrapper();},_initWrapper:function _initWrapper(){this.addClass('redactor-component');this.attr({'data-redactor-type':'form','tabindex':'-1','contenteditable':false});}});$R.add('module','image',{modals:{'image':'<div class=\"redactor-modal-tab redactor-modal-tab-upload\" data-title=\"## upload ##\"><form action=\"\"> \\\n                <input type=\"file\" name=\"file\"> \\\n            </form></div>','imageedit':'<div class=\"redactor-modal-group\"> \\\n                <div id=\"redactor-modal-image-preview\" class=\"redactor-modal-side\"></div> \\\n                <form action=\"\" class=\"redactor-modal-area\"> \\\n                    <div class=\"form-item\"> \\\n                        <label for=\"modal-image-title\"> ## title ##</label> \\\n                        <input type=\"text\" id=\"modal-image-title\" name=\"title\" /> \\\n                    </div> \\\n                    <div class=\"form-item form-item-caption\"> \\\n                        <label for=\"modal-image-caption\">## caption ##</label> \\\n                        <input type=\"text\" id=\"modal-image-caption\" name=\"caption\" aria-label=\"## caption ##\" /> \\\n                    </div> \\\n                    <div class=\"form-item form-item-align\"> \\\n                        <label>## image-position ##</label> \\\n                        <select name=\"align\" aria-label=\"## image-position ##\"> \\\n                            <option value=\"none\">## none ##</option> \\\n                            <option value=\"left\">## left ##</option> \\\n                            <option value=\"center\">## center ##</option> \\\n                            <option value=\"right\">## right ##</option> \\\n                        </select> \\\n                    </div> \\\n                    <div class=\"form-item form-item-link\"> \\\n                        <label for=\"modal-image-url\">## link ##</label> \\\n                        <input type=\"text\" id=\"modal-image-url\" name=\"url\" aria-label=\"## link ##\" /> \\\n                    </div> \\\n                    <div class=\"form-item form-item-link\"> \\\n                        <label class=\"checkbox\"><input type=\"checkbox\" name=\"target\" aria-label=\"## link-in-new-tab ##\"> ## link-in-new-tab ##</label> \\\n                    </div> \\\n                </form> \\\n            </div>'},init:function init(app){this.app=app;this.opts=app.opts;this.lang=app.lang;this.caret=app.caret;this.utils=app.utils;this.editor=app.editor;this.storage=app.storage;this.component=app.component;this.inspector=app.inspector;this.insertion=app.insertion;this.selection=app.selection;// local\nthis.justResized=false;},// messages\noninsert:function oninsert(){this._observeImages();},onstarted:function onstarted(){// storage observe\nthis.storage.observeImages();// resize\nif(this.opts.imageResizable){this.resizer=$R.create('image.resize',this.app);}// observe\nthis._observeImages();},ondropimage:function ondropimage(e,files,clipboard){if(!this.opts.imageUpload)return;var options={url:this.opts.imageUpload,event:clipboard?false:e,files:files,name:'imagedrop',data:this.opts.imageData,paramName:this.opts.imageUploadParam};this.app.api('module.upload.send',options);},onstop:function onstop(){if(this.resizer)this.resizer.stop();},onbottomclick:function onbottomclick(){this.insertion.insertToEnd(this.editor.getLastNode(),'image');},onimageresizer:{stop:function stop(){if(this.resizer)this.resizer.hide();}},onsource:{open:function open(){if(this.resizer)this.resizer.hide();},closed:function closed(){this._observeImages();if(this.resizer)this.resizer.rebuild();}},onupload:{complete:function complete(){this._observeImages();},image:{complete:function complete(response){this._insert(response);},error:function error(response){this._uploadError(response);}},imageedit:{complete:function complete(response){this._change(response);},error:function error(response){this._uploadError(response);}},imagedrop:{complete:function complete(response,e){this._insert(response,e);},error:function error(response){this._uploadError(response);}},imagereplace:{complete:function complete(response){this._change(response,false);},error:function error(response){this._uploadError(response);}}},onmodal:{image:{open:function open($modal,$form){this._setUpload($modal,$form);}},imageedit:{open:function open($modal,$form){this._setFormData($modal,$form);},opened:function opened($modal,$form){this._setFormFocus($form);},remove:function remove(){this._remove(this.$image);},save:function save($modal,$form){this._save($modal,$form);}}},onimage:{observe:function observe(){this._observeImages();},resized:function resized(){this.justResized=true;}},oncontextbar:function oncontextbar(e,contextbar){if(this.justResized){this.justResized=false;return;}var current=this.selection.getCurrent();var data=this.inspector.parse(current);var $img=$R.dom(current).closest('img');if(!data.isFigcaption()&&data.isComponentType('image')||$img.length!==0){var node=$img.length!==0?$img.get():data.getComponent();var buttons={\"edit\":{title:this.lang.get('edit'),api:'module.image.open'},\"remove\":{title:this.lang.get('delete'),api:'module.image.remove',args:node}};contextbar.set(e,node,buttons);}},// public\nopen:function open(){this.$image=this._getCurrent();this.app.api('module.modal.build',this._getModalData());},insert:function insert(data){this._insert(data);},remove:function remove(node){this._remove(node);},// private\n_getModalData:function _getModalData(){var modalData;if(this._isImage()&&this.opts.imageEditable){modalData={name:'imageedit',width:'800px',title:this.lang.get('edit'),handle:'save',commands:{save:{title:this.lang.get('save')},remove:{title:this.lang.get('delete'),type:'danger'},cancel:{title:this.lang.get('cancel')}}};}else{modalData={name:'image',title:this.lang.get('image')};}return modalData;},_isImage:function _isImage(){return this.$image;},_getCurrent:function _getCurrent(){var current=this.selection.getCurrent();var data=this.inspector.parse(current);var $img=$R.dom(current).closest('img');if($img.length!==0){return this.component.create('image',$img);}else{return data.isComponentType('image')&&data.isComponentActive()?this.component.create('image',data.getComponent()):false;}},_insert:function _insert(response,e){this.app.api('module.modal.close');if(Array.isArray(response)){var obj={};for(var i=0;i<response.length;i++){obj=$R.extend(obj,response[i]);}response=obj;}else if(typeof response==='string'){response={\"file\":{url:response}};}if(_typeof(response)==='object'){var multiple=0;for(var key in response){if(_typeof(response[key])==='object')multiple++;}if(multiple>1){this._insertMultiple(response,e);}else{this._insertSingle(response,e);}}},_insertSingle:function _insertSingle(response,e){for(var key in response){if(_typeof(response[key])==='object'){var $img=this._createImageAndStore(response[key]);var inserted=e?this.insertion.insertToPoint(e,$img,false,false):this.insertion.insertHtml($img,false);this._removeSpaceBeforeFigure(inserted[0]);// set is active\nthis.component.setActive(inserted[0]);this.app.broadcast('image.uploaded',inserted[0],response);}}},_insertMultiple:function _insertMultiple(response,e){var z=0;var inserted=[];var last;for(var key in response){if(_typeof(response[key])==='object'){z++;var $img=this._createImageAndStore(response[key]);if(z===1){inserted=e?this.insertion.insertToPoint(e,$img,false,false):this.insertion.insertHtml($img,false);}else{var $inserted=$R.dom(inserted[0]);$inserted.after($img);inserted=[$img.get()];this.app.broadcast('image.inserted',$img);}last=inserted[0];this._removeSpaceBeforeFigure(inserted[0]);this.app.broadcast('image.uploaded',inserted[0],response);}}// set last is active\nthis.component.setActive(last);},_createImageAndStore:function _createImageAndStore(item){var $img=this.component.create('image');$img.addClass('redactor-uploaded-figure');$img.setData({src:item.url,id:item.id?item.id:this.utils.getRandomId()});// add to storage\nthis.storage.add('image',$img.getElement());return $img;},_removeSpaceBeforeFigure:function _removeSpaceBeforeFigure(img){if(!img)return;var prev=img.previousSibling;var next=img.nextSibling;var $prev=$R.dom(prev);var $next=$R.dom(next);if(this.opts.breakline){if(next&&$next.attr('data-redactor-tag')==='br'){$next.find('br').first().remove();}if(prev&&$prev.attr('data-redactor-tag')==='br'){$prev.find('br').last().remove();}}if(prev){this._removeInvisibleSpace(prev);this._removeInvisibleSpace(prev.previousSibling);}},_removeInvisibleSpace:function _removeInvisibleSpace(el){if(el&&el.nodeType===3&&this.utils.searchInvisibleChars(el.textContent)!==-1){el.parentNode.removeChild(el);}},_save:function _save($modal,$form){var data=$form.getData();var imageData={title:data.title};if(this.opts.imageLink)imageData.link={url:data.url,target:data.target};if(this.opts.imageCaption)imageData.caption=data.caption;if(this.opts.imagePosition)imageData.align=data.align;this.$image.setData(imageData);if(this.resizer)this.resizer.rebuild();this.app.broadcast('image.changed',this.$image);this.app.api('module.modal.close');},_change:function _change(response,modal){if(typeof response==='string'){response={\"file\":{url:response}};}if(_typeof(response)==='object'){var $img;for(var key in response){if(_typeof(response[key])==='object'){$img=$R.dom('<img>');$img.attr('src',response[key].url);this.$image.changeImage(response[key]);this.app.broadcast('image.changed',this.$image,response);this.app.broadcast('image.uploaded',this.$image,response);this.app.broadcast('hardsync');break;}}if(modal!==false){$img.on('load',function(){this.$previewBox.html($img);}.bind(this));}}},_uploadError:function _uploadError(response){this.app.broadcast('image.uploadError',response);},_remove:function _remove(node){this.app.api('module.modal.close');this.component.remove(node);},_observeImages:function _observeImages(){var $editor=this.editor.getElement();var self=this;$editor.find('img').each(function(node){var $node=$R.dom(node);$node.off('.drop-to-replace');$node.on('dragover.drop-to-replace dragenter.drop-to-replace',function(e){e.preventDefault();return;});$node.on('drop.drop-to-replace',function(e){if(!self.app.isDragComponentInside()){return self._setReplaceUpload(e,$node);}});});},_setFormData:function _setFormData($modal,$form){this._buildPreview($modal);this._buildPreviewUpload();var imageData=this.$image.getData();var data={title:imageData.title};// caption\nif(this.opts.imageCaption)data.caption=imageData.caption;else $modal.find('.form-item-caption').hide();// position\nif(this.opts.imagePosition)data.align=imageData.align;else $modal.find('.form-item-align').hide();// link\nif(this.opts.imageLink){if(imageData.link){data.url=imageData.link.url;if(imageData.link.target)data.target=true;}}else $modal.find('.form-item-link').hide();$form.setData(data);},_setFormFocus:function _setFormFocus($form){$form.getField('title').focus();},_setReplaceUpload:function _setReplaceUpload(e,$node){e=e.originalEvent||e;e.stopPropagation();e.preventDefault();if(!this.opts.imageUpload)return;this.$image=this.component.create('image',$node);var options={url:this.opts.imageUpload,files:e.dataTransfer.files,name:'imagereplace',data:this.opts.imageData,paramName:this.opts.imageUploadParam};this.app.api('module.upload.send',options);return;},_setUpload:function _setUpload($modal,$form){if(!this.opts.imageUpload){var $body=$modal.getBody();var $tab=$body.find('.redactor-modal-tab-upload');$tab.remove();}var options={url:this.opts.imageUpload,element:$form.getField('file'),name:'image',data:this.opts.imageData,paramName:this.opts.imageUploadParam};this.app.api('module.upload.build',options);},_buildPreview:function _buildPreview($modal){this.$preview=$modal.find('#redactor-modal-image-preview');var imageData=this.$image.getData();var $previewImg=$R.dom('<img>');$previewImg.attr('src',imageData.src);this.$previewBox=$R.dom('<div>');this.$previewBox.append($previewImg);this.$preview.html('');this.$preview.append(this.$previewBox);},_buildPreviewUpload:function _buildPreviewUpload(){if(!this.opts.imageUpload)return;var $desc=$R.dom('<div class=\"desc\">');$desc.html(this.lang.get('upload-change-label'));this.$preview.append($desc);var options={url:this.opts.imageUpload,element:this.$previewBox,name:'imageedit',data:this.opts.imageData,paramName:this.opts.imageUploadParam};this.app.api('module.upload.build',options);}});$R.add('class','image.component',{mixins:['dom','component'],init:function init(app,el){this.app=app;this.opts=app.opts;this.selection=app.selection;// init\nreturn el&&el.cmnt!==undefined?el:this._init(el);},setData:function setData(data){for(var name in data){this._set(name,data[name]);}},getData:function getData(){var names=['src','title','caption','align','link','id'];var data={};for(var i=0;i<names.length;i++){data[names[i]]=this._get(names[i]);}return data;},getElement:function getElement(){return this.$element;},changeImage:function changeImage(data){this.$element.attr('src',data.url);},// private\n_init:function _init(el){var $el=$R.dom(el);var $figure=$el.closest('figure');if(el===undefined){this.$element=$R.dom('<img>');this.parse('<figure>');this.append(this.$element);}else if($figure.length===0){this.parse('<figure>');this.$element=$el;this.$element.wrap(this);}else{this.parse($figure);this.$element=this.find('img');}this._initWrapper();},_set:function _set(name,value){this['_set_'+name](value);},_get:function _get(name){return this['_get_'+name]();},_set_src:function _set_src(src){this.$element.attr('src',src);},_set_id:function _set_id(id){if(this.opts.imageObserve){this.$element.attr('data-image',id);}},_set_title:function _set_title(title){title=title.trim().replace(/(<([^>]+)>)/ig,\"\");if(title===''){this.$element.removeAttr('alt');}else{this.$element.attr('alt',title);}},_set_caption:function _set_caption(caption){var $figcaption=this.find('figcaption');if($figcaption.length===0){$figcaption=$R.dom('<figcaption>');$figcaption.attr('contenteditable','true');this.append($figcaption);}if(caption==='')$figcaption.remove();else $figcaption.html(caption);return $figcaption;},_set_align:function _set_align(align){var imageFloat='';var imageMargin='';var textAlign='';var $el=this;var $img=this.find('img');var $figcaption=this.find('figcaption');if(_typeof(this.opts.imagePosition)==='object'){var positions=this.opts.imagePosition;for(var key in positions){$el.removeClass(positions[key]);}var alignClass=typeof positions[align]!=='undefined'?positions[align]:false;if(alignClass){$el.addClass(alignClass);}}else{var width=$img.width();switch(align){case'left':imageFloat='left';imageMargin='0 '+this.opts.imageFloatMargin+' '+this.opts.imageFloatMargin+' 0';break;case'right':imageFloat='right';imageMargin='0 0 '+this.opts.imageFloatMargin+' '+this.opts.imageFloatMargin;break;case'center':textAlign='center';imageMargin='auto';break;}$el.css({'float':imageFloat,width:width+'px',maxWidth:width+'px','margin':imageMargin,'text-align':textAlign});$el.attr('rel',$el.attr('style'));if(align==='none'){$el.css('max-width','');$el.css('width','');}if(align==='center'){$el.css('max-width','');$el.css('width','');$figcaption.css('text-align','center');}else{$figcaption.css('text-align','');}}},_set_link:function _set_link(data){var $link=this._findLink();if(data.url===''){if($link)$link.unwrap();return;}if(!$link){$link=$R.dom('<a>');this.$element.wrap($link);}$link.attr('href',data.url);if(data.target)$link.attr('target',data.target===true?'_blank':data.target);else $link.removeAttr('target');return $link;},_get_src:function _get_src(){return this.$element.attr('src');},_get_id:function _get_id(){return this.$element.attr('data-image');},_get_title:function _get_title(){var alt=this.$element.attr('alt');return alt?alt:'';},_get_caption:function _get_caption(){var $figcaption=this.find('figcaption');if($figcaption.length===0){return'';}else{return $figcaption.html();}},_get_align:function _get_align(){var align='';if(_typeof(this.opts.imagePosition)==='object'){align='none';var positions=this.opts.imagePosition;for(var key in positions){if(this.hasClass(positions[key])){align=key;break;}}}else{align=this.css('text-align')==='center'?'center':this.css('float');}return align;},_get_link:function _get_link(){var $link=this._findLink();if($link){var target=$link.attr('target')?true:false;return{url:$link.attr('href'),target:target};}},_initWrapper:function _initWrapper(){this.addClass('redactor-component');this.attr({'data-redactor-type':'image','tabindex':'-1','contenteditable':false});},_findLink:function _findLink(){var $link=this.find('a').filter(function(node){return $R.dom(node).closest('figcaption').length===0;});if($link.length!==0){return $link;}return false;}});$R.add('class','image.resize',{init:function init(app){this.app=app;this.$doc=app.$doc;this.$win=app.$win;this.$body=app.$body;this.editor=app.editor;this.toolbar=app.toolbar;this.inspector=app.inspector;// init\nthis.$target=this.toolbar.isTarget()?this.toolbar.getTargetElement():this.$body;this._init();},// public\nrebuild:function rebuild(){this._setResizerPosition();},hide:function hide(){this.$target.find('#redactor-image-resizer').remove();},stop:function stop(){var $editor=this.editor.getElement();$editor.off('.redactor.image-resize');this.$doc.off('.redactor.image-resize');this.$win.off('resize.redactor.image-resize');this.hide();},// private\n_init:function _init(){var $editor=this.editor.getElement();$editor.on('click.redactor.image-resize',this._build.bind(this));this.$win.on('resize.redactor.image-resize',this._setResizerPosition.bind(this));},_build:function _build(e){this.$target.find('#redactor-image-resizer').remove();if(this.app.isReadOnly())return;var data=this.inspector.parse(e.target);var $editor=this.editor.getElement();if(data.isComponentType('image')){this.$resizableBox=$editor;this.$resizableImage=$R.dom(data.getImageElement());this.$resizer=$R.dom('<span>');this.$resizer.attr('id','redactor-image-resizer');this.$target.append(this.$resizer);this._setResizerPosition();this.$resizer.on('mousedown touchstart',this._set.bind(this));}},_setResizerPosition:function _setResizerPosition(){if(this.$resizer){var isTarget=this.toolbar.isTarget();var targetOffset=this.$target.offset();var offsetFix=7;var topOffset=isTarget?offsetFix-targetOffset.top+this.$target.scrollTop():offsetFix;var leftOffset=isTarget?offsetFix-targetOffset.left:offsetFix;var pos=this.$resizableImage.offset();var width=this.$resizableImage.width();var height=this.$resizableImage.height();var resizerWidth=this.$resizer.width();var resizerHeight=this.$resizer.height();this.$resizer.css({top:Math.round(pos.top+height-resizerHeight+topOffset)+'px',left:Math.round(pos.left+width-resizerWidth+leftOffset)+'px'});}},_set:function _set(e){e.preventDefault();this.resizeHandle={x:e.pageX,y:e.pageY,el:this.$resizableImage,$figure:this.$resizableImage.closest('figure'),ratio:this.$resizableImage.width()/this.$resizableImage.height(),h:this.$resizableImage.height()};e=e.originalEvent||e;if(e.targetTouches){this.resizeHandle.x=e.targetTouches[0].pageX;this.resizeHandle.y=e.targetTouches[0].pageY;}this.app.broadcast('contextbar.close');this.app.broadcast('image.resize',this.$resizableImage);this._start();},_start:function _start(){this.$doc.on('mousemove.redactor.image-resize touchmove.redactor.image-resize',this._move.bind(this));this.$doc.on('mouseup.redactor.image-resize touchend.redactor.image-resize',this._stop.bind(this));},_stop:function _stop(){this.$doc.off('.redactor.image-resize');this.app.broadcast('image.resized',this.$resizableImage);},_move:function _move(e){e.preventDefault();e=e.originalEvent||e;var height=this.resizeHandle.h;if(e.targetTouches)height+=e.targetTouches[0].pageY-this.resizeHandle.y;else height+=e.pageY-this.resizeHandle.y;var width=height*this.resizeHandle.ratio;width=Math.round(width);height=Math.round(height);if(height<20||width<100)return;if(this._getResizableBoxWidth()<=width)return;if(this.resizeHandle.$figure.length!==0&&this.resizeHandle.$figure.css('max-width')!==''){this.resizeHandle.$figure.css('max-width',width+'px');}this.resizeHandle.el.attr({width:width,height:height});this.resizeHandle.el.width(width);this.resizeHandle.el.css('max-width',width+'px');this.resizeHandle.el.height(height);this._setResizerPosition();},_getResizableBoxWidth:function _getResizableBoxWidth(){var width=this.$resizableBox.width();return width-parseInt(this.$resizableBox.css('padding-left'))-parseInt(this.$resizableBox.css('padding-right'));}});$R.add('module','file',{modals:{'file':'<div class=\"redactor-modal-tab\" data-title=\"## upload ##\"><form action=\"\"> \\\n                <div class=\"form-item form-item-title\"> \\\n                    <label for=\"modal-file-title\"> ## filename ## <span class=\"desc\">(## optional ##)</span></label> \\\n                    <input type=\"text\" id=\"modal-file-title\" name=\"title\" /> \\\n                </div> \\\n                <input type=\"file\" name=\"file\"> \\\n            </form></div>'},init:function init(app){this.app=app;this.opts=app.opts;this.lang=app.lang;this.caret=app.caret;this.utils=app.utils;this.storage=app.storage;this.component=app.component;this.inspector=app.inspector;this.insertion=app.insertion;this.selection=app.selection;},// messages\nonstarted:function onstarted(){// storage observe\nthis.storage.observeFiles();},ondropfile:function ondropfile(e,files,clipboard){if(!this.opts.fileUpload)return;var options={url:this.opts.fileUpload,event:clipboard?false:e,files:files,name:'filedrop',data:this.opts.fileData};this.app.api('module.upload.send',options);},onmodal:{file:{open:function open($modal,$form){this._setFormData($modal,$form);this._setUpload($form);},opened:function opened($modal,$form){this._setFormFocus($form);this.$form=$form;}}},onupload:{file:{complete:function complete(response){this._insert(response);},error:function error(response){this._uploadError(response);}},filedrop:{complete:function complete(response,e){this._insert(response,e);},error:function error(response){this._uploadError(response);}}},// public\nopen:function open(){this._open();},insert:function insert(data){this._insert(data);},remove:function remove(node){this._remove(node);},// private\n_open:function _open(){this.app.api('module.modal.build',this._getModalData());},_getModalData:function _getModalData(){var modalData={name:'file',title:this.lang.get('file')};return modalData;},_insert:function _insert(response,e){this.app.api('module.modal.close');if(_typeof(response)!=='object')return;if(Array.isArray(response)){var obj={};for(var i=0;i<response.length;i++){obj=$R.extend(obj,response[i]);}response=obj;}var multiple=Object.keys(response).length>1;if(multiple){this._insertMultiple(response,e);}else{this._insertSingle(response,e);}this.$form=false;},_insertSingle:function _insertSingle(response,e){var inserted=[];for(var key in response){var $file=this._createFileAndStore(response[key]);if(this.opts.fileAttachment){inserted=this._insertAsAttachment($file);}else{inserted=e?this.insertion.insertToPoint(e,$file):this.insertion.insertRaw($file);}this.app.broadcast('file.uploaded',inserted[0],response);}},_insertMultiple:function _insertMultiple(response,e){var z=0;var inserted=[];var $last;for(var key in response){z++;var $file=this._createFileAndStore(response[key]);if(this.opts.fileAttachment){inserted=this._insertAsAttachment($file,response);}else{if(z===1){inserted=e?this.insertion.insertToPoint(e,$file):this.insertion.insertRaw($file);}else{var $inserted=$R.dom(inserted[0]);$inserted.after($file).after(' ');inserted=[$file.get()];this.app.broadcast('file.inserted',$file);}}$last=$file;this.app.broadcast('file.uploaded',inserted[0],response);}// set caret after last\nif(!this.opts.fileAttachment){this.caret.setAfter($last);}},_insertAsAttachment:function _insertAsAttachment($file,response){var $box=$R.dom(this.opts.fileAttachment);var $wrapper=$file.wrapAttachment();$box.append($wrapper);var inserted=[$wrapper.get()];this.app.broadcast('file.appended',inserted[0],response);return inserted;},_createFileAndStore:function _createFileAndStore(item){var modalFormData=this.$form?this.$form.getData():false;var name=item.name?item.name:item.url;var title=!this.opts.fileAttachment&&modalFormData&&modalFormData.title!==''?modalFormData.title:this._truncateUrl(name);var $file=this.component.create('file');$file.attr('href',item.url);$file.attr('data-file',item.id?item.id:this.utils.getRandomId());$file.attr('data-name',item.name);$file.html(title);// add to storage\nthis.storage.add('file',$file);return $file;},_remove:function _remove(node){this.selection.save();var $file=this.component.create('file',node);var stop=this.app.broadcast('file.delete',$file);if(stop!==false){$file.unwrap();this.selection.restore();// callback\nthis.app.broadcast('file.deleted',$file);}else{this.selection.restore();}},_truncateUrl:function _truncateUrl(url){return url.search(/^http/)!==-1&&url.length>20?url.substring(0,20)+'...':url;},_setUpload:function _setUpload($form){var options={url:this.opts.fileUpload,element:$form.getField('file'),name:'file',data:this.opts.fileData,paramName:this.opts.fileUploadParam};this.app.api('module.upload.build',options);},_setFormData:function _setFormData($modal,$form){if(this.opts.fileAttachment){$modal.find('.form-item-title').hide();}else{$form.setData({title:this.selection.getText()});}},_setFormFocus:function _setFormFocus($form){$form.getField('title').focus();},_uploadError:function _uploadError(response){this.app.broadcast('file.uploadError',response);}});$R.add('class','file.component',{mixins:['dom','component'],init:function init(app,el){this.app=app;this.opts=app.opts;// init\nreturn el&&el.cmnt!==undefined?el:this._init(el);},wrapAttachment:function wrapAttachment(){this.$wrapper=$R.dom('<span class=\"redactor-file-item\">');this.$remover=$R.dom('<span class=\"redactor-file-remover\">');this.$remover.html('&times;');this.$remover.on('click',this.removeAttachment.bind(this));this.$wrapper.append(this);this.$wrapper.append(this.$remover);return this.$wrapper;},removeAttachment:function removeAttachment(e){e.preventDefault();var stop=this.app.broadcast('file.delete',this,this.$wrapper);if(stop!==false){this.$wrapper.remove();this.app.broadcast('file.deleted',this);this.app.broadcast('file.removeAttachment',this);}},// private\n_init:function _init(el){if(el===undefined){this.parse('<a>');}else{var $a=$R.dom(el).closest('a');this.parse($a);}}});$R.add('module','buffer',{init:function init(app){this.app=app;this.opts=app.opts;this.editor=app.editor;this.offset=app.offset;this.keycodes=app.keycodes;this.selection=app.selection;// local\nthis.state=false;this.passed=false;this.keyPressed=false;this.undoStorage=[];this.redoStorage=[];},// messages\nonkeydown:function onkeydown(e){this._listen(e);},onsyncing:function onsyncing(){if(!this.keyPressed){this.trigger();}this.keyPressed=false;},onbuffer:{trigger:function trigger(){this.trigger();}},onstate:function onstate(e,html,offset){if(e&&(e.ctrlKey||e.metaKey)||e&&(this._isUndo(e)||this._isRedo(e))){return;}this.passed=false;this._saveState(html,offset);if(e===false){this._setUndo();}},onenable:function onenable(){this.clear();},// public\nclear:function clear(){this.state=false;this.undoStorage=[];this.redoStorage=[];},undo:function undo(){this._getUndo();},redo:function redo(){this._getRedo();},trigger:function trigger(){if(this.state&&this.passed===false)this._setUndo();},// private\n_saveState:function _saveState(html,offset){var $editor=this.editor.getElement();this.state={html:html||$editor.html(),offset:offset||this.offset.get()};},_listen:function _listen(e){var key=e.which;var ctrl=e.ctrlKey||e.metaKey;var cmd=ctrl||e.shiftKey||e.altKey;var keys=[this.keycodes.SPACE,this.keycodes.ENTER,this.keycodes.BACKSPACE,this.keycodes.DELETE,this.keycodes.TAB,this.keycodes.LEFT,this.keycodes.RIGHT,this.keycodes.UP,this.keycodes.DOWN];// undo\nif(this._isUndo(e))// z key\n{e.preventDefault();this.undo();return;}// redo\nelse if(this._isRedo(e)){e.preventDefault();this.redo();return;}// spec keys\nelse if(!ctrl&&keys.indexOf(key)!==-1){cmd=true;this.trigger();}// cut & copy\nelse if(ctrl&&(key===88||key===67)){cmd=true;this.trigger();}// empty buffer\nif(!cmd&&!this._hasUndo()){this.trigger();}this.keyPressed=true;},_isUndo:function _isUndo(e){var key=e.which;var ctrl=e.ctrlKey||e.metaKey;return ctrl&&key===90&&!e.shiftKey&&!e.altKey;},_isRedo:function _isRedo(e){var key=e.which;var ctrl=e.ctrlKey||e.metaKey;return ctrl&&(key===90&&e.shiftKey||key===89&&!e.shiftKey)&&!e.altKey;},_setUndo:function _setUndo(){var last=this.undoStorage[this.undoStorage.length-1];if(typeof last==='undefined'||last[0]!==this.state.html){this.undoStorage.push([this.state.html,this.state.offset]);this._removeOverStorage();}},_setRedo:function _setRedo(){var $editor=this.editor.getElement();var offset=this.offset.get();var html=$editor.html();this.redoStorage.push([html,offset]);this.redoStorage=this.redoStorage.slice(0,this.opts.bufferLimit);},_getUndo:function _getUndo(){if(!this._hasUndo())return;this.passed=true;var $editor=this.editor.getElement();var buffer=this.undoStorage.pop();this._setRedo();$editor.html(buffer[0]);this.offset.set(buffer[1]);this._saveState(buffer[0],buffer[1]);this.selection.restore();this.app.broadcast('undo',buffer[0],buffer[1]);},_getRedo:function _getRedo(){if(!this._hasRedo())return;this.passed=true;var $editor=this.editor.getElement();var buffer=this.redoStorage.pop();this._setUndo();$editor.html(buffer[0]);this.offset.set(buffer[1]);this._saveState(buffer[0],buffer[1]);this.app.broadcast('redo',buffer[0],buffer[1]);},_removeOverStorage:function _removeOverStorage(){if(this.undoStorage.length>this.opts.bufferLimit){this.undoStorage=this.undoStorage.slice(0,this.undoStorage.length-this.opts.bufferLimit);}},_hasUndo:function _hasUndo(){return this.undoStorage.length!==0;},_hasRedo:function _hasRedo(){return this.redoStorage.length!==0;}});$R.add('module','list',{init:function init(app){this.app=app;this.uuid=app.uuid;this.opts=app.opts;this.utils=app.utils;this.block=app.block;this.toolbar=app.toolbar;this.inspector=app.inspector;this.selection=app.selection;},// messages\nonbutton:{list:{observe:function observe(button){this._observeButton(button);}}},ondropdown:{list:{observe:function observe(dropdown){this._observeDropdown(dropdown);}}},// public\ntoggle:function toggle(type){var nodes=this._getBlocks();var block=this.selection.getBlock();var $list=$R.dom(block).parents('ul, ol','.redactor-in-'+this.uuid).last();if(nodes.length===0&&$list.length!==0){nodes=[$list.get()];}if(block&&(block.tagName==='TD'||block.tagName==='TH')){nodes=this.block.format('div');}this.selection.saveMarkers();nodes=nodes.length!==0&&this._isUnformat(type,nodes)?this._unformat(type,nodes):this._format(type,nodes);this.selection.restoreMarkers();return nodes;},indent:function indent(){var isCollapsed=this.selection.isCollapsed();var current=this.selection.getCurrent();var data=this.inspector.parse(current);var item=data.isList()?data.getListItem():false;var $item=$R.dom(item);var $prev=$item.prevElement();var prev=$prev.get();var isIndent=isCollapsed&&item&&prev&&prev.tagName==='LI';if(isIndent){this.selection.saveMarkers();$prev=$R.dom(prev);var $prevChild=$prev.children('ul, ol');var $list=$item.closest('ul, ol');if($prevChild.length!==0){$prevChild.append($item);}else{var listTag=$list.get().tagName.toLowerCase();var $newList=$R.dom('<'+listTag+'>');$newList.append($item);$prev.append($newList);}this.selection.restoreMarkers();}},outdent:function outdent(){var isCollapsed=this.selection.isCollapsed();var current=this.selection.getCurrent();var data=this.inspector.parse(current);var item=data.isList()?data.getListItem():false;var $item=$R.dom(item);if(isCollapsed&&item){var $listItem=$item.parent();var $liItem=$listItem.closest('li','.redactor-in-'+this.uuid);var $prev=$item.prevElement();var $next=$item.nextElement();var prev=$prev.get();var next=$next.get();var nextItems,nextList,$newList,$nextList;var isTop=prev===false;var isMiddle=prev!==false&&next!==false;var isBottom=!isTop&&next===false;this.selection.saveMarkers();// out\nif($liItem.length!==0){if(isMiddle){nextItems=this._getAllNext($item.get());$newList=$R.dom('<'+$listItem.get().tagName.toLowerCase()+'>');for(var i=0;i<nextItems.length;i++){$newList.append(nextItems[i]);}$liItem.after($item);$item.append($newList);}else{$liItem.after($item);if($listItem.children().length===0){$listItem.remove();}else{if(isTop)$item.append($listItem);}}}// unformat\nelse{var $container=this._createUnformatContainer($item);var $childList=$container.find('ul, ol').first();if(isTop)$listItem.before($container);else if(isBottom)$listItem.after($container);else if(isMiddle){$newList=$R.dom('<'+$listItem.get().tagName.toLowerCase()+'>');nextItems=this._getAllNext($item.get());for(var i=0;i<nextItems.length;i++){$newList.append(nextItems[i]);}$listItem.after($container);$container.after($newList);}if($childList.length!==0){$nextList=$container.nextElement();nextList=$nextList.get();if(nextList&&nextList.tagName===$listItem.get().tagName){$R.dom(nextList).prepend($childList);$childList.unwrap();}else{$container.after($childList);}}$item.remove();}this.selection.restoreMarkers();}},// private\n_getAllNext:function _getAllNext(next){var nodes=[];while(next){var $next=$R.dom(next).nextElement();next=$next.get();if(next)nodes.push(next);else return nodes;}return nodes;},_isUnformat:function _isUnformat(type,nodes){var countLists=0;for(var i=0;i<nodes.length;i++){if(nodes[i].nodeType!==3){var tag=nodes[i].tagName.toLowerCase();if(tag===type||tag==='figure'){countLists++;}}}return countLists===nodes.length;},_format:function _format(type,nodes){var tags=['p','div','blockquote','pre','h1','h2','h3','h4','h5','h6','ul','ol'];var blocks=this._uniteBlocks(nodes,tags);var lists=[];for(var key in blocks){var items=blocks[key];var $list=this._createList(type,blocks[key]);for(var i=0;i<items.length;i++){var $item;// lists\nif(items[i].nodeType!==3&&(items[i].tagName==='UL'||items[i].tagName==='OL')){var $oldList=$R.dom(items[i]);$item=$oldList.contents();$list.append($item);// old is empty\nif(this.utils.isEmpty($oldList))$oldList.remove();}// other blocks or texts\nelse{$item=this._createListItem(items[i]);this.utils.normalizeTextNodes($item);$list.append($item);}}lists.push($list.get());}return lists;},_uniteBlocks:function _uniteBlocks(nodes,tags){var z=0;var blocks={0:[]};var lastcell=false;for(var i=0;i<nodes.length;i++){var $node=$R.dom(nodes[i]);var $cell=$node.closest('th, td');if($cell.length!==0){if($cell.get()!==lastcell){// create block\nz++;blocks[z]=[];}if(this._isUniteBlock(nodes[i],tags)){blocks[z].push(nodes[i]);}}else{if(this._isUniteBlock(nodes[i],tags)){blocks[z].push(nodes[i]);}else{// create block\nz++;blocks[z]=[];}}lastcell=$cell.get();}return blocks;},_isUniteBlock:function _isUniteBlock(node,tags){return node.nodeType===3||tags.indexOf(node.tagName.toLowerCase())!==-1;},_createList:function _createList(type,blocks){var last=blocks[blocks.length-1];var $last=$R.dom(last);var $list=$R.dom('<'+type+'>');$last.after($list);return $list;},_createListItem:function _createListItem(item){var $item=$R.dom('<li>');if(item.nodeType===3){$item.append(item);}else{var $el=$R.dom(item);$item.append($el.contents());$el.remove();}return $item;},_unformat:function _unformat(type,nodes){if(nodes.length===1){// one list\nvar $list=$R.dom(nodes[0]);var $items=$list.find('li');var selectedItems=this.selection.getNodes({tags:['li']});var block=this.selection.getBlock();var $li=$R.dom(block).closest('li');if(selectedItems.length===0&&$li.length!==0){selectedItems=[$li.get()];}// 1) entire\nif(selectedItems.length===$items.length){return this._unformatEntire(nodes[0]);}var pos=this._getItemsPosition($items,selectedItems);// 2) top\nif(pos==='Top'){return this._unformatAtSide('before',selectedItems,$list);}// 3) bottom\nelse if(pos==='Bottom'){selectedItems.reverse();return this._unformatAtSide('after',selectedItems,$list);}// 4) middle\nelse if(pos==='Middle'){var $last=$R.dom(selectedItems[selectedItems.length-1]);var ci=false;var $parent=false;var $secondList=$R.dom('<'+$list.get().tagName.toLowerCase()+'>');$items.each(function(node){if(ci){var $node=$R.dom(node);if($node.closest('.redactor-split-item').length===0&&($parent===false||$node.closest($parent).length===0)){$node.addClass('redactor-split-item');}$parent=$node;}if(node===$last.get()){ci=true;}});$items.filter('.redactor-split-item').each(function(node){var $node=$R.dom(node);$node.removeClass('redactor-split-item');$secondList.append(node);});$list.after($secondList);selectedItems.reverse();for(var i=0;i<selectedItems.length;i++){var $item=$R.dom(selectedItems[i]);var $container=this._createUnformatContainer($item);$list.after($container);$container.find('ul, ol').remove();$item.remove();}return;}}else{// unformat all\nfor(var i=0;i<nodes.length;i++){if(nodes[i].nodeType!==3&&nodes[i].tagName.toLowerCase()===type){this._unformatEntire(nodes[i]);}}}},_unformatEntire:function _unformatEntire(list){var $list=$R.dom(list);var $items=$list.find('li');$items.each(function(node){var $item=$R.dom(node);var $container=this._createUnformatContainer($item);$item.remove();$list.before($container);}.bind(this));$list.remove();},_unformatAtSide:function _unformatAtSide(type,selectedItems,$list){for(var i=0;i<selectedItems.length;i++){var $item=$R.dom(selectedItems[i]);var $container=this._createUnformatContainer($item);$list[type]($container);var $innerLists=$container.find('ul, ol').first();$item.append($innerLists);$innerLists.each(function(node){var $node=$R.dom(node);var $parent=$node.closest('li');if($parent.get()===selectedItems[i]){$node.unwrap();$parent.addClass('r-unwrapped');}});if(this.utils.isEmptyHtml($item.html()))$item.remove();}// clear empty\n$list.find('.r-unwrapped').each(function(node){var $node=$R.dom(node);if($node.html().trim()==='')$node.remove();else $node.removeClass('r-unwrapped');});},_getItemsPosition:function _getItemsPosition($items,selectedItems){var pos='Middle';var sFirst=selectedItems[0];var sLast=selectedItems[selectedItems.length-1];var first=$items.first().get();var last=$items.last().get();if(first===sFirst&&last!==sLast){pos='Top';}else if(first!==sFirst&&last===sLast){pos='Bottom';}return pos;},_createUnformatContainer:function _createUnformatContainer($item){var $container=$R.dom('<'+this.opts.markup+'>');if(this.opts.breakline)$container.attr('data-redactor-tag','br');$container.append($item.contents());return $container;},_getBlocks:function _getBlocks(){return this.selection.getBlocks({first:true});},_observeButton:function _observeButton(){var current=this.selection.getCurrent();var data=this.inspector.parse(current);var isDisabled=data.isPre()||data.isCode()||data.isFigcaption();this._observeButtonsList(isDisabled,['lists','ul','ol','outdent','indent']);var itemOutdent=this.toolbar.getButton('outdent');var itemIndent=this.toolbar.getButton('indent');this._observeIndent(itemIndent,itemOutdent);},_observeDropdown:function _observeDropdown(dropdown){var itemOutdent=dropdown.getItem('outdent');var itemIndent=dropdown.getItem('indent');this._observeIndent(itemIndent,itemOutdent);},_observeIndent:function _observeIndent(itemIndent,itemOutdent){var isCollapsed=this.selection.isCollapsed();var current=this.selection.getCurrent();var data=this.inspector.parse(current);var item=data.isList()?data.getListItem():false;var $item=$R.dom(item);var $prev=$item.prevElement();var prev=$prev.get();var isIndent=isCollapsed&&item&&prev&&prev.tagName==='LI';if(itemOutdent){if(item&&isCollapsed)itemOutdent.enable();else itemOutdent.disable();}if(itemIndent){if(item&&isIndent)itemIndent.enable();else itemIndent.disable();}},_observeButtonsList:function _observeButtonsList(param,buttons){for(var i=0;i<buttons.length;i++){var button=this.toolbar.getButton(buttons[i]);if(button){if(param)button.disable();else button.enable();}}}});$R.add('class','video.component',{mixins:['dom','component'],init:function init(app,el){this.app=app;// init\nreturn el&&el.cmnt!==undefined?el:this._init(el);},// private\n_init:function _init(el){if(typeof el!=='undefined'){var $node=$R.dom(el);var $wrapper=$node.closest('figure');if($wrapper.length!==0){this.parse($wrapper);}else{this.parse('<figure>');this.append(el);}}else{this.parse('<figure>');}this._initWrapper();},_initWrapper:function _initWrapper(){this.addClass('redactor-component');this.attr({'data-redactor-type':'video','tabindex':'-1','contenteditable':false});}});$R.add('class','widget.component',{mixins:['dom','component'],init:function init(app,el){this.app=app;// init\nreturn el&&el.cmnt!==undefined?el:this._init(el);},getData:function getData(){return{html:this._getHtml()};},// private\n_init:function _init(el){if(typeof el!=='undefined'){var $node=$R.dom(el);var $figure=$node.closest('figure');if($figure.length!==0){this.parse($figure);}else{this.parse('<figure>');this.html(el);}}else{this.parse('<figure>');}this._initWrapper();},_getHtml:function _getHtml(){var $wrapper=$R.dom('<div>');$wrapper.html(this.html());$wrapper.find('.redactor-component-caret').remove();return $wrapper.html();},_initWrapper:function _initWrapper(){this.addClass('redactor-component');this.attr({'data-redactor-type':'widget','tabindex':'-1','contenteditable':false});}});window.Redactor=window.$R=$R;// Data attribute load\nwindow.addEventListener('load',function(){$R('[data-redactor]');});// Export for webpack\nif(( false?undefined:_typeof(module))==='object'&&module.exports){module.exports=Redactor;module.exports.Redactor=Redactor;}})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/redactor/redactor.js\n");

/***/ }),

/***/ "./resources/sass/app.scss":
/*!*********************************!*\
  !*** ./resources/sass/app.scss ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz8wZTE1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL3Nhc3MvYXBwLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

/***/ }),

/***/ 0:
/*!*************************************************************!*\
  !*** multi ./resources/js/app.js ./resources/sass/app.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\laragon\www\lmsdemo\resources\js\app.js */"./resources/js/app.js");
module.exports = __webpack_require__(/*! C:\laragon\www\lmsdemo\resources\sass\app.scss */"./resources/sass/app.scss");


/***/ })

/******/ });