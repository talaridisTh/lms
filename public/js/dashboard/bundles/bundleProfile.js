/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./resources/js/dashboard/bundles/bundleProfile.js":
/*!*********************************************************!*\
  !*** ./resources/js/dashboard/bundles/bundleProfile.js ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main */ \"./resources/js/dashboard/main.js\");\n/* harmony import */ var _plugins_dropzone_js_dropzone__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugins/dropzone/js/dropzone */ \"./resources/plugins/dropzone/js/dropzone.js\");\n/* harmony import */ var _plugins_dropzone_js_dropzone__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_plugins_dropzone_js_dropzone__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _plugins_article_editor_article_editor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../plugins/article-editor/article-editor */ \"./resources/plugins/article-editor/article-editor.js\");\n/* harmony import */ var _plugins_article_editor_article_editor__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_plugins_article_editor_article_editor__WEBPACK_IMPORTED_MODULE_2__);\n//!######################################\n//! \t\t\t\tImports\t\t\t\t#\n//!######################################\n\n\n //! GLOBAL VARIABLES\n\nvar bundleId = $(\"#bundle-courses-list\")[0].dataset.bundleId;\nvar totalCourses = $('#total-courses-cnt')[0];\nvar updatedAt = $(\"#last-update-cnt\")[0]; //! EventListerners\n\n$(\"#publish-date-select\").daterangepicker({\n  singleDatePicker: true,\n  drops: \"auto\",\n  opens: \"center\",\n  timePicker: true,\n  timePicker24Hour: true,\n  locale: {\n    format: \"DD-MM-YYYY H:mm\"\n  }\n});\n$('#main-active-courses-checkbox').click(function () {\n  var checkboxes = $('.js-course-checkbox');\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].minorCheckboxSwitcher(this, checkboxes);\n});\n$('#all-courses-checkbox').change(function () {\n  var checkboxes = $('.js-remainings-checkbox');\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].minorCheckboxSwitcher(this, checkboxes);\n});\n$('#add-courses-btn').click(function () {\n  var checkboxes = $('.js-remainings-checkbox:checked');\n  var ids = [];\n\n  if (checkboxes.length == 0) {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('info', \"Δεν υπάρχουν επιλεγμένα μαθήματα...\");\n    return;\n  } else {\n    for (var i = 0; i < checkboxes.length; i++) {\n      ids.push(checkboxes[i].dataset.courseId);\n    }\n\n    postCourseIds(ids);\n  }\n});\n$('#remove-selected-courses-btn').click(function () {\n  var checkboxes = $('.js-course-checkbox:checked');\n  var ids = [];\n\n  if (checkboxes.length == 0) {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('info', \"Δεν υπάρχουν επιλεγμένα μαθήματα...\");\n    return;\n  } else {\n    for (var i = 0; i < checkboxes.length; i++) {\n      ids.push(checkboxes[i].dataset.courseId);\n    }\n\n    removeCourses(ids);\n  }\n}); //! EventListerners /end\n//! Datatables\n\nvar bundleCoursesTable = $(\"#bundle-courses-list\").DataTable({\n  order: [3, \"desc\"],\n  processing: true,\n  serverSide: true,\n  ajax: {\n    url: \"/bundles/bundle-courses-datatable\",\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    type: \"post\",\n    data: {\n      bundleId: bundleId\n    }\n  },\n  columns: [{\n    data: 'action',\n    name: 'action',\n    orderable: false,\n    width: \"5%\"\n  }, {\n    data: 'title',\n    name: 'title',\n    className: \"js-link cursor-pointer\"\n  }, {\n    data: 'updated_at',\n    name: 'updated_at',\n    className: \"js-link cursor-pointer\"\n  }, {\n    data: 'created_at',\n    name: 'created_at',\n    className: \"js-link cursor-pointer\"\n  }],\n  language: _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tableLocale,\n  fnInitComplete: function fnInitComplete(oSettings, json) {\n    var lenthSelection = $(\"select[name='bundle-courses-list_length']\");\n    lenthSelection.addClass(\"select2\");\n    lenthSelection.select2({\n      minimumResultsForSearch: -1\n    });\n  },\n  drawCallback: function drawCallback() {\n    $(\".dataTables_paginate > .pagination\").addClass(\"pagination-rounded\");\n    $(\".dataTables_wrapper > .row:first-child > div\").removeClass(\"col-sm-12 col-md-6\");\n    $(\".dataTables_wrapper > .row:first-child > div\").addClass(\"col-lg-12 col-xl-6 d-md-flex justify-content-md-center d-xl-block\");\n    $(\".js-remove-table-classes > thead > tr > th\").removeClass(\"js-link cursor-pointer\");\n    jsLinkEventListener();\n    activeCoursesCheckboxToggle();\n  }\n});\n\nfunction activeCoursesCheckboxToggle() {\n  var mainCheckbox = $('#main-active-courses-checkbox')[0];\n  var minorCheckbox = $('.js-course-checkbox');\n  minorCheckbox.unbind();\n  minorCheckbox.change(function () {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mainCheckboxSwitcher(mainCheckbox, minorCheckbox);\n  });\n}\n\nvar remainingCoursesTable = $(\"#remaining-courses-table\").DataTable({\n  order: [1, \"asc\"],\n  processing: true,\n  serverSide: true,\n  ajax: {\n    url: \"/bundles/remaining-courses-datatable\",\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    type: \"post\",\n    data: {\n      bundleId: bundleId\n    }\n  },\n  columns: [{\n    data: 'action',\n    name: 'action',\n    orderable: false,\n    searchable: false,\n    className: \"text-center\"\n  }, {\n    data: 'title',\n    name: 'title',\n    className: \"cursor-default\"\n  }, {\n    data: 'addBtn',\n    name: 'addBtn',\n    orderable: false,\n    searchable: false,\n    className: \"text-center\"\n  }],\n  language: _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tableLocale,\n  fnInitComplete: function fnInitComplete(oSettings, json) {\n    var lenthSelection = $(\"select[name='remaining-courses-table_length']\");\n    lenthSelection.addClass(\"select2\");\n    lenthSelection.select2({\n      minimumResultsForSearch: -1\n    });\n  },\n  drawCallback: function drawCallback() {\n    $(\".dataTables_paginate > .pagination\").addClass(\"pagination-rounded\");\n    $(\".dataTables_wrapper > .row:first-child > div\").removeClass(\"col-sm-12 col-md-6\");\n    $(\".dataTables_wrapper > .row:first-child > div\").addClass(\"col-lg-12 col-xl-6 d-md-flex justify-content-md-center d-xl-block\");\n    $(\".js-remove-table-classes > thead > tr > th\").removeClass(\"cursor-pointer\");\n    $(\".js-remove-table-classes > tfoot > tr > th\").removeClass(\"cursor-pointer\");\n    addcourse();\n    remainingsCheckboxes();\n  }\n}); //! DataTables /end\n//! DataTables function / EventListener\n\nfunction addcourse() {\n  $('.js-add-course-btn').click(function () {\n    var courseId = [this.dataset.courseId];\n    postCourseIds(courseId);\n  });\n}\n\nfunction remainingsCheckboxes() {\n  var mainCheckbox = $('#all-courses-checkbox')[0];\n  var minorCheckbox = $('.js-remainings-checkbox');\n  minorCheckbox.unbind();\n  minorCheckbox.change(function () {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mainCheckboxSwitcher(mainCheckbox, minorCheckbox);\n  });\n}\n\nfunction jsLinkEventListener() {\n  var links = $(\".js-link\");\n  links.unbind();\n  links.click(function () {\n    var id = this.parentElement.dataset.courseId;\n    window.location = \"/dashboard/course/\".concat(id);\n  });\n} // DataTables function / EventListener End\n\n\nfunction postCourseIds(courseIds) {\n  axios.patch(\"/bundles/add-courses\", {\n    bundleId: bundleId,\n    courseIds: courseIds\n  }).then(function (res) {\n    var message = courseIds.length == 1 ? \"1 προστέθηκε\" : \"\".concat(courseIds.length, \" \\u03C0\\u03C1\\u03BF\\u03C3\\u03C4\\u03AD\\u03B8\\u03B7\\u03BA\\u03B1\\u03BD\");\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('success', message);\n    bundleCoursesTable.ajax.reload();\n    remainingCoursesTable.ajax.reload();\n    totalCourses.textContent = parseInt(totalCourses.textContent) + courseIds.length;\n    updatedAt.textContent = \"Μόλις τώρα\";\n  })[\"catch\"](function (err) {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('error', \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n  });\n}\n\nfunction removeCourses(courseIds) {\n  axios.patch(\"/bundles/remove-courses\", {\n    bundleId: bundleId,\n    courseIds: courseIds\n  }).then(function (res) {\n    var message = courseIds.length == 1 ? \"1 course Αφαιρέθηκε\" : \"\".concat(courseIds.length, \" courses \\u03B1\\u03C6\\u03B1\\u03B9\\u03C1\\u03AD\\u03B8\\u03B7\\u03BA\\u03B1\\u03BD\");\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('success', message);\n    bundleCoursesTable.ajax.reload();\n    remainingCoursesTable.ajax.reload();\n    totalCourses.textContent = parseInt(totalCourses.textContent) - courseIds.length;\n    updatedAt.textContent = \"Μόλις τώρα\";\n  })[\"catch\"](function (err) {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('error', \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n  });\n} //!##########################################\n//!\t\t\t\tInitializations\t\t\t\t#\n//!##########################################\n\n\n$R(\"#summary\", _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].redactorConfig);\n_plugins_article_editor_article_editor__WEBPACK_IMPORTED_MODULE_2___default()('#description', {\n  css: \"/css/\",\n  custom: {\n    css: [\"/css/arx-content.min.css\"]\n  },\n  editor: {\n    minHeight: \"300px\"\n  } // classes: {\n  // \t'p': 'text-muted',\n  // \t'h1': 'text-muted',\n  // \t'h2': 'text-muted',\n  // \t'h3': 'text-muted',\n  // \t'h4': 'text-muted',\n  // \t'h5': 'text-muted',\n  // }\n\n  /* image: {\r\n  \tupload: \"/materials/upload-content-images\",\r\n  \tdata: {\r\n  \t\t\"_token\": $('meta[name=\"csrf-token\"]').attr('content')\r\n  \t}\r\n  } */\n\n});\nvar dropzone = new _plugins_dropzone_js_dropzone__WEBPACK_IMPORTED_MODULE_1___default.a(\"#cover-dropzone\", {\n  previewTemplate: $(\"#uploadPreviewTemplate\").html(),\n  url: \"/target-url\",\n  thumbnailWidth: 80,\n  thumbnailHeight: 80\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/dashboard/bundles/bundleProfile.js\n");

/***/ }),

/***/ "./resources/js/dashboard/main.js":
/*!****************************************!*\
  !*** ./resources/js/dashboard/main.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nElement.prototype.findParent = function (loops) {\n  var parent = this;\n\n  for (var i = 0; i < loops; i++) {\n    parent = parent.parentElement;\n  }\n\n  return parent;\n}, false;\nElement.prototype.appendBefore = function (element) {\n  element.parentNode.insertBefore(this, element);\n}, false;\nElement.prototype.appendAfter = function (element) {\n  element.parentNode.insertBefore(this, element.nextSibling);\n}, false; //!##########################################\n//!\t\t\t\tConfigurations\t\t\t\t#\n//!##########################################\n//!ALERT\n//!============================================================\n\nfunction toastAlert(icon, message) {\n  Swal.fire({\n    toast: 'true',\n    position: 'top-end',\n    icon: icon,\n    title: message,\n    showConfirmButton: false,\n    timer: 3000,\n    timerProgressBar: true\n  });\n}\n\nfunction toastAlertDelete(text) {\n  var icon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"warning\";\n  return Swal.fire({\n    title: 'Είστε σίγουρος;',\n    text: text,\n    icon: icon,\n    showCancelButton: true,\n    confirmButtonText: 'Ναί, διαγραφή!',\n    cancelButtonText: 'Άκυρο'\n  });\n} //!CONFIG\n//!============================================================\n\n\nvar redactorConfig = {\n  style: false,\n  minHeight: '150px'\n};\nvar datePickerConfig = {\n  ranges: {\n    'Today': [moment(), moment()],\n    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n    'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n    'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n    'This Month': [moment().startOf('month'), moment().endOf('month')],\n    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],\n    'This Year': [moment().startOf('year'), moment().endOf('year')],\n    'Last Year': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year')]\n  },\n  alwaysShowCalendars: true,\n  showCustomRangeLabel: false,\n  drops: \"auto\",\n  autoUpdateInput: false,\n  opens: \"center\",\n  locale: {\n    format: \"DD/MM/YYYY\"\n  }\n};\nvar tableLocale = {\n  emptyTable: \"Δεν υπάρχουν εγγραφές\",\n  info: \"_START_ έως _END_ απο τα _TOTAL_ αποτελέσματα\",\n  infoEmpty: \"0 απο 0 τα 0 αποτελέσματα\",\n  lengthMenu: \"_MENU_\",\n  loadingRecords: \"Φόρτωση ...\",\n  processing: \"Επεξεργασία ...\",\n  search: \"\",\n  searchPlaceholder: \"Αναζήτηση... \",\n  zeroRecords: \"Δεν βρέθηκαν αποτελέσματα\",\n  paginate: {\n    previous: \"<i class='mdi mdi-chevron-left'>\",\n    next: \"<i class='mdi mdi-chevron-right'>\"\n  }\n}; //!GLOBAL FUNCTION\n//!============================================================\n\nfunction mainCheckboxSwitcher(main, minor) {\n  var bulkBtn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var status = true;\n  var counter = 0;\n  main.checked = true;\n\n  for (var i = 0; i < minor.length; i++) {\n    if (!minor[i].checked) {\n      minor[i].findParent(3).classList.remove(\"bg-selected\");\n      main.checked = false;\n    } else {\n      minor[i].findParent(3).classList.add(\"bg-selected\");\n      counter++;\n      status = false;\n    }\n  }\n\n  if (bulkBtn) {\n    bulkModifier(bulkBtn, status, counter);\n  }\n}\n\nfunction minorCheckboxSwitcher(main, minor) {\n  var bulkBtn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var counter = 0;\n  var status = true;\n\n  if (main.checked && minor.length > 0) {\n    counter = minor.length;\n    status = false;\n\n    for (var i = 0; i < minor.length; i++) {\n      minor[i].checked = true;\n      minor[i].findParent(3).classList.add(\"bg-selected\");\n    }\n  } else {\n    for (var i = 0; i < minor.length; i++) {\n      minor[i].checked = false;\n      minor[i].findParent(3).classList.remove(\"bg-selected\");\n    }\n  }\n\n  if (bulkBtn) {\n    bulkModifier(bulkBtn, status, counter);\n  }\n}\n\nfunction bulkModifier(bulkBtn, status, sum) {\n  var text = bulkBtn.dataset.text ? bulkBtn.dataset.text : \"Επιλογές\";\n  var enabledColor = bulkBtn.dataset.enabledColor ? bulkBtn.dataset.enabledColor : \"btn-warning\";\n  var disabledColor = bulkBtn.dataset.disabledColor ? bulkBtn.dataset.disabledColor : \"btn-secondary\";\n\n  if (status) {\n    bulkBtn.classList.add(disabledColor);\n    bulkBtn.classList.remove(enabledColor);\n    bulkBtn.textContent = \"\".concat(text, \" (0)  \");\n    bulkBtn.disabled = true;\n  } else {\n    bulkBtn.classList.add(enabledColor);\n    bulkBtn.classList.remove(disabledColor);\n    bulkBtn.textContent = \"\".concat(text, \"  (\").concat(sum, \")  \");\n    bulkBtn.disabled = false;\n  }\n}\n\nfunction filterStyle(input, value) {\n  if (value == \"\") {\n    input.classList.remove(\"select2-selected\");\n  } else {\n    input.classList.add(\"select2-selected\");\n  }\n}\n\nvar filterButton = function filterButton(attr, column, table) {\n  $(attr).detach().appendTo('.dataTables_length label');\n  $(attr).on('change', function () {\n    table.columns(column).search(this.value).draw();\n  });\n};\n\nvar changeInputHidden = function changeInputHidden(attr, hiddenAttr) {\n  $(attr).change(function () {\n    if (attr == \"#activeMaterial\") {\n      this.value = $(this).prop('checked') == true ? 1 : 0;\n    }\n\n    var hiddenValue = $(hiddenAttr)[0].value = this.value;\n  });\n};\n\nfunction createStateSelect() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var selectElm = document.createElement(\"select\");\n  selectElm.classList.add(\"ml-1\", \"select2\");\n  selectElm.id = id;\n  selectElm.innerHTML = \"\\n\\t\\t<option value=\\\"\\\">\\u038C\\u03BB\\u03B5\\u03C2 \\u03BF\\u03B9 \\u039A\\u03B1\\u03C4\\u03B1\\u03C3\\u03C4\\u03AC\\u03C3\\u03B5\\u03B9\\u03C2</option>\\n\\t\\t<option value=\\\"1\\\">\\u0395\\u03BD\\u03B5\\u03C1\\u03B3\\u03AC</option>\\n\\t\\t<option value=\\\"0\\\">\\u0391\\u03BD\\u03B5\\u03BD\\u03B5\\u03C1\\u03B3\\u03AC</option>\\n\\t\";\n  return selectElm;\n}\n\nfunction createDateElm(id) {\n  var input = document.createElement(\"input\");\n  input.classList.add(\"form-control\", \"date\", \"d-inline-block\", \"ml-1\");\n  input.id = id;\n  input.dataset.toggle = \"date-picker\";\n  input.dataset.cancelClass = \"btn-secondary\";\n  input.style.height = \"31.96px\";\n  input.style.width = \"195px\";\n  input.placeholder = \"Επιλέξτε ημερομηνίες...\";\n  return input;\n}\n\nfunction startDate(input) {\n  var dateInput = input;\n\n  if (!dateInput || dateInput.value == \"\") {\n    return \"\";\n  }\n\n  var dateInputValue = dateInput.value.split(\" - \");\n  var firstDate = dateInputValue[0].split(\"/\").reverse().join(\"-\");\n  return firstDate;\n}\n\nfunction endDate(input) {\n  var dateInput = input;\n\n  if (!dateInput || dateInput.value == \"\") {\n    return \"\";\n  }\n\n  var dateInputValue = dateInput.value.split(\" - \");\n  var secondDate = dateInputValue[1].split(\"/\").reverse().join(\"-\");\n  return secondDate;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  toastAlert: toastAlert,\n  mainCheckboxSwitcher: mainCheckboxSwitcher,\n  minorCheckboxSwitcher: minorCheckboxSwitcher,\n  filterButton: filterButton,\n  tableLocale: tableLocale,\n  changeInputHidden: changeInputHidden,\n  redactorConfig: redactorConfig,\n  createStateSelect: createStateSelect,\n  datePickerConfig: datePickerConfig,\n  toastAlertDelete: toastAlertDelete,\n  filterStyle: filterStyle,\n  createDateElm: createDateElm,\n  startDate: startDate,\n  endDate: endDate\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZGFzaGJvYXJkL21haW4uanM/ODIyYiJdLCJuYW1lcyI6WyJFbGVtZW50IiwicHJvdG90eXBlIiwiZmluZFBhcmVudCIsImxvb3BzIiwicGFyZW50IiwiaSIsInBhcmVudEVsZW1lbnQiLCJhcHBlbmRCZWZvcmUiLCJlbGVtZW50IiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImFwcGVuZEFmdGVyIiwibmV4dFNpYmxpbmciLCJ0b2FzdEFsZXJ0IiwiaWNvbiIsIm1lc3NhZ2UiLCJTd2FsIiwiZmlyZSIsInRvYXN0IiwicG9zaXRpb24iLCJ0aXRsZSIsInNob3dDb25maXJtQnV0dG9uIiwidGltZXIiLCJ0aW1lclByb2dyZXNzQmFyIiwidG9hc3RBbGVydERlbGV0ZSIsInRleHQiLCJzaG93Q2FuY2VsQnV0dG9uIiwiY29uZmlybUJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25UZXh0IiwicmVkYWN0b3JDb25maWciLCJzdHlsZSIsIm1pbkhlaWdodCIsImRhdGVQaWNrZXJDb25maWciLCJyYW5nZXMiLCJtb21lbnQiLCJzdWJ0cmFjdCIsInN0YXJ0T2YiLCJlbmRPZiIsImFsd2F5c1Nob3dDYWxlbmRhcnMiLCJzaG93Q3VzdG9tUmFuZ2VMYWJlbCIsImRyb3BzIiwiYXV0b1VwZGF0ZUlucHV0Iiwib3BlbnMiLCJsb2NhbGUiLCJmb3JtYXQiLCJ0YWJsZUxvY2FsZSIsImVtcHR5VGFibGUiLCJpbmZvIiwiaW5mb0VtcHR5IiwibGVuZ3RoTWVudSIsImxvYWRpbmdSZWNvcmRzIiwicHJvY2Vzc2luZyIsInNlYXJjaCIsInNlYXJjaFBsYWNlaG9sZGVyIiwiemVyb1JlY29yZHMiLCJwYWdpbmF0ZSIsInByZXZpb3VzIiwibmV4dCIsIm1haW5DaGVja2JveFN3aXRjaGVyIiwibWFpbiIsIm1pbm9yIiwiYnVsa0J0biIsInN0YXR1cyIsImNvdW50ZXIiLCJjaGVja2VkIiwibGVuZ3RoIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwiYnVsa01vZGlmaWVyIiwibWlub3JDaGVja2JveFN3aXRjaGVyIiwic3VtIiwiZGF0YXNldCIsImVuYWJsZWRDb2xvciIsImRpc2FibGVkQ29sb3IiLCJ0ZXh0Q29udGVudCIsImRpc2FibGVkIiwiZmlsdGVyU3R5bGUiLCJpbnB1dCIsInZhbHVlIiwiZmlsdGVyQnV0dG9uIiwiYXR0ciIsImNvbHVtbiIsInRhYmxlIiwiJCIsImRldGFjaCIsImFwcGVuZFRvIiwib24iLCJjb2x1bW5zIiwiZHJhdyIsImNoYW5nZUlucHV0SGlkZGVuIiwiaGlkZGVuQXR0ciIsImNoYW5nZSIsInByb3AiLCJoaWRkZW5WYWx1ZSIsImNyZWF0ZVN0YXRlU2VsZWN0IiwiaWQiLCJzZWxlY3RFbG0iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJjcmVhdGVEYXRlRWxtIiwidG9nZ2xlIiwiY2FuY2VsQ2xhc3MiLCJoZWlnaHQiLCJ3aWR0aCIsInBsYWNlaG9sZGVyIiwic3RhcnREYXRlIiwiZGF0ZUlucHV0IiwiZGF0ZUlucHV0VmFsdWUiLCJzcGxpdCIsImZpcnN0RGF0ZSIsInJldmVyc2UiLCJqb2luIiwiZW5kRGF0ZSIsInNlY29uZERhdGUiXSwibWFwcGluZ3MiOiJBQUFBQTtBQUFBQSxPQUFPLENBQUNDLFNBQVIsQ0FBa0JDLFVBQWxCLEdBQStCLFVBQVVDLEtBQVYsRUFBaUI7QUFDL0MsTUFBSUMsTUFBTSxHQUFHLElBQWI7O0FBRUEsT0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBZCxFQUFpQkEsQ0FBQyxHQUFHRixLQUFyQixFQUE0QkUsQ0FBQyxFQUE3QixFQUFrQztBQUNqQ0QsVUFBTSxHQUFHQSxNQUFNLENBQUNFLGFBQWhCO0FBQ0E7O0FBRUQsU0FBT0YsTUFBUDtBQUNBLENBUkQsRUFRRSxLQVJGO0FBVUFKLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQk0sWUFBbEIsR0FBaUMsVUFBVUMsT0FBVixFQUFtQjtBQUNuREEsU0FBTyxDQUFDQyxVQUFSLENBQW1CQyxZQUFuQixDQUFnQyxJQUFoQyxFQUFzQ0YsT0FBdEM7QUFDQSxDQUZELEVBRUUsS0FGRjtBQUlBUixPQUFPLENBQUNDLFNBQVIsQ0FBa0JVLFdBQWxCLEdBQWdDLFVBQVVILE9BQVYsRUFBbUI7QUFFbERBLFNBQU8sQ0FBQ0MsVUFBUixDQUFtQkMsWUFBbkIsQ0FBZ0MsSUFBaEMsRUFBc0NGLE9BQU8sQ0FBQ0ksV0FBOUM7QUFFQSxDQUpELEVBSUUsS0FKRixDLENBTUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7QUFDQSxTQUFTQyxVQUFULENBQW9CQyxJQUFwQixFQUEwQkMsT0FBMUIsRUFBbUM7QUFDL0JDLE1BQUksQ0FBQ0MsSUFBTCxDQUFVO0FBQ05DLFNBQUssRUFBRSxNQUREO0FBRU5DLFlBQVEsRUFBRSxTQUZKO0FBR05MLFFBQUksRUFBRUEsSUFIQTtBQUlOTSxTQUFLLEVBQUVMLE9BSkQ7QUFLTk0scUJBQWlCLEVBQUUsS0FMYjtBQU1OQyxTQUFLLEVBQUUsSUFORDtBQU9OQyxvQkFBZ0IsRUFBRTtBQVBaLEdBQVY7QUFTSDs7QUFFRCxTQUFTQyxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBOEM7QUFBQSxNQUFmWCxJQUFlLHVFQUFWLFNBQVU7QUFDMUMsU0FBU0UsSUFBSSxDQUFDQyxJQUFMLENBQVU7QUFDZkcsU0FBSyxFQUFFLGlCQURRO0FBRWZLLFFBQUksRUFBQ0EsSUFGVTtBQUdmWCxRQUFJLEVBQUVBLElBSFM7QUFJZlksb0JBQWdCLEVBQUUsSUFKSDtBQUtmQyxxQkFBaUIsRUFBRSxnQkFMSjtBQU1mQyxvQkFBZ0IsRUFBRTtBQU5ILEdBQVYsQ0FBVDtBQVFILEMsQ0FHRDtBQUNBOzs7QUFDQSxJQUFNQyxjQUFjLEdBQUc7QUFDbkJDLE9BQUssRUFBRSxLQURZO0FBRW5CQyxXQUFTLEVBQUU7QUFGUSxDQUF2QjtBQUtBLElBQU1DLGdCQUFnQixHQUFHO0FBQ3JCQyxRQUFNLEVBQUU7QUFDSixhQUFTLENBQUNDLE1BQU0sRUFBUCxFQUFXQSxNQUFNLEVBQWpCLENBREw7QUFFSixpQkFBYSxDQUFDQSxNQUFNLEdBQUdDLFFBQVQsQ0FBa0IsQ0FBbEIsRUFBcUIsTUFBckIsQ0FBRCxFQUErQkQsTUFBTSxHQUFHQyxRQUFULENBQWtCLENBQWxCLEVBQXFCLE1BQXJCLENBQS9CLENBRlQ7QUFHSixtQkFBZSxDQUFDRCxNQUFNLEdBQUdDLFFBQVQsQ0FBa0IsQ0FBbEIsRUFBcUIsTUFBckIsQ0FBRCxFQUErQkQsTUFBTSxFQUFyQyxDQUhYO0FBSUosb0JBQWdCLENBQUNBLE1BQU0sR0FBR0MsUUFBVCxDQUFrQixFQUFsQixFQUFzQixNQUF0QixDQUFELEVBQWdDRCxNQUFNLEVBQXRDLENBSlo7QUFLSixrQkFBYyxDQUFDQSxNQUFNLEdBQUdFLE9BQVQsQ0FBaUIsT0FBakIsQ0FBRCxFQUE0QkYsTUFBTSxHQUFHRyxLQUFULENBQWUsT0FBZixDQUE1QixDQUxWO0FBTUosa0JBQWMsQ0FBQ0gsTUFBTSxHQUFHQyxRQUFULENBQWtCLENBQWxCLEVBQXFCLE9BQXJCLEVBQThCQyxPQUE5QixDQUFzQyxPQUF0QyxDQUFELEVBQWlERixNQUFNLEdBQUdDLFFBQVQsQ0FBa0IsQ0FBbEIsRUFBcUIsT0FBckIsRUFBOEJFLEtBQTlCLENBQW9DLE9BQXBDLENBQWpELENBTlY7QUFPSixpQkFBYSxDQUFDSCxNQUFNLEdBQUdFLE9BQVQsQ0FBaUIsTUFBakIsQ0FBRCxFQUEyQkYsTUFBTSxHQUFHRyxLQUFULENBQWUsTUFBZixDQUEzQixDQVBUO0FBUUosaUJBQWEsQ0FBQ0gsTUFBTSxHQUFHQyxRQUFULENBQWtCLENBQWxCLEVBQXFCLE1BQXJCLEVBQTZCQyxPQUE3QixDQUFxQyxNQUFyQyxDQUFELEVBQStDRixNQUFNLEdBQUdDLFFBQVQsQ0FBa0IsQ0FBbEIsRUFBcUIsTUFBckIsRUFBNkJFLEtBQTdCLENBQW1DLE1BQW5DLENBQS9DO0FBUlQsR0FEYTtBQVdyQkMscUJBQW1CLEVBQUUsSUFYQTtBQVlyQkMsc0JBQW9CLEVBQUUsS0FaRDtBQWFyQkMsT0FBSyxFQUFFLE1BYmM7QUFjckJDLGlCQUFlLEVBQUUsS0FkSTtBQWVyQkMsT0FBSyxFQUFFLFFBZmM7QUFnQnJCQyxRQUFNLEVBQUU7QUFDSkMsVUFBTSxFQUFFO0FBREo7QUFoQmEsQ0FBekI7QUFxQkEsSUFBTUMsV0FBVyxHQUFHO0FBQ2hCQyxZQUFVLEVBQUUsdUJBREk7QUFFaEJDLE1BQUksRUFBRSwrQ0FGVTtBQUdoQkMsV0FBUyxFQUFFLDJCQUhLO0FBSWhCQyxZQUFVLEVBQUUsUUFKSTtBQUtoQkMsZ0JBQWMsRUFBRSxhQUxBO0FBTWhCQyxZQUFVLEVBQUUsaUJBTkk7QUFPaEJDLFFBQU0sRUFBRSxFQVBRO0FBUWhCQyxtQkFBaUIsRUFBRSxlQVJIO0FBU2hCQyxhQUFXLEVBQUUsMkJBVEc7QUFVaEJDLFVBQVEsRUFBRTtBQUNOQyxZQUFRLEVBQUUsa0NBREo7QUFFTkMsUUFBSSxFQUFFO0FBRkE7QUFWTSxDQUFwQixDLENBZ0JBO0FBQ0E7O0FBQ0EsU0FBU0Msb0JBQVQsQ0FBOEJDLElBQTlCLEVBQW9DQyxLQUFwQyxFQUE0RDtBQUFBLE1BQWpCQyxPQUFpQix1RUFBUCxLQUFPO0FBQ3hELE1BQUlDLE1BQU0sR0FBRyxJQUFiO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLENBQWQ7QUFDQUosTUFBSSxDQUFDSyxPQUFMLEdBQWUsSUFBZjs7QUFFQSxPQUFLLElBQUkzRCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdUQsS0FBSyxDQUFDSyxNQUExQixFQUFrQzVELENBQUMsRUFBbkMsRUFBdUM7QUFDbkMsUUFBSSxDQUFDdUQsS0FBSyxDQUFDdkQsQ0FBRCxDQUFMLENBQVMyRCxPQUFkLEVBQXVCO0FBQ25CSixXQUFLLENBQUN2RCxDQUFELENBQUwsQ0FBU0gsVUFBVCxDQUFvQixDQUFwQixFQUF1QmdFLFNBQXZCLENBQWlDQyxNQUFqQyxDQUF3QyxhQUF4QztBQUNBUixVQUFJLENBQUNLLE9BQUwsR0FBZSxLQUFmO0FBQ0gsS0FIRCxNQUdPO0FBQ0hKLFdBQUssQ0FBQ3ZELENBQUQsQ0FBTCxDQUFTSCxVQUFULENBQW9CLENBQXBCLEVBQXVCZ0UsU0FBdkIsQ0FBaUNFLEdBQWpDLENBQXFDLGFBQXJDO0FBQ0FMLGFBQU87QUFDUEQsWUFBTSxHQUFHLEtBQVQ7QUFDSDtBQUNKOztBQUVELE1BQUlELE9BQUosRUFBYTtBQUNUUSxnQkFBWSxDQUFDUixPQUFELEVBQVVDLE1BQVYsRUFBa0JDLE9BQWxCLENBQVo7QUFDSDtBQUNKOztBQUVELFNBQVNPLHFCQUFULENBQStCWCxJQUEvQixFQUFxQ0MsS0FBckMsRUFBNkQ7QUFBQSxNQUFqQkMsT0FBaUIsdUVBQVAsS0FBTztBQUN6RCxNQUFJRSxPQUFPLEdBQUcsQ0FBZDtBQUNBLE1BQUlELE1BQU0sR0FBRyxJQUFiOztBQUVBLE1BQUlILElBQUksQ0FBQ0ssT0FBTCxJQUFnQkosS0FBSyxDQUFDSyxNQUFOLEdBQWUsQ0FBbkMsRUFBc0M7QUFFbENGLFdBQU8sR0FBR0gsS0FBSyxDQUFDSyxNQUFoQjtBQUNBSCxVQUFNLEdBQUcsS0FBVDs7QUFFQSxTQUFLLElBQUl6RCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHdUQsS0FBSyxDQUFDSyxNQUExQixFQUFrQzVELENBQUMsRUFBbkMsRUFBdUM7QUFDbkN1RCxXQUFLLENBQUN2RCxDQUFELENBQUwsQ0FBUzJELE9BQVQsR0FBbUIsSUFBbkI7QUFDQUosV0FBSyxDQUFDdkQsQ0FBRCxDQUFMLENBQVNILFVBQVQsQ0FBb0IsQ0FBcEIsRUFBdUJnRSxTQUF2QixDQUFpQ0UsR0FBakMsQ0FBcUMsYUFBckM7QUFDSDtBQUNKLEdBVEQsTUFTTztBQUNILFNBQUssSUFBSS9ELENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd1RCxLQUFLLENBQUNLLE1BQTFCLEVBQWtDNUQsQ0FBQyxFQUFuQyxFQUF1QztBQUNuQ3VELFdBQUssQ0FBQ3ZELENBQUQsQ0FBTCxDQUFTMkQsT0FBVCxHQUFtQixLQUFuQjtBQUNBSixXQUFLLENBQUN2RCxDQUFELENBQUwsQ0FBU0gsVUFBVCxDQUFvQixDQUFwQixFQUF1QmdFLFNBQXZCLENBQWlDQyxNQUFqQyxDQUF3QyxhQUF4QztBQUNIO0FBQ0o7O0FBRUQsTUFBSU4sT0FBSixFQUFhO0FBQ1RRLGdCQUFZLENBQUNSLE9BQUQsRUFBVUMsTUFBVixFQUFrQkMsT0FBbEIsQ0FBWjtBQUNIO0FBQ0o7O0FBRUQsU0FBU00sWUFBVCxDQUFzQlIsT0FBdEIsRUFBK0JDLE1BQS9CLEVBQXVDUyxHQUF2QyxFQUE0QztBQUV4QyxNQUFJOUMsSUFBSSxHQUFHb0MsT0FBTyxDQUFDVyxPQUFSLENBQWdCL0MsSUFBaEIsR0FBdUJvQyxPQUFPLENBQUNXLE9BQVIsQ0FBZ0IvQyxJQUF2QyxHQUE4QyxVQUF6RDtBQUNBLE1BQUlnRCxZQUFZLEdBQUdaLE9BQU8sQ0FBQ1csT0FBUixDQUFnQkMsWUFBaEIsR0FBK0JaLE9BQU8sQ0FBQ1csT0FBUixDQUFnQkMsWUFBL0MsR0FBOEQsYUFBakY7QUFDQSxNQUFJQyxhQUFhLEdBQUdiLE9BQU8sQ0FBQ1csT0FBUixDQUFnQkUsYUFBaEIsR0FBZ0NiLE9BQU8sQ0FBQ1csT0FBUixDQUFnQkUsYUFBaEQsR0FBZ0UsZUFBcEY7O0FBRUEsTUFBSVosTUFBSixFQUFZO0FBQ1JELFdBQU8sQ0FBQ0ssU0FBUixDQUFrQkUsR0FBbEIsQ0FBc0JNLGFBQXRCO0FBQ0FiLFdBQU8sQ0FBQ0ssU0FBUixDQUFrQkMsTUFBbEIsQ0FBeUJNLFlBQXpCO0FBQ0FaLFdBQU8sQ0FBQ2MsV0FBUixhQUF5QmxELElBQXpCO0FBQ0FvQyxXQUFPLENBQUNlLFFBQVIsR0FBbUIsSUFBbkI7QUFDSCxHQUxELE1BS087QUFDSGYsV0FBTyxDQUFDSyxTQUFSLENBQWtCRSxHQUFsQixDQUFzQkssWUFBdEI7QUFDQVosV0FBTyxDQUFDSyxTQUFSLENBQWtCQyxNQUFsQixDQUF5Qk8sYUFBekI7QUFDQWIsV0FBTyxDQUFDYyxXQUFSLGFBQXlCbEQsSUFBekIsZ0JBQW1DOEMsR0FBbkM7QUFDQVYsV0FBTyxDQUFDZSxRQUFSLEdBQW1CLEtBQW5CO0FBQ0g7QUFDSjs7QUFFRCxTQUFTQyxXQUFULENBQXNCQyxLQUF0QixFQUE2QkMsS0FBN0IsRUFBcUM7QUFFcEMsTUFBS0EsS0FBSyxJQUFJLEVBQWQsRUFBbUI7QUFDbEJELFNBQUssQ0FBQ1osU0FBTixDQUFnQkMsTUFBaEIsQ0FBdUIsa0JBQXZCO0FBQ0EsR0FGRCxNQUdLO0FBQ0pXLFNBQUssQ0FBQ1osU0FBTixDQUFnQkUsR0FBaEIsQ0FBb0Isa0JBQXBCO0FBQ0E7QUFFRDs7QUFFRCxJQUFNWSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFVQyxJQUFWLEVBQWdCQyxNQUFoQixFQUF3QkMsS0FBeEIsRUFBK0I7QUFDaERDLEdBQUMsQ0FBQ0gsSUFBRCxDQUFELENBQVFJLE1BQVIsR0FBaUJDLFFBQWpCLENBQTBCLDBCQUExQjtBQUNBRixHQUFDLENBQUNILElBQUQsQ0FBRCxDQUFRTSxFQUFSLENBQVcsUUFBWCxFQUFxQixZQUFZO0FBQzdCSixTQUFLLENBQUNLLE9BQU4sQ0FBY04sTUFBZCxFQUFzQjlCLE1BQXRCLENBQTZCLEtBQUsyQixLQUFsQyxFQUF5Q1UsSUFBekM7QUFDSCxHQUZEO0FBR0gsQ0FMRDs7QUFPQSxJQUFNQyxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUNULElBQUQsRUFBT1UsVUFBUCxFQUFzQjtBQUU1Q1AsR0FBQyxDQUFDSCxJQUFELENBQUQsQ0FBUVcsTUFBUixDQUFlLFlBQVk7QUFDdkIsUUFBSVgsSUFBSSxJQUFJLGlCQUFaLEVBQStCO0FBQzNCLFdBQUtGLEtBQUwsR0FBYUssQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRUyxJQUFSLENBQWEsU0FBYixLQUEyQixJQUEzQixHQUFrQyxDQUFsQyxHQUFzQyxDQUFuRDtBQUNIOztBQUVELFFBQUlDLFdBQVcsR0FBR1YsQ0FBQyxDQUFDTyxVQUFELENBQUQsQ0FBYyxDQUFkLEVBQWlCWixLQUFqQixHQUF5QixLQUFLQSxLQUFoRDtBQUVILEdBUEQ7QUFRSCxDQVZEOztBQVlBLFNBQVNnQixpQkFBVCxHQUFzQztBQUFBLE1BQVZDLEVBQVUsdUVBQUwsRUFBSztBQUNsQyxNQUFNQyxTQUFTLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixRQUF2QixDQUFsQjtBQUNBRixXQUFTLENBQUMvQixTQUFWLENBQW9CRSxHQUFwQixDQUF3QixNQUF4QixFQUFnQyxTQUFoQztBQUNINkIsV0FBUyxDQUFDRCxFQUFWLEdBQWVBLEVBQWY7QUFFR0MsV0FBUyxDQUFDRyxTQUFWO0FBTUEsU0FBT0gsU0FBUDtBQUNIOztBQUVELFNBQVNJLGFBQVQsQ0FBd0JMLEVBQXhCLEVBQTZCO0FBQzVCLE1BQUlsQixLQUFLLEdBQUdvQixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBWjtBQUVBckIsT0FBSyxDQUFDWixTQUFOLENBQWdCRSxHQUFoQixDQUFvQixjQUFwQixFQUFvQyxNQUFwQyxFQUE0QyxnQkFBNUMsRUFBOEQsTUFBOUQ7QUFDQVUsT0FBSyxDQUFDa0IsRUFBTixHQUFXQSxFQUFYO0FBQ0FsQixPQUFLLENBQUNOLE9BQU4sQ0FBYzhCLE1BQWQsR0FBdUIsYUFBdkI7QUFDQXhCLE9BQUssQ0FBQ04sT0FBTixDQUFjK0IsV0FBZCxHQUE0QixlQUE1QjtBQUNBekIsT0FBSyxDQUFDaEQsS0FBTixDQUFZMEUsTUFBWixHQUFxQixTQUFyQjtBQUNBMUIsT0FBSyxDQUFDaEQsS0FBTixDQUFZMkUsS0FBWixHQUFvQixPQUFwQjtBQUNBM0IsT0FBSyxDQUFDNEIsV0FBTixHQUFvQix5QkFBcEI7QUFFQSxTQUFPNUIsS0FBUDtBQUNBOztBQUVELFNBQVM2QixTQUFULENBQW9CN0IsS0FBcEIsRUFBNEI7QUFFM0IsTUFBSThCLFNBQVMsR0FBRzlCLEtBQWhCOztBQUVBLE1BQUssQ0FBQzhCLFNBQUQsSUFBY0EsU0FBUyxDQUFDN0IsS0FBVixJQUFtQixFQUF0QyxFQUEyQztBQUMxQyxXQUFPLEVBQVA7QUFDQTs7QUFFRCxNQUFJOEIsY0FBYyxHQUFHRCxTQUFTLENBQUM3QixLQUFWLENBQWdCK0IsS0FBaEIsQ0FBc0IsS0FBdEIsQ0FBckI7QUFDQSxNQUFJQyxTQUFTLEdBQUdGLGNBQWMsQ0FBQyxDQUFELENBQWQsQ0FBa0JDLEtBQWxCLENBQXdCLEdBQXhCLEVBQTZCRSxPQUE3QixHQUF1Q0MsSUFBdkMsQ0FBNEMsR0FBNUMsQ0FBaEI7QUFFQSxTQUFPRixTQUFQO0FBQ0E7O0FBRUQsU0FBU0csT0FBVCxDQUFrQnBDLEtBQWxCLEVBQTBCO0FBRXpCLE1BQUk4QixTQUFTLEdBQUc5QixLQUFoQjs7QUFFQSxNQUFLLENBQUM4QixTQUFELElBQWNBLFNBQVMsQ0FBQzdCLEtBQVYsSUFBbUIsRUFBdEMsRUFBMkM7QUFDMUMsV0FBTyxFQUFQO0FBQ0E7O0FBRUQsTUFBSThCLGNBQWMsR0FBR0QsU0FBUyxDQUFDN0IsS0FBVixDQUFnQitCLEtBQWhCLENBQXNCLEtBQXRCLENBQXJCO0FBQ0EsTUFBSUssVUFBVSxHQUFHTixjQUFjLENBQUMsQ0FBRCxDQUFkLENBQWtCQyxLQUFsQixDQUF3QixHQUF4QixFQUE2QkUsT0FBN0IsR0FBdUNDLElBQXZDLENBQTRDLEdBQTVDLENBQWpCO0FBRUEsU0FBT0UsVUFBUDtBQUNBOztBQUVjO0FBQ1h0RyxZQUFVLEVBQVZBLFVBRFc7QUFFWDZDLHNCQUFvQixFQUFwQkEsb0JBRlc7QUFHWFksdUJBQXFCLEVBQXJCQSxxQkFIVztBQUlYVSxjQUFZLEVBQVpBLFlBSlc7QUFLWG5DLGFBQVcsRUFBWEEsV0FMVztBQU1YNkMsbUJBQWlCLEVBQWpCQSxpQkFOVztBQU9YN0QsZ0JBQWMsRUFBZEEsY0FQVztBQVFYa0UsbUJBQWlCLEVBQWpCQSxpQkFSVztBQVNYL0Qsa0JBQWdCLEVBQWhCQSxnQkFUVztBQVVkUixrQkFBZ0IsRUFBaEJBLGdCQVZjO0FBV2RxRCxhQUFXLEVBQVhBLFdBWGM7QUFZZHdCLGVBQWEsRUFBYkEsYUFaYztBQWFkTSxXQUFTLEVBQVRBLFNBYmM7QUFjZE8sU0FBTyxFQUFQQTtBQWRjLENBQWYiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvZGFzaGJvYXJkL21haW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJFbGVtZW50LnByb3RvdHlwZS5maW5kUGFyZW50ID0gZnVuY3Rpb24gKGxvb3BzKSB7XHJcblx0bGV0IHBhcmVudCA9IHRoaXM7XHJcblxyXG5cdGZvciAoIGxldCBpID0gMDsgaSA8IGxvb3BzOyBpKysgKSB7XHJcblx0XHRwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDtcclxuXHR9XHJcblxyXG5cdHJldHVybiBwYXJlbnQ7XHJcbn0sZmFsc2U7XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmRCZWZvcmUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG5cdGVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgZWxlbWVudCk7XHJcbn0sZmFsc2U7XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmRBZnRlciA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcblxyXG5cdGVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgZWxlbWVudC5uZXh0U2libGluZyk7XHJcblxyXG59LGZhbHNlO1xyXG5cclxuLy8hIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcbi8vIVx0XHRcdFx0Q29uZmlndXJhdGlvbnNcdFx0XHRcdCNcclxuLy8hIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG4vLyFBTEVSVFxyXG4vLyE9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuZnVuY3Rpb24gdG9hc3RBbGVydChpY29uLCBtZXNzYWdlKSB7XHJcbiAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgIHRvYXN0OiAndHJ1ZScsXHJcbiAgICAgICAgcG9zaXRpb246ICd0b3AtZW5kJyxcclxuICAgICAgICBpY29uOiBpY29uLFxyXG4gICAgICAgIHRpdGxlOiBtZXNzYWdlLFxyXG4gICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSxcclxuICAgICAgICB0aW1lcjogMzAwMCxcclxuICAgICAgICB0aW1lclByb2dyZXNzQmFyOiB0cnVlXHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdG9hc3RBbGVydERlbGV0ZSh0ZXh0LGljb249XCJ3YXJuaW5nXCIpe1xyXG4gICAgcmV0dXJuICAgU3dhbC5maXJlKHtcclxuICAgICAgICB0aXRsZTogJ86Vzq/Pg8+EzrUgz4POr86zzr/Phc+Bzr/PgjsnLFxyXG4gICAgICAgIHRleHQ6dGV4dCxcclxuICAgICAgICBpY29uOiBpY29uLFxyXG4gICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfOnc6xzq8sIM60zrnOsc6zz4HOsc+Gzq4hJyxcclxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAnzobOus+Fz4HOvydcclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxuLy8hQ09ORklHXHJcbi8vIT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5jb25zdCByZWRhY3RvckNvbmZpZyA9IHtcclxuICAgIHN0eWxlOiBmYWxzZSxcclxuICAgIG1pbkhlaWdodDogJzE1MHB4JyxcclxufVxyXG5cclxuY29uc3QgZGF0ZVBpY2tlckNvbmZpZyA9IHtcclxuICAgIHJhbmdlczoge1xyXG4gICAgICAgICdUb2RheSc6IFttb21lbnQoKSwgbW9tZW50KCldLFxyXG4gICAgICAgICdZZXN0ZXJkYXknOiBbbW9tZW50KCkuc3VidHJhY3QoMSwgJ2RheXMnKSwgbW9tZW50KCkuc3VidHJhY3QoMSwgJ2RheXMnKV0sXHJcbiAgICAgICAgJ0xhc3QgNyBEYXlzJzogW21vbWVudCgpLnN1YnRyYWN0KDYsICdkYXlzJyksIG1vbWVudCgpXSxcclxuICAgICAgICAnTGFzdCAzMCBEYXlzJzogW21vbWVudCgpLnN1YnRyYWN0KDI5LCAnZGF5cycpLCBtb21lbnQoKV0sXHJcbiAgICAgICAgJ1RoaXMgTW9udGgnOiBbbW9tZW50KCkuc3RhcnRPZignbW9udGgnKSwgbW9tZW50KCkuZW5kT2YoJ21vbnRoJyldLFxyXG4gICAgICAgICdMYXN0IE1vbnRoJzogW21vbWVudCgpLnN1YnRyYWN0KDEsICdtb250aCcpLnN0YXJ0T2YoJ21vbnRoJyksIG1vbWVudCgpLnN1YnRyYWN0KDEsICdtb250aCcpLmVuZE9mKCdtb250aCcpXSxcclxuICAgICAgICAnVGhpcyBZZWFyJzogW21vbWVudCgpLnN0YXJ0T2YoJ3llYXInKSwgbW9tZW50KCkuZW5kT2YoJ3llYXInKV0sXHJcbiAgICAgICAgJ0xhc3QgWWVhcic6IFttb21lbnQoKS5zdWJ0cmFjdCgxLCAneWVhcicpLnN0YXJ0T2YoJ3llYXInKSwgbW9tZW50KCkuc3VidHJhY3QoMSwgJ3llYXInKS5lbmRPZigneWVhcicpXVxyXG4gICAgfSxcclxuICAgIGFsd2F5c1Nob3dDYWxlbmRhcnM6IHRydWUsXHJcbiAgICBzaG93Q3VzdG9tUmFuZ2VMYWJlbDogZmFsc2UsXHJcbiAgICBkcm9wczogXCJhdXRvXCIsXHJcbiAgICBhdXRvVXBkYXRlSW5wdXQ6IGZhbHNlLFxyXG4gICAgb3BlbnM6IFwiY2VudGVyXCIsXHJcbiAgICBsb2NhbGU6IHtcclxuICAgICAgICBmb3JtYXQ6IFwiREQvTU0vWVlZWVwiLFxyXG4gICAgfSxcclxufVxyXG5cclxuY29uc3QgdGFibGVMb2NhbGUgPSB7XHJcbiAgICBlbXB0eVRhYmxlOiBcIs6UzrXOvSDPhc+AzqzPgc+Hzr/Phc69IM61zrPOs8+BzrHPhs6tz4JcIixcclxuICAgIGluZm86IFwiX1NUQVJUXyDOrc+Jz4IgX0VORF8gzrHPgM6/IM+EzrEgX1RPVEFMXyDOsc+Azr/PhM61zrvOrc+DzrzOsc+EzrFcIixcclxuICAgIGluZm9FbXB0eTogXCIwIM6xz4DOvyAwIM+EzrEgMCDOsc+Azr/PhM61zrvOrc+DzrzOsc+EzrFcIixcclxuICAgIGxlbmd0aE1lbnU6IFwiX01FTlVfXCIsXHJcbiAgICBsb2FkaW5nUmVjb3JkczogXCLOps+Mz4HPhM+Jz4POtyAuLi5cIixcclxuICAgIHByb2Nlc3Npbmc6IFwizpXPgM61zr7Otc+BzrPOsc+Dzq/OsSAuLi5cIixcclxuICAgIHNlYXJjaDogXCJcIixcclxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiBcIs6Rzr3Osc62zq7PhM63z4POty4uLiBcIixcclxuICAgIHplcm9SZWNvcmRzOiBcIs6UzrXOvSDOss+Bzq3OuM63zrrOsc69IM6xz4DOv8+EzrXOu86tz4POvM6xz4TOsVwiLFxyXG4gICAgcGFnaW5hdGU6IHtcclxuICAgICAgICBwcmV2aW91czogXCI8aSBjbGFzcz0nbWRpIG1kaS1jaGV2cm9uLWxlZnQnPlwiLFxyXG4gICAgICAgIG5leHQ6IFwiPGkgY2xhc3M9J21kaSBtZGktY2hldnJvbi1yaWdodCc+XCJcclxuICAgIH1cclxufVxyXG5cclxuLy8hR0xPQkFMIEZVTkNUSU9OXHJcbi8vIT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5mdW5jdGlvbiBtYWluQ2hlY2tib3hTd2l0Y2hlcihtYWluLCBtaW5vciwgYnVsa0J0biA9IGZhbHNlKSB7XHJcbiAgICBsZXQgc3RhdHVzID0gdHJ1ZTtcclxuICAgIGxldCBjb3VudGVyID0gMDtcclxuICAgIG1haW4uY2hlY2tlZCA9IHRydWU7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW5vci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmICghbWlub3JbaV0uY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBtaW5vcltpXS5maW5kUGFyZW50KDMpLmNsYXNzTGlzdC5yZW1vdmUoXCJiZy1zZWxlY3RlZFwiKTtcclxuICAgICAgICAgICAgbWFpbi5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWlub3JbaV0uZmluZFBhcmVudCgzKS5jbGFzc0xpc3QuYWRkKFwiYmctc2VsZWN0ZWRcIik7XHJcbiAgICAgICAgICAgIGNvdW50ZXIrK1xyXG4gICAgICAgICAgICBzdGF0dXMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJ1bGtCdG4pIHtcclxuICAgICAgICBidWxrTW9kaWZpZXIoYnVsa0J0biwgc3RhdHVzLCBjb3VudGVyKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbWlub3JDaGVja2JveFN3aXRjaGVyKG1haW4sIG1pbm9yLCBidWxrQnRuID0gZmFsc2UpIHtcclxuICAgIGxldCBjb3VudGVyID0gMDtcclxuICAgIGxldCBzdGF0dXMgPSB0cnVlO1xyXG5cclxuICAgIGlmIChtYWluLmNoZWNrZWQgJiYgbWlub3IubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICBjb3VudGVyID0gbWlub3IubGVuZ3RoO1xyXG4gICAgICAgIHN0YXR1cyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbm9yLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1pbm9yW2ldLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBtaW5vcltpXS5maW5kUGFyZW50KDMpLmNsYXNzTGlzdC5hZGQoXCJiZy1zZWxlY3RlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWlub3IubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbWlub3JbaV0uY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBtaW5vcltpXS5maW5kUGFyZW50KDMpLmNsYXNzTGlzdC5yZW1vdmUoXCJiZy1zZWxlY3RlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJ1bGtCdG4pIHtcclxuICAgICAgICBidWxrTW9kaWZpZXIoYnVsa0J0biwgc3RhdHVzLCBjb3VudGVyKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYnVsa01vZGlmaWVyKGJ1bGtCdG4sIHN0YXR1cywgc3VtKSB7XHJcblxyXG4gICAgbGV0IHRleHQgPSBidWxrQnRuLmRhdGFzZXQudGV4dCA/IGJ1bGtCdG4uZGF0YXNldC50ZXh0IDogXCLOlc+AzrnOu86/zrPOrc+CXCI7XHJcbiAgICBsZXQgZW5hYmxlZENvbG9yID0gYnVsa0J0bi5kYXRhc2V0LmVuYWJsZWRDb2xvciA/IGJ1bGtCdG4uZGF0YXNldC5lbmFibGVkQ29sb3IgOiBcImJ0bi13YXJuaW5nXCI7XHJcbiAgICBsZXQgZGlzYWJsZWRDb2xvciA9IGJ1bGtCdG4uZGF0YXNldC5kaXNhYmxlZENvbG9yID8gYnVsa0J0bi5kYXRhc2V0LmRpc2FibGVkQ29sb3IgOiBcImJ0bi1zZWNvbmRhcnlcIjtcclxuXHJcbiAgICBpZiAoc3RhdHVzKSB7XHJcbiAgICAgICAgYnVsa0J0bi5jbGFzc0xpc3QuYWRkKGRpc2FibGVkQ29sb3IpXHJcbiAgICAgICAgYnVsa0J0bi5jbGFzc0xpc3QucmVtb3ZlKGVuYWJsZWRDb2xvcilcclxuICAgICAgICBidWxrQnRuLnRleHRDb250ZW50ID0gYCR7dGV4dH0gKDApICBgXHJcbiAgICAgICAgYnVsa0J0bi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJ1bGtCdG4uY2xhc3NMaXN0LmFkZChlbmFibGVkQ29sb3IpO1xyXG4gICAgICAgIGJ1bGtCdG4uY2xhc3NMaXN0LnJlbW92ZShkaXNhYmxlZENvbG9yKTtcclxuICAgICAgICBidWxrQnRuLnRleHRDb250ZW50ID0gYCR7dGV4dH0gICgke3N1bX0pICBgXHJcbiAgICAgICAgYnVsa0J0bi5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaWx0ZXJTdHlsZSggaW5wdXQsIHZhbHVlICkge1xyXG5cclxuXHRpZiAoIHZhbHVlID09IFwiXCIgKSB7XHJcblx0XHRpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0Mi1zZWxlY3RlZFwiKTtcclxuXHR9XHJcblx0ZWxzZSB7XHJcblx0XHRpbnB1dC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0Mi1zZWxlY3RlZFwiKTtcclxuXHR9XHJcblxyXG59XHJcblxyXG5jb25zdCBmaWx0ZXJCdXR0b24gPSBmdW5jdGlvbiAoYXR0ciwgY29sdW1uLCB0YWJsZSkge1xyXG4gICAgJChhdHRyKS5kZXRhY2goKS5hcHBlbmRUbygnLmRhdGFUYWJsZXNfbGVuZ3RoIGxhYmVsJylcclxuICAgICQoYXR0cikub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0YWJsZS5jb2x1bW5zKGNvbHVtbikuc2VhcmNoKHRoaXMudmFsdWUpLmRyYXcoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5jb25zdCBjaGFuZ2VJbnB1dEhpZGRlbiA9IChhdHRyLCBoaWRkZW5BdHRyKSA9PiB7XHJcblxyXG4gICAgJChhdHRyKS5jaGFuZ2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChhdHRyID09IFwiI2FjdGl2ZU1hdGVyaWFsXCIpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9ICQodGhpcykucHJvcCgnY2hlY2tlZCcpID09IHRydWUgPyAxIDogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBoaWRkZW5WYWx1ZSA9ICQoaGlkZGVuQXR0cilbMF0udmFsdWUgPSB0aGlzLnZhbHVlXHJcblxyXG4gICAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU3RhdGVTZWxlY3QoIGlkID0gXCJcIiApIHtcclxuICAgIGNvbnN0IHNlbGVjdEVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XHJcbiAgICBzZWxlY3RFbG0uY2xhc3NMaXN0LmFkZChcIm1sLTFcIiwgXCJzZWxlY3QyXCIpO1xyXG5cdHNlbGVjdEVsbS5pZCA9IGlkO1xyXG5cclxuICAgIHNlbGVjdEVsbS5pbm5lckhUTUwgPSBgXHJcblx0XHQ8b3B0aW9uIHZhbHVlPVwiXCI+zozOu861z4Igzr/OuSDOms6xz4TOsc+Dz4TOrM+DzrXOuc+CPC9vcHRpb24+XHJcblx0XHQ8b3B0aW9uIHZhbHVlPVwiMVwiPs6Vzr3Otc+BzrPOrDwvb3B0aW9uPlxyXG5cdFx0PG9wdGlvbiB2YWx1ZT1cIjBcIj7Okc69zrXOvc61z4HOs86sPC9vcHRpb24+XHJcblx0YDtcclxuXHJcbiAgICByZXR1cm4gc2VsZWN0RWxtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVEYXRlRWxtKCBpZCApIHtcclxuXHRsZXQgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcblxyXG5cdGlucHV0LmNsYXNzTGlzdC5hZGQoXCJmb3JtLWNvbnRyb2xcIiwgXCJkYXRlXCIsIFwiZC1pbmxpbmUtYmxvY2tcIiwgXCJtbC0xXCIpO1xyXG5cdGlucHV0LmlkID0gaWQ7XHJcblx0aW5wdXQuZGF0YXNldC50b2dnbGUgPSBcImRhdGUtcGlja2VyXCI7XHJcblx0aW5wdXQuZGF0YXNldC5jYW5jZWxDbGFzcyA9IFwiYnRuLXNlY29uZGFyeVwiO1xyXG5cdGlucHV0LnN0eWxlLmhlaWdodCA9IFwiMzEuOTZweFwiO1xyXG5cdGlucHV0LnN0eWxlLndpZHRoID0gXCIxOTVweFwiO1xyXG5cdGlucHV0LnBsYWNlaG9sZGVyID0gXCLOlc+AzrnOu86tzr7PhM61IM63zrzOtc+Bzr/OvM63zr3Or861z4IuLi5cIjtcclxuXHJcblx0cmV0dXJuIGlucHV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdGFydERhdGUoIGlucHV0ICkge1xyXG5cclxuXHRsZXQgZGF0ZUlucHV0ID0gaW5wdXQ7XHJcblxyXG5cdGlmICggIWRhdGVJbnB1dCB8fCBkYXRlSW5wdXQudmFsdWUgPT0gXCJcIiApIHtcclxuXHRcdHJldHVybiBcIlwiO1xyXG5cdH1cclxuXHJcblx0bGV0IGRhdGVJbnB1dFZhbHVlID0gZGF0ZUlucHV0LnZhbHVlLnNwbGl0KFwiIC0gXCIpO1xyXG5cdGxldCBmaXJzdERhdGUgPSBkYXRlSW5wdXRWYWx1ZVswXS5zcGxpdChcIi9cIikucmV2ZXJzZSgpLmpvaW4oXCItXCIpO1xyXG5cclxuXHRyZXR1cm4gZmlyc3REYXRlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbmREYXRlKCBpbnB1dCApIHtcclxuXHJcblx0bGV0IGRhdGVJbnB1dCA9IGlucHV0O1xyXG5cclxuXHRpZiAoICFkYXRlSW5wdXQgfHwgZGF0ZUlucHV0LnZhbHVlID09IFwiXCIgKSB7XHJcblx0XHRyZXR1cm4gXCJcIjtcclxuXHR9XHJcblx0XHJcblx0bGV0IGRhdGVJbnB1dFZhbHVlID0gZGF0ZUlucHV0LnZhbHVlLnNwbGl0KFwiIC0gXCIpO1xyXG5cdGxldCBzZWNvbmREYXRlID0gZGF0ZUlucHV0VmFsdWVbMV0uc3BsaXQoXCIvXCIpLnJldmVyc2UoKS5qb2luKFwiLVwiKTtcclxuXHRcclxuXHRyZXR1cm4gc2Vjb25kRGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgdG9hc3RBbGVydCxcclxuICAgIG1haW5DaGVja2JveFN3aXRjaGVyLFxyXG4gICAgbWlub3JDaGVja2JveFN3aXRjaGVyLFxyXG4gICAgZmlsdGVyQnV0dG9uLFxyXG4gICAgdGFibGVMb2NhbGUsXHJcbiAgICBjaGFuZ2VJbnB1dEhpZGRlbixcclxuICAgIHJlZGFjdG9yQ29uZmlnLFxyXG4gICAgY3JlYXRlU3RhdGVTZWxlY3QsXHJcbiAgICBkYXRlUGlja2VyQ29uZmlnLFxyXG5cdHRvYXN0QWxlcnREZWxldGUsXHJcblx0ZmlsdGVyU3R5bGUsXHJcblx0Y3JlYXRlRGF0ZUVsbSxcclxuXHRzdGFydERhdGUsXHJcblx0ZW5kRGF0ZVxyXG59XHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/dashboard/main.js\n");

/***/ }),

/***/ "./resources/plugins/article-editor/article-editor.js":
/*!************************************************************!*\
  !*** ./resources/plugins/article-editor/article-editor.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\r\n    Article Editor JS\r\n    Version 2.1.0\r\n    Updated: August 19, 2020\r\n\r\n    http://imperavi.com/article/\r\n\r\n    Copyright (c) 2009-2020, Imperavi Ltd.\r\n    License: http://imperavi.com/article/license/\r\n*/\nif (typeof CodeMirror === 'undefined') {\n  var CodeMirror = null;\n}\n\n(function () {\n  var Ajax = {};\n  Ajax.settings = {};\n\n  Ajax.post = function (options) {\n    return new AjaxRequest('post', options);\n  };\n\n  Ajax.get = function (options) {\n    return new AjaxRequest('get', options);\n  };\n\n  var AjaxRequest = function AjaxRequest(method, options) {\n    var defaults = {\n      method: method,\n      url: '',\n      before: function before() {},\n      success: function success() {},\n      error: function error() {},\n      data: false,\n      async: true,\n      headers: {}\n    };\n    this.p = this.extend(defaults, options);\n    this.p = this.extend(this.p, Ajax.settings);\n    this.p.method = this.p.method.toUpperCase();\n    this.prepareData();\n    this.xhr = new XMLHttpRequest();\n    this.xhr.open(this.p.method, this.p.url, this.p.async);\n    this.setHeaders();\n    var before = typeof this.p.before === 'function' ? this.p.before(this.xhr) : true;\n\n    if (before !== false) {\n      this.send();\n    }\n  };\n\n  AjaxRequest.prototype = {\n    extend: function extend(obj1, obj2) {\n      if (obj2) for (var name in obj2) {\n        obj1[name] = obj2[name];\n      }\n      return obj1;\n    },\n    prepareData: function prepareData() {\n      if (this.p.method === 'POST' && !this.isFormData()) this.p.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      if (_typeof(this.p.data) === 'object' && !this.isFormData()) this.p.data = this.toParams(this.p.data);\n      if (this.p.method === 'GET') this.p.url = this.p.data ? this.p.url + '?' + this.p.data : this.p.url;\n    },\n    setHeaders: function setHeaders() {\n      this.xhr.setRequestHeader('X-Requested-With', this.p.headers['X-Requested-With'] || 'XMLHttpRequest');\n\n      for (var name in this.p.headers) {\n        this.xhr.setRequestHeader(name, this.p.headers[name]);\n      }\n    },\n    isFormData: function isFormData() {\n      return typeof window.FormData !== 'undefined' && this.p.data instanceof window.FormData;\n    },\n    isComplete: function isComplete() {\n      return !(this.xhr.status < 200 || this.xhr.status >= 300 && this.xhr.status !== 304);\n    },\n    send: function send() {\n      if (this.p.async) {\n        this.xhr.onload = this.loaded.bind(this);\n        this.xhr.send(this.p.data);\n      } else {\n        this.xhr.send(this.p.data);\n        this.loaded.call(this);\n      }\n    },\n    loaded: function loaded() {\n      if (this.isComplete()) {\n        var response = this.xhr.response;\n        var json = this.parseJson(response);\n        response = json ? json : response;\n        if (typeof this.p.success === 'function') this.p.success(response, this.xhr);\n      } else {\n        if (typeof this.p.error === 'function') this.p.error(this.xhr.statusText);\n      }\n    },\n    parseJson: function parseJson(str) {\n      try {\n        var o = JSON.parse(str);\n\n        if (o && _typeof(o) === 'object') {\n          return o;\n        }\n      } catch (e) {}\n\n      return false;\n    },\n    toParams: function toParams(obj) {\n      return Object.keys(obj).map(function (k) {\n        return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]);\n      }).join('&');\n    }\n  }; // version 2\n\n  var DomCache = [0];\n  var DomExpando = 'data' + new Date().getTime();\n\n  var Dom = function Dom(selector, context) {\n    return this.parse(selector, context);\n  };\n\n  Dom.ready = function (fn) {\n    document.addEventListener('DOMContentLoaded', fn);\n  };\n\n  Dom.prototype = {\n    get length() {\n      return this.nodes.length;\n    },\n\n    parse: function parse(s, c) {\n      var n;\n      var rehtml = /^\\s*<(\\w+|!)[^>]*>/;\n\n      if (!s) {\n        n = [];\n      } else if (s instanceof Dom) {\n        this.nodes = s.nodes;\n        return s;\n      } else if (rehtml.test(s)) {\n        n = this.create(s);\n      } else if (typeof s !== 'string') {\n        if (s.nodeType && s.nodeType === 11) n = s.childNodes;else n = s.nodeType || this._isWindowNode(s) ? [s] : s;\n      } else {\n        n = this._query(s, c);\n      }\n\n      this.nodes = this._slice(n);\n    },\n    create: function create(html) {\n      if (/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/.test(html)) {\n        return [document.createElement(RegExp.$1)];\n      }\n\n      var elmns = [];\n      var c = document.createElement('div');\n      c.innerHTML = html;\n\n      for (var i = 0, l = c.childNodes.length; i < l; i++) {\n        elmns.push(c.childNodes[i]);\n      }\n\n      return elmns;\n    },\n    // dataset/dataget\n    dataset: function dataset(key, value) {\n      return this.each(function ($node) {\n        DomCache[this.dataindex($node.get())][key] = value;\n      });\n    },\n    dataget: function dataget(key) {\n      return DomCache[this.dataindex(this.get())][key];\n    },\n    dataindex: function dataindex(el) {\n      var index = el[DomExpando];\n      var nextIndex = DomCache.length;\n\n      if (!index) {\n        index = nextIndex;\n        if (el) el[DomExpando] = nextIndex;\n        DomCache[index] = {};\n      }\n\n      return index;\n    },\n    // add\n    add: function add(n) {\n      this.nodes = this.nodes.concat(this._array(n));\n      return this;\n    },\n    // get\n    get: function get(index) {\n      return this.nodes[index || 0] || false;\n    },\n    getAll: function getAll() {\n      return this.nodes;\n    },\n    eq: function eq(index) {\n      return new Dom(this.nodes[index]);\n    },\n    first: function first() {\n      return new Dom(this.nodes[0]);\n    },\n    last: function last() {\n      return new Dom(this.nodes[this.nodes.length - 1]);\n    },\n    contents: function contents() {\n      return this.get().childNodes;\n    },\n    // loop\n    each: function each(fn) {\n      var len = this.nodes.length;\n\n      for (var i = 0; i < len; i++) {\n        fn.call(this, new Dom(this.nodes[i]), i);\n      }\n\n      return this;\n    },\n    // traversing\n    is: function is(s) {\n      return this.filter(s).length > 0;\n    },\n    filter: function filter(s) {\n      var fn;\n\n      if (s === undefined) {\n        return this;\n      } else if (typeof s === 'function') {\n        fn = function fn(node) {\n          return s(new Dom(node));\n        };\n      } else {\n        fn = function fn(node) {\n          if (s && s.nodeType || s instanceof Node) {\n            return s === node;\n          } else {\n            node.matches = node.matches || node.msMatchesSelector || node.webkitMatchesSelector;\n            return node.nodeType === 1 ? node.matches(s || '*') : false;\n          }\n        };\n      }\n\n      return new Dom(this.nodes.filter.call(this.nodes, fn));\n    },\n    not: function not(filter) {\n      return this.filter(function (node) {\n        return !new Dom(node).is(filter || true);\n      });\n    },\n    find: function find(s) {\n      var n = [];\n      this.each(function ($n) {\n        var node = $n.get();\n\n        var ns = this._query(s, node);\n\n        for (var i = 0; i < ns.length; i++) {\n          n.push(ns[i]);\n        }\n      });\n      return new Dom(n);\n    },\n    children: function children(s) {\n      var n = [];\n      this.each(function ($n) {\n        var node = $n.get();\n\n        if (node.children) {\n          var ns = node.children;\n\n          for (var i = 0; i < ns.length; i++) {\n            n.push(ns[i]);\n          }\n        }\n      });\n      return new Dom(n).filter(s);\n    },\n    parent: function parent(s) {\n      var node = this.get();\n      var p = node.parentNode ? node.parentNode : false;\n      return p ? new Dom(p).filter(s) : new Dom();\n    },\n    parents: function parents(s, c) {\n      c = this._context(c);\n      var n = [];\n      this.each(function ($n) {\n        var node = $n.get();\n        var p = node.parentNode;\n\n        while (p && p !== c) {\n          if (s) {\n            if (new Dom(p).is(s)) {\n              n.push(p);\n            }\n          } else {\n            n.push(p);\n          }\n\n          p = p.parentNode;\n        }\n      });\n      return new Dom(n);\n    },\n    closest: function closest(s, c) {\n      c = this._context(c);\n      var n = [];\n      var isNode = s && s.nodeType;\n      this.each(function ($n) {\n        var node = $n.get();\n\n        do {\n          if (isNode && node === s || new Dom(node).is(s)) return n.push(node);\n        } while ((node = node.parentNode) && node !== c);\n      });\n      return new Dom(n);\n    },\n    next: function next(s) {\n      return this._sibling(s, 'nextSibling');\n    },\n    nextElement: function nextElement(s) {\n      return this._sibling(s, 'nextElementSibling');\n    },\n    prev: function prev(s) {\n      return this._sibling(s, 'previousSibling');\n    },\n    prevElement: function prevElement(s) {\n      return this._sibling(s, 'previousElementSibling');\n    },\n    // css\n    css: function css(name, value) {\n      if (value === undefined && _typeof(name) !== 'object') {\n        var node = this.get();\n\n        if (name === 'width' || name === 'height') {\n          return node.style ? this._getHeightOrWidth(name) + 'px' : undefined;\n        } else {\n          return node.style ? getComputedStyle(node, null)[name] : undefined;\n        }\n      } // set\n\n\n      return this.each(function ($n) {\n        var node = $n.get();\n        var o = {};\n        if (_typeof(name) === 'object') o = name;else o[name] = value;\n\n        for (var key in o) {\n          if (node.style) node.style[key] = o[key];\n        }\n      });\n    },\n    // attr\n    attr: function attr(name, value, data) {\n      data = data ? 'data-' : '';\n\n      if (typeof value === 'undefined' && _typeof(name) !== 'object') {\n        var node = this.get();\n\n        if (node && node.nodeType !== 3) {\n          return name === 'checked' ? node.checked : this._boolean(node.getAttribute(data + name));\n        } else {\n          return;\n        }\n      } // set\n\n\n      return this.each(function ($n) {\n        var node = $n.get();\n        var o = {};\n        if (_typeof(name) === 'object') o = name;else o[name] = value;\n\n        for (var key in o) {\n          if (node.nodeType !== 3) {\n            if (key === 'checked') node.checked = o[key];else node.setAttribute(data + key, o[key]);\n          }\n        }\n      });\n    },\n    data: function data(name, value) {\n      if (name === undefined) {\n        var reDataAttr = /^data-(.+)$/;\n        var attrs = this.get().attributes;\n        var data = {};\n\n        var replacer = function replacer(g) {\n          return g[1].toUpperCase();\n        };\n\n        for (var key in attrs) {\n          if (attrs[key] && reDataAttr.test(attrs[key].nodeName)) {\n            var dataName = attrs[key].nodeName.match(reDataAttr)[1];\n            var val = attrs[key].value;\n            dataName = dataName.replace(/-([a-z])/g, replacer);\n            if (val.search(/^{/) !== -1) val = this._object(val);else val = this._number(val) ? parseFloat(val) : this._boolean(val);\n            data[dataName] = val;\n          }\n        }\n\n        return data;\n      }\n\n      return this.attr(name, value, true);\n    },\n    val: function val(value) {\n      if (value === undefined) {\n        var el = this.get();\n        if (el.type && el.type === 'checkbox') return el.checked;else return el.value;\n      }\n\n      return this.each(function ($n) {\n        var el = $n.get();\n        if (el.type && el.type === 'checkbox') el.checked = value;else el.value = value;\n      });\n    },\n    removeAttr: function removeAttr(value) {\n      return this.each(function ($n) {\n        var node = $n.get();\n\n        var fn = function fn(name) {\n          if (node.nodeType !== 3) node.removeAttribute(name);\n        };\n\n        value.split(' ').forEach(fn);\n      });\n    },\n    // class\n    addClass: function addClass(value) {\n      return this._eachClass(value, 'add');\n    },\n    removeClass: function removeClass(value) {\n      return this._eachClass(value, 'remove');\n    },\n    toggleClass: function toggleClass(value) {\n      return this._eachClass(value, 'toggle');\n    },\n    hasClass: function hasClass(value) {\n      var node = this.get();\n      return node.classList ? node.classList.contains(value) : false;\n    },\n    // html & text\n    empty: function empty() {\n      return this.each(function ($n) {\n        $n.get().innerHTML = '';\n      });\n    },\n    html: function html(_html) {\n      return _html === undefined ? this.get().innerHTML || '' : this.empty().append(_html);\n    },\n    text: function text(_text) {\n      return _text === undefined ? this.get().textContent || '' : this.each(function ($n) {\n        $n.get().textContent = _text;\n      });\n    },\n    // manipulation\n    after: function after(html) {\n      return this._inject(html, function (frag, node) {\n        if (typeof frag === 'string') {\n          node.insertAdjacentHTML('afterend', frag);\n        } else {\n          if (node.parentNode !== null) {\n            for (var i = frag instanceof Node ? [frag] : this._array(frag).reverse(), s = 0; s < i.length; s++) {\n              node.parentNode.insertBefore(i[s], node.nextSibling);\n            }\n          }\n        }\n\n        return node;\n      });\n    },\n    before: function before(html) {\n      return this._inject(html, function (frag, node) {\n        if (typeof frag === 'string') {\n          node.insertAdjacentHTML('beforebegin', frag);\n        } else {\n          var elms = frag instanceof Node ? [frag] : this._array(frag);\n\n          for (var i = 0; i < elms.length; i++) {\n            node.parentNode.insertBefore(elms[i], node);\n          }\n        }\n\n        return node;\n      });\n    },\n    append: function append(html) {\n      return this._inject(html, function (frag, node) {\n        if (typeof frag === 'string' || typeof frag === 'number') {\n          node.insertAdjacentHTML('beforeend', frag);\n        } else {\n          var elms = frag instanceof Node ? [frag] : this._array(frag);\n\n          for (var i = 0; i < elms.length; i++) {\n            node.appendChild(elms[i]);\n          }\n        }\n\n        return node;\n      });\n    },\n    prepend: function prepend(html) {\n      return this._inject(html, function (frag, node) {\n        if (typeof frag === 'string' || typeof frag === 'number') {\n          node.insertAdjacentHTML('afterbegin', frag);\n        } else {\n          var elms = frag instanceof Node ? [frag] : this._array(frag).reverse();\n\n          for (var i = 0; i < elms.length; i++) {\n            node.insertBefore(elms[i], node.firstChild);\n          }\n        }\n\n        return node;\n      });\n    },\n    wrap: function wrap(html) {\n      return this._inject(html, function (frag, node) {\n        var wrapper = typeof frag === 'string' || typeof frag === 'number' ? this.create(frag)[0] : frag instanceof Node ? frag : this._array(frag)[0];\n\n        if (node.parentNode) {\n          node.parentNode.insertBefore(wrapper, node);\n        }\n\n        wrapper.appendChild(node);\n        return wrapper;\n      });\n    },\n    unwrap: function unwrap() {\n      return this.each(function ($n) {\n        var node = $n.get();\n        var docFrag = document.createDocumentFragment();\n\n        while (node.firstChild) {\n          var child = node.removeChild(node.firstChild);\n          docFrag.appendChild(child);\n        }\n\n        node.parentNode.replaceChild(docFrag, node);\n      });\n    },\n    replaceWith: function replaceWith(html) {\n      return this._inject(html, function (frag, node) {\n        var docFrag = document.createDocumentFragment();\n        var elms = typeof frag === 'string' || typeof frag === 'number' ? this.create(frag) : frag instanceof Node ? [frag] : this._array(frag);\n\n        for (var i = 0; i < elms.length; i++) {\n          docFrag.appendChild(elms[i]);\n        }\n\n        var result = docFrag.childNodes[0];\n        node.parentNode.replaceChild(docFrag, node);\n        return result;\n      });\n    },\n    remove: function remove() {\n      return this.each(function ($n) {\n        var node = $n.get();\n        if (node.parentNode) node.parentNode.removeChild(node);\n      });\n    },\n    clone: function clone(events) {\n      var n = [];\n      this.each(function ($n) {\n        var node = $n.get();\n\n        var copy = this._clone(node);\n\n        if (events) copy = this._cloneEvents(node, copy);\n        n.push(copy);\n      });\n      return new Dom(n);\n    },\n    // show/hide\n    show: function show() {\n      return this.each(function ($n) {\n        var node = $n.get();\n        if (!node.style || !this._hasDisplayNone(node)) return;\n        var target = node.getAttribute('domTargetShow');\n        node.style.display = target ? target : 'block';\n        node.removeAttribute('domTargetShow');\n      }.bind(this));\n    },\n    hide: function hide() {\n      return this.each(function ($n) {\n        var node = $n.get();\n        if (!node.style || this._hasDisplayNone(node)) return;\n        var display = node.style.display;\n        if (display !== 'block') node.setAttribute('domTargetShow', display);\n        node.style.display = 'none';\n      });\n    },\n    // dimensions\n    scrollTop: function scrollTop(value) {\n      var node = this.get();\n\n      var isWindow = this._isWindowNode(node);\n\n      var isDocument = node.nodeType === 9;\n      var el = isDocument ? node.scrollingElement || node.body.parentNode || node.body || node.documentElement : node;\n\n      if (typeof value !== 'undefined') {\n        value = parseInt(value);\n        if (isWindow) node.scrollTo(0, value);else el.scrollTop = value;\n        return;\n      }\n\n      return isWindow ? node.pageYOffset : el.scrollTop;\n    },\n    offset: function offset() {\n      return this._getPos('offset');\n    },\n    position: function position() {\n      return this._getPos('position');\n    },\n    width: function width(value) {\n      return value !== undefined ? this.css('width', parseInt(value) + 'px') : this._getSize('width', 'Width');\n    },\n    height: function height(value) {\n      return value !== undefined ? this.css('height', parseInt(value) + 'px') : this._getSize('height', 'Height');\n    },\n    outerWidth: function outerWidth() {\n      return this._getSize('width', 'Width', 'outer');\n    },\n    outerHeight: function outerHeight() {\n      return this._getSize('height', 'Height', 'outer');\n    },\n    innerWidth: function innerWidth() {\n      return this._getSize('width', 'Width', 'inner');\n    },\n    innerHeight: function innerHeight() {\n      return this._getSize('height', 'Height', 'inner');\n    },\n    // events\n    click: function click() {\n      return this._trigger('click');\n    },\n    focus: function focus() {\n      return this._trigger('focus');\n    },\n    blur: function blur() {\n      return this._trigger('blur');\n    },\n    on: function on(names, handler, one) {\n      return this.each(function ($n) {\n        var node = $n.get();\n        var events = names.split(' ');\n\n        for (var i = 0; i < events.length; i++) {\n          var event = this._getEventName(events[i]);\n\n          var namespace = this._getEventNamespace(events[i]);\n\n          handler = one ? this._getOneHandler(handler, names) : handler;\n          node.addEventListener(event, handler);\n          node._e = node._e || {};\n          node._e[namespace] = node._e[namespace] || {};\n          node._e[namespace][event] = node._e[namespace][event] || [];\n\n          node._e[namespace][event].push(handler);\n        }\n      });\n    },\n    one: function one(events, handler) {\n      return this.on(events, handler, true);\n    },\n    off: function off(names, handler) {\n      var testEvent = function testEvent(name, key, event) {\n        return name === event;\n      };\n\n      var testNamespace = function testNamespace(name, key, event, namespace) {\n        return key === namespace;\n      };\n\n      var testEventNamespace = function testEventNamespace(name, key, event, namespace) {\n        return name === event && key === namespace;\n      };\n\n      var testPositive = function testPositive() {\n        return true;\n      };\n\n      if (names === undefined) {\n        // all\n        return this.each(function ($n) {\n          this._offEvent($n.get(), false, false, handler, testPositive);\n        });\n      }\n\n      return this.each(function ($n) {\n        var node = $n.get();\n        var events = names.split(' ');\n\n        for (var i = 0; i < events.length; i++) {\n          var event = this._getEventName(events[i]);\n\n          var namespace = this._getEventNamespace(events[i]); // 1) event without namespace\n\n\n          if (namespace === '_events') this._offEvent(node, event, namespace, handler, testEvent); // 2) only namespace\n          else if (!event && namespace !== '_events') this._offEvent(node, event, namespace, handler, testNamespace); // 3) event + namespace\n            else this._offEvent(node, event, namespace, handler, testEventNamespace);\n        }\n      });\n    },\n    // form\n    serialize: function serialize(asObject) {\n      var obj = {};\n      var elms = this.get().elements;\n\n      for (var i = 0; i < elms.length; i++) {\n        var el = elms[i];\n        if (/(checkbox|radio)/.test(el.type) && !el.checked) continue;\n        if (!el.name || el.disabled || el.type === 'file') continue;\n\n        if (el.type === 'select-multiple') {\n          for (var z = 0; z < el.options.length; z++) {\n            var opt = el.options[z];\n            if (opt.selected) obj[el.name] = opt.value;\n          }\n        }\n\n        obj[el.name] = this._number(el.value) ? parseFloat(el.value) : this._boolean(el.value);\n      }\n\n      return asObject ? obj : this._params(obj);\n    },\n    // animation\n    scroll: function scroll() {\n      this.get().scrollIntoView({\n        behavior: 'smooth'\n      });\n    },\n    fadeIn: function fadeIn(speed, fn) {\n      var anim = this._anim(speed, fn, 500);\n\n      return this.each(function ($n) {\n        $n.css({\n          'display': 'block',\n          'opacity': 0,\n          'animation': 'fadeIn ' + anim.speed + 's ease-in-out'\n        });\n        $n.one('animationend', function (e) {\n          $n.css({\n            'opacity': '',\n            'animation': ''\n          });\n          if (anim.fn) anim.fn($n);\n        });\n      });\n    },\n    fadeOut: function fadeOut(speed, fn) {\n      var anim = this._anim(speed, fn, 300);\n\n      return this.each(function ($n) {\n        $n.css({\n          'opacity': 1,\n          'animation': 'fadeOut ' + anim.speed + 's ease-in-out'\n        });\n        $n.one('animationend', function (e) {\n          $n.css({\n            'display': 'none',\n            'opacity': '',\n            'animation': ''\n          });\n          if (anim.fn) anim.fn($n);\n        });\n      });\n    },\n    slideUp: function slideUp(speed, fn) {\n      var anim = this._anim(speed, fn, 300);\n\n      return this.each(function ($n) {\n        $n.height($n.height());\n        $n.css({\n          'overflow': 'hidden',\n          'animation': 'slideUp ' + anim.speed + 's ease-out'\n        });\n        $n.one('animationend', function (e) {\n          $n.css({\n            'display': 'none',\n            'height': '',\n            'animation': ''\n          });\n          if (anim.fn) anim.fn($n);\n        });\n      });\n    },\n    slideDown: function slideDown(speed, fn) {\n      var anim = this._anim(speed, fn, 400);\n\n      return this.each(function ($n) {\n        $n.height($n.height());\n        $n.css({\n          'display': 'block',\n          'overflow': 'hidden',\n          'animation': 'slideDown ' + anim.speed + 's ease-in-out'\n        });\n        $n.one('animationend', function (e) {\n          $n.css({\n            'overflow': '',\n            'height': '',\n            'animation': ''\n          });\n          if (anim.fn) anim.fn($n);\n        });\n      });\n    },\n    // private\n    _queryContext: function _queryContext(s, c) {\n      c = this._context(c);\n      return c.nodeType !== 3 && typeof c.querySelectorAll === 'function' ? c.querySelectorAll(s) : [];\n    },\n    _query: function _query(s, c) {\n      var d = document;\n\n      if (c) {\n        return this._queryContext(s, c);\n      } else if (/^[.#]?[\\w-]*$/.test(s)) {\n        if (s[0] === '#') {\n          var el = d.getElementById(s.slice(1));\n          return el ? [el] : [];\n        }\n\n        if (s[0] === '.') {\n          return d.getElementsByClassName(s.slice(1));\n        }\n\n        return d.getElementsByTagName(s);\n      }\n\n      return d.querySelectorAll(s);\n    },\n    _context: function _context(c) {\n      return !c ? document : typeof c === 'string' ? document.querySelector(c) : c;\n    },\n    _sibling: function _sibling(s, method) {\n      var isNode = s && s.nodeType;\n      var sibling;\n      this.each(function ($n) {\n        var node = $n.get();\n\n        while (node = node[method]) {\n          if (isNode && node === s || new Dom(node).is(s)) {\n            sibling = node;\n            return;\n          }\n        }\n      });\n      return new Dom(sibling);\n    },\n    _slice: function _slice(o) {\n      return !o || o.length === 0 ? [] : o.length ? [].slice.call(o.nodes || o) : [o];\n    },\n    _array: function _array(o) {\n      if (o === undefined) return [];else if (o instanceof NodeList) {\n        var arr = [];\n\n        for (var i = 0; i < o.length; i++) {\n          arr[i] = o[i];\n        }\n\n        return arr;\n      }\n      return o instanceof Dom ? o.nodes : o;\n    },\n    _object: function _object(str) {\n      return new Function(\"return \" + str)();\n    },\n    _params: function _params(obj) {\n      var params = '';\n\n      for (var key in obj) {\n        params += '&' + this._encodeUri(key) + '=' + this._encodeUri(obj[key]);\n      }\n\n      return params.replace(/^&/, '');\n    },\n    _boolean: function _boolean(str) {\n      if (str === 'true') return true;else if (str === 'false') return false;\n      return str;\n    },\n    _number: function _number(str) {\n      return !isNaN(str) && !isNaN(parseFloat(str));\n    },\n    _inject: function _inject(html, fn) {\n      var len = this.nodes.length;\n      var nodes = [];\n\n      while (len--) {\n        var res = typeof html === 'function' ? html.call(this, this.nodes[len]) : html;\n        var el = len === 0 ? res : this._clone(res);\n        var node = fn.call(this, el, this.nodes[len]);\n\n        if (node) {\n          if (node.dom) nodes.push(node.get());else nodes.push(node);\n        }\n      }\n\n      return new Dom(nodes);\n    },\n    _clone: function _clone(node) {\n      if (typeof node === 'undefined') return;\n      if (typeof node === 'string') return node;else if (node instanceof Node || node.nodeType) return node.cloneNode(true);else if ('length' in node) {\n        return [].map.call(this._array(node), function (el) {\n          return el.cloneNode(true);\n        });\n      }\n    },\n    _cloneEvents: function _cloneEvents(node, copy) {\n      var events = node._e;\n\n      if (events) {\n        copy._e = events;\n\n        for (var name in events._events) {\n          for (var i = 0; i < events._events[name].length; i++) {\n            copy.addEventListener(name, events._events[name][i]);\n          }\n        }\n      }\n\n      return copy;\n    },\n    _trigger: function _trigger(name) {\n      var node = this.get();\n      if (node && node.nodeType !== 3) node[name]();\n      return this;\n    },\n    _encodeUri: function _encodeUri(str) {\n      return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/\\*/g, '%2A').replace(/%20/g, '+');\n    },\n    _getSize: function _getSize(name, cname, type) {\n      var el = this.get();\n      var value = 0;\n\n      if (el.nodeType === 3) {\n        value = 0;\n      } else if (el.nodeType === 9) {\n        value = this._getDocSize(el, cname);\n      } else if (this._isWindowNode(el)) {\n        value = window['inner' + cname];\n      } else {\n        value = this._getHeightOrWidth(name);\n      }\n\n      return Math.round(value);\n    },\n    _getDocSize: function _getDocSize(node, type) {\n      var body = node.body,\n          html = node.documentElement;\n      return Math.max(body['scroll' + type], body['offset' + type], html['client' + type], html['scroll' + type], html['offset' + type]);\n    },\n    _getPos: function _getPos(type) {\n      var node = this.get();\n      var dim = {\n        top: 0,\n        left: 0\n      };\n\n      if (node.nodeType === 3 || this._isWindowNode(node) || node.nodeType === 9) {\n        return dim;\n      } else if (type === 'position') {\n        return {\n          top: node.offsetTop,\n          left: node.offsetLeft\n        };\n      } else if (type === 'offset') {\n        var rect = node.getBoundingClientRect();\n        var doc = node.ownerDocument;\n        var docElem = doc.documentElement;\n        var win = doc.defaultView;\n        return {\n          top: rect.top + win.pageYOffset - docElem.clientTop,\n          left: rect.left + win.pageXOffset - docElem.clientLeft\n        };\n      }\n\n      return dim;\n    },\n    _getHeightOrWidth: function _getHeightOrWidth(name, type) {\n      var cname = name.charAt(0).toUpperCase() + name.slice(1);\n      var mode = type ? type : 'offset';\n      var result = 0;\n      var el = this.get();\n      var style = getComputedStyle(el, null);\n      var $targets = this.parents().filter(function ($n) {\n        var node = $n.get();\n        return node.nodeType === 1 && getComputedStyle(node, null).display === 'none' ? node : false;\n      });\n      if (style.display === 'none') $targets.add(el);\n\n      if ($targets.length !== 0) {\n        var fixStyle = 'visibility: hidden !important; display: block !important;';\n        var tmp = [];\n        $targets.each(function ($n) {\n          var thisStyle = $n.attr('style');\n          if (thisStyle !== null) tmp.push(thisStyle);\n          $n.attr('style', thisStyle !== null ? thisStyle + ';' + fixStyle : fixStyle);\n        });\n        result = el[mode + cname];\n        $targets.each(function ($n, i) {\n          if (tmp[i] === undefined) $n.removeAttr('style');else $n.attr('style', tmp[i]);\n        });\n      } else {\n        result = el[mode + cname];\n      }\n\n      return result;\n    },\n    _eachClass: function _eachClass(value, type) {\n      return this.each(function ($n) {\n        if (value) {\n          var node = $n.get();\n\n          var fn = function fn(name) {\n            if (node.classList) node.classList[type](name);\n          };\n\n          value.split(' ').forEach(fn);\n        }\n      });\n    },\n    _getOneHandler: function _getOneHandler(handler, events) {\n      var self = this;\n      return function () {\n        handler.apply(this, arguments);\n        self.off(events);\n      };\n    },\n    _getEventNamespace: function _getEventNamespace(event) {\n      var arr = event.split('.');\n      var namespace = arr[1] ? arr[1] : '_events';\n      return arr[2] ? namespace + arr[2] : namespace;\n    },\n    _getEventName: function _getEventName(event) {\n      return event.split('.')[0];\n    },\n    _offEvent: function _offEvent(node, event, namespace, handler, condition) {\n      for (var key in node._e) {\n        for (var name in node._e[key]) {\n          if (condition(name, key, event, namespace)) {\n            var handlers = node._e[key][name];\n\n            for (var i = 0; i < handlers.length; i++) {\n              if (typeof handler !== 'undefined' && handlers[i].toString() !== handler.toString()) {\n                continue;\n              }\n\n              node.removeEventListener(name, handlers[i]);\n\n              node._e[key][name].splice(i, 1);\n\n              if (node._e[key][name].length === 0) delete node._e[key][name];\n              if (Object.keys(node._e[key]).length === 0) delete node._e[key];\n            }\n          }\n        }\n      }\n    },\n    _hasDisplayNone: function _hasDisplayNone(el) {\n      return el.style.display === 'none' || (el.currentStyle ? el.currentStyle.display : getComputedStyle(el, null).display) === 'none';\n    },\n    _anim: function _anim(speed, fn, speedDef) {\n      if (typeof speed === 'function') {\n        fn = speed;\n        speed = speedDef;\n      } else {\n        speed = speed || speedDef;\n      }\n\n      return {\n        fn: fn,\n        speed: speed / 1000\n      };\n    },\n    _isWindowNode: function _isWindowNode(node) {\n      return node === window || node.parent && node.parent === window;\n    }\n  }; // Unique ID\n\n  var arx_uuid = 0; // Init\n\n  var ArticleEditor = function ArticleEditor(selector, settings) {\n    return ArticleEditorInit(selector, settings);\n  }; // Class\n\n\n  var ArticleEditorInit = function ArticleEditorInit(selector, settings) {\n    var $elms = $ARX.dom(selector);\n    var instance;\n    $elms.each(function ($el) {\n      instance = $el.dataget($ARX.namespace);\n\n      if (!instance) {\n        // Initialization\n        instance = new App($el, settings, arx_uuid);\n        $el.dataset($ARX.namespace, instance);\n        $ARX.instances[arx_uuid] = instance;\n        arx_uuid++;\n      }\n    });\n    return instance;\n  };\n\n  var $ARX = ArticleEditor; // Dom & Ajax\n\n  $ARX.dom = function (selector, context) {\n    return new Dom(selector, context);\n  };\n\n  $ARX.ajax = Ajax; // Globals\n\n  $ARX.instances = [];\n  $ARX.namespace = 'article-editor';\n  $ARX.prefix = 'arx';\n  $ARX.version = '2.1.0';\n  $ARX.settings = {};\n  $ARX.lang = {};\n  $ARX._mixins = {};\n  $ARX._repository = {};\n  $ARX._subscribe = {};\n  $ARX.keycodes = {\n    BACKSPACE: 8,\n    DELETE: 46,\n    UP: 38,\n    DOWN: 40,\n    ENTER: 13,\n    SPACE: 32,\n    ESC: 27,\n    TAB: 9,\n    CTRL: 17,\n    META: 91,\n    SHIFT: 16,\n    ALT: 18,\n    RIGHT: 39,\n    LEFT: 37\n  }; // Add\n\n  $ARX.add = function (type, name, obj) {\n    // translations\n    if (obj.translations) {\n      $ARX.lang = $ARX.extend(true, $ARX.lang, obj.translations);\n    } // defaults\n\n\n    if (obj.defaults) {\n      var localopts = {};\n      localopts[name] = obj.defaults;\n      $ARX.opts = $ARX.extend(true, $ARX.opts, localopts);\n    } // extend parser\n\n\n    if (obj.parser) {\n      var opt = {};\n      opt[obj.type] = obj.parser;\n      $ARX.opts.parser = $ARX.extend({}, true, $ARX.opts.parser, opt);\n    } // extend nested\n\n\n    if (obj.nested) {\n      $ARX.opts.nested.push(obj.type);\n    }\n\n    if (type === 'mixin') {\n      $ARX._mixins[name] = obj;\n    } else {\n      // subscribe\n      if (obj.subscribe) {\n        for (var key in obj.subscribe) {\n          var arr = key.split(',');\n\n          for (var i = 0; i < arr.length; i++) {\n            var ns = arr[i].trim();\n            if (typeof $ARX._subscribe[ns] === 'undefined') $ARX._subscribe[ns] = [];\n\n            $ARX._subscribe[ns].push({\n              module: name,\n              func: obj.subscribe[key]\n            });\n          }\n        }\n      } // prototype\n\n\n      var F = function F() {};\n\n      F.prototype = obj; // mixins\n\n      if (obj.mixins) {\n        for (var z = 0; z < obj.mixins.length; z++) {\n          $ARX.inherit(F, $ARX._mixins[obj.mixins[z]]);\n        }\n      }\n\n      $ARX._repository[name] = {\n        type: type,\n        proto: F,\n        obj: obj\n      };\n    }\n  }; // Extend\n\n\n  $ARX.extend = function () {\n    var extended = {};\n    var deep = false;\n    var i = 0;\n    var length = arguments.length;\n\n    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n      deep = arguments[0];\n      i++;\n    }\n\n    var merge = function merge(obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') extended[prop] = $ARX.extend(true, extended[prop], obj[prop]);else extended[prop] = obj[prop];\n        }\n      }\n    };\n\n    for (; i < length; i++) {\n      var obj = arguments[i];\n      merge(obj);\n    }\n\n    return extended;\n  }; // Error\n\n\n  $ARX.error = function (exception) {\n    throw exception;\n  }; // Inherit\n\n\n  $ARX.inherit = function (current, parent) {\n    var F = function F() {};\n\n    F.prototype = parent;\n    var f = new F();\n\n    for (var prop in current.prototype) {\n      if (current.prototype.__lookupGetter__(prop)) f.__defineGetter__(prop, current.prototype.__lookupGetter__(prop));else f[prop] = current.prototype[prop];\n    }\n\n    current.prototype = f;\n    current.prototype[\"super\"] = parent;\n    return current;\n  }; // Lang\n\n\n  $ARX.addLang = function (lang, obj) {\n    if (typeof $ARX.lang[lang] === 'undefined') $ARX.lang[lang] = {};\n    $ARX.lang[lang] = $ARX.extend(true, $ARX.lang[lang], obj);\n  };\n\n  ArticleEditor.opts = {\n    plugins: [],\n    content: false,\n    placeholder: false,\n    css: false,\n    custom: {\n      css: false,\n      js: false\n    },\n    editor: {\n      classname: 'entry',\n      focus: false,\n      sync: true,\n      drop: true,\n      lang: 'en',\n      add: 'top',\n      padding: true,\n      markup: 'paragraph',\n      mobile: 400,\n      scrollTarget: window,\n      direction: 'ltr',\n      spellcheck: true,\n      grammarly: false,\n      notranslate: false,\n      minHeight: '100px',\n      // string, '500px'\n      maxHeight: false,\n      // string, '500px'\n      doctype: '<!doctype html>'\n    },\n    selection: {\n      multiple: true\n    },\n    control: true,\n    source: true,\n    image: {\n      states: true,\n      upload: false,\n      url: true,\n      select: false,\n      name: 'file',\n      data: false,\n      drop: true,\n      multiple: true,\n      clipboard: true,\n      types: ['image/*'],\n      tag: 'figure',\n      // p, div, figure\n      newtab: false,\n      link: true\n    },\n    classes: false,\n    codemirrorSrc: false,\n    codemirror: false,\n    state: {\n      limit: 100\n    },\n    path: {\n      title: '## editor.title ##',\n      sticky: true,\n      stickyMinHeight: 200,\n      // pixels\n      stickyTopOffset: 0 // number\n\n    },\n    autosave: {\n      url: false,\n      name: false,\n      data: false\n    },\n    paste: {\n      clean: true,\n      autolink: true,\n      paragraphize: true,\n      plaintext: false,\n      linkTarget: false,\n      images: true,\n      links: true,\n      keepStyle: [],\n      keepClass: [],\n      keepAttrs: ['td', 'th'],\n      formTags: ['form', 'input', 'button', 'select', 'textarea', 'legend', 'fieldset'],\n      blockTags: ['pre', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'table', 'tbody', 'thead', 'tfoot', 'th', 'tr', 'td', 'ul', 'ol', 'li', 'blockquote', 'p', 'hr', 'figure', 'iframe', 'figcaption', 'address', 'section', 'header', 'footer', 'aside', 'article'],\n      inlineTags: ['a', 'svg', 'img', 'br', 'strong', 'ins', 'code', 'del', 'span', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small', 'b', 'u', 'em', 'i', 'abbr']\n    },\n    clean: {\n      comments: false,\n      enter: true,\n      enterinline: false\n    },\n    tab: {\n      key: true,\n      spaces: false // true or number of spaces\n\n    },\n    topbar: {\n      undoredo: false,\n      shortcuts: true\n    },\n    toolbar: {\n      sticky: true,\n      stickyMinHeight: 200,\n      // pixels\n      stickyTopOffset: 0 // number\n\n    },\n    buttons: {\n      editor: {\n        add: {\n          command: 'addbar.popup',\n          title: '## buttons.add ##'\n        },\n        template: {\n          title: '## buttons.templates ##',\n          command: 'template.popup',\n          observer: 'template.observe'\n        },\n        mobile: {\n          title: '## buttons.mobile-view ##',\n          command: 'editor.toggleView'\n        },\n        html: {\n          title: '## buttons.html ##',\n          command: 'source.toggle'\n        }\n      },\n      topbar: {\n        undo: {\n          title: '## buttons.undo ##',\n          command: 'buffer.undo'\n        },\n        redo: {\n          title: '## buttons.redo ##',\n          command: 'buffer.redo'\n        },\n        shortcut: {\n          title: '## buttons.shortcuts ##',\n          observer: 'shortcut.observe',\n          command: 'shortcut.popup'\n        }\n      },\n      except: false,\n      add: false,\n      tags: {\n        'b': ['bold'],\n        'strong': ['bold'],\n        'i': ['italic'],\n        'em': ['italic'],\n        'del': ['deleted'],\n        'a': ['link']\n      },\n      types: false,\n      hidden: {}\n    },\n    card: {\n      classname: 'card',\n      template: '<div class=\"card\"><div class=\"card-head\"><h3>Card title</h3></div><div class=\"card-body\"><p>Card body</p></div></div>'\n    },\n    text: {\n      classname: 'arx-text'\n    },\n    noneditable: {\n      classname: 'noneditable'\n    },\n    embed: {\n      responsive: 'embed-responsive'\n    },\n    code: {\n      template: '<pre></pre>',\n      spaces: 4 // or false\n\n    },\n    line: true,\n    layer: {\n      template: '<div></div>'\n    },\n    table: {\n      template: '<table><tr><td></td><td></td></tr><tr><td></td><td></td></tr></table>'\n    },\n    quote: {\n      template: '<blockquote><p>Quote...</p><p><cite>Author Attribution</cite></p></blockquote>'\n    },\n    snippets: false,\n    templates: false,\n    grid: {\n      classname: 'grid',\n      classes: '',\n      overlay: true,\n      offset: {\n        left: 0,\n        right: 0\n      },\n      columns: 12,\n      gutter: '1.25rem',\n      patterns: {\n        '6|6': 'column column-6|column column-6',\n        '4|4|4': 'column column-4|column column-4|column column-4',\n        '3|3|3|3': 'column column-3|column column-3|column column-3|column column-3',\n        '2|2|2|2|2|2': 'column column-2|column column-2|column column-2|column column-2|column column-2|column column-2',\n        '3|6|3': 'column column-3|column column-6|column column-3',\n        '2|8|2': 'column column-2|column column-8|column column-2',\n        '5|7': 'column column-5|column column-7',\n        '7|5': 'column column-7|column column-5',\n        '4|8': 'column column-4|column column-8',\n        '8|4': 'column column-8|column column-4',\n        '3|9': 'column column-3|column column-9',\n        '9|3': 'column column-9|column column-3',\n        '2|10': 'column column-2|column column-10',\n        '10|2': 'column column-10|column column-2',\n        '12': 'column column-12'\n      }\n    },\n    link: {\n      size: 30,\n      nofollow: false,\n      target: false\n    },\n    addbar: ['paragraph', 'image', 'embed', 'line', 'table', 'snippet', 'quote', 'code', 'grid', 'layer'],\n    // text, card\n    addbarAdd: [],\n    addbarHide: [],\n    format: ['p', 'h1', 'h2', 'h3', 'ul', 'ol'],\n    // h4, h5, h6,  dl, address, div (text)\n    outset: {\n      none: 'none',\n      left: 'outset-left',\n      both: 'outset-both',\n      right: 'outset-right'\n    },\n    align: {\n      left: 'align-left',\n      center: 'align-center',\n      right: 'align-right',\n      justify: 'align-justify'\n    },\n    valign: {\n      none: 'none',\n      top: 'valign-top',\n      middle: 'valign-middle',\n      bottom: 'valign-bottom'\n    },\n    shortcutsBase: {\n      'meta+z': '## shortcuts.meta-z ##',\n      'meta+shift+z': '## shortcuts.meta-shift-z ##',\n      'meta+a': '## shortcuts.meta-a ##',\n      'meta+shift+a': '## shortcuts.meta-shift-a ##',\n      'meta+click': '## shortcuts.meta-click ##'\n    },\n    shortcuts: {\n      'ctrl+shift+d, meta+shift+d': {\n        title: '## shortcuts.meta-shift-d ##',\n        name: 'meta+shift+d',\n        command: 'block.duplicate'\n      },\n      'ctrl+shift+up, meta+shift+up': {\n        title: '## shortcuts.meta-shift-up ##',\n        name: 'meta+shift+&uarr;',\n        command: 'block.moveUp'\n      },\n      'ctrl+shift+down, meta+shift+down': {\n        title: '## shortcuts.meta-shift-down ##',\n        name: 'meta+shift+&darr;',\n        command: 'block.moveDown'\n      },\n      'ctrl+shift+m, meta+shift+m': {\n        title: '## shortcuts.meta-shift-m ##',\n        name: 'meta+shift+m',\n        command: 'inline.removeFormat'\n      },\n      'ctrl+b, meta+b': {\n        title: '## shortcuts.meta-b ##',\n        name: 'meta+b',\n        command: 'inline.set',\n        params: {\n          tag: 'b'\n        }\n      },\n      'ctrl+i, meta+i': {\n        title: '## shortcuts.meta-i ##',\n        name: 'meta+i',\n        command: 'inline.set',\n        params: {\n          tag: 'i'\n        }\n      },\n      'ctrl+u, meta+u': {\n        title: '## shortcuts.meta-u ##',\n        name: 'meta+u',\n        command: 'inline.set',\n        params: {\n          tag: 'u'\n        }\n      },\n      'ctrl+h, meta+h': {\n        title: '## shortcuts.meta-h ##',\n        name: 'meta+h',\n        command: 'inline.set',\n        params: {\n          tag: 'sup'\n        }\n      },\n      'ctrl+l, meta+l': {\n        title: '## shortcuts.meta-l ##',\n        name: 'meta+l',\n        command: 'inline.set',\n        params: {\n          tag: 'sub'\n        }\n      },\n      'ctrl+alt+0, meta+alt+0': {\n        title: '## shortcuts.meta-alt-0 ##',\n        name: 'meta+alt+0',\n        command: 'block.format',\n        params: {\n          tag: 'p'\n        }\n      },\n      'ctrl+alt+1, meta+alt+1': {\n        title: '## shortcuts.meta-alt-1 ##',\n        name: 'meta+alt+1',\n        command: 'block.format',\n        params: {\n          tag: 'h1'\n        }\n      },\n      'ctrl+alt+2, meta+alt+2': {\n        title: '## shortcuts.meta-alt-2 ##',\n        name: 'meta+alt+2',\n        command: 'block.format',\n        params: {\n          tag: 'h2'\n        }\n      },\n      'ctrl+alt+3, meta+alt+3': {\n        title: '## shortcuts.meta-alt-3 ##',\n        name: 'meta+alt+3',\n        command: 'block.format',\n        params: {\n          tag: 'h3'\n        }\n      },\n      'ctrl+alt+4, meta+alt+4': {\n        title: '## shortcuts.meta-alt-4 ##',\n        name: 'meta+alt+4',\n        command: 'block.format',\n        params: {\n          tag: 'h4'\n        }\n      },\n      'ctrl+alt+5, meta+alt+5': {\n        title: '## shortcuts.meta-alt-5 ##',\n        name: 'meta+alt+5',\n        command: 'block.format',\n        params: {\n          tag: 'h5'\n        }\n      },\n      'ctrl+alt+6, meta+alt+6': {\n        title: '## shortcuts.meta-alt-6 ##',\n        name: 'meta+alt+6',\n        command: 'block.format',\n        params: {\n          tag: 'h6'\n        }\n      },\n      'ctrl+shift+7, meta+shift+7': {\n        title: '## shortcuts.meta-shift-7 ##',\n        name: 'meta+shift+7',\n        command: 'block.format',\n        params: {\n          tag: 'ol'\n        }\n      },\n      'ctrl+shift+8, meta+shift+8': {\n        title: '## shortcuts.meta-shift-8 ##',\n        name: 'meta+shift+8',\n        command: 'block.format',\n        params: {\n          tag: 'ul'\n        }\n      },\n      'ctrl+], meta+]': {\n        title: '## shortcuts.meta-indent ##',\n        name: 'meta+]',\n        command: 'list.indent'\n      },\n      'ctrl+[, meta+[': {\n        title: '## shortcuts.meta-outdent ##',\n        name: 'meta+[',\n        command: 'list.outdent'\n      },\n      'ctrl+k, meta+k': {\n        title: '## shortcuts.meta-k ##',\n        name: 'meta+k',\n        command: 'link.format'\n      }\n    },\n    // private\n    markerChar: \"\\uFEFF\",\n    tags: {\n      denied: ['font', 'html', 'head', 'link', 'title', 'body', 'meta', 'applet', 'marquee'],\n      incode: ['!DOCTYPE', '!doctype', 'html', 'head', 'link', 'title', 'body', 'meta', 'textarea', 'style'],\n      form: ['form', 'input', 'button', 'select', 'textarea', 'legend', 'fieldset'],\n      inline: ['a', 'svg', 'span', 'strong', 'strike', 'b', 'u', 'em', 'i', 'code', 'del', 'ins', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small', 'abbr'],\n      block: ['pre', 'hr', 'ul', 'ol', 'li', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'dl', 'dt', 'dd', 'div', 'table', 'tbody', 'thead', 'tfoot', 'tr', 'th', 'td', 'blockquote', 'output', 'figcaption', 'figure', 'address', 'main', 'section', 'header', 'footer', 'aside', 'article', 'iframe'],\n      parser: ['pre', 'hr', 'ul', 'ol', 'dl', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'div', 'table', 'address', 'blockquote', 'figure', 'main', 'section', 'header', 'footer', 'aside', 'article', 'iframe']\n    },\n    bsmodal: false,\n    regex: {\n      youtube: /https?:\\/\\/(?:[0-9A-Z-]+\\.)?(?:youtu\\.be\\/|youtube\\.com\\S*[^\\w-\\s])([\\w-]{11})(?=[^\\w-]|$)(?![?=&+%\\w.-]*(?:['\"][^<>]*>|<\\/a>))[?=&+%\\w.-]*/gi,\n      vimeo: /(http|https)?:\\/\\/(?:www.|player.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/(?:[^/]*)\\/videos\\/|album\\/(?:\\d+)\\/video\\/|video\\/|)(\\d+)(?:\\/[a-zA-Z0-9_-]+)?/gi,\n      imageurl: /((https?|www)[^\\s]+\\.)(jpe?g|png|gif)(\\?[^\\s-]+)?/gi,\n      url: /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/gi\n    },\n    addbarExtend: {},\n    addbarObj: {\n      paragraph: {\n        title: '## blocks.paragraph ##',\n        command: 'block.add'\n      },\n      image: {\n        title: '## blocks.image ##',\n        command: 'image.popup',\n        observer: 'image.observe'\n      },\n      embed: {\n        title: '## blocks.embed ##',\n        command: 'embed.popup',\n        observer: 'embed.observe'\n      },\n      line: {\n        title: '## blocks.line ##',\n        command: 'block.add',\n        observer: 'block.observe'\n      },\n      table: {\n        title: '## blocks.table ##',\n        command: 'table.add',\n        observer: 'table.observe'\n      },\n      snippet: {\n        title: '## blocks.snippet ##',\n        command: 'snippet.popup',\n        observer: 'snippet.observe'\n      },\n      quote: {\n        title: '## blocks.quote ##',\n        command: 'block.add',\n        observer: 'block.observe'\n      },\n      text: {\n        title: '## blocks.text ##',\n        command: 'block.add'\n      },\n      code: {\n        title: '## blocks.code ##',\n        command: 'block.add',\n        observer: 'block.observe'\n      },\n      grid: {\n        title: '## blocks.grid ##',\n        command: 'grid.popup',\n        observer: 'grid.observe'\n      },\n      layer: {\n        title: '## blocks.layer ##',\n        command: 'block.add',\n        observer: 'block.observe'\n      },\n      card: {\n        title: '## blocks.card ##',\n        command: 'block.add'\n      }\n    },\n    nested: [],\n    parser: {},\n    parserTags: [],\n    formatObj: {\n      p: {\n        title: '## blocks.paragraph ##',\n        type: 'paragraph',\n        shortcut: 'Ctrl+Alt+0'\n      },\n      div: {\n        title: '## blocks.text ##',\n        type: 'text'\n      },\n      h1: {\n        title: '<span style=\"font-size: 20px; font-weight: bold;\">## headings.h1 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+1'\n      },\n      h2: {\n        title: '<span style=\"font-size: 16px; font-weight: bold;\">## headings.h2 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+2'\n      },\n      h3: {\n        title: '<span style=\"font-weight: bold;\">## headings.h3 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+3'\n      },\n      h4: {\n        title: '<span style=\"font-weight: bold;\">## headings.h4 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+4'\n      },\n      h5: {\n        title: '<span style=\"font-weight: bold;\">## headings.h5 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+5'\n      },\n      h6: {\n        title: '<span style=\"font-weight: bold;\">## headings.h6 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+6'\n      },\n      ul: {\n        title: '&bull; ## list.unordered-list ##',\n        type: 'list',\n        shortcut: 'Ctrl+Shift+7'\n      },\n      ol: {\n        title: '1. ## list.ordered-list ##',\n        type: 'list',\n        shortcut: 'Ctrl+Shift+8'\n      },\n      dl: {\n        title: '## blocks.dlist ##',\n        type: 'dlist'\n      },\n      address: {\n        title: '<em>## blocks.address ##</em>',\n        type: 'address'\n      }\n    }\n  };\n  ArticleEditor.lang['en'] = {\n    \"accessibility\": {\n      \"help-label\": \"Rich text editor\"\n    },\n    \"editor\": {\n      \"title\": \"Article\",\n      \"multiple\": \"Multiple\"\n    },\n    \"placeholders\": {\n      \"figcaption\": \"Type caption (optional)\",\n      \"text\": \"Type something...\",\n      \"code\": \"Edit to add code...\",\n      \"layer\": \"Press enter to add a new text...\"\n    },\n    \"popup\": {\n      \"link\": \"Link\",\n      \"add\": \"Add\",\n      \"grid\": \"Grid\",\n      \"back\": \"Back\",\n      \"image\": \"Image\",\n      \"snippets\": \"Snippets\",\n      \"add-image\": \"Add Image\"\n    },\n    \"shortcuts\": {\n      \"meta-a\": \"Select text in the block\",\n      \"meta-shift-a\": \"Select all blocks\",\n      \"meta-click\": \"Select multiple blocks\",\n      \"meta-z\": \"Undo\",\n      \"meta-shift-z\": \"Redo\",\n      \"meta-shift-m\": \"Remove inline format\",\n      \"meta-b\": \"Bold\",\n      \"meta-i\": \"Italic\",\n      \"meta-u\": \"Underline\",\n      \"meta-h\": \"Superscript\",\n      \"meta-l\": \"Subscript\",\n      \"meta-k\": \"Link\",\n      \"meta-alt-0\": \"Normal text\",\n      \"meta-alt-1\": \"Heading 1\",\n      \"meta-alt-2\": \"Heading 2\",\n      \"meta-alt-3\": \"Heading 3\",\n      \"meta-alt-4\": \"Heading 4\",\n      \"meta-alt-5\": \"Heading 5\",\n      \"meta-alt-6\": \"Heading 6\",\n      \"meta-shift-7\": \"Ordered List\",\n      \"meta-shift-8\": \"Unordered List\",\n      \"meta-indent\": \"Indent\",\n      \"meta-outdent\": \"Outdent\",\n      \"meta-shift-backspace\": \"Delete block\",\n      \"meta-shift-d\": \"Duplicate block\",\n      \"meta-shift-up\": \"Move line up\",\n      \"meta-shift-down\": \"Move line down\"\n    },\n    \"headings\": {\n      \"h1\": \"Large Heading\",\n      \"h2\": \"Medium Heading\",\n      \"h3\": \"Small Heading\",\n      \"h4\": \"Heading 4\",\n      \"h5\": \"Heading 5\",\n      \"h6\": \"Heading 6\"\n    },\n    \"inline\": {\n      \"bold\": \"Bold\",\n      \"italic\": \"Italic\",\n      \"deleted\": \"Deleted\"\n    },\n    \"list\": {\n      \"unordered-list\": \"Unordered List\",\n      \"ordered-list\": \"Ordered List\",\n      \"indent\": \"Indent\",\n      \"outdent\": \"Outdent\"\n    },\n    \"link\": {\n      \"link\": \"Link\",\n      \"edit-link\": \"Edit link\",\n      \"unlink\": \"Unlink\",\n      \"link-in-new-tab\": \"Open link in new tab\",\n      \"save\": \"Save\",\n      \"insert\": \"Insert\",\n      \"cancel\": \"Cancel\",\n      \"text\": \"Text\",\n      \"url\": \"URL\"\n    },\n    \"table\": {\n      \"width\": \"Width\",\n      \"nowrap\": \"Nowrap\",\n      \"save\": \"Save\",\n      \"cancel\": \"Cancel\",\n      \"table-cell\": \"Table Cell\",\n      \"add-head\": \"Add head\",\n      \"remove-head\": \"Remove head\",\n      \"add-row-below\": \"Add row below\",\n      \"add-row-above\": \"Add row above\",\n      \"remove-row\": \"Remove row\",\n      \"add-column-after\": \"Add column after\",\n      \"add-column-before\": \"Add column before\",\n      \"remove-column\": \"Remove column\"\n    },\n    \"image\": {\n      \"or\": \"or\",\n      \"alt-text\": \"Alt Text\",\n      \"save\": \"Save\",\n      \"link\": \"Link\",\n      \"delete\": \"Delete\",\n      \"cancel\": \"Cancel\",\n      \"insert\": \"Insert\",\n      \"caption\": \"Caption\",\n      \"link-in-new-tab\": \"Open link in new tab\",\n      \"url-placeholder\": \"Paste url of image...\",\n      \"upload-new-placeholder\": \"Drag to upload a new image<br>or click to select\"\n    },\n    \"code\": {\n      \"code\": \"Code\",\n      \"insert\": \"Insert\",\n      \"save\": \"Save\",\n      \"cancel\": \"Cancel\"\n    },\n    \"embed\": {\n      \"embed\": \"Embed\",\n      \"caption\": \"Caption\",\n      \"insert\": \"Insert\",\n      \"save\": \"Save\",\n      \"cancel\": \"Cancel\",\n      \"description\": \"Paste any embed/html code or enter the url (vimeo or youtube video only)\",\n      \"responsive-video\": \"Responsive video\"\n    },\n    \"upload\": {\n      \"placeholder\": \"Drag to upload <br>or click to select\"\n    },\n    \"templates\": {\n      \"templates\": \"Templates\"\n    },\n    \"snippets\": {\n      \"snippets\": \"Snippets\"\n    },\n    \"form\": {\n      \"link\": \"Link\",\n      \"url\": \"Url\",\n      \"text\": \"Text\",\n      \"name\": \"Name\",\n      \"alt-text\": \"Alt Text\",\n      \"image\": \"Image\",\n      \"upload\": \"Upload\",\n      \"alignment\": \"Alignment\",\n      \"outset\": \"Outset\",\n      \"valign\": \"Valign\"\n    },\n    \"buttons\": {\n      \"mobile-view\": \"Mobile View\",\n      \"cancel\": \"Cancel\",\n      \"insert\": \"Insert\",\n      \"unlink\": \"Unlink\",\n      \"save\": \"Save\",\n      \"add\": \"Add\",\n      \"transform-to-text\": \"Transform to text\",\n      \"align\": \"Alignment\",\n      \"valign\": \"Valign\",\n      \"outset\": \"Outset\",\n      \"indent\": \"Indent\",\n      \"outdent\": \"Outdent\",\n      \"head\": \"Head\",\n      \"row\": \"Row\",\n      \"cell\": \"Cell\",\n      \"html\": \"HTML\",\n      \"templates\": \"Templates\",\n      \"shortcuts\": \"Keyboard Shortcuts\",\n      \"format\": \"Format\",\n      \"bold\": \"Bold\",\n      \"italic\": \"Italic\",\n      \"deleted\": \"Deleted\",\n      \"underline\": \"Underline\",\n      \"table\": \"Table\",\n      \"link\": \"Link\",\n      \"undo\": \"Undo\",\n      \"redo\": \"Redo\",\n      \"style\": \"Style\",\n      \"config\": \"Config\",\n      \"settings\": \"Settings\",\n      \"text\": \"Text\",\n      \"embed\": \"Embed\",\n      \"grid\": \"Grid\",\n      \"image\": \"Image\",\n      \"list\": \"List\",\n      \"delete\": \"Delete\",\n      \"duplicate\": \"Duplicate\",\n      \"sort\": \"Sort\",\n      \"edit\": \"Edit\",\n      \"inline\": \"Inline\"\n    },\n    \"blocks\": {\n      \"noneditable\": \"Noneditable\",\n      \"paragraph\": \"Paragraph\",\n      \"heading\": \"Heading\",\n      \"image\": \"Image\",\n      \"figcaption\": \"Figcaption\",\n      \"embed\": \"Embed\",\n      \"line\": \"Line\",\n      \"code\": \"Code\",\n      \"quote\": \"Quote\",\n      \"quoteitem\": \"Paragraph\",\n      \"snippet\": \"Snippet\",\n      \"column\": \"Column\",\n      \"grid\": \"Grid\",\n      \"list\": \"List\",\n      \"table\": \"Table\",\n      \"layer\": \"Layer\",\n      \"row\": \"Row\",\n      \"text\": \"Text\",\n      \"cell\": \"Cell\",\n      \"dlist\": \"Definition List\",\n      \"address\": \"Address\",\n      \"form\": \"Form\",\n      \"card\": \"Card\"\n    }\n  };\n\n  var App = function App($element, settings, uuid) {\n    // environment\n    var maps = ['keycodes', 'prefix', 'dom', 'ajax', '_repository', '_subscribe'];\n\n    for (var i = 0; i < maps.length; i++) {\n      this[maps[i]] = $ARX[maps[i]];\n    }\n\n    this.uuid = uuid;\n    this.$win = this.dom(window);\n    this.$doc = this.dom(document);\n    this.$body = this.dom('body');\n    this.$element = $element;\n    this.app = this; // initial\n\n    this.initialSettings = settings; // starter\n\n    this._initer = ['setting', 'lang'];\n    this._priority = ['container', 'editor', 'accessibility', 'state'];\n    this._plugins = []; // started\n\n    this.started = false; // start\n\n    this.start();\n  };\n\n  App.prototype = {\n    // start\n    start: function start(settings) {\n      if (!this.isTextarea()) return;\n      if (this.isStarted()) return;\n      if (settings) this.initialSettings = settings; // core\n\n      this._initCore();\n\n      this._plugins = this.setting.get('plugins'); // starting\n\n      this.broadcast('app.before.start'); // init\n\n      this._initModules();\n\n      this._initPlugins(); // start\n\n\n      this._startPriority();\n\n      this._startModules();\n\n      this._startPlugins();\n\n      this.started = true; // started\n\n      this.broadcast('app.start'); // call load methods\n\n      this._loadModulesAndPlugins();\n    },\n    isStarted: function isStarted() {\n      return this.started;\n    },\n    isTextarea: function isTextarea() {\n      return this.$element.get().tagName === 'TEXTAREA';\n    },\n    // stop\n    stop: function stop() {\n      if (this.isStopped()) return; // stopping\n\n      this.broadcast('app.before.stop');\n\n      this._stopPriority();\n\n      this._stopModules();\n\n      this._stopPlugins();\n\n      this.started = false; // stopped\n\n      this.broadcast('app.stop');\n    },\n    isStopped: function isStopped() {\n      return !this.started;\n    },\n    // textarea\n    // broadcast\n    broadcast: function broadcast(name, params) {\n      var event = params instanceof App.Event ? params : new App.Event(name, params);\n\n      if (typeof this._subscribe[name] !== 'undefined') {\n        var events = this._subscribe[name];\n\n        for (var i = 0; i < events.length; i++) {\n          var instance = this[events[i].module];\n\n          if (instance) {\n            events[i].func.call(instance, event);\n          }\n        }\n      } // callbacks\n\n\n      var callbacks = this.setting.has('subscribe') ? this.setting.get('subscribe') : {};\n\n      if (typeof callbacks[name] === 'function') {\n        callbacks[name].call(this, event);\n      }\n\n      return event;\n    },\n    broadcastParams: function broadcastParams(name, params) {\n      var event = this.broadcast(name, params);\n      return event.getAll();\n    },\n    broadcastHtml: function broadcastHtml(name, html) {\n      var event = this.broadcast(name, {\n        html: html\n      });\n      return event.get('html');\n    },\n    // create\n    create: function create(name) {\n      if (typeof this._repository[name] === 'undefined') {\n        $ARX.error('The class \"' + name + '\" does not exist.');\n      }\n\n      var args = [].slice.call(arguments, 1);\n      var instance = new this._repository[name].proto(); // extend\n\n      instance._name = name;\n      instance.app = this;\n      var maps = ['uuid', 'prefix', 'dom', 'ajax'];\n\n      for (var i = 0; i < maps.length; i++) {\n        instance[maps[i]] = this[maps[i]];\n      } // lang & settings\n\n\n      if (this.lang) instance.lang = this.lang;\n      if (this.opts) instance.opts = this.opts; // init\n\n      var result;\n\n      if (instance.init) {\n        result = instance.init.apply(instance, args);\n      }\n\n      return result ? result : instance;\n    },\n    // api\n    api: function api(name) {\n      var args = [].slice.call(arguments, 1);\n      var namespaces = name.split(\".\");\n      var func = namespaces.pop();\n      var context = this;\n\n      for (var i = 0; i < namespaces.length; i++) {\n        context = context[namespaces[i]];\n      }\n\n      if (context && typeof context[func] === 'function') {\n        return context[func].apply(context, args);\n      }\n    },\n    // init\n    _initCore: function _initCore() {\n      for (var i = 0; i < this._initer.length; i++) {\n        this[this._initer[i]] = this.create(this._initer[i]);\n      } // opts\n\n\n      if (this.setting) {\n        this.opts = this.setting.dump();\n      }\n    },\n    _initModules: function _initModules() {\n      for (var key in this._repository) {\n        if (this._repository[key].type === 'module' && this._initer.indexOf(key) === -1) {\n          this[key] = this.create(key);\n        }\n      }\n    },\n    _initPlugins: function _initPlugins() {\n      var plugins = this.setting.get('plugins');\n\n      for (var key in this._repository) {\n        if (this._repository[key].type === 'plugin' && plugins.indexOf(key) !== -1) {\n          this[key] = this.create(key);\n        }\n      }\n    },\n    // start\n    _startPriority: function _startPriority() {\n      for (var i = 0; i < this._priority.length; i++) {\n        this._call(this[this._priority[i]], 'start');\n      }\n    },\n    _startModules: function _startModules() {\n      this._iterate('module', 'start');\n    },\n    _startPlugins: function _startPlugins() {\n      this._iterate('plugin', 'start');\n    },\n    // stop\n    _stopPriority: function _stopPriority() {\n      var priority = this._priority.slice().reverse();\n\n      for (var i = 0; i < priority.length; i++) {\n        this._call(this[priority[i]], 'stop');\n      }\n    },\n    _stopModules: function _stopModules() {\n      this._iterate('module', 'stop');\n    },\n    _stopPlugins: function _stopPlugins() {\n      this._iterate('plugin', 'stop');\n    },\n    // load\n    _loadModulesAndPlugins: function _loadModulesAndPlugins() {\n      this._iterate('module', 'load');\n\n      this._iterate('plugin', 'load');\n    },\n    // iterate\n    _iterate: function _iterate(type, method) {\n      for (var key in this._repository) {\n        var isIn = type === 'module' ? method === 'load' || this._priority.indexOf(key) === -1 : this._plugins.indexOf(key) !== -1;\n\n        if (this._repository[key].type === type && isIn) {\n          this._call(this[key], method);\n        }\n      }\n    },\n    // call\n    _call: function _call(instance, method) {\n      if (typeof instance[method] === 'function') {\n        instance[method].apply(instance);\n      }\n    }\n  };\n\n  App.Event = function (name, params) {\n    // local\n    this.name = name;\n    this.params = typeof params === 'undefined' ? {} : params;\n    this.stopped = false;\n  };\n\n  App.Event.prototype = {\n    is: function is(name) {\n      if (Array.isArray(name)) {\n        for (var i = 0; i < name.length; i++) {\n          if (this.params[name[i]]) {\n            return true;\n          }\n        }\n      } else {\n        return this.get(name);\n      }\n    },\n    has: function has(name) {\n      return typeof this.params[name] !== 'undefined';\n    },\n    getAll: function getAll() {\n      return this.params;\n    },\n    get: function get(name) {\n      return this.params[name];\n    },\n    set: function set(name, value) {\n      this.params[name] = value;\n    },\n    stop: function stop() {\n      this.stopped = true;\n    },\n    isStopped: function isStopped() {\n      return this.stopped;\n    }\n  };\n  ArticleEditor.add('mixin', 'block', {\n    defaults: {\n      id: {\n        getter: 'getId',\n        setter: 'setId'\n      },\n      html: {\n        getter: 'getHtml',\n        setter: 'setHtml'\n      },\n      align: {\n        getter: 'getAlign',\n        setter: 'setAlign'\n      },\n      valign: {\n        getter: 'getValign',\n        setter: 'setValign'\n      },\n      outset: {\n        getter: 'getOutset',\n        setter: 'setOutset'\n      }\n    },\n    init: function init(source) {\n      this.$block = source ? this.dom(source) : this.create(); // build & render\n\n      this._build();\n\n      this._buildData();\n\n      this._render();\n    },\n    // is\n    isBlock: function isBlock() {\n      return true;\n    },\n    isAllowedButton: function isAllowedButton(name, obj) {\n      // type\n      var type = this.getType(); // hidden\n\n      if (typeof this.opts.buttons.hidden[name] !== 'undefined') {\n        var val = this.opts.buttons.hidden[name];\n\n        if (val === true) {\n          return false;\n        } else if (Array.isArray(val) && val.indexOf(type) !== -1) {\n          return false;\n        }\n      } // all\n\n\n      if (typeof obj.blocks === 'undefined') {\n        return true;\n      }\n\n      var blocks = obj.blocks; // except\n\n      if (blocks.except && blocks.except.indexOf(type) !== -1) {\n        return false;\n      } // array of elements\n\n\n      if (Array.isArray(blocks.types) && blocks.types.indexOf(type) !== -1) {\n        return true;\n      }\n\n      if (blocks.all) {\n        // editable\n        if (blocks.all === true || blocks.all === 'all') {\n          return true;\n        } else if (blocks.all === 'editable' && this.isEditable()) {\n          return true;\n        } else if (blocks.all === 'first-level' && this.isFirstLevel()) {\n          return true;\n        } else if (blocks.all === 'noneditable' && !this.isEditable()) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    isFirstLevel: function isFirstLevel() {\n      return this.$block.attr('data-' + this.prefix + '-first-level');\n    },\n    isEditable: function isEditable() {\n      return typeof this.editable !== 'undefined' && this.editable === true;\n    },\n    isInlineBlock: function isInlineBlock() {\n      return typeof this.inline !== 'undefined';\n    },\n    isAllSelected: function isAllSelected() {\n      if (this.isEditable()) {\n        return this.app.selection.isAll(this.$block);\n      } else {\n        return true;\n      }\n    },\n    isEmpty: function isEmpty() {\n      if (this.isEmptiable()) {\n        if (this.$block.hasClass(this.prefix + '-empty-layer')) {\n          return true;\n        } else {\n          var html = this.$block.html();\n          html = html.trim();\n          html = this._cleanEmpty(html);\n          return html === '';\n        }\n      } else if (this.isEditable()) {\n        return this._isEmpty();\n      }\n    },\n    isEmptiable: function isEmptiable() {\n      return typeof this.emptiable !== 'undefined';\n    },\n    isCaretStart: function isCaretStart() {\n      if (this.getType() === 'code') {\n        return this.app.caret.is(this.$block, 'start', false, false);\n      } else if (this.isEditable()) {\n        return this.app.caret.is(this.$block, 'start');\n      }\n\n      return true;\n    },\n    isCaretEnd: function isCaretEnd() {\n      if (this.getType() === 'code') {\n        return this.app.caret.is(this.$block, 'end', false, false);\n      } else if (this.isEditable()) {\n        return this.app.caret.is(this.$block, 'end');\n      }\n\n      return true;\n    },\n    // get\n    getData: function getData(name) {\n      var data = {};\n\n      for (var key in this.data) {\n        data[key] = this[this.data[key].getter].apply(this);\n      }\n\n      return name ? data[name] : data;\n    },\n    getType: function getType() {\n      return this.type;\n    },\n    getTag: function getTag() {\n      return this.$block ? this.$block.get().tagName.toLowerCase() : false;\n    },\n    getTitle: function getTitle() {\n      var type = this.getType();\n      var titles = this.lang.get('blocks');\n      var title = this.$block.attr('data-title');\n      return typeof titles[type] !== 'undefined' ? titles[type] : title;\n    },\n    getOffset: function getOffset() {\n      var offset = this.app.editor.getFrame().offset();\n      var elOffset = this.$block.offset();\n      return {\n        top: offset.top + elOffset.top,\n        left: offset.left + elOffset.left\n      };\n    },\n    getBlock: function getBlock() {\n      return this.$block;\n    },\n    getHtml: function getHtml() {\n      return this.$block.html();\n    },\n    getPlainText: function getPlainText() {\n      var html = this.$block.html();\n      return this.app.content.getTextFromHtml(html, {\n        nl: true\n      });\n    },\n    getOuterHtml: function getOuterHtml() {\n      return this.$block.get().outerHTML;\n    },\n    getParents: function getParents(types) {\n      var selector = '[' + this.opts.names.datatype + '=' + types.join('],[' + this.opts.names.datatype + '=') + ']';\n      return this.$block.parents(selector);\n    },\n    getParent: function getParent(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.parent().closest('[data-' + this.prefix + '-type' + type + ']');\n\n      if ($el.length !== 0) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getNext: function getNext(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.nextElement();\n\n      if ($el.length !== 0 && $el.is('[data-' + this.prefix + '-type' + type + ']')) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getPrev: function getPrev(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.prevElement();\n\n      if ($el.length !== 0 && $el.is('[data-' + this.prefix + '-type' + type + ']')) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getChildFirst: function getChildFirst(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.find('[data-' + this.prefix + '-type' + type + ']').first();\n\n      if ($el.length !== 0) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getChildLast: function getChildLast(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.find('[data-' + this.prefix + '-type' + type + ']').last();\n\n      if ($el.length !== 0) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getId: function getId() {\n      return this.$block.attr('id');\n    },\n    getAlign: function getAlign() {\n      var obj = this.opts.align;\n      if (!obj) return false;\n      var value = 'left';\n\n      for (var key in obj) {\n        if (this.$block.hasClass(obj[key])) {\n          value = key;\n        }\n      }\n\n      return value;\n    },\n    getValign: function getValign() {\n      var obj = this.opts.valign;\n      if (!obj) return false;\n      var value = 'none';\n\n      for (var key in obj) {\n        if (this.$block.hasClass(obj[key])) {\n          value = key;\n        }\n      }\n\n      return value;\n    },\n    getOutset: function getOutset() {\n      var obj = this.opts.outset;\n      if (!obj) return false;\n      var value = 'none';\n\n      for (var key in obj) {\n        if (this.$block.hasClass(obj[key])) {\n          value = key;\n        }\n      }\n\n      return value;\n    },\n    getCaption: function getCaption() {\n      var $caption = this.$block.find('figcaption');\n      return $caption.length !== 0 ? $caption.html() : '';\n    },\n    // set\n    setData: function setData(data) {\n      for (var key in data) {\n        if (!this.data[key]) continue;\n        this[this.data[key].setter].call(this, data[key]);\n      }\n    },\n    setEmpty: function setEmpty() {\n      this.$block.html('');\n\n      if (this.isEmptiable()) {\n        this.app.content.addEmptyButton(this.$block);\n      }\n    },\n    setSelectAll: function setSelectAll() {\n      if (this.isEditable()) {\n        this.app.selection.select(this.$block);\n      }\n    },\n    setHtml: function setHtml(html) {\n      this.$block.html(html);\n\n      if (html !== '') {\n        this._buildInstancesInside(this.$block);\n      }\n    },\n    setId: function setId(value) {\n      if (value === '') {\n        this.$block.removeAttr('id');\n      } else {\n        this.$block.attr('id', value);\n      }\n    },\n    setAlign: function setAlign(value) {\n      this._removeObjClasses(this.opts.align);\n\n      this.$block.addClass(this.opts.align[value]);\n    },\n    setValign: function setValign(value) {\n      this._removeObjClasses(this.opts.valign);\n\n      if (value !== 'none') {\n        this.$block.addClass(this.opts.valign[value]);\n      }\n    },\n    setOutset: function setOutset(value) {\n      this._removeObjClasses(this.opts.outset);\n\n      if (value !== 'none') {\n        this.$block.addClass(this.opts.outset[value]);\n      } // ui\n\n\n      this.app.control.updatePosition();\n    },\n    setCaption: function setCaption(value) {\n      if (value === '') {\n        this.$block.find('figcaption').remove();\n      } else {\n        var $caption = this.$block.find('figcaption');\n\n        if ($caption.length === 0) {\n          $caption = this.dom('<figcaption>');\n          $caption.attr('data-placeholder', this.lang.get('placeholders.figcaption'));\n          this.$block.append($caption); // create\n\n          this.app.create('block.figcaption', $caption);\n        }\n\n        $caption.html(value);\n      }\n    },\n    // has\n    hasClass: function hasClass(value) {\n      value = typeof value === 'string' ? [value] : value;\n\n      for (var i = 0; i < value.length; i++) {\n        if (this.$block.hasClass(value[i])) {\n          return value[i];\n        }\n      }\n\n      return false;\n    },\n    // remove\n    remove: function remove() {\n      var parent = this.getParent();\n      this.$block.remove(); // emptiable\n\n      if (parent && parent.isEmptiable() && parent.isEmpty()) {\n        parent.setEmpty();\n      }\n    },\n    // duplicate\n    duplicate: function duplicate(empty) {\n      var type = this.getType();\n      var $clone = this.$block.clone();\n      $clone.removeClass(this.prefix + '-block-focus ' + this.prefix + '-block-multiple-hover');\n\n      if (empty) {\n        $clone.html('');\n      }\n\n      return this.app.create('block.' + type, $clone);\n    },\n    duplicateEmpty: function duplicateEmpty() {\n      return this.duplicate(true);\n    },\n    // insert\n    insertEmpty: function insertEmpty(params) {\n      params = params || {};\n      params.instance = this.app.block.create();\n      return this.insert(params);\n    },\n    insert: function insert(params) {\n      var defs = {\n        instance: false,\n        position: false,\n        caret: false\n      }; // params\n\n      var p = $ARX.extend({}, defs, params);\n      var $block = p.instance.getBlock(); // delete selection\n\n      if (this.isEditable()) {\n        this.app.selection.deleteContents();\n      } // list to list\n\n\n      if (p.instance.getType() === 'list' && this.getType() === 'list') {\n        this.app.insertion.insertListToList($block, this.$block, p.caret);\n      } else {\n        // variable to variable\n        if (p.instance.isInlineBlock() && this.isInlineBlock()) {\n          this.$block.after($block);\n          this.$block.remove();\n        } // like variable\n        else if (p.instance.isInlineBlock() && this.isEditable()) {\n            this.app.insertion.insertNode(p.instance.getBlock(), 'end', true);\n          } // editable\n          else if (this.isEditable() && this.getType() !== 'card') {\n              // detect position\n              p.position = this.app.insertion.detectPosition(this.$block, p.position); // insert\n\n              if (p.position === 'split') {\n                this.app.element.split(this.$block).before($block);\n              } else {\n                this.$block[p.position]($block); // remove\n\n                if (this.isEmpty()) {\n                  this.$block.remove();\n                }\n              }\n            } // non editable\n            else {\n                p.position = p.position || 'after';\n                this.$block[p.position]($block);\n              } // set caret\n\n\n        if (p.caret) {\n          this.app.block.set(p.instance, p.caret);\n        } // rebuild\n\n\n        this.app.editor.build();\n        this.app.toolbar.observe(); // broadcast\n\n        this.app.broadcast('block.add', {\n          instance: p.instance\n        });\n        return p.instance;\n      }\n    },\n    // append\n    appendNext: function appendNext() {\n      var next = this.getNext(); // next empty\n\n      if (next.isEmpty()) {\n        next.remove();\n        return;\n      } // current empty\n      else if (this.isEmpty()) {\n          this.remove();\n          this.app.block.set(next, 'start');\n          return;\n        } // not empty\n\n\n      var html = next.getHtml();\n      var type = this.getType();\n      var nextType = next.getType();\n      var insert = true;\n      var remove = true; // code\n\n      if (type === 'code' && nextType !== 'code') {\n        html = next.getPlainText();\n      } // next type\n\n\n      if (nextType === 'dlist') {\n        if (type === 'dlist') {\n          // append as nodes\n          var nodes = next.getBlock().children();\n          this.$block.append(nodes);\n          insert = false;\n        } else {\n          // insert with br\n          html = next.getPlainText(true);\n        }\n      } else if (nextType === 'list') {\n        if (type === 'list') {\n          var $items = next.getBlock().children();\n          this.$block.append($items);\n          insert = false;\n          remove = true;\n        } else {\n          html = this._appendListHtml(next.getBlock(), html);\n          remove = next.isEmpty();\n        }\n      } // append\n\n\n      if (insert) {\n        // set caret after inline\n        var inline = this.app.selection.getTopInline();\n\n        if (inline) {\n          this.app.caret.set(inline, 'after');\n        } // insert\n\n\n        this.app.insertion.insertHtml(html, 'start');\n\n        this._buildInstancesInside(this.$block);\n      } // remove\n\n\n      if (remove) {\n        next.remove();\n      }\n    },\n    appendToPrev: function appendToPrev() {\n      var prev = this.getPrev(); // current empty\n\n      if (this.isEmpty()) {\n        this.remove();\n        this.app.block.set(prev, 'end');\n        return;\n      } // prev empty\n      else if (prev.isEmpty()) {\n          prev.remove();\n          this.app.control.updatePosition();\n          return;\n        } // not empty\n\n\n      var prevType = prev.getType();\n      var html = this.getHtml();\n      var type = this.getType();\n      var insert = true;\n      var remove = true; // code\n\n      if (type !== 'code' && prevType === 'code') {\n        html = this.getPlainText();\n      } // current type\n\n\n      if (type === 'dlist') {\n        if (prevType === 'dlist') {\n          // append as nodes\n          var nodes = this.getBlock().children();\n          this.app.block.set(prev, 'end');\n          prev.getBlock().append(nodes);\n          insert = false;\n        } else {\n          // insert with br\n          html = this.getPlainText(true);\n        }\n      } else if (type === 'list') {\n        if (prevType === 'list') {\n          var $items = this.getBlock().children();\n          this.app.block.set(prev, 'end');\n          prev.getBlock().append($items);\n          insert = false;\n          remove = true;\n        } else {\n          html = this._appendListHtml(this.getBlock(), html);\n          remove = this.isEmpty();\n        }\n      } // append\n\n\n      if (insert) {\n        // set\n        this.app.block.set(prev, 'end'); // set caret after inline\n\n        var inline = this.app.selection.getTopInline();\n\n        if (inline) {\n          this.app.caret.set(inline, 'after');\n        } // insert\n\n\n        this.app.insertion.insertHtml(html, 'start');\n\n        this._buildInstancesInside(prev.getBlock());\n      } // remove\n\n\n      if (remove) {\n        this.remove();\n      }\n    },\n    append: function append(instance, set) {\n      if (this.isEmptiable() && this.isEmpty()) {\n        this.$block.html('');\n        this.$block.removeClass(this.prefix + '-empty-layer');\n      }\n\n      this.$block.append(instance.getBlock());\n\n      if (set !== false) {\n        this.app.block.set(instance);\n      } // broadcast\n\n\n      this.app.broadcast('block.add', {\n        instance: instance\n      });\n    },\n    // move\n    moveUp: function moveUp() {\n      var target = this.getPrev();\n      if (!target) return;\n\n      this._move(target, 'before');\n    },\n    moveDown: function moveDown(direction) {\n      var target = this.getNext();\n      if (!target) return;\n\n      this._move(target, 'after');\n    },\n    // private\n    _appendListHtml: function _appendListHtml($target, html) {\n      var $item = $target.find('li').first();\n      html = $item.html().trim();\n      html = html.replace(/<\\/li>/gi, '</li><br>');\n      html = html.replace(/<(ul|ol)/gi, '<br><$1');\n      html = this.app.content.removeTags(html, ['ul', 'ol', 'li']);\n      html = html.trim();\n      html = html.replace(/<br\\s?\\/?>$/gi, '');\n      $item.remove();\n      return html;\n    },\n    _move: function _move(target, func) {\n      // save selection\n      if (this.isEditable()) this.app.selection.save(this.$block); // move\n\n      var $targetBlock = target.getBlock();\n      $targetBlock[func](this.$block, true); // set force\n\n      this.app.block.set(this.$block, false, true); // restore selection\n\n      if (this.isEditable()) this.app.selection.restore(this.$block);\n    },\n    _build: function _build() {\n      // build empty\n      if (this.isEmptiable() && this.isEmpty()) {\n        this.app.content.addEmptyButton(this.$block);\n      } // build\n\n\n      if (this.build) {\n        this.build();\n      } // instances inside\n\n\n      this._buildInstancesInside(this.$block);\n    },\n    _buildData: function _buildData() {\n      if (!this.data) this.data = {};\n      this.data = $ARX.extend({}, true, this.defaults, this.data);\n    },\n    _buildInstancesInside: function _buildInstancesInside($block) {\n      $block.find('[data-' + this.prefix + '-type]').each(this._buildInstanceInside.bind(this));\n    },\n    _buildInstanceInside: function _buildInstanceInside($node) {\n      var instance = $node.dataget('instance');\n\n      if (!instance) {\n        var type = $node.attr('data-' + this.prefix + '-type');\n        this.app.create('block.' + type, $node);\n      }\n    },\n    _buildItems: function _buildItems(selector, type) {\n      var $items = this.$block.find(selector);\n\n      if ($items.length !== 0) {\n        $items.each(function ($node) {\n          this.app.create('block.' + type, $node);\n        }.bind(this));\n      }\n    },\n    _buildCaption: function _buildCaption() {\n      if (this.getTag() !== 'figure') return;\n      this.$block.find('figcaption').attr('data-placeholder', this.lang.get('placeholders.figcaption'));\n    },\n    _isEmpty: function _isEmpty() {\n      var html = this.$block.text();\n      html = this._cleanEmpty(html);\n      return html === '';\n    },\n    _getNameByTag: function _getNameByTag() {\n      var tag = this.getTag();\n      var name = this.app.utils.capitalize(tag);\n      return name;\n    },\n    _render: function _render() {\n      this._renderEdit();\n\n      this._renderDraggable();\n\n      this._renderEditable();\n    },\n    _renderDraggable: function _renderDraggable() {\n      if (typeof this.draggable !== 'undefined' && this.draggable === false) {\n        this.$block.on('dragstart', function (e) {\n          e.preventDefault();\n          return false;\n        });\n        this.$block.find('img').on('dragstart', function (e) {\n          e.preventDefault();\n          return false;\n        });\n      }\n    },\n    _renderEditable: function _renderEditable() {\n      if (this.isEditable()) {\n        this.$block.attr('contenteditable', true);\n      } else if (typeof this.editable !== 'undefined' && this.editable === false) {\n        this.$block.attr('contenteditable', false);\n      }\n\n      if (this.isEditable() && !this.opts.editor.grammarly) this.$block.attr('data-gramm_editor', false);\n    },\n    _renderEdit: function _renderEdit() {\n      this.$block.dataset('instance', this);\n      this.$block.attr('data-' + this.prefix + '-type', this.getType());\n    },\n    _cleanEmpty: function _cleanEmpty(html) {\n      html = this.app.utils.removeInvisibleChars(html);\n      html = html.search(/^<br\\s?\\/?>$/) !== -1 ? '' : html;\n      html = html.replace(/\\n/g, '');\n      return html;\n    },\n    _removeObjClasses: function _removeObjClasses(obj) {\n      var classes = this._buildObjClasses(obj);\n\n      this.$block.removeClass(classes.join(' '));\n      this.app.element.removeEmptyAttrs(this.$block, ['class']);\n    },\n    _buildObjClasses: function _buildObjClasses(obj) {\n      var classes = [];\n\n      for (var key in obj) {\n        if (obj[key]) {\n          classes.push(obj[key]);\n        }\n      }\n\n      return classes;\n    }\n  });\n  ArticleEditor.add('mixin', 'tool', {\n    init: function init(name, obj, stack, data, instance) {\n      this.name = name;\n      this.setter = stack.setter;\n      this.stack = stack;\n      this.data = data;\n      this.instance = instance;\n      this.obj = this._observe(obj);\n\n      if (this.obj) {\n        this._build();\n      }\n    },\n    getElement: function getElement() {\n      return this.$tool;\n    },\n    getInput: function getInput() {\n      return this.$input;\n    },\n    getValue: function getValue() {\n      var value = this.$input.val();\n      return value.trim();\n    },\n    setValue: function setValue(value) {\n      this.$input.val(value);\n    },\n    setFocus: function setFocus() {\n      this.$input.focus();\n    },\n    trigger: function trigger(value) {\n      this.setValue(value);\n\n      if (this.setter) {\n        this.app.api(this.setter, this.stack);\n      }\n    },\n    // private\n    _build: function _build() {\n      this._buildTool();\n\n      this._buildLabel();\n\n      this._buildInputElement();\n\n      this._buildInput();\n\n      this._buildEvent(); // props\n\n\n      if (this._has('placeholder')) this.$input.attr('placeholder', this.lang.parse(this.obj.placeholder));\n      if (this._has('width')) this.$input.css('width', this.obj.width);\n      if (this._has('classname')) this.$input.addClass(this.obj.classname);\n    },\n    _buildInputElement: function _buildInputElement() {\n      this.$input = this.dom('<' + this._getInputParam('tag') + '>').addClass(this.prefix + this._getInputParam('classname'));\n      this.$input.attr({\n        'name': this.name,\n        'type': this._getInputParam('type'),\n        'data-type': this.type\n      });\n      this.$input.dataset('instance', this);\n    },\n    _buildInput: function _buildInput() {\n      return;\n    },\n    _buildEvent: function _buildEvent() {\n      var types = ['segment'];\n\n      if (types.indexOf(this.type) === -1 && this.setter) {\n        var events = this.type === 'checkbox' || this.type === 'select' ? 'change' : 'keydown blur';\n        this.$input.on(events, this._catchSetter.bind(this));\n      }\n    },\n    _buildTool: function _buildTool() {\n      this.$tool = this.dom('<div>').addClass(this.prefix + '-form-item').dataset('instance', this);\n    },\n    _buildLabel: function _buildLabel() {\n      if (this.type !== 'checkbox' && this._has('label')) {\n        this.$label = this.dom('<label>').addClass(this.prefix + '-form-label').html(this.lang.parse(this.obj.label));\n        this.$tool.append(this.$label);\n      }\n    },\n    _getInputParam: function _getInputParam(name) {\n      return this.input && typeof this.input[name] !== 'undefined' ? this.input[name] : '';\n    },\n    _get: function _get(name) {\n      return this.obj[name];\n    },\n    _has: function _has(name) {\n      return this.obj.hasOwnProperty(name);\n    },\n    _observe: function _observe(obj) {\n      if (obj.hasOwnProperty('observer')) {\n        obj = this.app.api(obj.observer, obj, this.name);\n      }\n\n      return obj;\n    },\n    _catchSetter: function _catchSetter(e) {\n      if (e.type === 'keydown' && e.which !== 13) return;\n      if (e.type === 'keydown') e.preventDefault(); // call setter\n\n      this.app.api(this.setter, this.stack);\n    }\n  });\n  ArticleEditor.add('module', 'lang', {\n    init: function init() {\n      this.langKey = this.app.setting.get('editor.lang');\n      this.vars = this._build();\n    },\n    get: function get(name) {\n      var value = this._get(name, this.vars);\n\n      if (typeof value === 'undefined' && this.langKey !== 'en') {\n        value = this._get(name, $ARX.lang['en']);\n      }\n\n      return typeof value === 'undefined' ? '' : value;\n    },\n    parse: function parse(str) {\n      if (typeof str !== 'string') return str;\n      var matches = str.match(/## (.*?) ##/g);\n\n      if (matches) {\n        for (var i = 0; i < matches.length; i++) {\n          var key = matches[i].replace(/^##\\s/g, '').replace(/\\s##$/g, '');\n          str = str.replace(matches[i], this.get(key));\n        }\n      }\n\n      return str;\n    },\n    // private\n    _get: function _get(name, vars) {\n      var value;\n      var arr = name.split('.');\n      if (arr.length === 1) value = vars[name];else value = typeof vars[arr[0]] !== 'undefined' ? vars[arr[0]][arr[1]] : undefined;\n      return value;\n    },\n    _build: function _build() {\n      var vars = $ARX.lang['en'];\n\n      if (this.langKey !== 'en') {\n        vars = $ARX.lang[this.langKey] !== 'undefined' ? $ARX.lang[this.langKey] : vars;\n      }\n\n      return vars;\n    }\n  });\n  ArticleEditor.add('module', 'setting', {\n    init: function init() {\n      this.opts = this._build();\n    },\n    dump: function dump() {\n      return this.opts;\n    },\n    has: function has(name) {\n      var value;\n      var arr = name.split('.');\n      if (arr.length === 1) value = typeof this.opts[name] !== 'undefined';else value = typeof this.opts[arr[0]] !== 'undefined' && typeof this.opts[arr[1]] !== 'undefined';\n      return value;\n    },\n    set: function set(section, name, value) {\n      if (typeof this.opts[section] === 'undefined') this.opts[section] = {};\n      if (typeof value === 'undefined') this.opts[section] = name;else this.opts[section][name] = value;\n    },\n    get: function get(name) {\n      var value;\n      var arr = name.split('.');\n      if (arr.length === 1) value = this.opts[name];else value = typeof this.opts[arr[0]] !== 'undefined' ? this.opts[arr[0]][arr[1]] : undefined;\n      return value;\n    },\n    // private\n    _build: function _build() {\n      var opts = $ARX.extend(true, {}, $ARX.opts, this.app.initialSettings);\n      opts = $ARX.extend(true, opts, $ARX.settings);\n      return opts;\n    }\n  });\n  ArticleEditor.add('module', 'container', {\n    init: function init() {\n      this.containers = {\n        main: ['bars', 'editor', 'source', 'statusbar'],\n        bars: ['pathbar', 'toolbar']\n      };\n    },\n    start: function start() {\n      this._buildMain();\n\n      this._buildContainers(this.$main, this.containers.main);\n\n      this._buildBSModal();\n    },\n    stop: function stop() {\n      this.$main.remove();\n    },\n    get: function get(name) {\n      return this['$' + name];\n    },\n    // private\n    _buildMain: function _buildMain() {\n      this.$main = this.dom('<div>');\n      this.$main.addClass(this.prefix + '-container ' + this.prefix + '-container-' + this.uuid);\n      this.$main.attr(this.prefix + '-uuid', this.uuid); // place\n\n      this.app.$element.after(this.$main);\n    },\n    _buildContainers: function _buildContainers($target, containers) {\n      for (var i = 0; i < containers.length; i++) {\n        var name = containers[i];\n        var elName = '$' + name; // create\n\n        this[elName] = this._createContainer(name); // nested\n\n        if (typeof this.containers[name] !== 'undefined') {\n          this._buildContainers(this[elName], this.containers[name]);\n        } // append\n\n\n        $target.append(this[elName]);\n      }\n    },\n    _buildBSModal: function _buildBSModal() {\n      this.opts.bsmodal = this.$main.closest('.modal-dialog').length !== 0;\n    },\n    _createContainer: function _createContainer(name) {\n      return this.dom('<div>').addClass(this.prefix + '-' + name + '-container');\n    }\n  });\n  ArticleEditor.add('module', 'editor', {\n    init: function init() {\n      this.mobileMode = false;\n    },\n    start: function start() {\n      this._buildFrame();\n\n      this._buildBlurClass();\n\n      this._buildOptions();\n\n      this._buildParserTags();\n\n      this._buildStartHtml();\n\n      this._buildLayout();\n\n      this._buildContent();\n    },\n    stop: function stop() {\n      this.app.$element.show();\n    },\n    load: function load() {\n      this._setFocusOnStart();\n    },\n    build: function build() {\n      this.app.embed.build();\n      this.app.blocks.build();\n      this.app.image.observeStates();\n    },\n    // insert\n    insertContent: function insertContent(params) {\n      this.app.insertion.insertContent(params);\n    },\n    // set\n    setContent: function setContent(params) {\n      this.app.insertion.setContent(params);\n    },\n    setEmpty: function setEmpty() {\n      this.app.insertion.setContent({\n        html: ''\n      });\n    },\n    setFocus: function setFocus(caret) {\n      if (caret) {\n        this._setFocusCaret(caret);\n      } else {\n        this._setFocusEvent();\n      }\n    },\n    setBlur: function setBlur() {\n      if (!this.isFocus()) return;\n\n      this._unsetFocusContainerClass();\n\n      this._enableToolbarButtons();\n\n      this.app.block.unset();\n      this.app.blocks.unset();\n      this.app.selection.removeAllRanges(); // ui\n\n      if (!this.isMobileView()) {\n        this.app.path.build();\n        this.app.toolbar.build();\n        this.app.control.close();\n      }\n\n      this.app.popup.close(false); // broadcast\n\n      this.app.broadcast('editor.blur');\n    },\n    // select\n    selectAll: function selectAll(type) {\n      if (this.isAllSelected()) return;\n\n      this._setSelectAllClass();\n\n      this.app.blocks.unset();\n      this.app.blocks.setFirstLevel();\n      this.app.selection.removeAllRanges(); // ui\n\n      this.app.path.build();\n      this.app.toolbar.build();\n      this.app.control.close();\n    },\n    // unselect\n    unselectAll: function unselectAll() {\n      if (!this.isAllSelected()) return;\n      this.unsetSelectAllClass();\n      this.app.block.unset();\n      this.app.blocks.unset();\n    },\n    // unset\n    unsetSelectAllClass: function unsetSelectAllClass() {\n      this.$editor.removeClass(this.prefix + '-select-all');\n    },\n    // add\n    addButton: function addButton(name, obj) {\n      this.opts.buttons.editor[name] = obj;\n    },\n    // get\n    getButtons: function getButtons() {\n      var buttons = this.opts.buttons.editor;\n      var res = {};\n\n      for (var name in buttons) {\n        if (name === 'html' && !this.opts.source) continue;\n        if (name === 'templates' && !this.opts.templates.json) continue;\n        res[name] = buttons[name];\n      }\n\n      return res;\n    },\n    getContent: function getContent(tidy) {\n      var html = '';\n\n      if (this.app.source.is()) {\n        html = this.app.source.getContent();\n      } else {\n        html = this._getContent();\n        html = tidy ? this.app.tidy.parse(html) : html;\n      }\n\n      return html;\n    },\n    getFrameRect: function getFrameRect() {\n      var offset = this.$editor.offset();\n      var width = this.$editor.width();\n      var height = this.$editor.height();\n      var top = Math.round(offset.top);\n      var left = Math.round(offset.left);\n      return {\n        top: top,\n        left: left,\n        bottom: top + height,\n        right: left + width,\n        width: width,\n        height: height\n      };\n    },\n    getFrame: function getFrame() {\n      return this.$editor;\n    },\n    getLayout: function getLayout() {\n      return this.$layout;\n    },\n    getHead: function getHead() {\n      return this.getDoc().find('head');\n    },\n    getBody: function getBody() {\n      return this.getDoc().find('body');\n    },\n    getDoc: function getDoc() {\n      return this.dom(this.getDocNode());\n    },\n    getDocNode: function getDocNode() {\n      return this.$editor.get().contentWindow.document;\n    },\n    getWin: function getWin() {\n      return this.dom(this.getWinNode());\n    },\n    getWinNode: function getWinNode() {\n      return this.$editor.get().contentWindow;\n    },\n    // adjust\n    adjustHeight: function adjustHeight() {\n      setTimeout(function () {\n        this.$editor.height(this.getBody().height());\n      }.bind(this), 1);\n    },\n    // toggle\n    toggleView: function toggleView(button) {\n      if (this.mobileMode) {\n        this.$editor.css('width', '');\n        this.app.path.enable();\n        this.app.topbar.enable();\n        this.app.toolbar.enable();\n        this.app.toolbar.unsetToggled('mobile');\n        this.app.event.run();\n        this.app.blocks.runEditableBlocks();\n        this.app.observer.build();\n        this.mobileMode = false;\n      } else {\n        this.$editor.css('width', this.opts.editor.mobile + 'px');\n        this.app.path.disable();\n        this.app.topbar.disable();\n        this.app.toolbar.disable();\n        this.app.toolbar.setToggled('mobile');\n        this.app.popup.close();\n        this.app.control.close();\n        this.app.event.pause();\n        this.app.blocks.pauseEditableBlocks();\n        this.app.observer.stop();\n        this.mobileMode = true;\n      }\n\n      this.adjustHeight();\n    },\n    // is\n    isLayout: function isLayout(el) {\n      return this.dom(el).get() === this.$layout.get();\n    },\n    isTextarea: function isTextarea() {\n      return this.opts.content === false;\n    },\n    isAllSelected: function isAllSelected() {\n      return this.$editor.hasClass(this.prefix + '-select-all');\n    },\n    isFocus: function isFocus() {\n      return this.app.container.get('main').hasClass(this.prefix + '-in-focus');\n    },\n    isEmpty: function isEmpty(emptyparagraph) {\n      return this.app.content.isEmptyHtml(this.$layout.html(), emptyparagraph);\n    },\n    isMobileView: function isMobileView() {\n      return this.mobileMode;\n    },\n    // build\n    _buildFrame: function _buildFrame() {\n      this.app.$element.hide();\n      this.$editor = this.dom('<iframe>').addClass(this.prefix + '-editor-frame'); // append\n\n      this.app.container.get('editor').append(this.$editor);\n    },\n    _buildBlurClass: function _buildBlurClass() {\n      this.app.container.get('main').addClass(this.prefix + '-in-blur');\n    },\n    _buildOptions: function _buildOptions() {\n      var $e = this.$editor;\n      var o = this.opts.editor;\n      $e.attr('dir', o.direction);\n      $e.attr('scrolling', 'no');\n      $e.css('visibility', 'hidden');\n      if (o.minHeight) $e.css('min-height', o.minHeight);\n\n      if (o.maxHeight) {\n        $e.css('max-height', o.maxHeight);\n        $e.attr('scrolling', 'yes');\n      }\n\n      if (o.notranslate) $e.addClass('notranslate');\n      if (!o.spellcheck) $e.attr('spellcheck', false);\n    },\n    _buildStartHtml: function _buildStartHtml() {\n      var doctype = this._createDoctype();\n\n      var scripts = this._createScripts();\n\n      var layout = '<div class=\"' + this.opts.editor.classname + '\"></div>';\n      var code = doctype + '<html><head></head><body>' + layout + scripts + '</body></html>'; // write code\n\n      this._writeCode(code);\n    },\n    _buildLayout: function _buildLayout() {\n      var $body = this.getBody();\n      this.$layout = $body.find('.' + this.opts.editor.classname).first();\n      this.$layout.attr('dir', this.opts.editor.direction);\n\n      if (this.opts.editor.padding === false) {\n        this.$layout.css('padding', 0);\n      } // body height\n\n\n      $body.css('height', 'auto');\n    },\n    _buildContent: function _buildContent() {\n      var content = this._getContentValue();\n\n      content = this.app.broadcastHtml('editor.before.load', content); // set parsed\n\n      var $parsed = this.app.parser.parse(content);\n      this.$layout.html($parsed.children()); // set unparsed\n\n      var unparsed = this.app.parser.unparse(this.$layout.html());\n      this.app.$element.val(unparsed); // load\n\n      this._load();\n    },\n    _buildVisibility: function _buildVisibility() {\n      this.$editor.css('visibility', 'visible');\n    },\n    _buildEditorCss: function _buildEditorCss() {\n      if (!this.opts.css) return;\n      var css;\n\n      if (Array.isArray(this.opts.css)) {\n        css = this.opts.css;\n      } else {\n        css = [this.opts.css + 'arx-frame.min.css', this.opts.css + 'arx-content.min.css'];\n      }\n\n      for (var i = 0; i < css.length; i++) {\n        this._buildCssLink(css[i]);\n      }\n    },\n    _buildCustomCss: function _buildCustomCss() {\n      if (!this.opts.custom.css) return;\n\n      for (var i = 0; i < this.opts.custom.css.length; i++) {\n        this._buildCssLink(this.opts.custom.css[i]);\n      }\n    },\n    _buildCssLink: function _buildCssLink(href) {\n      var obj = _typeof(href) === 'object' ? href : {\n        href: href\n      };\n      obj.href = obj.href + '?' + new Date().getTime(); // link tag\n\n      var $css = this.dom('<link>').attr({\n        'class': this.prefix + '-css',\n        'rel': 'stylesheet'\n      });\n      $css.attr(obj); // append\n\n      this.getHead().append($css);\n    },\n    _buildGridCssVar: function _buildGridCssVar() {\n      if (!this.opts.grid) return;\n      var style = this.getDocNode().documentElement.style;\n      style.setProperty('--' + this.prefix + '-grid-columns', this.opts.grid.columns);\n      style.setProperty('--' + this.prefix + '-grid-gutter', this.opts.grid.gutter);\n      style.setProperty('--' + this.prefix + '-grid-offset-left', this.opts.grid.offset.left);\n      style.setProperty('--' + this.prefix + '-grid-offset-right', this.opts.grid.offset.right); // patterns opts\n\n      if (this.app.initialSettings.grid && this.app.initialSettings.grid.patterns) {\n        this.opts.grid.patterns = this.app.initialSettings.grid.patterns;\n      }\n    },\n    _buildParserTags: function _buildParserTags() {\n      var parser = this.opts.parser;\n\n      for (var key in parser) {\n        // add tag\n        if (parser[key].parse && parser[key].tag) {\n          var tag = parser[key].tag;\n          if (typeof this.opts.parserTags[tag] === 'undefined') this.opts.parserTags[tag] = [];\n          this.opts.parserTags[tag].push(parser[key].parse);\n        }\n      }\n    },\n    _buildDraggable: function _buildDraggable() {\n      var $items = this.app.$body.find('[data-' + this.prefix + '-drop-id]');\n      $items.each(function ($node) {\n        $node.attr('draggable', true);\n        $node.on('dragstart', function (e) {\n          var $target = this.dom(e.target);\n          var id = $target.attr('data-' + this.prefix + '-drop-id');\n          e.dataTransfer.setData('item', id);\n        }.bind(this));\n      }.bind(this));\n    },\n    // load\n    _load: function _load() {\n      try {\n        this._loadImages();\n\n        this._loaded();\n      } catch (e) {\n        $ARX.error(e);\n      }\n    },\n    _loaded: function _loaded() {\n      this.app.sync.build();\n      this.app.observer.build();\n      this.app.event.build();\n      this.app.embed.build();\n      this.app.blocks.build();\n      this.app.image.observeStates();\n\n      this._buildVisibility();\n\n      this._buildEditorCss();\n\n      this._buildCustomCss();\n\n      this._buildGridCssVar();\n\n      this._buildDraggable(); // adjust on resize\n\n\n      this.getWin().on('resize.' + this.prefix + '-editor-frame', this.adjustHeight.bind(this)); // broadcast\n\n      this.app.broadcast('editor.load'); // adjust height\n\n      setTimeout(this.adjustHeight.bind(this), 1000);\n      setTimeout(this.adjustHeight.bind(this), 3000);\n    },\n    _loadedImage: function _loadedImage() {\n      this.imageslen--;\n    },\n    _loadImages: function _loadImages() {\n      var $doc = this.getDoc();\n      var $images = $doc.find('img');\n      this.imageslen = $images.length;\n      $images.each(this._loadImage.bind(this));\n      var timerImg = setInterval(function () {\n        if (this.imageslen === 0) {\n          this.adjustHeight();\n          clearInterval(timerImg);\n          return;\n        }\n      }.bind(this), 50);\n    },\n    _loadImage: function _loadImage($img) {\n      var img = $img.get();\n\n      if (this.opts.editor.images) {\n        var arr = img.src.split('/');\n        var last = arr[arr.length - 1];\n        img.src = this.opts.editor.images + last;\n      }\n\n      $img.one('load', this._loadedImage.bind(this));\n    },\n    // set\n    _setFocusOnStart: function _setFocusOnStart() {\n      if (!this.opts.editor.focus) return;\n      this.setFocus();\n      this.setFocus(this.opts.editor.focus);\n    },\n    _setSelectAllClass: function _setSelectAllClass() {\n      this.$editor.addClass(this.prefix + '-select-all');\n    },\n    _setFocusCaret: function _setFocusCaret(caret) {\n      caret = this._getCaretPosition(caret);\n\n      var target = this._getFocusTarget(caret);\n\n      this.app.block.set(target, caret);\n    },\n    _setFocusEvent: function _setFocusEvent() {\n      if (this.isFocus()) return;\n\n      for (var i = 0; i < $ARX.instances.length; i++) {\n        if ($ARX.instances[i] !== this.app) {\n          $ARX.instances[i].editor.setBlur();\n        }\n      }\n\n      this._setFocusContainerClass(); // broadcast\n\n\n      this.app.broadcast('editor.focus');\n    },\n    _setFocusContainerClass: function _setFocusContainerClass() {\n      this.app.container.get('main').removeClass(this.prefix + '-in-blur').addClass(this.prefix + '-in-focus');\n    },\n    // unset\n    _unsetFocusContainerClass: function _unsetFocusContainerClass() {\n      this.app.container.get('main').removeClass(this.prefix + '-in-focus').addClass(this.prefix + '-in-blur');\n    },\n    // get\n    _getCaretPosition: function _getCaretPosition(caret) {\n      return caret === true ? 'start' : caret;\n    },\n    _getFocusTarget: function _getFocusTarget(caret) {\n      return caret === 'start' ? this.app.blocks.getFirst() : this.app.blocks.getLast();\n    },\n    _getContent: function _getContent() {\n      var html = this.$layout.html();\n      html = this.app.parser.unparse(html);\n      return html;\n    },\n    _getContentValue: function _getContentValue() {\n      return this.opts.content ? this.opts.content : this.app.$element.val();\n    },\n    // enable\n    _enableToolbarButtons: function _enableToolbarButtons() {\n      if (this.app.source.is() || this.isMobileView()) return;\n      this.app.toolbar.enable();\n    },\n    // write\n    _writeCode: function _writeCode(html) {\n      var doc = this.getDocNode();\n      doc.open();\n      doc.write(html);\n      doc.close();\n    },\n    // create\n    _createDoctype: function _createDoctype() {\n      return this.opts.editor.doctype + '\\n';\n    },\n    _createScripts: function _createScripts() {\n      if (!this.opts.custom.js) return '';\n      var str = '';\n      var scripts = this.opts.custom.js;\n\n      for (var i = 0; i < scripts.length; i++) {\n        var obj = _typeof(scripts[i]) === 'object' ? scripts[i] : {\n          src: scripts[i]\n        };\n        obj.src = obj.src + '?' + new Date().getTime(); // script tag\n\n        var $el = this.dom('<script>').addClass(this.prefix + '-js').attr(obj); // all scripts str\n\n        str = str + $el.get().outerHTML;\n      }\n\n      return str;\n    }\n  });\n  ArticleEditor.add('module', 'source', {\n    start: function start() {\n      this.eventname = this.prefix + '-source-events';\n\n      this._build();\n    },\n    toggle: function toggle() {\n      if (this.is()) this.close();else this.open();\n    },\n    is: function is() {\n      return this.app.container.get('source').css('display') !== 'none';\n    },\n    open: function open() {\n      this.app.broadcast('source.before.open');\n      var html = this.app.editor.getContent();\n      html = this.app.tidy.parse(html);\n      var height = this.app.container.get('editor').height();\n      this.$source.height(height);\n      this.$source.val(html);\n      this.$source.on('input.' + this.eventname, this._handleChanges.bind(this));\n      this.$source.on('keydown.' + this.eventname, this.app.input.handleTextareaTab.bind(this));\n      this.app.editor.unselectAll();\n      this.app.container.get('editor').hide();\n      this.app.container.get('source').show(); // codemirror\n\n      var codemirror = this.app.codemirror.create({\n        el: this.$source,\n        height: height,\n        focus: true\n      });\n\n      if (codemirror) {\n        codemirror.on('change', this._handleChanges.bind(this));\n      } // ui\n\n\n      this.app.path.disable();\n      this.app.topbar.disable();\n      this.app.toolbar.disable();\n      this.app.toolbar.disableSticky();\n      this.app.toolbar.setToggled('html'); // broadcast\n\n      this.app.broadcast('source.open');\n    },\n    close: function close() {\n      this.app.broadcast('source.before.close');\n      var html = this.getContent();\n      this.app.codemirror.destroy();\n      this.$source.off('.' + this.eventname);\n      this.app.container.get('source').hide();\n      this.app.container.get('editor').show(); // set code\n\n      this.app.editor.setContent({\n        html: html,\n        caret: false\n      }); // ui\n\n      this.app.path.enable();\n      this.app.topbar.enable();\n      this.app.toolbar.enable();\n      this.app.toolbar.enableSticky();\n      this.app.toolbar.unsetToggled('html'); // broadcast\n\n      this.app.broadcast('source.close');\n    },\n    update: function update(html) {\n      var func = this.app.editor.isTextarea() ? 'val' : 'html';\n      this.app.$element[func](html);\n    },\n    getContent: function getContent() {\n      var html = this.$source.val();\n      html = this.app.codemirror.val(html);\n      return html;\n    },\n    // private\n    _build: function _build() {\n      this.$source = this.dom('<textarea>').addClass(this.prefix + '-source');\n      this.$source.attr('data-gramm_editor', false);\n      this.app.container.get('source').append(this.$source);\n    },\n    _handleChanges: function _handleChanges(e) {\n      var html = this.getContent();\n      this.update(html);\n      this.app.broadcast('source.change', {\n        e: e\n      });\n    }\n  });\n  ArticleEditor.add('module', 'placeholder', {\n    start: function start() {\n      this.placeholder = false;\n      this.$layout = this.app.editor.getLayout(); // build\n\n      this._build();\n    },\n    handleClick: function handleClick(e) {\n      if (this.dom(e.target).hasClass(this.prefix + '-placeholder')) {\n        this.app.editor.setFocus('start');\n      }\n    },\n    toggle: function toggle() {\n      if (this.placeholder && this.app.editor.isEmpty(true)) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n    show: function show() {\n      this.$layout.addClass(this.prefix + '-placeholder');\n    },\n    hide: function hide() {\n      this.$layout.removeClass(this.prefix + '-placeholder');\n    },\n    // private\n    _build: function _build() {\n      var is = this.opts.placeholder !== false || this.app.$element.attr('placeholder');\n      if (!is) return;\n      var text = this.opts.placeholder !== false ? this.opts.placeholder : this.app.$element.attr('placeholder');\n      this.$layout.attr('placeholder', text);\n      this.placeholder = true;\n      this.toggle();\n    }\n  });\n  ArticleEditor.add('module', 'accessibility', {\n    start: function start() {\n      this._buildRole();\n\n      this._buildLabel();\n    },\n    _buildRole: function _buildRole() {\n      this.app.editor.getFrame().attr({\n        'aria-labelledby': this.prefix + '-voice',\n        'role': 'presentation'\n      });\n    },\n    _buildLabel: function _buildLabel() {\n      var html = this.lang.get('accessibility.help-label');\n\n      var $label = this._createLabel(html); // append\n\n\n      this.app.container.get('main').prepend($label);\n    },\n    _createLabel: function _createLabel(html) {\n      return this.dom('<span />').addClass(this.prefix + '-voice-label').attr({\n        'id': this.prefix + '-voice-' + this.uuid,\n        'aria-hidden': false\n      }).html(html);\n    }\n  });\n  ArticleEditor.add('module', 'observer', {\n    init: function init() {\n      this.observer = false;\n      this.trigger = true;\n    },\n    build: function build() {\n      if (window.MutationObserver) {\n        var el = this.app.editor.getLayout().get();\n        this.observer = this._build(el);\n        this.observer.observe(el, {\n          attributes: true,\n          subtree: true,\n          childList: true,\n          characterData: true,\n          characterDataOldValue: true\n        });\n      }\n    },\n    stop: function stop() {\n      if (this.observer) this.observer.disconnect();\n      this.trigger = true;\n    },\n    // private\n    _build: function _build(el) {\n      var self = this;\n      return new MutationObserver(function (mutations) {\n        self._observe(mutations[mutations.length - 1], el);\n      });\n    },\n    _observe: function _observe(mutation, el) {\n      if (mutation.type === 'attributes' && mutation.target === el) {\n        return;\n      } // sync\n\n\n      if (this.trigger) {\n        this.app.editor.adjustHeight();\n        this.app.broadcast('observer.change');\n        this.app.placeholder.toggle();\n        this.app.sync.trigger();\n      }\n    }\n  });\n  ArticleEditor.add('module', 'utils', {\n    // invisible chars\n    createInvisibleChar: function createInvisibleChar() {\n      return document.createTextNode(this.opts.markerChar);\n    },\n    searchInvisibleChars: function searchInvisibleChars(str) {\n      return str.search(/^\\uFEFF$/g);\n    },\n    removeInvisibleChars: function removeInvisibleChars(str) {\n      return str.replace(/\\uFEFF/g, '');\n    },\n    // wrapper\n    wrap: function wrap(html, func) {\n      var $w = this.dom('<div>').html(html);\n      func($w);\n      html = $w.html();\n      $w.remove();\n      return html;\n    },\n    // arrays\n    extendArray: function extendArray(arr, extend) {\n      arr = arr.concat(arr);\n\n      if (extend) {\n        for (var i = 0; i < extend.length; i++) {\n          arr.push(extend[i]);\n        }\n      }\n\n      return arr;\n    },\n    removeFromArrayByValue: function removeFromArrayByValue(arr, val) {\n      val = Array.isArray(val) ? val : [val];\n      var index;\n\n      for (var i = 0; i < val.length; i++) {\n        index = arr.indexOf(val[i]);\n        if (index > -1) arr.splice(index, 1);\n      }\n\n      return arr;\n    },\n    sumOfArray: function sumOfArray(arr) {\n      return arr.reduce(function (a, b) {\n        return parseInt(a) + parseInt(b);\n      }, 0);\n    },\n    // object\n    getObjectIndex: function getObjectIndex(obj, key) {\n      return Object.keys(obj).indexOf(key);\n    },\n    insertToObject: function insertToObject(key, value, obj, pos) {\n      return Object.keys(obj).reduce(function (ac, a, i) {\n        if (i === pos) ac[key] = value;\n        ac[a] = obj[a];\n        return ac;\n      }, {});\n    },\n    // random\n    getRandomId: function getRandomId() {\n      var id = '';\n      var possible = 'abcdefghijklmnopqrstuvwxyz0123456789';\n\n      for (var i = 0; i < 12; i++) {\n        id += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      return id;\n    },\n    // escape\n    escapeRegExp: function escapeRegExp(s) {\n      return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    },\n    // string\n    capitalize: function capitalize(str) {\n      str = str.toLowerCase();\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    },\n    // data\n    extendData: function extendData(data, obj) {\n      for (var key in obj) {\n        if (key === 'elements') {\n          data = this._extendDataElements(data, obj[key]);\n        } else {\n          data = this._setData(data, key, obj[key]);\n        }\n      }\n\n      return data;\n    },\n    _extendDataElements: function _extendDataElements(data, value) {\n      this.dom(value).each(function ($node) {\n        if ($node.get().tagName === 'FORM') {\n          var serializedData = $node.serialize(true);\n\n          for (var z in serializedData) {\n            data = this._setData(data, z, serializedData[z]);\n          }\n        } else {\n          var name = $node.attr('name') ? $node.attr('name') : $node.attr('id');\n          data = this._setData(data, name, $node.val());\n        }\n      }.bind(this));\n      return data;\n    },\n    _setData: function _setData(data, name, value) {\n      if (data instanceof FormData) data.append(name, value);else data[name] = value;\n      return data;\n    }\n  });\n  ArticleEditor.add('module', 'content', {\n    init: function init() {\n      this._selectors = {\n        code: ['pre', 'code'],\n        embed: ['figure'],\n        noneditable: ['.' + this.opts.noneditable.classname],\n        images: ['img'],\n        links: ['a']\n      };\n    },\n    // paragraphize\n    paragraphize: function paragraphize(html) {\n      return this.app.paragraphizer.paragraphize(html);\n    },\n    // encode\n    encodeEntities: function encodeEntities(str) {\n      return this.decodeEntities(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n    },\n    encodeCode: function encodeCode(html) {\n      // replace all tags\n      html = html.replace(/<(.*?)>/gi, 'xtagstartz$1xtagendz'); // revert pre / code\n\n      html = html.replace(/xtagstartzpre(.*?)xtagendz/g, '<pre$1>');\n      html = html.replace(/xtagstartzcode(.*?)xtagendz/g, '<code$1>');\n      html = html.replace(/xtagstartz\\/codextagendz/g, '</code>');\n      html = html.replace(/xtagstartz\\/prextagendz/g, '</pre>'); // encode\n\n      html = this._encodeCode(html); // revert all tags\n\n      html = html.replace(/xtagstartz(.*?)xtagendz/g, '<$1>');\n      html = html.replace(/xtagstartz\\/(.*?)xtagendz/g, '</$1>');\n      return html;\n    },\n    // decode\n    decodeEntities: function decodeEntities(str) {\n      return String(str).replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&amp;/g, '&');\n    },\n    // sanitize\n    sanitize: function sanitize(html) {\n      html = this.app.utils.wrap(html, function ($w) {\n        $w.find('[src]').each(this._sanitizeSrc);\n        $w.find('a').each(this._sanitizeHref);\n        $w.find('svg,img,details').each(this._sanitizeEvents);\n      }.bind(this));\n      return html;\n    },\n    // escape\n    escapeHtml: function escapeHtml(str) {\n      return str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n    },\n    // store / restore\n    store: function store(html, name, stored, storedIndex) {\n      var selectors = this._selectors[name];\n\n      for (var i = 0; i < selectors.length; i++) {\n        var matched = this._getElementsFromHtml(html, selectors[i]);\n\n        html = this._store(html, name, matched, stored, storedIndex);\n      }\n\n      return html;\n    },\n    restore: function restore(html, name, stored) {\n      if (typeof stored[name] === 'undefined') return html;\n\n      for (var i = 0; i < stored[name].length; i++) {\n        html = html.replace('####_' + name + i + '_####', stored[name][i]);\n      }\n\n      return html;\n    },\n    storeComments: function storeComments(html, storedComments) {\n      var comments = html.match(new RegExp('<!--([\\\\w\\\\W]*?)-->', 'gi'));\n      if (comments === null) return html;\n\n      for (var i = 0; i < comments.length; i++) {\n        html = html.replace(comments[i], '#####xstarthtmlcommentzz' + i + 'xendhtmlcommentzz#####');\n        storedComments.push(comments[i]);\n      }\n\n      return html;\n    },\n    restoreComments: function restoreComments(html, storedComments) {\n      for (var i = 0; i < storedComments.length; i++) {\n        var str = storedComments[i].replace(/\\$/gi, '&#36;');\n        html = html.replace('#####xstarthtmlcommentzz' + i + 'xendhtmlcommentzz#####', str);\n      }\n\n      return html;\n    },\n    // cache / recache\n    cacheStyle: function cacheStyle(html) {\n      var selector = this.opts.tags.block.join(',') + ',img,' + this.opts.tags.inline.join(',');\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(selector).each(this._cacheStyle.bind(this));\n      }.bind(this));\n    },\n    recacheStyle: function recacheStyle(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('[data-' + this.prefix + '-style-cache]').each(this._recacheStyle.bind(this));\n      }.bind(this));\n    },\n    // add\n    addNofollow: function addNofollow(html) {\n      if (!this.opts.link.nofollow) return html;\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('a').attr('rel', 'nofollow');\n      });\n    },\n    addHttps: function addHttps(html) {\n      if (!this.opts.editor.https) {\n        return html;\n      }\n\n      html = html.replace('href=\"http://', 'href=\"https://');\n      html = html.replace('src=\"http://', 'src=\"https://');\n      html = html.replace('srcset=\"http://', 'srcset=\"https://');\n      return html;\n    },\n    addSpaceToBlocks: function addSpaceToBlocks(html) {\n      return html.replace(/<\\/(div|li|dt|dd|td|p|H[1-6])>\\n?/gi, '</$1> ');\n    },\n    addBrToBlocks: function addBrToBlocks(html) {\n      return html.replace(/<\\/(div|li|dt|dd|td|p|H[1-6])>\\n?/gi, '</$1><br>');\n    },\n    addEmptyButton: function addEmptyButton($el) {\n      if ($el.hasClass(this.prefix + '-empty-layer')) return;\n      $el.addClass(this.prefix + '-empty-layer');\n      var $plus = this.dom('<span>').addClass(this.prefix + '-plus-button'); // button\n\n      this.app.create('button', {\n        name: 'plus',\n        element: $plus\n      }, {\n        command: 'addbar.popup'\n      }); // append\n\n      $el.append($plus);\n    },\n    // fix\n    fixListMargin: function fixListMargin($block) {\n      var ml = parseInt($block.css('margin-left'));\n\n      if (ml !== 0) {\n        var pl = parseInt($block.css('padding-left'));\n        $block.css({\n          'margin-left': 0,\n          'padding-left': pl + ml + 'px'\n        });\n        $block.attr(this.prefix + '-list-left', ml);\n      }\n    },\n    unfixListMargin: function unfixListMargin($block) {\n      if ($block.attr(this.prefix + '-list-left')) {\n        $block.css({\n          'padding-left': '',\n          'margin-left': ''\n        });\n        $block.removeAttr(this.prefix + '-list-left');\n      }\n    },\n    // get\n    getText: function getText(n) {\n      var rv = '';\n\n      if (n.nodeType === 3) {\n        rv = n.nodeValue;\n      } else {\n        for (var i = 0; i < n.childNodes.length; i++) {\n          rv += this.getText(n.childNodes[i]);\n        }\n\n        var d = n.nodeType === 1 ? getComputedStyle(n).getPropertyValue('display') : '';\n\n        if (d.match(/^block/) || d.match(/list/) || n.tagName === 'BR' || n.tagName === 'HR') {\n          rv += \"\\n\";\n        }\n      }\n\n      return rv;\n    },\n    getTextFromHtml: function getTextFromHtml(html, params) {\n      var stored = {};\n      var storedIndex = 0;\n      var defaults = {\n        br: false,\n        nl: false,\n        trimlines: true,\n        images: false,\n        links: false\n      };\n      params = $ARX.extend({}, defaults, params);\n      html = this.store(html, 'code', stored, storedIndex);\n      html = params.links ? this.store(html, 'links', stored, storedIndex) : html;\n      html = params.images ? this.store(html, 'images', stored, storedIndex) : html;\n      html = html.replace(/<(ul|ol)>\\s+<li>/gi, '<$1><li>');\n      html = html.replace(/<li[^>]*>\\n/gi, '<li$1>');\n      html = html.replace(/<p[^>]*>(\\s+|)<\\/p>/gi, 'xemptyz');\n      html = html.replace(/<!--[\\s\\S]*?-->/gi, '');\n      html = html.replace(/<style[\\s\\S]*?style>/gi, '');\n      html = html.replace(/<script[\\s\\S]*?script>/gi, '');\n      html = html.replace(/<\\/(div|li|dt|dd|td|p|H[1-6])>\\n?/gi, '</$1>\\n');\n      html = html.replace(/&(lt|gt);/gi, 'x$1z');\n      var $tmp = this.dom('<div>').html(html);\n      html = this.getText($tmp.get()); // trim lines\n\n      if (params.trimlines) {\n        var str = '';\n        var arr = html.split(\"\\n\");\n\n        for (var i = 0; i < arr.length; i++) {\n          str += arr[i].trim() + '\\n';\n        }\n\n        html = str;\n      }\n\n      html = html.replace(/[\\n]+/g, \"\\n\");\n      html = html.replace('xemptyz', \"\\n\");\n      html = html.replace(/x(lt|gt)z/gi, '&$1;'); // keep newlines\n\n      if (params.br) {\n        html = html.replace(/\\n/g, \"<br>\\n\");\n        html = html.replace(/<br\\s?\\/?>\\n?$/gi, '');\n      } else {\n        html = params.nl ? html : html.replace(/\\n/gi, ' ');\n      }\n\n      html = this.restore(html, 'code', stored);\n      html = params.links ? this.restore(html, 'links', stored) : html;\n      html = params.images ? this.restore(html, 'images', stored) : html;\n      html = html.replace(/<pre[^>]*>/g, '');\n      html = html.replace(/<code[^>]*>/g, '');\n      html = html.replace(/<\\/pre>\\n?/g, '');\n      html = html.replace(/<\\/code>/g, '');\n\n      if (!params.images) {\n        html = html.replace(/<img[\\s\\S]*?>/gi, '');\n        html = html.replace(/<a[^>]*>(\\s+|)<\\/a>/gi, '');\n      }\n\n      return html.trim();\n    },\n    // extract\n    extractHtmlFromCaret: function extractHtmlFromCaret(el) {\n      var node = this.dom(el).get();\n      var range = this.app.selection.getRange();\n\n      if (range) {\n        var cloned = range.cloneRange();\n        cloned.selectNodeContents(node);\n        cloned.setStart(range.endContainer, range.endOffset);\n        return cloned.extractContents();\n      }\n    },\n    // is\n    isEmptyHtml: function isEmptyHtml(html, emptyparagraph) {\n      html = html.trim();\n      html = this.app.utils.removeInvisibleChars(html);\n      html = html.replace(/^&nbsp;$/gi, '1');\n      html = html.replace(/&nbsp;/gi, '');\n      html = html.replace(/<\\/?br\\s?\\/?>/g, '');\n      html = html.replace(/\\s/g, '');\n      html = html.replace(/^<p>\\s\\S<\\/p>$/i, '');\n      html = html.replace(/<hr(.*?[^>])>$/i, 'hr');\n      html = html.replace(/<iframe(.*?[^>])>$/i, 'iframe');\n      html = html.replace(/<source(.*?[^>])>$/i, 'source'); // remove comments\n\n      html = this.removeComments(html); // remove empty tags\n\n      html = emptyparagraph ? html.replace(/<p[^>]*><\\/p>/gi, '') : html;\n      html = html.replace(/<[^/>]><\\/[^>]+>/gi, '');\n      html = html.replace(/<[^/>]><\\/[^>]+>/gi, ''); // trim\n\n      html = html.trim();\n      return html === '';\n    },\n    isLine: function isLine(html) {\n      var element = document.createElement(\"div\");\n      element.innerHTML = html;\n      return this.dom(element).find(this.opts.tags.block.join(',') + ',img').length === 0;\n    },\n    // drop\n    drop: function drop(e, html, position, cleanDrop) {\n      var target = this.app.element.getDataBlock(e.target);\n      target = target.length === 0 ? this.app.blocks.getFirst() : target; // set target\n\n      this.app.block.set(target); // drop point\n\n      if (!position) {\n        this.app.insertion.insertPoint(e);\n      }\n\n      var clean = true;\n      var parse = true;\n      var instance = this.app.block.get();\n      var isAll = this.app.editor.isAllSelected();\n\n      if (instance && instance.getType() === 'code' && !isAll) {\n        clean = false;\n        parse = false;\n        html = this.getTextFromHtml(html, {\n          nl: true,\n          trimlines: false\n        });\n      }\n\n      if (cleanDrop === false) {\n        clean = false;\n      } // empty\n\n\n      if (html === '') {\n        return;\n      } // autolink\n\n\n      html = clean ? this.app.autolink.parse(html) : html; // insert\n\n      this.app.insertion.insertContent({\n        html: html,\n        clean: clean,\n        parse: parse,\n        position: position\n      });\n    },\n    // paste\n    paste: function paste(e) {\n      // broadcast\n      var event = this.app.broadcast('editor.before.paste', {\n        e: e\n      });\n      if (event.isStopped()) return e.preventDefault();\n      e.preventDefault();\n      var clipboard = e.clipboardData; // image\n\n      if (this.app.image.insertFromClipboard(clipboard)) {\n        return;\n      } // html / text\n\n\n      var url = clipboard.getData('URL');\n      var html = this.app.clipboard.getContent(clipboard); // get safari anchor links\n\n      html = !url || url === '' ? html : url; // clean\n\n      var instance = this.app.block.get();\n      var clean = true;\n      var parse = true;\n      var isAll = this.app.editor.isAllSelected();\n\n      if (this.opts.paste.plaintext) {\n        clean = false;\n        parse = false;\n        html = this.getTextFromHtml(html, {\n          br: true\n        });\n      } else if (instance && instance.getType() === 'code' && !isAll) {\n        clean = false;\n        parse = false;\n        html = this.getTextFromHtml(html, {\n          nl: true,\n          trimlines: false\n        });\n      } // empty\n\n\n      if (html === '') {\n        return;\n      } // autolink\n\n\n      html = clean ? this.app.autolink.parse(html) : html; // insert\n\n      var inserted = this.app.insertion.insertContent({\n        html: html,\n        clean: clean,\n        parse: parse\n      }); // broadcast\n\n      this.app.broadcast('editor.paste', inserted);\n    },\n    // copy\n    copy: function copy(e) {\n      this._copy(e, 'copy');\n    },\n    // cut\n    cut: function cut(e) {\n      this._copy(e, 'cut');\n    },\n    // remove\n    removeDoctype: function removeDoctype(html) {\n      return html.replace(new RegExp(\"<!doctype[^>]*>\", 'gi'), '');\n    },\n    removeComments: function removeComments(html) {\n      return html.replace(/<!--[\\s\\S]*?-->\\n?/g, '');\n    },\n    removeTags: function removeTags(input, denied) {\n      var re = denied ? /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi : /(<([^>]+)>)/gi;\n      var replacer = !denied ? '' : function ($0, $1) {\n        return denied.indexOf($1.toLowerCase()) === -1 ? $0 : '';\n      };\n      return input.replace(re, replacer);\n    },\n    removeTagsExcept: function removeTagsExcept(input, except) {\n      if (except === undefined) {\n        return input.replace(/(<([^>]+)>)/gi, '');\n      }\n\n      var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\n      return input.replace(tags, function ($0, $1) {\n        return except.indexOf($1.toLowerCase()) === -1 ? '' : $0;\n      });\n    },\n    removeTagsWithContent: function removeTagsWithContent(html, tags) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(tags.join(',')).remove();\n      });\n    },\n    removeMarkers: function removeMarkers(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('.' + this.prefix + '-plus-button').remove();\n        $w.find('.' + this.prefix + 'pastemarker').removeClass(this.prefix + 'pastemarker');\n        $w.find('.' + this.prefix + 'pasteitems').removeClass(this.prefix + 'pasteitems');\n        $w.find('.' + this.prefix + '-selection-marker').remove();\n      }.bind(this));\n    },\n    removeEmptySpans: function removeEmptySpans(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('span').each(this._removeEmptySpan.bind(this));\n      }.bind(this));\n    },\n    removeEmptyInlines: function removeEmptyInlines(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(this.opts.tags.inline.join(',')).each(this._removeEmptyTag.bind(this));\n      }.bind(this));\n    },\n    removeEmptyAttrs: function removeEmptyAttrs(html, attrs) {\n      return this.app.utils.wrap(html, function ($w) {\n        for (var i = 0; i < attrs.length; i++) {\n          $w.find('[' + attrs[i] + '=\"\"]').removeAttr(attrs[i]);\n        }\n      });\n    },\n    removeBlockTags: function removeBlockTags(html, tags, except) {\n      var blocks = this.opts.tags.block.concat(); // except\n\n      if (except) {\n        blocks = this.app.utils.removeFromArrayByValue(blocks, except);\n      } // extend\n\n\n      if (tags) {\n        tags = tags ? this.app.utils.extendArray(blocks, tags) : blocks;\n      }\n\n      return this.removeTags(html, tags);\n    },\n    removeBlockTagsInside: function removeBlockTagsInside(html, tags) {\n      this.blockListTags = this.app.utils.removeFromArrayByValue(this.opts.tags.block.concat(), ['ul', 'ol', 'li']);\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(tags.join(',')).each(this._removeBlockTagsInside.bind(this));\n      }.bind(this));\n    },\n    removeInlineStyles: function removeInlineStyles(html) {\n      var inlines = this.app.utils.removeFromArrayByValue(this.opts.tags.inline, 'a');\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(inlines.join(',')).removeAttr('style');\n      });\n    },\n    removeStyleAttr: function removeStyleAttr(html, filter) {\n      filter = filter || '';\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('*').not('[data-' + this.prefix + '-style-cache]' + filter).removeAttr('style');\n      }.bind(this));\n    },\n    // private\n    _cacheStyle: function _cacheStyle($el) {\n      var name = 'data-' + this.prefix + '-style-cache';\n      var style = $el.attr('style');\n\n      if (style) {\n        $el.attr(name, style);\n      } else if (!style || style === '') {\n        $el.removeAttr(name);\n      }\n    },\n    _recacheStyle: function _recacheStyle($el) {\n      var name = 'data-' + this.prefix + '-style-cache';\n      var style = $el.attr(name);\n      $el.attr('style', style).removeAttr(name);\n    },\n    // clean\n    _cleanEmpty: function _cleanEmpty(html) {\n      html = html.trim();\n      html = this.app.utils.removeInvisibleChars(html);\n      html = html.replace(/<\\/?br\\s?\\/?>/g, '');\n      html = html.replace(/\\s/g, '');\n      return html;\n    },\n    // copy\n    _copyFromAllSelected: function _copyFromAllSelected(name, html) {\n      html = this.app.editor.getLayout().html(); // set empty\n\n      if (name === 'cut') this.app.editor.setEmpty();\n      return html;\n    },\n    _copyFromMultiple: function _copyFromMultiple(name, html) {\n      var $blocks = this.app.blocks.getSelected();\n      var $tmp = this.dom('<div>');\n      $blocks.each(function ($node) {\n        $tmp.append($node.clone());\n      });\n      html = $tmp.html(); // remove selected blocks\n\n      if (name === 'cut') this.app.blocks.removeSelected(false);\n      return html;\n    },\n    _copyFromEditable: function _copyFromEditable(name, html, instance) {\n      var type = instance.getType();\n\n      if (type === 'figcaption' || type === 'cell') {\n        html = this.app.selection.getHtml(); // delete selection\n\n        if (name === 'cut') {\n          this.app.selection.deleteContents();\n        }\n      } else if (instance.isAllSelected()) {\n        html = instance.getOuterHtml(); // remove block\n\n        if (name === 'cut') {\n          instance.remove();\n        }\n      } else if (type === 'dlist') {\n        html = this.app.selection.getHtml();\n\n        if (html.search(/<dl/gi) === -1) {\n          // wrap to list\n          html = '<dl>' + html + '</dl>';\n        } // delete selection\n\n\n        if (name === 'cut') {\n          this.app.selection.deleteContents();\n        }\n      } else if (type === 'list') {\n        var tag = instance.getTag(); // contains li\n\n        html = this.app.selection.getHtml();\n\n        if (html.search(/<li/gi) !== -1) {\n          // does not have li at start\n          if (html.search(/^<li/g) === -1) {\n            html = '<li>' + html + '</li>';\n          } // wrap to list\n\n\n          html = '<' + tag + '>' + html + '</' + tag + '>';\n        } // delete selection\n\n\n        if (name === 'cut') {\n          this.app.selection.deleteContents();\n        }\n      } else {\n        html = this.app.selection.getHtml(); // delete selection\n\n        if (name === 'cut') {\n          this.app.selection.deleteContents();\n        }\n      }\n\n      return html;\n    },\n    _copyFromNonEditable: function _copyFromNonEditable(name, html, instance) {\n      var $block = instance.getBlock();\n      var type = instance.getType(); // column\n\n      if (type === 'column') {\n        html = $block.html();\n      } // row\n      else if (type === 'row') {\n          // wrap to table\n          html = instance.getOuterHtml();\n          html = '<table>' + html + '</table>'; // delete cell content\n\n          if (name === 'cut') {\n            $block.find('td, th').html('');\n          }\n        } else {\n          html = instance.getOuterHtml();\n        } // remove block\n\n\n      if (name === 'cut') {\n        var parentInstance = instance.getParent('layer');\n\n        if (type === 'column') {\n          instance.setEmpty();\n        } else {\n          instance.remove();\n        }\n\n        if (type === 'layer' && parentInstance && parentInstance.isEmpty()) {\n          parentInstance.setEmpty();\n        }\n      }\n\n      return html;\n    },\n    _copy: function _copy(e, name) {\n      var instance = this.app.block.get();\n      var isMultiple = this.app.blocks.is();\n      var html = false; // do nothing\n\n      if (!isMultiple && !instance) return;\n      if (!isMultiple && instance && instance.isEditable() && this.app.selection.isCollapsed()) return; // stop event\n\n      e.preventDefault(); // select all\n\n      if (this.app.editor.isAllSelected()) {\n        html = this._copyFromAllSelected(name, html);\n      } // multiple\n      else if (isMultiple) {\n          html = this._copyFromMultiple(name, html);\n        } // single editable\n        else if (instance && instance.isEditable()) {\n            html = this._copyFromEditable(name, html, instance);\n          } // single non editable\n          else if (instance) {\n              html = this._copyFromNonEditable(name, html, instance);\n            } // broadcast\n\n\n      var event = this.app.broadcast('editor.before.' + name, {\n        e: e,\n        html: html\n      });\n      if (event.isStopped()) return e.preventDefault();\n      html = event.get('html'); // set to clipboard\n\n      html = this.app.clipboard.setContent(e, html); // broadcast\n\n      this.app.broadcastHtml('editor.' + name, html);\n    },\n    // remove\n    _removeEmptySpan: function _removeEmptySpan($node) {\n      if ($node.get().attributes.length === 0) {\n        $node.unwrap();\n      }\n    },\n    _removeEmptyTag: function _removeEmptyTag($node) {\n      var html = $node.html().trim();\n\n      if ($node.get().attributes.length === 0 && html === '') {\n        $node.unwrap();\n      }\n    },\n    _removeBlockTagsInside: function _removeBlockTagsInside($node) {\n      var tags = $node.get().tagName === 'LI' ? this.blockListTags : this.opts.tags.block;\n      $node.find(tags.join(',')).append('<br>').unwrap();\n    },\n    // store\n    _store: function _store(html, name, matched, stored, storedIndex) {\n      if (!matched) return html;\n      if (typeof stored[name] === 'undefined') stored[name] = [];\n\n      for (var i = 0; i < matched.length; i++) {\n        stored[name][storedIndex] = matched[i];\n        html = html.replace(matched[i], '####_' + name + storedIndex + '_####');\n        storedIndex++;\n      }\n\n      return html;\n    },\n    // get\n    _getElementsFromHtml: function _getElementsFromHtml(html, selector) {\n      var matched = [];\n      var $div = this.dom('<div>').html(html);\n      $div.find(selector).each(function ($node) {\n        matched.push($node.get().outerHTML);\n      });\n      return matched;\n    },\n    // sanitize\n    _sanitizeSrc: function _sanitizeSrc($node) {\n      var node = $node.get();\n\n      if (node.getAttribute('src').search(/^data|javascript:/i) !== -1) {\n        node.setAttribute('src', '');\n      }\n    },\n    _sanitizeHref: function _sanitizeHref($node) {\n      var node = $node.get();\n      var str = node.getAttribute('href');\n\n      if (str && str.search(/^javascript:/i) !== -1) {\n        node.setAttribute('href', '');\n      }\n    },\n    _sanitizeEvents: function _sanitizeEvents($node) {\n      $node.removeAttr('onload onerror ontoggle');\n    },\n    // encode\n    _encodeCode: function _encodeCode(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('pre code, pre, code').each(this._encodeNode.bind(this));\n      }.bind(this));\n    },\n    _encodeNode: function _encodeNode($node) {\n      var node = $node.get();\n      var first = node.firstChild;\n      var html = node.innerHTML;\n\n      if (node.tagName === 'PRE' && first && first.tagName === 'CODE') {\n        return;\n      }\n\n      html = html.replace(/xtagstartz/g, '<');\n      html = html.replace(/xtagendz/g, '>');\n      var encoded = this.decodeEntities(html);\n      node.textContent = this._encodeNodeHtml(encoded);\n    },\n    _encodeNodeHtml: function _encodeNodeHtml(html) {\n      html = html.replace(/&nbsp;/g, ' ').replace(/<br\\s?\\/?>/g, '\\n');\n      html = this.opts.code.spaces ? html.replace(/\\t/g, new Array(this.opts.code.spaces + 1).join(' ')) : html;\n      return html;\n    }\n  });\n  ArticleEditor.add('module', 'paragraphizer', {\n    init: function init() {\n      this.remStart = '#####replace';\n      this.remEnd = '#####';\n      var extendTags = ['form', 'figcaption', 'object', 'style', 'script', 'iframe', 'select', 'input', 'textarea', 'button', 'option', 'map', 'area', 'math', 'fieldset', 'legend', 'hgroup', 'nav', 'details', 'menu', 'summary'];\n      this.tags = this.opts.tags.parser.concat(extendTags);\n    },\n    paragraphize: function paragraphize(html) {\n      // build markup tag\n      var tag = 'p';\n      var stored = [];\n      var storedComments = []; // store\n\n      html = this._storeTags(html, stored);\n      html = this.app.content.storeComments(html, storedComments); // trim\n\n      html = html.trim();\n      html = this._trimLinks(html); // replace new lines\n\n      html = html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)$/g, '');\n      html = html.replace(/xparagraphmarkerz$/g, '');\n      html = html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)/g, '\\n');\n      html = html.replace(/xparagraphmarkerz/g, '\\n');\n      html = html.replace(/[\\n]+/g, \"\\n\"); // wrap to tag\n\n      var str = '';\n      var arr = html.split(\"\\n\");\n\n      for (var i = 0; i < arr.length; i++) {\n        str += '<' + tag + '>' + arr[i].trim() + '</' + tag + '>\\n';\n      } // trim new line at the end\n\n\n      html = str.replace(/\\n$/, ''); // clean\n\n      html = html.replace(new RegExp('<' + tag + '>\\\\s+#####', 'gi'), '#####');\n      html = html.replace(new RegExp('<' + tag + '>#####', 'gi'), '#####');\n      html = html.replace(new RegExp('#####</' + tag + '>', 'gi'), '#####'); // restore\n\n      html = this._restoreTags(html, stored);\n      html = this.app.content.restoreComments(html, storedComments); // clean empty\n\n      html = html.replace(/<p(.*?)><\\/?br\\s?\\/?><\\/p>/gi, \"<p$1></p>\");\n      html = html.replace(/<div(.*?)><\\/?br\\s?\\/?><\\/div>/gi, \"<div$1></div>\");\n      return html;\n    },\n    // private\n    _storeTags: function _storeTags(html, stored) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(this.tags.join(', ')).each(function ($node, i) {\n          this._replaceTag($node, i, stored);\n        }.bind(this));\n      }.bind(this));\n    },\n    _restoreTags: function _restoreTags(html, stored) {\n      for (var i = 0; i < stored.length; i++) {\n        var str = stored[i].replace(/\\$/gi, '&#36;');\n        html = html.replace(this.remStart + i + this.remEnd, str);\n      }\n\n      return html;\n    },\n    _replaceTag: function _replaceTag($node, i, stored) {\n      var node = $node.get();\n      var replacement = document.createTextNode(this.remStart + i + this.remEnd + 'xparagraphmarkerz');\n      stored.push(node.outerHTML);\n      node.parentNode.replaceChild(replacement, node);\n    },\n    _trimLinks: function _trimLinks(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('a').each(this._trimLink.bind(this));\n      }.bind(this));\n    },\n    _trimLink: function _trimLink($node) {\n      $node.html($node.html().trim());\n    }\n  });\n  ArticleEditor.add('module', 'parser', {\n    build: function build(html) {\n      this.$layout = this.dom('<div>');\n      this.$layout.html(html);\n      this.$layout.find('[data-' + this.prefix + '-type]').each(this._build.bind(this));\n      return this.$layout;\n    },\n    // parse\n    parse: function parse(html, build) {\n      // parse\n      html = html.trim();\n      html = this.app.broadcastHtml('editor.before.parse', html); // check empty\n\n      if (this.app.content.isEmptyHtml(html)) {\n        html = this.app.block.createHtml();\n      } // clean & parse\n      else {\n          html = this._clean(html);\n          html = this._parse(html);\n        } // broadcast\n\n\n      html = this.app.broadcastHtml('editor.parse', html); // build\n\n      return build !== false ? this.build(html) : html;\n    },\n    parseLine: function parseLine(html, build) {\n      if (html === ' ') {\n        html = '&nbsp;';\n      } else {\n        // broadcast\n        html = this.app.broadcastHtml('editor.before.parse', html); // convert newlines to br\n\n        html = html.replace(/\\r?\\n/g, \"<br>\");\n        html = this.app.content.encodeCode(html);\n        html = this.app.content.sanitize(html);\n        html = this.app.content.removeEmptySpans(html);\n        html = this.app.content.addHttps(html); // broadcast\n\n        html = this.app.broadcastHtml('editor.parse', html);\n      } // build\n\n\n      return build !== false ? this.build(html) : html;\n    },\n    // unparse\n    unparse: function unparse(html) {\n      var stored = {};\n      var storedIndex = 0;\n      html = html.trim();\n      html = this.app.broadcastHtml('editor.before.unparse', html); // empty\n\n      if (this.app.content.isEmptyHtml(html)) {\n        return '';\n      } // revert\n\n\n      html = this._revertForms(html);\n      html = this._revertFrames(html); // store\n\n      html = this.app.content.store(html, 'noneditable', stored, storedIndex);\n      html = this.app.content.store(html, 'embed', stored, storedIndex); // link nofollow\n\n      html = this.app.content.addNofollow(html); // remove selection markers\n\n      html = this.app.content.removeMarkers(html); // restore data style cache\n\n      html = this.app.content.recacheStyle(html); // restore\n\n      html = this.app.content.restore(html, 'noneditable', stored);\n      html = this.app.content.restore(html, 'embed', stored); // remove empty attrs\n\n      html = this.app.content.removeEmptyAttrs(html, ['style', 'class', 'rel', 'alt', 'title']); // unparse\n\n      html = this._unparseAllTags(html);\n      html = this._unparseDataType(html); // remove empty attrs again\n\n      html = this.app.content.removeEmptyAttrs(html, ['style', 'class', 'rel', 'alt', 'title']);\n\n      if (html === '<p></p>') {\n        html = '';\n      } // tidy\n      //html = this.app.content.tidy.html(html);\n      // broadcast\n\n\n      return this.app.broadcastHtml('editor.unparse', html);\n    },\n    // private\n    _build: function _build($node) {\n      var type = $node.attr('data-' + this.prefix + '-type');\n      this.app.create('block.' + type, $node);\n    },\n    _clean: function _clean(html) {\n      var stored = {};\n      var storedIndex = 0;\n      var storedComments = []; // store comments\n\n      html = this.app.content.storeComments(html, storedComments); // encode\n\n      if (this.app.editor.isTextarea()) {\n        html = this.app.content.encodeCode(html);\n      } // sanitize\n\n\n      html = this.app.content.sanitize(html); // convert\n\n      html = this._convertFrames(html);\n      html = this._convertForms(html); // store\n\n      html = this.app.content.store(html, 'noneditable', stored, storedIndex);\n      html = this.app.content.store(html, 'embed', stored, storedIndex); // remove denied tags\n\n      html = this.app.content.removeTags(html, this.opts.tags.denied); // remove doctype tag\n\n      html = this.app.content.removeDoctype(html); // remove style & script tag\n\n      html = this.app.content.removeTagsWithContent(html, ['script', 'style']); // remove comments\n\n      if (this.opts.clean.comments) {\n        html = this.app.content.removeComments(html);\n      } // remove empty spans\n\n\n      html = this.app.content.removeEmptySpans(html); // add https for links and images\n\n      html = this.app.content.addHttps(html); // remove block tags in\n\n      html = this.app.content.removeBlockTagsInside(html, ['th', 'td', 'li', 'dt', 'dd', 'address']); // cache styles for block and inline tags and img\n\n      html = this.app.content.cacheStyle(html); // restore\n\n      html = this.app.content.restore(html, 'noneditable', stored);\n      html = this.app.content.restore(html, 'embed', stored); // restore comments\n\n      html = this.app.content.restoreComments(html, storedComments); // empty or paragraphize\n\n      if (this.app.content.isEmptyHtml(html)) {\n        html = this.app.block.createHtml();\n      } else {\n        html = this.app.content.paragraphize(html);\n      }\n\n      return html;\n    },\n    _parse: function _parse(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        var nodes = this.app.element.getBlocks($w);\n\n        for (var i = 0; i < nodes.length; i++) {\n          this._parseHtml(nodes[i]);\n        } // predefined classes\n\n\n        if (this.opts.classes) {\n          $w.find(this._getPredefinedTags().join(',')).each(this._addPredefinedClass.bind(this));\n        }\n      }.bind(this));\n    },\n    _parseHtml: function _parseHtml(el) {\n      var tag = el.tagName.toLowerCase();\n      var $el = this.dom(el);\n      var type; // check custom\n\n      var parser = this.opts.parserTags;\n\n      if (parser[tag]) {\n        for (var i = 0; i < parser[tag].length; i++) {\n          type = parser[tag][i].call(this.app, $el);\n          if (type) break;\n        }\n      }\n\n      if (!type) {\n        type = this._parseType($el, tag);\n      } // set\n\n\n      if (type) {\n        $el.attr('data-' + this.prefix + '-type', type); // nested\n\n        if (this.opts.nested.indexOf(type) !== -1) {\n          this._parseNested($el);\n        }\n      }\n    },\n    _parseType: function _parseType($el, tag) {\n      var type;\n\n      if ($el.attr('data-' + this.prefix + '-type')) {\n        type = $el.attr('data-' + this.prefix + '-type');\n      } else if (this._isNoneditable($el)) {\n        type = 'noneditable';\n      } else {\n        type = this._parseTypeByTag($el, tag);\n      }\n\n      return type;\n    },\n    _parseNested: function _parseNested($el) {\n      var nodes = this.app.element.getBlocks($el);\n\n      for (var i = 0; i < nodes.length; i++) {\n        this._parseHtml(nodes[i]);\n      }\n    },\n    _parseTypeByTag: function _parseTypeByTag($el, tag) {\n      var type;\n\n      switch (tag) {\n        case 'p':\n          type = 'paragraph';\n\n          if (this._isImageBlock($el, 'p')) {\n            type = 'image';\n          }\n\n          break;\n\n        case 'figure':\n          type = 'embed';\n\n          if (this._isImageBlock($el, 'figure')) {\n            type = 'image';\n          } else if (this._hasChild($el, 'pre')) {\n            type = 'code';\n          } else if (this._hasChild($el, 'blockquote')) {\n            type = 'quote';\n          }\n\n          break;\n\n        case 'div':\n          type = 'layer';\n\n          if ($el.attr('data-' + this.prefix + '-type')) {\n            type = false;\n          } else if (this._isGridBlock($el)) {\n            type = 'grid';\n          } else if (this._isColumnBlock($el)) {\n            type = 'column';\n          } else if (this._isTextBlock($el)) {\n            type = 'text';\n          } else if (this._isCardBlock($el)) {\n            type = 'card';\n          } else if (this._isImageBlock($el, 'div')) {\n            type = 'image';\n          }\n\n          break;\n\n        case 'h1':\n        case 'h2':\n        case 'h3':\n        case 'h4':\n        case 'h5':\n        case 'h6':\n          type = 'heading';\n          break;\n\n        case 'blockquote':\n          type = 'quote';\n          break;\n\n        case 'table':\n          type = 'table';\n          break;\n\n        case 'pre':\n          type = 'code';\n          break;\n\n        case 'hr':\n          type = 'line';\n          break;\n\n        case 'dl':\n          type = 'dlist';\n          break;\n\n        case 'address':\n          type = 'address';\n          break;\n\n        case 'ul':\n        case 'ol':\n          type = 'list';\n          break;\n\n        case 'main':\n        case 'section':\n        case 'header':\n        case 'footer':\n        case 'aside':\n        case 'article':\n          type = 'layer';\n          break;\n\n        default:\n          break;\n      }\n\n      return type;\n    },\n    // is\n    _isNoneditable: function _isNoneditable($el) {\n      return $el.hasClass(this.opts.noneditable.classname);\n    },\n    _isColumnBlock: function _isColumnBlock($el) {\n      if (!this.opts.grid) return;\n      var $parent = $el.parent();\n\n      if ($parent.length !== 0 && $parent.attr('data-' + this.prefix + '-type') === 'grid') {\n        return true;\n      }\n    },\n    _isGridBlock: function _isGridBlock($el) {\n      if (!this.opts.grid) return;\n      return $el.hasClass(this.opts.grid.classname);\n    },\n    _isTextBlock: function _isTextBlock($el) {\n      return this.opts.text && $el.hasClass(this.opts.text.classname);\n    },\n    _isCardBlock: function _isCardBlock($el) {\n      return this.opts.card && $el.hasClass(this.opts.card.classname);\n    },\n    _isImageBlock: function _isImageBlock($el, tag) {\n      var $img = $el.find('img');\n      if ($img.length === 0) return;\n      if (tag === 'div' && $img.closest('figure').length !== 0) return;\n      var $target = $img;\n      var $parent = $img.parent();\n      var parentTag = $parent.length !== 0 ? $parent.get().tagName : false;\n\n      if (parentTag && (parentTag === 'A' || parentTag === 'SPAN')) {\n        $target = $parent;\n      } else if (parentTag && $parent.get() !== $el.get()) {\n        return;\n      }\n\n      if ($target.prevElement().length !== 0) return;\n      if (tag !== 'figure' && $target.nextElement().length !== 0) return;\n      return true;\n    },\n    // has\n    _hasChild: function _hasChild($el, tag) {\n      if (tag === 'pre') {\n        var $pre = $el.find('pre');\n\n        if ($pre.length !== 0) {\n          return true;\n        }\n      } else if (tag === 'blockquote') {\n        var $quote = $el.find('blockquote');\n        var $script = $el.find('script');\n\n        if ($script.length === 0 && $quote.length !== 0) {\n          return true;\n        }\n      }\n    },\n    // get\n    _getPredefinedTags: function _getPredefinedTags() {\n      var tags = [];\n\n      for (var z in this.opts.classes) {\n        tags.push(z);\n      }\n\n      return tags;\n    },\n    // add\n    _addPredefinedClass: function _addPredefinedClass($node) {\n      var tag = $node.get().tagName.toLowerCase();\n\n      if (typeof this.opts.classes[tag] !== 'undefined') {\n        $node.addClass(this.opts.classes[tag]);\n      }\n    },\n    // unparse\n    _unparseAllTags: function _unparseAllTags(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('*').removeAttr('contenteditable data-gramm_editor'); // remove images states\n\n        if (!this.opts.image.states) {\n          $w.find('img').removeAttr('data-image');\n        }\n      }.bind(this));\n    },\n    _unparseDataType: function _unparseDataType(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        var $elms = $w.find('[data-' + this.prefix + '-type]');\n        $elms.removeAttr('data-' + this.prefix + '-first-level data-' + this.prefix + '-parsed');\n        $elms.removeClass(this.prefix + '-block-focus ' + this.prefix + '-block-multiple-focus ' + this.prefix + '-block-multiple-hover ' + this.prefix + '-editable-pause');\n        $elms.removeClass(this.prefix + '-empty-layer');\n        $elms.each(this._unparseByType.bind(this));\n        $elms.removeAttr('data-' + this.prefix + '-type');\n        $w.find('figcaption').removeAttr('data-' + this.prefix + '-type data-placeholder').each(this.app.content._removeEmptyTag.bind(this));\n      }.bind(this));\n    },\n    _unparseByType: function _unparseByType($node) {\n      var type = $node.attr('data-' + this.prefix + '-type');\n\n      if (this.opts.parser[type] && this.opts.parser[type].unparse) {\n        this.opts.parser[type].unparse.call(this.app, $node);\n      }\n    },\n    // convert\n    _convertFrames: function _convertFrames(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('iframe').each(this._convertFrame.bind(this));\n      }.bind(this));\n    },\n    _convertForms: function _convertForms(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('form').each(this._convertForm.bind(this));\n      }.bind(this));\n    },\n    _convertFrame: function _convertFrame($node) {\n      if ($node.closest('figure').length === 0) {\n        $node.wrap('<figure>');\n        $node.parent().addClass(this.prefix + '-figure-iframe');\n      }\n    },\n    _convertForm: function _convertForm($node) {\n      var $el = this.app.element.replaceToTag($node, 'figure');\n      $el.addClass(this.prefix + '-figure-form');\n      $el.attr('data-' + this.prefix + '-type', 'form');\n    },\n    // revert\n    _revertFrames: function _revertFrames(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('.' + this.prefix + '-figure-iframe').each(this._revertFrame.bind(this));\n      }.bind(this));\n    },\n    _revertForms: function _revertForms(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('.' + this.prefix + '-figure-form').each(this._revertForm.bind(this));\n      }.bind(this));\n    },\n    _revertFrame: function _revertFrame($node) {\n      var $figcaption = $node.find('figcaption');\n\n      if ($figcaption.length !== 0) {\n        $node.removeClass(this.prefix + '-figure-iframe');\n      } else {\n        $node.unwrap();\n      }\n    },\n    _revertForm: function _revertForm($node) {\n      var $el = this.app.element.replaceToTag($node, 'form');\n      $el.removeClass(this.prefix + '-figure-form');\n    }\n  });\n  ArticleEditor.add('module', 'element', {\n    // is\n    is: function is(el, type, extend) {\n      var res = false;\n      var node = type === 'text' ? el : this._getNode(el);\n\n      if (type === 'inline') {\n        res = this._isElement(node) && this._isInlineTag(node.tagName, extend);\n      } else if (type === 'block') {\n        res = this._isElement(node) && this._isBlockTag(node.tagName, extend);\n      } else if (type === 'element') {\n        res = this._isElement(node);\n      } else if (type === 'text') {\n        res = typeof node === 'string' && !/^\\s*<(\\w+|!)[^>]*>/.test(node) ? true : this.isTextNode(node);\n      } else if (type === 'list') {\n        res = this._isElement(node) && ['ul', 'ol'].indexOf(node.tagName.toLowerCase()) !== -1;\n      } else if (type === 'heading') {\n        res = this._isElement(node) && ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].indexOf(node.tagName.toLowerCase()) !== -1;\n      }\n\n      return res;\n    },\n    isEmptyOrImageInline: function isEmptyOrImageInline(el) {\n      var node = this.dom(el).get();\n\n      if (!node || node.nodeType === 3) {\n        return false;\n      }\n\n      var tag = node.tagName.toLowerCase();\n      var tags = ['svg', 'img'];\n      var noeditattr = node.getAttribute('contenteditable') === 'false';\n      var isInline = this.is(node, 'inline');\n\n      if (isInline && this.isEmpty(node) || isInline && noeditattr || tags.indexOf(tag) !== -1) {\n        return true;\n      }\n\n      return false;\n    },\n    isEmpty: function isEmpty(el) {\n      var node = this._getNode(el);\n\n      if (node) {\n        return node.nodeType === 3 ? node.textContent.trim().replace(/\\n/, '') === '' : node.innerHTML === '';\n      }\n\n      return false;\n    },\n    isTag: function isTag(el, tag) {\n      return this._getNode(el).tagName.toLowerCase() === tag;\n    },\n    isTextNode: function isTextNode(el) {\n      var node = this._getNode(el);\n\n      return node && node.nodeType && node.nodeType === 3;\n    },\n    isVisible: function isVisible(el) {\n      var node = this._getNode(el);\n\n      return !!(node.offsetWidth || node.offsetHeight || node.getClientRects().length);\n    },\n    isScrollVisible: function isScrollVisible(el, tolerance) {\n      var $scrollTarget = this.app.scroll.getTarget();\n      var $el = this.dom(el);\n      var docViewTop = $scrollTarget.scrollTop();\n      var docViewBottom = docViewTop + $scrollTarget.height();\n      var elemTop = $el.offset().top;\n      tolerance = tolerance || 0;\n      return elemTop <= docViewBottom;\n    },\n    // get\n    getDataBlock: function getDataBlock(el) {\n      return this.dom(el).closest('[data-' + this.prefix + '-type]');\n    },\n    getType: function getType(el) {\n      return this.dom(el).attr('data-' + this.prefix + '-type');\n    },\n    getAllInlines: function getAllInlines(inline) {\n      var inlines = [];\n      var node = inline;\n\n      while (node) {\n        if (this.is(node, 'inline')) {\n          inlines.push(node);\n        }\n\n        node = node.parentNode;\n      }\n\n      return inlines;\n    },\n    // scroll\n    scrollTo: function scrollTo($el, tolerance) {\n      if (!this.isScrollVisible($el)) {\n        tolerance = tolerance || 60;\n        var offset = $el.offset();\n        var $target = this.app.scroll.getTarget();\n        var value = offset.top - tolerance;\n        $target.scrollTop(value);\n        setTimeout(function () {\n          $target.scrollTop(value);\n        }, 1);\n      }\n    },\n    // replace\n    replaceToTag: function replaceToTag(el, tag) {\n      return this.dom(el).replaceWith(function (node) {\n        var $el = this.dom('<' + tag + '>').append(node.innerHTML);\n\n        if (node.attributes) {\n          var attrs = node.attributes;\n\n          for (var i = 0; i < attrs.length; i++) {\n            $el.attr(attrs[i].nodeName, attrs[i].value);\n          }\n        }\n\n        return $el;\n      }.bind(this));\n    },\n    // split\n    split: function split(el) {\n      var $el = this.dom(el);\n      el = $el.get();\n      var tag = el.tagName.toLowerCase();\n      var fragment = this.app.content.extractHtmlFromCaret(el);\n\n      if (fragment.nodeType && fragment.nodeType === 11) {\n        fragment = this.dom(fragment.childNodes);\n      }\n\n      var $secondPart = this.dom('<' + tag + ' />');\n      $secondPart = this.cloneAttrs(el, $secondPart);\n      $secondPart.append(fragment);\n      $el.after($secondPart);\n      var $last = $el.children().last();\n\n      if (this.is($last, 'inline')) {\n        var html = $last.html();\n        html = this.app.utils.removeInvisibleChars(html);\n\n        if (html === '') {\n          $last.remove();\n        }\n      }\n\n      var type = this.getType($secondPart);\n\n      if (type) {\n        this.app.create('block.' + type, $secondPart, true);\n      }\n\n      if ($el.html() === '') $el.remove();\n      return $secondPart;\n    },\n    // clone\n    cloneEmpty: function cloneEmpty(el) {\n      var $el = this.dom(el);\n      var tag = $el.get().tagName.toLowerCase();\n      var $clone = this.dom('<' + tag + '>');\n      return $clone;\n    },\n    cloneAttrs: function cloneAttrs(elFrom, elTo) {\n      var $elTo = this.dom(elTo);\n\n      var attrs = this._getNode(elFrom).attributes;\n\n      var len = attrs.length;\n\n      while (len--) {\n        var attr = attrs[len];\n        $elTo.attr(attr.name, attr.value);\n      }\n\n      return $elTo;\n    },\n    // attrs\n    getAttrs: function getAttrs(el) {\n      var node = this._getNode(el);\n\n      var attr = {};\n\n      if (node.attributes != null && node.attributes.length) {\n        for (var i = 0; i < node.attributes.length; i++) {\n          var val = node.attributes[i].nodeValue;\n          val = this._isNumber(val) ? parseFloat(val) : this._getBooleanFromStr(val);\n          attr[node.attributes[i].nodeName] = val;\n        }\n      }\n\n      return attr;\n    },\n    removeEmptyAttrs: function removeEmptyAttrs(el, attrs) {\n      var $el = this.dom(el);\n      var name = attrs.join(' ');\n      var res = false;\n\n      if (typeof $el.attr(name) === 'undefined' || $el.attr(name) === null) {\n        res = true;\n      } else if ($el.attr(name) === '') {\n        $el.removeAttr(name);\n        res = true;\n      }\n\n      return res;\n    },\n    // blocks\n    getBlocks: function getBlocks(el, parsertags, extendtags) {\n      var node = this._getNode(el);\n\n      var nodes = node.childNodes;\n      var finalNodes = [];\n      var tags = parsertags || this.opts.tags.parser;\n\n      if (extendtags) {\n        tags = this.app.utils.extendArray(tags, extendtags);\n      }\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].nodeType === 1 && tags.indexOf(nodes[i].tagName.toLowerCase()) !== -1) {\n          finalNodes.push(nodes[i]);\n        }\n      }\n\n      return finalNodes;\n    },\n    hasBlocks: function hasBlocks(el) {\n      return this.getBlocks(el).length !== 0;\n    },\n    // siblings\n    hasTextSiblings: function hasTextSiblings(el) {\n      var node = this._getNode(el);\n\n      var hasPrev = node.previousSibling && node.previousSibling.nodeType === 3 && !this.isEmpty(node.previousSibling);\n      var hasNext = node.nextSibling && node.nextSibling.nodeType === 3 && !this.isEmpty(node.nextSibling);\n      return hasPrev || hasNext;\n    },\n    // private\n    _getNode: function _getNode(el) {\n      return this.dom(el).get();\n    },\n    _getBooleanFromStr: function _getBooleanFromStr(str) {\n      if (str === 'true') return true;else if (str === 'false') return false;\n      return str;\n    },\n    _isBlockTag: function _isBlockTag(tag, extend) {\n      var arr = this.app.utils.extendArray(this.opts.tags.block, extend);\n      return arr.indexOf(tag.toLowerCase()) !== -1;\n    },\n    _isInlineTag: function _isInlineTag(tag, extend) {\n      var arr = this.app.utils.extendArray(this.opts.tags.inline, extend);\n      return arr.indexOf(tag.toLowerCase()) !== -1;\n    },\n    _isElement: function _isElement(node) {\n      return node && node.nodeType && node.nodeType === 1;\n    },\n    _isTag: function _isTag(tag) {\n      return tag !== undefined && tag;\n    },\n    _isNumber: function _isNumber(str) {\n      return !isNaN(str) && !isNaN(parseFloat(str));\n    }\n  });\n  ArticleEditor.add('module', 'blocks', {\n    build: function build() {\n      this._buildFirstLevel();\n    },\n    is: function is() {\n      return this.getSelected().length > 1;\n    },\n    set: function set($block) {\n      $block = $block.closest('[data-' + this.prefix + '-first-level]'); // unset not first level\n\n      this.unsetNotFirstLevel(); // set focus class\n\n      this._setFocus($block);\n\n      setTimeout(function () {\n        this.app.selection.removeAllRanges();\n      }.bind(this), 0); // ui\n\n      this.app.path.build();\n      this.app.toolbar.build();\n      this.app.control.close(); // check all or one selected\n\n      this._checkSelected();\n    },\n    setFirstLevel: function setFirstLevel() {\n      this.app.blocks.getFirstLevel().addClass(this.prefix + '-block-focus');\n    },\n    unset: function unset() {\n      this.getBlocks().removeClass(this.prefix + '-block-focus ' + this.prefix + '-block-multiple-hover');\n    },\n    unsetNotFirstLevel: function unsetNotFirstLevel() {\n      this.getBlocks().not('[data-' + this.prefix + '-first-level]').removeClass(this.prefix + '-block-focus');\n    },\n    unsetHover: function unsetHover() {\n      this.getBlocks().removeClass(this.prefix + '-block-multiple-hover');\n    },\n    getBlocks: function getBlocks() {\n      return this.app.editor.getLayout().find('[data-' + this.prefix + '-type]');\n    },\n    getFirstLevel: function getFirstLevel() {\n      return this.app.editor.getLayout().find('[data-' + this.prefix + '-first-level]');\n    },\n    getEditableBlocks: function getEditableBlocks() {\n      return this.app.editor.getLayout().find('[contenteditable=true]');\n    },\n    getSelected: function getSelected() {\n      return this.app.editor.getLayout().find('.' + this.prefix + '-block-focus');\n    },\n    getFirst: function getFirst() {\n      return this.getBlocks().first().dataget('instance');\n    },\n    getFirstSelected: function getFirstSelected() {\n      return this.getSelected().first().dataget('instance');\n    },\n    getLast: function getLast() {\n      return this.getBlocks().last().dataget('instance');\n    },\n    getLastSelected: function getLastSelected() {\n      return this.getSelected().last().dataget('instance');\n    },\n    pauseEditableBlocks: function pauseEditableBlocks() {\n      this.getEditableBlocks().attr('contenteditable', false).addClass(this.prefix + '-editable-pause');\n    },\n    runEditableBlocks: function runEditableBlocks() {\n      var $blocks = this.app.editor.getLayout().find('.' + this.prefix + '-editable-pause');\n      $blocks.attr('contenteditable', true).removeClass(this.prefix + '-editable-pause');\n    },\n    removeSelected: function removeSelected(traverse) {\n      var last = this.getLastSelected();\n      var next;\n\n      if (traverse !== false && last) {\n        next = last.getNext();\n      } // remove\n\n\n      this.getSelected().each(this._removeSelectedBlock.bind(this)); // traverse\n\n      if (next) {\n        this.app.block.set(next, 'start');\n      }\n    },\n    // private\n    _buildFirstLevel: function _buildFirstLevel() {\n      var name = 'data-' + this.prefix + '-first-level';\n      var $layout = this.app.editor.getLayout();\n      $layout.find('[' + name + ']').removeAttr(name);\n      $layout.children('[data-' + this.prefix + '-type]').attr(name, true);\n    },\n    _checkSelected: function _checkSelected() {\n      var $all = this.getFirstLevel();\n      var $selected = this.getSelected();\n\n      if ($selected.length === 0) {\n        this.unsetHover();\n        this.app.block.unset();\n      } else if ($selected.length === 1) {\n        this.unsetHover();\n        this.app.block.set($selected.eq(0), false, true);\n      } else if ($all.length === $selected.length) {\n        this.unsetHover();\n        this.app.editor.selectAll();\n      } else {\n        this.app.editor.unsetSelectAllClass();\n      }\n    },\n    _setFocus: function _setFocus($block) {\n      var func = $block.hasClass(this.prefix + '-block-focus') ? 'removeClass' : 'addClass';\n      $block[func](this.prefix + '-block-focus');\n      $block.removeClass(this.prefix + '-block-multiple-hover');\n    },\n    _removeSelectedBlock: function _removeSelectedBlock($node) {\n      var instance = $node.dataget('instance');\n      instance.remove({\n        traverse: false\n      });\n    }\n  });\n  ArticleEditor.add('module', 'block', {\n    init: function init() {\n      this.instance = false;\n      this.$block = false;\n    },\n    create: function create(html) {\n      var instance = this.app.create('block.' + this.opts.editor.markup);\n      if (html) instance.getBlock().html(html);\n      return instance;\n    },\n    createHtml: function createHtml(html) {\n      return this.create(html).getOuterHtml();\n    },\n    is: function is($el) {\n      return $el ? this._isBlockActive($el) : this.get();\n    },\n    get: function get() {\n      return this.instance;\n    },\n    set: function set(el, caret, force) {\n      // is instance\n      if (el.isBlock) {\n        el = el.getBlock();\n      } // check if active\n\n\n      if (force !== true && this._isBlockActive(el)) return; // unset\n\n      this.unset(); // set\n\n      this.instance = this._getInstance(el);\n      this.$block = this.instance.getBlock();\n      this.$block.addClass(this.prefix + '-block-focus'); // caret\n\n      this._setCaret(caret); // ui\n\n\n      this.app.path.build();\n      this.app.toolbar.build();\n      this.app.control.build(); // broadcast\n\n      this.app.broadcast('block.set');\n    },\n    unset: function unset() {\n      if (!this.instance) return;\n      this.instance = false;\n      this.$block = false; // unset\n\n      this.app.blocks.unset();\n      this.app.editor.unsetSelectAllClass(); // ui\n\n      this.app.path.build();\n      this.app.toolbar.build();\n      this.app.control.close(); // broadcast\n\n      this.app.broadcast('block.unset');\n    },\n    duplicate: function duplicate() {\n      if (!this._isAction()) return;\n      var instance = this.get();\n      var clone = instance.duplicate();\n      var newInstance = instance.insert({\n        instance: clone,\n        position: 'after',\n        caret: 'start'\n      });\n      this.app.broadcast('block.duplicate', {\n        instance: newInstance\n      });\n      return newInstance;\n    },\n    moveUp: function moveUp() {\n      if (!this._isAction()) return;\n      this.get().moveUp();\n    },\n    moveDown: function moveDown() {\n      if (!this._isAction()) return;\n      this.get().moveDown();\n    },\n    change: function change(instance) {\n      if (!this.is()) return;\n      var current = this.get();\n      var $block = current.getBlock();\n      var $newBlock = instance.getBlock();\n      $block.after($newBlock);\n      $block.remove(); // rebuild\n\n      this.app.editor.build(); // set\n\n      this.set(instance); // broadcast\n\n      this.app.broadcast('block.change', {\n        instance: instance\n      });\n    },\n    add: function add(params) {\n      this.app.popup.close();\n      var current = this.get();\n      var remove = false;\n      var position = false; // all selected\n\n      if (this.app.editor.isAllSelected()) {\n        current = this.create();\n        this.app.editor.unsetSelectAllClass();\n        this.app.editor.getLayout().html('').append(current.getBlock());\n        position = 'after';\n        remove = true;\n      } // blocks\n      else if (this.app.blocks.is()) {\n          current = this.app.blocks.getLastSelected();\n          position = 'after';\n        } // not selected\n        else if (!current) {\n            if (this.opts.editor.add === 'top') {\n              current = this.app.blocks.getFirst();\n              position = 'before';\n            } else {\n              current = this.app.blocks.getLast();\n              position = 'after';\n            }\n          } // like variable\n          else if (current.isInlineBlock()) {\n              var parent = current.getParent();\n              this.app.caret.set(current.getBlock(), 'after');\n              this.app.block.set(parent);\n              current = this.get();\n            } // empty emptiable\n            else if (current.isEmptiable() && current.isEmpty()) {\n                var $block = current.getBlock();\n                $block.removeClass(this.prefix + '-empty-layer');\n                $block.html('');\n                position = 'append';\n              } // position\n\n\n      position = params.position ? params.position : position; // create\n\n      var newInstance = params.instance ? params.instance : this.app.create('block.' + params.name, params.source); // insert\n\n      current.insert({\n        instance: newInstance,\n        position: position,\n        caret: params.caret ? params.caret : 'end'\n      });\n\n      if (remove) {\n        current.remove();\n      }\n\n      return newInstance;\n    },\n    format: function format(params) {\n      this.app.format.set(params);\n    },\n    remove: function remove(params) {\n      var instance = this.get();\n      if (!instance) return;\n      var type = instance.getType();\n      var parent = instance.getParent();\n      var imageUrl = type === 'image' ? instance.getSrc() : false;\n      var isTraverse = params && typeof params.tarverse !== 'undefined' && params.tarverse === false ? false : true;\n\n      if (isTraverse) {\n        var next = instance.getNext();\n        var prev = instance.getPrev();\n        instance.remove();\n\n        if (next) {\n          this.app.block.set(next, 'start');\n        } else if (prev) {\n          this.app.block.set(prev, 'end');\n        } else {\n          this.unset();\n        }\n      } else {\n        this.unset();\n        instance.remove();\n      } // broadcast image\n\n\n      if (type === 'image') {\n        this.app.broadcast('image.remove', {\n          url: imageUrl\n        });\n      } // broadcast\n\n\n      this.app.broadcast('block.remove', {\n        type: type,\n        parent: parent\n      }); // check empty\n\n      if (this.app.editor.isEmpty()) {\n        this.app.editor.setEmpty();\n      }\n    },\n    observe: function observe(obj, name) {\n      var types = ['line', 'quote', 'layer', 'code'];\n      if (types.indexOf(name) !== -1 && !this.opts[name]) return false; // align / valign / outset\n\n      if (name === 'alignment' && !this.opts.align) return false;\n      if (name === 'valign' && !this.opts.valign) return false;\n      if (name === 'outset' && !this.opts.outset) return false;\n    },\n    observeCard: function observeCard(obj, name) {\n      if (name === 'image') {\n        var instance = this.get();\n        if (!instance.hasImage()) return false;\n      }\n    },\n    popup: function popup(params, button, name) {\n      // alignment\n      var form;\n\n      if (name === 'alignment') {\n        form = this._buildSegments('align', 'alignment');\n      } // valign\n      else if (name === 'valign') {\n          form = this._buildSegments('valign');\n        } // outset\n        else if (name === 'outset') {\n            form = this._buildSegments('outset');\n          } // popup\n\n\n      this.app.popup.create(name, {\n        setter: 'block.setData',\n        getter: 'block.getData',\n        form: form\n      });\n      this.app.popup.open({\n        button: button\n      });\n    },\n    // data\n    getData: function getData() {\n      if (!this.is()) return;\n      var instance = this.get();\n      return instance.getData();\n    },\n    setData: function setData(stack) {\n      if (!this.is()) return;\n      var data = stack.getData();\n      var instance = this.get();\n      instance.setData(data);\n    },\n    // private\n    _isBlockActive: function _isBlockActive(el) {\n      if (this.app.blocks.is()) return false;\n      return this.instance && this.dom(el).get() === this.$block.get();\n    },\n    _isAction: function _isAction() {\n      return !this.app.blocks.is() && this.is();\n    },\n    _buildSegments: function _buildSegments(name, title) {\n      var form = {};\n      var segments = {};\n      var obj = this.opts[name];\n\n      for (var key in obj) {\n        if (!obj[key]) continue;\n        segments[key] = {\n          name: obj[key],\n          prefix: name\n        };\n      }\n\n      title = title || name;\n      form[name] = {\n        type: 'segment',\n        label: '## form.' + title + ' ##',\n        segments: segments\n      };\n      return form;\n    },\n    _appendToEmptyBlock: function _appendToEmptyBlock(instance) {\n      var emptyBlock = this.app.block.create();\n      emptyBlock.append(instance);\n      return emptyBlock.getBlock();\n    },\n    _getInstance: function _getInstance(el) {\n      return this.dom(el).dataget('instance');\n    },\n    _setCaret: function _setCaret(caret) {\n      if (this.instance.isEditable()) {\n        if (caret) this.app.caret.set(this.$block, caret);\n      } else {\n        this.app.scroll.save();\n        this.app.editor.getWin().focus();\n        this.$block.focus();\n        setTimeout(function () {\n          this.app.selection.removeAllRanges();\n        }.bind(this), 0);\n        this.app.scroll.restore();\n      }\n    }\n  });\n  ArticleEditor.add('module', 'event', {\n    init: function init() {\n      // local\n      this.dragoverEvent = false;\n      this.pressedCmd = false;\n      this.isPopupMouseUp = false; // events\n\n      this.events = {\n        frame: ['click', 'contextmenu', 'touchstart', 'mouseover', 'mouseup', 'mousedown', 'keydown', 'keyup', 'paste', 'copy', 'cut', 'drop', 'dragstart', 'dragover', 'dragleave'],\n        doc: ['keydown', 'mousedown', 'click'],\n        win: ['focus']\n      };\n    },\n    run: function run() {\n      this._runEvents();\n    },\n    pause: function pause() {\n      this._pauseEvents();\n    },\n    build: function build() {\n      this._buildTargets();\n\n      this._buildPreventLinks();\n\n      this._buildEvents();\n    },\n    // on\n    onmouseover: function onmouseover(e) {\n      // multiple hover\n      this._buildHover(e); // broadcast\n\n\n      this.app.broadcast('editor.mouseover', {\n        e: e\n      });\n    },\n    oncontextmenu: function oncontextmenu(e) {\n      if (this.pressedCmd) {\n        e.preventDefault();\n\n        var $block = this._getBlock(e);\n\n        this.app.blocks.set($block);\n      }\n    },\n    onclick: function onclick(e) {\n      this.app.broadcast('editor.click', {\n        e: e\n      });\n    },\n    onmouseup: function onmouseup(e) {\n      // state\n      this.app.state.add(e); // broadcast\n\n      this.app.broadcast('editor.mouseup', {\n        e: e\n      }); // ui\n\n      this.app.toolbar.observe();\n    },\n    onmousedown: function onmousedown(e) {\n      if (this.app.popup.isOpen()) {\n        this.app.popup.close();\n      }\n\n      this._setBlock(e);\n\n      this._setCaretInline(e);\n\n      this.app.placeholder.handleClick(e); // state\n\n      this.app.state.add(e); // broadcast\n\n      this.app.broadcast('editor.mousedown', {\n        e: e\n      });\n    },\n    ontouchstart: function ontouchstart(e) {\n      // state\n      this.app.state.add(e);\n    },\n    onkeydown: function onkeydown(e) {\n      // broadcast\n      var event = this.app.broadcast('editor.keydown', this._buildEventKeysObj(e));\n      if (event.isStopped()) return e.preventDefault(); // listen undo & redo\n\n      if (this.app.state.listen(e)) {\n        this.pressedCmd = false;\n        return;\n      }\n\n      this.pressedCmd = this._isCmdPressed(e); // esc\n\n      if (this._isEsc(e)) {\n        this.app.block.unset();\n        this.app.selection.removeAllRanges();\n      } // handle shortcut\n\n\n      if (this.app.shortcut.handle(e)) return; // release keydown\n\n      this.app.input.handle(event);\n    },\n    onkeyup: function onkeyup(e) {\n      // broadcast\n      var event = this.app.broadcast('editor.keyup', this._buildEventKeysObj(e));\n      if (event.isStopped()) return e.preventDefault(); // catch tab\n\n      var key = e.which;\n\n      if (key === this.app.keycodes.TAB && !this.app.block.is()) {\n        if (e.target && e.target.tagName === 'BODY') {\n          var $first = this.app.blocks.getFirst();\n          this.app.editor.setFocus();\n          this.app.block.set($first);\n        } else {\n          this._setBlock(e);\n        }\n      }\n\n      this.pressedCmd = false;\n      this.app.blocks.unsetHover(); // ui\n\n      this.app.toolbar.observe();\n    },\n    onpaste: function onpaste(e) {\n      this.app.content.paste(e);\n    },\n    oncopy: function oncopy(e) {\n      this.app.content.copy(e);\n    },\n    oncut: function oncut(e) {\n      this.app.content.cut(e);\n    },\n    ondrop: function ondrop(e) {\n      if (!this.opts.editor.drop) return e.preventDefault(); // broadcast\n\n      var event = this.app.broadcast('editor.drop', {\n        e: e\n      });\n      if (event.isStopped()) return e.preventDefault(); // drop\n\n      var html;\n      var dt = e.dataTransfer;\n      var item = dt.getData('item');\n\n      if (item !== '') {\n        e.preventDefault();\n\n        if (this.opts.draggable && typeof this.opts.draggable[item] !== 'undefined') {\n          html = this.opts.draggable[item];\n        } else {\n          html = this.dom('[data-' + this.prefix + '-drop-item=' + item + ']').html();\n          html = html.trim();\n        } // drop\n\n\n        if (html) {\n          var position = 'after';\n          var $over = this.app.editor.getBody().find('.' + this.prefix + '-draggable-over');\n\n          if ($over.length !== 0) {\n            position = 'append';\n          }\n\n          this.app.content.drop(e, html, position, false);\n        }\n      } else if (this.opts.image && this.opts.image.upload && dt.files !== null && dt.files.length > 0) {\n        e.preventDefault();\n        this.app.image.drop(e, dt);\n      } else {\n        html = dt.getData(\"text/html\");\n        html = html.trim() === '' ? dt.getData('Text') : html; // drop\n\n        this.app.content.drop(e, html);\n      }\n\n      this._removeDragPlaceholder();\n\n      this.app.observer.trigger = true;\n    },\n    ondragstart: function ondragstart(e) {\n      // broadcast\n      this.app.broadcast('editor.dragstart', {\n        e: e\n      });\n    },\n    ondragover: function ondragover(e) {\n      e.preventDefault();\n      this.dragoverEvent = true;\n      this.app.observer.trigger = false;\n\n      this._removeDragPlaceholder(); // data\n\n\n      var types = e.dataTransfer.types;\n\n      if (types.indexOf('item') !== -1) {\n        var $block = this._getBlock(e.target);\n\n        if ($block.length !== 0) {\n          var instance = $block.dataget('instance');\n\n          if (instance.getType('layer') && instance.isEmpty()) {\n            $block.addClass(this.prefix + '-draggable-over');\n          } else {\n            var $pl = this.dom('<div>').addClass(this.prefix + '-draggable-placeholder');\n            $block.after($pl);\n          }\n        }\n      } // broadcast\n\n\n      this.app.broadcast('editor.dragover', {\n        e: e\n      });\n    },\n    ondragleave: function ondragleave(e) {\n      e.preventDefault();\n      this.dragoverEvent = false;\n\n      this._removeDragPlaceholder();\n\n      this.app.observer.trigger = true; // broadcast\n\n      this.app.broadcast('editor.dragleave', {\n        e: e\n      });\n    },\n    // on win\n    onwinfocus: function onwinfocus(e) {\n      if (this._isRemoveRanges()) {\n        setTimeout(function () {\n          this.app.selection.removeAllRanges();\n        }.bind(this), 0);\n        return;\n      }\n    },\n    // on doc\n    ondockeydown: function ondockeydown(e) {\n      if (this._isEsc(e) && this.app.popup.isOpen()) {\n        this.app.popup.close(false);\n      }\n    },\n    ondocmousedown: function ondocmousedown(e) {\n      this.isPopupMouseUp = this.dom(e.target).closest('.' + this.prefix + '-popup-' + this.uuid).length !== 0;\n    },\n    ondocclick: function ondocclick(e) {\n      if (!this._isOutsideEditor(e)) return;\n\n      if (this.app.popup.isOpen()) {\n        if (this.isPopupMouseUp === false) this.app.popup.close(false);\n      } else {\n        this.app.editor.setBlur();\n      }\n\n      this.pressedCmd = false;\n    },\n    // private\n    _buildPreventLinks: function _buildPreventLinks() {\n      var eventname = this.prefix + '-prevent-events';\n      this.$body.on('click.' + eventname + ' dblclick.' + eventname, this._preventLinks.bind(this));\n    },\n    _buildTargets: function _buildTargets() {\n      this.$body = this.app.editor.getBody();\n      this.$win = this.app.editor.getWin();\n    },\n    _buildEventKeysObj: function _buildEventKeysObj(e) {\n      var key = e.which;\n      var arrowKeys = [this.app.keycodes.UP, this.app.keycodes.DOWN, this.app.keycodes.LEFT, this.app.keycodes.RIGHT];\n      var isAlphaKeys = !e.ctrlKey && !e.metaKey && (key >= 48 && key <= 57 || key >= 65 && key <= 90);\n      var k = this.app.keycodes;\n      return {\n        'e': e,\n        'key': key,\n        'ctrl': e.ctrlKey || e.metaKey,\n        'shift': e.shiftKey,\n        'alt': e.altKey,\n        'select': (e.ctrlKey || e.metaKey) && !e.altKey && key === 65,\n        'enter': key === k.ENTER,\n        'space': key === k.SPACE,\n        'esc': key === k.ESC,\n        'tab': key === k.TAB && !e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey,\n        'delete': key === k.DELETE,\n        'backspace': key === k.BACKSPACE,\n        'alpha': isAlphaKeys,\n        'arrow': arrowKeys.indexOf(key) !== -1,\n        'left': key === k.LEFT,\n        'right': key === k.RIGHT,\n        'up': key === k.UP,\n        'down': key === k.DOWN,\n        'left-right': key === k.LEFT || key === k.RIGHT,\n        'up-left': key === k.UP || key === k.LEFT,\n        'down-right': key === k.DOWN || key === k.RIGHT\n      };\n    },\n    _buildEvents: function _buildEvents() {\n      var eventname = this.prefix + '-events';\n\n      this._buildTargetEvents(this.$body, this.events.frame, eventname, '');\n\n      this._buildTargetEvents(this.$win, this.events.win, eventname, 'win');\n\n      this._buildTargetEvents(this.app.$doc, this.events.doc, eventname, 'doc');\n    },\n    _buildTargetEvents: function _buildTargetEvents($target, events, eventname, type) {\n      for (var i = 0; i < events.length; i++) {\n        $target.on(events[i] + '.' + eventname, this['on' + type + events[i]].bind(this));\n      }\n    },\n    _buildHover: function _buildHover(e) {\n      var instance = this.app.block.get(); // check pressed & instance\n\n      if (!this.pressedCmd || !instance) return;\n      var $block = this.dom(e.target).closest('[data-' + this.prefix + '-first-level]');\n      if ($block.length === 0) return; // unset\n\n      this.app.blocks.unsetHover(); // build hover\n\n      if (!$block.hasClass(this.prefix + '-block-focus')) {\n        $block.addClass(this.prefix + '-block-multiple-hover');\n      }\n    },\n    _runEvents: function _runEvents() {\n      var eventname = this.prefix + '-events';\n\n      this._buildTargetEvents(this.$body, this.events.frame, eventname, '');\n\n      this._buildTargetEvents(this.$win, this.events.win, eventname, 'win');\n    },\n    _pauseEvents: function _pauseEvents() {\n      var eventname = this.prefix + '-events';\n\n      if (this.$body) {\n        this.$body.off('.' + eventname);\n        this.$win.off('.' + eventname);\n      }\n    },\n    _getBlock: function _getBlock(target) {\n      return this.dom(target).closest('[data-' + this.prefix + '-type]');\n    },\n    _setCaretInline: function _setCaretInline(e) {\n      var instance = this.app.block.get();\n      var code = false;\n\n      if (instance && instance.isEditable()) {\n        // svg or img\n        if (this.app.element.isEmptyOrImageInline(e.target)) {\n          this.app.caret.set(e.target, 'after');\n        } // code\n        else if (this.app.selection.isCollapsed() && e.target.tagName === 'CODE') {\n            code = true;\n            setTimeout(function () {\n              var current = this.app.selection.getElement();\n\n              if (current && code && current.tagName !== 'CODE') {\n                this.app.caret.set(e.target, 'start');\n                code = false;\n              }\n            }.bind(this), 1);\n          }\n      }\n    },\n    _setBlock: function _setBlock(e) {\n      // set focus event\n      this.app.editor.setFocus();\n      var $block = e ? this._getBlock(e.target) : this.app.selection.getDataBlock();\n      if ($block.length === 0) return; // prevent contenteditable false focus\n\n      if ($block.attr('contenteditable') === false) {\n        e.preventDefault();\n      } // multiple\n\n\n      if (this.pressedCmd) {\n        if (e) e.preventDefault();\n        this.app.blocks.set($block);\n      } // single\n      else {\n          this.app.block.set($block);\n        }\n    },\n    _isRemoveRanges: function _isRemoveRanges() {\n      var instance = this.app.block.get();\n      return this.app.blocks.is() || instance && instance.isInlineBlock();\n    },\n    _isEsc: function _isEsc(e) {\n      return e.which === this.app.keycodes.ESC;\n    },\n    _isOutsideEditor: function _isOutsideEditor(e) {\n      var $target = this.dom(e.target);\n      var targets = ['-container-', '-popup-', '-control-'];\n      return $target.closest('.' + this.prefix + targets.join(this.uuid + ',.' + this.prefix) + this.uuid).length === 0;\n    },\n    _isCmdPressed: function _isCmdPressed(e) {\n      return this.opts.selection.multiple ? (e.ctrlKey || e.metaKey) && !e.shiftKey && !e.altKey : false;\n    },\n    _isLinkClick: function _isLinkClick(e) {\n      return this.dom(e.target).closest('a').length !== 0;\n    },\n    _removeDragPlaceholder: function _removeDragPlaceholder() {\n      var $body = this.app.editor.getBody();\n      $body.find('.' + this.prefix + '-draggable-placeholder').remove();\n      $body.find('.' + this.prefix + '-draggable-over').removeClass(this.prefix + '-draggable-over');\n    },\n    _preventLinks: function _preventLinks(e) {\n      if (this._isLinkClick(e)) e.preventDefault();\n    }\n  });\n  ArticleEditor.add('module', 'selection', {\n    init: function init() {\n      this.savedSelection = false;\n      this.savedMarker = false;\n    },\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    // get\n    get: function get() {\n      var sel = this._getSelection();\n\n      var range = this._getRange(sel);\n\n      var current = this._getCurrent(sel);\n\n      return {\n        selection: sel,\n        range: range,\n        collapsed: this._getCollapsed(sel, range),\n        current: current,\n        parent: this._getParent(current)\n      };\n    },\n    getRange: function getRange() {\n      return this._getRange(this.get().selection);\n    },\n    getNodes: function getNodes(data) {\n      var sel = this.get();\n      var isInline = data && (data.type && data.type === 'inline' || data.tags && data.tags.indexOf('a') !== -1);\n      var func = isInline ? '_getAllRangeNodes' : '_getRangeNodes';\n      var nodes = [];\n\n      if (this.app.editor.isAllSelected()) {\n        nodes = this.app.editor.getLayout().children().getAll();\n      } else {\n        nodes = sel.selection && sel.range ? this[func](sel.range) : nodes;\n      }\n\n      return nodes.length > 0 ? this._filterNodes(nodes, sel.range, isInline, data) : nodes;\n    },\n    getCurrent: function getCurrent() {\n      var sel = this._getSelection();\n\n      return this._getCurrent(sel);\n    },\n    getParent: function getParent() {\n      var current = this.getCurrent();\n      return this._getParent(current);\n    },\n    getElement: function getElement(el) {\n      return this._getElement(el, 'element');\n    },\n    getInline: function getInline(el) {\n      return this._getElement(el, 'inline');\n    },\n    getTopInline: function getTopInline(el) {\n      var node = el ? this.dom(el).get() : this.getCurrent();\n      var inlines = [];\n\n      while (node) {\n        if (this._getElement(node, 'inline')) {\n          inlines.push(node);\n        } else {\n          break;\n        }\n\n        node = node.parentNode;\n      }\n\n      return inlines[inlines.length - 1];\n    },\n    getDataBlock: function getDataBlock(el) {\n      var sel = this._getSelection();\n\n      var node = el || this._getCurrent(sel);\n\n      if (node) {\n        node = this.dom(node).get();\n\n        while (node) {\n          if (node.nodeType === 1 && node.getAttribute('data-' + this.prefix + '-type')) {\n            return this.dom(node);\n          }\n\n          node = node.parentNode;\n        }\n      }\n\n      return this.dom();\n    },\n    getBlock: function getBlock(el) {\n      return this._getElement(el, 'block');\n    },\n    getText: function getText(type, num) {\n      var sel = this.get();\n      var text = false;\n      if (!sel.selection) return false;\n\n      if (type && sel.range) {\n        num = typeof num === 'undefined' ? 1 : num;\n        var el = this.app.editor.getLayout().get();\n        var cloned = sel.range.cloneRange();\n\n        if (type === 'before') {\n          cloned.collapse(true);\n          cloned.setStart(el, 0);\n          text = cloned.toString().slice(-num);\n        } else if (type === 'after') {\n          cloned.selectNodeContents(el);\n          cloned.setStart(sel.range.endContainer, sel.range.endOffset);\n          text = cloned.toString().slice(0, num);\n        }\n      } else {\n        text = sel.selection ? sel.selection.toString() : '';\n      }\n\n      return text;\n    },\n    getHtml: function getHtml() {\n      var html = '';\n      var sel = this.get();\n\n      if (sel.selection) {\n        var cloned = sel.range.cloneContents();\n        var div = document.createElement('div');\n        div.appendChild(cloned);\n        html = div.innerHTML;\n        html = html.replace(/<p><\\/p>$/i, '');\n      }\n\n      return html;\n    },\n    getPosition: function getPosition() {\n      var range = this.getRange();\n      var pos = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0\n      };\n\n      if (this.win.getSelection && range.getBoundingClientRect) {\n        range = range.cloneRange();\n        var offset = range.startOffset - 1;\n        range.setStart(range.startContainer, offset < 0 ? 0 : offset);\n        var rect = range.getBoundingClientRect();\n        pos = {\n          top: rect.top,\n          left: rect.left,\n          width: rect.right - rect.left,\n          height: rect.bottom - rect.top\n        };\n      }\n\n      return pos;\n    },\n    // set\n    set: function set(sel, range) {\n      if (sel) {\n        sel.removeAllRanges();\n        sel.addRange(range);\n      }\n    },\n    setRange: function setRange(range) {\n      this.set(this.win.getSelection(), range);\n    },\n    // is\n    is: function is(el) {\n      if (typeof el !== 'undefined') {\n        var node = this.dom(el).get();\n        var nodes = this.getNodes();\n\n        for (var i = 0; i < nodes.length; i++) {\n          if (nodes[i] === node) return true;\n        }\n      } else {\n        return this.get().selection;\n      }\n\n      return false;\n    },\n    isCollapsed: function isCollapsed() {\n      var sel = this.get();\n      return this._getCollapsed(sel.selection, sel.range);\n    },\n    isIn: function isIn(el) {\n      var node = this.dom(el).get();\n      var current = this.getCurrent();\n      return current && node ? node.contains(current) : false;\n    },\n    isAll: function isAll(el) {\n      var node = this.dom(el).get();\n      var selection = this.win.getSelection();\n\n      var range = this._getRange(selection);\n\n      if (selection.isCollapsed) return false;\n\n      if (this.is(node)) {\n        return typeof node.textContent !== 'undefined' && node.textContent.trim().length === range.toString().trim().length;\n      } else {\n        return false;\n      }\n    },\n    // select\n    select: function select(el) {\n      var node = this.dom(el).get();\n      var range = this.doc.createRange();\n      range.selectNodeContents(node);\n      this.setRange(range);\n    },\n    // remove\n    removeAllRanges: function removeAllRanges() {\n      var sel = this._getSelection();\n\n      if (sel) {\n        sel.removeAllRanges();\n      }\n    },\n    // delete\n    deleteContents: function deleteContents() {\n      var range = this.getRange();\n\n      if (!this.isCollapsed() && range) {\n        range.deleteContents();\n      }\n    },\n    // collapse\n    collapse: function collapse(type) {\n      type = type || 'start';\n      var sel = this.get();\n\n      if (sel.selection && !sel.collapsed) {\n        if (type === 'start') sel.selection.collapseToStart();else sel.selection.collapseToEnd();\n      }\n    },\n    // save & restore\n    save: function save(el) {\n      if (!el) {\n        var instance = this.app.block.get();\n\n        if (instance) {\n          el = instance.getBlock();\n        }\n      }\n\n      this.savedSelection = {\n        el: el,\n        offset: this.app.offset.get(el)\n      };\n    },\n    restore: function restore() {\n      if (this.savedMarker) return;\n      if (!this.savedSelection) return;\n      this.app.editor.getWinNode().focus();\n      var el = this.savedSelection.el;\n      var instance = this.dom(el).dataget('instance');\n\n      if (instance) {\n        this.app.block.set(el);\n      }\n\n      if (el) {\n        el.focus();\n        this.app.offset.set(el, this.savedSelection.offset);\n      }\n\n      this.savedSelection = false;\n    },\n    saveMarker: function saveMarker() {\n      this.savedMarker = true;\n      this.app.marker.insert();\n    },\n    restoreMarker: function restoreMarker() {\n      this.app.marker.restore();\n      this.savedMarker = false;\n      this.savedSelection = false;\n    },\n    // private\n    _getSelection: function _getSelection() {\n      var sel = this.win.getSelection();\n      return sel.rangeCount > 0 ? sel : false;\n    },\n    _getRange: function _getRange(selection) {\n      return selection ? selection.rangeCount > 0 ? selection.getRangeAt(0) : false : false;\n    },\n    _getCurrent: function _getCurrent(selection) {\n      return selection ? selection.anchorNode : false;\n    },\n    _getParent: function _getParent(current) {\n      return current ? current.parentNode : false;\n    },\n    _getElement: function _getElement(el, type) {\n      var sel = this._getSelection();\n\n      if (sel) {\n        var node = el || this._getCurrent(sel);\n\n        node = this.dom(node).get();\n\n        while (node) {\n          if (this.app.element.is(node, type)) {\n            return node;\n          }\n\n          node = node.parentNode;\n        }\n      }\n\n      return false;\n    },\n    _getCollapsed: function _getCollapsed(selection, range) {\n      var collapsed = false;\n      if (selection && selection.isCollapsed) collapsed = true;else if (range && range.toString().length === 0) collapsed = true;\n      return collapsed;\n    },\n    _getNextNode: function _getNextNode(node) {\n      if (node.firstChild) return node.firstChild;\n\n      while (node) {\n        if (node.nextSibling) return node.nextSibling;\n        node = node.parentNode;\n      }\n    },\n    _getRangeNodes: function _getRangeNodes(range, all) {\n      var start = range.startContainer.childNodes[range.startOffset] || range.startContainer;\n      var end = range.endContainer.childNodes[range.endOffset] || range.endContainer;\n      var commonAncestor = range.commonAncestorContainer;\n      var nodes = [];\n      var node;\n\n      if (all) {\n        if (!this.app.editor.isLayout(start)) {\n          nodes.push(start);\n        }\n\n        for (node = start.parentNode; node; node = node.parentNode) {\n          if (this.app.editor.isLayout(node)) break;\n          nodes.push(node);\n          if (node === commonAncestor) break;\n        }\n\n        nodes.reverse();\n\n        for (node = start; node; node = this._getNextNode(node)) {\n          if (node.nodeType !== 3 && this.dom(node.parentNode).closest(commonAncestor).length === 0) break;\n          nodes.push(node);\n          if (node === end) break;\n        }\n      } else {\n        // push first element\n        if (start.nodeType === 3) {\n          nodes.push(this.getBlock());\n        }\n\n        for (node = start; node; node = this._getNextNode(node)) {\n          if (node === commonAncestor) break;\n          if (node.nodeType !== 3 && this.dom(node.parentNode).closest(commonAncestor).length === 0) break;\n          nodes.push(node);\n          if (node === end) break;\n        }\n      }\n\n      return nodes;\n    },\n    _getAllRangeNodes: function _getAllRangeNodes(range) {\n      return this._getRangeNodes(range, true);\n    },\n    _filterNodes: function _filterNodes(nodes, range, isInline, data) {\n      var selected = this.getText();\n      selected = selected.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\n      var finalNodes = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        var push = true;\n\n        if (data) {\n          push = data.types ? this._filterByTypes(push, data, nodes[i]) : push;\n          push = data.selected ? this._filterBySelected(push, data, nodes[i], range, selected) : push;\n          push = data.type ? this._filterByType(push, data, nodes[i], isInline) : push;\n          push = data.tags ? this._filterByTags(push, data, nodes[i]) : push;\n        }\n\n        if (push) {\n          finalNodes.push(nodes[i]);\n        }\n      }\n\n      return finalNodes;\n    },\n    _filterByTypes: function _filterByTypes(push, data, node) {\n      var type;\n\n      if (data.types === true) {\n        type = this.app.element.getType(node);\n\n        if (!type) {\n          push = false;\n        }\n      } else {\n        type = this.app.element.getType(node);\n\n        if (data.types.indexOf(type) === -1) {\n          push = false;\n        }\n      }\n\n      return push;\n    },\n    _filterByType: function _filterByType(push, data, node, isInline) {\n      if (isInline) {\n        if (data.links) {\n          if (!this.app.element.is(node, data.type)) {\n            push = false;\n          }\n        } else {\n          if (node.nodeType === 1 && node.tagName === 'A' || !this.app.element.is(node, data.type)) {\n            push = false;\n          }\n        }\n      } else if (!this.app.element.is(node, data.type)) {\n        push = false;\n      }\n\n      return push;\n    },\n    _filterByTags: function _filterByTags(push, data, node) {\n      var isTagName = typeof node.tagName !== 'undefined';\n\n      if (!isTagName) {\n        push = false;\n      } else if (isTagName && data.tags.indexOf(node.tagName.toLowerCase()) === -1) {\n        push = false;\n      }\n\n      return push;\n    },\n    _filterBySelected: function _filterBySelected(push, data, node, range, selected) {\n      if (data.selected === true && !this._containsNodeText(range, node)) {\n        push = false;\n      } else if (data.selected === 'inside') {\n        if (node.nodeType === 1 && node.tagName === 'A') {\n          push = true;\n        } else if (!this._isTextSelected(node, selected)) {\n          push = false;\n        }\n      }\n\n      return push;\n    },\n    _isTextSelected: function _isTextSelected(node, selected) {\n      var text = this.app.utils.removeInvisibleChars(node.textContent);\n      return selected === text || text.search(selected) !== -1 || selected.search(new RegExp('^' + this.app.utils.escapeRegExp(text) + '$')) !== -1;\n    },\n    _containsNodeText: function _containsNodeText(range, node) {\n      var treeWalker = this.doc.createTreeWalker(node, NodeFilter.SHOW_TEXT, {\n        acceptNode: function acceptNode(node) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n      }, false);\n      var first, last, textNode;\n\n      while (textNode = treeWalker.nextNode()) {\n        if (!first) {\n          first = textNode;\n        }\n\n        last = textNode;\n      }\n\n      var nodeRange = range.cloneRange();\n\n      if (first) {\n        nodeRange.setStart(first, 0);\n        nodeRange.setEnd(last, last.length);\n      } else {\n        nodeRange.selectNodeContents(node);\n      }\n\n      return range.compareBoundaryPoints(Range.START_TO_START, nodeRange) < 1 && range.compareBoundaryPoints(Range.END_TO_END, nodeRange) > -1;\n    }\n  });\n  ArticleEditor.add('module', 'caret', {\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    set: function set(el, type) {\n      var node = this.dom(el).get();\n      if (!node) return;\n\n      this._apply(node, type);\n    },\n    is: function is(el, type, removeblocks, trimmed) {\n      var node = this.dom(el).get();\n      if (!node) return false;\n      var sel = this.doc.getSelection();\n      if (!sel.isCollapsed) return false;\n\n      var position = this._position(node, trimmed);\n\n      var size = this._size(node, removeblocks, trimmed);\n\n      if (type === 'end') {\n        return position === size;\n      } else if (type === 'start') {\n        return position === 0;\n      }\n\n      return false;\n    },\n    // private\n    _apply: function _apply(node, type) {\n      if (!this._isInPage(node)) return; // focus\n\n      this.app.editor.getWin().focus(); // range\n\n      var range = this.doc.createRange();\n      var tag = node.nodeType !== 3 ? node.tagName.toLowerCase() : false; // non editable inline node\n\n      if (this.app.element.is(node, 'inline') && this._isNon(node)) {\n        if (type === 'start') type = 'before';else if (type === 'end') type = 'after';\n      }\n\n      if (type === 'start') {\n        range.setStart(node, 0);\n        range.collapse(true);\n\n        var inline = this._getInlineInside(node);\n\n        if (inline) {\n          var inlines = this.app.element.getAllInlines(inline);\n          node = inlines[0];\n          range.selectNodeContents(node);\n          range.collapse(true);\n        }\n\n        if (this.app.element.is(node, 'inline')) {\n          this._insertInvisibleNode(range);\n        }\n      } else if (type === 'end') {\n        var set;\n        var last = node.nodeType === 1 ? node.lastChild : false;\n        var lastInline = last && this.app.element.is(last, 'inline');\n\n        if (lastInline && this._isNon(last)) {\n          set = true;\n          range.setStartAfter(last);\n          range.collapse(true); // set after\n\n          this._insertInvisibleNode(range);\n        } else if (lastInline) {\n          node = last;\n        }\n\n        if (set !== true) {\n          range.selectNodeContents(node);\n          range.collapse(false);\n        }\n      } else if (type === 'before') {\n        range.setStartBefore(node);\n        range.collapse(true);\n\n        if (this.app.element.is(node, 'inline')) {\n          this._insertInvisibleNode(range, node);\n        }\n      } else if (type === 'after') {\n        range.setStartAfter(node);\n        range.collapse(true);\n\n        if (this.app.element.is(node, 'inline') || tag === 'br' || tag === 'svg') {\n          this._insertInvisibleNode(range);\n        }\n      } // set range\n\n\n      var sel = this.win.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n    },\n    _insertInvisibleNode: function _insertInvisibleNode(range, before) {\n      var textNode = this.app.utils.createInvisibleChar();\n\n      if (before) {\n        before.parentNode.insertBefore(textNode, before);\n      } else {\n        range.insertNode(textNode);\n      }\n\n      range.selectNodeContents(textNode);\n      range.collapse(false);\n      return textNode;\n    },\n    _getInlineInside: function _getInlineInside(node) {\n      var inline = node.firstChild;\n\n      if (this.app.element.is(inline, 'inline')) {\n        var inlineInside = inline.firstChild;\n\n        while (inlineInside) {\n          if (this.app.element.is(inlineInside, 'inline')) {\n            return inlineInside;\n          }\n\n          inlineInside = inlineInside.firstChild;\n        }\n\n        return inline;\n      }\n    },\n    _size: function _size(node, removeblocks, trimmed) {\n      var str;\n      var isTextNode = node.nodeType === 3;\n\n      if (removeblocks && removeblocks.length !== 0) {\n        var $node = this.dom(node);\n        var $cloned = $node.clone();\n        $cloned.find(removeblocks.join(',')).remove();\n        str = $cloned.html().trim();\n      } else {\n        str = isTextNode ? node.textContent : node.innerHTML;\n        str = isTextNode || trimmed === false ? str : str.trim();\n      }\n\n      return this._trimmed(str, isTextNode, trimmed).length;\n    },\n    _position: function _position(node, trimmed) {\n      var range = this.win.getSelection().getRangeAt(0);\n      var caretRange = range.cloneRange();\n      var tmp = document.createElement(\"div\");\n      var isTextNode = node.nodeType === 3;\n      caretRange.selectNodeContents(node);\n      caretRange.setEnd(range.endContainer, range.endOffset);\n      tmp.appendChild(caretRange.cloneContents());\n      var str = isTextNode || trimmed === false ? tmp.innerHTML : tmp.innerHTML.trim();\n      var brEnd = str.search(/<\\/?br\\s?\\/?>$/g) !== -1 ? 1 : 0;\n      str = this._trimmed(str, isTextNode, trimmed);\n      return str.length + brEnd;\n    },\n    _trimmed: function _trimmed(str, isTextNode, trimmed) {\n      if (trimmed === false) {\n        str = str.replace(/\\n$/g, '');\n        return str;\n      }\n\n      str = this.app.utils.removeInvisibleChars(str);\n      str = str.replace(/<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi, '');\n      str = str.replace(/\\s+/g, ' ');\n\n      if (str !== '' && !isTextNode) {\n        str = str.replace(/\\s$/, '');\n      }\n\n      return str;\n    },\n    _isInPage: function _isInPage(node) {\n      if (node && node.nodeType) {\n        return node === this.doc.body ? false : this.doc.body.contains(node);\n      }\n\n      return false;\n    },\n    _isNon: function _isNon(node) {\n      return node.getAttribute('contenteditable') === 'false';\n    }\n  });\n  ArticleEditor.add('module', 'scroll', {\n    init: function init() {\n      this.scrolltop = false;\n    },\n    save: function save() {\n      this.scrolltop = this.getTarget().scrollTop();\n    },\n    restore: function restore() {\n      if (this.scrolltop !== false) {\n        this.getTarget().scrollTop(this.scrolltop);\n        this.scrolltop = false;\n      }\n    },\n    isTarget: function isTarget() {\n      return this.opts.editor.scrollTarget !== window;\n    },\n    getTarget: function getTarget() {\n      return this.dom(this.opts.editor.scrollTarget);\n    }\n  });\n  ArticleEditor.add('module', 'offset', {\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    get: function get(el) {\n      el = this._getEl(el);\n      var sel = this.win.getSelection();\n      var offset = false;\n\n      if (sel && sel.rangeCount > 0) {\n        var range = sel.getRangeAt(0);\n\n        if (el.contains(sel.anchorNode)) {\n          var cloned = range.cloneRange();\n          cloned.selectNodeContents(el);\n          cloned.setEnd(range.startContainer, range.startOffset);\n          var start = cloned.toString().length;\n          offset = {\n            start: start,\n            end: start + range.toString().length\n          };\n        }\n      }\n\n      return offset;\n    },\n    set: function set(el, offset) {\n      if (!offset) {\n        offset = el;\n        el = false;\n      } // el\n\n\n      el = this._getEl(el);\n      var charIndex = 0,\n          range = this.doc.createRange();\n      var nodeStack = [el],\n          node,\n          foundStart = false,\n          stop = false;\n      range.setStart(el, 0);\n      range.collapse(true);\n\n      while (!stop && (node = nodeStack.pop())) {\n        if (node.nodeType === 3) {\n          var nextCharIndex = charIndex + node.length;\n\n          if (!foundStart && offset.start >= charIndex && offset.start <= nextCharIndex) {\n            range.setStart(node, offset.start - charIndex);\n            foundStart = true;\n          }\n\n          if (foundStart && offset.end >= charIndex && offset.end <= nextCharIndex) {\n            range.setEnd(node, offset.end - charIndex);\n            stop = true;\n          }\n\n          charIndex = nextCharIndex;\n        } else {\n          var i = node.childNodes.length;\n\n          while (i--) {\n            nodeStack.push(node.childNodes[i]);\n          }\n        }\n      }\n\n      var sel = this.win.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n    },\n    // private\n    _getEl: function _getEl(el) {\n      return !el ? this.app.editor.getLayout().get() : this.dom(el).get();\n    }\n  });\n  ArticleEditor.add('module', 'input', {\n    handle: function handle(event) {\n      var e = event.get('e');\n      var key = event.get('key');\n\n      if (this._doSelectAll(e, event)) {\n        return;\n      } // events\n\n\n      if (event.is('enter') && event.is('shift')) {\n        this.handleShiftEnter(e, key, event);\n      } else if (event.is('enter')) {\n        this.handleEnter(e, key, event);\n      } else if (event.is('space') && event.is('shift')) {\n        this.handleShiftSpace(e, key, event);\n      } else if (event.is('space')) {\n        this.handleSpace(e, key, event);\n      } else if (event.is('tab') && this.opts.tab.key) {\n        this.handleTab(e, key, event);\n      } else if (event.is('arrow')) {\n        if (event.is(['shift', 'alt', 'ctrl'])) return;\n        this.handleArrow(e, key, event);\n      } else if (event.is(['delete', 'backspace'])) {\n        this.handleDelete(e, key, event);\n      }\n    },\n    // handle\n    handleDelete: function handleDelete(e, key, event) {\n      var instance = this.app.block.get();\n      var isBackspace = event.is('backspace');\n      var isDelete = event.is('delete');\n\n      if (this.app.blocks.is()) {\n        e.preventDefault();\n        this.app.blocks.removeSelected();\n        return;\n      } // trim invisible char\n\n\n      if (instance && instance.isEditable() && this._trimInvisibleChar(e, event.is('backspace') ? 'left' : 'right', isDelete)) {\n        return;\n      } // inline\n\n\n      var inline = this.app.selection.getInline();\n\n      if (inline && inline.innerHTML.length === 1) {\n        e.preventDefault();\n        inline.innerHTML = '';\n        return;\n      } // handle block\n\n\n      if (instance.handleDelete && instance.handleDelete(e, key, event)) {\n        return;\n      } // instance\n\n\n      var next = instance.getNext();\n      var prev = instance.getPrev(); // like variable\n\n      if (instance.isInlineBlock()) {\n        e.preventDefault();\n        var $block = instance.getBlock();\n        var parent = instance.getParent();\n        this.app.caret.set($block, 'after');\n        instance.remove();\n        this.app.block.set(parent);\n      } // non editable\n      else if (!instance.isEditable()) {\n          e.preventDefault();\n          instance.remove();\n\n          if (next) {\n            this.app.block.set(next, 'start');\n          } else if (prev) {\n            this.app.block.set(prev, 'end');\n          } else {\n            if (this.app.editor.isEmpty()) {\n              this.app.editor.setEmpty();\n            } else {\n              this.app.block.unset();\n            }\n          }\n        } // editable\n        else if (instance.isEditable()) {\n            var type = instance.getType(); // all block selected\n\n            if (instance.isAllSelected()) {\n              e.preventDefault();\n\n              if (type === 'card') {\n                this.app.block.remove();\n              } else {\n                instance.setEmpty();\n              }\n\n              return;\n            } // delete & end\n\n\n            if (isDelete && next && instance.isCaretEnd()) {\n              e.preventDefault();\n\n              if (next.getType() === 'card' || !next.isEditable()) {\n                this.app.block.set(next);\n              } else {\n                if (type === 'card') {\n                  return;\n                } else {\n                  instance.appendNext();\n                }\n              }\n            } // backspace & start\n            else if (isBackspace && prev && instance.isCaretStart()) {\n                e.preventDefault();\n\n                if (prev.getType() === 'card' || !prev.isEditable()) {\n                  this.app.block.set(prev);\n                } else {\n                  if (type === 'card') {\n                    return;\n                  } else {\n                    instance.appendToPrev();\n                  }\n                }\n              }\n          }\n    },\n    handleArrow: function handleArrow(e, key, event) {\n      var instance = this.app.block.get(); // multiple\n\n      if (this.app.blocks.is()) {\n        return;\n      } // editable & inline code or like variable\n\n\n      if (instance.isEditable()) {\n        var current = this.app.selection.getCurrent();\n        var inline = this.app.selection.getTopInline(); // inline code\n\n        if (event.is('left') && inline && inline.tagName === 'CODE') {\n          var offset = this.app.offset.get(inline);\n          var caretStart = this.app.caret.is(inline, 'start');\n\n          if (!caretStart && offset.start === 1 && offset.end === 1) {\n            e.preventDefault();\n            this.app.caret.set(inline, 'start');\n            return;\n          } else if (caretStart) {\n            e.preventDefault();\n            this.app.caret.set(inline, 'before');\n            return;\n          }\n        } else {\n          // variable\n          if (inline && this._catchInlineBlock(e, event, inline)) {\n            return;\n          } else if (current && this._catchInlineBlock(e, event, current)) {\n            return;\n          }\n        }\n      } // trim invisible char\n\n\n      if (instance.isEditable() && this._trimInvisibleChar(e, event.is('left') ? 'left' : 'right')) {\n        return;\n      } // handle block\n\n\n      if (instance.handleArrow && instance.handleArrow(e, key, event)) {\n        return;\n      } // like variable\n\n\n      if (instance.isInlineBlock()) {\n        e.preventDefault();\n        var $block = instance.getBlock();\n        var parent = instance.getParent();\n        var caret = event.is('up-left') ? 'before' : 'after';\n        this.app.caret.set($block, caret);\n        this.app.block.set(parent);\n      } else {\n        // editable & non editable\n        var target;\n\n        if (event.is('up-left') && instance.isCaretStart()) {\n          caret = 'end';\n          target = instance.getPrev();\n        } else if (event.is('down-right') && instance.isCaretEnd()) {\n          caret = 'start';\n          target = instance.getNext();\n        }\n\n        if (target) {\n          e.preventDefault();\n          this.app.block.set(target, caret);\n        }\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      var instance = this.app.block.get(); // multiple\n\n      if (this.app.blocks.is()) {\n        e.preventDefault();\n        return;\n      } // handle block tab\n\n\n      if (instance.handleTab && instance.handleTab(e, key, event)) {\n        return;\n      } // tab as spaces\n\n\n      if (this.opts.tab.spaces && instance.isEditable()) {\n        e.preventDefault();\n        var num = this.opts.tab.spaces;\n        var node = document.createTextNode(Array(num + 1).join(\"\\xA0\"));\n        this.app.insertion.insertNode(node, 'end');\n        return;\n      } // like variable\n      else if (instance.isInlineBlock()) {\n          e.preventDefault();\n          var $block = instance.getBlock();\n          var parent = instance.getParent();\n          this.app.caret.set($block, 'after');\n          this.app.block.set(parent);\n        } else {\n          e.preventDefault();\n          var next = instance.getNext();\n\n          if (next) {\n            this.app.block.set(next, 'start');\n          }\n        }\n    },\n    handleShiftSpace: function handleShiftSpace(e, key, event) {\n      var instance = this.app.block.get(); // multiple\n\n      if (this.app.blocks.is()) return; // instance\n\n      var $block = instance.getBlock(); // editable\n\n      if (instance.isEditable()) {\n        // selected all\n        if (instance.isAllSelected()) {\n          instance.setEmpty();\n          return;\n        } else {\n          if (instance.getType() !== 'code') {\n            e.preventDefault();\n            this.app.insertion.insertHtml('&nbsp;', 'end');\n          }\n        }\n      } // like variable\n      else if (instance.isInlineBlock()) {\n          e.preventDefault();\n          var parent = instance.getParent();\n          this.app.caret.set($block, 'after');\n          instance.remove();\n          this.app.block.set(parent);\n          this.app.insertion.insertHtml('&nbsp;', 'end');\n        } // emptiable\n        else if (instance.isEmptiable() && instance.isEmpty()) {\n            e.preventDefault();\n            $block.removeClass(this.prefix + '-empty-layer');\n            $block.html('');\n            instance.insertEmpty({\n              position: 'append',\n              caret: 'start'\n            });\n          }\n    },\n    handleSpace: function handleSpace(e, key, event) {\n      var instance = this.app.block.get(); // multiple\n\n      if (this.app.blocks.is()) {\n        e.preventDefault();\n        var last = this.app.blocks.getLastSelected();\n        last.insertEmpty({\n          position: 'after',\n          caret: 'start'\n        });\n        this.app.blocks.removeSelected(false);\n        return;\n      } // instance\n\n\n      var $block = instance.getBlock();\n      var type = instance.getType(); // handle block space\n\n      if (instance.handleSpace && instance.handleSpace(e, key, event)) {\n        return;\n      } // do nothing\n\n\n      if (type === 'row') {\n        e.preventDefault();\n        return;\n      } // editable\n      else if (instance.isEditable() && instance.isAllSelected()) {\n          instance.setEmpty();\n          return;\n        } // like variable\n        else if (instance.isInlineBlock()) {\n            e.preventDefault();\n            var parent = instance.getParent();\n            this.app.caret.set($block, 'after');\n            instance.remove();\n            this.app.block.set(parent);\n            this.app.insertion.insertHtml('&nbsp;', 'end');\n          } // emptiable\n          else if (instance.isEmptiable() && instance.isEmpty()) {\n              e.preventDefault();\n              $block.removeClass(this.prefix + '-empty-layer');\n              $block.html('');\n              instance.insertEmpty({\n                position: 'append',\n                caret: 'start'\n              });\n            } // non editable\n            else if (!instance.isEditable()) {\n                e.preventDefault();\n                instance.insertEmpty({\n                  position: 'after',\n                  caret: 'start'\n                });\n                instance.remove();\n                this.app.control.updatePosition();\n              }\n    },\n    handleShiftEnter: function handleShiftEnter(e, key, event) {\n      var instance = this.app.block.get();\n      var type = instance.getType();\n      var $block = instance.getBlock();\n\n      if (this.app.blocks.is() || type === 'row') {\n        e.preventDefault();\n      } // like variable\n      else if (instance.isInlineBlock()) {\n          e.preventDefault();\n          var parent = instance.getParent();\n          this.app.caret.set($block, 'after');\n          instance.remove();\n          this.app.block.set(parent);\n          this.app.insertion.insertBreakline();\n        } // editable\n        else if (instance.isEditable()) {\n            e.preventDefault();\n            this.app.insertion.insertBreakline();\n          } // non editable\n          else {\n              e.preventDefault();\n              var position = 'after';\n\n              if (instance.isEmptiable() && instance.isEmpty()) {\n                position = 'append';\n                $block.removeClass(this.prefix + '-empty-layer');\n                $block.html('');\n              }\n\n              instance.insertEmpty({\n                position: position,\n                caret: 'start'\n              });\n            }\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      var instance = this.app.block.get(); // blocks\n\n      if (this.app.blocks.is()) {\n        e.preventDefault();\n        var last = this.app.blocks.getLastSelected();\n        last.insertEmpty({\n          position: 'after',\n          caret: 'start'\n        });\n        return;\n      } // instance\n\n\n      var $block = instance.getBlock(); // editable\n\n      if (instance.isEditable()) {\n        // all block selected\n        if (instance.isAllSelected()) {\n          e.preventDefault();\n          instance.setEmpty();\n          return;\n        } // partial selected\n        else if (!this.app.selection.isCollapsed()) {\n            e.preventDefault();\n\n            if (instance.getType() === 'code') {\n              this.app.insertion.insertNewline();\n            } else {\n              this.app.insertion.insertBreakline();\n            }\n\n            return;\n          }\n      } // like variable\n\n\n      if (instance.isInlineBlock()) {\n        e.preventDefault();\n        var parent = instance.getParent();\n        this.app.caret.set($block, 'after');\n        instance.remove();\n        this.app.block.set(parent);\n      } // emptiable\n      else if (instance.isEmptiable() && instance.isEmpty()) {\n          e.preventDefault();\n          $block.removeClass(this.prefix + '-empty-layer');\n          $block.html('');\n          instance.insertEmpty({\n            position: 'append',\n            caret: 'start'\n          });\n        } // non editable\n        else if (!instance.isEditable()) {\n            e.preventDefault();\n            instance.insertEmpty({\n              position: 'after',\n              caret: 'start'\n            });\n          } // handle block enter\n\n\n      if (instance.handleEnter) {\n        instance.handleEnter(e, key, event);\n      } // ui\n\n\n      this.app.control.updatePosition();\n    },\n    handleTextareaTab: function handleTextareaTab(e) {\n      if (e.keyCode !== 9) return true;\n      e.preventDefault();\n      var el = e.target;\n      var val = el.value;\n      var start = el.selectionStart;\n      el.value = val.substring(0, start) + \"    \" + val.substring(el.selectionEnd);\n      el.selectionStart = el.selectionEnd = start + 4;\n    },\n    // private\n    _isNextBlock: function _isNextBlock(event, node) {\n      return event.is('right') && this.app.caret.is(node, 'end') && this.app.element.getType(node.nextSibling);\n    },\n    _isPrevBlock: function _isPrevBlock(event, node) {\n      return event.is('left') && this.app.caret.is(node, 'start') && this.app.element.getType(node.previousSibling);\n    },\n    _isSiblingInlineBlock: function _isSiblingInlineBlock(e, node) {\n      var $el = this.dom(node);\n      var instance = $el.dataget('instance');\n\n      if (instance && instance.isInlineBlock()) {\n        e.preventDefault();\n        this.app.block.set(instance);\n        return true;\n      }\n    },\n    _isInvisibleChar: function _isInvisibleChar(direction) {\n      var sel = this.app.selection.get();\n      var text = this.app.selection.getText(direction);\n      return sel.current && sel.current.nodeType === 3 && this.app.utils.searchInvisibleChars(text) === 0;\n    },\n    _catchInlineBlock: function _catchInlineBlock(e, event, node) {\n      if (event.is('left') && node.nodeType === 3) {\n        var str = node.textContent;\n        var isChar = this.app.utils.searchInvisibleChars(str) !== -1;\n\n        if (isChar) {\n          var charnode = node;\n\n          if (this._isSiblingInlineBlock(e, node.previousSibling)) {\n            charnode.parentNode.removeChild(charnode);\n            return true;\n          }\n        }\n      }\n\n      if (this._isPrevBlock(event, node)) {\n        if (this._isSiblingInlineBlock(e, node.previousSibling)) return true;\n      } else if (this._isNextBlock(event, node)) {\n        if (this._isSiblingInlineBlock(e, node.nextSibling)) return true;\n      }\n    },\n    _trimInvisibleChar: function _trimInvisibleChar(e, pointer, remove) {\n      var direction = pointer === 'left' ? 'before' : 'after';\n      var sel = this.app.selection.get();\n\n      var isChar = this._isInvisibleChar(direction);\n\n      var el;\n\n      if (isChar && pointer === 'left') {\n        el = sel.current;\n        this.dom(el).replaceWith(el.textContent.replace(/\\s+$/, \"\"));\n      } else if (isChar && remove && sel.current && sel.current.nextSibling) {\n        el = sel.current.nextSibling;\n        this.dom(el).replaceWith(el.textContent.replace(/^\\s+/, \"\"));\n      } else if (isChar && pointer === 'right') {\n        e.preventDefault();\n        var data = this.app.offset.get();\n        this.app.offset.set({\n          start: data.start + 1,\n          end: data.end + 1\n        });\n        return true;\n      }\n    },\n    _doSelectAll: function _doSelectAll(e, event) {\n      var instance = this.app.block.get(); // if select all & action key - make empty\n\n      if (this._isAllSelected(event)) {\n        this._setEditorEmpty(e, event);\n\n        return true;\n      } // select all\n\n\n      if (event.is('select')) {\n        e.preventDefault();\n\n        if (!this.app.blocks.is() && instance) {\n          if (instance.isAllSelected()) {\n            this.app.editor.selectAll();\n          } else {\n            instance.setSelectAll();\n          }\n        } else {\n          this.app.editor.selectAll();\n        }\n\n        return true;\n      }\n    },\n    _isAllSelected: function _isAllSelected(event) {\n      return this.app.editor.isAllSelected() && event.is(['enter', 'delete', 'backspace', 'alpha', 'space']);\n    },\n    _setEditorEmpty: function _setEditorEmpty(e, event) {\n      if (!event.is(['alpha', 'space'])) e.preventDefault();\n      this.app.editor.setEmpty();\n    }\n  });\n  ArticleEditor.add('module', 'shortcut', {\n    init: function init() {\n      // local\n      this.shortcuts = this.opts.shortcuts; // based on https://github.com/jeresig/jquery.hotkeys\n\n      this.hotkeys = {\n        8: \"backspace\",\n        9: \"tab\",\n        10: \"return\",\n        13: \"return\",\n        16: \"shift\",\n        17: \"ctrl\",\n        18: \"alt\",\n        19: \"pause\",\n        20: \"capslock\",\n        27: \"esc\",\n        32: \"space\",\n        33: \"pageup\",\n        34: \"pagedown\",\n        35: \"end\",\n        36: \"home\",\n        37: \"left\",\n        38: \"up\",\n        39: \"right\",\n        40: \"down\",\n        45: \"insert\",\n        46: \"del\",\n        59: \";\",\n        61: \"=\",\n        96: \"0\",\n        97: \"1\",\n        98: \"2\",\n        99: \"3\",\n        100: \"4\",\n        101: \"5\",\n        102: \"6\",\n        103: \"7\",\n        104: \"8\",\n        105: \"9\",\n        106: \"*\",\n        107: \"+\",\n        109: \"-\",\n        110: \".\",\n        111: \"/\",\n        112: \"f1\",\n        113: \"f2\",\n        114: \"f3\",\n        115: \"f4\",\n        116: \"f5\",\n        117: \"f6\",\n        118: \"f7\",\n        119: \"f8\",\n        120: \"f9\",\n        121: \"f10\",\n        122: \"f11\",\n        123: \"f12\",\n        144: \"numlock\",\n        145: \"scroll\",\n        173: \"-\",\n        186: \";\",\n        187: \"=\",\n        188: \",\",\n        189: \"-\",\n        190: \".\",\n        191: \"/\",\n        192: \"`\",\n        219: \"[\",\n        220: \"\\\\\",\n        221: \"]\",\n        222: \"'\"\n      };\n      this.hotkeysShiftNums = {\n        \"`\": \"~\",\n        \"1\": \"!\",\n        \"2\": \"@\",\n        \"3\": \"#\",\n        \"4\": \"$\",\n        \"5\": \"%\",\n        \"6\": \"^\",\n        \"7\": \"&\",\n        \"8\": \"*\",\n        \"9\": \"(\",\n        \"0\": \")\",\n        \"-\": \"_\",\n        \"=\": \"+\",\n        \";\": \": \",\n        \"'\": \"\\\"\",\n        \",\": \"<\",\n        \".\": \">\",\n        \"/\": \"?\",\n        \"\\\\\": \"|\"\n      };\n\n      if (this.opts.selection.multiple === false) {\n        this.remove('meta+click');\n      }\n    },\n    add: function add(keys, obj) {\n      this.shortcuts[keys] = obj;\n    },\n    remove: function remove(keys) {\n      this.opts.shortcutsBase = this._remove(keys, this.opts.shortcutsBase);\n      this.opts.shortcuts = this._remove(keys, this.opts.shortcuts);\n    },\n    handle: function handle(e) {\n      this.triggered = false; // disable browser's hot keys for bold and italic if shortcuts off\n\n      if (this.shortcuts === false) {\n        if ((e.ctrlKey || e.metaKey) && (e.which === 66 || e.which === 73)) {\n          e.preventDefault();\n        }\n\n        return true;\n      } // build\n\n\n      if (e.ctrlKey || e.metaKey || e.shoftKey || e.altKey) {\n        for (var key in this.shortcuts) {\n          this._build(e, key, this.shortcuts[key]);\n        }\n      }\n\n      return this.triggered;\n    },\n    observe: function observe(obj, name) {\n      return this.opts.topbar.shortcuts ? obj : false;\n    },\n    popup: function popup(params, button) {\n      var meta = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform) ? '<b>&#8984;</b>' : 'ctrl';\n      var items = {};\n      var z = 0; // items\n\n      this._buildPopupItems(items, z, this.opts.shortcutsBase, meta, 'base');\n\n      this._buildPopupItems(items, z, this.opts.shortcuts, meta); // create\n\n\n      this.app.popup.create('shortcuts', {\n        width: '360px',\n        items: items\n      }); // open\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    // private\n    _buildPopupItems: function _buildPopupItems(items, z, shortcuts, meta, type) {\n      for (var key in shortcuts) {\n        var $item = this.dom('<div>').addClass(this.prefix + '-popup-shortcut-item');\n        var title = type === 'base' ? shortcuts[key] : shortcuts[key].title;\n        var $title = this.dom('<span>').addClass(this.prefix + '-popup-shortcut-title').html(this.lang.parse(title));\n        var $kbd = this.dom('<span>').addClass(this.prefix + '-popup-shortcut-kbd');\n        var name = type === 'base' ? key.replace('meta', meta) : shortcuts[key].name.replace('meta', meta);\n        var arr = name.split('+');\n\n        for (var i = 0; i < arr.length; i++) {\n          arr[i] = '<span>' + arr[i] + '</span>';\n        }\n\n        $kbd.html(arr.join('+'));\n        $item.append($title);\n        $item.append($kbd);\n        items[z] = {\n          html: $item\n        };\n        z++;\n      }\n    },\n    _build: function _build(e, str, obj) {\n      var keys = str.split(',');\n      var len = keys.length;\n\n      for (var i = 0; i < len; i++) {\n        if (typeof keys[i] === 'string' && !obj.hasOwnProperty('trigger')) {\n          this._handler(e, keys[i].trim(), obj);\n        }\n      }\n    },\n    _handler: function _handler(e, keys, obj) {\n      keys = keys.toLowerCase().split(\" \");\n      var special = this.hotkeys[e.keyCode];\n      var character = e.which !== 91 ? String.fromCharCode(e.which).toLowerCase() : false;\n      var modif = \"\",\n          possible = {};\n      var cmdKeys = [\"meta\", \"ctrl\", \"alt\", \"shift\"];\n\n      for (var i = 0; i < cmdKeys.length; i++) {\n        var specialKey = cmdKeys[i];\n\n        if (e[specialKey + 'Key'] && special !== specialKey) {\n          modif += specialKey + '+';\n        }\n      } // right cmd\n\n\n      if (e.keyCode === 93) {\n        modif += 'meta+';\n      }\n\n      if (special) possible[modif + special] = true;\n\n      if (character) {\n        possible[modif + character] = true;\n        possible[modif + this.hotkeysShiftNums[character]] = true; // \"$\" can be triggered as \"Shift+4\" or \"Shift+$\" or just \"$\"\n\n        if (modif === \"shift+\") {\n          possible[this.hotkeysShiftNums[character]] = true;\n        }\n      }\n\n      var len = keys.length;\n\n      for (var z = 0; z < len; z++) {\n        if (possible[keys[z]]) {\n          e.preventDefault();\n          this.triggered = true;\n          this.app.api(obj.command, obj.params, e);\n          return;\n        }\n      }\n    },\n    _remove: function _remove(keys, obj) {\n      return Object.keys(obj).reduce(function (object, key) {\n        if (key !== keys) {\n          object[key] = obj[key];\n        }\n\n        ;\n        return object;\n      }, {});\n    }\n  });\n  ArticleEditor.add('module', 'toolbar', {\n    init: function init() {\n      // local\n      this.activeClass = 'active';\n      this.toggledClass = 'toggled';\n      this.disableClass = 'disable';\n      this.customButtons = {};\n      this.aTags = {};\n      this.aTypes = {};\n    },\n    start: function start() {\n      if (this.opts.toolbar) {\n        this.sticky = this.opts.toolbar;\n      } else if (this.opts.path && this.opts.path.sticky) {\n        this.sticky = this.opts.path;\n      }\n\n      if (this._isToolbar()) {\n        this.$container = this.app.container.get('toolbar');\n\n        this._build();\n      }\n\n      this._buildSticky();\n    },\n    load: function load() {\n      this._buildActiveButtons();\n\n      if (this._isToolbar()) {\n        this.$toolbar.html('');\n\n        this._buildButtons();\n      }\n    },\n    stop: function stop() {\n      this.$toolbar.remove();\n      this.customButtons = {};\n      this.editorButtons = {};\n    },\n    build: function build() {\n      if (!this._isToolbar()) return;\n      this.$toolbar.html('');\n\n      this._buildButtons();\n    },\n    observe: function observe() {\n      if (!this._isToolbar()) return;\n      this.unsetActive();\n      if (this.app.blocks.is() || this.app.editor.isAllSelected()) return;\n      if (!this._isObserveButtons()) return;\n      var instance = this.app.block.get();\n      var type = instance ? instance.getType() : false;\n      var tag = instance ? instance.getTag() : false;\n      var inlines = this.app.selection.getNodes({\n        type: 'inline',\n        selected: 'inside',\n        links: true\n      });\n\n      var tags = this._getObservedTags(tag, inlines);\n\n      var buttons = [];\n      var keys; // tags\n\n      for (var i = 0; i < tags.length; i++) {\n        keys = this.aTags[tags[i]];\n\n        if (keys) {\n          buttons = buttons.concat(keys);\n        }\n      } // types\n\n\n      if (type) {\n        keys = this.aTypes[type];\n\n        if (keys) {\n          buttons = buttons.concat(keys);\n        }\n      } // set active\n\n\n      this._setActiveKeys(buttons);\n    },\n    // public\n    getElement: function getElement() {\n      return this.$toolbar;\n    },\n    get: function get(name) {\n      return this._findButton(name);\n    },\n    add: function add(name, obj) {\n      this.customButtons[name] = obj;\n    },\n    setActive: function setActive(name) {\n      if (!this._isToolbar()) return;\n\n      this._findButtons().removeClass(this.activeClass);\n\n      this._findButton(name).removeClass(this.disableClass).addClass(this.activeClass);\n    },\n    setToggled: function setToggled(name) {\n      if (!this._isToolbar()) return;\n\n      this._findButtons().removeClass(this.toggledClass);\n\n      this._findButton(name).removeClass(this.disableClass).addClass(this.toggledClass);\n    },\n    unsetActive: function unsetActive(name) {\n      if (!this._isToolbar()) return;\n      var $elms = name ? this._findButton(name) : this._findButtons();\n      $elms.removeClass(this.activeClass);\n    },\n    unsetToggled: function unsetToggled(name) {\n      if (!this._isToolbar()) return;\n      var $elms = name ? this._findButton(name) : this._findButtons();\n      $elms.removeClass(this.toggledClass);\n    },\n    enable: function enable() {\n      if (!this._isToolbar()) return;\n\n      this._findButtons().removeClass(this.disableClass);\n    },\n    disable: function disable(except) {\n      if (!this._isToolbar()) return;\n\n      this._findButtons().removeClass(this.toggledClass).removeClass(this.activeClass).addClass(this.disableClass);\n    },\n    disableSticky: function disableSticky() {\n      if (!this._isToolbar()) return;\n      var $container = this.app.container.get('bars');\n      $container.removeClass(this.prefix + '-bars-sticky');\n      $container.css('top', '');\n    },\n    enableSticky: function enableSticky() {\n      if (!this._isToolbar()) return;\n\n      if (this.opts.toolbar.sticky) {\n        var $container = this.app.container.get('bars');\n        $container.addClass(this.prefix + '-bars-sticky');\n        $container.css('top', this.opts.toolbar.stickyTopOffset + 'px');\n      }\n    },\n    isSticky: function isSticky() {\n      var $container = this.app.container.get('bars');\n      var $main = this.app.container.get('main');\n      var mainTop = $main.offset().top + parseInt($main.css('border-top-width'));\n      var containerTop = $container.offset().top;\n      return containerTop > mainTop || containerTop < mainTop;\n    },\n    // private\n    _build: function _build() {\n      this.$toolbar = this.dom('<div>').addClass(this.prefix + '-toolbar');\n      this.$container.append(this.$toolbar);\n      this.app.container.get('bars').addClass('has-toolbar');\n    },\n    _buildSticky: function _buildSticky() {\n      if (this.sticky) {\n        var $container = this.app.container.get('bars');\n        $container.addClass(this.prefix + '-bars-sticky');\n        $container.css('top', this.sticky.stickyTopOffset + 'px');\n        var $scrollTarget = this.app.scroll.getTarget();\n        $scrollTarget.on('scroll.' + this.prefix + '-toolbar', this._observeSticky.bind(this));\n      }\n    },\n    _buildActiveButtons: function _buildActiveButtons() {\n      this.aTags = this.opts.buttons.tags ? this.opts.buttons.tags : {};\n      this.aTypes = this.opts.buttons.types ? this.opts.buttons.types : {};\n      var btns = this.customButtons;\n\n      for (var key in btns) {\n        var active = btns[key].active;\n\n        if (active) {\n          this._buildActiveButton(key, active.tags, this.aTags);\n\n          this._buildActiveButton(key, active.types, this.aTypes);\n        }\n      }\n    },\n    _buildActiveButton: function _buildActiveButton(key, arr, obj) {\n      if (!arr) return;\n\n      for (var i = 0; i < arr.length; i++) {\n        var item = arr[i];\n\n        if (obj[item]) {\n          obj[item].push(key);\n        } else {\n          obj[item] = [key];\n        }\n      }\n    },\n    _buildButtons: function _buildButtons() {\n      var instance = this._getCurrentInstance();\n\n      var buttons = instance ? instance.toolbar : this.app.editor.getButtons(); // create button\n\n      this._createButtons(buttons, instance); // create custom (plugin)\n\n\n      if (instance) {\n        this._createButtons(this.customButtons, instance);\n      }\n    },\n    _createButtons: function _createButtons(buttons, instance) {\n      for (var name in buttons) {\n        if (instance && !instance.isAllowedButton(name, buttons[name])) continue;\n        this.app.create('button', name, buttons[name], this.$toolbar, 'toolbar');\n      }\n    },\n    _observeSticky: function _observeSticky() {\n      var $scrollTarget = this.app.scroll.getTarget();\n      var paddingTop = this.app.scroll.isTarget() ? parseInt($scrollTarget.css('padding-top')) : 0;\n      var $container = this.app.container.get('bars');\n      $container.css('top', 0 - paddingTop + this.sticky.stickyTopOffset + 'px');\n\n      if (this.isSticky()) {\n        this.app.broadcast('toolbar.sticky');\n      } else {\n        this.app.broadcast('toolbar.static');\n      }\n    },\n    _findButtons: function _findButtons() {\n      return this.$toolbar.find('.' + this.prefix + '-button-toolbar');\n    },\n    _findButton: function _findButton(name) {\n      return this.$toolbar.find('[data-name=' + name + ']');\n    },\n    _isToolbar: function _isToolbar() {\n      return this.opts.toolbar;\n    },\n    _isObserveButtons: function _isObserveButtons() {\n      if (!this.opts.buttons.tags && !this.opts.buttons.types) return false;\n      return true;\n    },\n    _setActiveKeys: function _setActiveKeys(keys) {\n      for (var i = 0; i < keys.length; i++) {\n        this._findButton(keys[i]).addClass(this.activeClass);\n      }\n    },\n    _getCurrentInstance: function _getCurrentInstance() {\n      var instance = this.app.block.is() ? this.app.block.get() : false;\n      return this.app.blocks.is() ? false : instance;\n    },\n    _getObservedTags: function _getObservedTags(tag, inlines) {\n      var tags = [];\n\n      if (tag) {\n        tags.push(tag);\n      }\n\n      if (inlines.length > 0) {\n        for (var i = 0; i < inlines.length; i++) {\n          tags.push(inlines[i].tagName.toLowerCase());\n        }\n      }\n\n      return tags;\n    }\n  });\n  ArticleEditor.add('module', 'button', {\n    init: function init(name, obj, $container, type) {\n      // build\n      if (_typeof(name) === 'object') {\n        this.name = name.name;\n        this.obj = obj;\n\n        this._buildFromElement(name.element);\n      } else if (name) {\n        this.type = type || false;\n        this.name = name;\n\n        var res = this._observe(obj);\n\n        this.obj = typeof res === 'undefined' ? obj : res;\n\n        if (this.obj) {\n          this._build(name, $container);\n        }\n      }\n    },\n    setColor: function setColor(stack, data) {\n      var name = stack.getName();\n\n      if (name === 'background' || name === 'text-color') {\n        var key = name === 'background' ? 'background-color' : 'color';\n        this.setBackground(data[key]);\n      }\n    },\n    isButton: function isButton() {\n      return true;\n    },\n    getName: function getName() {\n      return this.name;\n    },\n    getTitle: function getTitle() {\n      return this.title;\n    },\n    getParams: function getParams() {\n      return this._has('params') ? this.obj.params : false;\n    },\n    getOffset: function getOffset() {\n      return this.$button.offset();\n    },\n    getDimension: function getDimension() {\n      return {\n        width: this.$button.width(),\n        height: this.$button.height()\n      };\n    },\n    getElement: function getElement() {\n      return this.$button;\n    },\n    setBackground: function setBackground(color) {\n      this._background('add', color);\n    },\n    resetBackground: function resetBackground() {\n      this._background('remove', '');\n    },\n    // private\n    _has: function _has(name) {\n      return this.obj.hasOwnProperty(name);\n    },\n    _observe: function _observe(obj) {\n      if (obj.hasOwnProperty('observer')) {\n        obj = this.app.api(obj.observer, obj, this.name);\n      }\n\n      return obj;\n    },\n    _background: function _background(type, color) {\n      var func = type === 'remove' ? 'removeClass' : 'addClass';\n      this.$icon[func](this.prefix + '-button-icon-color').css({\n        'background-color': color,\n        'color': color !== '' ? this.app.color.invert(color) : ''\n      });\n    },\n    _buildFromElement: function _buildFromElement(element) {\n      this.$button = this.dom(element);\n      this.$button.addClass(this.prefix + '-button-target');\n\n      this._buildData();\n    },\n    _build: function _build(name, $container) {\n      this._buildTitle();\n\n      this._buildElement();\n\n      this._buildIcon();\n\n      this._buildData($container);\n    },\n    _buildData: function _buildData($container) {\n      // data\n      this.$button.attr({\n        'tabindex': '-1',\n        'data-name': this.name,\n        'data-command': this.obj.command || false\n      });\n      this.$button.dataset('instance', this); // func\n\n      var func = this._has('command') ? '_catch' : '_stop'; // events\n\n      this.$button.on('click.' + this.prefix + '-button', this[func].bind(this));\n      this.$button.on('dragstart.' + this.prefix + '-button', function (e) {\n        e.preventDefault();\n        return;\n      });\n\n      if ($container) {\n        this._buildTooltip();\n\n        this._buildBackground();\n\n        this._buildPosition($container);\n      }\n    },\n    _buildTitle: function _buildTitle() {\n      this.title = typeof this.obj.title !== 'undefined' ? this.lang.parse(this.obj.title) : '';\n    },\n    _buildElement: function _buildElement() {\n      this.$button = this.dom('<a href=\"#\"></a>');\n      this.$button.addClass(this.prefix + '-button ' + this.prefix + '-button-target');\n\n      if (this.type) {\n        this.$button.addClass(this.prefix + '-button-' + this.type);\n      }\n\n      if (this._has('classname')) {\n        this.$button.addClass(this.obj.classname);\n      }\n    },\n    _buildIcon: function _buildIcon() {\n      var isIcon = this._has('icon');\n\n      var span = '<span class=\"' + this.prefix + '-icon-' + this.name + '\"></span>';\n      this.$icon = this._buildIconElement();\n\n      if (isIcon) {\n        span = this.obj.icon.search(/</) !== -1 ? this.obj.icon : '<span class=\"' + this.prefix + '-icon-' + this.obj.icon + '\"></span>';\n      }\n\n      this.$icon.append(span);\n      this.$button.append(this.$icon);\n    },\n    _buildIconElement: function _buildIconElement() {\n      return this.dom('<span>').addClass(this.prefix + '-button-icon');\n    },\n    _buildTooltip: function _buildTooltip() {\n      if (this.type === 'toolbar') {\n        this.app.tooltip.build(this.$button, this.title);\n      }\n    },\n    _buildBackground: function _buildBackground() {\n      if (this._has('background')) {\n        this.setBackground(this.obj.background);\n      }\n    },\n    _buildPosition: function _buildPosition($container) {\n      if (this._has('position')) {\n        var pos = this.obj.position;\n\n        if (pos === 'first') {\n          $container.prepend(this.$button);\n        } else if (_typeof(pos) === 'object') {\n          var type = pos.hasOwnProperty('after') ? 'after' : 'before';\n          var name = pos[type];\n          var $el = $container.find('[data-name=' + name + ']');\n\n          if ($el.length !== 0) {\n            $el[type](this.$button);\n          } else {\n            $container.append(this.$button);\n          }\n        }\n      } else {\n        $container.append(this.$button);\n      }\n    },\n    _stop: function _stop(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    },\n    _catch: function _catch(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $btn = this.dom(e.target).closest('.' + this.prefix + '-button-target');\n      if ($btn.hasClass('disable')) return; // editor focus\n\n      this.app.editor.setFocus();\n      var command = $btn.attr('data-command');\n      var name = $btn.attr('data-name');\n      var instance = $btn.dataget('instance'); // command\n\n      this.app.api(command, this.getParams(), instance, name, e);\n      this.app.tooltip.close();\n    }\n  });\n  ArticleEditor.add('module', 'tooltip', {\n    build: function build($button, title) {\n      title = title ? title.replace(/(<([^>]+)>)/gi, '') : false;\n\n      if (title) {\n        var name = this.prefix + '-button-' + this.uuid;\n        $button.attr('data-tooltip', title);\n        $button.on('mouseover.' + name, this.open.bind(this));\n        $button.on('mouseout.' + name, this.close.bind(this));\n      }\n    },\n    open: function open(e) {\n      if (this.app.popup.isOpen()) return;\n      var $btn = this.dom(e.target).closest('.' + this.prefix + '-button-target');\n\n      if ($btn.hasClass('disable')) {\n        return;\n      }\n\n      var $tooltip = this.dom('<span>').addClass(this.prefix + '-tooltip').html($btn.attr('data-tooltip'));\n      var offset = $btn.offset();\n      var height = $btn.height();\n      $tooltip.css({\n        top: offset.top + height + 'px',\n        left: offset.left + 'px'\n      }); // bs modal\n\n      if (this.opts.bsmodal) {\n        $tooltip.css('z-index', 1051);\n      }\n\n      this.app.$body.append($tooltip);\n    },\n    close: function close() {\n      this.app.$body.find('.' + this.prefix + '-tooltip').remove();\n    }\n  });\n  ArticleEditor.add('module', 'path', {\n    init: function init() {\n      this.activeClass = 'active';\n      this.disableClass = 'disable';\n      this.pathItemClass = this.prefix + '-path-item';\n    },\n    start: function start() {\n      if (!this.opts.path) return;\n      this.$container = this.app.container.get('pathbar');\n\n      this._build();\n\n      this._buildRoot();\n\n      this._buildActive();\n    },\n    build: function build() {\n      if (!this.opts.path) return;\n\n      this._clear();\n\n      this._buildRoot();\n\n      if (this.app.blocks.is()) {\n        this._buildMultipleItem();\n      } else {\n        this._buildItems();\n\n        this._buildActive();\n      }\n    },\n    disable: function disable() {\n      if (!this.opts.path) return;\n\n      this._getAll().addClass(this.disableClass);\n    },\n    enable: function enable() {\n      if (!this.opts.path) return;\n\n      this._getAll().removeClass(this.disableClass);\n    },\n    // private\n    _clear: function _clear() {\n      this.$path.find('.' + this.pathItemClass).off('.' + this.prefix + '-path-' + this.uuid);\n      this.$path.html('');\n    },\n    _getAll: function _getAll() {\n      return this.$path.find('.' + this.pathItemClass);\n    },\n    _selectItem: function _selectItem(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var $item = this.dom(e.target).closest('.' + this.pathItemClass);\n      if ($item.hasClass(this.disableClass)) return;\n      var instance = $item.dataget('instance');\n\n      if (instance) {\n        this.app.popup.close();\n        this.app.block.set(instance, 'start');\n      } else {\n        this._clear();\n\n        this._buildRoot();\n\n        this._buildActive();\n\n        this.app.block.unset();\n      }\n    },\n    _createItem: function _createItem() {\n      return this.dom('<a href=\"#\"></a>').attr('tabindex', '-1').addClass(this.pathItemClass);\n    },\n    _build: function _build() {\n      this.$path = this.dom('<div>').addClass(this.prefix + '-path');\n      this.$container.append(this.$path);\n    },\n    _buildRoot: function _buildRoot() {\n      this._buildItem(false, this.lang.parse(this.opts.path.title));\n    },\n    _buildActive: function _buildActive() {\n      this.$path.find('a').removeClass(this.activeClass).last().addClass(this.activeClass);\n    },\n    _buildItems: function _buildItems() {\n      var current = this.app.block.get();\n      if (!current) return; // parents\n\n      var $parents = current.getBlock().parents('[data-' + this.prefix + '-type]');\n      $parents.nodes.reverse();\n      $parents.each(this._buildParentItem.bind(this)); // current\n\n      this._buildItem(current);\n    },\n    _buildParentItem: function _buildParentItem($el) {\n      var instance = $el.dataget('instance');\n\n      this._buildItem(instance);\n    },\n    _buildMultipleItem: function _buildMultipleItem() {\n      var $item = this._createItem();\n\n      $item.addClass(this.activeClass);\n\n      this._buildTitle($item, this.lang.get('editor.multiple'));\n\n      this.$path.append($item);\n    },\n    _buildItem: function _buildItem(instance, root) {\n      var $item = this._createItem();\n\n      $item.dataset('instance', instance);\n      $item.on('click.' + this.prefix + '-path-' + this.uuid, this._selectItem.bind(this));\n\n      this._buildTitle($item, root || instance.getTitle());\n\n      this.$path.append($item);\n    },\n    _buildTitle: function _buildTitle($item, title) {\n      var $title = this.dom('<span>').html(title);\n      $item.append($title);\n    }\n  });\n  ArticleEditor.add('module', 'topbar', {\n    init: function init() {\n      this.activeClass = 'active';\n      this.toggledClass = 'disable';\n      this.disableClass = 'disable';\n      this.customButtons = {};\n    },\n    start: function start() {\n      if (!this._isTopbar()) return;\n\n      this._build();\n\n      this._buildButtons();\n    },\n    get: function get(name) {\n      return this._findButton(name);\n    },\n    add: function add(name, obj) {\n      this.customButtons[name] = obj;\n    },\n    setToggled: function setToggled(name) {\n      if (!this._isTopbar()) return;\n\n      this._findButtons().removeClass(this.toggledClass);\n\n      this._findButton(name).addClass(this.toggledClass);\n    },\n    unsetToggled: function unsetToggled(name) {\n      if (!this._isTopbar()) return;\n      var $elms = name ? this._findButton(name) : this._findButtons();\n      $elms.removeClass(this.toggledClass);\n    },\n    enable: function enable() {\n      if (!this._isTopbar()) return;\n\n      this._findButtons().removeClass(this.disableClass);\n    },\n    disable: function disable() {\n      if (!this._isTopbar()) return;\n\n      this._findButtons().removeClass(this.toggledClass).removeClass(this.activeClass).addClass(this.disableClass);\n    },\n    // private\n    _isTopbar: function _isTopbar() {\n      return this.opts.path;\n    },\n    _build: function _build() {\n      this.$topbar = this.dom('<div>').addClass(this.prefix + '-topbar');\n      this.app.container.get('pathbar').append(this.$topbar);\n    },\n    _buildButtons: function _buildButtons() {\n      var buttons = this.opts.buttons.topbar;\n\n      for (var name in buttons) {\n        if (name === 'undo' && !this.opts.topbar.undoredo) continue;\n        if (name === 'redo' && !this.opts.topbar.undoredo) continue;\n        if (name === 'shortcut' && !this.opts.topbar.shortcuts) continue;\n        this.app.create('button', name, buttons[name], this.$topbar, 'topbar');\n      }\n    },\n    _findButtons: function _findButtons() {\n      return this.$topbar.find('.' + this.prefix + '-button-topbar');\n    },\n    _findButton: function _findButton(name) {\n      return this.$topbar.find('[data-name=' + name + ']');\n    }\n  });\n  ArticleEditor.add('module', 'control', {\n    init: function init() {\n      this.instance = false;\n      this.customButtons = {};\n      this.eventName = this.prefix + '-control';\n    },\n    start: function start() {\n      if (!this.opts.control) return;\n\n      this._build();\n    },\n    stop: function stop() {\n      this.$control.remove();\n      this.instance = false;\n      this.customButtons = {};\n    },\n    isOpen: function isOpen() {\n      return this.$control.css('display') !== 'none';\n    },\n    getElement: function getElement() {\n      return this.$control;\n    },\n    get: function get(name) {\n      return this._findButton(name);\n    },\n    add: function add(name, obj) {\n      this.customButtons[name] = obj;\n    },\n    remove: function remove(name) {\n      this._findButton(name).remove();\n    },\n    build: function build() {\n      if (!this.opts.control) return;\n      var instance = this.app.block.get();\n\n      if (!instance) {\n        this.close();\n      } else {\n        this.open(instance);\n      }\n    },\n    open: function open(instance) {\n      if (!this.opts.control) return;\n      this.$control.html('');\n      this.instance = instance;\n\n      var len = this._buildButtons();\n\n      if (len > 0) {\n        var $scrollTarget = this.app.scroll.getTarget();\n        this.updatePosition();\n        $scrollTarget.on('resize.' + this.eventName, this.updatePosition.bind(this));\n        $scrollTarget.on('scroll.' + this.eventName, this.updatePosition.bind(this));\n        this.app.editor.getWin().on('scroll.' + this.eventName, this.updatePosition.bind(this));\n        this.instance.getBlock().on('keyup.' + this.eventName, this.updatePosition.bind(this));\n        this.updatePosition();\n      } else {\n        this.close();\n      }\n    },\n    close: function close() {\n      if (!this.opts.control) return;\n      this.$control.hide();\n\n      if (this.instance) {\n        var $block = this.instance.getBlock();\n        this.app.content.unfixListMargin($block);\n        $block.off('.' + this.eventName);\n      }\n\n      this.app.scroll.getTarget().off('.' + this.eventName);\n      this.app.editor.getDoc().off('.' + this.eventName);\n      this.instance = false;\n    },\n    updatePosition: function updatePosition() {\n      if (!this.opts.control) return;\n\n      if (!this.instance) {\n        this.close();\n        return;\n      }\n\n      var isEditable = this.instance.isEditable();\n      var offset = this.instance.getOffset();\n      var width = this.$control.width();\n      var scrollTop = this.app.editor.getWin().scrollTop();\n      var topOutlineFix = isEditable ? 4 : 2;\n      var leftOutlineFix = isEditable ? 6 : 4;\n      var top = offset.top - topOutlineFix - scrollTop;\n      var left = offset.left - width - leftOutlineFix;\n      var $container = this.app.container.get('toolbar');\n      var toolbarBottom = $container.offset().top + $container.height() - topOutlineFix;\n      var frameRect = this.app.editor.getFrameRect();\n\n      if (this.instance.getType() === 'list') {\n        var $block = this.instance.getBlock();\n        this.app.content.fixListMargin($block);\n      }\n\n      if (top < toolbarBottom || frameRect.bottom < top) {\n        this.$control.hide();\n      } else {\n        this.$control.show();\n      } // scroll target bottom hide\n\n\n      if (this.app.scroll.isTarget()) {\n        var $target = this.app.scroll.getTarget();\n        var targetBottom = $target.offset().top + $target.height();\n        var bottom = top + this.$control.height();\n\n        if (bottom > targetBottom) {\n          this.$control.hide();\n        }\n      } // left out of edge\n\n\n      if (!isEditable && left + width / 2 < frameRect.left) {\n        left = frameRect.left + 3;\n        top = top + 6;\n      } // position\n\n\n      this.$control.css({\n        top: top + 'px',\n        left: left + 'px'\n      });\n    },\n    // private\n    _buildButtons: function _buildButtons() {\n      var buttons = this.instance.control;\n      var count = 0;\n      count = this._createButtons(buttons, count);\n      count = this._createButtons(this.customButtons, count);\n      return count;\n    },\n    _build: function _build() {\n      this.$control = this.dom('<div>').addClass(this.prefix + '-control ' + this.prefix + '-control-' + this.uuid).hide(); // bs modal\n\n      if (this.opts.bsmodal) {\n        this.$control.css('z-index', 1051);\n      }\n\n      this.app.$body.append(this.$control);\n    },\n    _createButtons: function _createButtons(buttons, count) {\n      for (var name in buttons) {\n        if (!this.instance.isAllowedButton(name, buttons[name])) continue;\n        this.app.create('button', name, buttons[name], this.$control, 'control');\n        count++;\n      }\n\n      return count;\n    },\n    _findButton: function _findButton(name) {\n      return this.$control.find('[data-name=' + name + ']');\n    }\n  });\n  ArticleEditor.add('module', 'cleaner', {\n    cleanHtml: function cleanHtml(html) {\n      html = this.app.broadcastHtml('editor.before.clean', html); // local\n\n      var exceptedTags = this.opts.paste.blockTags.concat(this.opts.paste.inlineTags).concat(this.opts.paste.formTags);\n      var filterStyle = this.opts.paste.keepStyle.length !== 0 ? ',' + this.opts.paste.keepStyle.join(',') : ''; // gdocs & word\n\n      var isPages = this._isPages(html);\n\n      var isMsWord = this._isHtmlMsWord(html); // remove doctype tag\n\n\n      html = this.app.content.removeDoctype(html); // remove denied tags\n\n      html = this.app.content.removeTags(html, this.opts.tags.denied); // remove style & script tag\n\n      html = this.app.content.removeTagsWithContent(html, ['script', 'style']); // clean pages\n\n      html = isPages ? this._cleanPages(html) : html; // clean gdocs\n\n      html = this._cleanGDocs(html); // encode php code\n\n      html = this._encodePhp(html); // remove tags\n\n      html = this.app.content.removeTagsExcept(html, exceptedTags); // clean ms word\n\n      html = isMsWord ? this._cleanMsWord(html) : html; // remove style\n\n      html = this.app.content.removeStyleAttr(html, filterStyle); // restore data style\n\n      html = this.app.content.cacheStyle(html); // remove empty inline\n\n      html = this.app.content.removeEmptyInlines(html); // clean empty p\n\n      html = html.replace(/<p>&nbsp;<\\/p>/gi, '<p></p>');\n      html = html.replace(/<p><br\\s?\\/?><\\/p>/gi, '<p></p>'); // gmail list paste\n\n      html = html.replace(/^<li/gi, '<ul><li');\n      html = html.replace(/<\\/li>$/gi, '</li></ul>');\n\n      if (isMsWord) {\n        html = html.replace(/<p><\\/p>/gi, '');\n        html = html.replace(/<p>\\s<\\/p>/gi, '');\n      } // tidy lists\n\n\n      html = this.app.utils.wrap(html, function ($w) {\n        // place ul/ol into li\n        $w.find('ul, ol').each(this._placeListToItem.bind(this)); // remove p in li\n\n        $w.find('li p').unwrap();\n      }.bind(this)); // broadcast\n\n      return this.app.broadcastHtml('editor.clean', html);\n    },\n    // private\n    _encodePhp: function _encodePhp(html) {\n      html = html.replace('<?php', '&lt;?php');\n      html = html.replace('<?', '&lt;?');\n      html = html.replace('?>', '?&gt;');\n      return html;\n    },\n    _isHtmlMsWord: function _isHtmlMsWord(html) {\n      return html.match(/class=\"?Mso|style=\"[^\"]*\\bmso-|style='[^'']*\\bmso-|w:WordDocument/i);\n    },\n    _isPages: function _isPages(html) {\n      return html.match(/name=\"Generator\"\\scontent=\"Cocoa\\sHTML\\sWriter\"/i);\n    },\n    _placeListToItem: function _placeListToItem($node) {\n      var node = $node.get();\n      var prev = node.previousSibling;\n\n      if (prev && prev.tagName === 'LI') {\n        var $li = this.dom(prev);\n        $li.find('p').unwrap();\n        $li.append(node);\n      }\n    },\n    _cleanPages: function _cleanPages(html) {\n      html = html.replace(/\\sclass=\"s[0-9]\"/gi, '');\n      html = html.replace(/\\sclass=\"p[0-9]\"/gi, '');\n      html = this.app.utils.wrap(html, function ($w) {\n        $w.find('.Apple-converted-space').remove();\n      });\n      return html;\n    },\n    _cleanGDocs: function _cleanGDocs(html) {\n      html = html.replace(/<b\\sid=\"internal-source-marker(.*?)\">([\\w\\W]*?)<\\/b>/gi, \"$2\");\n      html = html.replace(/<b(.*?)id=\"docs-internal-guid(.*?)\">([\\w\\W]*?)<\\/b>/gi, \"$3\");\n      html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?bold|font-weight:\\s?bold;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\n      html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?600|font-weight:\\s?600;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\n      html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?700|font-weight:\\s?700;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\n      html = html.replace(/<span[^>]*font-style:\\s?italic[^>]*>([\\w\\W]*?)<\\/span>/gi, '<i>$1</i>');\n      html = html.replace(/<span[^>]*font-weight:\\s?(bold|600|700)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b>$2</b>');\n      return html;\n    },\n    _cleanMsWord: function _cleanMsWord(html) {\n      // comments\n      html = html.replace(/<!--[\\s\\S]+?-->/gi, '');\n      html = html.trim();\n      html = html.replace(/<(!|script[^>]*>.*?<\\/script(?=[>\\s])|\\/?(\\?xml(:\\w+)?|img|meta|link|style|\\w:\\w+)(?=[\\s/>]))[^>]*>/gi, '');\n      html = html.replace(/<(\\/?)s>/gi, \"<$1strike>\");\n      html = html.replace(/&nbsp;/gi, ' ');\n      html = html.replace(/<span\\s+style\\s*=\\s*\"\\s*mso-spacerun\\s*:\\s*yes\\s*;?\\s*\"\\s*>([\\s\\u00a0]*)<\\/span>/gi, function (str, spaces) {\n        return spaces.length > 0 ? spaces.replace(/./, \" \").slice(Math.floor(spaces.length / 2)).split(\"\").join(\"\\xA0\") : '';\n      });\n      html = this.app.utils.wrap(html, function ($w) {\n        // build lists\n        $w.find('p').each(function ($node) {\n          var matches = /mso-list:\\w+ \\w+([0-9]+)/.exec($node.attr('style'));\n\n          if (matches) {\n            $node.attr('data-listLevel', parseInt(matches[1], 10));\n          }\n        }); // parse Lists\n\n        this._parseWordLists($w);\n\n        $w.find('[align]').removeAttr('align');\n        $w.find('[name]').removeAttr('name');\n        $w.find('span').each(function ($node) {\n          var str = $node.attr('style');\n          var matches = /mso-list:Ignore/.exec(str);\n          if (matches) $node.remove();else $node.unwrap();\n        });\n        $w.find('[style]').removeAttr('style');\n        $w.find(\"[class^='Mso']\").removeAttr('class');\n        $w.find('a').filter(function ($node) {\n          return !$node.attr('href');\n        }).unwrap();\n      }.bind(this));\n      html = html.replace(/<p[^>]*><\\/p>/gi, '');\n      html = html.replace(/<li>·/gi, '<li>');\n      html = html.trim(); // remove spaces between\n\n      html = html.replace(/\\/(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)>\\s+<(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)/gi, '/$1>\\n<$2');\n      var result = '';\n      var lines = html.split(/\\n/);\n\n      for (var i = 0; i < lines.length; i++) {\n        var space = lines[i] !== '' && lines[i].search(/>$/) === -1 ? ' ' : '\\n';\n        result += lines[i] + space;\n      }\n\n      result = result.trim();\n      return result;\n    },\n    _parseWordLists: function _parseWordLists($w) {\n      var lastLevel = 0;\n      var $item = null;\n      var $list = null;\n      var $listChild = null;\n      $w.find('p').each(function ($node) {\n        var level = $node.attr('data-listLevel');\n\n        if (level === null && $node.hasClass('MsoListParagraphCxSpMiddle')) {\n          level = 1;\n        }\n\n        if (level !== null) {\n          var txt = $node.text();\n          var listTag = /^\\s*\\w+\\./.test(txt) ? '<ol></ol>' : '<ul></ul>'; // new parent list\n\n          if ($node.hasClass('MsoListParagraphCxSpFirst') || $node.hasClass('MsoNormal')) {\n            $list = this.dom(listTag);\n            $node.before($list);\n          } // new child list\n          else if (level > lastLevel && lastLevel !== 0) {\n              $listChild = this.dom(listTag);\n              $item.append($listChild);\n              $list = $listChild;\n            } // level up\n\n\n          if (level < lastLevel) {\n            var len = lastLevel - level + 1;\n\n            for (var i = 0; i < len; i++) {\n              $list = $list.parent();\n            }\n          } // create item\n\n\n          $node.find('span').first().unwrap();\n          $item = this.dom('<li>' + $node.html().trim() + '</li>');\n\n          if ($list === null) {\n            $node.before(listTag);\n            $list = $node.prev();\n          } // append\n\n\n          $list.append($item);\n          $node.remove();\n          lastLevel = level;\n        } else {\n          $list = null;\n          lastLevel = 0;\n        }\n      }.bind(this));\n    }\n  });\n  ArticleEditor.add('module', 'insertion', {\n    init: function init() {\n      this._clear();\n    },\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    // get\n    getFirstInserted: function getFirstInserted() {\n      return this.inserted.instances[0];\n    },\n    getLastInserted: function getLastInserted() {\n      var len = this.inserted.instances.length;\n      var last = this.inserted.instances[len - 1];\n\n      if (last && last.isInlineBlock()) {\n        last = last.getParent();\n      }\n\n      return last;\n    },\n    getInserted: function getInserted() {\n      return this.inserted;\n    },\n    // set\n    setContent: function setContent(params) {\n      this._insert(params, 'set');\n\n      var inserted = this.getInserted();\n      this.inserted = false;\n      return inserted;\n    },\n    // insert\n    insertContent: function insertContent(params) {\n      this._insert(params, 'insert');\n\n      var inserted = this.getInserted();\n      this.inserted = false;\n      return inserted;\n    },\n    insertEmptyBlock: function insertEmptyBlock() {\n      this._insert({\n        html: this.app.block.createHtml()\n      }, 'insert');\n\n      var inserted = this.getInserted();\n      this.inserted = false;\n      return inserted;\n    },\n    insertNewline: function insertNewline(caret, doublenode) {\n      var str = doublenode ? '\\n\\n' : '\\n';\n      return this._insertFragment({\n        node: document.createTextNode(str)\n      }, caret ? caret : 'after');\n    },\n    insertPoint: function insertPoint(e) {\n      var range;\n      var marker = this.app.utils.createInvisibleChar();\n      var doc = this.app.editor.getDocNode();\n      var x = e.clientX,\n          y = e.clientY;\n\n      if (doc.caretPositionFromPoint) {\n        var pos = doc.caretPositionFromPoint(x, y);\n        var sel = doc.getSelection();\n        range = sel.getRangeAt(0);\n        range.setStart(pos.offsetNode, pos.offset);\n        range.collapse(true);\n        range.insertNode(marker);\n      } else if (doc.caretRangeFromPoint) {\n        range = doc.caretRangeFromPoint(x, y);\n        range.insertNode(marker);\n      }\n\n      this.app.caret.set(marker, 'after');\n    },\n    insertBreakline: function insertBreakline(caret) {\n      // split inline\n      var inlines = this.app.selection.getNodes({\n        type: 'inline'\n      });\n\n      if (this.app.selection.isCollapsed() && inlines.length !== 0) {\n        return this._splitInline(inlines, document.createElement('br'));\n      }\n\n      return this._insertFragment({\n        node: document.createElement('br')\n      }, caret ? caret : 'after');\n    },\n    insertNode: function insertNode(node, caret, splitinline) {\n      if (splitinline) {\n        var inlines = this.app.selection.getNodes({\n          type: 'inline'\n        });\n\n        if (inlines.length !== 0) {\n          return this._splitInline(inlines, node);\n        }\n      }\n\n      return this._insertFragment({\n        node: this.dom(node).get()\n      }, caret);\n    },\n    insertHtml: function insertHtml(html, caret) {\n      return this._insertFragment({\n        html: html\n      }, caret);\n    },\n    insertText: function insertText(text, caret) {\n      var instance = this.app.block.get();\n\n      if (instance && !instance.isEditable() || this.app.blocks.is()) {\n        this.insertContent({\n          html: text,\n          caret: caret\n        });\n        return;\n      }\n\n      var sel = this.win.getSelection();\n      var node;\n\n      if (sel.getRangeAt && sel.rangeCount) {\n        text = this.app.content.getTextFromHtml(text, {\n          nl: true\n        });\n        node = document.createTextNode(text);\n        var range = sel.getRangeAt(0);\n        range.deleteContents();\n        range.insertNode(node);\n        caret = caret || 'end';\n        this.app.caret.set(node, caret);\n      }\n\n      return node;\n    },\n    insertListToList: function insertListToList($list, $target, caret) {\n      // add paste marker\n      var $items = $list.find('li');\n      var $last = $items.last();\n      $items.addClass(this.prefix + '-pasteitems');\n      $last.addClass(this.prefix + '-pastemarker'); // build nodes\n\n      var $nodes = $list.children(); // current li item\n\n      var $item = this.dom(this.app.selection.getBlock()); // caret position\n\n      var isStart = this.app.caret.is($target, 'start');\n      var isEnd = this.app.caret.is($target, 'end');\n      var isStartItem = this.app.caret.is($item, 'start');\n      var isEndItem = this.app.caret.is($item, 'end', ['ul', 'ol']); // start\n\n      if (isStart) {\n        $target.prepend($nodes);\n      } // end\n      else if (isEnd) {\n          $target.append($nodes);\n        } // middle\n        else {\n            // item empty\n            if (this.app.content.isEmptyHtml($item.html())) {\n              $item.after($nodes);\n              $item.remove();\n            } // item before\n            else if (isStartItem) {\n                $item.before($nodes);\n              } // item after\n              else if (isEndItem) {\n                  var $childList = $item.find('ul, ol');\n\n                  if ($childList.length !== 0) {\n                    $childList.prepend($nodes);\n                  } else {\n                    $item.after($nodes);\n                  }\n                } // item middle\n                else {\n                    this.app.element.split($item).before($nodes);\n                  }\n          } // set caret\n\n\n      var pastemarker = this.prefix + '-pastemarker';\n      var pasteitems = this.prefix + '-pasteitems';\n\n      if (caret) {\n        $last = this.app.editor.getLayout().find('.' + pastemarker).removeClass(pastemarker);\n        this.app.caret.set($last, 'end');\n      }\n\n      return this.app.editor.getLayout().find('.' + pasteitems).removeClass(pasteitems);\n    },\n    // detect\n    detectPosition: function detectPosition($target, position) {\n      if (position) return position; // caret position\n\n      var isStart = this.app.caret.is($target, 'start');\n      var isEnd = this.app.caret.is($target, 'end'); // end\n\n      if (isEnd) {\n        position = 'after';\n      } // start\n      else if (isStart) {\n          position = 'before';\n        } // middle\n        else {\n            position = 'split';\n          }\n\n      return position;\n    },\n    // private\n    // insert\n    _insert: function _insert(params, type) {\n      this.html = params.html; // broadcast before\n\n      this.html = this.app.broadcastHtml('editor.before.insert', this.html); // params\n\n      this.isParse = typeof params.parse === 'undefined' ? true : params.parse;\n      this.isClean = typeof params.clean === 'undefined' ? false : params.clean;\n      this.isCaret = typeof params.caret === 'undefined' ? true : params.caret;\n      this.isPosition = typeof params.position === 'undefined' ? false : params.position; // type\n\n      if (type === 'set' || this.app.editor.isAllSelected()) {\n        // set\n        this._setContent();\n      } else {\n        // insert\n        this._insertContent();\n      } // broadcast\n\n\n      this.app.broadcast('editor.insert', this.inserted);\n    },\n    _insertContent: function _insertContent() {\n      var current = this.app.block.get();\n      var position = false;\n      var remove = false;\n      var nodes, $block; // check\n\n      this._checkEmpty();\n\n      this._checkLine(); // blocks\n\n\n      if (this.app.blocks.is()) {\n        // insert to blocks\n        if (this.isEmpty) {\n          return;\n        } else if (this.isLine) {\n          this.html = this.app.block.createHtml(this.html);\n        } // parse & clean\n\n\n        this._clean();\n\n        this._parse();\n\n        this._parseBuild(); // nodes\n\n\n        nodes = this._buildParsedNodes(); // insert\n\n        var last = this.app.blocks.getLastSelected();\n        var $last = last.getBlock();\n        $last.after(nodes); // remove\n\n        this.app.blocks.removeSelected(false);\n      } // not selected\n      else if (!current || this.isPosition) {\n          // insert to blocks\n          if (this.isEmpty) {\n            return;\n          } else if (this.isLine) {\n            this.html = this.app.block.createHtml(this.html);\n          } // parse & clean\n\n\n          this._clean();\n\n          this._parse();\n\n          this._parseBuild(); // nodes\n\n\n          nodes = this._buildParsedNodes();\n          var positions = ['after', 'before', 'append'];\n          var emptyLayer = false;\n\n          if (this.isPosition === 'top' || !this.isPosition && this.opts.editor.add === 'top') {\n            current = this.app.blocks.getFirst();\n            position = 'before';\n          } else if (current && positions.indexOf(this.isPosition) !== -1) {\n            position = this.isPosition;\n            emptyLayer = current.getType('layer') && current.isEmpty();\n          } else {\n            current = this.app.blocks.getLast();\n            position = 'after';\n          }\n\n          $block = current.getBlock();\n\n          if (emptyLayer) {\n            $block.removeClass(this.prefix + '-empty-layer');\n            $block.html('');\n          }\n\n          $block[position](nodes);\n        } // list to list\n        else if (this._isListToList(current)) {\n            // delete selection\n            this.app.selection.deleteContents(); // parse & clean\n\n            this._clean();\n\n            this._parse();\n\n            this._parseBuild(); // insert\n\n\n            $block = current.getBlock();\n            var $list = this.$parsed.children().first();\n            this.$nodes = this.insertListToList($list, $block, 'end');\n            this.isCaret = false;\n          } else if (current) {\n            // like variable\n            if (current.isInlineBlock()) {\n              var parent = current.getParent();\n              this.app.caret.set(current.getBlock(), 'after');\n              current.remove();\n              this.app.block.set(parent);\n              current = parent;\n            } // editable\n\n\n            if (current.isEditable()) {\n              if (this.isEmpty) {\n                return;\n              } // parse & clean\n\n\n              this._clean();\n\n              this._cleanSpecial();\n\n              if (this.isLine) this._parseLine();else this._parse();\n\n              this._parseBuild();\n\n              if (current.isEmpty()) {\n                remove = true;\n                position = 'after';\n              } else {\n                // delete selection\n                this.app.selection.deleteContents();\n              } // nodes\n\n\n              nodes = this._buildParsedNodes();\n              $block = current.getBlock(); // insert\n\n              this._insertToEditable(current, $block, nodes, position, remove);\n            } // non editable\n            else {\n                // set position\n                position = 'after'; // check\n\n                if (this.isEmpty) {\n                  return;\n                } else if (this.isLine) {\n                  this.html = this.app.block.createHtml(this.html);\n                } // parse & clean\n\n\n                this._clean();\n\n                if (this.isLine) this._parseLine();else this._parse();\n\n                this._parseBuild(); // nodes\n\n\n                nodes = this._buildParsedNodes();\n                $block = current.getBlock(); // emptiable empty\n\n                if (current.isEmptiable() && current.isEmpty()) {\n                  $block.removeClass(this.prefix + '-empty-layer');\n                  $block.html('');\n                  position = 'append';\n                } // insert\n\n\n                $block[position](nodes);\n              }\n          } else {\n            return;\n          } // inserted\n\n\n      this._buildInserted();\n\n      this._buildCaret();\n\n      this._buildEditor();\n    },\n    _insertToEditable: function _insertToEditable(current, $block, nodes, position, remove) {\n      if (this.isLine) {\n        this.$nodes = this._insertFragment({\n          fragment: this.$parsed.get()\n        }, 'end');\n        this.isCaret = false;\n      } else {\n        // detect position\n        if (this.app.content.isEmptyHtml($block.html())) {\n          position = 'after';\n          remove = true;\n        } else {\n          position = this.detectPosition($block, position);\n        } // insert\n\n\n        if (position === 'split') {\n          this.app.element.split($block).before(nodes);\n        } else {\n          $block[position](nodes);\n        } // remove\n\n\n        if (remove) current.remove();\n      }\n    },\n    _insertFragment: function _insertFragment(obj, caret) {\n      if (obj.html || obj.fragment) {\n        var fragment = this.app.fragment.build(obj.html || obj.fragment);\n        this.app.fragment.insert(fragment);\n      } else {\n        this.app.fragment.insert(obj.node);\n      }\n\n      if (caret) {\n        var target = obj.node ? obj.node : caret === 'start' ? fragment.first : fragment.last;\n        this.app.caret.set(target, caret);\n      }\n\n      if (obj.node) {\n        return this.dom(obj.node);\n      } else {\n        return this.dom(fragment.nodes);\n      }\n    },\n    // set\n    _setContent: function _setContent() {\n      // check\n      this._checkEmpty();\n\n      this._checkLine(); // set to editor\n\n\n      if (this.isEmpty) {\n        this.html = this.app.block.createHtml();\n      } else if (this.isLine) {\n        this.html = this.app.block.createHtml(this.html);\n      } // parse & clean\n\n\n      this._clean();\n\n      this._parse();\n\n      this._parseBuild(); // nodes\n\n\n      var nodes = this._buildParsedNodes(); // set\n\n\n      this.app.editor.unsetSelectAllClass();\n      this.app.editor.getLayout().html('').append(nodes); // broadcast empty\n\n      if (this.isEmpty) {\n        this.app.broadcast('editor.empty');\n      } // inserted\n\n\n      this._buildInserted();\n\n      this._buildCaret();\n\n      this._buildEditor();\n    },\n    // split\n    _splitInline: function _splitInline(inlines, node) {\n      var $part = this.app.element.split(inlines[0]);\n      $part.before(node);\n      this.app.caret.set($part, 'start');\n      return this.dom(node);\n    },\n    // build\n    _buildEditor: function _buildEditor() {\n      this.app.editor.build();\n      this.app.editor.setFocus();\n    },\n    _buildCaret: function _buildCaret() {\n      if (!this.isCaret) return;\n      var instance,\n          caret = 'end';\n\n      if (this.isCaret === 'start') {\n        instance = this.getFirstInserted();\n        caret = 'start';\n      } else {\n        instance = this.getLastInserted();\n      } // set\n\n\n      if (instance) {\n        this.app.block.set(instance, caret);\n      } // ui\n\n\n      this.app.toolbar.observe();\n    },\n    _buildInserted: function _buildInserted() {\n      this.inserted = {\n        $nodes: this.$nodes,\n        instances: []\n      };\n      this.inserted.$nodes.each(this._buildInstance.bind(this));\n    },\n    _buildInstance: function _buildInstance($node) {\n      var instance = $node.dataget('instance');\n\n      if (instance) {\n        this.inserted.instances.push(instance);\n      }\n\n      var $nodes = $node.find('[data-' + this.prefix + '-type]');\n\n      if ($nodes.length !== 0) {\n        $nodes.each(this._buildInstance.bind(this));\n      }\n    },\n    _buildParsedNodes: function _buildParsedNodes() {\n      return this.$parsed.get().childNodes;\n    },\n    // clear\n    _clear: function _clear() {\n      this.html = false;\n      this.isLine = false;\n      this.isEmpty = false;\n      this.isSplit = false;\n      this.isClean = false;\n      this.isParse = true;\n      this.isCaret = true;\n      this.isPosition = false;\n    },\n    // clean\n    _clean: function _clean() {\n      if (this.isClean) {\n        this.html = this.app.cleaner.cleanHtml(this.html);\n      }\n    },\n    _cleanSpecial: function _cleanSpecial(type) {\n      var clean, extend, except;\n\n      if (['cell', 'address', 'figcaption', 'quoteitem'].indexOf(type) !== -1) {\n        clean = true;\n      } else if (type === 'dlist') {\n        clean = true;\n        except = ['dt', 'dd'];\n      } else if (type === 'list') {\n        clean = true;\n        except = ['ul', 'ol', 'li'];\n      }\n\n      if (clean) {\n        this.isLine = true;\n        this.html = this.app.content.addBrToBlocks(this.html);\n        this.html = this.app.content.removeBlockTags(this.html, extend, except);\n        this.html = this.html.replace(/<br\\s?\\/?>\\n?$/gi, '');\n      }\n    },\n    // parse\n    _parse: function _parse() {\n      if (this.isParse) {\n        this.html = this.app.parser.parse(this.html, false);\n      }\n    },\n    _parseLine: function _parseLine() {\n      if (this.isParse) {\n        this.html = this.app.parser.parseLine(this.html, false);\n      }\n    },\n    _parseBuild: function _parseBuild() {\n      this.$parsed = this.app.parser.build(this.html);\n      this.$nodes = this.$parsed.children();\n    },\n    // check\n    _checkEmpty: function _checkEmpty() {\n      this.isEmpty = this.app.content.isEmptyHtml(this.html);\n    },\n    _checkLine: function _checkLine() {\n      this.isLine = this.app.content.isLine(this.html);\n    },\n    // is\n    _isListToList: function _isListToList(instance) {\n      var $target = instance.getBlock();\n      var type = $target.attr('data-' + this.prefix + '-type');\n      var $list = this.dom('<div>').html(this.html).children().first();\n      return type === 'list' && $list.length !== 0 && ['ul', 'ol'].indexOf($list.get().tagName.toLowerCase()) !== -1;\n    }\n  });\n  ArticleEditor.add('module', 'fragment', {\n    build: function build(node) {\n      return this.is(node) ? node : this.create(node);\n    },\n    insert: function insert(fragment) {\n      var sel = this.app.selection.get();\n      if (!sel.range) return;\n\n      if (sel.collapsed) {\n        var start = sel.range.startContainer;\n\n        if (start.nodeType !== 3 && start.tagName === 'BR') {\n          start.parentNode.removeChild(start);\n        }\n      } else {\n        sel.range.deleteContents();\n      }\n\n      if (fragment.frag) {\n        sel.range.insertNode(fragment.frag);\n      } else {\n        sel.range.insertNode(fragment);\n      }\n    },\n    createContainer: function createContainer(html) {\n      var $div = this.dom('<div>');\n      if (typeof html === 'string') $div.html(html);else $div.append(this.dom(html).clone(true));\n      return $div.get();\n    },\n    create: function create(html) {\n      var el = typeof html === 'string' ? this.createContainer(html) : html;\n      var frag = document.createDocumentFragment(),\n          node,\n          firstNode,\n          lastNode;\n      var nodes = [];\n      var i = 0;\n\n      while (node = el.firstChild) {\n        i++;\n        var n = frag.appendChild(node);\n        if (i === 1) firstNode = n;\n        nodes.push(n);\n        lastNode = n;\n      }\n\n      return {\n        frag: frag,\n        first: firstNode,\n        last: lastNode,\n        nodes: nodes\n      };\n    },\n    is: function is(obj) {\n      return _typeof(obj) === 'object' && obj.frag;\n    }\n  });\n  ArticleEditor.add('module', 'clipboard', {\n    getContent: function getContent(clipboard) {\n      var type = this.isPlainText(clipboard) ? 'text/plain' : 'text/html';\n      var html = clipboard.getData(type);\n      html = type === 'text/plain' ? this.app.content.escapeHtml(html) : html;\n      return html;\n    },\n    setContent: function setContent(e, html, text) {\n      var clipboard = e.clipboardData; // unparse\n\n      html = this.app.parser.unparse(html);\n      text = text || this.app.content.getTextFromHtml(html, {\n        nl: true\n      }); // set\n\n      clipboard.setData('text/html', html);\n      clipboard.setData('text/plain', text);\n    },\n    isPlainText: function isPlainText(clipboard) {\n      var text = clipboard.getData('text/plain');\n      var html = clipboard.getData('text/html');\n\n      if (html && html.trim() !== '') {\n        return false;\n      } else {\n        return text !== null;\n      }\n    }\n  });\n  ArticleEditor.add('module', 'addbar', {\n    init: function init() {\n      this.customButtons = {};\n    },\n    popup: function popup(params, button) {\n      // create\n      this.app.popup.create('addbar', {\n        width: '476px',\n        items: this.buildItems()\n      }); // open\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    buildItems: function buildItems() {\n      var items = {};\n      var obj = $ARX.extend(true, this.opts.addbarObj);\n      var arr = this.opts.addbar.concat(this.opts.addbarAdd);\n\n      if (this.opts.addbarAdd.length !== 0 && this.opts.addbarAdd.indexOf('text') !== -1) {\n        var tin = arr.indexOf('text');\n        var pin = arr.indexOf('paragraph');\n        var to = pin !== -1 ? pin + 1 : 0; // move text block button\n\n        arr.splice(to, 0, arr.splice(tin, 1)[0]);\n      }\n\n      for (var i = 0; i < arr.length; i++) {\n        var name = arr[i];\n        if (this.opts.addbarHide.indexOf(name) !== -1) continue;\n        items[name] = obj[name];\n      }\n\n      var customItems = $ARX.extend(true, this.customButtons);\n      var instance = this.app.block.get(); // build custom\n\n      for (var key in customItems) {\n        items[key] = customItems[key];\n      } // build all\n\n\n      for (var index in items) {\n        this._buildItem(instance, items, items[index], index);\n      }\n\n      return items;\n    },\n    add: function add(name, obj) {\n      this.customButtons[name] = obj;\n    },\n    // private\n    _buildItem: function _buildItem(instance, items, item, key) {\n      // allowed buttons\n      if (item.blocks && !instance || instance && item.blocks && !instance.isAllowedButton(key, item)) {\n        items[key] = false;\n        return;\n      }\n\n      items[key] = {\n        container: true,\n        title: item.title,\n        icon: item.icon || key,\n        command: item.command,\n        params: {\n          name: key\n        }\n      };\n    }\n  });\n  ArticleEditor.add('module', 'marker', {\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    build: function build(pos) {\n      var $marker = this.dom('<span>').attr('id', 'selection-marker-' + pos);\n      $marker.addClass(this.prefix + '-selection-marker');\n      $marker.html(this.opts.markerChar);\n      return $marker.get();\n    },\n    insert: function insert() {\n      this.remove();\n      var sel = this.app.selection.get();\n      var both = !sel.collapsed;\n      if (!sel.range) return;\n      var start = this.build('start');\n      var end = this.build('end');\n      var cloned = sel.range.cloneRange();\n\n      if (both) {\n        cloned.collapse(false);\n        cloned.insertNode(end);\n      }\n\n      cloned.setStart(sel.range.startContainer, sel.range.startOffset);\n      cloned.collapse(true);\n      cloned.insertNode(start);\n      sel.range.setStartAfter(start);\n\n      if (both) {\n        sel.range.setEndBefore(end);\n      }\n\n      this.app.selection.setRange(sel.range);\n    },\n    restore: function restore() {\n      var start = this.find('start');\n      var end = this.find('end');\n      var sel = this.app.selection.get();\n      var range = sel.range ? sel.range : this.doc.createRange();\n\n      if (start) {\n        var prev = end ? end.previousSibling : false;\n        var next = start.nextSibling;\n        next = next && next.nodeType === 3 && next.textContent.replace(/[\\n\\t]/g, '') === '' ? false : next;\n\n        if (!end) {\n          if (next) {\n            range.selectNodeContents(next);\n            range.collapse(true);\n          } else {\n            this._restoreInject(range, start);\n          }\n        } else if (next && next.id === 'selection-marker-end') {\n          this._restoreInject(range, start);\n        } else {\n          if (prev && next) {\n            range.selectNodeContents(prev);\n            range.collapse(false);\n            range.setStart(next, 0);\n          } else if (prev && !next) {\n            range.selectNodeContents(prev);\n            range.collapse(false);\n            range.setStartAfter(start);\n          } else {\n            range.setStartAfter(start);\n            range.setEndBefore(end);\n          }\n        }\n\n        this.app.selection.setRange(range);\n        var fix = start && end ? 2 : 1;\n        var offset = this.app.offset.get();\n        offset = {\n          start: offset.start - fix,\n          end: offset.end - fix\n        };\n        if (start) start.parentNode.removeChild(start);\n        if (end) end.parentNode.removeChild(end);\n        this.app.editor.getWin().focus();\n        this.app.offset.set(offset);\n      }\n    },\n    find: function find(pos) {\n      var $editor = this.app.editor.getLayout();\n      var $marker = $editor.find('#selection-marker-' + pos);\n      return $marker.length !== 0 ? $marker.get() : false;\n    },\n    remove: function remove() {\n      var start = this.find('start');\n      var end = this.find('end');\n      if (start) start.parentNode.removeChild(start);\n      if (end) end.parentNode.removeChild(end);\n    },\n    // private\n    _restoreInject: function _restoreInject(range, start) {\n      var textNode = this.app.utils.createInvisibleChar();\n      this.dom(start).after(textNode);\n      range.selectNodeContents(textNode);\n      range.collapse(false);\n    }\n  });\n  ArticleEditor.add('module', 'format', {\n    popup: function popup(params, button) {\n      var instance = this.app.block.get();\n      var tag = instance.getTag();\n      var tags = this.opts.format; // build items\n\n      var items = {};\n\n      for (var i = 0; i < tags.length; i++) {\n        var key = tags[i];\n        items[key] = {\n          title: this.opts.formatObj[key].title,\n          params: {\n            tag: key\n          },\n          command: 'block.format',\n          shortcut: this.opts.formatObj[key].shortcut,\n          active: key === tag\n        };\n      }\n\n      this.app.popup.create('format', {\n        width: '300px',\n        items: items\n      });\n      this.app.popup.open({\n        button: button\n      });\n    },\n    set: function set(params) {\n      // popup\n      if (this.app.popup.isOpen()) {\n        this.app.popup.close();\n      } // blocks\n\n\n      if (this.app.blocks.is()) {\n        return;\n      }\n\n      var instance = this.app.block.get();\n      var isEmpty = instance.isEmpty();\n      var caret = isEmpty ? 'start' : false;\n      var format = {\n        type: this.opts.formatObj[params.tag].type,\n        tag: params.tag\n      };\n      var $items; // current params\n\n      this.tag = instance.getTag();\n      this.type = instance.getType();\n      this.$block = instance.getBlock(); // selection\n\n      if (!isEmpty) {\n        this.app.selection.saveMarker();\n      } // check same\n\n\n      if (this._isSameTag(format)) {\n        format = this._checkSameFormat(format);\n      } // format\n\n\n      if (format) {\n        if (this._isListToText(format, 'list')) {\n          $items = this._formatListToText(format);\n        } else if (this._isListToText(format, 'dlist')) {\n          $items = this._formatListToText(format, true);\n        } else if (this._isTextToList(format, 'list')) {\n          this._formatTextToList(format, false, caret);\n        } else if (this._isTextToList(format, 'dlist')) {\n          this._formatTextToList(format, true, caret);\n        } else {\n          this._replaceTo(instance, format, caret);\n        }\n      } // restore\n\n\n      if (!isEmpty) {\n        this.app.selection.restoreMarker();\n      }\n\n      if ($items) {\n        var $block = this.app.selection.getDataBlock();\n        this.app.block.set($block, caret);\n      } // broadcast\n\n\n      instance = this.app.block.get();\n      this.app.broadcast('block.format', {\n        instance: instance\n      });\n    },\n    // private\n    _isSameTag: function _isSameTag(format) {\n      return this.tag === format.tag && this.type === format.type;\n    },\n    _checkSameFormat: function _checkSameFormat(format) {\n      if (['heading', 'list', 'dlist', 'address'].indexOf(this.type) !== -1) {\n        format = this._buildDefaultFormat();\n      } else if (['paragraph', 'text'].indexOf(this.type) !== -1) {\n        format = false;\n      }\n\n      return format;\n    },\n    _buildDefaultFormat: function _buildDefaultFormat() {\n      var type = this.opts.editor.markup;\n      var tag = type === 'paragraph' ? 'p' : 'div';\n      return {\n        type: type,\n        tag: tag\n      };\n    },\n    _formatListToText: function _formatListToText(format, dlist) {\n      var $items = dlist ? this._getDlistItems() : this._getListItems();\n\n      this._createItems($items, format);\n\n      this.$block.remove();\n      return $items;\n    },\n    _formatTextToList: function _formatTextToList(format, dlist, caret) {\n      var newInstance = this.app.create('block.' + format.type);\n      var $newBlock = newInstance.getBlock();\n\n      if (dlist && this.type === 'list') {\n        var z = 0;\n\n        this._getListItems().each(function ($node) {\n          var tag = z === 0 ? 'dt' : 'dd';\n          var $item = this.dom('<' + tag + '>').html($node.html());\n          z = tag === 'dt' ? 1 : 0;\n          $newBlock.append($item);\n        }.bind(this));\n      } else if (!dlist && this.type === 'dlist') {\n        this._getDlistItems().each(function ($node) {\n          var $item = this.dom('<li>').html($node.html());\n          $newBlock.append($item);\n        }.bind(this));\n      } else {\n        var tag = dlist ? '<dt>' : '<li>';\n        var $item = this.dom(tag).html(this.$block.html());\n        $newBlock.append($item);\n      } // parse instance\n\n\n      this.app.create('block.' + format.type, $newBlock);\n      this.$block.after($newBlock);\n      this.$block.remove(); // set\n\n      this.app.block.set($newBlock, caret);\n    },\n    _replaceTo: function _replaceTo(instance, format, caret) {\n      var $block = instance.getBlock();\n      var $newBlock = this.app.element.replaceToTag($block, format.tag); // clean classes & styles\n\n      $newBlock.removeAttr('style class data-' + this.prefix + '-style-cache'); // new instance\n\n      this.app.create('block.' + format.type, $newBlock); // set\n\n      this.app.block.set($newBlock, caret);\n    },\n    _createItems: function _createItems($items, format) {\n      $items.each(function ($node) {\n        var $item = this.dom('<' + format.tag + '>');\n        $item.html($node.html());\n        $node.remove();\n        this.app.create('block.' + format.type, $item);\n        this.$block.before($item);\n      }.bind(this));\n    },\n    _isListToText: function _isListToText(format, type) {\n      return this.type === type && ['heading', 'address', 'paragraph', 'text'].indexOf(format.type) !== -1;\n    },\n    _isTextToList: function _isTextToList(format, type) {\n      var checkType = type === 'list' ? 'dlist' : 'list';\n      return format.type === type && ['heading', 'address', 'paragraph', 'text', checkType].indexOf(this.type) !== -1;\n    },\n    _getListItems: function _getListItems() {\n      var $items = this.$block.find('li');\n      $items.find('ul, ol').each(function ($node) {\n        $node.parent().after($node);\n      });\n      $items.find('ul, ol').unwrap();\n      return $items;\n    },\n    _getDlistItems: function _getDlistItems() {\n      return this.$block.find('dt, dd');\n    }\n  });\n  ArticleEditor.add('module', 'inline', {\n    removeFormat: function removeFormat() {\n      this.app.popup.close();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      this.app.selection.save($block);\n      var nodes = this.app.selection.getNodes({\n        type: 'inline'\n      });\n\n      for (var i = 0; i < nodes.length; i++) {\n        var $node = this.dom(nodes[i]);\n\n        if (!$node.attr('data-' + this.prefix + '-type')) {\n          $node.unwrap();\n        }\n      }\n\n      this.app.selection.restore();\n      this.app.toolbar.observe();\n    },\n    set: function set(params) {\n      // popup\n      if (this.app.popup.isOpen()) {\n        this.app.popup.close();\n      } // params\n\n\n      this.params = params;\n      var nodes = [];\n      var sel = this.app.selection.get();\n\n      if (sel.collapsed) {\n        nodes = this.formatCollapsed();\n      } else {\n        nodes = this.formatUncollapsed();\n      }\n\n      this.app.toolbar.observe();\n      this.app.broadcast('inline.format', {\n        nodes: nodes\n      });\n      return nodes;\n    },\n    formatCollapsed: function formatCollapsed() {\n      var node;\n      var nodes = [];\n      var inline = this.app.selection.getInline();\n      var $inline = this.dom(inline);\n\n      var tags = this._getParamsTags();\n\n      var hasSameTag = this._isSameTag(inline, tags);\n\n      var caret = this.params && this.params.caret ? this.params.caret : false; // 1) not inline\n\n      if (!inline) {\n        node = this._insertInline(nodes, this.params.tag, caret);\n      } else {\n        // 2) inline is empty\n        if (this.app.content.isEmptyHtml(inline.innerHTML)) {\n          // 2.1) has same tag\n          if (hasSameTag) {\n            this.app.caret.set(inline, caret ? caret : 'after');\n            $inline.remove();\n          } // 2.2) has a different tag\n          else {\n              var $el = this.app.element.replaceToTag(inline, this.params.tag);\n              this.app.caret.set($el, caret ? caret : 'start');\n            }\n        } // 3) inline isn't empty\n        else {\n            // 3.1) has same tag\n            if (hasSameTag) {\n              var extractedContent = this.app.content.extractHtmlFromCaret(inline);\n              var $secondPart = this.dom('<' + this.params.tag + ' />');\n              $secondPart = this.app.element.cloneAttrs(inline, $secondPart);\n              $inline.after($secondPart.append(extractedContent));\n              this.app.caret.set($secondPart, caret ? caret : 'before');\n            } // 3.2) has a different tag\n            else {\n                node = this._insertInline(nodes, this.params.tag, caret);\n              }\n          }\n      }\n\n      if (node) {\n        nodes = [node];\n      }\n\n      return nodes;\n    },\n    formatUncollapsed: function formatUncollapsed() {\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var inlines = this.app.selection.getNodes({\n        type: 'inline'\n      }); // convert del / u\n\n      this._convertTags('u', instance); // convert target tags\n\n\n      this._convertToStrike(inlines, instance); // save selection\n\n\n      this.app.selection.save($block); // apply strike\n\n      this.app.editor.getDocNode().execCommand('strikethrough'); // revert to inlines\n\n      var nodes = this._revertToInlines(instance); // restore selection\n\n\n      this.app.selection.restore(); // filter if node is not selected\n\n      var finalNodes = [];\n      var selected = this.app.selection.getText();\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (this._isInSelection(nodes[i], selected)) {\n          finalNodes.push(nodes[i]);\n        }\n      } // clear and normalize\n\n\n      this._clearEmptyStyle(); // apply attr\n\n\n      if (this.params && typeof this.params.attr !== 'undefined') {\n        for (var z = 0; z < finalNodes.length; z++) {\n          for (var name in this.params.attr) {\n            finalNodes[z].setAttribute(name, this.params.attr[name]);\n          }\n        }\n      }\n\n      this.app.selection.save($block);\n      $block.get().normalize();\n\n      this._revertTags('u', instance);\n\n      this.app.selection.restore(); // caret\n\n      if (this.params && this.params.caret) {\n        var len = finalNodes.length;\n        var last = finalNodes[len - 1];\n        this.app.caret.set(last, this.params.caret);\n      }\n\n      return finalNodes;\n    },\n    // private\n    _clearEmptyStyle: function _clearEmptyStyle() {\n      var inlines = this.app.selection.getNodes({\n        type: 'inline'\n      });\n\n      for (var i = 0; i < inlines.length; i++) {\n        this._clearEmptyStyleAttr(inlines[i]);\n\n        var childNodes = inlines[i].childNodes;\n\n        if (childNodes) {\n          for (var z = 0; z < childNodes.length; z++) {\n            this._clearEmptyStyleAttr(childNodes[z]);\n          }\n        }\n      }\n    },\n    _clearEmptyStyleAttr: function _clearEmptyStyleAttr(node) {\n      if (node.nodeType !== 3 && node.getAttribute('style') === '') {\n        node.removeAttribute('style');\n      }\n    },\n    _isSameTag: function _isSameTag(inline, tags) {\n      return inline && tags.indexOf(inline.tagName.toLowerCase()) !== -1;\n    },\n    _isInSelection: function _isInSelection(node, selected) {\n      var text = this.app.utils.removeInvisibleChars(node.textContent);\n      return text.search(new RegExp(this.app.utils.escapeRegExp(selected))) !== -1;\n    },\n    _insertInline: function _insertInline(nodes, tag, caret) {\n      var inserted = this.app.insertion.insertNode(document.createElement(tag), caret ? caret : 'start');\n      return [inserted];\n    },\n    _convertTags: function _convertTags(tag, instance) {\n      if (this.params.tag !== tag) {\n        var $block = instance.getBlock();\n        $block.find(tag).each(function (node) {\n          var $el = this.app.element.replaceToTag(node, 'span');\n          $el.addClass(this.prefix + '-convertable-' + tag);\n        }.bind(this));\n      }\n    },\n    _revertTags: function _revertTags(tag, instance) {\n      var $block = instance.getBlock();\n      $block.find('span.' + this.prefix + '-convertable-' + tag).each(function (node) {\n        var $el = this.app.element.replaceToTag(node, tag);\n        $el.removeClass(this.prefix + '-convertable-' + tag);\n        if (this.app.element.removeEmptyAttrs($el, 'class')) $el.removeAttr('class');\n      }.bind(this));\n    },\n    _convertToStrike: function _convertToStrike(inlines, instance) {\n      var $block = instance.getBlock();\n      this.app.selection.save($block);\n\n      var tags = this._getParamsTags();\n\n      for (var i = 0; i < inlines.length; i++) {\n        var inline = inlines[i];\n        var $inline = this.dom(inline);\n        var tag = inlines[i].tagName.toLowerCase();\n\n        if (tags.indexOf(tag) !== -1) {\n          this._replaceToStrike($inline);\n        }\n      }\n\n      this.app.selection.restore();\n    },\n    _getParamsTags: function _getParamsTags() {\n      var tags = [this.params.tag];\n\n      if (this.params.tag === 'b' || this.params.tag === 'strong') {\n        tags = ['b', 'strong'];\n      } else if (this.params.tag === 'i' || this.params.tag === 'em') {\n        tags = ['i', 'em'];\n      }\n\n      return tags;\n    },\n    _replaceToStrike: function _replaceToStrike($el) {\n      $el.replaceWith(function () {\n        return this.dom('<strike>').append($el.html());\n      }.bind(this));\n    },\n    _revertToInlines: function _revertToInlines(instance) {\n      var nodes = [];\n      var $block = instance.getBlock(); // strike\n\n      $block.find('strike').each(function (node) {\n        var $node = this.app.element.replaceToTag(node, this.params.tag);\n        nodes.push($node.get());\n      }.bind(this));\n      return nodes;\n    }\n  });\n  ArticleEditor.add('module', 'codemirror', {\n    init: function init() {\n      this.cm = false;\n    },\n    create: function create(params) {\n      if (!this.is()) return;\n      var opts = _typeof(this.opts.codemirror) === 'object' ? this.opts.codemirror : {};\n      var instance = this.opts.codemirrorSrc ? this.opts.codemirrorSrc : CodeMirror;\n      this.cm = instance.fromTextArea(this.dom(params.el).get(), opts);\n      if (params.height) this.cm.setSize(null, params.height);\n      if (params.focus) this.cm.focus();\n      return this.cm;\n    },\n    destroy: function destroy(html) {\n      if (this.cm) {\n        this.cm.toTextArea();\n        this.cm = false;\n      }\n    },\n    is: function is() {\n      return this.opts.codemirror;\n    },\n    val: function val(html) {\n      if (this.is() && this.cm) {\n        html = this.cm.getValue();\n      }\n\n      return html;\n    }\n  });\n  ArticleEditor.add('class', 'upload', {\n    defaults: {\n      type: 'image',\n      box: false,\n      url: false,\n      cover: true,\n      // 'cover'\n      name: 'file',\n      data: false,\n      multiple: true,\n      placeholder: false,\n      hidden: true,\n      target: false,\n      success: false,\n      error: false,\n      remove: false,\n      trigger: false,\n      input: false\n    },\n    init: function init($el, params) {\n      this.eventname = this.prefix + '-upload';\n\n      if ($el) {\n        this._build($el, params);\n      }\n    },\n    send: function send(e, files, params) {\n      this.p = this._buildParams(params);\n\n      this._send(e, files);\n    },\n    // build\n    _build: function _build($el, params) {\n      this.p = this._buildParams(params);\n      this.$element = this.dom($el);\n      var tag = this.$element.get().tagName;\n\n      if (tag === 'INPUT') {\n        this._buildByInput();\n      } else {\n        this._buildByBox();\n      }\n    },\n    _buildParams: function _buildParams(params) {\n      return $ARX.extend(true, this.defaults, params);\n    },\n    // by input\n    _buildByInput: function _buildByInput() {\n      this.$input = this.$element; // box\n\n      if (this.p.box) {\n        this._buildBox();\n\n        this._buildPlaceholder();\n      } // input\n      else {\n          this.p.input = true;\n        }\n\n      this._buildAccept();\n\n      this._buildMultiple();\n\n      this._buildEvents();\n    },\n    // by box\n    _buildByBox: function _buildByBox() {\n      this._buildInput();\n\n      this._buildAccept();\n\n      this._buildMultiple();\n\n      this._buildBox();\n\n      this._buildPlaceholder();\n\n      this._buildEvents();\n    },\n    _buildBox: function _buildBox() {\n      this.$box = this.dom('<div>').addClass(this.prefix + '-form-upload-box');\n      this.$element.before(this.$box); // hide\n\n      if (this.p.hidden) {\n        this.$element.hide();\n      }\n    },\n    _buildPlaceholder: function _buildPlaceholder() {\n      if (!this.p.placeholder) return;\n      this.$placeholder = this.dom('<span>').addClass(this.prefix + '-form-upload-placeholder');\n      this.$placeholder.html(this.p.placeholder);\n      this.$box.append(this.$placeholder);\n    },\n    _buildInput: function _buildInput() {\n      this.$input = this.dom('<input>');\n      this.$input.attr('type', 'file');\n      this.$input.attr('name', this._getUploadParam());\n      this.$input.hide();\n      this.$element.before(this.$input);\n    },\n    _buildAccept: function _buildAccept() {\n      if (this.p.type !== 'image') return;\n      var types = this.opts.image.types.join(',');\n      this.$input.attr('accept', types);\n    },\n    _buildMultiple: function _buildMultiple() {\n      if (this.p.type !== 'image') return;\n\n      if (this.p.multiple) {\n        this.$input.attr('multiple', 'multiple');\n      } else {\n        this.$input.removeAttr('multiple');\n      }\n    },\n    _buildEvents: function _buildEvents() {\n      this.$input.on('change.' + this.eventname + '-' + this.uuid, this._change.bind(this));\n\n      if (this.p.input === false) {\n        this.$box.on('click.' + this.eventname, this._click.bind(this));\n        this.$box.on('drop.' + this.eventname, this._drop.bind(this));\n        this.$box.on('dragover.' + this.eventname, this._dragover.bind(this));\n        this.$box.on('dragleave.' + this.eventname, this._dragleave.bind(this));\n      }\n    },\n    _buildData: function _buildData(name, files, data) {\n      if (this.p.multiple) {\n        for (var i = 0; i < files.length; i++) {\n          data.append(name + '[]', files[i]);\n        }\n      } else {\n        data.append(name + '[]', files[0]);\n      }\n\n      return data;\n    },\n    // get\n    _getUploadParam: function _getUploadParam() {\n      return this.p.name;\n    },\n    // events\n    _click: function _click(e) {\n      e.preventDefault();\n      this.$input.click();\n    },\n    _change: function _change(e) {\n      this._send(e, this.$input.get().files);\n    },\n    _drop: function _drop(e) {\n      e.preventDefault();\n\n      this._send(e);\n    },\n    _dragover: function _dragover(e) {\n      e.preventDefault();\n\n      this._setStatus('hover');\n\n      return false;\n    },\n    _dragleave: function _dragleave(e) {\n      e.preventDefault();\n\n      this._removeStatus();\n\n      return false;\n    },\n    // set\n    _setStatus: function _setStatus(status) {\n      if (this.p.input || !this.p.box) return;\n\n      this._removeStatus();\n\n      this.$box.addClass(this.prefix + '-form-upload-' + status);\n    },\n    // remove\n    _removeStatus: function _removeStatus() {\n      if (this.p.input || !this.p.box) return;\n      var status = ['hover', 'error'];\n\n      for (var i = 0; i < status.length; i++) {\n        this.$box.removeClass(this.prefix + '-form-upload-' + status[i]);\n      }\n    },\n    // send\n    _send: function _send(e, files) {\n      files = files || e.dataTransfer.files;\n      var data = new FormData();\n\n      var name = this._getUploadParam();\n\n      data = this._buildData(name, files, data);\n      data = this.app.utils.extendData(data, this.p.data); // send data\n\n      this._sendData(e, files, data);\n    },\n    _sendData: function _sendData(e, files, data) {\n      if (typeof this.p.url === 'function') {\n        this.p.url.call(this.app, this, {\n          data: data,\n          files: files,\n          e: e\n        });\n      } else {\n        this.app.progress.show();\n        this.ajax.post({\n          url: this.p.url,\n          data: data,\n          before: function (xhr) {\n            var event = this.app.broadcast('upload.before.send', {\n              xhr: xhr,\n              data: data,\n              files: files,\n              e: e\n            });\n\n            if (event.isStopped()) {\n              this.app.progress.hide();\n              return false;\n            }\n          }.bind(this),\n          success: function (response) {\n            this._complete(response, e);\n          }.bind(this)\n        });\n      }\n    },\n    // complete\n    _complete: function _complete(response, e) {\n      if (response && response.error) {\n        this._setStatus('error');\n\n        if (this.p.error) {\n          this.app.broadcast('upload.error', {\n            response: response\n          });\n          this.app.api(this.p.error, response, e);\n        }\n      } else {\n        this._removeStatus();\n\n        if (this.p.success) {\n          this.app.broadcast('upload.complete', {\n            response: response\n          });\n          this.app.api(this.p.success, response, e);\n        }\n      }\n\n      setTimeout(this.app.progress.hide.bind(this.app), 500);\n    }\n  });\n  ArticleEditor.add('module', 'progress', {\n    stop: function stop() {\n      this.hide();\n    },\n    show: function show() {\n      this.hide();\n      this.$progress = this.dom('<div>');\n      this.$progress.attr('id', this.prefix + '-progress');\n      this.$progress.addClass(this.prefix + '-editor-progress');\n      this.$progressBar = this.dom('<span>');\n      this.$progress.append(this.$progressBar);\n      this.app.$body.append(this.$progress);\n    },\n    hide: function hide(settings) {\n      this.app.$body.find('#' + this.prefix + '-progress').remove();\n    }\n  });\n  ArticleEditor.add('module', 'sync', {\n    build: function build() {\n      this.syncedHtml = this.app.$element.val();\n    },\n    trigger: function trigger() {\n      if (!this.opts.editor.sync) return;\n\n      var html = this._getHtml();\n\n      if (this.is(html)) {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(function () {\n          this._sync(html);\n        }.bind(this), 200);\n      }\n    },\n    invoke: function invoke() {\n      var html = this._getHtml();\n\n      this.syncedHtml = html;\n\n      this._sync(html);\n    },\n    is: function is(html) {\n      var sync = false;\n\n      if (this.syncedHtml !== html) {\n        this.syncedHtml = html;\n        sync = true;\n      }\n\n      return sync;\n    },\n    // private\n    _getHtml: function _getHtml() {\n      var html = this.app.editor.getLayout().html();\n      return this.app.parser.unparse(html);\n    },\n    _sync: function _sync(html) {\n      var event = this.app.broadcast('editor.before.change', {\n        html: html\n      });\n\n      if (!event.isStopped()) {\n        this.app.$element.val(event.get('html'));\n        this.app.autosave.send();\n        this.app.state.trigger();\n        this.app.broadcast('editor.change', event);\n      }\n    }\n  });\n  ArticleEditor.add('module', 'autosave', {\n    send: function send() {\n      if (this.opts.autosave.url) {\n        this._sending();\n      }\n    },\n    // private\n    _getName: function _getName() {\n      var name;\n\n      if (this.opts.autosave.name) {\n        name = this.opts.autosave.name;\n      } else {\n        name = this.app.$element.attr('name');\n        name = !name ? 'content' + this.uuid : name;\n      }\n\n      return name;\n    },\n    _sending: function _sending() {\n      var name = this._getName();\n\n      var data = {};\n      data[name] = this.app.$element.val();\n      data = this.app.utils.extendData(data, this.opts.autosave.data);\n      this.ajax.post({\n        url: this.opts.autosave.url,\n        data: data,\n        before: function (xhr) {\n          var event = this.app.broadcast('autosave.before.send', {\n            xhr: xhr,\n            name: name,\n            data: data\n          });\n\n          if (event.isStopped()) {\n            return false;\n          }\n        }.bind(this),\n        success: function (response) {\n          this._complete(response, name, data);\n        }.bind(this)\n      });\n    },\n    _complete: function _complete(response, name, data) {\n      var callback = response && response.error ? 'autosave.error' : 'autosave.send';\n      this.app.broadcast(callback, {\n        name: name,\n        data: data,\n        response: response\n      });\n    }\n  });\n  ArticleEditor.add('module', 'tidy', {\n    init: function init() {},\n    parse: function parse(code) {\n      // clean setup\n      var ownLine = [];\n      var contOwnLine = [];\n      var newLevel = ['p', 'ul', 'ol', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'figure', 'figcaption', 'table', 'thead', 'tbody', 'tfoot', 'tr', 'td', 'th'];\n      this.lineBefore = new RegExp('^<(/?' + ownLine.join('|/?') + '|' + contOwnLine.join('|') + ')[ >]');\n      this.lineAfter = new RegExp('^<(br|/?' + ownLine.join('|/?') + '|/' + contOwnLine.join('|/') + ')[ >]');\n      this.newLevel = new RegExp('^</?(' + newLevel.join('|') + ')[ >]');\n      var i = 0,\n          codeLength = code.length,\n          point = 0,\n          start = null,\n          end = null,\n          tag = '',\n          out = '',\n          cont = '';\n      this.cleanlevel = 0;\n\n      for (; i < codeLength; i++) {\n        point = i; // if no more tags, copy and exit\n\n        if (-1 === code.substr(i).indexOf('<')) {\n          out += code.substr(i);\n          return this.finish(out);\n        } // copy verbatim until a tag\n\n\n        while (point < codeLength && code.charAt(point) !== '<') {\n          point++;\n        }\n\n        if (i !== point) {\n          cont = code.substr(i, point - i);\n\n          if (!cont.match(/^\\s{2,}$/g)) {\n            if ('\\n' === out.charAt(out.length - 1)) out += this.getTabs();else if ('\\n' === cont.charAt(0)) {\n              out += '\\n' + this.getTabs();\n              cont = cont.replace(/^\\s+/, '');\n            }\n            out += cont;\n          }\n\n          if (cont.match(/\\n/)) out += '\\n' + this.getTabs();\n        }\n\n        start = point; // find the end of the tag\n\n        while (point < codeLength && '>' !== code.charAt(point)) {\n          point++;\n        }\n\n        tag = code.substr(start, point - start);\n        i = point;\n        var t;\n\n        if ('!--' === tag.substr(1, 3)) {\n          if (!tag.match(/--$/)) {\n            while ('-->' !== code.substr(point, 3)) {\n              point++;\n            }\n\n            point += 2;\n            tag = code.substr(start, point - start);\n            i = point;\n          }\n\n          if ('\\n' !== out.charAt(out.length - 1)) out += '\\n';\n          out += this.getTabs();\n          out += tag + '>\\n';\n        } else if ('!' === tag[1]) {\n          out = this.placeTag(tag + '>', out);\n        } else if ('?' === tag[1]) {\n          out += tag + '>\\n';\n        } else if (t === tag.match(/^<(script|style|pre)/i)) {\n          t[1] = t[1].toLowerCase();\n          tag = this.cleanTag(tag);\n          out = this.placeTag(tag, out);\n          end = String(code.substr(i + 1)).toLowerCase().indexOf('</' + t[1]);\n\n          if (end) {\n            cont = code.substr(i + 1, end);\n            i += end;\n            out += cont;\n          }\n        } else {\n          tag = this.cleanTag(tag);\n          out = this.placeTag(tag, out);\n        }\n      }\n\n      return this.finish(out);\n    },\n    getTabs: function getTabs() {\n      var s = '';\n\n      for (var j = 0; j < this.cleanlevel; j++) {\n        s += '    ';\n      }\n\n      return s;\n    },\n    finish: function finish(code) {\n      code = code.replace(/\\n\\s*\\n/g, '\\n');\n      code = code.replace(/^[\\s\\n]*/, '');\n      code = code.replace(/[\\s\\n]*$/, '');\n      code = code.replace(/<script(.*?)>\\n<\\/script>/gi, '<script$1></script>');\n      this.cleanlevel = 0;\n      return code;\n    },\n    cleanTag: function cleanTag(tag) {\n      var tagout = '';\n      tag = tag.replace(/\\n/g, ' ');\n      tag = tag.replace(/\\s{2,}/g, ' ');\n      tag = tag.replace(/^\\s+|\\s+$/g, ' ');\n      var suffix = '';\n\n      if (tag.match(/\\/$/)) {\n        suffix = '/';\n        tag = tag.replace(/\\/+$/, '');\n      }\n\n      var m;\n\n      while (m = /\\s*([^= ]+)(?:=((['\"']).*?\\3|[^ ]+))?/.exec(tag)) {\n        if (m[2]) tagout += m[1].toLowerCase() + '=' + m[2];else if (m[1]) tagout += m[1].toLowerCase();\n        tagout += ' ';\n        tag = tag.substr(m[0].length);\n      }\n\n      return tagout.replace(/\\s*$/, '') + suffix + '>';\n    },\n    placeTag: function placeTag(tag, out) {\n      var nl = tag.match(this.newLevel);\n\n      if (tag.match(this.lineBefore) || nl) {\n        out = out.replace(/\\s*$/, '');\n        out += '\\n';\n      }\n\n      if (nl && '/' === tag.charAt(1)) this.cleanlevel--;\n      if ('\\n' === out.charAt(out.length - 1)) out += this.getTabs();\n      if (nl && '/' !== tag.charAt(1)) this.cleanlevel++;\n      out += tag;\n\n      if (tag.match(this.lineAfter) || tag.match(this.newLevel)) {\n        out = out.replace(/ *$/, '');\n        out += '\\n';\n      }\n\n      return out;\n    }\n  });\n  ArticleEditor.add('module', 'autolink', {\n    parse: function parse(html) {\n      if (!this.opts.paste.autolink) {\n        return html;\n      }\n\n      var storedComments = []; // store comments\n\n      html = this.app.content.storeComments(html, storedComments); // remove doctype tag\n\n      html = this.app.content.removeDoctype(html);\n      var tags = ['figure', 'form', 'pre', 'iframe', 'code', 'a', 'img', 'link', 'script'];\n      var stored = [];\n      var z = 0; // store tags\n\n      for (var i = 0; i < tags.length; i++) {\n        var reTags = tags[i] === 'img' ? '<' + tags[i] + '[^>]*>' : '<' + tags[i] + '[^>]*>([\\\\w\\\\W]*?)</' + tags[i] + '>';\n        var matched = html.match(new RegExp(reTags, 'gi'));\n\n        if (matched !== null) {\n          for (var y = 0; y < matched.length; y++) {\n            html = html.replace(matched[y], '#####replaceparse' + z + '#####');\n            stored.push(matched[y]);\n            z++;\n          }\n        }\n      } // links\n\n\n      html = html.replace('&amp;', '&');\n\n      if (html.match(this.opts.regex.url) && !html.match(this.opts.regex.imageurl)) {\n        html = this._formatLinks(html);\n      } // restore\n\n\n      html = this._restoreReplaced(stored, html);\n      html = this.app.content.restoreComments(html, storedComments); // repeat for nested tags\n\n      html = this._restoreReplaced(stored, html);\n      return html;\n    },\n    // private\n    _formatLinks: function _formatLinks(content) {\n      var matches = content.match(this.opts.regex.url);\n      var obj = {};\n\n      for (var i = 0; i < matches.length; i++) {\n        var href = matches[i],\n            text = href;\n        var linkProtocol = href.match(/(https?|ftp):\\/\\//i) !== null ? '' : 'http://';\n        var regexB = [\"/\", \"&\", \"=\"].indexOf(href.slice(-1)) !== -1 ? '' : '\\\\b';\n        var target = this.opts.paste.linkTarget !== false ? ' target=\"' + this.opts.paste.linkTarget + '\"' : '';\n        text = text.length > this.opts.link.size ? text.substring(0, this.opts.link.size) + '...' : text;\n        text = text.search('%') === -1 ? decodeURIComponent(text) : text; // escaping url\n\n        var regexp = '(' + href.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&') + regexB + ')';\n        obj[regexp] = '<a href=\"' + linkProtocol + href.trim() + '\"' + target + '>' + text.trim() + '</a>';\n      } // replace\n\n\n      for (var key in obj) {\n        content = content.replace(new RegExp(key, 'g'), obj[key]);\n      }\n\n      return content;\n    },\n    _restoreReplaced: function _restoreReplaced(stored, html) {\n      for (var i = 0; i < stored.length; i++) {\n        html = html.replace('#####replaceparse' + i + '#####', stored[i]);\n      }\n\n      return html;\n    }\n  });\n  ArticleEditor.add('module', 'state', {\n    init: function init() {\n      this.started = false;\n      this.storage = false;\n      this.state = false;\n      this.passed = true;\n      this.undoStorage = [];\n      this.redoStorage = [];\n    },\n    load: function load() {\n      this.clear();\n      this.trigger(true);\n    },\n    stop: function stop() {\n      this.clear();\n    },\n    clear: function clear() {\n      this.storage = false;\n      this.state = false;\n      this.passed = true;\n      this.undoStorage = [];\n      this.redoStorage = [];\n    },\n    get: function get() {\n      return this.undoStorage;\n    },\n    add: function add(e) {\n      if (e && (e.ctrlKey || e.metaKey || this._isUndo(e) || this._isRedo(e)) || !this.app.observer.trigger) {\n        return;\n      } // state\n\n\n      this.state = this._createState();\n\n      if (this.started === false) {\n        this._setState(this.state, 0);\n\n        this.started = true;\n      }\n    },\n    trigger: function trigger(start) {\n      if (!this.passed) {\n        return;\n      } // storage\n\n\n      var storage = this._createState(); // storage\n\n\n      if (this.state) {\n        storage = this.state;\n      } else if (!this.state && !start) {\n        storage = this.storage;\n        this.started = true;\n      }\n\n      this._addState(storage); // previous state\n\n\n      this.storage = this._createState();\n      this.state = false;\n    },\n    listen: function listen(e) {\n      // undo\n      if (this._isUndo(e)) {\n        e.preventDefault();\n        this.undo();\n        return true;\n      } // redo\n      else if (this._isRedo(e)) {\n          e.preventDefault();\n          this.redo();\n          return true;\n        }\n\n      this.passed = true;\n    },\n    undo: function undo() {\n      if (!this._hasUndo()) return;\n      this.passed = false;\n\n      var state = this._getUndo();\n\n      this._setRedo();\n\n      var $parsed = this.app.parser.parse(state[0]);\n      this.app.editor.getLayout().html($parsed.children());\n\n      this._rebuild(state, 'undo');\n\n      var instance = this.app.block.get();\n      var el = instance && instance.isEditable() ? instance.getBlock() : false;\n      this.app.offset.set(el, state[1]);\n    },\n    redo: function redo() {\n      if (!this._hasRedo()) return;\n      this.passed = false;\n      var state = this.redoStorage.pop();\n\n      this._addState(state);\n\n      var $parsed = this.app.parser.parse(state[0]);\n      this.app.editor.getLayout().html($parsed.children());\n\n      this._rebuild(state, 'redo');\n\n      var instance = this.app.block.get();\n      var el = instance && instance.isEditable() ? instance.getBlock() : false;\n      this.app.offset.set(el, state[1]);\n    },\n    // private\n    _rebuild: function _rebuild(state, type) {\n      this.app.editor.build();\n      this.app.editor.getLayout().find('.' + this.prefix + '-block-state').each(function ($node) {\n        this.app.block.set($node);\n      }.bind(this));\n      this.app.broadcast('state.' + type, {\n        html: state[0],\n        offset: state[1]\n      });\n    },\n    _isUndo: function _isUndo(e) {\n      var key = e.which;\n      var ctrl = e.ctrlKey || e.metaKey;\n      return ctrl && key === 90 && !e.shiftKey && !e.altKey;\n    },\n    _isRedo: function _isRedo(e) {\n      var key = e.which;\n      var ctrl = e.ctrlKey || e.metaKey;\n      return ctrl && (key === 90 && e.shiftKey || key === 89 && !e.shiftKey) && !e.altKey;\n    },\n    _hasUndo: function _hasUndo() {\n      return this.undoStorage.length !== 0;\n    },\n    _hasRedo: function _hasRedo() {\n      return this.redoStorage.length !== 0;\n    },\n    _getUndo: function _getUndo() {\n      return this.undoStorage.length === 1 ? this.undoStorage[0] : this.undoStorage.pop();\n    },\n    _createState: function _createState() {\n      var html = this.app.editor.getLayout().html();\n      html = this.app.utils.wrap(html, function ($w) {\n        $w.find('.' + this.prefix + '-block-focus').addClass(this.prefix + '-block-state');\n      }.bind(this));\n      var instance = this.app.block.get();\n      var el = instance && instance.isEditable() ? instance.getBlock() : false;\n      var unparsed = this.app.parser.unparse(html);\n      var offset = this.app.offset.get(el);\n      return {\n        html: unparsed,\n        offset: offset\n      };\n    },\n    _setState: function _setState(state, pos) {\n      this.undoStorage[pos] = [state.html, state.offset];\n    },\n    _addState: function _addState(state) {\n      var last = this.undoStorage[this.undoStorage.length - 1];\n\n      if (typeof last === 'undefined' || last[0] !== state.html) {\n        this.undoStorage.push([state.html, state.offset]);\n\n        this._removeOverStorage();\n      } else {\n        last[1] = state.offset;\n      }\n    },\n    _setRedo: function _setRedo() {\n      var state = this._createState();\n\n      this.redoStorage.push([state.html, state.offset]);\n      this.redoStorage = this.redoStorage.slice(0, this.opts.state.limit);\n    },\n    _removeOverStorage: function _removeOverStorage() {\n      if (this.undoStorage.length > this.opts.state.limit) {\n        this.undoStorage = this.undoStorage.slice(0, this.undoStorage.length - this.opts.state.limit);\n      }\n    }\n  });\n  ArticleEditor.add('module', 'statusbar', {\n    init: function init() {\n      this.items = {};\n    },\n    start: function start() {\n      this._build();\n    },\n    add: function add(name, html) {\n      return this.update(name, html);\n    },\n    update: function update(name, html) {\n      var $item;\n\n      if (typeof this.items[name] !== 'undefined') {\n        $item = this.items[name];\n      } else {\n        $item = this.dom('<li>');\n        this.$statusbar.append($item);\n        this.items[name] = $item;\n      }\n\n      return $item.html(html);\n    },\n    get: function get(name) {\n      return this.items[name] ? this.items[name] : this.items;\n    },\n    remove: function remove(name) {\n      if (this.items[name]) {\n        this.items[name].remove();\n        delete this.items[name];\n      }\n    },\n    clear: function clear() {\n      this.items = {};\n      this.$statusbar.html('');\n    },\n    // private\n    _build: function _build() {\n      this.$statusbar = this.dom('<ul>');\n      this.$statusbar.addClass(this.prefix + '-statusbar ' + this.prefix + '-statusbar-' + this.uuid);\n      this.$statusbar.attr('dir', this.opts.editor.direction);\n      this.app.container.get('statusbar').append(this.$statusbar);\n    }\n  });\n  ArticleEditor.add('module', 'popup', {\n    init: function init() {\n      this.name = false;\n      this.stack = false;\n      this.button = false;\n    },\n    start: function start() {\n      this._build();\n\n      this._buildDepth();\n    },\n    stop: function stop() {\n      this._stopEvents();\n\n      if (this.$popup) {\n        this.$popup.remove();\n      }\n    },\n    isOpen: function isOpen(name) {\n      var opened = this.$popup.hasClass('open');\n\n      if (name) {\n        return this._getName() === name && opened;\n      }\n\n      return opened;\n    },\n    create: function create(name, params) {\n      if (this.isOpen(name)) {\n        return this.stack;\n      }\n\n      this._reset(name);\n\n      this.name = name;\n\n      if (params) {\n        params.collapse = false;\n      } // create stack\n\n\n      this.stack = this._createStack(name, params, true);\n      this.stack.setActive();\n      return this.stack;\n    },\n    add: function add(name, params) {\n      return this._createStack(name, params);\n    },\n    open: function open(params) {\n      // all popups are closed\n      if (!this.isOpen()) {\n        this._open(params);\n      } // current open\n      else if (this.isOpen(this.name)) {\n          this.close(false);\n        } // another is opened\n        else {\n            this.close(false);\n\n            this._open(params, false);\n          }\n    },\n    close: function close(e) {\n      if (!this.isOpen()) return;\n      if (e && this._isPopupTarget(e)) return; // close\n\n      this._stopEvents();\n\n      this._resetToolbarToggledButton(); // selection\n\n\n      if (e !== false) {\n        this.app.selection.restore();\n      }\n\n      this.$popup.hide();\n\n      this._closed();\n    },\n    getElement: function getElement() {\n      return this.$popup;\n    },\n    getButton: function getButton() {\n      return this.button;\n    },\n    getStack: function getStack(name) {\n      return name ? this._findStack(name) : this._findStackActive();\n    },\n    renderHeaderBack: function renderHeaderBack(stack) {\n      this._buildHeaderBack(stack);\n    },\n    closeStacks: function closeStacks() {\n      this._findStacks().each(function ($node) {\n        var stack = $node.dataget('instance');\n        stack.close();\n      });\n    },\n    updatePosition: function updatePosition(e) {\n      this._buildPosition(e);\n\n      this._cropHeight();\n    },\n    // open\n    _open: function _open(params, animation) {\n      // input focus\n      this.focus = params && params.focus ? params.focus : false; // selection\n\n      this.app.selection.save(); // build\n\n      this._buildButton(params);\n\n      this._buildName();\n\n      this._setToolbarToggledButton();\n\n      this._startEvents(); // broadcast\n\n\n      this.app.broadcast('popup.before.open'); // render stack\n\n      this.stack.render(); // build header\n\n      this._buildHeader(); // build position\n\n\n      this._buildPosition(); // show\n\n\n      if (animation === false) {\n        this.$popup.show();\n\n        this._opened();\n      } else {\n        this.$popup.fadeIn(100, this._opened.bind(this));\n      }\n    },\n    // build\n    _build: function _build() {\n      this.$popup = this.dom('<div>').addClass(this.prefix + '-popup ' + this.prefix + '-popup-' + this.uuid).hide();\n      this.$popup.attr('dir', this.opts.editor.direction); // header\n\n      this.$header = this.dom('<div>').addClass(this.prefix + '-popup-header');\n      this.$popup.append(this.$header); // stacks\n\n      this.$stacks = this.dom('<div>').addClass(this.prefix + '-popup-stacks');\n      this.$popup.append(this.$stacks); // append\n\n      this.app.$body.append(this.$popup);\n    },\n    _buildDepth: function _buildDepth() {\n      if (this.opts.bsmodal) {\n        this.$popup.css('z-index', 1052);\n      }\n    },\n    _buildButton: function _buildButton(params) {\n      if (!params) return;\n      this.button = params.hasOwnProperty('button') ? params.button : false;\n    },\n    _buildFocus: function _buildFocus() {\n      if (this.focus) {\n        this.getStack().setFocus(this.focus);\n      }\n    },\n    _buildName: function _buildName() {\n      this.$popup.attr('data-' + this.prefix + '-popup-name', this.name);\n    },\n    _buildPosition: function _buildPosition(e) {\n      var topFix = 1;\n      var pos = this._isButton() ? this._buildPositionButton() : this._buildPositionModal(); // set\n\n      this.$popup.css({\n        top: pos.top - topFix + 'px',\n        left: pos.left + 'px'\n      });\n    },\n    _buildPositionButton: function _buildPositionButton() {\n      var editorRect = this.app.editor.getFrameRect();\n      var offset = this.button.getOffset();\n      var dim = this.button.getDimension();\n      var popupWidth = this.$popup.width();\n      var pos = {};\n\n      if (this._isToolbarButton()) {\n        pos = {\n          top: offset.top + dim.height,\n          left: offset.left\n        }; // out of the right edge\n\n        if (pos.left + popupWidth > editorRect.right) {\n          pos.left = offset.left + dim.width - popupWidth;\n        }\n      } else {\n        pos = {\n          top: offset.top + editorRect.top + dim.height,\n          left: offset.left + editorRect.left + dim.width / 2 - popupWidth / 2\n        }; // out of the right edge\n\n        if (pos.left + popupWidth > editorRect.right) {\n          pos.left = editorRect.left + editorRect.width - popupWidth;\n        }\n      } // out of the left edge\n\n\n      if (pos.left < editorRect.left || pos.left < 0) {\n        pos.left = editorRect.left;\n      }\n\n      return pos;\n    },\n    _buildPositionModal: function _buildPositionModal() {\n      var $container = this.app.container.get('bars');\n      var offset = $container.offset();\n      var height = $container.height();\n      var pos = {\n        top: offset.top + height,\n        left: offset.left\n      };\n      return pos;\n    },\n    _buildHeader: function _buildHeader() {\n      var stacks = [];\n      this.$header.html('');\n\n      this._findStacks().each(function ($node) {\n        var stack = $node.dataget('instance');\n        var title = stack.getTitle();\n\n        if (title) {\n          stacks.push(stack);\n        }\n      });\n\n      var len = stacks.length; // path\n\n      if (len !== 0) {\n        this._buildPath();\n\n        this._buildClose();\n      } // items\n\n\n      for (var i = 0; i < len; i++) {\n        var $item = this._buildPathItem(stacks[i]);\n\n        this.$path.append($item);\n      }\n    },\n    _buildHeaderBack: function _buildHeaderBack(stack) {\n      this._buildPath();\n\n      this._buildBack(stack);\n\n      this._buildBackItem(stack);\n    },\n    _buildPath: function _buildPath() {\n      var name = this.prefix + '-popup-header-path';\n      this.$header.find('.' + name).remove();\n      this.$path = this.dom('<div>').addClass(name);\n      this.$header.append(this.$path);\n    },\n    _buildPathItem: function _buildPathItem(stack) {\n      var title = stack.getTitle();\n      var $item = this.dom('<span>').addClass(this.prefix + '-popup-header-item');\n      $item.html(this.lang.parse(title));\n      $item.dataset('stack', stack);\n      $item.on('click', this._catchOpen.bind(this));\n\n      if (stack.isActive()) {\n        $item.addClass('active');\n      }\n\n      return $item;\n    },\n    _buildBack: function _buildBack(stack) {\n      var $back = this.dom('<span>').addClass(this.prefix + '-popup-header-item');\n      $back.html(this.lang.get('popup.back'));\n      $back.dataset('stack-prev', stack.prev);\n      $back.dataset('stack-current', stack);\n      $back.on('click', this._catchBack.bind(this));\n      this.$path.append($back);\n    },\n    _buildBackItem: function _buildBackItem(stack) {\n      var title = stack.getTitle();\n      var $item = this.dom('<span>').addClass(this.prefix + '-popup-header-item');\n      $item.html(this.lang.parse(title));\n      $item.addClass('active');\n      this.$path.append($item);\n    },\n    _buildClose: function _buildClose() {\n      var $close = this.dom('<span>').addClass(this.prefix + '-popup-close');\n      $close.one('click', this._catchClose.bind(this));\n      this.$header.append($close);\n    },\n    // create\n    _createStack: function _createStack(name, params) {\n      var stack = this.app.create('popup.stack', name, params);\n      this.$stacks.append(stack.getElement());\n      return stack;\n    },\n    // catch\n    _catchClose: function _catchClose(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.close();\n    },\n    _catchOpen: function _catchOpen(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $target = this.dom(e.target);\n      var targetStack = $target.dataget('stack');\n      var $items = this.$path.find('.' + this.prefix + '-popup-header-item');\n      $items.each(function ($item) {\n        var stack = $item.dataget('stack');\n        stack.close();\n        $item.removeClass('active');\n      });\n      $target.addClass('active');\n      targetStack.open();\n    },\n    _catchBack: function _catchBack(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $item = this.dom(e.target);\n      var prev = $item.dataget('stack-prev');\n      var current = $item.dataget('stack-current');\n      current.collapse();\n      prev.rebuild();\n      prev.open(); // rebuild header\n\n      this._buildHeader();\n    },\n    // find\n    _findStacks: function _findStacks() {\n      return this.$popup.find('.' + this.prefix + '-popup-stack');\n    },\n    _findStack: function _findStack(name) {\n      return this.$popup.find('[data-' + this.prefix + '-popup-stack-name=' + name + ']').dataget('instance');\n    },\n    _findStackActive: function _findStackActive() {\n      return this.$popup.find('.' + this.prefix + '-popup-stack.open').dataget('instance');\n    },\n    // events\n    _startEvents: function _startEvents() {\n      var $target = this.app.scroll.getTarget();\n      var eventname = this.prefix + '-popup';\n      $target.on('resize.' + eventname, this.updatePosition.bind(this));\n      $target.on('scroll.' + eventname, this.updatePosition.bind(this));\n      this.app.editor.getFrame().on('resize.' + eventname, this.updatePosition.bind(this));\n    },\n    _stopEvents: function _stopEvents() {\n      var eventname = this.prefix + '-popup';\n      this.app.scroll.getTarget().off('.' + eventname);\n      this.app.editor.getFrame().off('.' + eventname);\n    },\n    // opened\n    _opened: function _opened() {\n      this._buildFocus();\n\n      this._cropHeight();\n\n      this.$popup.addClass('open'); // broadcast\n\n      this.app.broadcast('popup.open');\n    },\n    // closed\n    _closed: function _closed() {\n      this.$popup.removeAttr('data-' + this.prefix + '-popup-name');\n      this.$popup.removeClass('open'); // broadcast\n\n      this.app.broadcast('popup.close');\n    },\n    // crop\n    _cropHeight: function _cropHeight() {\n      var $target = this.app.scroll.getTarget();\n      var $toolbar = this.app.toolbar.getElement();\n      var tolerance = 10;\n      var offset = this.$popup.offset();\n      var top = offset.top - $target.scrollTop();\n      var targetHeight = $target.height();\n      var cropHeight = targetHeight - top - tolerance;\n\n      if (this.app.scroll.isTarget()) {\n        top = $toolbar.offset().top - $target.offset().top + $toolbar.height();\n        var targetOffset = $target.offset();\n        var winHeight = this.app.$win.height();\n        var winCropHeight = winHeight - targetOffset.top;\n        targetHeight = winCropHeight > targetHeight ? targetHeight : winCropHeight;\n        cropHeight = targetHeight - top - tolerance;\n      }\n\n      this.$popup.css('max-height', cropHeight + 'px');\n    },\n    // set\n    _setToolbarToggledButton: function _setToolbarToggledButton() {\n      this.app.toolbar.unsetToggled();\n      if (!this._isToolbarButton()) return;\n      var name = this.button.getName();\n      this.app.toolbar.setToggled(name);\n    },\n    // is\n    _isButton: function _isButton() {\n      return this.button;\n    },\n    _isToolbarButton: function _isToolbarButton() {\n      return this.button && (this.button.type === 'toolbar' || this.button.type === 'topbar');\n    },\n    _isPopupTarget: function _isPopupTarget(e) {\n      return this.dom(e.target).closest('.' + this.prefix + '-popup').length !== 0;\n    },\n    // get\n    _getName: function _getName() {\n      return this.$popup.attr('data-' + this.prefix + '-popup-name');\n    },\n    // reset\n    _reset: function _reset(name) {\n      this.stack = false;\n      this.button = false;\n      this.$header.html('');\n      this.$stacks.html('');\n      this.$popup.removeClass('has-items has-form has-footer');\n    },\n    _resetToolbarToggledButton: function _resetToolbarToggledButton() {\n      if (!this.button) return;\n      var name = this.button.getName();\n      this.app.toolbar.unsetToggled(name);\n    }\n  });\n  ArticleEditor.add('class', 'popup.item', {\n    defaults: {\n      container: false,\n      title: false,\n      html: false,\n      active: false,\n      divider: false,\n      remover: false,\n      classname: false,\n      params: false,\n      instance: false,\n      observer: false,\n      command: false\n    },\n    init: function init(stack, name, params) {\n      this.stack = stack;\n      this.name = name;\n      this.params = this._buildParams(params);\n\n      this._build();\n\n      this._buildContainer();\n\n      this._buildIcon();\n\n      this._buildTitle();\n\n      this._buildImage();\n\n      this._buildShortcut();\n\n      this._buildActive();\n\n      this._buildHidden();\n\n      this._buildDivider();\n\n      this._buildCommand();\n\n      this._buildRemover();\n    },\n    // get\n    getStack: function getStack() {\n      return this.stack;\n    },\n    getName: function getName() {\n      return this.name;\n    },\n    getParams: function getParams() {\n      return this.params.params;\n    },\n    getElement: function getElement() {\n      return this.$item;\n    },\n    getInstance: function getInstance() {\n      return this.params.instance;\n    },\n    // private\n    _build: function _build() {\n      this.$item = this.params.html ? this.dom(this.params.html) : this.dom('<div>');\n      this.$item.addClass(this.prefix + '-popup-item ' + this.prefix + '-popup-stack-item');\n      this.$item.attr({\n        'name': this.name\n      });\n    },\n    _buildContainer: function _buildContainer() {\n      if (this.params.container) {\n        this.$item.addClass(this.prefix + '-popup-item-container');\n      }\n    },\n    _buildTitle: function _buildTitle() {\n      if (this.params.title) {\n        this.$title = this.dom('<span>').addClass(this.prefix + '-popup-item-title');\n        this.$title.html(this.lang.parse(this.params.title));\n        this.$item.append(this.$title);\n      }\n    },\n    _buildImage: function _buildImage() {\n      if (this.params.image) {\n        this.$image = this.dom('<span>').addClass(this.prefix + '-popup-item-image');\n        this.$image.html(this.params.image);\n        this.$item.append(this.$image);\n      }\n    },\n    _buildIcon: function _buildIcon() {\n      if (this.params.icon) {\n        this.$icon = this.dom('<span>').addClass(this.prefix + '-popup-item-icon'); // html icon\n\n        if (this.params.icon.search(/</) !== -1) {\n          this.$icon.html(this.params.icon);\n        } else {\n          this.$icon.addClass(this.prefix + '-icon-' + this.params.icon);\n        }\n\n        this.$item.append(this.$icon);\n      }\n    },\n    _buildShortcut: function _buildShortcut() {\n      if (this.params.shortcut) {\n        var meta = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform) ? '<b>&#8984;</b>' : 'ctrl';\n        meta = this.params.shortcut.replace('Ctrl', meta);\n        this.$shortcut = this.dom('<span>').addClass(this.prefix + '-popup-item-shortcut');\n        this.$shortcut.html(meta);\n        this.$item.append(this.$shortcut);\n      }\n    },\n    _buildParams: function _buildParams(params) {\n      return $ARX.extend({}, true, this.defaults, params);\n    },\n    _buildActive: function _buildActive() {\n      if (this.params.active) {\n        this.$item.addClass('active');\n      }\n    },\n    _buildHidden: function _buildHidden() {\n      if (this.params.hidden) {\n        this.$item.addClass(this.prefix + '-popup-item-hidden');\n      }\n    },\n    _buildDivider: function _buildDivider() {\n      if (this.params.divider) {\n        this.$item.addClass(this.prefix + '-popup-item-divider-' + this.params.divider);\n      }\n    },\n    _buildCommand: function _buildCommand() {\n      if (this.params.command) {\n        this.$item.on('click.' + this.prefix + '-popup-item-' + this.uuid, this._catch.bind(this));\n        this.$item.attr('command', this.params.command);\n      }\n    },\n    _buildRemover: function _buildRemover() {\n      if (!this.params.title) return;\n\n      if (this.params.remover) {\n        var $trash = this.dom('<span>').addClass(this.prefix + '-popup-item-trash ' + this.prefix + '-icon-trash');\n        $trash.attr('command', this.params.remover);\n        $trash.on('click.' + this.prefix + '-popup-item-' + this.uuid, this._catchRemover.bind(this));\n        this.$item.append($trash);\n      }\n    },\n    _catchRemover: function _catchRemover(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $item = this.dom(e.target).closest('.' + this.prefix + '-popup-stack-item');\n      var $trash = this.dom(e.target).closest('.' + this.prefix + '-popup-item-trash');\n      var command = $trash.attr('command');\n      var name = $item.attr('name');\n      this.app.api(command, this, name);\n      $item.fadeOut(200, function ($node) {\n        $node.remove();\n      });\n    },\n    _catch: function _catch(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $item = this.dom(e.target).closest('.' + this.prefix + '-popup-stack-item');\n      var name = $item.attr('name');\n      var command = $item.attr('command');\n      this.stack.$items.find('.' + this.prefix + '-popup-stack-item').removeClass('active');\n      $item.addClass('active'); // command\n\n      this.app.api(command, this.getParams(), this, name, e);\n    }\n  });\n  ArticleEditor.add('class', 'popup.stack', {\n    defaults: {\n      title: false,\n      type: false,\n      // grid\n      name: false,\n      path: false,\n      width: false,\n      // string like '200px' or '100%'\n      setter: false,\n      getter: false,\n      builder: false,\n      observer: false,\n      instance: false,\n      collapse: true,\n      form: false,\n      items: false,\n      focus: false,\n      footer: false\n    },\n    init: function init(name, params) {\n      this.defaultWidth = '240px';\n      this.prev = this.app.popup.getStack();\n      this.name = name;\n      this.tools = {};\n      this.params = this._buildParams(params);\n      this.$popup = this.app.popup.getElement(); // data\n\n      this.instance = false;\n      this.width = false;\n      this.type = false;\n      this.data = false;\n      this.form = false;\n      this.items = false;\n      this.footer = false;\n      this.getter = false;\n      this.setter = false; // build\n\n      this._build(); // observe\n\n\n      if (this.params.observer) {\n        this.app.api(this.params.observer, this);\n      }\n    },\n    rebuild: function rebuild() {\n      this._renderItems();\n    },\n    open: function open(params) {\n      if (this.isCollapsed()) {\n        this.app.popup.closeStacks();\n        this.app.popup.renderHeaderBack(this);\n      } // active\n\n\n      this.setActive(); // broadcast\n\n      this.app.broadcast('popup.before.open'); // render\n\n      this.render();\n      this.app.popup.updatePosition(); // focus\n\n      if (params && params.focus) {\n        this.setFocus(params.focus);\n      } // broadcast\n\n\n      this.app.broadcast('popup.open');\n    },\n    close: function close() {\n      this.$stack.hide();\n      this.$stack.removeClass('open');\n    },\n    collapse: function collapse() {\n      this.$stack.remove();\n    },\n    render: function render() {\n      this._renderWidth();\n\n      this._renderType();\n\n      this._renderItems();\n\n      this._renderForm();\n\n      this._renderFooter();\n    },\n    // updatePosition\n    updatePosition: function updatePosition() {\n      this.app.popup.updatePosition();\n    },\n    // is\n    isCollapsed: function isCollapsed() {\n      return this.params.collapse;\n    },\n    isActive: function isActive() {\n      return this.$stack.hasClass('open');\n    },\n    // set\n    setActive: function setActive() {\n      this.$stack.show();\n      this.$stack.addClass('open');\n    },\n    setData: function setData(data) {\n      this.data = data;\n    },\n    setForm: function setForm(form) {\n      this.form = form;\n    },\n    setFooter: function setFooter(footer) {\n      this.footer = footer;\n    },\n    setWidth: function setWidth(width) {\n      this.$stack.attr('data-width', width);\n\n      if (width === '100%') {\n        width = this.app.container.get('main').width() + 'px';\n      }\n\n      this.$stack.css('width', width);\n      this.app.$win.on('resize.' + this.prefix + '-stack-' + this.uuid, this._resize.bind(this));\n\n      this._resize();\n    },\n    setFocus: function setFocus(name) {\n      if (typeof this.tools[name] !== 'undefined') {\n        this.tools[name].setFocus();\n      }\n    },\n    setItems: function setItems(items) {\n      this.items = items;\n    },\n    setType: function setType(type) {\n      this.type = type;\n    },\n    // get\n    getElement: function getElement() {\n      return this.$stack;\n    },\n    getTitle: function getTitle() {\n      return this.params.title;\n    },\n    getName: function getName() {\n      return this.name;\n    },\n    getInstance: function getInstance() {\n      return this.instance;\n    },\n    getItems: function getItems() {\n      return this.items;\n    },\n    getTool: function getTool(name) {\n      return typeof this.tools[name] !== 'undefined' ? this.tools[name] : false;\n    },\n    getInput: function getInput(name) {\n      var tool = this.getTool(name);\n      return tool ? tool.getInput() : this.dom();\n    },\n    getFormItem: function getFormItem(name) {\n      var tool = this.getTool(name);\n      return tool ? tool.getInput().closest('.' + this.prefix + '-form-item') : this.dom();\n    },\n    getFormElement: function getFormElement() {\n      return this.$form;\n    },\n    getForm: function getForm() {\n      return this.form;\n    },\n    getFooter: function getFooter() {\n      return this.footer;\n    },\n    getBody: function getBody() {\n      return this.$body;\n    },\n    getData: function getData(name) {\n      var data;\n\n      if (name) {\n        if (typeof this.tools[name] !== 'undefined') {\n          data = this.tools[name].getValue();\n        }\n      } else {\n        data = {};\n\n        for (var key in this.tools) {\n          data[key] = this.tools[key].getValue();\n        }\n      }\n\n      return data;\n    },\n    // build\n    _build: function _build() {\n      this._buildElement();\n\n      this._buildBody();\n\n      this._buildRender();\n    },\n    _buildParams: function _buildParams(params) {\n      return $ARX.extend({}, true, this.defaults, params);\n    },\n    _buildElement: function _buildElement() {\n      this.$stack = this.dom('<div>').addClass(this.prefix + '-popup-stack ' + this.prefix + '-popup-' + this.name);\n      this.$stack.dataset('instance', this);\n      this.$stack.attr('data-' + this.prefix + '-popup-stack-name', this.name);\n      this.$stack.hide();\n    },\n    _buildBody: function _buildBody() {\n      this.$body = this.dom('<div>').addClass(this.prefix + '-popup-body');\n      this.$items = this.dom('<div>').addClass(this.prefix + '-popup-items');\n      this.$stack.append(this.$body);\n    },\n    _buildRender: function _buildRender() {\n      this.width = this.params.width ? this.params.width : this.defaultWidth;\n      this.type = this.params.type;\n      this.form = this.params.form;\n      this.footer = this.params.footer;\n      this.instance = this.params.instance;\n      this.setter = this.params.setter ? this.params.setter : false;\n      this.getter = this.params.getter ? this.params.getter : false;\n      this.data = this.getter ? this.app.api(this.getter, this) : false; // items\n\n      if (this.params.builder) {\n        this.items = this.app.api(this.params.builder, this);\n      } else if (this.params.items) {\n        this.items = this.params.items;\n      }\n    },\n    // render\n    _renderType: function _renderType() {\n      this.$stack.removeClass(this.prefix + '-popup-stack-type-grid');\n\n      if (this.type) {\n        this.$stack.addClass(this.prefix + '-popup-stack-type-' + this.type);\n      }\n    },\n    _renderWidth: function _renderWidth() {\n      this.setWidth(this.width);\n    },\n    _renderForm: function _renderForm() {\n      if (!this.form) return; // build form element\n\n      this.$form = this.dom('<form>').addClass(this.prefix + '-popup-form');\n      this.formitems = this.form;\n\n      this._renderTools();\n\n      this._renderData();\n\n      this.$popup.addClass('has-form'); // append\n\n      this.$body.find('.' + this.prefix + '-popup-form').remove();\n      this.$body.append(this.$form);\n    },\n    _renderTools: function _renderTools() {\n      for (var name in this.formitems) {\n        this._renderTool(name, this.formitems[name]);\n      }\n    },\n    _renderTool: function _renderTool(name, obj) {\n      var tool = this.app.create('tool.' + obj.type, name, obj, this, this.data, this.instance);\n      var $tool = tool.getElement();\n\n      if ($tool) {\n        this.tools[name] = tool;\n        this.$form.append($tool);\n      }\n    },\n    _renderData: function _renderData() {\n      if (!this.data) return;\n\n      for (var name in this.data) {\n        if (typeof this.tools[name] !== 'undefined') {\n          this.tools[name].setValue(this.data[name]);\n        }\n      }\n    },\n    _renderItems: function _renderItems() {\n      this.$popup.removeClass('has-items');\n      if (!this.items) return;\n      this.$popup.addClass('has-items');\n      this.$body.find('.' + this.prefix + '-popup-item').off('.' + this.prefix + '-popup-item-' + this.uuid);\n      this.$items.html('');\n      this.$body.html('');\n      this.$body.append(this.$items); // build items\n\n      for (var name in this.items) {\n        if (this.items[name].hasOwnProperty('observer')) {\n          var res = this.app.api(this.items[name].observer, this.items[name], name, this);\n\n          if (typeof res !== 'undefined') {\n            this.items[name] = res;\n          }\n        }\n\n        if (this.items[name] === false) continue;\n        var item = this.app.create('popup.item', this, name, this.items[name]);\n        this.$items.append(item.getElement());\n      }\n    },\n    _renderFooter: function _renderFooter() {\n      this.$popup.removeClass('has-footer');\n      if (!this.footer) return;\n      if (this.$footer) this.$footer.remove();\n      this.$footer = this.dom('<div>').addClass(this.prefix + '-popup-footer'); // buttons\n\n      var buttons = this.footer;\n      var len = 0;\n\n      for (var key in buttons) {\n        if (buttons[key] === false) continue;\n        var button = this.app.create('popup.button', key, this, buttons[key]);\n        this.$footer.append(button.getElement());\n        len++;\n      }\n\n      if (len !== 0) {\n        this.$stack.append(this.$footer);\n        this.$popup.addClass('has-footer');\n      }\n    },\n    _resize: function _resize() {\n      var data = this.$stack.attr('data-width');\n      var width = this.app.container.get('main').width();\n\n      if (data !== '100%') {\n        var w = parseInt(data);\n\n        if (w < width) {\n          return;\n        }\n      }\n\n      this.$stack.css('width', width + 'px');\n    }\n  });\n  ArticleEditor.add('class', 'popup.button', {\n    init: function init(name, stack, obj) {\n      this.name = name;\n      this.obj = obj;\n      this.stack = stack;\n      this.$button = this.dom('<button>').addClass(this.prefix + '-form-button');\n      this.$button.attr('data-name', this.name);\n      this.$button.html(this.lang.parse(this.obj.title));\n      this.$button.dataset('instance', this);\n      if (this._has('type')) this.$button.addClass(this.prefix + '-form-button-' + this.obj.type);\n      if (this._has('classname')) this.$button.addClass(this.obj.classname);\n      if (this._has('fullwidth')) this.$button.addClass(this.prefix + '-form-button-fullwidth'); // event\n\n      this.$button.on('click.' + this.prefix + '-popup-button' + this.uuid, this._catch.bind(this));\n    },\n    getName: function getName() {\n      return this.name;\n    },\n    getElement: function getElement() {\n      return this.$button;\n    },\n    // private\n    _has: function _has(name) {\n      return this.obj.hasOwnProperty(name);\n    },\n    _catch: function _catch(e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (this._has('command')) {\n        this.app.api(this.obj.command, this.stack, this.name, e);\n      } else if (this._has('collapse')) {\n        this.stack.collapse();\n      } else if (this._has('close')) {\n        this.app.popup.close();\n      }\n    }\n  });\n  ArticleEditor.add('module', 'link', {\n    popups: {\n      format: {\n        format: {\n          title: '## link.link ##',\n          command: 'link.format',\n          shortcut: 'Ctrl+k'\n        },\n        unlink: {\n          title: '## link.unlink ##',\n          command: 'link.unlink'\n        }\n      },\n      edit: {\n        edit: {\n          title: '## link.edit-link ##',\n          command: 'link.edit',\n          shortcut: 'Ctrl+k'\n        },\n        unlink: {\n          title: '## link.unlink ##',\n          command: 'link.unlink'\n        }\n      },\n      form: {\n        text: {\n          type: 'input',\n          label: '## link.text ##'\n        },\n        url: {\n          type: 'input',\n          label: '## link.url ##'\n        },\n        target: {\n          type: 'checkbox',\n          text: '## link.link-in-new-tab ##'\n        }\n      },\n      insert: {\n        insert: {\n          title: '## link.insert ##',\n          command: 'link.insert',\n          type: 'primary'\n        },\n        cancel: {\n          title: '## link.cancel ##',\n          command: 'popup.close'\n        }\n      },\n      save: {\n        save: {\n          title: '## link.save ##',\n          command: 'link.save',\n          type: 'primary'\n        },\n        cancel: {\n          title: '## link.cancel ##',\n          command: 'popup.close'\n        }\n      }\n    },\n    popup: function popup(params, button) {\n      // get link\n      var $link = this.getLink();\n      var popup = $link.length === 0 ? this.popups.format : this.popups.edit;\n      this.app.popup.create('link', {\n        items: popup\n      });\n      this.app.popup.open({\n        button: button\n      });\n    },\n    format: function format(params) {\n      // selection\n      var text = this.app.selection.getText(); // popup\n\n      var stack = this.app.popup.create('link-create', {\n        title: '## popup.link ##',\n        width: '600px',\n        form: this.popups.form,\n        footer: this.popups.insert\n      }); // set data\n\n      stack.setData({\n        text: text\n      }); // open\n\n      this.app.popup.open({\n        focus: text ? 'url' : 'text'\n      });\n    },\n    edit: function edit() {\n      // get link\n      var $link = this.getLink();\n      var stack = this.app.popup.create('link-edit', {\n        title: '## popup.link ##',\n        width: '600px',\n        form: this.popups.form,\n        footer: this.popups.save\n      }); // set\n\n      var data = {\n        text: $link.text(),\n        url: $link.attr('href'),\n        target: $link.attr('target') || this.opts.link.target\n      }; // clean\n\n      data = this._encodeUrl(data); // set data\n\n      stack.setData(data); // open\n\n      this.app.popup.open({\n        focus: 'url'\n      });\n    },\n    insert: function insert(stack) {\n      this.app.popup.close();\n      var nodes = this.app.inline.set({\n        tag: 'a',\n        caret: 'after'\n      });\n      var $link = this.dom(nodes[0]); // data\n\n      this._save(stack, $link, 'add');\n    },\n    save: function save(stack) {\n      this.app.popup.close();\n      var $link = this.getLink(); // data\n\n      this._save(stack, $link, 'change');\n    },\n    unlink: function unlink() {\n      this.app.popup.close();\n      var links = this.app.selection.getNodes({\n        tags: ['a']\n      });\n      if (links.length === 0) return; // unlink\n\n      for (var i = 0; i < links.length; i++) {\n        var $link = this.dom(links[i]);\n        this.app.broadcast('link.remove', {\n          url: $link.attr('href'),\n          text: $link.text()\n        });\n        $link.unwrap();\n      } // ui\n\n\n      this.app.toolbar.observe();\n    },\n    getLink: function getLink() {\n      var links = this.app.selection.getNodes({\n        tags: ['a']\n      });\n      var $link = links.length !== 0 ? this.dom(links[0]) : this.dom([]);\n      return $link;\n    },\n    // private\n    _save: function _save(stack, $link, type) {\n      var data = stack.getData();\n      data = this._cleanUrl(data);\n      data = this._encodeUrl(data);\n      if (data.url === '') return;\n      data = this._setUrl($link, data);\n      data = this._setText($link, data);\n      data = this._setTarget($link, data);\n      this.app.broadcast('link.' + type, data);\n    },\n    _cleanUrl: function _cleanUrl(data) {\n      data.url = this.app.content.escapeHtml(data.url);\n      data.url = data.url.search(/^javascript:/i) !== -1 ? '' : data.url;\n      return data;\n    },\n    _encodeUrl: function _encodeUrl(data) {\n      data.url = data.url.replace('&amp;', '&');\n      return data;\n    },\n    _setUrl: function _setUrl($link, data) {\n      $link.attr('href', data.url);\n      return data;\n    },\n    _setText: function _setText($link, data) {\n      data.text = data.text === '' ? data.url : data.text;\n      $link.text(data.text);\n      return data;\n    },\n    _setTarget: function _setTarget($link, data) {\n      if (data.target) $link.attr('target', '_blank');else $link.removeAttr('target');\n      return data;\n    }\n  });\n  ArticleEditor.add('module', 'embed', {\n    popups: {\n      insert: {\n        insert: {\n          title: '## buttons.insert ##',\n          command: 'embed.insert',\n          type: 'primary'\n        },\n        cancel: {\n          title: '## embed.cancel ##',\n          command: 'popup.close'\n        }\n      },\n      save: {\n        save: {\n          title: '## buttons.save ##',\n          command: 'embed.save',\n          type: 'primary'\n        },\n        cancel: {\n          title: '## embed.cancel ##',\n          command: 'popup.close'\n        }\n      },\n      edit: {\n        title: '## embed.embed ##',\n        width: '100%',\n        form: {\n          embed: {\n            type: 'textarea',\n            label: '## embed.description ##',\n            rows: 6\n          },\n          caption: {\n            type: 'input',\n            label: '## embed.caption ##'\n          },\n          responsive: {\n            type: 'checkbox',\n            text: '## embed.responsive-video ##'\n          }\n        }\n      }\n    },\n    build: function build(scripts) {\n      if (scripts) {\n        this._callScripts(scripts);\n      } else {\n        this._findScripts();\n      }\n    },\n    observe: function observe() {\n      if (!this.opts.embed) return false;\n    },\n    popup: function popup() {\n      var popup = this.popups.edit;\n      popup.footer = this.popups.insert;\n      popup.collapse = true;\n      var stack = this.app.popup.add('embed', popup);\n      stack.open({\n        focus: 'embed'\n      }); // codemirror\n\n      this._buildCodemirror(stack);\n    },\n    edit: function edit(params, button) {\n      var instance = this.app.block.get();\n      var popup = this.popups.edit;\n      popup.footer = this.popups.save;\n      var data = {\n        embed: instance.getEmbedCode(),\n        caption: instance.getCaption(),\n        responsive: instance.isResponsive()\n      }; // popup & data\n\n      var stack = this.app.popup.create('embed', popup);\n      stack.setData(data); // open\n\n      this.app.popup.open({\n        button: button,\n        focus: 'embed'\n      }); // codemirror\n\n      this._buildCodemirror(stack);\n    },\n    insert: function insert(stack) {\n      this.app.popup.close(); // data\n\n      var data = stack.getData();\n\n      var code = this._getEmbedCode(data);\n\n      if (code === '') {\n        return;\n      } // create\n\n\n      var instance = this._createInstance(data, code);\n\n      this.app.block.add({\n        instance: instance\n      });\n    },\n    save: function save(stack) {\n      this.app.popup.close(); // data\n\n      var current = this.app.block.get();\n      var data = stack.getData();\n\n      var code = this._getEmbedCode(data);\n\n      if (code === '') {\n        this.app.block.remove();\n        return;\n      } // create\n\n\n      var instance = this._createInstance(data, code, current); // change\n\n\n      if (this._isNeedToChange(data, instance, current)) {\n        this.app.block.change(instance);\n      }\n    },\n    // private\n    _buildCodemirror: function _buildCodemirror(stack) {\n      var $input = stack.getInput('embed');\n      this.app.codemirror.create({\n        el: $input,\n        height: '200px',\n        focus: true\n      });\n      this.app.popup.updatePosition();\n    },\n    _findScripts: function _findScripts() {\n      var scripts = this.app.editor.getLayout().find('[data-' + this.prefix + '-type=embed]').find('script').getAll();\n      this.build.call(this, scripts);\n    },\n    _callScripts: function _callScripts(scripts) {\n      for (var i = 0; i < scripts.length; i++) {\n        if (scripts[i].src !== '') {\n          var src = scripts[i].src;\n          this.app.editor.getDoc().find('head script[src=\"' + src + '\"]').remove();\n          var $script = this.dom('<script>').attr({\n            'src': src,\n            'async': true,\n            'defer': 'true'\n          });\n          $script.on('load', function () {\n            if (src.search('instagram') !== -1) {\n              var win = this.app.editor.getWinNode();\n\n              if (win.instgrm) {\n                win.instgrm.Embeds.process();\n              }\n            }\n\n            this.build(scripts.slice(i + 1));\n          }.bind(this));\n          var head = this.app.editor.getDocNode().getElementsByTagName('head')[0];\n          if (head) head.appendChild($script.get());\n        } else {\n          try {\n            eval(scripts[i].innerHTML);\n          } catch (e) {}\n        }\n      }\n    },\n    _getEmbedCode: function _getEmbedCode(data) {\n      var code = data.embed.trim();\n      code = this.app.codemirror.val(code);\n      code = this.app.content.sanitize(code);\n      code = !this._isHtmlString(code) && code !== '' ? this._parseUrl(code) : code;\n      return code;\n    },\n    _createInstance: function _createInstance(data, code, current) {\n      var $figure;\n\n      if (current) {\n        var figure = current.duplicateEmpty();\n        $figure = figure.getBlock();\n        $figure.html(code);\n      } else {\n        $figure = this._isFigure(code) ? code : '<figure>' + code + '</figure>';\n      }\n\n      var instance = this.app.create('block.embed', $figure); // caption\n\n      instance.setCaption(data.caption); // responsive\n\n      if (data.responsive) {\n        instance.addResponsive();\n      }\n\n      return instance;\n    },\n    _parseUrl: function _parseUrl(str) {\n      var iframeStart = '<iframe width=\"560\" height=\"315\" src=\"';\n      var iframeEnd = '\" frameborder=\"0\" allowfullscreen></iframe>';\n      var parsed;\n\n      if (str.match(this.opts.regex.youtube)) {\n        parsed = str.replace(this.opts.regex.youtube, '//www.youtube.com/embed/$1');\n        return iframeStart + parsed + iframeEnd;\n      } else if (str.match(this.opts.regex.vimeo)) {\n        parsed = str.replace(this.opts.regex.vimeo, '//player.vimeo.com/video/$2');\n        return iframeStart + parsed + iframeEnd;\n      }\n\n      return str;\n    },\n    _isNeedToChange: function _isNeedToChange(data, instance, current) {\n      if (current.getEmbedCode() !== instance.getEmbedCode()) return true;\n      if (data.responsive !== current.isResponsive()) return true;\n      if (data.caption !== current.getCaption()) return true;\n    },\n    _isHtmlString: function _isHtmlString(str) {\n      return /^\\s*<(\\w+|!)[^>]*>/.test(str);\n    },\n    _isFigure: function _isFigure(str) {\n      return /^<figure/.test(str);\n    }\n  });\n  ArticleEditor.add('module', 'list', {\n    indent: function indent(params, itemInstance) {\n      var sel = this.app.selection.get();\n      var item = this.app.selection.getBlock();\n      var $item = this.dom(item);\n      var $prev = $item.prevElement();\n      var prev = $prev.get();\n      var isIndent = sel.collapsed && item && prev && prev.tagName === 'LI';\n      this.app.selection.save(item);\n\n      if (isIndent) {\n        $prev = this.dom(prev);\n        var $prevChild = $prev.children('ul, ol');\n        var $list = $item.closest('ul, ol');\n\n        if ($prevChild.length !== 0) {\n          $prevChild.append($item);\n        } else {\n          var listTag = $list.get().tagName.toLowerCase();\n          var $newList = this.dom('<' + listTag + '>');\n          $newList.append($item);\n          $prev.append($newList);\n        }\n      }\n\n      this.app.selection.restore();\n    },\n    outdent: function outdent(params, itemInstance) {\n      var sel = this.app.selection.get();\n      var item = this.app.selection.getBlock();\n      var $item = this.dom(item);\n\n      if (sel.collapsed && item) {\n        var $listItem = $item.parent();\n        var $liItem = $listItem.closest('li');\n        var $prev = $item.prevElement();\n        var $next = $item.nextElement();\n        var prev = $prev.get();\n        var next = $next.get();\n        var nextItems, $newList;\n        var isTop = prev === false;\n        var isMiddle = prev !== false && next !== false;\n        this.app.selection.save(item); // out\n\n        if ($liItem.length !== 0) {\n          if (isMiddle) {\n            nextItems = this._getAllNext($item.get());\n            $newList = this.dom('<' + $listItem.get().tagName.toLowerCase() + '>');\n\n            for (var i = 0; i < nextItems.length; i++) {\n              $newList.append(nextItems[i]);\n            }\n\n            $liItem.after($item);\n            $item.append($newList);\n          } else {\n            $liItem.after($item);\n\n            if ($listItem.children().length === 0) {\n              $listItem.remove();\n            } else {\n              if (isTop) $item.append($listItem);\n            }\n          }\n        }\n\n        this.app.selection.restore();\n      }\n    },\n    // private\n    _getAllNext: function _getAllNext(next) {\n      var nodes = [];\n\n      while (next) {\n        var $next = this.dom(next).nextElement();\n        next = $next.get();\n        if (next) nodes.push(next);else return nodes;\n      }\n\n      return nodes;\n    }\n  });\n  ArticleEditor.add('module', 'grid', {\n    popup: function popup() {\n      // create\n      var stack = this.app.popup.add('grid', {\n        title: '## popup.grid ##',\n        width: '320px',\n        items: this.buildItems()\n      });\n      stack.open();\n    },\n    observe: function observe() {\n      if (!this.opts.grid) return false;\n    },\n    buildItems: function buildItems() {\n      var items = {};\n      var z = 0;\n\n      for (var pattern in this.opts.grid.patterns) {\n        z++;\n\n        var $item = this._createPattern(pattern);\n\n        items['column' + z] = {\n          html: $item,\n          command: 'grid.add',\n          params: {\n            pattern: pattern,\n            columns: this.opts.grid.patterns[pattern]\n          }\n        };\n      }\n\n      return items;\n    },\n    add: function add(params) {\n      this.app.popup.close();\n      var columns = params.columns.split('|');\n      var $grid = this.dom('<div>').addClass(this.opts.grid.classname);\n\n      for (var i = 0; i < columns.length; i++) {\n        var column = this.app.create('block.column');\n        var $column = column.getBlock();\n        $column.addClass(columns[i]);\n        $grid.append($column);\n      } // add\n\n\n      var instance = this.app.block.add({\n        name: 'grid',\n        source: $grid,\n        caret: false\n      }); // set\n\n      this.app.block.set(instance);\n    },\n    // private\n    _createPattern: function _createPattern(pattern) {\n      var $item = this.dom('<div>').addClass(this.prefix + '-popup-grid-box');\n      var columns = pattern.split('|');\n      var sum = this.app.utils.sumOfArray(columns);\n      var unit = 100 / sum;\n\n      for (var i = 0; i < columns.length; i++) {\n        var $column = this.dom('<span>');\n        $column.addClass(this.prefix + '-popup-grid-column');\n        $column.css('width', columns[i] * unit + '%');\n        $item.append($column);\n      }\n\n      return $item;\n    }\n  });\n  ArticleEditor.add('module', 'image', {\n    init: function init() {\n      this.dataStates = [];\n    },\n    popup: function popup() {\n      var stack = this.app.popup.add('image', {\n        title: '## popup.add-image ##',\n        width: '100%'\n      });\n      stack.open(); // body\n\n      var $body = stack.getBody(); // by url\n\n      if (this.opts.image.url) {\n        this._createImageByUrl($body);\n      } // section or\n\n\n      if (this.opts.image.url && (this.opts.image.upload || this.opts.image.select)) {\n        this._createOrSection($body);\n      } // upload\n\n\n      this.$upload = this.createUploadBox(this.opts.image.upload, $body); // list of images\n\n      this.createSelectBox(this.opts.image.select, $body, 'image.insertFromSelect'); // build upload\n\n      this._buildUpload(this.$upload, 'image.insertByUpload');\n    },\n    edit: function edit(params, button) {\n      this.app.popup.create('image-edit', {\n        title: '## popup.image ##',\n        width: '100%',\n        getter: 'block.getData',\n        setter: 'block.setData',\n        form: {\n          alt: {\n            type: 'input',\n            label: '## image.alt-text ##'\n          },\n          caption: {\n            type: 'input',\n            label: '## image.caption ##',\n            observer: 'image.observeImageCaption'\n          },\n          link: {\n            type: 'input',\n            label: '## image.link ##',\n            observer: 'image.observeImageLink'\n          },\n          target: {\n            type: 'checkbox',\n            text: '## image.link-in-new-tab ##',\n            observer: 'image.observeImageLink'\n          }\n        },\n        footer: {\n          'save': {\n            title: '## image.save ##',\n            command: 'image.save',\n            type: 'primary'\n          },\n          'cancel': {\n            title: '## image.cancel ##',\n            command: 'popup.close'\n          }\n        }\n      }); // upload\n\n      this._buildEditUpload(); // open\n\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    editCard: function editCard(params, button) {\n      this.app.popup.create('image-edit', {\n        title: '## popup.image ##',\n        width: '100%',\n        getter: 'block.getData',\n        setter: 'block.setData',\n        form: {\n          alt: {\n            type: 'input',\n            label: '## image.alt-text ##'\n          }\n        },\n        footer: {\n          'save': {\n            title: '## image.save ##',\n            command: 'image.save',\n            type: 'primary'\n          },\n          'cancel': {\n            title: '## image.cancel ##',\n            command: 'popup.close'\n          }\n        }\n      }); // upload\n\n      this._buildEditUpload(); // open\n\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    observe: function observe() {\n      if (!this.opts.image) return false;\n    },\n    observeStates: function observeStates() {\n      this._findImages().each(this._addImageState.bind(this));\n    },\n    observeImageLink: function observeImageLink(obj) {\n      return this.opts.image.link ? obj : false;\n    },\n    observeImageCaption: function observeImageCaption(obj) {\n      var instance = this.app.block.get();\n\n      if (instance && instance.getTag() === 'figure') {\n        return obj;\n      } else {\n        return false;\n      }\n    },\n    paste: function paste(blob, e) {\n      var params = {\n        url: this.opts.image.upload,\n        name: this.opts.image.name,\n        data: this.opts.image.data,\n        multiple: false,\n        success: 'image.insertFromBlob',\n        error: 'image.error'\n      }; // upload\n\n      var upload = this.app.create('upload');\n      upload.send(e, [blob], params);\n    },\n    drop: function drop(e, dt) {\n      var files = [];\n\n      for (var i = 0; i < dt.files.length; i++) {\n        var file = dt.files[i] || dt.items[i].getAsFile();\n\n        if (file) {\n          files.push(file);\n        }\n      }\n\n      var params = {\n        url: this.opts.image.upload,\n        name: this.opts.image.name,\n        data: this.opts.image.data,\n        multiple: this.opts.image.multiple,\n        success: 'image.insertByDrop',\n        error: 'image.error'\n      };\n\n      if (files.length > 0) {\n        var $block = this.dom(e.target).closest('[data-' + this.prefix + '-type]');\n\n        if ($block.length !== 0) {\n          this.app.block.set($block);\n        } // upload\n\n\n        var upload = this.app.create('upload');\n        upload.send(e, files, params);\n      }\n    },\n    insertFromClipboard: function insertFromClipboard(clipboard) {\n      var text = clipboard.getData(\"text/plain\") || clipboard.getData(\"text/html\");\n      text = text.trim();\n\n      if (text !== '') {\n        return;\n      }\n\n      var items = clipboard.items;\n      var blob = null;\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].type.indexOf(\"image\") === 0) {\n          blob = items[i].getAsFile();\n        }\n      }\n\n      if (blob !== null) {\n        this.paste(blob);\n        return true;\n      }\n    },\n    insertFromBlob: function insertFromBlob(response) {\n      this.insert(response);\n    },\n    insertByDrop: function insertByDrop(response, e) {\n      if (this.app.block.is()) {\n        var instance = this.app.block.get();\n        var target = e.target;\n        var type = instance.getType();\n        var isChange = type === 'card' && target && target.tagName === 'IMG' && instance.hasImage() || type === 'image';\n\n        if (isChange) {\n          this.change(response);\n          return;\n        } else if (e && type !== 'card' && instance.isEditable()) {\n          this.app.insertion.insertPoint(e);\n        }\n      }\n\n      this.insert(response);\n    },\n    insertByUpload: function insertByUpload(response) {\n      this.insert(response);\n    },\n    insertByUrl: function insertByUrl(e) {\n      e.preventDefault();\n      var str = this.$urlinput.val();\n\n      if (str.trim() === '') {\n        return;\n      }\n\n      var response = {\n        file: {\n          url: str,\n          id: this.app.utils.getRandomId()\n        }\n      }; // insert\n\n      this.insert(response);\n    },\n    insertFromSelect: function insertFromSelect(e) {\n      e.preventDefault();\n      var $target = this.dom(e.target);\n      var obj = {\n        url: $target.attr('data-url')\n      };\n      var id = $target.attr('data-id');\n\n      if (id !== null) {\n        obj.id = id;\n      } // insert\n\n\n      this.insert({\n        file: obj\n      });\n    },\n    changeClone: function changeClone(response) {\n      for (var key in response) {\n        this.$imageclone.attr('src', response[key].url);\n        break;\n      }\n\n      this.change(response, false);\n    },\n    change: function change(response, closepopup) {\n      if (closepopup !== false) {\n        this.app.popup.close();\n      }\n\n      var instance = this.app.block.get();\n\n      for (var key in response) {\n        instance.setImage(response[key]);\n        this.app.broadcast('image.change', response[key]);\n        return;\n      }\n    },\n    save: function save(stack) {\n      this.app.popup.close();\n      this.app.block.setData(stack);\n    },\n    insert: function insert(response) {\n      // popup close\n      this.app.popup.close(); // insert\n\n      this.imageslen = 0;\n      this.imagescount = 0; // tag\n\n      var tag = this.opts.image.tag; // loop\n\n      for (var key in response) {\n        var $source = this.dom('<' + tag + '>');\n\n        var $image = this._createImageFromResponseItem(response[key]);\n\n        $source.append($image);\n        var instance = this.app.create('block.image', $source);\n        this.app.block.add({\n          instance: instance\n        });\n        this.$last = instance.getBlock();\n        this.imageslen++;\n      }\n    },\n    error: function error(response) {\n      this.app.broadcast('image.upload.error', {\n        response: response\n      });\n    },\n    getStates: function getStates() {\n      var $images = this._findImages(); // check status\n\n\n      for (var key in this.dataStates) {\n        var data = this.dataStates[key];\n        var status = $images.is('[data-image=\"' + data.id + '\"]');\n\n        this._setImageState(data.id, status);\n      }\n\n      return this.dataStates;\n    },\n    createUploadBox: function createUploadBox(upload, $body) {\n      if (!upload) return;\n      var $upload = this.dom('<div>');\n      $body.append($upload);\n      return $upload;\n    },\n    createSelectBox: function createSelectBox(select, $body, callback) {\n      if (!select) return; // images box\n\n      this.$selectbox = this._createImagesBox($body);\n\n      if (_typeof(select) === 'object') {\n        this._parseList(select, callback);\n      } else {\n        this.ajax.get({\n          url: select,\n          data: {\n            d: new Date().getTime()\n          },\n          success: function (data) {\n            this._parseList(data, callback);\n          }.bind(this)\n        });\n      }\n    },\n    // private\n    _findImages: function _findImages() {\n      return this.app.editor.getLayout().find('[data-image]');\n    },\n    _addImageState: function _addImageState($node) {\n      var id = $node.attr('data-image');\n      this.dataStates[id] = {\n        type: 'image',\n        status: true,\n        url: $node.attr('src'),\n        $img: $node,\n        id: id\n      };\n    },\n    _setImageState: function _setImageState(url, status) {\n      this.dataStates[url].status = status;\n    },\n    _checkImageLoad: function _checkImageLoad() {\n      this.imagescount++;\n\n      if (this.imagescount === this.imageslen) {\n        this.app.block.unset();\n        this.app.block.set(this.$last);\n        this.app.editor.adjustHeight();\n      }\n    },\n    _buildEditUpload: function _buildEditUpload() {\n      if (!this.opts.image.upload) return;\n      var instance = this.app.block.get(); // stack\n\n      var stack = this.app.popup.getStack();\n      var $body = stack.getBody(); // form item\n\n      var $item = this._createFormItem();\n\n      $item.addClass(this.prefix + '-form-item-edit-image-box'); // image\n\n      this.$imageclone = instance.getImage().clone();\n      var $imageitem = this.dom('<div>').addClass(this.prefix + '-form-item-image');\n      $imageitem.append(this.$imageclone);\n      $item.append($imageitem); // upload item\n\n      this.$upload = this.dom('<div>');\n      $item.append(this.$upload); // append to popup\n\n      $body.prepend($item); // build upload\n\n      this._buildUpload(this.$upload, 'image.changeClone');\n    },\n    _buildUpload: function _buildUpload($item, callback) {\n      if (!this.opts.image.upload) return;\n      var params = {\n        box: true,\n        placeholder: this.lang.get('image.upload-new-placeholder'),\n        url: this.opts.image.upload,\n        name: this.opts.image.name,\n        data: this.opts.image.data,\n        multiple: this.opts.image.multiple,\n        success: callback,\n        error: 'image.error'\n      };\n      this.app.create('upload', $item, params);\n    },\n    _createImageFromResponseItem: function _createImageFromResponseItem(item) {\n      var $image = this.dom('<img>').attr('src', item.url).one('load', this._checkImageLoad.bind(this));\n\n      if (item.hasOwnProperty('id')) {\n        $image.attr('data-image', item.id);\n      }\n\n      return $image;\n    },\n    _createImagesBox: function _createImagesBox($body) {\n      var $box = this.dom('<div>').addClass(this.prefix + '-popup-images-box');\n      $body.append($box);\n      return $box;\n    },\n    _createOrSection: function _createOrSection($body) {\n      var $section = this.dom('<div>').addClass(this.prefix + '-popup-image-section-or');\n      $section.html(this.lang.get('image.or'));\n      $body.append($section);\n    },\n    _createImageByUrl: function _createImageByUrl($body) {\n      var $item = this._createFormItem();\n\n      this.$urlinput = this._createUrlInput();\n      this.$urlbutton = this._createUrlButton();\n      $item.append(this.$urlinput);\n      $item.append(this.$urlbutton);\n      $body.append($item); // focus\n\n      this.$urlinput.focus();\n    },\n    _createFormItem: function _createFormItem() {\n      return this.dom('<div>').addClass(this.prefix + '-form-container-flex');\n    },\n    _createUrlInput: function _createUrlInput() {\n      var $input = this.dom('<input>').addClass(this.prefix + '-form-input');\n      $input.attr('placeholder', this.lang.get('image.url-placeholder'));\n      return $input;\n    },\n    _createUrlButton: function _createUrlButton() {\n      var $button = this.dom('<button>').addClass(this.prefix + '-form-button ' + this.prefix + '-form-button-primary');\n      $button.html(this.lang.get('image.insert'));\n      $button.one('click', this.insertByUrl.bind(this));\n      return $button;\n    },\n    _parseList: function _parseList(data, callback) {\n      for (var key in data) {\n        var obj = data[key];\n        if (_typeof(obj) !== 'object') continue;\n        var $img = this.dom('<img>');\n        var url = obj.thumb ? obj.thumb : obj.url;\n        $img.addClass(this.prefix + '-popup-event');\n        $img.attr('src', url);\n        $img.attr('data-url', obj.url);\n        $img.attr('data-callback', callback);\n\n        if (obj.hasOwnProperty('id')) {\n          $img.attr('data-id', obj.id);\n        }\n\n        $img.on('click.' + this.prefix + '-popup-event-' + this.uuid, function (e) {\n          var $target = this.dom(e.target);\n          var callback = $target.attr('data-callback');\n          this.app.api(callback, e);\n        }.bind(this));\n        this.$selectbox.append($img);\n      }\n    }\n  });\n  ArticleEditor.add('module', 'table', {\n    add: function add() {\n      // add\n      var instance = this.app.block.add({\n        name: 'table',\n        source: this.opts.table.template,\n        caret: false\n      }); // focus\n\n      var cell = instance.getFirstCell();\n\n      if (cell) {\n        this.app.block.set(cell, 'start');\n      }\n    },\n    observe: function observe() {\n      if (!this.opts.table) return false;\n    },\n    popup: function popup(params, button) {\n      var instance = this.app.block.get();\n      var type = instance.getType();\n      var items = {};\n\n      if (type === 'table') {\n        items = {\n          addhead: {\n            title: '## table.add-head ##',\n            command: 'table.addHead'\n          },\n          removehead: {\n            title: '## table.remove-head ##',\n            command: 'table.removeHead'\n          }\n        };\n      } else if (type === 'row') {\n        items = {\n          addrowbelow: {\n            title: '## table.add-row-below ##',\n            command: 'table.addRowBelow'\n          },\n          addrowabove: {\n            title: '## table.add-row-above ##',\n            command: 'table.addRowAbove'\n          },\n          removerow: {\n            title: '## table.remove-row ##',\n            command: 'table.removeRow'\n          }\n        };\n      } else if (type === 'cell') {\n        items = {\n          addcolumnafter: {\n            title: '## table.add-column-after ##',\n            command: 'table.addColumnAfter'\n          },\n          addcolumnbefore: {\n            title: '## table.add-column-before ##',\n            command: 'table.addColumnBefore'\n          },\n          addrowbelow: {\n            title: '## table.add-row-below ##',\n            command: 'table.addRowBelow'\n          },\n          addrowabove: {\n            title: '## table.add-row-above ##',\n            command: 'table.addRowAbove'\n          },\n          removecolumn: {\n            title: '## table.remove-column ##',\n            command: 'table.removeColumn'\n          },\n          removerow: {\n            title: '## table.remove-row ##',\n            command: 'table.removeRow'\n          }\n        };\n      }\n\n      this.app.popup.create('table', {\n        items: items\n      }); // open\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    addHead: function addHead() {\n      this.removeHead();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var columns = $block.find('tr').first().children('td, th').length;\n      var $head = this.dom('<thead>');\n\n      var $row = this._buildRow(columns, '<th>');\n\n      $head.append($row);\n      $block.prepend($head); // set\n\n      this.app.block.set($row.children('td, th').first(), 'start');\n    },\n    addRowBelow: function addRowBelow() {\n      this._addRow('below');\n    },\n    addRowAbove: function addRowAbove() {\n      this._addRow('above');\n    },\n    addColumnBefore: function addColumnBefore() {\n      this._addColumn('before');\n    },\n    addColumnAfter: function addColumnAfter() {\n      this._addColumn('after');\n    },\n    removeHead: function removeHead() {\n      this.app.popup.close();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var $head = $block.find('thead');\n\n      if ($head.length !== 0) {\n        $head.remove();\n      }\n    },\n    removeRow: function removeRow() {\n      this.app.popup.close();\n      this.app.control.close();\n      var instance = this.app.block.get();\n      instance.remove();\n    },\n    removeColumn: function removeColumn() {\n      this.app.popup.close();\n      this.app.control.close();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var $table = $block.closest('table');\n      var $row = $block.closest('tr');\n      var index = 0;\n      $row.find('td, th').each(function ($node, i) {\n        if ($node.get() === $block.get()) index = i;\n      });\n      $table.find('tr').each(function ($node) {\n        var cell = $node.find('td, th').get(index);\n        var $cell = this.dom(cell);\n        $cell.remove();\n      }.bind(this));\n    },\n    cellSetting: function cellSetting(params, button) {\n      var instance = this.app.block.get();\n      var stack = this.app.popup.create('cell', {\n        title: '## table.table-cell ##',\n        width: '300px',\n        form: {\n          width: {\n            type: 'input',\n            label: '## table.width ##'\n          },\n          nowrap: {\n            type: 'checkbox',\n            text: '## table.nowrap ##'\n          }\n        },\n        footer: {\n          insert: {\n            title: '## table.save ##',\n            command: 'table.save',\n            type: 'primary'\n          },\n          cancel: {\n            title: '## table.cancel ##',\n            command: 'popup.close'\n          }\n        }\n      }); // data\n\n      stack.setData({\n        width: instance.getWidth(),\n        nowrap: instance.getNowrap()\n      }); // open\n\n      this.app.popup.open({\n        button: button,\n        focus: 'width'\n      });\n    },\n    save: function save(stack) {\n      // popup close\n      this.app.popup.close(); // data\n\n      var data = stack.getData();\n      var instance = this.app.block.get();\n\n      if (data.width !== '') {\n        instance.setWidth(data.width);\n      }\n\n      instance.setNowrap(data.nowrap);\n    },\n    // private\n    _addColumn: function _addColumn(name) {\n      this.app.popup.close();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var $table = $block.closest('table');\n      var $row = $block.closest('tr');\n      var index = 0;\n      $row.find('td, th').each(function ($node, i) {\n        if ($node.get() === $block.get()) index = i;\n      });\n      var rowIndex = 0;\n      $table.find('tr').each(function ($node, i) {\n        if ($node.get() === $row.get()) rowIndex = i;\n      });\n      var $newCell;\n      $table.find('tr').each(function ($node, i) {\n        var cell = $node.find('td, th').get(index);\n        var $cell = this.dom(cell);\n        var $td = $cell.clone();\n        $td.html(''); // create instance\n\n        this.app.create('block.cell', $td);\n\n        if (rowIndex === i) {\n          $newCell = $td;\n        } // after / before\n\n\n        $cell[name]($td);\n      }.bind(this)); // set focus\n\n      if ($newCell) {\n        this.app.block.set($newCell, 'start');\n      }\n    },\n    _addRow: function _addRow(name) {\n      this.app.popup.close();\n      var position = name === 'below' ? 'after' : 'before';\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var $row = $block.closest('tr');\n      var $head = $block.closest('thead');\n      var columns = $row.children('td, th').length;\n\n      var $newRow = this._buildRow(columns, '<td>');\n\n      if ($head.length !== 0) {\n        $head.after($newRow);\n      } else {\n        $row[position]($newRow);\n      } // set focus\n\n\n      this.app.block.set($newRow.find('td, th').first(), 'start');\n    },\n    _buildRow: function _buildRow(columns, tag) {\n      var $row = this.dom('<tr>'); // create instance\n\n      this.app.create('block.row', $row);\n\n      for (var i = 0; i < columns; i++) {\n        var $cell = this.dom(tag); // create instance\n\n        this.app.create('block.cell', $cell); // append\n\n        $row.append($cell);\n      }\n\n      return $row;\n    }\n  });\n  ArticleEditor.add('module', 'snippet', {\n    init: function init() {\n      this.json = {};\n    },\n    observe: function observe() {\n      if (!this.opts.snippets) return false;\n    },\n    popup: function popup() {\n      var stack = this.app.popup.add('snippets', {\n        title: '## popup.snippets ##',\n        width: '100%'\n      }); // data\n\n      var $body = stack.getBody(); // json url\n\n      if (typeof this.opts.snippets === 'string') {\n        this.ajax.get({\n          url: this.opts.snippets,\n          data: {\n            d: new Date().getTime()\n          },\n          success: function (data) {\n            this._buildPopup(data, $body);\n          }.bind(this)\n        });\n      } // json object\n      else {\n          this._buildPopup(this.opts.snippets, $body);\n        } // open\n\n\n      stack.open();\n    },\n    insert: function insert(e) {\n      var $trigger = this.dom(e.target).closest('.' + this.prefix + '-snippet-container');\n      var key = $trigger.attr('data-snippet-key');\n\n      if (this.json.hasOwnProperty(key)) {\n        this.app.popup.close();\n        var html = this.json[key].html;\n        this.app.editor.insertContent({\n          html: html,\n          caret: 'start'\n        });\n      }\n    },\n    // private\n    _buildPopup: function _buildPopup(data, $body) {\n      this.json = data;\n\n      if (typeof data === 'string') {\n        this.json = JSON.parse(data);\n      }\n\n      for (var key in this.json) {\n        var $container = this._buildPreviewContainer($body, key); // preview\n\n\n        this._buildPreview($container, key);\n\n        this._buildPreviewName($container, key);\n      }\n    },\n    _buildPreviewContainer: function _buildPreviewContainer($body, key) {\n      var $div = this.dom('<div>').addClass(this.prefix + '-snippet-container');\n      $div.attr('data-snippet-key', key);\n      $div.one('click', this.insert.bind(this)); // append\n\n      $body.append($div);\n      return $div;\n    },\n    _buildPreview: function _buildPreview($container, key) {\n      var $div = this.dom('<div>');\n\n      if (this.json[key].hasOwnProperty('image')) {\n        $div.addClass(this.prefix + '-snippet-image');\n        var $img = this.dom('<img>').attr('src', this.json[key].image);\n        $div.html($img);\n      } else {\n        $div.addClass(this.prefix + '-snippet-preview');\n        $div.html(this.json[key].html);\n      }\n\n      $container.append($div);\n    },\n    _buildPreviewName: function _buildPreviewName($container, key) {\n      if (!this.json[key].hasOwnProperty('name')) return;\n      var $span = this.dom('<div>').addClass(this.prefix + '-snippet-name');\n      $span.text(this.json[key].name);\n      $container.append($span);\n    }\n  });\n  ArticleEditor.add('module', 'template', {\n    init: function init() {\n      this.json = {};\n    },\n    observe: function observe() {\n      if (!this.opts.templates) return false;\n    },\n    popup: function popup(params, button) {\n      // json url\n      if (typeof this.opts.templates === 'string') {\n        this.ajax.get({\n          url: this.opts.templates,\n          data: {\n            d: new Date().getTime()\n          },\n          success: function (data) {\n            this._buildPopup(button, data);\n          }.bind(this)\n        });\n      } // json object\n      else {\n          this._buildPopup(button, this.opts.templates);\n        }\n    },\n    insert: function insert(e) {\n      var $trigger = this.dom(e.target).closest('.' + this.prefix + '-template-container');\n      var key = $trigger.attr('data-template-key');\n\n      if (this.json.hasOwnProperty(key)) {\n        this.app.popup.close();\n        var html = this.json[key].html;\n        this.app.editor.setContent({\n          html: html,\n          caret: false\n        });\n      }\n    },\n    // private\n    _buildPopup: function _buildPopup(button, data) {\n      // popup\n      this.app.popup.create('templates', {\n        title: '## templates.templates ##',\n        width: '100%'\n      }); // stack\n\n      var stack = this.app.popup.getStack();\n      var $body = stack.getBody(); // json\n\n      this.json = typeof data === 'string' ? JSON.parse(data) : data; // items\n\n      for (var key in this.json) {\n        // container\n        var $container = this._buildPreviewContainer($body, key); // preview\n\n\n        this._buildPreview($container, key);\n\n        this._buildPreviewName($container, key);\n      } // open\n\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    _buildPreviewContainer: function _buildPreviewContainer($body, key) {\n      var $div = this.dom('<div>').addClass(this.prefix + '-template-container');\n      $div.attr('data-template-key', key);\n      $div.one('click', this.insert.bind(this)); // append\n\n      $body.append($div);\n      return $div;\n    },\n    _buildPreview: function _buildPreview($container, key) {\n      var $div = this.dom('<div>');\n\n      if (this.json[key].hasOwnProperty('image')) {\n        $div.addClass(this.prefix + '-template-image');\n        var $img = this.dom('<img>').attr('src', this.json[key].image);\n        $div.html($img);\n      } else {\n        $div.addClass(this.prefix + '-template-preview');\n        $div.html(this.json[key].html);\n      }\n\n      $container.append($div);\n    },\n    _buildPreviewName: function _buildPreviewName($container, key) {\n      if (!this.json[key].hasOwnProperty('name')) return;\n      var $span = this.dom('<div>').addClass(this.prefix + '-template-name');\n      $span.text(this.json[key].name);\n      $container.append($span);\n    }\n  });\n  ArticleEditor.add('class', 'tool.checkbox', {\n    mixins: ['tool'],\n    type: 'checkbox',\n    input: {\n      tag: 'input',\n      type: 'checkbox',\n      classname: '-form-checkbox'\n    },\n    getValue: function getValue() {\n      return this.$input.val();\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$box = this.dom('<label>').addClass(this.prefix + '-form-checkbox-item');\n      this.$box.append(this.$input); // checkbox text\n\n      if (this._has('text')) {\n        var $span = this.dom('<span>').html(this.lang.parse(this.obj.text));\n        this.$box.append($span);\n      }\n\n      this.$tool.append(this.$box);\n    }\n  });\n  ArticleEditor.add('class', 'tool.color', {\n    mixins: ['tool'],\n    type: 'color',\n    input: {\n      tag: 'input',\n      type: 'text',\n      classname: '-form-input'\n    },\n    setValue: function setValue(value) {\n      this.$input.val(value);\n      this.$select.css('background-color', value);\n\n      if (this.$picker) {\n        this.setColor(value);\n      }\n\n      if (value && this.$checkbox) {\n        this.$checkbox.attr('checked', true);\n      }\n    },\n    setColor: function setColor(color) {\n      this.$picker.attr('data-current-color', color);\n      this.$picker.find('.' + this.prefix + '-color').removeClass('active');\n      this.$picker.find('.' + this.prefix + '-color').each(function ($node) {\n        var value = $node.attr('data-value'); // active\n\n        if (value === color) {\n          $node.addClass('active');\n          $node.css('color', this.app.color.invert(color));\n        }\n      }.bind(this));\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$box = this.dom('<div>').addClass(this.prefix + '-form-container-flex ' + this.prefix + '-form-container-color');\n      this.$select = this.dom('<span>').addClass(this.prefix + '-form-color-select');\n      this.$checkbox = this.dom('<input>').addClass(this.prefix + '-form-checkbox').attr('type', 'checkbox');\n      this.$input.css('max-width', '90px');\n      this.$input.on('keydown blur', this._changeColorSelect.bind(this));\n\n      if (this._has('picker')) {\n        this.$picker = this._createPicker();\n        this.$tool.append(this.$picker);\n      } else {\n        this.$select.addClass(this.prefix + '-form-color-select-pointer');\n        this.$select.on('click', this._buildColorpicker.bind(this));\n      }\n\n      if (this.name === 'background-color') {\n        this.$box.append(this.$checkbox);\n        this.$checkbox.on('change', this._changeColorState.bind(this));\n      }\n\n      this.$box.append(this.$select);\n      this.$box.append(this.$input);\n      this.$tool.append(this.$box);\n\n      if (this._has('picker')) {\n        this._buildColors();\n      }\n    },\n    _buildColors: function _buildColors() {\n      this.$picker.html('');\n\n      for (var key in this.opts.colors) {\n        var $div = this.dom('<div class=\"' + this.prefix + '-form-colors\">');\n\n        for (var i = 0; i < this.opts.colors[key].length; i++) {\n          var color = this.opts.colors[key][i];\n\n          var $span = this._createColor(color, key, i);\n\n          if (color === '#fff' || color === '#ffffff') {\n            $span.addClass(this.prefix + '-form-color-contrast');\n          }\n\n          $div.append($span);\n        }\n\n        this.$picker.append($div);\n      }\n    },\n    _buildColorpicker: function _buildColorpicker(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.$picker = this._createPicker();\n      var stack = this.app.popup.add('colorpicker', {\n        title: '## popup.pick-color ##',\n        collapse: true\n      });\n      stack.getBody().append(this.$picker);\n\n      this._buildColors();\n\n      this.setColor(this.$input.val());\n      stack.open();\n    },\n    _createPicker: function _createPicker() {\n      return this.dom('<div>').addClass(this.prefix + '-form-colorpicker');\n    },\n    _createColor: function _createColor(color, key, i) {\n      var $span = this.dom('<span>').addClass(this.prefix + '-color').css('background-color', color);\n      $span.attr({\n        'title': key + '-' + i,\n        'data-value': color\n      });\n      $span.on('mouseover', this._inColor.bind(this));\n      $span.on('mouseout', this._outColor.bind(this));\n      $span.on('click', this._setColor.bind(this));\n      return $span;\n    },\n    _inColor: function _inColor(e) {\n      var $color = this.dom(e.target);\n      var value = $color.attr('data-value');\n\n      this._setColorToInput(value);\n    },\n    _outColor: function _outColor() {\n      this._setColorToInput(this.$picker.attr('data-current-color'));\n    },\n    _setColorToInput: function _setColorToInput(value) {\n      this.$input.val(value);\n      this.$select.css('background-color', value);\n    },\n    _setColor: function _setColor(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $color = this.dom(e.target);\n      var value = $color.attr('data-value');\n      this.$picker.attr('data-current-color', value);\n      this.$picker.find('.' + this.prefix + '-color').removeClass('active');\n      $color.addClass('active');\n      $color.css('color', this.app.color.invert(value));\n\n      this._setColorToInput(value);\n\n      if (this.setter) {\n        this.app.api(this.setter, this.stack);\n      }\n\n      if (this._has('picker')) {\n        this.app.popup.close();\n      } else {\n        var stack = this.app.popup.getStack();\n        stack.collapse();\n      }\n    },\n    _changeColorSelect: function _changeColorSelect(e) {\n      if (e.type === 'keydown' && e.which !== 13) return;\n      if (e.type === 'keydown') e.preventDefault();\n      var value = this.$input.val();\n      value = this.app.color.normalize(value);\n      this.$input.val(value);\n      this.$select.css('background-color', value);\n\n      if (this.picker) {\n        this.picker.setColor(value);\n      }\n\n      this.$checkbox.attr('checked', value !== '');\n    },\n    _changeColorState: function _changeColorState(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var state = this.$checkbox.attr('checked');\n      var value = state ? '#ffffff' : '';\n      this.setValue(value);\n      this.app.api(this.setter, this.stack);\n    }\n  });\n  ArticleEditor.add('class', 'tool.input', {\n    mixins: ['tool'],\n    type: 'input',\n    input: {\n      tag: 'input',\n      type: 'text',\n      classname: '-form-input'\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$tool.append(this.$input);\n    }\n  });\n  ArticleEditor.add('class', 'tool.number', {\n    mixins: ['tool'],\n    type: 'number',\n    input: {\n      tag: 'input',\n      type: 'number',\n      classname: '-form-input'\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$input.attr('min', 0).css('max-width', '65px');\n      this.$tool.append(this.$input);\n    }\n  });\n  ArticleEditor.add('class', 'tool.segment', {\n    mixins: ['tool'],\n    type: 'segment',\n    input: {\n      tag: 'input',\n      type: 'hidden',\n      classname: '-form-input'\n    },\n    setValue: function setValue(value) {\n      this.$segment.find('.' + this.prefix + '-form-segment-item').removeClass('active');\n      this.$segment.find('[data-segment=' + value + ']').addClass('active');\n      this.$input.val(value);\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$segment = this.dom('<div>').addClass(this.prefix + '-form-segment').css('max-width', '200px');\n      var segments = this.obj.segments;\n\n      for (var name in segments) {\n        var $segment = this.dom('<span>').addClass(this.prefix + '-form-segment-item');\n        $segment.attr('data-segment', name).on('click', this._catchSegment.bind(this));\n\n        if (segments[name].hasOwnProperty('icon')) {\n          $segment.html(segments[name].icon);\n        } else {\n          $segment.addClass(this.prefix + '-icon-' + segments[name].prefix + '-' + name);\n        }\n\n        this.$segment.append($segment);\n      }\n\n      this.$segment.append(this.$input);\n      this.$tool.append(this.$segment);\n    },\n    _catchSegment: function _catchSegment(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $item = this.dom(e.target).closest('.' + this.prefix + '-form-segment-item');\n      var value = $item.attr('data-segment');\n      this.$segment.find('.' + this.prefix + '-form-segment-item').removeClass('active');\n      $item.addClass('active');\n      this.$input.val(value); // call setter\n\n      this.app.api(this.setter, this.stack);\n    }\n  });\n  ArticleEditor.add('class', 'tool.select', {\n    mixins: ['tool'],\n    type: 'select',\n    input: {\n      tag: 'select',\n      classname: '-form-select'\n    },\n    // private\n    _buildInput: function _buildInput() {\n      for (var value in this.obj.options) {\n        var $option = this.dom('<option>');\n        $option.val(value);\n        $option.html(this.lang.parse(this.obj.options[value]));\n        this.$input.append($option);\n      }\n\n      this.$tool.append(this.$input);\n    }\n  });\n  ArticleEditor.add('class', 'tool.textarea', {\n    mixins: ['tool'],\n    type: 'textarea',\n    input: {\n      tag: 'textarea',\n      classname: '-form-textarea'\n    },\n    setFocus: function setFocus() {\n      this.$input.focus();\n      this.$input.get().setSelectionRange(0, 0);\n      this.$input.scrollTop(0);\n    },\n    // private\n    _buildInput: function _buildInput() {\n      if (this._has('rows')) {\n        this.$input.attr('rows', this._get('rows'));\n      }\n\n      this.$input.attr('data-gramm_editor', false);\n      this.$tool.append(this.$input);\n    }\n  });\n  ArticleEditor.add('block', 'block.paragraph', {\n    mixins: ['block'],\n    type: 'paragraph',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<p>');\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        var clone = this.app.block.create(); // clone paragraph styles\n\n        if (!this.opts.clean.enter) {\n          clone = this.duplicateEmpty();\n        }\n\n        if (!this.opts.clean.enterinline) {\n          // clone inline\n          var inline = this.app.selection.getInline();\n\n          if (inline) {\n            var cloned;\n            var inlines = this.app.element.getAllInlines(inline);\n\n            for (var i = 0; i < inlines.length; i++) {\n              if (i === 0) {\n                cloned = inlines[i].cloneNode();\n                cloned.innerHTML = '';\n              } else {\n                var clonedInline = inlines[i].cloneNode();\n                clonedInline.innerHTML = '';\n                cloned.appendChild(clonedInline);\n              }\n            }\n\n            clone = this.app.block.create(cloned.outerHTML);\n          }\n        }\n\n        this.insert({\n          instance: clone,\n          position: 'after',\n          caret: 'start'\n        });\n      } // start\n      else if (this.isCaretStart()) {\n          this.insert({\n            instance: this.duplicateEmpty(),\n            position: 'before'\n          });\n        } // middle\n        else {\n            var $block = this.getBlock();\n            var $part = this.app.element.split($block);\n            this.app.block.set($part, 'start');\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.text', {\n    mixins: ['block'],\n    type: 'text',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<div>').addClass(this.opts.text.classname);\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      this.app.insertion.insertBreakline();\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.address', {\n    mixins: ['block'],\n    type: 'address',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<address>');\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end  check address exit\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        var $block = this.getBlock();\n        var $nodes = $block.children();\n        var len = $nodes.length;\n        var $last = $nodes.eq(len - 1);\n        var $lastPrev = $nodes.eq(len - 2);\n        var html = $block.html().trim();\n        html = this.app.utils.removeInvisibleChars(html);\n\n        if (html.search(/<br\\s?\\/?><br\\s?\\/?>$/) !== -1) {\n          // remove empty\n          $lastPrev.remove();\n          $last.remove(); // insert\n\n          this.insertEmpty({\n            position: 'after',\n            caret: 'start'\n          });\n          return;\n        }\n      } // insert br\n\n\n      this.app.insertion.insertBreakline();\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.cell', {\n    mixins: ['block'],\n    type: 'cell',\n    editable: true,\n    toolbar: {\n      table: {\n        command: 'table.popup',\n        title: '## buttons.table ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      },\n      tune: {\n        command: 'table.cellSetting',\n        title: '## buttons.settings ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<td>');\n    },\n    getNextCell: function getNextCell() {\n      var cell = this.getNext();\n\n      if (!cell) {\n        var row = this.getParent('row');\n\n        if (row) {\n          var nextRow = row.getNextRow();\n\n          if (nextRow) {\n            cell = nextRow.getChildFirst('cell');\n          }\n        }\n      }\n\n      return cell;\n    },\n    getPrevCell: function getPrevCell() {\n      var cell = this.getPrev();\n\n      if (!cell) {\n        var row = this.getParent('row');\n\n        if (row) {\n          var prevRow = row.getPrevRow();\n\n          if (prevRow) {\n            cell = prevRow.getChildLast('cell');\n          }\n        }\n      }\n\n      return cell;\n    },\n    getWidth: function getWidth() {\n      var value = this.$block.attr('width');\n      return value ? value : '';\n    },\n    getNowrap: function getNowrap() {\n      var value = this.$block.css('white-space');\n      return value === 'nowrap';\n    },\n    setWidth: function setWidth(value) {\n      this._eachCell(function ($cell) {\n        if (value === '') {\n          $cell.removeAttr('width');\n        } else {\n          $cell.attr('width', value);\n        }\n      });\n    },\n    setNowrap: function setNowrap(value) {\n      this._eachCell(function ($cell) {\n        value = value ? 'nowrap' : '';\n        $cell.css('white-space', value);\n      });\n    },\n    // handle\n    handleArrow: function handleArrow(e, key, event) {\n      var parentInstance;\n\n      if (event.is('up-left') && this.isCaretStart()) {\n        e.preventDefault();\n        var prev = this.getPrevCell();\n\n        if (prev) {\n          this.app.block.set(prev, 'end');\n        } else {\n          parentInstance = this.getParent('table');\n          this.app.block.set(parentInstance);\n        }\n\n        return true;\n      } else if (event.is('down-right') && this.isCaretEnd()) {\n        e.preventDefault();\n        var next = this.getNextCell();\n\n        if (next) {\n          this.app.block.set(next, 'start');\n        } else {\n          parentInstance = this.getParent('table');\n          this.app.block.set(parentInstance);\n        }\n\n        return true;\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var next = this.getNextCell();\n\n      if (next) {\n        this.app.block.set(next, 'start');\n      } else {\n        var parentInstance = this.getParent('table');\n        this.app.block.set(parentInstance);\n      }\n\n      return true;\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      this.app.insertion.insertBreakline();\n      return true;\n    },\n    // private\n    _eachCell: function _eachCell(func) {\n      var index = 0;\n      var $table = this.$block.closest('table'); // index\n\n      this.$block.closest('tr').find('td, th').each(function ($node, i) {\n        if ($node.get() === this.$block.get()) index = i;\n      }.bind(this));\n      $table.find('tr').each(function ($node) {\n        var cell = $node.find('td, th').get(index);\n        var $cell = this.dom(cell);\n        func($cell); //content.cacheBlocksStyle($cell);\n      }.bind(this));\n    }\n  });\n  ArticleEditor.add('block', 'block.code', {\n    mixins: ['block'],\n    type: 'code',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.code.template);\n    },\n    build: function build() {\n      this._buildCaption();\n\n      this._buildItems('figcaption', 'figcaption');\n    },\n    // handle\n    handleArrow: function handleArrow(e, key, event) {\n      if (event.is('down-right') && this.isCaretEnd()) {\n        var next = this.getNext();\n\n        if (next) {\n          this.app.block.set(next, 'start');\n          return true;\n        } else {\n          this.app.insertion.insertEmptyBlock({\n            position: 'after',\n            caret: 'start'\n          });\n          return true;\n        }\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var num = this.opts.code.spaces;\n      var node = document.createTextNode(Array(num + 1).join(' '));\n      this.app.insertion.insertNode(node, 'end');\n      return true;\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      var last = this.$block.html().search(/\\n$/);\n\n      if (this.isCaretEnd() && last === -1) {\n        this.app.insertion.insertNewline('after', true);\n      } else {\n        this.app.insertion.insertNewline();\n      }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.column', {\n    mixins: ['block'],\n    type: 'column',\n    nested: true,\n    emptiable: true,\n    toolbar: {\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<div>');\n    }\n  });\n  ArticleEditor.add('block', 'block.dlist', {\n    mixins: ['block'],\n    type: 'dlist',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<dl>');\n    },\n    getPlainText: function getPlainText(keepbr) {\n      var html = '';\n      var $items = this.$block.find('dt, dd');\n      var len = $items.length;\n      $items.each(function ($node, i) {\n        var br = keepbr ? '<br>' : '';\n        if (i === len) br = '';\n        html += $node.html() + br;\n      });\n      return html;\n    },\n    setEmpty: function setEmpty() {\n      this.$block.html('');\n      var $item = this.dom('<dt>');\n      this.$block.append($item);\n      this.app.caret.set($item, 'start');\n    },\n    isEmpty: function isEmpty() {\n      var html = this.$block.html();\n      html = this._cleanEmpty(html);\n      var $items = this.$block.find('dt, dd');\n\n      if ($items.length === 0) {\n        html = html.trim();\n        return html === '';\n      } else if ($items.length === 1) {\n        html = $items.eq(0).html();\n        html = this._cleanEmpty(html);\n        return html === '';\n      }\n\n      return false;\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        var currentItem = this.app.selection.getBlock();\n        var $currentItem = this.dom(currentItem);\n        var tag = currentItem.tagName.toLowerCase();\n        var isItemEmpty = this.app.content.isEmptyHtml(currentItem.innerHTML);\n\n        if (tag === 'dt' && isItemEmpty) {\n          // remove empty\n          $currentItem.remove(); // insert\n\n          this.insertEmpty({\n            position: 'after',\n            caret: 'start'\n          });\n          return true;\n        } // insert dt or dd\n\n\n        var $newItem;\n\n        if (tag === 'dt') {\n          $newItem = this.dom('<dd>');\n        } else {\n          $newItem = this.dom('<dt>');\n        }\n\n        this.dom(currentItem).after($newItem);\n        this.app.caret.set($newItem, 'start');\n      } // start\n      else if (this.isCaretStart()) {\n          return true;\n        } // middle\n        else {\n            this.app.insertion.insertBreakline();\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.embed', {\n    mixins: ['block'],\n    type: 'embed',\n    parser: {\n      unparse: function unparse($node) {\n        var code = decodeURI($node.attr('data-embed-code'));\n        var $responsive = $node.find('.' + this.opts.embed.responsive);\n        var $el = $node.find('figcaption');\n        var $figcaption;\n\n        if ($el.length !== 0) {\n          $figcaption = $el.clone();\n          $el.remove();\n        }\n\n        if ($responsive.length === 0) {\n          $node.html(code);\n        } else {\n          $responsive.html(code);\n        }\n\n        if ($figcaption) {\n          $node.append($figcaption);\n        }\n\n        $node.removeAttr('data-embed-code');\n      }\n    },\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      outset: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.outset ##'\n      },\n      embed: {\n        command: 'embed.edit',\n        title: '## buttons.embed ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<figure>');\n    },\n    build: function build() {\n      this._buildCaption();\n\n      this._buildItems('figcaption', 'figcaption');\n\n      this._buildEmbedCode();\n    },\n    addResponsive: function addResponsive() {\n      var $responsive = this.dom('<div>').addClass(this.opts.embed.responsive);\n      var $figcaption = this.$block.find('figcaption');\n      var $cloneFigcaption = $figcaption.clone();\n      var html = this.getEmbedCode();\n      $figcaption.remove();\n      $responsive.html(html);\n      this.$block.html('').append($responsive);\n\n      if ($cloneFigcaption.length !== 0) {\n        this.app.create('block.figcaption', $cloneFigcaption);\n        this.$block.append($cloneFigcaption);\n      }\n    },\n    removeResponsive: function removeResponsive() {\n      this.$block.find('.' + this.opts.embed.responsive).unwrap();\n    },\n    getEmbedCode: function getEmbedCode() {\n      return decodeURI(this.$block.attr('data-embed-code'));\n    },\n    isResponsive: function isResponsive() {\n      return this.$block.find('.' + this.opts.embed.responsive).length !== 0;\n    },\n    // private\n    _buildEmbedCode: function _buildEmbedCode() {\n      var $clone = this.$block.clone();\n      $clone.find('.' + this.opts.embed.responsive).unwrap();\n      $clone.find('figcaption').remove();\n      var code = $clone.html().trim();\n      this.$block.attr('data-embed-code', encodeURI(code));\n    }\n  });\n  ArticleEditor.add('block', 'block.figcaption', {\n    mixins: ['block'],\n    type: 'figcaption',\n    editable: true,\n    toolbar: {\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<figcaption>');\n    },\n    getFigure: function getFigure() {\n      return this.$block.closest('figure').dataget('instance');\n    },\n    // handle\n    handleArrow: function handleArrow(e, key, event) {\n      if (event.is('up-left') && this.isCaretStart() || event.is('down-right') && this.isCaretEnd()) {\n        e.preventDefault();\n        var parentInstance = this.getFigure();\n        this.app.block.set(parentInstance);\n        return true;\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var parentInstance = this.getFigure();\n      this.app.block.set(parentInstance);\n      return true;\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd() || this.isCaretStart()) {\n        return true;\n      } // middle\n      else {\n          this.app.insertion.insertBreakline();\n        }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.grid', {\n    mixins: ['block'],\n    type: 'grid',\n    nested: true,\n    parser: {\n      unparse: function unparse($node) {\n        $node.removeClass(this.prefix + '-grid-overlay');\n      }\n    },\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      valign: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.valign ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      var $block = this.dom('<div>').addClass(this.opts.grid.classname);\n\n      if (this.opts.grid.classes !== '') {\n        $block.addClass(this.opts.grid.classes);\n      }\n\n      return $block;\n    },\n    build: function build() {\n      this._buildOverlay();\n    },\n    // privae\n    _buildOverlay: function _buildOverlay() {\n      if (this.opts.grid && this.opts.grid.overlay) {\n        this.$block.addClass(this.prefix + '-grid-overlay');\n      }\n    }\n  });\n  ArticleEditor.add('block', 'block.heading', {\n    mixins: ['block'],\n    type: 'heading',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<h2>');\n    },\n    getTitle: function getTitle() {\n      var titles = this.lang.get('headings');\n      var tag = this.getTag();\n      var title = this.$block.attr('data-title');\n      return typeof titles[tag] !== 'undefined' ? titles[tag] : title;\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        this.insertEmpty({\n          position: 'after',\n          caret: 'start'\n        });\n      } // start\n      else if (this.isCaretStart()) {\n          this.insert({\n            instance: this.duplicateEmpty(),\n            position: 'before'\n          });\n        } // middle\n        else {\n            var $block = this.getBlock();\n            var $part = this.app.element.split($block);\n            this.app.block.set($part, 'start');\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.image', {\n    mixins: ['block'],\n    type: 'image',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      outset: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.outset ##'\n      },\n      image: {\n        command: 'image.edit',\n        title: '## buttons.settings ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<' + this.opts.image.tag + '>');\n    },\n    build: function build() {\n      this._buildCaption();\n\n      this._buildItems('figcaption', 'figcaption');\n\n      this.data = {\n        'alt': {\n          getter: 'getAlt',\n          setter: 'setAlt'\n        },\n        'link': {\n          getter: 'getLinkUrl',\n          setter: 'setLinkUrl'\n        },\n        'target': {\n          getter: 'getTarget',\n          setter: 'setTarget'\n        },\n        'caption': {\n          getter: 'getCaption',\n          setter: 'setCaption'\n        }\n      };\n    },\n    getImage: function getImage() {\n      return this.$block.find('img').eq(0);\n    },\n    getSrc: function getSrc() {\n      var $img = this.getImage();\n      return $img.attr('src');\n    },\n    getLink: function getLink() {\n      var $link = this.getImage().parent();\n      $link = $link.get().tagName !== 'A' ? false : $link;\n      return $link;\n    },\n    getAlt: function getAlt() {\n      var $img = this.getImage();\n      var alt = $img.attr('alt');\n      return alt ? alt : '';\n    },\n    getLinkUrl: function getLinkUrl() {\n      var $link = this.getLink();\n      return $link ? $link.attr('href') : '';\n    },\n    getTarget: function getTarget() {\n      var $link = this.getLink();\n      return $link ? $link.attr('target') : this.opts.image.newtab;\n    },\n    setAlt: function setAlt(value) {\n      var $img = this.getImage();\n      $img.attr('alt', value);\n    },\n    setTarget: function setTarget(value) {\n      var $link = this.getLink();\n      if (!$link) return;\n      if (value) $link.attr('target', '_blank');else $link.removeAttr('target');\n    },\n    setLinkUrl: function setLinkUrl(value) {\n      var $link = this.getLink();\n\n      if (value === '' && $link) {\n        this.removeLink();\n        return;\n      } else if (!$link) {\n        var $img = this.getImage();\n        $link = this.dom('<a>');\n        $img.wrap($link);\n      }\n\n      $link.attr('href', value);\n    },\n    setImage: function setImage(data) {\n      var $img = this.getImage();\n      $img.attr('src', data.url);\n\n      if (data.hasOwnProperty('id')) {\n        $img.attr('data-image', data.id);\n      }\n\n      $img.one('load', this.app.editor.adjustHeight.bind(this.app.editor));\n    },\n    removeLink: function removeLink() {\n      var $link = this.getLink();\n\n      if ($link) {\n        $link.unwrap();\n      }\n    }\n  });\n  ArticleEditor.add('block', 'block.layer', {\n    mixins: ['block'],\n    type: 'layer',\n    nested: true,\n    emptiable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.layer.template);\n    },\n    getTitle: function getTitle() {\n      var title = this.$block.attr('data-title');\n      return title || this._getNameByTag();\n    }\n  });\n  ArticleEditor.add('block', 'block.line', {\n    mixins: ['block'],\n    type: 'line',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<hr>');\n    }\n  });\n  ArticleEditor.add('block', 'block.list', {\n    mixins: ['block'],\n    type: 'list',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      outdent: {\n        command: 'list.outdent',\n        title: '## buttons.outdent ##'\n      },\n      indent: {\n        command: 'list.indent',\n        title: '## buttons.indent ##'\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<ul>');\n    },\n    unparse: function unparse($el) {\n      this.app.content.unfixListMargin($el);\n    },\n    setEmpty: function setEmpty() {\n      this.$block.html('');\n      var $item = this.dom('<li>');\n      this.$block.append($item);\n      this.app.caret.set($item, 'start');\n    },\n    isEmpty: function isEmpty() {\n      var html = this.$block.html();\n      html = this._cleanEmpty(html);\n      var $items = this.$block.find('li');\n\n      if ($items.length === 0) {\n        html = html.trim();\n        return html === '';\n      } else if ($items.length === 1) {\n        html = $items.eq(0).html();\n        html = this._cleanEmpty(html);\n        return html === '';\n      }\n\n      return false;\n    },\n    // handle\n    handleTab: function handleTab(e, key, event) {\n      var currentItem = this.app.selection.getBlock();\n      var isItemStart = this.app.caret.is(currentItem, 'start');\n\n      if (this.isCaretStart() || this.isCaretEnd()) {\n        var next = this.getNext();\n\n        if (next) {\n          e.preventDefault();\n          this.app.block.set(next, 'start');\n          return true;\n        }\n      } else {\n        if (this.opts.tab.spaces && !isItemStart) {\n          return;\n        }\n\n        e.preventDefault();\n        this.app.list.indent();\n        return true;\n      }\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      var $newItem, $currentItem, currentItem, isItemEmpty; // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        currentItem = this.app.selection.getBlock();\n        $currentItem = this.dom(currentItem);\n        isItemEmpty = this.app.content.isEmptyHtml(currentItem.innerHTML); // list exit\n\n        if (isItemEmpty) {\n          // remove empty\n          $currentItem.remove(); // insert\n\n          this.insertEmpty({\n            position: 'after',\n            caret: 'start'\n          });\n          return true;\n        } // insert li\n\n\n        $newItem = this.dom('<li>');\n        this.app.element.cloneAttrs(currentItem, $newItem);\n        this.dom(currentItem).after($newItem);\n        this.app.caret.set($newItem, 'start');\n      } // start\n      else if (this.isCaretStart()) {\n          $newItem = this.dom('<li>');\n          currentItem = this.app.selection.getBlock();\n          this.app.element.cloneAttrs(currentItem, $newItem);\n          this.dom(currentItem).before($newItem);\n        } // middle\n        else {\n            currentItem = this.app.selection.getBlock();\n            $currentItem = this.dom(currentItem);\n            isItemEmpty = this.app.content.isEmptyHtml(currentItem.innerHTML);\n            var isItemStart = this.app.caret.is(currentItem, 'start');\n            var isItemEnd = this.app.caret.is(currentItem, 'end', ['ul', 'ol']);\n            $newItem = this.dom('<li>');\n            this.app.element.cloneAttrs(currentItem, $newItem); // empty\n\n            if (isItemEmpty) {\n              $currentItem.after($newItem);\n              this.app.caret.set($newItem, 'start');\n            } // start\n            else if (isItemStart) {\n                $currentItem.before($newItem);\n              } // end\n              else if (isItemEnd) {\n                  var $listInside = $currentItem.find('ul, ol').first();\n\n                  if ($listInside.length !== 0) {\n                    $newItem.append(this.app.utils.createInvisibleChar());\n                    $newItem.append($listInside);\n                    $currentItem.after($newItem);\n                  } else {\n                    $currentItem.after($newItem);\n                  }\n\n                  this.app.caret.set($newItem, 'start');\n                } // middle\n                else {\n                    var $part = this.app.element.split(currentItem);\n                    this.app.caret.set($part, 'start');\n                  }\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.noneditable', {\n    mixins: ['block'],\n    type: 'noneditable',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<div>').addClass(this.opts.noneditable.classname);\n    }\n  });\n  ArticleEditor.add('block', 'block.quote', {\n    mixins: ['block'],\n    type: 'quote',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.quote.template);\n    },\n    build: function build() {\n      this._buildCaption();\n\n      this._buildItems('p', 'quoteitem');\n\n      this._buildItems('figcaption', 'figcaption');\n    }\n  });\n  ArticleEditor.add('block', 'block.quoteitem', {\n    mixins: ['block'],\n    type: 'quoteitem',\n    editable: true,\n    toolbar: {\n      alignment: {\n        command: 'addbar.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<p>');\n    },\n    getBlockquote: function getBlockquote() {\n      return this.$block.closest('blockquote');\n    },\n    // handle\n    handleArrow: function handleArrow(e, key, event) {\n      var $blockquote = this.getBlockquote();\n      if ($blockquote.length === 0) return;\n      var isStart = this.app.caret.is($blockquote, 'start');\n      var isEnd = this.app.caret.is($blockquote, 'end');\n\n      if (event.is('up-left') && isStart || event.is('down-right') && isEnd) {\n        e.preventDefault();\n        var parentInstance = this.getParent('quote');\n        this.app.block.set(parentInstance);\n        return true;\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var next = this.getNext();\n\n      if (next) {\n        this.app.block.set(next, 'start');\n        return true;\n      } else {\n        var quote = this.getParent('quote');\n        this.app.block.set(quote);\n        return true;\n      }\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // prepare new instance\n\n      var newInstance = this.app.create('block.quoteitem'); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        this.insert({\n          instance: newInstance,\n          position: 'after',\n          caret: 'start'\n        });\n      } // start\n      else if (this.isCaretStart()) {\n          this.insert({\n            instance: newInstance,\n            position: 'before'\n          });\n        } // middle\n        else {\n            var $block = this.getBlock();\n            var $part = this.app.element.split($block);\n            this.app.block.set($part, 'start');\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.row', {\n    mixins: ['block'],\n    type: 'row',\n    toolbar: {\n      table: {\n        command: 'table.popup',\n        title: '## buttons.table ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<tr>');\n    },\n    getNextRow: function getNextRow() {\n      var row = this.getNext();\n      var $parent = this.$block.parent();\n\n      if (!row && $parent.get().tagName !== 'TABLE') {\n        row = $parent.nextElement().find('tr').first().dataget('instance');\n      }\n\n      return row;\n    },\n    getPrevRow: function getPrevRow() {\n      var row = this.getPrev();\n      var $parent = this.$block.parent();\n\n      if (!row && $parent.get().tagName !== 'TABLE') {\n        row = $parent.prevElement().find('tr').last().dataget('instance');\n      }\n\n      return row;\n    },\n    // handle\n    handleDelete: function handleDelete(e, key, event) {\n      e.preventDefault();\n      return true;\n    },\n    handleArrow: function handleArrow(e, key, event) {\n      e.preventDefault();\n\n      if (event.is('up-left')) {\n        var parentInstance = this.getParent('table');\n        this.app.block.set(parentInstance);\n      } else {\n        var cellInstance = this.getChildFirst('cell');\n        this.app.block.set(cellInstance, 'start');\n      }\n\n      return true;\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var next = this.getNextRow();\n\n      if (next) {\n        this.app.block.set(next);\n      } else {\n        var parentInstance = this.getParent('table');\n        this.app.block.set(parentInstance);\n      }\n\n      return true;\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.table', {\n    mixins: ['block'],\n    type: 'table',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      table: {\n        command: 'table.popup',\n        title: '## buttons.table ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.table.template);\n    },\n    build: function build() {\n      this._buildItems('tr', 'row');\n\n      this._buildItems('td, th', 'cell');\n    },\n    getFirstCell: function getFirstCell() {\n      var $cell = this.$block.find('th, td').first();\n\n      if ($cell.length !== 0) {\n        return $cell.dataget('instance');\n      }\n    }\n  });\n  ArticleEditor.add('block', 'block.variable', {\n    mixins: ['block'],\n    type: 'variable',\n    editable: false,\n    inline: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<span>').addClass(this.opts.variable.classname);\n    },\n    build: function build() {\n      this.$block.addClass(this.opts.variable.classname);\n    }\n  });\n  ArticleEditor.add('block', 'block.form', {\n    mixins: ['block'],\n    type: 'form',\n    create: function create() {\n      return this.dom('<form>');\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    }\n  });\n  ArticleEditor.add('block', 'block.card', {\n    mixins: ['block'],\n    type: 'card',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      },\n      image: {\n        command: 'image.editCard',\n        title: '## buttons.settings ##',\n        observer: 'block.observeCard'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.card.template);\n    },\n    build: function build() {\n      this.data = {\n        'alt': {\n          getter: 'getAlt',\n          setter: 'setAlt'\n        }\n      };\n    },\n    hasImage: function hasImage() {\n      return this.$block.find('img').length !== 0;\n    },\n    getImage: function getImage() {\n      return this.$block.find('img').eq(0);\n    },\n    getAlt: function getAlt() {\n      var $img = this.getImage();\n      var alt = $img.attr('alt');\n      return alt ? alt : '';\n    },\n    setAlt: function setAlt(value) {\n      var $img = this.getImage();\n      $img.attr('alt', value);\n    },\n    setImage: function setImage(data) {\n      var $img = this.getImage();\n      $img.attr('src', data.url);\n\n      if (data.hasOwnProperty('id')) {\n        $img.attr('data-image', data.id);\n      }\n\n      $img.one('load', this.app.editor.adjustHeight.bind(this.app.editor));\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      this.app.insertion.insertBreakline();\n      return true;\n    }\n  });\n  window.ArticleEditor = ArticleEditor; // Data attribute load\n\n  window.addEventListener('load', function () {\n    ArticleEditor('[data-article-editor]');\n  }); // Export for webpack\n\n  if (( false ? undefined : _typeof(module)) === 'object' && module.exports) {\n    module.exports = ArticleEditor;\n    module.exports.ArticleEditor = ArticleEditor;\n  }\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/article-editor/article-editor.js\n");

/***/ }),

/***/ "./resources/plugins/dropzone/js/dropzone.js":
/*!***************************************************!*\
  !*** ./resources/plugins/dropzone/js/dropzone.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/*\r\n *\r\n * More info at [www.dropzonejs.com](http://www.dropzonejs.com)\r\n *\r\n * Copyright (c) 2012, Matias Meno\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\n// The Emitter class provides the ability to call `.on()` on Dropzone to listen\n// to events.\n// It is strongly based on component's emitter class, and I removed the\n// functionality because of the dependency hell with different frameworks.\n\n\nvar Emitter = /*#__PURE__*/function () {\n  function Emitter() {\n    _classCallCheck(this, Emitter);\n  }\n\n  _createClass(Emitter, [{\n    key: \"on\",\n    // Add an event listener for given event\n    value: function on(event, fn) {\n      this._callbacks = this._callbacks || {}; // Create namespace for this event\n\n      if (!this._callbacks[event]) {\n        this._callbacks[event] = [];\n      }\n\n      this._callbacks[event].push(fn);\n\n      return this;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(event) {\n      this._callbacks = this._callbacks || {};\n      var callbacks = this._callbacks[event];\n\n      if (callbacks) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = callbacks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var callback = _step.value;\n            callback.apply(this, args);\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      return this;\n    } // Remove event listener for given event. If fn is not provided, all event\n    // listeners for that event will be removed. If neither is provided, all\n    // event listeners will be removed.\n\n  }, {\n    key: \"off\",\n    value: function off(event, fn) {\n      if (!this._callbacks || arguments.length === 0) {\n        this._callbacks = {};\n        return this;\n      } // specific event\n\n\n      var callbacks = this._callbacks[event];\n\n      if (!callbacks) {\n        return this;\n      } // remove all handlers\n\n\n      if (arguments.length === 1) {\n        delete this._callbacks[event];\n        return this;\n      } // remove specific handler\n\n\n      for (var i = 0; i < callbacks.length; i++) {\n        var callback = callbacks[i];\n\n        if (callback === fn) {\n          callbacks.splice(i, 1);\n          break;\n        }\n      }\n\n      return this;\n    }\n  }]);\n\n  return Emitter;\n}();\n\nvar Dropzone = /*#__PURE__*/function (_Emitter) {\n  _inherits(Dropzone, _Emitter);\n\n  _createClass(Dropzone, null, [{\n    key: \"initClass\",\n    value: function initClass() {\n      // Exposing the emitter class, mainly for tests\n      this.prototype.Emitter = Emitter;\n      /*\r\n       This is a list of all available events you can register on a dropzone object.\r\n        You can register an event handler like this:\r\n        dropzone.on(\"dragEnter\", function() { });\r\n        */\n\n      this.prototype.events = [\"drop\", \"dragstart\", \"dragend\", \"dragenter\", \"dragover\", \"dragleave\", \"addedfile\", \"addedfiles\", \"removedfile\", \"thumbnail\", \"error\", \"errormultiple\", \"processing\", \"processingmultiple\", \"uploadprogress\", \"totaluploadprogress\", \"sending\", \"sendingmultiple\", \"success\", \"successmultiple\", \"canceled\", \"canceledmultiple\", \"complete\", \"completemultiple\", \"reset\", \"maxfilesexceeded\", \"maxfilesreached\", \"queuecomplete\"];\n      this.prototype.defaultOptions = {\n        /**\r\n         * Has to be specified on elements other than form (or when the form\r\n         * doesn't have an `action` attribute). You can also\r\n         * provide a function that will be called with `files` and\r\n         * must return the url (since `v3.12.0`)\r\n         */\n        url: null,\n\n        /**\r\n         * Can be changed to `\"put\"` if necessary. You can also provide a function\r\n         * that will be called with `files` and must return the method (since `v3.12.0`).\r\n         */\n        method: \"post\",\n\n        /**\r\n         * Will be set on the XHRequest.\r\n         */\n        withCredentials: false,\n\n        /**\r\n         * The timeout for the XHR requests in milliseconds (since `v4.4.0`).\r\n         */\n        timeout: 30000,\n\n        /**\r\n         * How many file uploads to process in parallel (See the\r\n         * Enqueuing file uploads documentation section for more info)\r\n         */\n        parallelUploads: 2,\n\n        /**\r\n         * Whether to send multiple files in one request. If\r\n         * this it set to true, then the fallback file input element will\r\n         * have the `multiple` attribute as well. This option will\r\n         * also trigger additional events (like `processingmultiple`). See the events\r\n         * documentation section for more information.\r\n         */\n        uploadMultiple: false,\n\n        /**\r\n         * Whether you want files to be uploaded in chunks to your server. This can't be\r\n         * used in combination with `uploadMultiple`.\r\n         *\r\n         * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.\r\n         */\n        chunking: false,\n\n        /**\r\n         * If `chunking` is enabled, this defines whether **every** file should be chunked,\r\n         * even if the file size is below chunkSize. This means, that the additional chunk\r\n         * form data will be submitted and the `chunksUploaded` callback will be invoked.\r\n         */\n        forceChunking: false,\n\n        /**\r\n         * If `chunking` is `true`, then this defines the chunk size in bytes.\r\n         */\n        chunkSize: 2000000,\n\n        /**\r\n         * If `true`, the individual chunks of a file are being uploaded simultaneously.\r\n         */\n        parallelChunkUploads: false,\n\n        /**\r\n         * Whether a chunk should be retried if it fails.\r\n         */\n        retryChunks: false,\n\n        /**\r\n         * If `retryChunks` is true, how many times should it be retried.\r\n         */\n        retryChunksLimit: 3,\n\n        /**\r\n         * If not `null` defines how many files this Dropzone handles. If it exceeds,\r\n         * the event `maxfilesexceeded` will be called. The dropzone element gets the\r\n         * class `dz-max-files-reached` accordingly so you can provide visual feedback.\r\n         */\n        maxFilesize: 256,\n\n        /**\r\n         * The name of the file param that gets transferred.\r\n         * **NOTE**: If you have the option  `uploadMultiple` set to `true`, then\r\n         * Dropzone will append `[]` to the name.\r\n         */\n        paramName: \"file\",\n\n        /**\r\n         * Whether thumbnails for images should be generated\r\n         */\n        createImageThumbnails: true,\n\n        /**\r\n         * In MB. When the filename exceeds this limit, the thumbnail will not be generated.\r\n         */\n        maxThumbnailFilesize: 10,\n\n        /**\r\n         * If `null`, the ratio of the image will be used to calculate it.\r\n         */\n        thumbnailWidth: 120,\n\n        /**\r\n         * The same as `thumbnailWidth`. If both are null, images will not be resized.\r\n         */\n        thumbnailHeight: 120,\n\n        /**\r\n         * How the images should be scaled down in case both, `thumbnailWidth` and `thumbnailHeight` are provided.\r\n         * Can be either `contain` or `crop`.\r\n         */\n        thumbnailMethod: 'crop',\n\n        /**\r\n         * If set, images will be resized to these dimensions before being **uploaded**.\r\n         * If only one, `resizeWidth` **or** `resizeHeight` is provided, the original aspect\r\n         * ratio of the file will be preserved.\r\n         *\r\n         * The `options.transformFile` function uses these options, so if the `transformFile` function\r\n         * is overridden, these options don't do anything.\r\n         */\n        resizeWidth: null,\n\n        /**\r\n         * See `resizeWidth`.\r\n         */\n        resizeHeight: null,\n\n        /**\r\n         * The mime type of the resized image (before it gets uploaded to the server).\r\n         * If `null` the original mime type will be used. To force jpeg, for example, use `image/jpeg`.\r\n         * See `resizeWidth` for more information.\r\n         */\n        resizeMimeType: null,\n\n        /**\r\n         * The quality of the resized images. See `resizeWidth`.\r\n         */\n        resizeQuality: 0.8,\n\n        /**\r\n         * How the images should be scaled down in case both, `resizeWidth` and `resizeHeight` are provided.\r\n         * Can be either `contain` or `crop`.\r\n         */\n        resizeMethod: 'contain',\n\n        /**\r\n         * The base that is used to calculate the filesize. You can change this to\r\n         * 1024 if you would rather display kibibytes, mebibytes, etc...\r\n         * 1024 is technically incorrect, because `1024 bytes` are `1 kibibyte` not `1 kilobyte`.\r\n         * You can change this to `1024` if you don't care about validity.\r\n         */\n        filesizeBase: 1000,\n\n        /**\r\n         * Can be used to limit the maximum number of files that will be handled by this Dropzone\r\n         */\n        maxFiles: null,\n\n        /**\r\n         * An optional object to send additional headers to the server. Eg:\r\n         * `{ \"My-Awesome-Header\": \"header value\" }`\r\n         */\n        headers: null,\n\n        /**\r\n         * If `true`, the dropzone element itself will be clickable, if `false`\r\n         * nothing will be clickable.\r\n         *\r\n         * You can also pass an HTML element, a CSS selector (for multiple elements)\r\n         * or an array of those. In that case, all of those elements will trigger an\r\n         * upload when clicked.\r\n         */\n        clickable: true,\n\n        /**\r\n         * Whether hidden files in directories should be ignored.\r\n         */\n        ignoreHiddenFiles: true,\n\n        /**\r\n         * The default implementation of `accept` checks the file's mime type or\r\n         * extension against this list. This is a comma separated list of mime\r\n         * types or file extensions.\r\n         *\r\n         * Eg.: `image/*,application/pdf,.psd`\r\n         *\r\n         * If the Dropzone is `clickable` this option will also be used as\r\n         * [`accept`](https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept)\r\n         * parameter on the hidden file input as well.\r\n         */\n        acceptedFiles: null,\n\n        /**\r\n         * **Deprecated!**\r\n         * Use acceptedFiles instead.\r\n         */\n        acceptedMimeTypes: null,\n\n        /**\r\n         * If false, files will be added to the queue but the queue will not be\r\n         * processed automatically.\r\n         * This can be useful if you need some additional user input before sending\r\n         * files (or if you want want all files sent at once).\r\n         * If you're ready to send the file simply call `myDropzone.processQueue()`.\r\n         *\r\n         * See the [enqueuing file uploads](#enqueuing-file-uploads) documentation\r\n         * section for more information.\r\n         */\n        autoProcessQueue: true,\n\n        /**\r\n         * If false, files added to the dropzone will not be queued by default.\r\n         * You'll have to call `enqueueFile(file)` manually.\r\n         */\n        autoQueue: true,\n\n        /**\r\n         * If `true`, this will add a link to every file preview to remove or cancel (if\r\n         * already uploading) the file. The `dictCancelUpload`, `dictCancelUploadConfirmation`\r\n         * and `dictRemoveFile` options are used for the wording.\r\n         */\n        addRemoveLinks: false,\n\n        /**\r\n         * Defines where to display the file previews – if `null` the\r\n         * Dropzone element itself is used. Can be a plain `HTMLElement` or a CSS\r\n         * selector. The element should have the `dropzone-previews` class so\r\n         * the previews are displayed properly.\r\n         */\n        previewsContainer: null,\n\n        /**\r\n         * This is the element the hidden input field (which is used when clicking on the\r\n         * dropzone to trigger file selection) will be appended to. This might\r\n         * be important in case you use frameworks to switch the content of your page.\r\n         *\r\n         * Can be a selector string, or an element directly.\r\n         */\n        hiddenInputContainer: \"body\",\n\n        /**\r\n         * If null, no capture type will be specified\r\n         * If camera, mobile devices will skip the file selection and choose camera\r\n         * If microphone, mobile devices will skip the file selection and choose the microphone\r\n         * If camcorder, mobile devices will skip the file selection and choose the camera in video mode\r\n         * On apple devices multiple must be set to false.  AcceptedFiles may need to\r\n         * be set to an appropriate mime type (e.g. \"image/*\", \"audio/*\", or \"video/*\").\r\n         */\n        capture: null,\n\n        /**\r\n         * **Deprecated**. Use `renameFile` instead.\r\n         */\n        renameFilename: null,\n\n        /**\r\n         * A function that is invoked before the file is uploaded to the server and renames the file.\r\n         * This function gets the `File` as argument and can use the `file.name`. The actual name of the\r\n         * file that gets used during the upload can be accessed through `file.upload.filename`.\r\n         */\n        renameFile: null,\n\n        /**\r\n         * If `true` the fallback will be forced. This is very useful to test your server\r\n         * implementations first and make sure that everything works as\r\n         * expected without dropzone if you experience problems, and to test\r\n         * how your fallbacks will look.\r\n         */\n        forceFallback: false,\n\n        /**\r\n         * The text used before any files are dropped.\r\n         */\n        dictDefaultMessage: \"Drop files here to upload\",\n\n        /**\r\n         * The text that replaces the default message text it the browser is not supported.\r\n         */\n        dictFallbackMessage: \"Your browser does not support drag'n'drop file uploads.\",\n\n        /**\r\n         * The text that will be added before the fallback form.\r\n         * If you provide a  fallback element yourself, or if this option is `null` this will\r\n         * be ignored.\r\n         */\n        dictFallbackText: \"Please use the fallback form below to upload your files like in the olden days.\",\n\n        /**\r\n         * If the filesize is too big.\r\n         * `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.\r\n         */\n        dictFileTooBig: \"File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.\",\n\n        /**\r\n         * If the file doesn't match the file type.\r\n         */\n        dictInvalidFileType: \"You can't upload files of this type.\",\n\n        /**\r\n         * If the server response was invalid.\r\n         * `{{statusCode}}` will be replaced with the servers status code.\r\n         */\n        dictResponseError: \"Server responded with {{statusCode}} code.\",\n\n        /**\r\n         * If `addRemoveLinks` is true, the text to be used for the cancel upload link.\r\n         */\n        dictCancelUpload: \"Cancel upload\",\n\n        /**\r\n         * The text that is displayed if an upload was manually canceled\r\n         */\n        dictUploadCanceled: \"Upload canceled.\",\n\n        /**\r\n         * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.\r\n         */\n        dictCancelUploadConfirmation: \"Are you sure you want to cancel this upload?\",\n\n        /**\r\n         * If `addRemoveLinks` is true, the text to be used to remove a file.\r\n         */\n        dictRemoveFile: \"Remove file\",\n\n        /**\r\n         * If this is not null, then the user will be prompted before removing a file.\r\n         */\n        dictRemoveFileConfirmation: null,\n\n        /**\r\n         * Displayed if `maxFiles` is st and exceeded.\r\n         * The string `{{maxFiles}}` will be replaced by the configuration value.\r\n         */\n        dictMaxFilesExceeded: \"You can not upload any more files.\",\n\n        /**\r\n         * Allows you to translate the different units. Starting with `tb` for terabytes and going down to\r\n         * `b` for bytes.\r\n         */\n        dictFileSizeUnits: {\n          tb: \"TB\",\n          gb: \"GB\",\n          mb: \"MB\",\n          kb: \"KB\",\n          b: \"b\"\n        },\n\n        /**\r\n         * Called when dropzone initialized\r\n         * You can add event listeners here\r\n         */\n        init: function init() {},\n\n        /**\r\n         * Can be an **object** of additional parameters to transfer to the server, **or** a `Function`\r\n         * that gets invoked with the `files`, `xhr` and, if it's a chunked upload, `chunk` arguments. In case\r\n         * of a function, this needs to return a map.\r\n         *\r\n         * The default implementation does nothing for normal uploads, but adds relevant information for\r\n         * chunked uploads.\r\n         *\r\n         * This is the same as adding hidden input fields in the form element.\r\n         */\n        params: function params(files, xhr, chunk) {\n          if (chunk) {\n            return {\n              dzuuid: chunk.file.upload.uuid,\n              dzchunkindex: chunk.index,\n              dztotalfilesize: chunk.file.size,\n              dzchunksize: this.options.chunkSize,\n              dztotalchunkcount: chunk.file.upload.totalChunkCount,\n              dzchunkbyteoffset: chunk.index * this.options.chunkSize\n            };\n          }\n        },\n\n        /**\r\n         * A function that gets a [file](https://developer.mozilla.org/en-US/docs/DOM/File)\r\n         * and a `done` function as parameters.\r\n         *\r\n         * If the done function is invoked without arguments, the file is \"accepted\" and will\r\n         * be processed. If you pass an error message, the file is rejected, and the error\r\n         * message will be displayed.\r\n         * This function will not be called if the file is too big or doesn't match the mime types.\r\n         */\n        accept: function accept(file, done) {\n          return done();\n        },\n\n        /**\r\n         * The callback that will be invoked when all chunks have been uploaded for a file.\r\n         * It gets the file for which the chunks have been uploaded as the first parameter,\r\n         * and the `done` function as second. `done()` needs to be invoked when everything\r\n         * needed to finish the upload process is done.\r\n         */\n        chunksUploaded: function chunksUploaded(file, done) {\n          done();\n        },\n\n        /**\r\n         * Gets called when the browser is not supported.\r\n         * The default implementation shows the fallback input field and adds\r\n         * a text.\r\n         */\n        fallback: function fallback() {\n          // This code should pass in IE7... :(\n          var messageElement;\n          this.element.className = \"\".concat(this.element.className, \" dz-browser-not-supported\");\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = this.element.getElementsByTagName(\"div\")[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var child = _step2.value;\n\n              if (/(^| )dz-message($| )/.test(child.className)) {\n                messageElement = child;\n                child.className = \"dz-message\"; // Removes the 'dz-default' class\n\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                _iterator2[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          if (!messageElement) {\n            messageElement = Dropzone.createElement(\"<div class=\\\"dz-message\\\"><span></span></div>\");\n            this.element.appendChild(messageElement);\n          }\n\n          var span = messageElement.getElementsByTagName(\"span\")[0];\n\n          if (span) {\n            if (span.textContent != null) {\n              span.textContent = this.options.dictFallbackMessage;\n            } else if (span.innerText != null) {\n              span.innerText = this.options.dictFallbackMessage;\n            }\n          }\n\n          return this.element.appendChild(this.getFallbackForm());\n        },\n\n        /**\r\n         * Gets called to calculate the thumbnail dimensions.\r\n         *\r\n         * It gets `file`, `width` and `height` (both may be `null`) as parameters and must return an object containing:\r\n         *\r\n         *  - `srcWidth` & `srcHeight` (required)\r\n         *  - `trgWidth` & `trgHeight` (required)\r\n         *  - `srcX` & `srcY` (optional, default `0`)\r\n         *  - `trgX` & `trgY` (optional, default `0`)\r\n         *\r\n         * Those values are going to be used by `ctx.drawImage()`.\r\n         */\n        resize: function resize(file, width, height, resizeMethod) {\n          var info = {\n            srcX: 0,\n            srcY: 0,\n            srcWidth: file.width,\n            srcHeight: file.height\n          };\n          var srcRatio = file.width / file.height; // Automatically calculate dimensions if not specified\n\n          if (width == null && height == null) {\n            width = info.srcWidth;\n            height = info.srcHeight;\n          } else if (width == null) {\n            width = height * srcRatio;\n          } else if (height == null) {\n            height = width / srcRatio;\n          } // Make sure images aren't upscaled\n\n\n          width = Math.min(width, info.srcWidth);\n          height = Math.min(height, info.srcHeight);\n          var trgRatio = width / height;\n\n          if (info.srcWidth > width || info.srcHeight > height) {\n            // Image is bigger and needs rescaling\n            if (resizeMethod === 'crop') {\n              if (srcRatio > trgRatio) {\n                info.srcHeight = file.height;\n                info.srcWidth = info.srcHeight * trgRatio;\n              } else {\n                info.srcWidth = file.width;\n                info.srcHeight = info.srcWidth / trgRatio;\n              }\n            } else if (resizeMethod === 'contain') {\n              // Method 'contain'\n              if (srcRatio > trgRatio) {\n                height = width / srcRatio;\n              } else {\n                width = height * srcRatio;\n              }\n            } else {\n              throw new Error(\"Unknown resizeMethod '\".concat(resizeMethod, \"'\"));\n            }\n          }\n\n          info.srcX = (file.width - info.srcWidth) / 2;\n          info.srcY = (file.height - info.srcHeight) / 2;\n          info.trgWidth = width;\n          info.trgHeight = height;\n          return info;\n        },\n\n        /**\r\n         * Can be used to transform the file (for example, resize an image if necessary).\r\n         *\r\n         * The default implementation uses `resizeWidth` and `resizeHeight` (if provided) and resizes\r\n         * images according to those dimensions.\r\n         *\r\n         * Gets the `file` as the first parameter, and a `done()` function as the second, that needs\r\n         * to be invoked with the file when the transformation is done.\r\n         */\n        transformFile: function transformFile(file, done) {\n          if ((this.options.resizeWidth || this.options.resizeHeight) && file.type.match(/image.*/)) {\n            return this.resizeImage(file, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, done);\n          } else {\n            return done(file);\n          }\n        },\n\n        /**\r\n         * A string that contains the template used for each dropped\r\n         * file. Change it to fulfill your needs but make sure to properly\r\n         * provide all elements.\r\n         *\r\n         * If you want to use an actual HTML element instead of providing a String\r\n         * as a config option, you could create a div with the id `tpl`,\r\n         * put the template inside it and provide the element like this:\r\n         *\r\n         *     document\r\n         *       .querySelector('#tpl')\r\n         *       .innerHTML\r\n         *\r\n         */\n        previewTemplate: \"<div class=\\\"dz-preview dz-file-preview\\\">\\n  <div class=\\\"dz-image\\\"><img data-dz-thumbnail /></div>\\n  <div class=\\\"dz-details\\\">\\n    <div class=\\\"dz-size\\\"><span data-dz-size></span></div>\\n    <div class=\\\"dz-filename\\\"><span data-dz-name></span></div>\\n  </div>\\n  <div class=\\\"dz-progress\\\"><span class=\\\"dz-upload\\\" data-dz-uploadprogress></span></div>\\n  <div class=\\\"dz-error-message\\\"><span data-dz-errormessage></span></div>\\n  <div class=\\\"dz-success-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n      <title>Check</title>\\n      <g stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <path d=\\\"M23.5,31.8431458 L17.5852419,25.9283877 C16.0248253,24.3679711 13.4910294,24.366835 11.9289322,25.9289322 C10.3700136,27.4878508 10.3665912,30.0234455 11.9283877,31.5852419 L20.4147581,40.0716123 C20.5133999,40.1702541 20.6159315,40.2626649 20.7218615,40.3488435 C22.2835669,41.8725651 24.794234,41.8626202 26.3461564,40.3106978 L43.3106978,23.3461564 C44.8771021,21.7797521 44.8758057,19.2483887 43.3137085,17.6862915 C41.7547899,16.1273729 39.2176035,16.1255422 37.6538436,17.6893022 L23.5,31.8431458 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\" stroke-opacity=\\\"0.198794158\\\" stroke=\\\"#747474\\\" fill-opacity=\\\"0.816519475\\\" fill=\\\"#FFFFFF\\\"></path>\\n      </g>\\n    </svg>\\n  </div>\\n  <div class=\\\"dz-error-mark\\\">\\n    <svg width=\\\"54px\\\" height=\\\"54px\\\" viewBox=\\\"0 0 54 54\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n      <title>Error</title>\\n      <g stroke=\\\"none\\\" stroke-width=\\\"1\\\" fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <g stroke=\\\"#747474\\\" stroke-opacity=\\\"0.198794158\\\" fill=\\\"#FFFFFF\\\" fill-opacity=\\\"0.816519475\\\">\\n          <path d=\\\"M32.6568542,29 L38.3106978,23.3461564 C39.8771021,21.7797521 39.8758057,19.2483887 38.3137085,17.6862915 C36.7547899,16.1273729 34.2176035,16.1255422 32.6538436,17.6893022 L27,23.3431458 L21.3461564,17.6893022 C19.7823965,16.1255422 17.2452101,16.1273729 15.6862915,17.6862915 C14.1241943,19.2483887 14.1228979,21.7797521 15.6893022,23.3461564 L21.3431458,29 L15.6893022,34.6538436 C14.1228979,36.2202479 14.1241943,38.7516113 15.6862915,40.3137085 C17.2452101,41.8726271 19.7823965,41.8744578 21.3461564,40.3106978 L27,34.6568542 L32.6538436,40.3106978 C34.2176035,41.8744578 36.7547899,41.8726271 38.3137085,40.3137085 C39.8758057,38.7516113 39.8771021,36.2202479 38.3106978,34.6538436 L32.6568542,29 Z M27,53 C41.3594035,53 53,41.3594035 53,27 C53,12.6405965 41.3594035,1 27,1 C12.6405965,1 1,12.6405965 1,27 C1,41.3594035 12.6405965,53 27,53 Z\\\"></path>\\n        </g>\\n      </g>\\n    </svg>\\n  </div>\\n</div>\",\n        // END OPTIONS\n        // (Required by the dropzone documentation parser)\n\n        /*\r\n         Those functions register themselves to the events on init and handle all\r\n         the user interface specific stuff. Overwriting them won't break the upload\r\n         but can break the way it's displayed.\r\n         You can overwrite them if you don't like the default behavior. If you just\r\n         want to add an additional event handler, register it on the dropzone object\r\n         and don't overwrite those options.\r\n         */\n        // Those are self explanatory and simply concern the DragnDrop.\n        drop: function drop(e) {\n          return this.element.classList.remove(\"dz-drag-hover\");\n        },\n        dragstart: function dragstart(e) {},\n        dragend: function dragend(e) {\n          return this.element.classList.remove(\"dz-drag-hover\");\n        },\n        dragenter: function dragenter(e) {\n          return this.element.classList.add(\"dz-drag-hover\");\n        },\n        dragover: function dragover(e) {\n          return this.element.classList.add(\"dz-drag-hover\");\n        },\n        dragleave: function dragleave(e) {\n          return this.element.classList.remove(\"dz-drag-hover\");\n        },\n        paste: function paste(e) {},\n        // Called whenever there are no files left in the dropzone anymore, and the\n        // dropzone should be displayed as if in the initial state.\n        reset: function reset() {\n          return this.element.classList.remove(\"dz-started\");\n        },\n        // Called when a file is added to the queue\n        // Receives `file`\n        addedfile: function addedfile(file) {\n          var _this2 = this;\n\n          if (this.element === this.previewsContainer) {\n            this.element.classList.add(\"dz-started\");\n          }\n\n          if (this.previewsContainer) {\n            file.previewElement = Dropzone.createElement(this.options.previewTemplate.trim());\n            file.previewTemplate = file.previewElement; // Backwards compatibility\n\n            this.previewsContainer.appendChild(file.previewElement);\n            var _iteratorNormalCompletion3 = true;\n            var _didIteratorError3 = false;\n            var _iteratorError3 = undefined;\n\n            try {\n              for (var _iterator3 = file.previewElement.querySelectorAll(\"[data-dz-name]\")[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                var node = _step3.value;\n                node.textContent = file.name;\n              }\n            } catch (err) {\n              _didIteratorError3 = true;\n              _iteratorError3 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n                  _iterator3[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError3) {\n                  throw _iteratorError3;\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n              for (var _iterator4 = file.previewElement.querySelectorAll(\"[data-dz-size]\")[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                node = _step4.value;\n                node.innerHTML = this.filesize(file.size);\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n                  _iterator4[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n\n            if (this.options.addRemoveLinks) {\n              file._removeLink = Dropzone.createElement(\"<a class=\\\"dz-remove\\\" href=\\\"javascript:undefined;\\\" data-dz-remove>\".concat(this.options.dictRemoveFile, \"</a>\"));\n              file.previewElement.appendChild(file._removeLink);\n            }\n\n            var removeFileEvent = function removeFileEvent(e) {\n              e.preventDefault();\n              e.stopPropagation();\n\n              if (file.status === Dropzone.UPLOADING) {\n                return Dropzone.confirm(_this2.options.dictCancelUploadConfirmation, function () {\n                  return _this2.removeFile(file);\n                });\n              } else {\n                if (_this2.options.dictRemoveFileConfirmation) {\n                  return Dropzone.confirm(_this2.options.dictRemoveFileConfirmation, function () {\n                    return _this2.removeFile(file);\n                  });\n                } else {\n                  return _this2.removeFile(file);\n                }\n              }\n            };\n\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n\n            try {\n              for (var _iterator5 = file.previewElement.querySelectorAll(\"[data-dz-remove]\")[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var removeLink = _step5.value;\n                removeLink.addEventListener(\"click\", removeFileEvent);\n              }\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n                  _iterator5[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n          }\n        },\n        // Called whenever a file is removed.\n        removedfile: function removedfile(file) {\n          if (file.previewElement != null && file.previewElement.parentNode != null) {\n            file.previewElement.parentNode.removeChild(file.previewElement);\n          }\n\n          return this._updateMaxFilesReachedClass();\n        },\n        // Called when a thumbnail has been generated\n        // Receives `file` and `dataUrl`\n        thumbnail: function thumbnail(file, dataUrl) {\n          if (file.previewElement) {\n            file.previewElement.classList.remove(\"dz-file-preview\");\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n              for (var _iterator6 = file.previewElement.querySelectorAll(\"[data-dz-thumbnail]\")[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var thumbnailElement = _step6.value;\n                thumbnailElement.alt = file.name;\n                thumbnailElement.src = dataUrl;\n              }\n            } catch (err) {\n              _didIteratorError6 = true;\n              _iteratorError6 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion6 && _iterator6[\"return\"] != null) {\n                  _iterator6[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError6) {\n                  throw _iteratorError6;\n                }\n              }\n            }\n\n            return setTimeout(function () {\n              return file.previewElement.classList.add(\"dz-image-preview\");\n            }, 1);\n          }\n        },\n        // Called whenever an error occurs\n        // Receives `file` and `message`\n        error: function error(file, message) {\n          if (file.previewElement) {\n            file.previewElement.classList.add(\"dz-error\");\n\n            if (typeof message !== \"String\" && message.error) {\n              message = message.error;\n            }\n\n            var _iteratorNormalCompletion7 = true;\n            var _didIteratorError7 = false;\n            var _iteratorError7 = undefined;\n\n            try {\n              for (var _iterator7 = file.previewElement.querySelectorAll(\"[data-dz-errormessage]\")[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                var node = _step7.value;\n                node.textContent = message;\n              }\n            } catch (err) {\n              _didIteratorError7 = true;\n              _iteratorError7 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion7 && _iterator7[\"return\"] != null) {\n                  _iterator7[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError7) {\n                  throw _iteratorError7;\n                }\n              }\n            }\n          }\n        },\n        errormultiple: function errormultiple() {},\n        // Called when a file gets processed. Since there is a cue, not all added\n        // files are processed immediately.\n        // Receives `file`\n        processing: function processing(file) {\n          if (file.previewElement) {\n            file.previewElement.classList.add(\"dz-processing\");\n\n            if (file._removeLink) {\n              return file._removeLink.innerHTML = this.options.dictCancelUpload;\n            }\n          }\n        },\n        processingmultiple: function processingmultiple() {},\n        // Called whenever the upload progress gets updated.\n        // Receives `file`, `progress` (percentage 0-100) and `bytesSent`.\n        // To get the total number of bytes of the file, use `file.size`\n        uploadprogress: function uploadprogress(file, progress, bytesSent) {\n          if (file.previewElement) {\n            var _iteratorNormalCompletion8 = true;\n            var _didIteratorError8 = false;\n            var _iteratorError8 = undefined;\n\n            try {\n              for (var _iterator8 = file.previewElement.querySelectorAll(\"[data-dz-uploadprogress]\")[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                var node = _step8.value;\n                node.nodeName === 'PROGRESS' ? node.value = progress : node.style.width = \"\".concat(progress, \"%\");\n              }\n            } catch (err) {\n              _didIteratorError8 = true;\n              _iteratorError8 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion8 && _iterator8[\"return\"] != null) {\n                  _iterator8[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError8) {\n                  throw _iteratorError8;\n                }\n              }\n            }\n          }\n        },\n        // Called whenever the total upload progress gets updated.\n        // Called with totalUploadProgress (0-100), totalBytes and totalBytesSent\n        totaluploadprogress: function totaluploadprogress() {},\n        // Called just before the file is sent. Gets the `xhr` object as second\n        // parameter, so you can modify it (for example to add a CSRF token) and a\n        // `formData` object to add additional information.\n        sending: function sending() {},\n        sendingmultiple: function sendingmultiple() {},\n        // When the complete upload is finished and successful\n        // Receives `file`\n        success: function success(file) {\n          if (file.previewElement) {\n            return file.previewElement.classList.add(\"dz-success\");\n          }\n        },\n        successmultiple: function successmultiple() {},\n        // When the upload is canceled.\n        canceled: function canceled(file) {\n          return this.emit(\"error\", file, this.options.dictUploadCanceled);\n        },\n        canceledmultiple: function canceledmultiple() {},\n        // When the upload is finished, either with success or an error.\n        // Receives `file`\n        complete: function complete(file) {\n          if (file._removeLink) {\n            file._removeLink.innerHTML = this.options.dictRemoveFile;\n          }\n\n          if (file.previewElement) {\n            return file.previewElement.classList.add(\"dz-complete\");\n          }\n        },\n        completemultiple: function completemultiple() {},\n        maxfilesexceeded: function maxfilesexceeded() {},\n        maxfilesreached: function maxfilesreached() {},\n        queuecomplete: function queuecomplete() {},\n        addedfiles: function addedfiles() {}\n      };\n      this.prototype._thumbnailQueue = [];\n      this.prototype._processingThumbnail = false;\n    } // global utility\n\n  }, {\n    key: \"extend\",\n    value: function extend(target) {\n      for (var _len2 = arguments.length, objects = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        objects[_key2 - 1] = arguments[_key2];\n      }\n\n      for (var _i = 0, _objects = objects; _i < _objects.length; _i++) {\n        var object = _objects[_i];\n\n        for (var key in object) {\n          var val = object[key];\n          target[key] = val;\n        }\n      }\n\n      return target;\n    }\n  }]);\n\n  function Dropzone(el, options) {\n    var _this;\n\n    _classCallCheck(this, Dropzone);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropzone).call(this));\n    var fallback, left;\n    _this.element = el; // For backwards compatibility since the version was in the prototype previously\n\n    _this.version = Dropzone.version;\n    _this.defaultOptions.previewTemplate = _this.defaultOptions.previewTemplate.replace(/\\n*/g, \"\");\n    _this.clickableElements = [];\n    _this.listeners = [];\n    _this.files = []; // All files\n\n    if (typeof _this.element === \"string\") {\n      _this.element = document.querySelector(_this.element);\n    } // Not checking if instance of HTMLElement or Element since IE9 is extremely weird.\n\n\n    if (!_this.element || _this.element.nodeType == null) {\n      throw new Error(\"Invalid dropzone element.\");\n    }\n\n    if (_this.element.dropzone) {\n      throw new Error(\"Dropzone already attached.\");\n    } // Now add this dropzone to the instances.\n\n\n    Dropzone.instances.push(_assertThisInitialized(_this)); // Put the dropzone inside the element itself.\n\n    _this.element.dropzone = _assertThisInitialized(_this);\n    var elementOptions = (left = Dropzone.optionsForElement(_this.element)) != null ? left : {};\n    _this.options = Dropzone.extend({}, _this.defaultOptions, elementOptions, options != null ? options : {}); // If the browser failed, just call the fallback and leave\n\n    if (_this.options.forceFallback || !Dropzone.isBrowserSupported()) {\n      return _possibleConstructorReturn(_this, _this.options.fallback.call(_assertThisInitialized(_this)));\n    } // @options.url = @element.getAttribute \"action\" unless @options.url?\n\n\n    if (_this.options.url == null) {\n      _this.options.url = _this.element.getAttribute(\"action\");\n    }\n\n    if (!_this.options.url) {\n      throw new Error(\"No URL provided.\");\n    }\n\n    if (_this.options.acceptedFiles && _this.options.acceptedMimeTypes) {\n      throw new Error(\"You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.\");\n    }\n\n    if (_this.options.uploadMultiple && _this.options.chunking) {\n      throw new Error('You cannot set both: uploadMultiple and chunking.');\n    } // Backwards compatibility\n\n\n    if (_this.options.acceptedMimeTypes) {\n      _this.options.acceptedFiles = _this.options.acceptedMimeTypes;\n      delete _this.options.acceptedMimeTypes;\n    } // Backwards compatibility\n\n\n    if (_this.options.renameFilename != null) {\n      _this.options.renameFile = function (file) {\n        return _this.options.renameFilename.call(_assertThisInitialized(_this), file.name, file);\n      };\n    }\n\n    _this.options.method = _this.options.method.toUpperCase();\n\n    if ((fallback = _this.getExistingFallback()) && fallback.parentNode) {\n      // Remove the fallback\n      fallback.parentNode.removeChild(fallback);\n    } // Display previews in the previewsContainer element or the Dropzone element unless explicitly set to false\n\n\n    if (_this.options.previewsContainer !== false) {\n      if (_this.options.previewsContainer) {\n        _this.previewsContainer = Dropzone.getElement(_this.options.previewsContainer, \"previewsContainer\");\n      } else {\n        _this.previewsContainer = _this.element;\n      }\n    }\n\n    if (_this.options.clickable) {\n      if (_this.options.clickable === true) {\n        _this.clickableElements = [_this.element];\n      } else {\n        _this.clickableElements = Dropzone.getElements(_this.options.clickable, \"clickable\");\n      }\n    }\n\n    _this.init();\n\n    return _this;\n  } // Returns all files that have been accepted\n\n\n  _createClass(Dropzone, [{\n    key: \"getAcceptedFiles\",\n    value: function getAcceptedFiles() {\n      return this.files.filter(function (file) {\n        return file.accepted;\n      }).map(function (file) {\n        return file;\n      });\n    } // Returns all files that have been rejected\n    // Not sure when that's going to be useful, but added for completeness.\n\n  }, {\n    key: \"getRejectedFiles\",\n    value: function getRejectedFiles() {\n      return this.files.filter(function (file) {\n        return !file.accepted;\n      }).map(function (file) {\n        return file;\n      });\n    }\n  }, {\n    key: \"getFilesWithStatus\",\n    value: function getFilesWithStatus(status) {\n      return this.files.filter(function (file) {\n        return file.status === status;\n      }).map(function (file) {\n        return file;\n      });\n    } // Returns all files that are in the queue\n\n  }, {\n    key: \"getQueuedFiles\",\n    value: function getQueuedFiles() {\n      return this.getFilesWithStatus(Dropzone.QUEUED);\n    }\n  }, {\n    key: \"getUploadingFiles\",\n    value: function getUploadingFiles() {\n      return this.getFilesWithStatus(Dropzone.UPLOADING);\n    }\n  }, {\n    key: \"getAddedFiles\",\n    value: function getAddedFiles() {\n      return this.getFilesWithStatus(Dropzone.ADDED);\n    } // Files that are either queued or uploading\n\n  }, {\n    key: \"getActiveFiles\",\n    value: function getActiveFiles() {\n      return this.files.filter(function (file) {\n        return file.status === Dropzone.UPLOADING || file.status === Dropzone.QUEUED;\n      }).map(function (file) {\n        return file;\n      });\n    } // The function that gets called when Dropzone is initialized. You\n    // can (and should) setup event listeners inside this function.\n\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this3 = this; // In case it isn't set already\n\n\n      if (this.element.tagName === \"form\") {\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n      }\n\n      if (this.element.classList.contains(\"dropzone\") && !this.element.querySelector(\".dz-message\")) {\n        this.element.appendChild(Dropzone.createElement(\"<div class=\\\"dz-default dz-message\\\"><button class=\\\"dz-button\\\" type=\\\"button\\\">\".concat(this.options.dictDefaultMessage, \"</button></div>\")));\n      }\n\n      if (this.clickableElements.length) {\n        var setupHiddenFileInput = function setupHiddenFileInput() {\n          if (_this3.hiddenFileInput) {\n            _this3.hiddenFileInput.parentNode.removeChild(_this3.hiddenFileInput);\n          }\n\n          _this3.hiddenFileInput = document.createElement(\"input\");\n\n          _this3.hiddenFileInput.setAttribute(\"type\", \"file\");\n\n          if (_this3.options.maxFiles === null || _this3.options.maxFiles > 1) {\n            _this3.hiddenFileInput.setAttribute(\"multiple\", \"multiple\");\n          }\n\n          _this3.hiddenFileInput.className = \"dz-hidden-input\";\n\n          if (_this3.options.acceptedFiles !== null) {\n            _this3.hiddenFileInput.setAttribute(\"accept\", _this3.options.acceptedFiles);\n          }\n\n          if (_this3.options.capture !== null) {\n            _this3.hiddenFileInput.setAttribute(\"capture\", _this3.options.capture);\n          } // Not setting `display=\"none\"` because some browsers don't accept clicks\n          // on elements that aren't displayed.\n\n\n          _this3.hiddenFileInput.style.visibility = \"hidden\";\n          _this3.hiddenFileInput.style.position = \"absolute\";\n          _this3.hiddenFileInput.style.top = \"0\";\n          _this3.hiddenFileInput.style.left = \"0\";\n          _this3.hiddenFileInput.style.height = \"0\";\n          _this3.hiddenFileInput.style.width = \"0\";\n          Dropzone.getElement(_this3.options.hiddenInputContainer, 'hiddenInputContainer').appendChild(_this3.hiddenFileInput);\n          return _this3.hiddenFileInput.addEventListener(\"change\", function () {\n            var files = _this3.hiddenFileInput.files;\n\n            if (files.length) {\n              var _iteratorNormalCompletion9 = true;\n              var _didIteratorError9 = false;\n              var _iteratorError9 = undefined;\n\n              try {\n                for (var _iterator9 = files[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n                  var file = _step9.value;\n\n                  _this3.addFile(file);\n                }\n              } catch (err) {\n                _didIteratorError9 = true;\n                _iteratorError9 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion9 && _iterator9[\"return\"] != null) {\n                    _iterator9[\"return\"]();\n                  }\n                } finally {\n                  if (_didIteratorError9) {\n                    throw _iteratorError9;\n                  }\n                }\n              }\n            }\n\n            _this3.emit(\"addedfiles\", files);\n\n            return setupHiddenFileInput();\n          });\n        };\n\n        setupHiddenFileInput();\n      }\n\n      this.URL = window.URL !== null ? window.URL : window.webkitURL; // Setup all event listeners on the Dropzone object itself.\n      // They're not in @setupEventListeners() because they shouldn't be removed\n      // again when the dropzone gets disabled.\n\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = this.events[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var eventName = _step10.value;\n          this.on(eventName, this.options[eventName]);\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10[\"return\"] != null) {\n            _iterator10[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      this.on(\"uploadprogress\", function () {\n        return _this3.updateTotalUploadProgress();\n      });\n      this.on(\"removedfile\", function () {\n        return _this3.updateTotalUploadProgress();\n      });\n      this.on(\"canceled\", function (file) {\n        return _this3.emit(\"complete\", file);\n      }); // Emit a `queuecomplete` event if all files finished uploading.\n\n      this.on(\"complete\", function (file) {\n        if (_this3.getAddedFiles().length === 0 && _this3.getUploadingFiles().length === 0 && _this3.getQueuedFiles().length === 0) {\n          // This needs to be deferred so that `queuecomplete` really triggers after `complete`\n          return setTimeout(function () {\n            return _this3.emit(\"queuecomplete\");\n          }, 0);\n        }\n      });\n\n      var containsFiles = function containsFiles(e) {\n        return e.dataTransfer.types && e.dataTransfer.types.some(function (type) {\n          return type == \"Files\";\n        });\n      };\n\n      var noPropagation = function noPropagation(e) {\n        // If there are no files, we don't want to stop\n        // propagation so we don't interfere with other\n        // drag and drop behaviour.\n        if (!containsFiles(e)) return;\n        e.stopPropagation();\n\n        if (e.preventDefault) {\n          return e.preventDefault();\n        } else {\n          return e.returnValue = false;\n        }\n      }; // Create the listeners\n\n\n      this.listeners = [{\n        element: this.element,\n        events: {\n          \"dragstart\": function dragstart(e) {\n            return _this3.emit(\"dragstart\", e);\n          },\n          \"dragenter\": function dragenter(e) {\n            noPropagation(e);\n            return _this3.emit(\"dragenter\", e);\n          },\n          \"dragover\": function dragover(e) {\n            // Makes it possible to drag files from chrome's download bar\n            // http://stackoverflow.com/questions/19526430/drag-and-drop-file-uploads-from-chrome-downloads-bar\n            // Try is required to prevent bug in Internet Explorer 11 (SCRIPT65535 exception)\n            var efct;\n\n            try {\n              efct = e.dataTransfer.effectAllowed;\n            } catch (error) {}\n\n            e.dataTransfer.dropEffect = 'move' === efct || 'linkMove' === efct ? 'move' : 'copy';\n            noPropagation(e);\n            return _this3.emit(\"dragover\", e);\n          },\n          \"dragleave\": function dragleave(e) {\n            return _this3.emit(\"dragleave\", e);\n          },\n          \"drop\": function drop(e) {\n            noPropagation(e);\n            return _this3.drop(e);\n          },\n          \"dragend\": function dragend(e) {\n            return _this3.emit(\"dragend\", e);\n          }\n        } // This is disabled right now, because the browsers don't implement it properly.\n        // \"paste\": (e) =>\n        //   noPropagation e\n        //   @paste e\n\n      }];\n      this.clickableElements.forEach(function (clickableElement) {\n        return _this3.listeners.push({\n          element: clickableElement,\n          events: {\n            \"click\": function click(evt) {\n              // Only the actual dropzone or the message element should trigger file selection\n              if (clickableElement !== _this3.element || evt.target === _this3.element || Dropzone.elementInside(evt.target, _this3.element.querySelector(\".dz-message\"))) {\n                _this3.hiddenFileInput.click(); // Forward the click\n\n              }\n\n              return true;\n            }\n          }\n        });\n      });\n      this.enable();\n      return this.options.init.call(this);\n    } // Not fully tested yet\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.disable();\n      this.removeAllFiles(true);\n\n      if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : undefined) {\n        this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);\n        this.hiddenFileInput = null;\n      }\n\n      delete this.element.dropzone;\n      return Dropzone.instances.splice(Dropzone.instances.indexOf(this), 1);\n    }\n  }, {\n    key: \"updateTotalUploadProgress\",\n    value: function updateTotalUploadProgress() {\n      var totalUploadProgress;\n      var totalBytesSent = 0;\n      var totalBytes = 0;\n      var activeFiles = this.getActiveFiles();\n\n      if (activeFiles.length) {\n        var _iteratorNormalCompletion11 = true;\n        var _didIteratorError11 = false;\n        var _iteratorError11 = undefined;\n\n        try {\n          for (var _iterator11 = this.getActiveFiles()[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n            var file = _step11.value;\n            totalBytesSent += file.upload.bytesSent;\n            totalBytes += file.upload.total;\n          }\n        } catch (err) {\n          _didIteratorError11 = true;\n          _iteratorError11 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion11 && _iterator11[\"return\"] != null) {\n              _iterator11[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError11) {\n              throw _iteratorError11;\n            }\n          }\n        }\n\n        totalUploadProgress = 100 * totalBytesSent / totalBytes;\n      } else {\n        totalUploadProgress = 100;\n      }\n\n      return this.emit(\"totaluploadprogress\", totalUploadProgress, totalBytes, totalBytesSent);\n    } // @options.paramName can be a function taking one parameter rather than a string.\n    // A parameter name for a file is obtained simply by calling this with an index number.\n\n  }, {\n    key: \"_getParamName\",\n    value: function _getParamName(n) {\n      if (typeof this.options.paramName === \"function\") {\n        return this.options.paramName(n);\n      } else {\n        return \"\".concat(this.options.paramName).concat(this.options.uploadMultiple ? \"[\".concat(n, \"]\") : \"\");\n      }\n    } // If @options.renameFile is a function,\n    // the function will be used to rename the file.name before appending it to the formData\n\n  }, {\n    key: \"_renameFile\",\n    value: function _renameFile(file) {\n      if (typeof this.options.renameFile !== \"function\") {\n        return file.name;\n      }\n\n      return this.options.renameFile(file);\n    } // Returns a form that can be used as fallback if the browser does not support DragnDrop\n    //\n    // If the dropzone is already a form, only the input field and button are returned. Otherwise a complete form element is provided.\n    // This code has to pass in IE7 :(\n\n  }, {\n    key: \"getFallbackForm\",\n    value: function getFallbackForm() {\n      var existingFallback, form;\n\n      if (existingFallback = this.getExistingFallback()) {\n        return existingFallback;\n      }\n\n      var fieldsString = \"<div class=\\\"dz-fallback\\\">\";\n\n      if (this.options.dictFallbackText) {\n        fieldsString += \"<p>\".concat(this.options.dictFallbackText, \"</p>\");\n      }\n\n      fieldsString += \"<input type=\\\"file\\\" name=\\\"\".concat(this._getParamName(0), \"\\\" \").concat(this.options.uploadMultiple ? 'multiple=\"multiple\"' : undefined, \" /><input type=\\\"submit\\\" value=\\\"Upload!\\\"></div>\");\n      var fields = Dropzone.createElement(fieldsString);\n\n      if (this.element.tagName !== \"FORM\") {\n        form = Dropzone.createElement(\"<form action=\\\"\".concat(this.options.url, \"\\\" enctype=\\\"multipart/form-data\\\" method=\\\"\").concat(this.options.method, \"\\\"></form>\"));\n        form.appendChild(fields);\n      } else {\n        // Make sure that the enctype and method attributes are set properly\n        this.element.setAttribute(\"enctype\", \"multipart/form-data\");\n        this.element.setAttribute(\"method\", this.options.method);\n      }\n\n      return form != null ? form : fields;\n    } // Returns the fallback elements if they exist already\n    //\n    // This code has to pass in IE7 :(\n\n  }, {\n    key: \"getExistingFallback\",\n    value: function getExistingFallback() {\n      var getFallback = function getFallback(elements) {\n        var _iteratorNormalCompletion12 = true;\n        var _didIteratorError12 = false;\n        var _iteratorError12 = undefined;\n\n        try {\n          for (var _iterator12 = elements[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n            var el = _step12.value;\n\n            if (/(^| )fallback($| )/.test(el.className)) {\n              return el;\n            }\n          }\n        } catch (err) {\n          _didIteratorError12 = true;\n          _iteratorError12 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion12 && _iterator12[\"return\"] != null) {\n              _iterator12[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError12) {\n              throw _iteratorError12;\n            }\n          }\n        }\n      };\n\n      for (var _i2 = 0, _arr = [\"div\", \"form\"]; _i2 < _arr.length; _i2++) {\n        var tagName = _arr[_i2];\n        var fallback;\n\n        if (fallback = getFallback(this.element.getElementsByTagName(tagName))) {\n          return fallback;\n        }\n      }\n    } // Activates all listeners stored in @listeners\n\n  }, {\n    key: \"setupEventListeners\",\n    value: function setupEventListeners() {\n      return this.listeners.map(function (elementListeners) {\n        return function () {\n          var result = [];\n\n          for (var event in elementListeners.events) {\n            var listener = elementListeners.events[event];\n            result.push(elementListeners.element.addEventListener(event, listener, false));\n          }\n\n          return result;\n        }();\n      });\n    } // Deactivates all listeners stored in @listeners\n\n  }, {\n    key: \"removeEventListeners\",\n    value: function removeEventListeners() {\n      return this.listeners.map(function (elementListeners) {\n        return function () {\n          var result = [];\n\n          for (var event in elementListeners.events) {\n            var listener = elementListeners.events[event];\n            result.push(elementListeners.element.removeEventListener(event, listener, false));\n          }\n\n          return result;\n        }();\n      });\n    } // Removes all event listeners and cancels all files in the queue or being processed.\n\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      var _this4 = this;\n\n      this.clickableElements.forEach(function (element) {\n        return element.classList.remove(\"dz-clickable\");\n      });\n      this.removeEventListeners();\n      this.disabled = true;\n      return this.files.map(function (file) {\n        return _this4.cancelUpload(file);\n      });\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      delete this.disabled;\n      this.clickableElements.forEach(function (element) {\n        return element.classList.add(\"dz-clickable\");\n      });\n      return this.setupEventListeners();\n    } // Returns a nicely formatted filesize\n\n  }, {\n    key: \"filesize\",\n    value: function filesize(size) {\n      var selectedSize = 0;\n      var selectedUnit = \"b\";\n\n      if (size > 0) {\n        var units = ['tb', 'gb', 'mb', 'kb', 'b'];\n\n        for (var i = 0; i < units.length; i++) {\n          var unit = units[i];\n          var cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;\n\n          if (size >= cutoff) {\n            selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);\n            selectedUnit = unit;\n            break;\n          }\n        }\n\n        selectedSize = Math.round(10 * selectedSize) / 10; // Cutting of digits\n      }\n\n      return \"<strong>\".concat(selectedSize, \"</strong> \").concat(this.options.dictFileSizeUnits[selectedUnit]);\n    } // Adds or removes the `dz-max-files-reached` class from the form.\n\n  }, {\n    key: \"_updateMaxFilesReachedClass\",\n    value: function _updateMaxFilesReachedClass() {\n      if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        if (this.getAcceptedFiles().length === this.options.maxFiles) {\n          this.emit('maxfilesreached', this.files);\n        }\n\n        return this.element.classList.add(\"dz-max-files-reached\");\n      } else {\n        return this.element.classList.remove(\"dz-max-files-reached\");\n      }\n    }\n  }, {\n    key: \"drop\",\n    value: function drop(e) {\n      if (!e.dataTransfer) {\n        return;\n      }\n\n      this.emit(\"drop\", e); // Convert the FileList to an Array\n      // This is necessary for IE11\n\n      var files = [];\n\n      for (var i = 0; i < e.dataTransfer.files.length; i++) {\n        files[i] = e.dataTransfer.files[i];\n      } // Even if it's a folder, files.length will contain the folders.\n\n\n      if (files.length) {\n        var items = e.dataTransfer.items;\n\n        if (items && items.length && items[0].webkitGetAsEntry != null) {\n          // The browser supports dropping of folders, so handle items instead of files\n          this._addFilesFromItems(items);\n        } else {\n          this.handleFiles(files);\n        }\n      }\n\n      this.emit(\"addedfiles\", files);\n    }\n  }, {\n    key: \"paste\",\n    value: function paste(e) {\n      if (__guard__(e != null ? e.clipboardData : undefined, function (x) {\n        return x.items;\n      }) == null) {\n        return;\n      }\n\n      this.emit(\"paste\", e);\n      var items = e.clipboardData.items;\n\n      if (items.length) {\n        return this._addFilesFromItems(items);\n      }\n    }\n  }, {\n    key: \"handleFiles\",\n    value: function handleFiles(files) {\n      var _iteratorNormalCompletion13 = true;\n      var _didIteratorError13 = false;\n      var _iteratorError13 = undefined;\n\n      try {\n        for (var _iterator13 = files[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n          var file = _step13.value;\n          this.addFile(file);\n        }\n      } catch (err) {\n        _didIteratorError13 = true;\n        _iteratorError13 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion13 && _iterator13[\"return\"] != null) {\n            _iterator13[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError13) {\n            throw _iteratorError13;\n          }\n        }\n      }\n    } // When a folder is dropped (or files are pasted), items must be handled\n    // instead of files.\n\n  }, {\n    key: \"_addFilesFromItems\",\n    value: function _addFilesFromItems(items) {\n      var _this5 = this;\n\n      return function () {\n        var result = [];\n        var _iteratorNormalCompletion14 = true;\n        var _didIteratorError14 = false;\n        var _iteratorError14 = undefined;\n\n        try {\n          for (var _iterator14 = items[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n            var item = _step14.value;\n            var entry;\n\n            if (item.webkitGetAsEntry != null && (entry = item.webkitGetAsEntry())) {\n              if (entry.isFile) {\n                result.push(_this5.addFile(item.getAsFile()));\n              } else if (entry.isDirectory) {\n                // Append all files from that directory to files\n                result.push(_this5._addFilesFromDirectory(entry, entry.name));\n              } else {\n                result.push(undefined);\n              }\n            } else if (item.getAsFile != null) {\n              if (item.kind == null || item.kind === \"file\") {\n                result.push(_this5.addFile(item.getAsFile()));\n              } else {\n                result.push(undefined);\n              }\n            } else {\n              result.push(undefined);\n            }\n          }\n        } catch (err) {\n          _didIteratorError14 = true;\n          _iteratorError14 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion14 && _iterator14[\"return\"] != null) {\n              _iterator14[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError14) {\n              throw _iteratorError14;\n            }\n          }\n        }\n\n        return result;\n      }();\n    } // Goes through the directory, and adds each file it finds recursively\n\n  }, {\n    key: \"_addFilesFromDirectory\",\n    value: function _addFilesFromDirectory(directory, path) {\n      var _this6 = this;\n\n      var dirReader = directory.createReader();\n\n      var errorHandler = function errorHandler(error) {\n        return __guardMethod__(console, 'log', function (o) {\n          return o.log(error);\n        });\n      };\n\n      var readEntries = function readEntries() {\n        return dirReader.readEntries(function (entries) {\n          if (entries.length > 0) {\n            var _iteratorNormalCompletion15 = true;\n            var _didIteratorError15 = false;\n            var _iteratorError15 = undefined;\n\n            try {\n              for (var _iterator15 = entries[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n                var entry = _step15.value;\n\n                if (entry.isFile) {\n                  entry.file(function (file) {\n                    if (_this6.options.ignoreHiddenFiles && file.name.substring(0, 1) === '.') {\n                      return;\n                    }\n\n                    file.fullPath = \"\".concat(path, \"/\").concat(file.name);\n                    return _this6.addFile(file);\n                  });\n                } else if (entry.isDirectory) {\n                  _this6._addFilesFromDirectory(entry, \"\".concat(path, \"/\").concat(entry.name));\n                }\n              } // Recursively call readEntries() again, since browser only handle\n              // the first 100 entries.\n              // See: https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReader#readEntries\n\n            } catch (err) {\n              _didIteratorError15 = true;\n              _iteratorError15 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion15 && _iterator15[\"return\"] != null) {\n                  _iterator15[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError15) {\n                  throw _iteratorError15;\n                }\n              }\n            }\n\n            readEntries();\n          }\n\n          return null;\n        }, errorHandler);\n      };\n\n      return readEntries();\n    } // If `done()` is called without argument the file is accepted\n    // If you call it with an error message, the file is rejected\n    // (This allows for asynchronous validation)\n    //\n    // This function checks the filesize, and if the file.type passes the\n    // `acceptedFiles` check.\n\n  }, {\n    key: \"accept\",\n    value: function accept(file, done) {\n      if (this.options.maxFilesize && file.size > this.options.maxFilesize * 1024 * 1024) {\n        done(this.options.dictFileTooBig.replace(\"{{filesize}}\", Math.round(file.size / 1024 / 10.24) / 100).replace(\"{{maxFilesize}}\", this.options.maxFilesize));\n      } else if (!Dropzone.isValidFile(file, this.options.acceptedFiles)) {\n        done(this.options.dictInvalidFileType);\n      } else if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {\n        done(this.options.dictMaxFilesExceeded.replace(\"{{maxFiles}}\", this.options.maxFiles));\n        this.emit(\"maxfilesexceeded\", file);\n      } else {\n        this.options.accept.call(this, file, done);\n      }\n    }\n  }, {\n    key: \"addFile\",\n    value: function addFile(file) {\n      var _this7 = this;\n\n      file.upload = {\n        uuid: Dropzone.uuidv4(),\n        progress: 0,\n        // Setting the total upload size to file.size for the beginning\n        // It's actual different than the size to be transmitted.\n        total: file.size,\n        bytesSent: 0,\n        filename: this._renameFile(file) // Not setting chunking information here, because the acutal data — and\n        // thus the chunks — might change if `options.transformFile` is set\n        // and does something to the data.\n\n      };\n      this.files.push(file);\n      file.status = Dropzone.ADDED;\n      this.emit(\"addedfile\", file);\n\n      this._enqueueThumbnail(file);\n\n      this.accept(file, function (error) {\n        if (error) {\n          file.accepted = false;\n\n          _this7._errorProcessing([file], error); // Will set the file.status\n\n        } else {\n          file.accepted = true;\n\n          if (_this7.options.autoQueue) {\n            _this7.enqueueFile(file);\n          } // Will set .accepted = true\n\n        }\n\n        _this7._updateMaxFilesReachedClass();\n      });\n    } // Wrapper for enqueueFile\n\n  }, {\n    key: \"enqueueFiles\",\n    value: function enqueueFiles(files) {\n      var _iteratorNormalCompletion16 = true;\n      var _didIteratorError16 = false;\n      var _iteratorError16 = undefined;\n\n      try {\n        for (var _iterator16 = files[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n          var file = _step16.value;\n          this.enqueueFile(file);\n        }\n      } catch (err) {\n        _didIteratorError16 = true;\n        _iteratorError16 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion16 && _iterator16[\"return\"] != null) {\n            _iterator16[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError16) {\n            throw _iteratorError16;\n          }\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"enqueueFile\",\n    value: function enqueueFile(file) {\n      var _this8 = this;\n\n      if (file.status === Dropzone.ADDED && file.accepted === true) {\n        file.status = Dropzone.QUEUED;\n\n        if (this.options.autoProcessQueue) {\n          return setTimeout(function () {\n            return _this8.processQueue();\n          }, 0); // Deferring the call\n        }\n      } else {\n        throw new Error(\"This file can't be queued because it has already been processed or was rejected.\");\n      }\n    }\n  }, {\n    key: \"_enqueueThumbnail\",\n    value: function _enqueueThumbnail(file) {\n      var _this9 = this;\n\n      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {\n        this._thumbnailQueue.push(file);\n\n        return setTimeout(function () {\n          return _this9._processThumbnailQueue();\n        }, 0); // Deferring the call\n      }\n    }\n  }, {\n    key: \"_processThumbnailQueue\",\n    value: function _processThumbnailQueue() {\n      var _this10 = this;\n\n      if (this._processingThumbnail || this._thumbnailQueue.length === 0) {\n        return;\n      }\n\n      this._processingThumbnail = true;\n\n      var file = this._thumbnailQueue.shift();\n\n      return this.createThumbnail(file, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, function (dataUrl) {\n        _this10.emit(\"thumbnail\", file, dataUrl);\n\n        _this10._processingThumbnail = false;\n        return _this10._processThumbnailQueue();\n      });\n    } // Can be called by the user to remove a file\n\n  }, {\n    key: \"removeFile\",\n    value: function removeFile(file) {\n      if (file.status === Dropzone.UPLOADING) {\n        this.cancelUpload(file);\n      }\n\n      this.files = without(this.files, file);\n      this.emit(\"removedfile\", file);\n\n      if (this.files.length === 0) {\n        return this.emit(\"reset\");\n      }\n    } // Removes all files that aren't currently processed from the list\n\n  }, {\n    key: \"removeAllFiles\",\n    value: function removeAllFiles(cancelIfNecessary) {\n      // Create a copy of files since removeFile() changes the @files array.\n      if (cancelIfNecessary == null) {\n        cancelIfNecessary = false;\n      }\n\n      var _iteratorNormalCompletion17 = true;\n      var _didIteratorError17 = false;\n      var _iteratorError17 = undefined;\n\n      try {\n        for (var _iterator17 = this.files.slice()[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n          var file = _step17.value;\n\n          if (file.status !== Dropzone.UPLOADING || cancelIfNecessary) {\n            this.removeFile(file);\n          }\n        }\n      } catch (err) {\n        _didIteratorError17 = true;\n        _iteratorError17 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion17 && _iterator17[\"return\"] != null) {\n            _iterator17[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError17) {\n            throw _iteratorError17;\n          }\n        }\n      }\n\n      return null;\n    } // Resizes an image before it gets sent to the server. This function is the default behavior of\n    // `options.transformFile` if `resizeWidth` or `resizeHeight` are set. The callback is invoked with\n    // the resized blob.\n\n  }, {\n    key: \"resizeImage\",\n    value: function resizeImage(file, width, height, resizeMethod, callback) {\n      var _this11 = this;\n\n      return this.createThumbnail(file, width, height, resizeMethod, true, function (dataUrl, canvas) {\n        if (canvas == null) {\n          // The image has not been resized\n          return callback(file);\n        } else {\n          var resizeMimeType = _this11.options.resizeMimeType;\n\n          if (resizeMimeType == null) {\n            resizeMimeType = file.type;\n          }\n\n          var resizedDataURL = canvas.toDataURL(resizeMimeType, _this11.options.resizeQuality);\n\n          if (resizeMimeType === 'image/jpeg' || resizeMimeType === 'image/jpg') {\n            // Now add the original EXIF information\n            resizedDataURL = ExifRestore.restore(file.dataURL, resizedDataURL);\n          }\n\n          return callback(Dropzone.dataURItoBlob(resizedDataURL));\n        }\n      });\n    }\n  }, {\n    key: \"createThumbnail\",\n    value: function createThumbnail(file, width, height, resizeMethod, fixOrientation, callback) {\n      var _this12 = this;\n\n      var fileReader = new FileReader();\n\n      fileReader.onload = function () {\n        file.dataURL = fileReader.result; // Don't bother creating a thumbnail for SVG images since they're vector\n\n        if (file.type === \"image/svg+xml\") {\n          if (callback != null) {\n            callback(fileReader.result);\n          }\n\n          return;\n        }\n\n        _this12.createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback);\n      };\n\n      fileReader.readAsDataURL(file);\n    } // `mockFile` needs to have these attributes:\n    // \n    //     { name: 'name', size: 12345, imageUrl: '' }\n    //\n    // `callback` will be invoked when the image has been downloaded and displayed.\n    // `crossOrigin` will be added to the `img` tag when accessing the file.\n\n  }, {\n    key: \"displayExistingFile\",\n    value: function displayExistingFile(mockFile, imageUrl, callback, crossOrigin) {\n      var _this13 = this;\n\n      var resizeThumbnail = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      this.emit(\"addedfile\", mockFile);\n      this.emit(\"complete\", mockFile);\n\n      if (!resizeThumbnail) {\n        this.emit(\"thumbnail\", mockFile, imageUrl);\n        if (callback) callback();\n      } else {\n        var onDone = function onDone(thumbnail) {\n          _this13.emit('thumbnail', mockFile, thumbnail);\n\n          if (callback) callback();\n        };\n\n        mockFile.dataURL = imageUrl;\n        this.createThumbnailFromUrl(mockFile, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.resizeMethod, this.options.fixOrientation, onDone, crossOrigin);\n      }\n    }\n  }, {\n    key: \"createThumbnailFromUrl\",\n    value: function createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback, crossOrigin) {\n      var _this14 = this; // Not using `new Image` here because of a bug in latest Chrome versions.\n      // See https://github.com/enyo/dropzone/pull/226\n\n\n      var img = document.createElement(\"img\");\n\n      if (crossOrigin) {\n        img.crossOrigin = crossOrigin;\n      }\n\n      img.onload = function () {\n        var loadExif = function loadExif(callback) {\n          return callback(1);\n        };\n\n        if (typeof EXIF !== 'undefined' && EXIF !== null && fixOrientation) {\n          loadExif = function loadExif(callback) {\n            return EXIF.getData(img, function () {\n              return callback(EXIF.getTag(this, 'Orientation'));\n            });\n          };\n        }\n\n        return loadExif(function (orientation) {\n          file.width = img.width;\n          file.height = img.height;\n\n          var resizeInfo = _this14.options.resize.call(_this14, file, width, height, resizeMethod);\n\n          var canvas = document.createElement(\"canvas\");\n          var ctx = canvas.getContext(\"2d\");\n          canvas.width = resizeInfo.trgWidth;\n          canvas.height = resizeInfo.trgHeight;\n\n          if (orientation > 4) {\n            canvas.width = resizeInfo.trgHeight;\n            canvas.height = resizeInfo.trgWidth;\n          }\n\n          switch (orientation) {\n            case 2:\n              // horizontal flip\n              ctx.translate(canvas.width, 0);\n              ctx.scale(-1, 1);\n              break;\n\n            case 3:\n              // 180° rotate left\n              ctx.translate(canvas.width, canvas.height);\n              ctx.rotate(Math.PI);\n              break;\n\n            case 4:\n              // vertical flip\n              ctx.translate(0, canvas.height);\n              ctx.scale(1, -1);\n              break;\n\n            case 5:\n              // vertical flip + 90 rotate right\n              ctx.rotate(0.5 * Math.PI);\n              ctx.scale(1, -1);\n              break;\n\n            case 6:\n              // 90° rotate right\n              ctx.rotate(0.5 * Math.PI);\n              ctx.translate(0, -canvas.width);\n              break;\n\n            case 7:\n              // horizontal flip + 90 rotate right\n              ctx.rotate(0.5 * Math.PI);\n              ctx.translate(canvas.height, -canvas.width);\n              ctx.scale(-1, 1);\n              break;\n\n            case 8:\n              // 90° rotate left\n              ctx.rotate(-0.5 * Math.PI);\n              ctx.translate(-canvas.height, 0);\n              break;\n          } // This is a bugfix for iOS' scaling bug.\n\n\n          drawImageIOSFix(ctx, img, resizeInfo.srcX != null ? resizeInfo.srcX : 0, resizeInfo.srcY != null ? resizeInfo.srcY : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, resizeInfo.trgX != null ? resizeInfo.trgX : 0, resizeInfo.trgY != null ? resizeInfo.trgY : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);\n          var thumbnail = canvas.toDataURL(\"image/png\");\n\n          if (callback != null) {\n            return callback(thumbnail, canvas);\n          }\n        });\n      };\n\n      if (callback != null) {\n        img.onerror = callback;\n      }\n\n      return img.src = file.dataURL;\n    } // Goes through the queue and processes files if there aren't too many already.\n\n  }, {\n    key: \"processQueue\",\n    value: function processQueue() {\n      var parallelUploads = this.options.parallelUploads;\n      var processingLength = this.getUploadingFiles().length;\n      var i = processingLength; // There are already at least as many files uploading than should be\n\n      if (processingLength >= parallelUploads) {\n        return;\n      }\n\n      var queuedFiles = this.getQueuedFiles();\n\n      if (!(queuedFiles.length > 0)) {\n        return;\n      }\n\n      if (this.options.uploadMultiple) {\n        // The files should be uploaded in one request\n        return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));\n      } else {\n        while (i < parallelUploads) {\n          if (!queuedFiles.length) {\n            return;\n          } // Nothing left to process\n\n\n          this.processFile(queuedFiles.shift());\n          i++;\n        }\n      }\n    } // Wrapper for `processFiles`\n\n  }, {\n    key: \"processFile\",\n    value: function processFile(file) {\n      return this.processFiles([file]);\n    } // Loads the file, then calls finishedLoading()\n\n  }, {\n    key: \"processFiles\",\n    value: function processFiles(files) {\n      var _iteratorNormalCompletion18 = true;\n      var _didIteratorError18 = false;\n      var _iteratorError18 = undefined;\n\n      try {\n        for (var _iterator18 = files[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {\n          var file = _step18.value;\n          file.processing = true; // Backwards compatibility\n\n          file.status = Dropzone.UPLOADING;\n          this.emit(\"processing\", file);\n        }\n      } catch (err) {\n        _didIteratorError18 = true;\n        _iteratorError18 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion18 && _iterator18[\"return\"] != null) {\n            _iterator18[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError18) {\n            throw _iteratorError18;\n          }\n        }\n      }\n\n      if (this.options.uploadMultiple) {\n        this.emit(\"processingmultiple\", files);\n      }\n\n      return this.uploadFiles(files);\n    }\n  }, {\n    key: \"_getFilesWithXhr\",\n    value: function _getFilesWithXhr(xhr) {\n      var files;\n      return files = this.files.filter(function (file) {\n        return file.xhr === xhr;\n      }).map(function (file) {\n        return file;\n      });\n    } // Cancels the file upload and sets the status to CANCELED\n    // **if** the file is actually being uploaded.\n    // If it's still in the queue, the file is being removed from it and the status\n    // set to CANCELED.\n\n  }, {\n    key: \"cancelUpload\",\n    value: function cancelUpload(file) {\n      if (file.status === Dropzone.UPLOADING) {\n        var groupedFiles = this._getFilesWithXhr(file.xhr);\n\n        var _iteratorNormalCompletion19 = true;\n        var _didIteratorError19 = false;\n        var _iteratorError19 = undefined;\n\n        try {\n          for (var _iterator19 = groupedFiles[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {\n            var groupedFile = _step19.value;\n            groupedFile.status = Dropzone.CANCELED;\n          }\n        } catch (err) {\n          _didIteratorError19 = true;\n          _iteratorError19 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion19 && _iterator19[\"return\"] != null) {\n              _iterator19[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError19) {\n              throw _iteratorError19;\n            }\n          }\n        }\n\n        if (typeof file.xhr !== 'undefined') {\n          file.xhr.abort();\n        }\n\n        var _iteratorNormalCompletion20 = true;\n        var _didIteratorError20 = false;\n        var _iteratorError20 = undefined;\n\n        try {\n          for (var _iterator20 = groupedFiles[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {\n            var _groupedFile = _step20.value;\n            this.emit(\"canceled\", _groupedFile);\n          }\n        } catch (err) {\n          _didIteratorError20 = true;\n          _iteratorError20 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion20 && _iterator20[\"return\"] != null) {\n              _iterator20[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError20) {\n              throw _iteratorError20;\n            }\n          }\n        }\n\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", groupedFiles);\n        }\n      } else if (file.status === Dropzone.ADDED || file.status === Dropzone.QUEUED) {\n        file.status = Dropzone.CANCELED;\n        this.emit(\"canceled\", file);\n\n        if (this.options.uploadMultiple) {\n          this.emit(\"canceledmultiple\", [file]);\n        }\n      }\n\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    }\n  }, {\n    key: \"resolveOption\",\n    value: function resolveOption(option) {\n      if (typeof option === 'function') {\n        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          args[_key3 - 1] = arguments[_key3];\n        }\n\n        return option.apply(this, args);\n      }\n\n      return option;\n    }\n  }, {\n    key: \"uploadFile\",\n    value: function uploadFile(file) {\n      return this.uploadFiles([file]);\n    }\n  }, {\n    key: \"uploadFiles\",\n    value: function uploadFiles(files) {\n      var _this15 = this;\n\n      this._transformFiles(files, function (transformedFiles) {\n        if (_this15.options.chunking) {\n          // Chunking is not allowed to be used with `uploadMultiple` so we know\n          // that there is only __one__file.\n          var transformedFile = transformedFiles[0];\n          files[0].upload.chunked = _this15.options.chunking && (_this15.options.forceChunking || transformedFile.size > _this15.options.chunkSize);\n          files[0].upload.totalChunkCount = Math.ceil(transformedFile.size / _this15.options.chunkSize);\n        }\n\n        if (files[0].upload.chunked) {\n          // This file should be sent in chunks!\n          // If the chunking option is set, we **know** that there can only be **one** file, since\n          // uploadMultiple is not allowed with this option.\n          var file = files[0];\n          var _transformedFile = transformedFiles[0];\n          var startedChunkCount = 0;\n          file.upload.chunks = [];\n\n          var handleNextChunk = function handleNextChunk() {\n            var chunkIndex = 0; // Find the next item in file.upload.chunks that is not defined yet.\n\n            while (file.upload.chunks[chunkIndex] !== undefined) {\n              chunkIndex++;\n            } // This means, that all chunks have already been started.\n\n\n            if (chunkIndex >= file.upload.totalChunkCount) return;\n            startedChunkCount++;\n            var start = chunkIndex * _this15.options.chunkSize;\n            var end = Math.min(start + _this15.options.chunkSize, file.size);\n            var dataBlock = {\n              name: _this15._getParamName(0),\n              data: _transformedFile.webkitSlice ? _transformedFile.webkitSlice(start, end) : _transformedFile.slice(start, end),\n              filename: file.upload.filename,\n              chunkIndex: chunkIndex\n            };\n            file.upload.chunks[chunkIndex] = {\n              file: file,\n              index: chunkIndex,\n              dataBlock: dataBlock,\n              // In case we want to retry.\n              status: Dropzone.UPLOADING,\n              progress: 0,\n              retries: 0 // The number of times this block has been retried.\n\n            };\n\n            _this15._uploadData(files, [dataBlock]);\n          };\n\n          file.upload.finishedChunkUpload = function (chunk) {\n            var allFinished = true;\n            chunk.status = Dropzone.SUCCESS; // Clear the data from the chunk\n\n            chunk.dataBlock = null; // Leaving this reference to xhr intact here will cause memory leaks in some browsers\n\n            chunk.xhr = null;\n\n            for (var i = 0; i < file.upload.totalChunkCount; i++) {\n              if (file.upload.chunks[i] === undefined) {\n                return handleNextChunk();\n              }\n\n              if (file.upload.chunks[i].status !== Dropzone.SUCCESS) {\n                allFinished = false;\n              }\n            }\n\n            if (allFinished) {\n              _this15.options.chunksUploaded(file, function () {\n                _this15._finished(files, '', null);\n              });\n            }\n          };\n\n          if (_this15.options.parallelChunkUploads) {\n            for (var i = 0; i < file.upload.totalChunkCount; i++) {\n              handleNextChunk();\n            }\n          } else {\n            handleNextChunk();\n          }\n        } else {\n          var dataBlocks = [];\n\n          for (var _i3 = 0; _i3 < files.length; _i3++) {\n            dataBlocks[_i3] = {\n              name: _this15._getParamName(_i3),\n              data: transformedFiles[_i3],\n              filename: files[_i3].upload.filename\n            };\n          }\n\n          _this15._uploadData(files, dataBlocks);\n        }\n      });\n    } /// Returns the right chunk for given file and xhr\n\n  }, {\n    key: \"_getChunk\",\n    value: function _getChunk(file, xhr) {\n      for (var i = 0; i < file.upload.totalChunkCount; i++) {\n        if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].xhr === xhr) {\n          return file.upload.chunks[i];\n        }\n      }\n    } // This function actually uploads the file(s) to the server.\n    // If dataBlocks contains the actual data to upload (meaning, that this could either be transformed\n    // files, or individual chunks for chunked upload).\n\n  }, {\n    key: \"_uploadData\",\n    value: function _uploadData(files, dataBlocks) {\n      var _this16 = this;\n\n      var xhr = new XMLHttpRequest(); // Put the xhr object in the file objects to be able to reference it later.\n\n      var _iteratorNormalCompletion21 = true;\n      var _didIteratorError21 = false;\n      var _iteratorError21 = undefined;\n\n      try {\n        for (var _iterator21 = files[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {\n          var file = _step21.value;\n          file.xhr = xhr;\n        }\n      } catch (err) {\n        _didIteratorError21 = true;\n        _iteratorError21 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion21 && _iterator21[\"return\"] != null) {\n            _iterator21[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError21) {\n            throw _iteratorError21;\n          }\n        }\n      }\n\n      if (files[0].upload.chunked) {\n        // Put the xhr object in the right chunk object, so it can be associated later, and found with _getChunk\n        files[0].upload.chunks[dataBlocks[0].chunkIndex].xhr = xhr;\n      }\n\n      var method = this.resolveOption(this.options.method, files);\n      var url = this.resolveOption(this.options.url, files);\n      xhr.open(method, url, true); // Setting the timeout after open because of IE11 issue: https://gitlab.com/meno/dropzone/issues/8\n\n      xhr.timeout = this.resolveOption(this.options.timeout, files); // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179\n\n      xhr.withCredentials = !!this.options.withCredentials;\n\n      xhr.onload = function (e) {\n        _this16._finishedUploading(files, xhr, e);\n      };\n\n      xhr.ontimeout = function () {\n        _this16._handleUploadError(files, xhr, \"Request timedout after \".concat(_this16.options.timeout, \" seconds\"));\n      };\n\n      xhr.onerror = function () {\n        _this16._handleUploadError(files, xhr);\n      }; // Some browsers do not have the .upload property\n\n\n      var progressObj = xhr.upload != null ? xhr.upload : xhr;\n\n      progressObj.onprogress = function (e) {\n        return _this16._updateFilesUploadProgress(files, xhr, e);\n      };\n\n      var headers = {\n        \"Accept\": \"application/json\",\n        \"Cache-Control\": \"no-cache\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      };\n\n      if (this.options.headers) {\n        Dropzone.extend(headers, this.options.headers);\n      }\n\n      for (var headerName in headers) {\n        var headerValue = headers[headerName];\n\n        if (headerValue) {\n          xhr.setRequestHeader(headerName, headerValue);\n        }\n      }\n\n      var formData = new FormData(); // Adding all @options parameters\n\n      if (this.options.params) {\n        var additionalParams = this.options.params;\n\n        if (typeof additionalParams === 'function') {\n          additionalParams = additionalParams.call(this, files, xhr, files[0].upload.chunked ? this._getChunk(files[0], xhr) : null);\n        }\n\n        for (var key in additionalParams) {\n          var value = additionalParams[key];\n          formData.append(key, value);\n        }\n      } // Let the user add additional data if necessary\n\n\n      var _iteratorNormalCompletion22 = true;\n      var _didIteratorError22 = false;\n      var _iteratorError22 = undefined;\n\n      try {\n        for (var _iterator22 = files[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {\n          var _file = _step22.value;\n          this.emit(\"sending\", _file, xhr, formData);\n        }\n      } catch (err) {\n        _didIteratorError22 = true;\n        _iteratorError22 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion22 && _iterator22[\"return\"] != null) {\n            _iterator22[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError22) {\n            throw _iteratorError22;\n          }\n        }\n      }\n\n      if (this.options.uploadMultiple) {\n        this.emit(\"sendingmultiple\", files, xhr, formData);\n      }\n\n      this._addFormElementData(formData); // Finally add the files\n      // Has to be last because some servers (eg: S3) expect the file to be the last parameter\n\n\n      for (var i = 0; i < dataBlocks.length; i++) {\n        var dataBlock = dataBlocks[i];\n        formData.append(dataBlock.name, dataBlock.data, dataBlock.filename);\n      }\n\n      this.submitRequest(xhr, formData, files);\n    } // Transforms all files with this.options.transformFile and invokes done with the transformed files when done.\n\n  }, {\n    key: \"_transformFiles\",\n    value: function _transformFiles(files, done) {\n      var _this17 = this;\n\n      var transformedFiles = []; // Clumsy way of handling asynchronous calls, until I get to add a proper Future library.\n\n      var doneCounter = 0;\n\n      var _loop = function _loop(i) {\n        _this17.options.transformFile.call(_this17, files[i], function (transformedFile) {\n          transformedFiles[i] = transformedFile;\n\n          if (++doneCounter === files.length) {\n            done(transformedFiles);\n          }\n        });\n      };\n\n      for (var i = 0; i < files.length; i++) {\n        _loop(i);\n      }\n    } // Takes care of adding other input elements of the form to the AJAX request\n\n  }, {\n    key: \"_addFormElementData\",\n    value: function _addFormElementData(formData) {\n      // Take care of other input elements\n      if (this.element.tagName === \"FORM\") {\n        var _iteratorNormalCompletion23 = true;\n        var _didIteratorError23 = false;\n        var _iteratorError23 = undefined;\n\n        try {\n          for (var _iterator23 = this.element.querySelectorAll(\"input, textarea, select, button\")[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {\n            var input = _step23.value;\n            var inputName = input.getAttribute(\"name\");\n            var inputType = input.getAttribute(\"type\");\n            if (inputType) inputType = inputType.toLowerCase(); // If the input doesn't have a name, we can't use it.\n\n            if (typeof inputName === 'undefined' || inputName === null) continue;\n\n            if (input.tagName === \"SELECT\" && input.hasAttribute(\"multiple\")) {\n              // Possibly multiple values\n              var _iteratorNormalCompletion24 = true;\n              var _didIteratorError24 = false;\n              var _iteratorError24 = undefined;\n\n              try {\n                for (var _iterator24 = input.options[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {\n                  var option = _step24.value;\n\n                  if (option.selected) {\n                    formData.append(inputName, option.value);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError24 = true;\n                _iteratorError24 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion24 && _iterator24[\"return\"] != null) {\n                    _iterator24[\"return\"]();\n                  }\n                } finally {\n                  if (_didIteratorError24) {\n                    throw _iteratorError24;\n                  }\n                }\n              }\n            } else if (!inputType || inputType !== \"checkbox\" && inputType !== \"radio\" || input.checked) {\n              formData.append(inputName, input.value);\n            }\n          }\n        } catch (err) {\n          _didIteratorError23 = true;\n          _iteratorError23 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion23 && _iterator23[\"return\"] != null) {\n              _iterator23[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError23) {\n              throw _iteratorError23;\n            }\n          }\n        }\n      }\n    } // Invoked when there is new progress information about given files.\n    // If e is not provided, it is assumed that the upload is finished.\n\n  }, {\n    key: \"_updateFilesUploadProgress\",\n    value: function _updateFilesUploadProgress(files, xhr, e) {\n      var progress;\n\n      if (typeof e !== 'undefined') {\n        progress = 100 * e.loaded / e.total;\n\n        if (files[0].upload.chunked) {\n          var file = files[0]; // Since this is a chunked upload, we need to update the appropriate chunk progress.\n\n          var chunk = this._getChunk(file, xhr);\n\n          chunk.progress = progress;\n          chunk.total = e.total;\n          chunk.bytesSent = e.loaded;\n          var fileProgress = 0,\n              fileTotal,\n              fileBytesSent;\n          file.upload.progress = 0;\n          file.upload.total = 0;\n          file.upload.bytesSent = 0;\n\n          for (var i = 0; i < file.upload.totalChunkCount; i++) {\n            if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].progress !== undefined) {\n              file.upload.progress += file.upload.chunks[i].progress;\n              file.upload.total += file.upload.chunks[i].total;\n              file.upload.bytesSent += file.upload.chunks[i].bytesSent;\n            }\n          }\n\n          file.upload.progress = file.upload.progress / file.upload.totalChunkCount;\n        } else {\n          var _iteratorNormalCompletion25 = true;\n          var _didIteratorError25 = false;\n          var _iteratorError25 = undefined;\n\n          try {\n            for (var _iterator25 = files[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {\n              var _file2 = _step25.value;\n              _file2.upload.progress = progress;\n              _file2.upload.total = e.total;\n              _file2.upload.bytesSent = e.loaded;\n            }\n          } catch (err) {\n            _didIteratorError25 = true;\n            _iteratorError25 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion25 && _iterator25[\"return\"] != null) {\n                _iterator25[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError25) {\n                throw _iteratorError25;\n              }\n            }\n          }\n        }\n\n        var _iteratorNormalCompletion26 = true;\n        var _didIteratorError26 = false;\n        var _iteratorError26 = undefined;\n\n        try {\n          for (var _iterator26 = files[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {\n            var _file3 = _step26.value;\n            this.emit(\"uploadprogress\", _file3, _file3.upload.progress, _file3.upload.bytesSent);\n          }\n        } catch (err) {\n          _didIteratorError26 = true;\n          _iteratorError26 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion26 && _iterator26[\"return\"] != null) {\n              _iterator26[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError26) {\n              throw _iteratorError26;\n            }\n          }\n        }\n      } else {\n        // Called when the file finished uploading\n        var allFilesFinished = true;\n        progress = 100;\n        var _iteratorNormalCompletion27 = true;\n        var _didIteratorError27 = false;\n        var _iteratorError27 = undefined;\n\n        try {\n          for (var _iterator27 = files[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {\n            var _file4 = _step27.value;\n\n            if (_file4.upload.progress !== 100 || _file4.upload.bytesSent !== _file4.upload.total) {\n              allFilesFinished = false;\n            }\n\n            _file4.upload.progress = progress;\n            _file4.upload.bytesSent = _file4.upload.total;\n          } // Nothing to do, all files already at 100%\n\n        } catch (err) {\n          _didIteratorError27 = true;\n          _iteratorError27 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion27 && _iterator27[\"return\"] != null) {\n              _iterator27[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError27) {\n              throw _iteratorError27;\n            }\n          }\n        }\n\n        if (allFilesFinished) {\n          return;\n        }\n\n        var _iteratorNormalCompletion28 = true;\n        var _didIteratorError28 = false;\n        var _iteratorError28 = undefined;\n\n        try {\n          for (var _iterator28 = files[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {\n            var _file5 = _step28.value;\n            this.emit(\"uploadprogress\", _file5, progress, _file5.upload.bytesSent);\n          }\n        } catch (err) {\n          _didIteratorError28 = true;\n          _iteratorError28 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion28 && _iterator28[\"return\"] != null) {\n              _iterator28[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError28) {\n              throw _iteratorError28;\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_finishedUploading\",\n    value: function _finishedUploading(files, xhr, e) {\n      var response;\n\n      if (files[0].status === Dropzone.CANCELED) {\n        return;\n      }\n\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      if (xhr.responseType !== 'arraybuffer' && xhr.responseType !== 'blob') {\n        response = xhr.responseText;\n\n        if (xhr.getResponseHeader(\"content-type\") && ~xhr.getResponseHeader(\"content-type\").indexOf(\"application/json\")) {\n          try {\n            response = JSON.parse(response);\n          } catch (error) {\n            e = error;\n            response = \"Invalid JSON response from server.\";\n          }\n        }\n      }\n\n      this._updateFilesUploadProgress(files);\n\n      if (!(200 <= xhr.status && xhr.status < 300)) {\n        this._handleUploadError(files, xhr, response);\n      } else {\n        if (files[0].upload.chunked) {\n          files[0].upload.finishedChunkUpload(this._getChunk(files[0], xhr));\n        } else {\n          this._finished(files, response, e);\n        }\n      }\n    }\n  }, {\n    key: \"_handleUploadError\",\n    value: function _handleUploadError(files, xhr, response) {\n      if (files[0].status === Dropzone.CANCELED) {\n        return;\n      }\n\n      if (files[0].upload.chunked && this.options.retryChunks) {\n        var chunk = this._getChunk(files[0], xhr);\n\n        if (chunk.retries++ < this.options.retryChunksLimit) {\n          this._uploadData(files, [chunk.dataBlock]);\n\n          return;\n        } else {\n          console.warn('Retried this chunk too often. Giving up.');\n        }\n      }\n\n      this._errorProcessing(files, response || this.options.dictResponseError.replace(\"{{statusCode}}\", xhr.status), xhr);\n    }\n  }, {\n    key: \"submitRequest\",\n    value: function submitRequest(xhr, formData, files) {\n      xhr.send(formData);\n    } // Called internally when processing is finished.\n    // Individual callbacks have to be called in the appropriate sections.\n\n  }, {\n    key: \"_finished\",\n    value: function _finished(files, responseText, e) {\n      var _iteratorNormalCompletion29 = true;\n      var _didIteratorError29 = false;\n      var _iteratorError29 = undefined;\n\n      try {\n        for (var _iterator29 = files[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {\n          var file = _step29.value;\n          file.status = Dropzone.SUCCESS;\n          this.emit(\"success\", file, responseText, e);\n          this.emit(\"complete\", file);\n        }\n      } catch (err) {\n        _didIteratorError29 = true;\n        _iteratorError29 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion29 && _iterator29[\"return\"] != null) {\n            _iterator29[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError29) {\n            throw _iteratorError29;\n          }\n        }\n      }\n\n      if (this.options.uploadMultiple) {\n        this.emit(\"successmultiple\", files, responseText, e);\n        this.emit(\"completemultiple\", files);\n      }\n\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    } // Called internally when processing is finished.\n    // Individual callbacks have to be called in the appropriate sections.\n\n  }, {\n    key: \"_errorProcessing\",\n    value: function _errorProcessing(files, message, xhr) {\n      var _iteratorNormalCompletion30 = true;\n      var _didIteratorError30 = false;\n      var _iteratorError30 = undefined;\n\n      try {\n        for (var _iterator30 = files[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {\n          var file = _step30.value;\n          file.status = Dropzone.ERROR;\n          this.emit(\"error\", file, message, xhr);\n          this.emit(\"complete\", file);\n        }\n      } catch (err) {\n        _didIteratorError30 = true;\n        _iteratorError30 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion30 && _iterator30[\"return\"] != null) {\n            _iterator30[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError30) {\n            throw _iteratorError30;\n          }\n        }\n      }\n\n      if (this.options.uploadMultiple) {\n        this.emit(\"errormultiple\", files, message, xhr);\n        this.emit(\"completemultiple\", files);\n      }\n\n      if (this.options.autoProcessQueue) {\n        return this.processQueue();\n      }\n    }\n  }], [{\n    key: \"uuidv4\",\n    value: function uuidv4() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    }\n  }]);\n\n  return Dropzone;\n}(Emitter);\n\nDropzone.initClass();\nDropzone.version = \"5.7.0\"; // This is a map of options for your different dropzones. Add configurations\n// to this object for your different dropzone elemens.\n//\n// Example:\n//\n//     Dropzone.options.myDropzoneElementId = { maxFilesize: 1 };\n//\n// To disable autoDiscover for a specific element, you can set `false` as an option:\n//\n//     Dropzone.options.myDisabledElementId = false;\n//\n// And in html:\n//\n//     <form action=\"/upload\" id=\"my-dropzone-element-id\" class=\"dropzone\"></form>\n\nDropzone.options = {}; // Returns the options for an element or undefined if none available.\n\nDropzone.optionsForElement = function (element) {\n  // Get the `Dropzone.options.elementId` for this element if it exists\n  if (element.getAttribute(\"id\")) {\n    return Dropzone.options[camelize(element.getAttribute(\"id\"))];\n  } else {\n    return undefined;\n  }\n}; // Holds a list of all dropzone instances\n\n\nDropzone.instances = []; // Returns the dropzone for given element if any\n\nDropzone.forElement = function (element) {\n  if (typeof element === \"string\") {\n    element = document.querySelector(element);\n  }\n\n  if ((element != null ? element.dropzone : undefined) == null) {\n    throw new Error(\"No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.\");\n  }\n\n  return element.dropzone;\n}; // Set to false if you don't want Dropzone to automatically find and attach to .dropzone elements.\n\n\nDropzone.autoDiscover = true; // Looks for all .dropzone elements and creates a dropzone for them\n\nDropzone.discover = function () {\n  var dropzones;\n\n  if (document.querySelectorAll) {\n    dropzones = document.querySelectorAll(\".dropzone\");\n  } else {\n    dropzones = []; // IE :(\n\n    var checkElements = function checkElements(elements) {\n      return function () {\n        var result = [];\n        var _iteratorNormalCompletion31 = true;\n        var _didIteratorError31 = false;\n        var _iteratorError31 = undefined;\n\n        try {\n          for (var _iterator31 = elements[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {\n            var el = _step31.value;\n\n            if (/(^| )dropzone($| )/.test(el.className)) {\n              result.push(dropzones.push(el));\n            } else {\n              result.push(undefined);\n            }\n          }\n        } catch (err) {\n          _didIteratorError31 = true;\n          _iteratorError31 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion31 && _iterator31[\"return\"] != null) {\n              _iterator31[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError31) {\n              throw _iteratorError31;\n            }\n          }\n        }\n\n        return result;\n      }();\n    };\n\n    checkElements(document.getElementsByTagName(\"div\"));\n    checkElements(document.getElementsByTagName(\"form\"));\n  }\n\n  return function () {\n    var result = [];\n    var _iteratorNormalCompletion32 = true;\n    var _didIteratorError32 = false;\n    var _iteratorError32 = undefined;\n\n    try {\n      for (var _iterator32 = dropzones[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {\n        var dropzone = _step32.value; // Create a dropzone unless auto discover has been disabled for specific element\n\n        if (Dropzone.optionsForElement(dropzone) !== false) {\n          result.push(new Dropzone(dropzone));\n        } else {\n          result.push(undefined);\n        }\n      }\n    } catch (err) {\n      _didIteratorError32 = true;\n      _iteratorError32 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion32 && _iterator32[\"return\"] != null) {\n          _iterator32[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError32) {\n          throw _iteratorError32;\n        }\n      }\n    }\n\n    return result;\n  }();\n}; // Since the whole Drag'n'Drop API is pretty new, some browsers implement it,\n// but not correctly.\n// So I created a blacklist of userAgents. Yes, yes. Browser sniffing, I know.\n// But what to do when browsers *theoretically* support an API, but crash\n// when using it.\n//\n// This is a list of regular expressions tested against navigator.userAgent\n//\n// ** It should only be used on browser that *do* support the API, but\n// incorrectly **\n//\n\n\nDropzone.blacklistedBrowsers = [// The mac os and windows phone version of opera 12 seems to have a problem with the File drag'n'drop API.\n/opera.*(Macintosh|Windows Phone).*version\\/12/i]; // Checks if the browser is supported\n\nDropzone.isBrowserSupported = function () {\n  var capableBrowser = true;\n\n  if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {\n    if (!(\"classList\" in document.createElement(\"a\"))) {\n      capableBrowser = false;\n    } else {\n      // The browser supports the API, but may be blacklisted.\n      var _iteratorNormalCompletion33 = true;\n      var _didIteratorError33 = false;\n      var _iteratorError33 = undefined;\n\n      try {\n        for (var _iterator33 = Dropzone.blacklistedBrowsers[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {\n          var regex = _step33.value;\n\n          if (regex.test(navigator.userAgent)) {\n            capableBrowser = false;\n            continue;\n          }\n        }\n      } catch (err) {\n        _didIteratorError33 = true;\n        _iteratorError33 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion33 && _iterator33[\"return\"] != null) {\n            _iterator33[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError33) {\n            throw _iteratorError33;\n          }\n        }\n      }\n    }\n  } else {\n    capableBrowser = false;\n  }\n\n  return capableBrowser;\n};\n\nDropzone.dataURItoBlob = function (dataURI) {\n  // convert base64 to raw binary data held in a string\n  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n  var byteString = atob(dataURI.split(',')[1]); // separate out the mime component\n\n  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]; // write the bytes of the string to an ArrayBuffer\n\n  var ab = new ArrayBuffer(byteString.length);\n  var ia = new Uint8Array(ab);\n\n  for (var i = 0, end = byteString.length, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--) {\n    ia[i] = byteString.charCodeAt(i);\n  } // write the ArrayBuffer to a blob\n\n\n  return new Blob([ab], {\n    type: mimeString\n  });\n}; // Returns an array without the rejected item\n\n\nvar without = function without(list, rejectedItem) {\n  return list.filter(function (item) {\n    return item !== rejectedItem;\n  }).map(function (item) {\n    return item;\n  });\n}; // abc-def_ghi -> abcDefGhi\n\n\nvar camelize = function camelize(str) {\n  return str.replace(/[\\-_](\\w)/g, function (match) {\n    return match.charAt(1).toUpperCase();\n  });\n}; // Creates an element from string\n\n\nDropzone.createElement = function (string) {\n  var div = document.createElement(\"div\");\n  div.innerHTML = string;\n  return div.childNodes[0];\n}; // Tests if given element is inside (or simply is) the container\n\n\nDropzone.elementInside = function (element, container) {\n  if (element === container) {\n    return true;\n  } // Coffeescript doesn't support do/while loops\n\n\n  while (element = element.parentNode) {\n    if (element === container) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nDropzone.getElement = function (el, name) {\n  var element;\n\n  if (typeof el === \"string\") {\n    element = document.querySelector(el);\n  } else if (el.nodeType != null) {\n    element = el;\n  }\n\n  if (element == null) {\n    throw new Error(\"Invalid `\".concat(name, \"` option provided. Please provide a CSS selector or a plain HTML element.\"));\n  }\n\n  return element;\n};\n\nDropzone.getElements = function (els, name) {\n  var el, elements;\n\n  if (els instanceof Array) {\n    elements = [];\n\n    try {\n      var _iteratorNormalCompletion34 = true;\n      var _didIteratorError34 = false;\n      var _iteratorError34 = undefined;\n\n      try {\n        for (var _iterator34 = els[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {\n          el = _step34.value;\n          elements.push(this.getElement(el, name));\n        }\n      } catch (err) {\n        _didIteratorError34 = true;\n        _iteratorError34 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion34 && _iterator34[\"return\"] != null) {\n            _iterator34[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError34) {\n            throw _iteratorError34;\n          }\n        }\n      }\n    } catch (e) {\n      elements = null;\n    }\n  } else if (typeof els === \"string\") {\n    elements = [];\n    var _iteratorNormalCompletion35 = true;\n    var _didIteratorError35 = false;\n    var _iteratorError35 = undefined;\n\n    try {\n      for (var _iterator35 = document.querySelectorAll(els)[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {\n        el = _step35.value;\n        elements.push(el);\n      }\n    } catch (err) {\n      _didIteratorError35 = true;\n      _iteratorError35 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion35 && _iterator35[\"return\"] != null) {\n          _iterator35[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError35) {\n          throw _iteratorError35;\n        }\n      }\n    }\n  } else if (els.nodeType != null) {\n    elements = [els];\n  }\n\n  if (elements == null || !elements.length) {\n    throw new Error(\"Invalid `\".concat(name, \"` option provided. Please provide a CSS selector, a plain HTML element or a list of those.\"));\n  }\n\n  return elements;\n}; // Asks the user the question and calls accepted or rejected accordingly\n//\n// The default implementation just uses `window.confirm` and then calls the\n// appropriate callback.\n\n\nDropzone.confirm = function (question, accepted, rejected) {\n  if (window.confirm(question)) {\n    return accepted();\n  } else if (rejected != null) {\n    return rejected();\n  }\n}; // Validates the mime type like this:\n//\n// https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept\n\n\nDropzone.isValidFile = function (file, acceptedFiles) {\n  if (!acceptedFiles) {\n    return true;\n  } // If there are no accepted mime types, it's OK\n\n\n  acceptedFiles = acceptedFiles.split(\",\");\n  var mimeType = file.type;\n  var baseMimeType = mimeType.replace(/\\/.*$/, \"\");\n  var _iteratorNormalCompletion36 = true;\n  var _didIteratorError36 = false;\n  var _iteratorError36 = undefined;\n\n  try {\n    for (var _iterator36 = acceptedFiles[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {\n      var validType = _step36.value;\n      validType = validType.trim();\n\n      if (validType.charAt(0) === \".\") {\n        if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) {\n          return true;\n        }\n      } else if (/\\/\\*$/.test(validType)) {\n        // This is something like a image/* mime type\n        if (baseMimeType === validType.replace(/\\/.*$/, \"\")) {\n          return true;\n        }\n      } else {\n        if (mimeType === validType) {\n          return true;\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError36 = true;\n    _iteratorError36 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion36 && _iterator36[\"return\"] != null) {\n        _iterator36[\"return\"]();\n      }\n    } finally {\n      if (_didIteratorError36) {\n        throw _iteratorError36;\n      }\n    }\n  }\n\n  return false;\n}; // Augment jQuery\n\n\nif (typeof jQuery !== 'undefined' && jQuery !== null) {\n  jQuery.fn.dropzone = function (options) {\n    return this.each(function () {\n      return new Dropzone(this, options);\n    });\n  };\n}\n\nif ( true && module !== null) {\n  module.exports = Dropzone;\n} else {\n  window.Dropzone = Dropzone;\n} // Dropzone file status codes\n\n\nDropzone.ADDED = \"added\";\nDropzone.QUEUED = \"queued\"; // For backwards compatibility. Now, if a file is accepted, it's either queued\n// or uploading.\n\nDropzone.ACCEPTED = Dropzone.QUEUED;\nDropzone.UPLOADING = \"uploading\";\nDropzone.PROCESSING = Dropzone.UPLOADING; // alias\n\nDropzone.CANCELED = \"canceled\";\nDropzone.ERROR = \"error\";\nDropzone.SUCCESS = \"success\";\n/*\r\n\r\n Bugfix for iOS 6 and 7\r\n Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios\r\n based on the work of https://github.com/stomita/ios-imagefile-megapixel\r\n\r\n */\n// Detecting vertical squash in loaded image.\n// Fixes a bug which squash image vertically while drawing into canvas for some images.\n// This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel\n\nvar detectVerticalSquash = function detectVerticalSquash(img) {\n  var iw = img.naturalWidth;\n  var ih = img.naturalHeight;\n  var canvas = document.createElement(\"canvas\");\n  canvas.width = 1;\n  canvas.height = ih;\n  var ctx = canvas.getContext(\"2d\");\n  ctx.drawImage(img, 0, 0);\n\n  var _ctx$getImageData = ctx.getImageData(1, 0, 1, ih),\n      data = _ctx$getImageData.data; // search image edge pixel position in case it is squashed vertically.\n\n\n  var sy = 0;\n  var ey = ih;\n  var py = ih;\n\n  while (py > sy) {\n    var alpha = data[(py - 1) * 4 + 3];\n\n    if (alpha === 0) {\n      ey = py;\n    } else {\n      sy = py;\n    }\n\n    py = ey + sy >> 1;\n  }\n\n  var ratio = py / ih;\n\n  if (ratio === 0) {\n    return 1;\n  } else {\n    return ratio;\n  }\n}; // A replacement for context.drawImage\n// (args are for source and destination).\n\n\nvar drawImageIOSFix = function drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {\n  var vertSquashRatio = detectVerticalSquash(img);\n  return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);\n}; // Based on MinifyJpeg\n// Source: http://www.perry.cz/files/ExifRestorer.js\n// http://elicon.blog57.fc2.com/blog-entry-206.html\n\n\nvar ExifRestore = /*#__PURE__*/function () {\n  function ExifRestore() {\n    _classCallCheck(this, ExifRestore);\n  }\n\n  _createClass(ExifRestore, null, [{\n    key: \"initClass\",\n    value: function initClass() {\n      this.KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    }\n  }, {\n    key: \"encode64\",\n    value: function encode64(input) {\n      var output = '';\n      var chr1 = undefined;\n      var chr2 = undefined;\n      var chr3 = '';\n      var enc1 = undefined;\n      var enc2 = undefined;\n      var enc3 = undefined;\n      var enc4 = '';\n      var i = 0;\n\n      while (true) {\n        chr1 = input[i++];\n        chr2 = input[i++];\n        chr3 = input[i++];\n        enc1 = chr1 >> 2;\n        enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n        enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n        enc4 = chr3 & 63;\n\n        if (isNaN(chr2)) {\n          enc3 = enc4 = 64;\n        } else if (isNaN(chr3)) {\n          enc4 = 64;\n        }\n\n        output = output + this.KEY_STR.charAt(enc1) + this.KEY_STR.charAt(enc2) + this.KEY_STR.charAt(enc3) + this.KEY_STR.charAt(enc4);\n        chr1 = chr2 = chr3 = '';\n        enc1 = enc2 = enc3 = enc4 = '';\n\n        if (!(i < input.length)) {\n          break;\n        }\n      }\n\n      return output;\n    }\n  }, {\n    key: \"restore\",\n    value: function restore(origFileBase64, resizedFileBase64) {\n      if (!origFileBase64.match('data:image/jpeg;base64,')) {\n        return resizedFileBase64;\n      }\n\n      var rawImage = this.decode64(origFileBase64.replace('data:image/jpeg;base64,', ''));\n      var segments = this.slice2Segments(rawImage);\n      var image = this.exifManipulation(resizedFileBase64, segments);\n      return \"data:image/jpeg;base64,\".concat(this.encode64(image));\n    }\n  }, {\n    key: \"exifManipulation\",\n    value: function exifManipulation(resizedFileBase64, segments) {\n      var exifArray = this.getExifArray(segments);\n      var newImageArray = this.insertExif(resizedFileBase64, exifArray);\n      var aBuffer = new Uint8Array(newImageArray);\n      return aBuffer;\n    }\n  }, {\n    key: \"getExifArray\",\n    value: function getExifArray(segments) {\n      var seg = undefined;\n      var x = 0;\n\n      while (x < segments.length) {\n        seg = segments[x];\n\n        if (seg[0] === 255 & seg[1] === 225) {\n          return seg;\n        }\n\n        x++;\n      }\n\n      return [];\n    }\n  }, {\n    key: \"insertExif\",\n    value: function insertExif(resizedFileBase64, exifArray) {\n      var imageData = resizedFileBase64.replace('data:image/jpeg;base64,', '');\n      var buf = this.decode64(imageData);\n      var separatePoint = buf.indexOf(255, 3);\n      var mae = buf.slice(0, separatePoint);\n      var ato = buf.slice(separatePoint);\n      var array = mae;\n      array = array.concat(exifArray);\n      array = array.concat(ato);\n      return array;\n    }\n  }, {\n    key: \"slice2Segments\",\n    value: function slice2Segments(rawImageArray) {\n      var head = 0;\n      var segments = [];\n\n      while (true) {\n        var length;\n\n        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) {\n          break;\n        }\n\n        if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) {\n          head += 2;\n        } else {\n          length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3];\n          var endPoint = head + length + 2;\n          var seg = rawImageArray.slice(head, endPoint);\n          segments.push(seg);\n          head = endPoint;\n        }\n\n        if (head > rawImageArray.length) {\n          break;\n        }\n      }\n\n      return segments;\n    }\n  }, {\n    key: \"decode64\",\n    value: function decode64(input) {\n      var output = '';\n      var chr1 = undefined;\n      var chr2 = undefined;\n      var chr3 = '';\n      var enc1 = undefined;\n      var enc2 = undefined;\n      var enc3 = undefined;\n      var enc4 = '';\n      var i = 0;\n      var buf = []; // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n\n      var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n\n      if (base64test.exec(input)) {\n        console.warn('There were invalid base64 characters in the input text.\\nValid base64 characters are A-Z, a-z, 0-9, \\'+\\', \\'/\\',and \\'=\\'\\nExpect errors in decoding.');\n      }\n\n      input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n      while (true) {\n        enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n        enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n        enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n        enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n        chr1 = enc1 << 2 | enc2 >> 4;\n        chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n        chr3 = (enc3 & 3) << 6 | enc4;\n        buf.push(chr1);\n\n        if (enc3 !== 64) {\n          buf.push(chr2);\n        }\n\n        if (enc4 !== 64) {\n          buf.push(chr3);\n        }\n\n        chr1 = chr2 = chr3 = '';\n        enc1 = enc2 = enc3 = enc4 = '';\n\n        if (!(i < input.length)) {\n          break;\n        }\n      }\n\n      return buf;\n    }\n  }]);\n\n  return ExifRestore;\n}();\n\nExifRestore.initClass();\n/*\r\n * contentloaded.js\r\n *\r\n * Author: Diego Perini (diego.perini at gmail.com)\r\n * Summary: cross-browser wrapper for DOMContentLoaded\r\n * Updated: 20101020\r\n * License: MIT\r\n * Version: 1.2\r\n *\r\n * URL:\r\n * http://javascript.nwbox.com/ContentLoaded/\r\n * http://javascript.nwbox.com/ContentLoaded/MIT-LICENSE\r\n */\n// @win window reference\n// @fn function reference\n\nvar contentLoaded = function contentLoaded(win, fn) {\n  var done = false;\n  var top = true;\n  var doc = win.document;\n  var root = doc.documentElement;\n  var add = doc.addEventListener ? \"addEventListener\" : \"attachEvent\";\n  var rem = doc.addEventListener ? \"removeEventListener\" : \"detachEvent\";\n  var pre = doc.addEventListener ? \"\" : \"on\";\n\n  var init = function init(e) {\n    if (e.type === \"readystatechange\" && doc.readyState !== \"complete\") {\n      return;\n    }\n\n    (e.type === \"load\" ? win : doc)[rem](pre + e.type, init, false);\n\n    if (!done && (done = true)) {\n      return fn.call(win, e.type || e);\n    }\n  };\n\n  var poll = function poll() {\n    try {\n      root.doScroll(\"left\");\n    } catch (e) {\n      setTimeout(poll, 50);\n      return;\n    }\n\n    return init(\"poll\");\n  };\n\n  if (doc.readyState !== \"complete\") {\n    if (doc.createEventObject && root.doScroll) {\n      try {\n        top = !win.frameElement;\n      } catch (error) {}\n\n      if (top) {\n        poll();\n      }\n    }\n\n    doc[add](pre + \"DOMContentLoaded\", init, false);\n    doc[add](pre + \"readystatechange\", init, false);\n    return win[add](pre + \"load\", init, false);\n  }\n}; // As a single function to be able to write tests.\n\n\nDropzone._autoDiscoverFunction = function () {\n  if (Dropzone.autoDiscover) {\n    return Dropzone.discover();\n  }\n};\n\ncontentLoaded(window, Dropzone._autoDiscoverFunction);\n\nfunction __guard__(value, transform) {\n  return typeof value !== 'undefined' && value !== null ? transform(value) : undefined;\n}\n\nfunction __guardMethod__(obj, methodName, transform) {\n  if (typeof obj !== 'undefined' && obj !== null && typeof obj[methodName] === 'function') {\n    return transform(obj, methodName);\n  } else {\n    return undefined;\n  }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/dropzone/js/dropzone.js\n");

/***/ }),

/***/ 5:
/*!***************************************************************!*\
  !*** multi ./resources/js/dashboard/bundles/bundleProfile.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\Coding\DarkProjects\Demo LMS\resources\js\dashboard\bundles\bundleProfile.js */"./resources/js/dashboard/bundles/bundleProfile.js");


/***/ })

/******/ });