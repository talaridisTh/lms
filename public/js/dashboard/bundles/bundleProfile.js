/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/filepond/dist/filepond.min.css":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--9-1!./node_modules/postcss-loader/src??ref--9-2!./node_modules/filepond/dist/filepond.min.css ***!
  \*************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/*!\\n * FilePond 4.20.1\\n * Licensed under MIT, https://opensource.org/licenses/MIT/\\n * Please visit https://pqina.nl/filepond/ for details.\\n */\\n\\n/* eslint-disable */\\n.filepond--assistant{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--browser.filepond--browser{position:absolute;margin:0;padding:0;left:1em;top:1.75em;width:calc(100% - 2em);opacity:0;font-size:0}.filepond--data{position:absolute;width:0;height:0;padding:0;margin:0;border:none;visibility:hidden;pointer-events:none;contain:strict}.filepond--drip{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden;opacity:.1;pointer-events:none;border-radius:.5em;background:rgba(0,0,0,.01)}.filepond--drip-blob{-webkit-transform-origin:center center;transform-origin:center center;width:8em;height:8em;margin-left:-4em;margin-top:-4em;background:#292625;border-radius:50%}.filepond--drip-blob,.filepond--drop-label{position:absolute;top:0;left:0;will-change:transform,opacity}.filepond--drop-label{right:0;margin:0;color:#4f4f4f;display:flex;justify-content:center;align-items:center;height:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--drop-label.filepond--drop-label label{display:block;margin:0;padding:.5em}.filepond--drop-label label{cursor:default;font-size:.875em;font-weight:400;text-align:center;line-height:1.5}.filepond--label-action{text-decoration:underline;-webkit-text-decoration-skip:ink;text-decoration-skip-ink:auto;-webkit-text-decoration-color:#a7a4a4;text-decoration-color:#a7a4a4;cursor:pointer}.filepond--root[data-disabled] .filepond--drop-label label{opacity:.5}.filepond--file-action-button.filepond--file-action-button{font-size:1em;width:1.625em;height:1.625em;font-family:inherit;line-height:inherit;margin:0;padding:0;border:none;outline:none;will-change:transform,opacity}.filepond--file-action-button.filepond--file-action-button span{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--file-action-button.filepond--file-action-button svg{width:100%;height:100%}.filepond--file-action-button.filepond--file-action-button:after{position:absolute;left:-.75em;right:-.75em;top:-.75em;bottom:-.75em;content:\\\"\\\"}.filepond--file-action-button{cursor:auto;color:#fff;border-radius:50%;background-color:rgba(0,0,0,.5);background-image:none;box-shadow:0 0 0 0 hsla(0,0%,100%,0);transition:box-shadow .25s ease-in}.filepond--file-action-button:focus,.filepond--file-action-button:hover{box-shadow:0 0 0 .125em hsla(0,0%,100%,.9)}.filepond--file-action-button[disabled]{color:hsla(0,0%,100%,.5);background-color:rgba(0,0,0,.25)}.filepond--file-action-button[hidden]{display:none}.filepond--file-info{position:static;display:flex;flex-direction:column;align-items:flex-start;flex:1;margin:0 .5em 0 0;min-width:0;will-change:transform,opacity;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--file-info *{margin:0}.filepond--file-info .filepond--file-info-main{font-size:.75em;line-height:1.2;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;width:100%}.filepond--file-info .filepond--file-info-sub{font-size:.625em;opacity:.5;transition:opacity .25s ease-in-out;white-space:nowrap}.filepond--file-info .filepond--file-info-sub:empty{display:none}.filepond--file-status{position:static;display:flex;flex-direction:column;align-items:flex-end;flex-grow:0;flex-shrink:0;margin:0;min-width:2.25em;text-align:right;will-change:transform,opacity;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.filepond--file-status *{margin:0;white-space:nowrap}.filepond--file-status .filepond--file-status-main{font-size:.75em;line-height:1.2}.filepond--file-status .filepond--file-status-sub{font-size:.625em;opacity:.5;transition:opacity .25s ease-in-out}.filepond--file-wrapper.filepond--file-wrapper{border:none;margin:0;padding:0;min-width:0;height:100%}.filepond--file-wrapper.filepond--file-wrapper>legend{position:absolute;overflow:hidden;height:1px;width:1px;padding:0;border:0;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);white-space:nowrap}.filepond--file{position:static;display:flex;height:100%;align-items:flex-start;padding:.5625em;color:#fff;border-radius:.5em}.filepond--file .filepond--file-status{margin-left:auto;margin-right:2.25em}.filepond--file .filepond--processing-complete-indicator{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:3}.filepond--file .filepond--file-action-button,.filepond--file .filepond--processing-complete-indicator,.filepond--file .filepond--progress-indicator{position:absolute}.filepond--file [data-align*=left]{left:.5625em}.filepond--file [data-align*=right]{right:.5625em}.filepond--file [data-align*=center]{left:calc(50% - .8125em)}.filepond--file [data-align*=bottom]{bottom:1.125em}.filepond--file [data-align=center]{top:calc(50% - .8125em)}.filepond--file .filepond--progress-indicator{margin-top:.1875em}.filepond--file .filepond--progress-indicator[data-align*=right]{margin-right:.1875em}.filepond--file .filepond--progress-indicator[data-align*=left]{margin-left:.1875em}[data-filepond-item-state*=error] .filepond--file-info,[data-filepond-item-state*=invalid] .filepond--file-info,[data-filepond-item-state=cancelled] .filepond--file-info{margin-right:2.25em}[data-filepond-item-state~=processing] .filepond--file-status-sub{opacity:0}[data-filepond-item-state~=processing] .filepond--action-abort-item-processing~.filepond--file-status .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-error] .filepond--file-status-sub{opacity:0}[data-filepond-item-state=processing-error] .filepond--action-retry-item-processing~.filepond--file-status .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-complete] .filepond--action-revert-item-processing svg{-webkit-animation:fall .5s linear .125s both;animation:fall .5s linear .125s both}[data-filepond-item-state=processing-complete] .filepond--file-status-sub{opacity:.5}[data-filepond-item-state=processing-complete] .filepond--file-info-sub,[data-filepond-item-state=processing-complete] .filepond--processing-complete-indicator:not([style*=hidden])~.filepond--file-status .filepond--file-status-sub{opacity:0}[data-filepond-item-state=processing-complete] .filepond--action-revert-item-processing~.filepond--file-info .filepond--file-info-sub{opacity:.5}[data-filepond-item-state*=error] .filepond--file-wrapper,[data-filepond-item-state*=error] .filepond--panel,[data-filepond-item-state*=invalid] .filepond--file-wrapper,[data-filepond-item-state*=invalid] .filepond--panel{-webkit-animation:shake .65s linear both;animation:shake .65s linear both}[data-filepond-item-state*=busy] .filepond--progress-indicator svg{-webkit-animation:spin 1s linear infinite;animation:spin 1s linear infinite}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@-webkit-keyframes shake{10%,90%{-webkit-transform:translateX(-.0625em);transform:translateX(-.0625em)}20%,80%{-webkit-transform:translateX(.125em);transform:translateX(.125em)}30%,50%,70%{-webkit-transform:translateX(-.25em);transform:translateX(-.25em)}40%,60%{-webkit-transform:translateX(.25em);transform:translateX(.25em)}}@keyframes shake{10%,90%{-webkit-transform:translateX(-.0625em);transform:translateX(-.0625em)}20%,80%{-webkit-transform:translateX(.125em);transform:translateX(.125em)}30%,50%,70%{-webkit-transform:translateX(-.25em);transform:translateX(-.25em)}40%,60%{-webkit-transform:translateX(.25em);transform:translateX(.25em)}}@-webkit-keyframes fall{0%{opacity:0;-webkit-transform:scale(.5);transform:scale(.5);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}70%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}to{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}@keyframes fall{0%{opacity:0;-webkit-transform:scale(.5);transform:scale(.5);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}70%{opacity:1;-webkit-transform:scale(1.1);transform:scale(1.1);-webkit-animation-timing-function:ease-in-out;animation-timing-function:ease-in-out}to{-webkit-transform:scale(1);transform:scale(1);-webkit-animation-timing-function:ease-out;animation-timing-function:ease-out}}.filepond--hopper[data-hopper-state=drag-over]>*{pointer-events:none}.filepond--hopper[data-hopper-state=drag-over]:after{content:\\\"\\\";position:absolute;left:0;top:0;right:0;bottom:0;z-index:100}.filepond--progress-indicator{z-index:103}.filepond--file-action-button{z-index:102}.filepond--file-status{z-index:101}.filepond--file-info{z-index:100}.filepond--item{position:absolute;top:0;left:0;right:0;z-index:1;padding:0;margin:.25em;will-change:transform,opacity}.filepond--item>.filepond--panel{z-index:-1}.filepond--item>.filepond--panel .filepond--panel-bottom{box-shadow:0 .0625em .125em -.0625em rgba(0,0,0,.25)}.filepond--item>.filepond--file-wrapper,.filepond--item>.filepond--panel{transition:opacity .15s ease-out}.filepond--item[data-drag-state]{cursor:-webkit-grab;cursor:grab}.filepond--item[data-drag-state]>.filepond--panel{transition:box-shadow .125s ease-in-out;box-shadow:0 0 0 transparent}.filepond--item[data-drag-state=drag]{cursor:-webkit-grabbing;cursor:grabbing}.filepond--item[data-drag-state=drag]>.filepond--panel{box-shadow:0 .125em .3125em rgba(0,0,0,.325)}.filepond--item[data-drag-state]:not([data-drag-state=idle]){z-index:2}.filepond--item-panel{background-color:#64605e}[data-filepond-item-state=processing-complete] .filepond--item-panel{background-color:#369763}[data-filepond-item-state*=error] .filepond--item-panel,[data-filepond-item-state*=invalid] .filepond--item-panel{background-color:#c44e47}.filepond--item-panel{border-radius:.5em;transition:background-color .25s}.filepond--list-scroller{position:absolute;top:0;left:0;right:0;margin:0;will-change:transform}.filepond--list-scroller[data-state=overflow]{overflow-y:scroll;overflow-x:hidden;-webkit-overflow-scrolling:touch;-webkit-mask:linear-gradient(180deg,#000 calc(100% - .5em),transparent);mask:linear-gradient(180deg,#000 calc(100% - .5em),transparent)}.filepond--list-scroller[data-state=overflow] .filepond--list{bottom:0;right:0}.filepond--list-scroller::-webkit-scrollbar{background:transparent}.filepond--list-scroller::-webkit-scrollbar:vertical{width:1em}.filepond--list-scroller::-webkit-scrollbar:horizontal{height:0}.filepond--list-scroller::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.3);border-radius:99999px;border:.3125em solid transparent;background-clip:content-box}.filepond--list.filepond--list{position:absolute;top:0;margin:0;padding:0;list-style-type:none;will-change:transform}.filepond--list{left:.75em;right:.75em}.filepond--root[data-style-panel-layout~=integrated]{width:100%;height:100%;max-width:none;margin:0}.filepond--root[data-style-panel-layout~=circle] .filepond--panel-root,.filepond--root[data-style-panel-layout~=integrated] .filepond--panel-root{border-radius:0}.filepond--root[data-style-panel-layout~=circle] .filepond--panel-root>*,.filepond--root[data-style-panel-layout~=integrated] .filepond--panel-root>*{display:none}.filepond--root[data-style-panel-layout~=circle] .filepond--drop-label,.filepond--root[data-style-panel-layout~=integrated] .filepond--drop-label{bottom:0;height:auto;display:flex;justify-content:center;align-items:center;z-index:7}.filepond--root[data-style-panel-layout~=circle] .filepond--item-panel,.filepond--root[data-style-panel-layout~=integrated] .filepond--item-panel{display:none}.filepond--root[data-style-panel-layout~=compact] .filepond--list-scroller,.filepond--root[data-style-panel-layout~=integrated] .filepond--list-scroller{overflow:hidden;height:100%;margin-top:0;margin-bottom:0}.filepond--root[data-style-panel-layout~=compact] .filepond--list,.filepond--root[data-style-panel-layout~=integrated] .filepond--list{left:0;right:0;height:100%}.filepond--root[data-style-panel-layout~=compact] .filepond--item,.filepond--root[data-style-panel-layout~=integrated] .filepond--item{margin:0}.filepond--root[data-style-panel-layout~=compact] .filepond--file-wrapper,.filepond--root[data-style-panel-layout~=integrated] .filepond--file-wrapper{height:100%}.filepond--root[data-style-panel-layout~=compact] .filepond--drop-label,.filepond--root[data-style-panel-layout~=integrated] .filepond--drop-label{z-index:7}.filepond--root[data-style-panel-layout~=circle]{border-radius:99999rem;overflow:hidden}.filepond--root[data-style-panel-layout~=circle]>.filepond--panel{border-radius:inherit}.filepond--root[data-style-panel-layout~=circle] .filepond--file-info,.filepond--root[data-style-panel-layout~=circle] .filepond--file-status,.filepond--root[data-style-panel-layout~=circle]>.filepond--panel>*{display:none}@media not all and (min-resolution:0.001dpcm){@supports (-webkit-appearance:none) and (stroke-color:transparent){.filepond--root[data-style-panel-layout~=circle]{will-change:transform}}}.filepond--panel-root{border-radius:.5em;background-color:#f1f0ef}.filepond--panel{position:absolute;left:0;top:0;right:0;margin:0;height:100%!important;pointer-events:none}.filepond-panel:not([data-scalable=false]){height:auto!important}.filepond--panel[data-scalable=false]>div{display:none}.filepond--panel[data-scalable=true]{-webkit-transform-style:preserve-3d;transform-style:preserve-3d;background-color:transparent!important;border:none!important}.filepond--panel-bottom,.filepond--panel-center,.filepond--panel-top{position:absolute;left:0;top:0;right:0;margin:0;padding:0}.filepond--panel-bottom,.filepond--panel-top{height:.5em}.filepond--panel-top{border-bottom-left-radius:0!important;border-bottom-right-radius:0!important;border-bottom:none!important}.filepond--panel-top:after{content:\\\"\\\";position:absolute;height:2px;left:0;right:0;bottom:-1px;background-color:inherit}.filepond--panel-bottom,.filepond--panel-center{will-change:transform;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-origin:left top;transform-origin:left top;-webkit-transform:translate3d(0,.5em,0);transform:translate3d(0,.5em,0)}.filepond--panel-bottom{border-top-left-radius:0!important;border-top-right-radius:0!important;border-top:none!important}.filepond--panel-bottom:before{content:\\\"\\\";position:absolute;height:2px;left:0;right:0;top:-1px;background-color:inherit}.filepond--panel-center{height:100px!important;border-top:none!important;border-bottom:none!important;border-radius:0!important}.filepond--panel-center:not([style]){visibility:hidden}.filepond--progress-indicator{position:static;width:1.25em;height:1.25em;color:#fff;margin:0;pointer-events:none;will-change:transform,opacity}.filepond--progress-indicator svg{width:100%;height:100%;vertical-align:top;transform-box:fill-box}.filepond--progress-indicator path{fill:none;stroke:currentColor}.filepond--list-scroller{z-index:6}.filepond--drop-label{z-index:5}.filepond--drip{z-index:3}.filepond--root>.filepond--panel{z-index:2}.filepond--browser{z-index:1}.filepond--root{box-sizing:border-box;position:relative;margin-bottom:1em;font-size:1rem;line-height:normal;font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol;font-weight:450;text-align:left;text-rendering:optimizeLegibility;direction:ltr;contain:layout style size}.filepond--root *{box-sizing:inherit;line-height:inherit}.filepond--root :not(text){font-size:inherit}.filepond--root[data-disabled]{pointer-events:none}.filepond--root[data-disabled] .filepond--list-scroller{pointer-events:all}.filepond--root[data-disabled] .filepond--list{pointer-events:none}.filepond--root .filepond--drop-label{min-height:4.75em}.filepond--root .filepond--list-scroller{margin-top:1em;margin-bottom:1em}\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/filepond/dist/filepond.min.css\n");

/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MjM1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxjQUFjOztBQUVsRTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/lib/css-base.js\n");

/***/ }),

/***/ "./node_modules/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * FilePondPluginFileValidateType 1.2.5\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n   true\n    ? (module.exports = factory())\n    : undefined;\n})(this, function() {\n  'use strict';\n\n  var plugin = function plugin(_ref) {\n    var addFilter = _ref.addFilter,\n      utils = _ref.utils;\n    // get quick reference to Type utils\n    var Type = utils.Type,\n      isString = utils.isString,\n      replaceInString = utils.replaceInString,\n      guesstimateMimeType = utils.guesstimateMimeType,\n      getExtensionFromFilename = utils.getExtensionFromFilename,\n      getFilenameFromURL = utils.getFilenameFromURL;\n\n    var mimeTypeMatchesWildCard = function mimeTypeMatchesWildCard(\n      mimeType,\n      wildcard\n    ) {\n      var mimeTypeGroup = (/^[^/]+/.exec(mimeType) || []).pop(); // image/png -> image\n      var wildcardGroup = wildcard.slice(0, -2); // image/* -> image\n      return mimeTypeGroup === wildcardGroup;\n    };\n\n    var isValidMimeType = function isValidMimeType(\n      acceptedTypes,\n      userInputType\n    ) {\n      return acceptedTypes.some(function(acceptedType) {\n        // accepted is wildcard mime type\n        if (/\\*$/.test(acceptedType)) {\n          return mimeTypeMatchesWildCard(userInputType, acceptedType);\n        }\n\n        // is normal mime type\n        return acceptedType === userInputType;\n      });\n    };\n\n    var getItemType = function getItemType(item) {\n      // if the item is a url we guess the mime type by the extension\n      var type = '';\n      if (isString(item)) {\n        var filename = getFilenameFromURL(item);\n        var extension = getExtensionFromFilename(filename);\n        if (extension) {\n          type = guesstimateMimeType(extension);\n        }\n      } else {\n        type = item.type;\n      }\n\n      return type;\n    };\n\n    var validateFile = function validateFile(\n      item,\n      acceptedFileTypes,\n      typeDetector\n    ) {\n      // no types defined, everything is allowed \\o/\n      if (acceptedFileTypes.length === 0) {\n        return true;\n      }\n\n      // gets the item type\n      var type = getItemType(item);\n\n      // no type detector, test now\n      if (!typeDetector) {\n        return isValidMimeType(acceptedFileTypes, type);\n      }\n\n      // use type detector\n      return new Promise(function(resolve, reject) {\n        typeDetector(item, type)\n          .then(function(detectedType) {\n            if (isValidMimeType(acceptedFileTypes, detectedType)) {\n              resolve();\n            } else {\n              reject();\n            }\n          })\n          .catch(reject);\n      });\n    };\n\n    var applyMimeTypeMap = function applyMimeTypeMap(map) {\n      return function(acceptedFileType) {\n        return map[acceptedFileType] === null\n          ? false\n          : map[acceptedFileType] || acceptedFileType;\n      };\n    };\n\n    // setup attribute mapping for accept\n    addFilter('SET_ATTRIBUTE_TO_OPTION_MAP', function(map) {\n      return Object.assign(map, {\n        accept: 'acceptedFileTypes'\n      });\n    });\n\n    // filtering if an item is allowed in hopper\n    addFilter('ALLOW_HOPPER_ITEM', function(file, _ref2) {\n      var query = _ref2.query;\n      // if we are not doing file type validation exit\n      if (!query('GET_ALLOW_FILE_TYPE_VALIDATION')) {\n        return true;\n      }\n\n      // we validate the file against the accepted file types\n      return validateFile(file, query('GET_ACCEPTED_FILE_TYPES'));\n    });\n\n    // called for each file that is loaded\n    // right before it is set to the item state\n    // should return a promise\n    addFilter('LOAD_FILE', function(file, _ref3) {\n      var query = _ref3.query;\n      return new Promise(function(resolve, reject) {\n        if (!query('GET_ALLOW_FILE_TYPE_VALIDATION')) {\n          resolve(file);\n          return;\n        }\n\n        var acceptedFileTypes = query('GET_ACCEPTED_FILE_TYPES');\n\n        // custom type detector method\n        var typeDetector = query('GET_FILE_VALIDATE_TYPE_DETECT_TYPE');\n\n        // if invalid, exit here\n        var validationResult = validateFile(\n          file,\n          acceptedFileTypes,\n          typeDetector\n        );\n\n        var handleRejection = function handleRejection() {\n          var acceptedFileTypesMapped = acceptedFileTypes\n            .map(\n              applyMimeTypeMap(\n                query('GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES_MAP')\n              )\n            )\n            .filter(function(label) {\n              return label !== false;\n            });\n\n          reject({\n            status: {\n              main: query('GET_LABEL_FILE_TYPE_NOT_ALLOWED'),\n              sub: replaceInString(\n                query('GET_FILE_VALIDATE_TYPE_LABEL_EXPECTED_TYPES'),\n                {\n                  allTypes: acceptedFileTypesMapped.join(', '),\n                  allButLastType: acceptedFileTypesMapped\n                    .slice(0, -1)\n                    .join(', '),\n                  lastType:\n                    acceptedFileTypesMapped[acceptedFileTypesMapped.length - 1]\n                }\n              )\n            }\n          });\n        };\n\n        // has returned new filename immidiately\n        if (typeof validationResult === 'boolean') {\n          if (!validationResult) {\n            return handleRejection();\n          }\n          return resolve(file);\n        }\n\n        // is promise\n        validationResult\n          .then(function() {\n            resolve(file);\n          })\n          .catch(handleRejection);\n      });\n    });\n\n    // expose plugin\n    return {\n      // default options\n      options: {\n        // Enable or disable file type validation\n        allowFileTypeValidation: [true, Type.BOOLEAN],\n\n        // What file types to accept\n        acceptedFileTypes: [[], Type.ARRAY],\n        // - must be comma separated\n        // - mime types: image/png, image/jpeg, image/gif\n        // - extensions: .png, .jpg, .jpeg ( not enabled yet )\n        // - wildcards: image/*\n\n        // label to show when a type is not allowed\n        labelFileTypeNotAllowed: ['File is of invalid type', Type.STRING],\n\n        // nicer label\n        fileValidateTypeLabelExpectedTypes: [\n          'Expects {allButLastType} or {lastType}',\n          Type.STRING\n        ],\n\n        // map mime types to extensions\n        fileValidateTypeLabelExpectedTypesMap: [{}, Type.OBJECT],\n\n        // Custom function to detect type of file\n        fileValidateTypeDetectType: [null, Type.FUNCTION]\n      }\n    };\n  };\n\n  // fire pluginloaded event if running in browser, this allows registering the plugin when using async script tags\n  var isBrowser =\n    typeof window !== 'undefined' && typeof window.document !== 'undefined';\n  if (isBrowser) {\n    document.dispatchEvent(\n      new CustomEvent('FilePond:pluginloaded', { detail: plugin })\n    );\n  }\n\n  return plugin;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js\n");

/***/ }),

/***/ "./node_modules/filepond/dist/filepond.js":
/*!************************************************!*\
  !*** ./node_modules/filepond/dist/filepond.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * FilePond 4.20.1\n * Licensed under MIT, https://opensource.org/licenses/MIT/\n * Please visit https://pqina.nl/filepond/ for details.\n */\n\n/* eslint-disable */\n\n(function(global, factory) {\n   true\n    ? factory(exports)\n    : undefined;\n})(this, function(exports) {\n  'use strict';\n\n  var isNode = function isNode(value) {\n    return value instanceof HTMLElement;\n  };\n\n  var createStore = function createStore(initialState) {\n    var queries =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var actions =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    // internal state\n    var state = Object.assign({}, initialState);\n\n    // contains all actions for next frame, is clear when actions are requested\n    var actionQueue = [];\n    var dispatchQueue = [];\n\n    // returns a duplicate of the current state\n    var getState = function getState() {\n      return Object.assign({}, state);\n    };\n\n    // returns a duplicate of the actions array and clears the actions array\n    var processActionQueue = function processActionQueue() {\n      // create copy of actions queue\n      var queue = [].concat(actionQueue);\n\n      // clear actions queue (we don't want no double actions)\n      actionQueue.length = 0;\n\n      return queue;\n    };\n\n    // processes actions that might block the main UI thread\n    var processDispatchQueue = function processDispatchQueue() {\n      // create copy of actions queue\n      var queue = [].concat(dispatchQueue);\n\n      // clear actions queue (we don't want no double actions)\n      dispatchQueue.length = 0;\n\n      // now dispatch these actions\n      queue.forEach(function(_ref) {\n        var type = _ref.type,\n          data = _ref.data;\n        dispatch(type, data);\n      });\n    };\n\n    // adds a new action, calls its handler and\n    var dispatch = function dispatch(type, data, isBlocking) {\n      // is blocking action (should never block if document is hidden)\n      if (isBlocking && !document.hidden) {\n        dispatchQueue.push({ type: type, data: data });\n        return;\n      }\n\n      // if this action has a handler, handle the action\n      if (actionHandlers[type]) {\n        actionHandlers[type](data);\n      }\n\n      // now add action\n      actionQueue.push({\n        type: type,\n        data: data\n      });\n    };\n\n    var query = function query(str) {\n      var _queryHandles;\n      for (\n        var _len = arguments.length,\n          args = new Array(_len > 1 ? _len - 1 : 0),\n          _key = 1;\n        _key < _len;\n        _key++\n      ) {\n        args[_key - 1] = arguments[_key];\n      }\n      return queryHandles[str]\n        ? (_queryHandles = queryHandles)[str].apply(_queryHandles, args)\n        : null;\n    };\n\n    var api = {\n      getState: getState,\n      processActionQueue: processActionQueue,\n      processDispatchQueue: processDispatchQueue,\n      dispatch: dispatch,\n      query: query\n    };\n\n    var queryHandles = {};\n    queries.forEach(function(query) {\n      queryHandles = Object.assign({}, query(state), {}, queryHandles);\n    });\n\n    var actionHandlers = {};\n    actions.forEach(function(action) {\n      actionHandlers = Object.assign(\n        {},\n        action(dispatch, query, state),\n        {},\n        actionHandlers\n      );\n    });\n\n    return api;\n  };\n\n  var defineProperty = function defineProperty(obj, property, definition) {\n    if (typeof definition === 'function') {\n      obj[property] = definition;\n      return;\n    }\n    Object.defineProperty(obj, property, Object.assign({}, definition));\n  };\n\n  var forin = function forin(obj, cb) {\n    for (var key in obj) {\n      if (!obj.hasOwnProperty(key)) {\n        continue;\n      }\n\n      cb(key, obj[key]);\n    }\n  };\n\n  var createObject = function createObject(definition) {\n    var obj = {};\n    forin(definition, function(property) {\n      defineProperty(obj, property, definition[property]);\n    });\n    return obj;\n  };\n\n  var attr = function attr(node, name) {\n    var value =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (value === null) {\n      return node.getAttribute(name) || node.hasAttribute(name);\n    }\n    node.setAttribute(name, value);\n  };\n\n  var ns = 'http://www.w3.org/2000/svg';\n  var svgElements = ['svg', 'path']; // only svg elements used\n\n  var isSVGElement = function isSVGElement(tag) {\n    return svgElements.includes(tag);\n  };\n\n  var createElement = function createElement(tag, className) {\n    var attributes =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (typeof className === 'object') {\n      attributes = className;\n      className = null;\n    }\n    var element = isSVGElement(tag)\n      ? document.createElementNS(ns, tag)\n      : document.createElement(tag);\n    if (className) {\n      if (isSVGElement(tag)) {\n        attr(element, 'class', className);\n      } else {\n        element.className = className;\n      }\n    }\n    forin(attributes, function(name, value) {\n      attr(element, name, value);\n    });\n    return element;\n  };\n\n  var appendChild = function appendChild(parent) {\n    return function(child, index) {\n      if (typeof index !== 'undefined' && parent.children[index]) {\n        parent.insertBefore(child, parent.children[index]);\n      } else {\n        parent.appendChild(child);\n      }\n    };\n  };\n\n  var appendChildView = function appendChildView(parent, childViews) {\n    return function(view, index) {\n      if (typeof index !== 'undefined') {\n        childViews.splice(index, 0, view);\n      } else {\n        childViews.push(view);\n      }\n\n      return view;\n    };\n  };\n\n  var removeChildView = function removeChildView(parent, childViews) {\n    return function(view) {\n      // remove from child views\n      childViews.splice(childViews.indexOf(view), 1);\n\n      // remove the element\n      if (view.element.parentNode) {\n        parent.removeChild(view.element);\n      }\n\n      return view;\n    };\n  };\n\n  var IS_BROWSER = (function() {\n    return (\n      typeof window !== 'undefined' && typeof window.document !== 'undefined'\n    );\n  })();\n  var isBrowser = function isBrowser() {\n    return IS_BROWSER;\n  };\n\n  var testElement = isBrowser() ? createElement('svg') : {};\n  var getChildCount =\n    'children' in testElement\n      ? function(el) {\n          return el.children.length;\n        }\n      : function(el) {\n          return el.childNodes.length;\n        };\n\n  var getViewRect = function getViewRect(\n    elementRect,\n    childViews,\n    offset,\n    scale\n  ) {\n    var left = offset[0] || elementRect.left;\n    var top = offset[1] || elementRect.top;\n    var right = left + elementRect.width;\n    var bottom = top + elementRect.height * (scale[1] || 1);\n\n    var rect = {\n      // the rectangle of the element itself\n      element: Object.assign({}, elementRect),\n\n      // the rectangle of the element expanded to contain its children, does not include any margins\n      inner: {\n        left: elementRect.left,\n        top: elementRect.top,\n        right: elementRect.right,\n        bottom: elementRect.bottom\n      },\n\n      // the rectangle of the element expanded to contain its children including own margin and child margins\n      // margins will be added after we've recalculated the size\n      outer: {\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom\n      }\n    };\n\n    // expand rect to fit all child rectangles\n    childViews\n      .filter(function(childView) {\n        return !childView.isRectIgnored();\n      })\n      .map(function(childView) {\n        return childView.rect;\n      })\n      .forEach(function(childViewRect) {\n        expandRect(rect.inner, Object.assign({}, childViewRect.inner));\n        expandRect(rect.outer, Object.assign({}, childViewRect.outer));\n      });\n\n    // calculate inner width and height\n    calculateRectSize(rect.inner);\n\n    // append additional margin (top and left margins are included in top and left automatically)\n    rect.outer.bottom += rect.element.marginBottom;\n    rect.outer.right += rect.element.marginRight;\n\n    // calculate outer width and height\n    calculateRectSize(rect.outer);\n\n    return rect;\n  };\n\n  var expandRect = function expandRect(parent, child) {\n    // adjust for parent offset\n    child.top += parent.top;\n    child.right += parent.left;\n    child.bottom += parent.top;\n    child.left += parent.left;\n\n    if (child.bottom > parent.bottom) {\n      parent.bottom = child.bottom;\n    }\n\n    if (child.right > parent.right) {\n      parent.right = child.right;\n    }\n  };\n\n  var calculateRectSize = function calculateRectSize(rect) {\n    rect.width = rect.right - rect.left;\n    rect.height = rect.bottom - rect.top;\n  };\n\n  var isNumber = function isNumber(value) {\n    return typeof value === 'number';\n  };\n\n  /**\n   * Determines if position is at destination\n   * @param position\n   * @param destination\n   * @param velocity\n   * @param errorMargin\n   * @returns {boolean}\n   */\n  var thereYet = function thereYet(position, destination, velocity) {\n    var errorMargin =\n      arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.001;\n    return (\n      Math.abs(position - destination) < errorMargin &&\n      Math.abs(velocity) < errorMargin\n    );\n  };\n\n  /**\n   * Spring animation\n   */\n  var spring =\n    // default options\n    function spring() // method definition\n    {\n      var _ref =\n          arguments.length > 0 && arguments[0] !== undefined\n            ? arguments[0]\n            : {},\n        _ref$stiffness = _ref.stiffness,\n        stiffness = _ref$stiffness === void 0 ? 0.5 : _ref$stiffness,\n        _ref$damping = _ref.damping,\n        damping = _ref$damping === void 0 ? 0.75 : _ref$damping,\n        _ref$mass = _ref.mass,\n        mass = _ref$mass === void 0 ? 10 : _ref$mass;\n      var target = null;\n      var position = null;\n      var velocity = 0;\n      var resting = false;\n\n      // updates spring state\n      var interpolate = function interpolate(ts, skipToEndState) {\n        // in rest, don't animate\n        if (resting) return;\n\n        // need at least a target or position to do springy things\n        if (!(isNumber(target) && isNumber(position))) {\n          resting = true;\n          velocity = 0;\n          return;\n        }\n\n        // calculate spring force\n        var f = -(position - target) * stiffness;\n\n        // update velocity by adding force based on mass\n        velocity += f / mass;\n\n        // update position by adding velocity\n        position += velocity;\n\n        // slow down based on amount of damping\n        velocity *= damping;\n\n        // we've arrived if we're near target and our velocity is near zero\n        if (thereYet(position, target, velocity) || skipToEndState) {\n          position = target;\n          velocity = 0;\n          resting = true;\n\n          // we done\n          api.onupdate(position);\n          api.oncomplete(position);\n        } else {\n          // progress update\n          api.onupdate(position);\n        }\n      };\n\n      /**\n       * Set new target value\n       * @param value\n       */\n      var setTarget = function setTarget(value) {\n        // if currently has no position, set target and position to this value\n        if (isNumber(value) && !isNumber(position)) {\n          position = value;\n        }\n\n        // next target value will not be animated to\n        if (target === null) {\n          target = value;\n          position = value;\n        }\n\n        // let start moving to target\n        target = value;\n\n        // already at target\n        if (position === target || typeof target === 'undefined') {\n          // now resting as target is current position, stop moving\n          resting = true;\n          velocity = 0;\n\n          // done!\n          api.onupdate(position);\n          api.oncomplete(position);\n\n          return;\n        }\n\n        resting = false;\n      };\n\n      // need 'api' to call onupdate callback\n      var api = createObject({\n        interpolate: interpolate,\n        target: {\n          set: setTarget,\n          get: function get() {\n            return target;\n          }\n        },\n\n        resting: {\n          get: function get() {\n            return resting;\n          }\n        },\n\n        onupdate: function onupdate(value) {},\n        oncomplete: function oncomplete(value) {}\n      });\n\n      return api;\n    };\n\n  var easeLinear = function easeLinear(t) {\n    return t;\n  };\n  var easeInOutQuad = function easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  };\n\n  var tween =\n    // default values\n    function tween() // method definition\n    {\n      var _ref =\n          arguments.length > 0 && arguments[0] !== undefined\n            ? arguments[0]\n            : {},\n        _ref$duration = _ref.duration,\n        duration = _ref$duration === void 0 ? 500 : _ref$duration,\n        _ref$easing = _ref.easing,\n        easing = _ref$easing === void 0 ? easeInOutQuad : _ref$easing,\n        _ref$delay = _ref.delay,\n        delay = _ref$delay === void 0 ? 0 : _ref$delay;\n      var start = null;\n      var t;\n      var p;\n      var resting = true;\n      var reverse = false;\n      var target = null;\n\n      var interpolate = function interpolate(ts, skipToEndState) {\n        if (resting || target === null) return;\n\n        if (start === null) {\n          start = ts;\n        }\n\n        if (ts - start < delay) return;\n\n        t = ts - start - delay;\n\n        if (t >= duration || skipToEndState) {\n          t = 1;\n          p = reverse ? 0 : 1;\n          api.onupdate(p * target);\n          api.oncomplete(p * target);\n          resting = true;\n        } else {\n          p = t / duration;\n          api.onupdate((t >= 0 ? easing(reverse ? 1 - p : p) : 0) * target);\n        }\n      };\n\n      // need 'api' to call onupdate callback\n      var api = createObject({\n        interpolate: interpolate,\n        target: {\n          get: function get() {\n            return reverse ? 0 : target;\n          },\n          set: function set(value) {\n            // is initial value\n            if (target === null) {\n              target = value;\n              api.onupdate(value);\n              api.oncomplete(value);\n              return;\n            }\n\n            // want to tween to a smaller value and have a current value\n            if (value < target) {\n              target = 1;\n              reverse = true;\n            } else {\n              // not tweening to a smaller value\n              reverse = false;\n              target = value;\n            }\n\n            // let's go!\n            resting = false;\n            start = null;\n          }\n        },\n\n        resting: {\n          get: function get() {\n            return resting;\n          }\n        },\n\n        onupdate: function onupdate(value) {},\n        oncomplete: function oncomplete(value) {}\n      });\n\n      return api;\n    };\n\n  var animator = {\n    spring: spring,\n    tween: tween\n  };\n\n  /*\n                       { type: 'spring', stiffness: .5, damping: .75, mass: 10 };\n                       { translation: { type: 'spring', ... }, ... }\n                       { translation: { x: { type: 'spring', ... } } }\n                      */\n  var createAnimator = function createAnimator(definition, category, property) {\n    // default is single definition\n    // we check if transform is set, if so, we check if property is set\n    var def =\n      definition[category] && typeof definition[category][property] === 'object'\n        ? definition[category][property]\n        : definition[category] || definition;\n\n    var type = typeof def === 'string' ? def : def.type;\n    var props = typeof def === 'object' ? Object.assign({}, def) : {};\n\n    return animator[type] ? animator[type](props) : null;\n  };\n\n  var addGetSet = function addGetSet(keys, obj, props) {\n    var overwrite =\n      arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    obj = Array.isArray(obj) ? obj : [obj];\n    obj.forEach(function(o) {\n      keys.forEach(function(key) {\n        var name = key;\n        var getter = function getter() {\n          return props[key];\n        };\n        var setter = function setter(value) {\n          return (props[key] = value);\n        };\n\n        if (typeof key === 'object') {\n          name = key.key;\n          getter = key.getter || getter;\n          setter = key.setter || setter;\n        }\n\n        if (o[name] && !overwrite) {\n          return;\n        }\n\n        o[name] = {\n          get: getter,\n          set: setter\n        };\n      });\n    });\n  };\n\n  // add to state,\n  // add getters and setters to internal and external api (if not set)\n  // setup animators\n\n  var animations = function animations(_ref) {\n    var mixinConfig = _ref.mixinConfig,\n      viewProps = _ref.viewProps,\n      viewInternalAPI = _ref.viewInternalAPI,\n      viewExternalAPI = _ref.viewExternalAPI;\n    // initial properties\n    var initialProps = Object.assign({}, viewProps);\n\n    // list of all active animations\n    var animations = [];\n\n    // setup animators\n    forin(mixinConfig, function(property, animation) {\n      var animator = createAnimator(animation);\n      if (!animator) {\n        return;\n      }\n\n      // when the animator updates, update the view state value\n      animator.onupdate = function(value) {\n        viewProps[property] = value;\n      };\n\n      // set animator target\n      animator.target = initialProps[property];\n\n      // when value is set, set the animator target value\n      var prop = {\n        key: property,\n        setter: function setter(value) {\n          // if already at target, we done!\n          if (animator.target === value) {\n            return;\n          }\n\n          animator.target = value;\n        },\n        getter: function getter() {\n          return viewProps[property];\n        }\n      };\n\n      // add getters and setters\n      addGetSet([prop], [viewInternalAPI, viewExternalAPI], viewProps, true);\n\n      // add it to the list for easy updating from the _write method\n      animations.push(animator);\n    });\n\n    // expose internal write api\n    return {\n      write: function write(ts) {\n        var skipToEndState = document.hidden;\n        var resting = true;\n        animations.forEach(function(animation) {\n          if (!animation.resting) resting = false;\n          animation.interpolate(ts, skipToEndState);\n        });\n        return resting;\n      },\n      destroy: function destroy() {}\n    };\n  };\n\n  var addEvent = function addEvent(element) {\n    return function(type, fn) {\n      element.addEventListener(type, fn);\n    };\n  };\n\n  var removeEvent = function removeEvent(element) {\n    return function(type, fn) {\n      element.removeEventListener(type, fn);\n    };\n  };\n\n  // mixin\n  var listeners = function listeners(_ref) {\n    var mixinConfig = _ref.mixinConfig,\n      viewProps = _ref.viewProps,\n      viewInternalAPI = _ref.viewInternalAPI,\n      viewExternalAPI = _ref.viewExternalAPI,\n      viewState = _ref.viewState,\n      view = _ref.view;\n    var events = [];\n\n    var add = addEvent(view.element);\n    var remove = removeEvent(view.element);\n\n    viewExternalAPI.on = function(type, fn) {\n      events.push({\n        type: type,\n        fn: fn\n      });\n\n      add(type, fn);\n    };\n\n    viewExternalAPI.off = function(type, fn) {\n      events.splice(\n        events.findIndex(function(event) {\n          return event.type === type && event.fn === fn;\n        }),\n        1\n      );\n\n      remove(type, fn);\n    };\n\n    return {\n      write: function write() {\n        // not busy\n        return true;\n      },\n      destroy: function destroy() {\n        events.forEach(function(event) {\n          remove(event.type, event.fn);\n        });\n      }\n    };\n  };\n\n  // add to external api and link to props\n\n  var apis = function apis(_ref) {\n    var mixinConfig = _ref.mixinConfig,\n      viewProps = _ref.viewProps,\n      viewExternalAPI = _ref.viewExternalAPI;\n    addGetSet(mixinConfig, viewExternalAPI, viewProps);\n  };\n\n  var isDefined = function isDefined(value) {\n    return value != null;\n  };\n\n  // add to state,\n  // add getters and setters to internal and external api (if not set)\n  // set initial state based on props in viewProps\n  // apply as transforms each frame\n\n  var defaults = {\n    opacity: 1,\n    scaleX: 1,\n    scaleY: 1,\n    translateX: 0,\n    translateY: 0,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 0,\n    originX: 0,\n    originY: 0\n  };\n\n  var styles = function styles(_ref) {\n    var mixinConfig = _ref.mixinConfig,\n      viewProps = _ref.viewProps,\n      viewInternalAPI = _ref.viewInternalAPI,\n      viewExternalAPI = _ref.viewExternalAPI,\n      view = _ref.view;\n    // initial props\n    var initialProps = Object.assign({}, viewProps);\n\n    // current props\n    var currentProps = {};\n\n    // we will add those properties to the external API and link them to the viewState\n    addGetSet(mixinConfig, [viewInternalAPI, viewExternalAPI], viewProps);\n\n    // override rect on internal and external rect getter so it takes in account transforms\n    var getOffset = function getOffset() {\n      return [viewProps['translateX'] || 0, viewProps['translateY'] || 0];\n    };\n\n    var getScale = function getScale() {\n      return [viewProps['scaleX'] || 0, viewProps['scaleY'] || 0];\n    };\n    var getRect = function getRect() {\n      return view.rect\n        ? getViewRect(view.rect, view.childViews, getOffset(), getScale())\n        : null;\n    };\n    viewInternalAPI.rect = { get: getRect };\n    viewExternalAPI.rect = { get: getRect };\n\n    // apply view props\n    mixinConfig.forEach(function(key) {\n      viewProps[key] =\n        typeof initialProps[key] === 'undefined'\n          ? defaults[key]\n          : initialProps[key];\n    });\n\n    // expose api\n    return {\n      write: function write() {\n        // see if props have changed\n        if (!propsHaveChanged(currentProps, viewProps)) {\n          return;\n        }\n\n        // moves element to correct position on screen\n        applyStyles(view.element, viewProps);\n\n        // store new transforms\n        Object.assign(currentProps, Object.assign({}, viewProps));\n\n        // no longer busy\n        return true;\n      },\n      destroy: function destroy() {}\n    };\n  };\n\n  var propsHaveChanged = function propsHaveChanged(currentProps, newProps) {\n    // different amount of keys\n    if (Object.keys(currentProps).length !== Object.keys(newProps).length) {\n      return true;\n    }\n\n    // lets analyze the individual props\n    for (var prop in newProps) {\n      if (newProps[prop] !== currentProps[prop]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var applyStyles = function applyStyles(element, _ref2) {\n    var opacity = _ref2.opacity,\n      perspective = _ref2.perspective,\n      translateX = _ref2.translateX,\n      translateY = _ref2.translateY,\n      scaleX = _ref2.scaleX,\n      scaleY = _ref2.scaleY,\n      rotateX = _ref2.rotateX,\n      rotateY = _ref2.rotateY,\n      rotateZ = _ref2.rotateZ,\n      originX = _ref2.originX,\n      originY = _ref2.originY,\n      width = _ref2.width,\n      height = _ref2.height;\n\n    var transforms = '';\n    var styles = '';\n\n    // handle transform origin\n    if (isDefined(originX) || isDefined(originY)) {\n      styles +=\n        'transform-origin: ' + (originX || 0) + 'px ' + (originY || 0) + 'px;';\n    }\n\n    // transform order is relevant\n    // 0. perspective\n    if (isDefined(perspective)) {\n      transforms += 'perspective(' + perspective + 'px) ';\n    }\n\n    // 1. translate\n    if (isDefined(translateX) || isDefined(translateY)) {\n      transforms +=\n        'translate3d(' +\n        (translateX || 0) +\n        'px, ' +\n        (translateY || 0) +\n        'px, 0) ';\n    }\n\n    // 2. scale\n    if (isDefined(scaleX) || isDefined(scaleY)) {\n      transforms +=\n        'scale3d(' +\n        (isDefined(scaleX) ? scaleX : 1) +\n        ', ' +\n        (isDefined(scaleY) ? scaleY : 1) +\n        ', 1) ';\n    }\n\n    // 3. rotate\n    if (isDefined(rotateZ)) {\n      transforms += 'rotateZ(' + rotateZ + 'rad) ';\n    }\n\n    if (isDefined(rotateX)) {\n      transforms += 'rotateX(' + rotateX + 'rad) ';\n    }\n\n    if (isDefined(rotateY)) {\n      transforms += 'rotateY(' + rotateY + 'rad) ';\n    }\n\n    // add transforms\n    if (transforms.length) {\n      styles += 'transform:' + transforms + ';';\n    }\n\n    // add opacity\n    if (isDefined(opacity)) {\n      styles += 'opacity:' + opacity + ';';\n\n      // if we reach zero, we make the element inaccessible\n      if (opacity === 0) {\n        styles += 'visibility:hidden;';\n      }\n\n      // if we're below 100% opacity this element can't be clicked\n      if (opacity < 1) {\n        styles += 'pointer-events:none;';\n      }\n    }\n\n    // add height\n    if (isDefined(height)) {\n      styles += 'height:' + height + 'px;';\n    }\n\n    // add width\n    if (isDefined(width)) {\n      styles += 'width:' + width + 'px;';\n    }\n\n    // apply styles\n    var elementCurrentStyle = element.elementCurrentStyle || '';\n\n    // if new styles does not match current styles, lets update!\n    if (\n      styles.length !== elementCurrentStyle.length ||\n      styles !== elementCurrentStyle\n    ) {\n      element.style.cssText = styles;\n      // store current styles so we can compare them to new styles later on\n      // _not_ getting the style value is faster\n      element.elementCurrentStyle = styles;\n    }\n  };\n\n  var Mixins = {\n    styles: styles,\n    listeners: listeners,\n    animations: animations,\n    apis: apis\n  };\n\n  var updateRect = function updateRect() {\n    var rect =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var element =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var style =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (!element.layoutCalculated) {\n      rect.paddingTop = parseInt(style.paddingTop, 10) || 0;\n      rect.marginTop = parseInt(style.marginTop, 10) || 0;\n      rect.marginRight = parseInt(style.marginRight, 10) || 0;\n      rect.marginBottom = parseInt(style.marginBottom, 10) || 0;\n      rect.marginLeft = parseInt(style.marginLeft, 10) || 0;\n      element.layoutCalculated = true;\n    }\n\n    rect.left = element.offsetLeft || 0;\n    rect.top = element.offsetTop || 0;\n    rect.width = element.offsetWidth || 0;\n    rect.height = element.offsetHeight || 0;\n\n    rect.right = rect.left + rect.width;\n    rect.bottom = rect.top + rect.height;\n\n    rect.scrollTop = element.scrollTop;\n\n    rect.hidden = element.offsetParent === null;\n\n    return rect;\n  };\n\n  var createView =\n    // default view definition\n    function createView() {\n      var _ref =\n          arguments.length > 0 && arguments[0] !== undefined\n            ? arguments[0]\n            : {},\n        _ref$tag = _ref.tag,\n        tag = _ref$tag === void 0 ? 'div' : _ref$tag,\n        _ref$name = _ref.name,\n        name = _ref$name === void 0 ? null : _ref$name,\n        _ref$attributes = _ref.attributes,\n        attributes = _ref$attributes === void 0 ? {} : _ref$attributes,\n        _ref$read = _ref.read,\n        read = _ref$read === void 0 ? function() {} : _ref$read,\n        _ref$write = _ref.write,\n        write = _ref$write === void 0 ? function() {} : _ref$write,\n        _ref$create = _ref.create,\n        create = _ref$create === void 0 ? function() {} : _ref$create,\n        _ref$destroy = _ref.destroy,\n        destroy = _ref$destroy === void 0 ? function() {} : _ref$destroy,\n        _ref$filterFrameActio = _ref.filterFrameActionsForChild,\n        filterFrameActionsForChild =\n          _ref$filterFrameActio === void 0\n            ? function(child, actions) {\n                return actions;\n              }\n            : _ref$filterFrameActio,\n        _ref$didCreateView = _ref.didCreateView,\n        didCreateView =\n          _ref$didCreateView === void 0 ? function() {} : _ref$didCreateView,\n        _ref$didWriteView = _ref.didWriteView,\n        didWriteView =\n          _ref$didWriteView === void 0 ? function() {} : _ref$didWriteView,\n        _ref$ignoreRect = _ref.ignoreRect,\n        ignoreRect = _ref$ignoreRect === void 0 ? false : _ref$ignoreRect,\n        _ref$ignoreRectUpdate = _ref.ignoreRectUpdate,\n        ignoreRectUpdate =\n          _ref$ignoreRectUpdate === void 0 ? false : _ref$ignoreRectUpdate,\n        _ref$mixins = _ref.mixins,\n        mixins = _ref$mixins === void 0 ? [] : _ref$mixins;\n      return function(\n        // each view requires reference to store\n        store\n      ) {\n        var props =\n          arguments.length > 1 && arguments[1] !== undefined\n            ? arguments[1]\n            : {};\n        // root element should not be changed\n        var element = createElement(tag, 'filepond--' + name, attributes);\n\n        // style reference should also not be changed\n        var style = window.getComputedStyle(element, null);\n\n        // element rectangle\n        var rect = updateRect();\n        var frameRect = null;\n\n        // rest state\n        var isResting = false;\n\n        // pretty self explanatory\n        var childViews = [];\n\n        // loaded mixins\n        var activeMixins = [];\n\n        // references to created children\n        var ref = {};\n\n        // state used for each instance\n        var state = {};\n\n        // list of writers that will be called to update this view\n        var writers = [\n          write // default writer\n        ];\n\n        var readers = [\n          read // default reader\n        ];\n\n        var destroyers = [\n          destroy // default destroy\n        ];\n\n        // core view methods\n        var getElement = function getElement() {\n          return element;\n        };\n        var getChildViews = function getChildViews() {\n          return childViews.concat();\n        };\n        var getReference = function getReference() {\n          return ref;\n        };\n        var createChildView = function createChildView(store) {\n          return function(view, props) {\n            return view(store, props);\n          };\n        };\n        var getRect = function getRect() {\n          if (frameRect) {\n            return frameRect;\n          }\n          frameRect = getViewRect(rect, childViews, [0, 0], [1, 1]);\n          return frameRect;\n        };\n        var getStyle = function getStyle() {\n          return style;\n        };\n\n        /**\n         * Read data from DOM\n         * @private\n         */\n        var _read = function _read() {\n          frameRect = null;\n\n          // read child views\n          childViews.forEach(function(child) {\n            return child._read();\n          });\n\n          var shouldUpdate = !(ignoreRectUpdate && rect.width && rect.height);\n          if (shouldUpdate) {\n            updateRect(rect, element, style);\n          }\n\n          // readers\n          var api = { root: internalAPI, props: props, rect: rect };\n          readers.forEach(function(reader) {\n            return reader(api);\n          });\n        };\n\n        /**\n         * Write data to DOM\n         * @private\n         */\n        var _write = function _write(ts, frameActions, shouldOptimize) {\n          // if no actions, we assume that the view is resting\n          var resting = frameActions.length === 0;\n\n          // writers\n          writers.forEach(function(writer) {\n            var writerResting = writer({\n              props: props,\n              root: internalAPI,\n              actions: frameActions,\n              timestamp: ts,\n              shouldOptimize: shouldOptimize\n            });\n\n            if (writerResting === false) {\n              resting = false;\n            }\n          });\n\n          // run mixins\n          activeMixins.forEach(function(mixin) {\n            // if one of the mixins is still busy after write operation, we are not resting\n            var mixinResting = mixin.write(ts);\n            if (mixinResting === false) {\n              resting = false;\n            }\n          });\n\n          // updates child views that are currently attached to the DOM\n          childViews\n            .filter(function(child) {\n              return !!child.element.parentNode;\n            })\n            .forEach(function(child) {\n              // if a child view is not resting, we are not resting\n              var childResting = child._write(\n                ts,\n                filterFrameActionsForChild(child, frameActions),\n                shouldOptimize\n              );\n\n              if (!childResting) {\n                resting = false;\n              }\n            });\n\n          // append new elements to DOM and update those\n          childViews\n            //.filter(child => !child.element.parentNode)\n            .forEach(function(child, index) {\n              // skip\n              if (child.element.parentNode) {\n                return;\n              }\n\n              // append to DOM\n              internalAPI.appendChild(child.element, index);\n\n              // call read (need to know the size of these elements)\n              child._read();\n\n              // re-call write\n              child._write(\n                ts,\n                filterFrameActionsForChild(child, frameActions),\n                shouldOptimize\n              );\n\n              // we just added somthing to the dom, no rest\n              resting = false;\n            });\n\n          // update resting state\n          isResting = resting;\n\n          didWriteView({\n            props: props,\n            root: internalAPI,\n            actions: frameActions,\n            timestamp: ts\n          });\n\n          // let parent know if we are resting\n          return resting;\n        };\n\n        var _destroy = function _destroy() {\n          activeMixins.forEach(function(mixin) {\n            return mixin.destroy();\n          });\n          destroyers.forEach(function(destroyer) {\n            destroyer({ root: internalAPI, props: props });\n          });\n          childViews.forEach(function(child) {\n            return child._destroy();\n          });\n        };\n\n        // sharedAPI\n        var sharedAPIDefinition = {\n          element: {\n            get: getElement\n          },\n\n          style: {\n            get: getStyle\n          },\n\n          childViews: {\n            get: getChildViews\n          }\n        };\n\n        // private API definition\n        var internalAPIDefinition = Object.assign({}, sharedAPIDefinition, {\n          rect: {\n            get: getRect\n          },\n\n          // access to custom children references\n          ref: {\n            get: getReference\n          },\n\n          // dom modifiers\n          is: function is(needle) {\n            return name === needle;\n          },\n          appendChild: appendChild(element),\n          createChildView: createChildView(store),\n          linkView: function linkView(view) {\n            childViews.push(view);\n            return view;\n          },\n          unlinkView: function unlinkView(view) {\n            childViews.splice(childViews.indexOf(view), 1);\n          },\n          appendChildView: appendChildView(element, childViews),\n          removeChildView: removeChildView(element, childViews),\n          registerWriter: function registerWriter(writer) {\n            return writers.push(writer);\n          },\n          registerReader: function registerReader(reader) {\n            return readers.push(reader);\n          },\n          registerDestroyer: function registerDestroyer(destroyer) {\n            return destroyers.push(destroyer);\n          },\n          invalidateLayout: function invalidateLayout() {\n            return (element.layoutCalculated = false);\n          },\n\n          // access to data store\n          dispatch: store.dispatch,\n          query: store.query\n        });\n\n        // public view API methods\n        var externalAPIDefinition = {\n          element: {\n            get: getElement\n          },\n\n          childViews: {\n            get: getChildViews\n          },\n\n          rect: {\n            get: getRect\n          },\n\n          resting: {\n            get: function get() {\n              return isResting;\n            }\n          },\n\n          isRectIgnored: function isRectIgnored() {\n            return ignoreRect;\n          },\n          _read: _read,\n          _write: _write,\n          _destroy: _destroy\n        };\n\n        // mixin API methods\n        var mixinAPIDefinition = Object.assign({}, sharedAPIDefinition, {\n          rect: {\n            get: function get() {\n              return rect;\n            }\n          }\n        });\n\n        // add mixin functionality\n        Object.keys(mixins)\n          .sort(function(a, b) {\n            // move styles to the back of the mixin list (so adjustments of other mixins are applied to the props correctly)\n            if (a === 'styles') {\n              return 1;\n            } else if (b === 'styles') {\n              return -1;\n            }\n            return 0;\n          })\n          .forEach(function(key) {\n            var mixinAPI = Mixins[key]({\n              mixinConfig: mixins[key],\n              viewProps: props,\n              viewState: state,\n              viewInternalAPI: internalAPIDefinition,\n              viewExternalAPI: externalAPIDefinition,\n              view: createObject(mixinAPIDefinition)\n            });\n\n            if (mixinAPI) {\n              activeMixins.push(mixinAPI);\n            }\n          });\n\n        // construct private api\n        var internalAPI = createObject(internalAPIDefinition);\n\n        // create the view\n        create({\n          root: internalAPI,\n          props: props\n        });\n\n        // append created child views to root node\n        var childCount = getChildCount(element); // need to know the current child count so appending happens in correct order\n        childViews.forEach(function(child, index) {\n          internalAPI.appendChild(child.element, childCount + index);\n        });\n\n        // call did create\n        didCreateView(internalAPI);\n\n        // expose public api\n        return createObject(externalAPIDefinition);\n      };\n    };\n\n  var createPainter = function createPainter(read, write) {\n    var fps =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60;\n\n    var name = '__framePainter';\n\n    // set global painter\n    if (window[name]) {\n      window[name].readers.push(read);\n      window[name].writers.push(write);\n      return;\n    }\n\n    window[name] = {\n      readers: [read],\n      writers: [write]\n    };\n\n    var painter = window[name];\n\n    var interval = 1000 / fps;\n    var last = null;\n    var id = null;\n    var requestTick = null;\n    var cancelTick = null;\n\n    var setTimerType = function setTimerType() {\n      if (document.hidden) {\n        requestTick = function requestTick() {\n          return window.setTimeout(function() {\n            return tick(performance.now());\n          }, interval);\n        };\n        cancelTick = function cancelTick() {\n          return window.clearTimeout(id);\n        };\n      } else {\n        requestTick = function requestTick() {\n          return window.requestAnimationFrame(tick);\n        };\n        cancelTick = function cancelTick() {\n          return window.cancelAnimationFrame(id);\n        };\n      }\n    };\n\n    document.addEventListener('visibilitychange', function() {\n      if (cancelTick) cancelTick();\n      setTimerType();\n      tick(performance.now());\n    });\n\n    var tick = function tick(ts) {\n      // queue next tick\n      id = requestTick(tick);\n\n      // limit fps\n      if (!last) {\n        last = ts;\n      }\n\n      var delta = ts - last;\n\n      if (delta <= interval) {\n        // skip frame\n        return;\n      }\n\n      // align next frame\n      last = ts - (delta % interval);\n\n      // update view\n      painter.readers.forEach(function(read) {\n        return read();\n      });\n      painter.writers.forEach(function(write) {\n        return write(ts);\n      });\n    };\n\n    setTimerType();\n    tick(performance.now());\n\n    return {\n      pause: function pause() {\n        cancelTick(id);\n      }\n    };\n  };\n\n  var createRoute = function createRoute(routes, fn) {\n    return function(_ref) {\n      var root = _ref.root,\n        props = _ref.props,\n        _ref$actions = _ref.actions,\n        actions = _ref$actions === void 0 ? [] : _ref$actions,\n        timestamp = _ref.timestamp,\n        shouldOptimize = _ref.shouldOptimize;\n      actions\n        .filter(function(action) {\n          return routes[action.type];\n        })\n        .forEach(function(action) {\n          return routes[action.type]({\n            root: root,\n            props: props,\n            action: action.data,\n            timestamp: timestamp,\n            shouldOptimize: shouldOptimize\n          });\n        });\n\n      if (fn) {\n        fn({\n          root: root,\n          props: props,\n          actions: actions,\n          timestamp: timestamp,\n          shouldOptimize: shouldOptimize\n        });\n      }\n    };\n  };\n\n  var insertBefore = function insertBefore(newNode, referenceNode) {\n    return referenceNode.parentNode.insertBefore(newNode, referenceNode);\n  };\n\n  var insertAfter = function insertAfter(newNode, referenceNode) {\n    return referenceNode.parentNode.insertBefore(\n      newNode,\n      referenceNode.nextSibling\n    );\n  };\n\n  var isArray = function isArray(value) {\n    return Array.isArray(value);\n  };\n\n  var isEmpty = function isEmpty(value) {\n    return value == null;\n  };\n\n  var trim = function trim(str) {\n    return str.trim();\n  };\n\n  var toString = function toString(value) {\n    return '' + value;\n  };\n\n  var toArray = function toArray(value) {\n    var splitter =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n    if (isEmpty(value)) {\n      return [];\n    }\n    if (isArray(value)) {\n      return value;\n    }\n    return toString(value)\n      .split(splitter)\n      .map(trim)\n      .filter(function(str) {\n        return str.length;\n      });\n  };\n\n  var isBoolean = function isBoolean(value) {\n    return typeof value === 'boolean';\n  };\n\n  var toBoolean = function toBoolean(value) {\n    return isBoolean(value) ? value : value === 'true';\n  };\n\n  var isString = function isString(value) {\n    return typeof value === 'string';\n  };\n\n  var toNumber = function toNumber(value) {\n    return isNumber(value)\n      ? value\n      : isString(value)\n      ? toString(value).replace(/[a-z]+/gi, '')\n      : 0;\n  };\n\n  var toInt = function toInt(value) {\n    return parseInt(toNumber(value), 10);\n  };\n\n  var toFloat = function toFloat(value) {\n    return parseFloat(toNumber(value));\n  };\n\n  var isInt = function isInt(value) {\n    return isNumber(value) && isFinite(value) && Math.floor(value) === value;\n  };\n\n  var toBytes = function toBytes(value) {\n    // is in bytes\n    if (isInt(value)) {\n      return value;\n    }\n\n    // is natural file size\n    var naturalFileSize = toString(value).trim();\n\n    // if is value in megabytes\n    if (/MB$/i.test(naturalFileSize)) {\n      naturalFileSize = naturalFileSize.replace(/MB$i/, '').trim();\n      return toInt(naturalFileSize) * 1000 * 1000;\n    }\n\n    // if is value in kilobytes\n    if (/KB/i.test(naturalFileSize)) {\n      naturalFileSize = naturalFileSize.replace(/KB$i/, '').trim();\n      return toInt(naturalFileSize) * 1000;\n    }\n\n    return toInt(naturalFileSize);\n  };\n\n  var isFunction = function isFunction(value) {\n    return typeof value === 'function';\n  };\n\n  var toFunctionReference = function toFunctionReference(string) {\n    var ref = self;\n    var levels = string.split('.');\n    var level = null;\n    while ((level = levels.shift())) {\n      ref = ref[level];\n      if (!ref) {\n        return null;\n      }\n    }\n    return ref;\n  };\n\n  var methods = {\n    process: 'POST',\n    patch: 'PATCH',\n    revert: 'DELETE',\n    fetch: 'GET',\n    restore: 'GET',\n    load: 'GET'\n  };\n\n  var createServerAPI = function createServerAPI(outline) {\n    var api = {};\n\n    api.url = isString(outline) ? outline : outline.url || '';\n    api.timeout = outline.timeout ? parseInt(outline.timeout, 10) : 0;\n    api.headers = outline.headers ? outline.headers : {};\n\n    forin(methods, function(key) {\n      api[key] = createAction(\n        key,\n        outline[key],\n        methods[key],\n        api.timeout,\n        api.headers\n      );\n    });\n\n    // special treatment for remove\n    api.remove = outline.remove || null;\n\n    // remove generic headers from api object\n    delete api.headers;\n\n    return api;\n  };\n\n  var createAction = function createAction(\n    name,\n    outline,\n    method,\n    timeout,\n    headers\n  ) {\n    // is explicitely set to null so disable\n    if (outline === null) {\n      return null;\n    }\n\n    // if is custom function, done! Dev handles everything.\n    if (typeof outline === 'function') {\n      return outline;\n    }\n\n    // build action object\n    var action = {\n      url: method === 'GET' || method === 'PATCH' ? '?' + name + '=' : '',\n      method: method,\n      headers: headers,\n      withCredentials: false,\n      timeout: timeout,\n      onload: null,\n      ondata: null,\n      onerror: null\n    };\n\n    // is a single url\n    if (isString(outline)) {\n      action.url = outline;\n      return action;\n    }\n\n    // overwrite\n    Object.assign(action, outline);\n\n    // see if should reformat headers;\n    if (isString(action.headers)) {\n      var parts = action.headers.split(/:(.+)/);\n      action.headers = {\n        header: parts[0],\n        value: parts[1]\n      };\n    }\n\n    // if is bool withCredentials\n    action.withCredentials = toBoolean(action.withCredentials);\n\n    return action;\n  };\n\n  var toServerAPI = function toServerAPI(value) {\n    return createServerAPI(value);\n  };\n\n  var isNull = function isNull(value) {\n    return value === null;\n  };\n\n  var isObject = function isObject(value) {\n    return typeof value === 'object' && value !== null;\n  };\n\n  var isAPI = function isAPI(value) {\n    return (\n      isObject(value) &&\n      isString(value.url) &&\n      isObject(value.process) &&\n      isObject(value.revert) &&\n      isObject(value.restore) &&\n      isObject(value.fetch)\n    );\n  };\n\n  var getType = function getType(value) {\n    if (isArray(value)) {\n      return 'array';\n    }\n\n    if (isNull(value)) {\n      return 'null';\n    }\n\n    if (isInt(value)) {\n      return 'int';\n    }\n\n    if (/^[0-9]+ ?(?:GB|MB|KB)$/gi.test(value)) {\n      return 'bytes';\n    }\n\n    if (isAPI(value)) {\n      return 'api';\n    }\n\n    return typeof value;\n  };\n\n  var replaceSingleQuotes = function replaceSingleQuotes(str) {\n    return str\n      .replace(/{\\s*'/g, '{\"')\n      .replace(/'\\s*}/g, '\"}')\n      .replace(/'\\s*:/g, '\":')\n      .replace(/:\\s*'/g, ':\"')\n      .replace(/,\\s*'/g, ',\"')\n      .replace(/'\\s*,/g, '\",');\n  };\n\n  var conversionTable = {\n    array: toArray,\n    boolean: toBoolean,\n    int: function int(value) {\n      return getType(value) === 'bytes' ? toBytes(value) : toInt(value);\n    },\n    number: toFloat,\n    float: toFloat,\n    bytes: toBytes,\n    string: function string(value) {\n      return isFunction(value) ? value : toString(value);\n    },\n    function: function _function(value) {\n      return toFunctionReference(value);\n    },\n    serverapi: toServerAPI,\n    object: function object(value) {\n      try {\n        return JSON.parse(replaceSingleQuotes(value));\n      } catch (e) {\n        return null;\n      }\n    }\n  };\n\n  var convertTo = function convertTo(value, type) {\n    return conversionTable[type](value);\n  };\n\n  var getValueByType = function getValueByType(\n    newValue,\n    defaultValue,\n    valueType\n  ) {\n    // can always assign default value\n    if (newValue === defaultValue) {\n      return newValue;\n    }\n\n    // get the type of the new value\n    var newValueType = getType(newValue);\n\n    // is valid type?\n    if (newValueType !== valueType) {\n      // is string input, let's attempt to convert\n      var convertedValue = convertTo(newValue, valueType);\n\n      // what is the type now\n      newValueType = getType(convertedValue);\n\n      // no valid conversions found\n      if (convertedValue === null) {\n        throw 'Trying to assign value with incorrect type to \"' +\n          option +\n          '\", allowed type: \"' +\n          valueType +\n          '\"';\n      } else {\n        newValue = convertedValue;\n      }\n    }\n\n    // assign new value\n    return newValue;\n  };\n\n  var createOption = function createOption(defaultValue, valueType) {\n    var currentValue = defaultValue;\n    return {\n      enumerable: true,\n      get: function get() {\n        return currentValue;\n      },\n      set: function set(newValue) {\n        currentValue = getValueByType(newValue, defaultValue, valueType);\n      }\n    };\n  };\n\n  var createOptions = function createOptions(options) {\n    var obj = {};\n    forin(options, function(prop) {\n      var optionDefinition = options[prop];\n      obj[prop] = createOption(optionDefinition[0], optionDefinition[1]);\n    });\n    return createObject(obj);\n  };\n\n  var createInitialState = function createInitialState(options) {\n    return {\n      // model\n      items: [],\n\n      // timeout used for calling update items\n      listUpdateTimeout: null,\n\n      // timeout used for stacking metadata updates\n      itemUpdateTimeout: null,\n\n      // queue of items waiting to be processed\n      processingQueue: [],\n\n      // options\n      options: createOptions(options)\n    };\n  };\n\n  var fromCamels = function fromCamels(string) {\n    var separator =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n    return string\n      .split(/(?=[A-Z])/)\n      .map(function(part) {\n        return part.toLowerCase();\n      })\n      .join(separator);\n  };\n\n  var createOptionAPI = function createOptionAPI(store, options) {\n    var obj = {};\n    forin(options, function(key) {\n      obj[key] = {\n        get: function get() {\n          return store.getState().options[key];\n        },\n        set: function set(value) {\n          store.dispatch('SET_' + fromCamels(key, '_').toUpperCase(), {\n            value: value\n          });\n        }\n      };\n    });\n    return obj;\n  };\n\n  var createOptionActions = function createOptionActions(options) {\n    return function(dispatch, query, state) {\n      var obj = {};\n      forin(options, function(key) {\n        var name = fromCamels(key, '_').toUpperCase();\n\n        obj['SET_' + name] = function(action) {\n          try {\n            state.options[key] = action.value;\n          } catch (e) {} // nope, failed\n\n          // we successfully set the value of this option\n          dispatch('DID_SET_' + name, { value: state.options[key] });\n        };\n      });\n      return obj;\n    };\n  };\n\n  var createOptionQueries = function createOptionQueries(options) {\n    return function(state) {\n      var obj = {};\n      forin(options, function(key) {\n        obj['GET_' + fromCamels(key, '_').toUpperCase()] = function(action) {\n          return state.options[key];\n        };\n      });\n      return obj;\n    };\n  };\n\n  var InteractionMethod = {\n    API: 1,\n    DROP: 2,\n    BROWSE: 3,\n    PASTE: 4,\n    NONE: 5\n  };\n\n  var getUniqueId = function getUniqueId() {\n    return Math.random()\n      .toString(36)\n      .substr(2, 9);\n  };\n\n  function _typeof(obj) {\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function(obj) {\n        return obj &&\n          typeof Symbol === 'function' &&\n          obj.constructor === Symbol &&\n          obj !== Symbol.prototype\n          ? 'symbol'\n          : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  var REACT_ELEMENT_TYPE;\n\n  function _jsx(type, props, key, children) {\n    if (!REACT_ELEMENT_TYPE) {\n      REACT_ELEMENT_TYPE =\n        (typeof Symbol === 'function' &&\n          Symbol['for'] &&\n          Symbol['for']('react.element')) ||\n        0xeac7;\n    }\n\n    var defaultProps = type && type.defaultProps;\n    var childrenLength = arguments.length - 3;\n\n    if (!props && childrenLength !== 0) {\n      props = {\n        children: void 0\n      };\n    }\n\n    if (props && defaultProps) {\n      for (var propName in defaultProps) {\n        if (props[propName] === void 0) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    } else if (!props) {\n      props = defaultProps || {};\n    }\n\n    if (childrenLength === 1) {\n      props.children = children;\n    } else if (childrenLength > 1) {\n      var childArray = new Array(childrenLength);\n\n      for (var i = 0; i < childrenLength; i++) {\n        childArray[i] = arguments[i + 3];\n      }\n\n      props.children = childArray;\n    }\n\n    return {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key === undefined ? null : '' + key,\n      ref: null,\n      props: props,\n      _owner: null\n    };\n  }\n\n  function _asyncIterator(iterable) {\n    var method;\n\n    if (typeof Symbol !== 'undefined') {\n      if (Symbol.asyncIterator) {\n        method = iterable[Symbol.asyncIterator];\n        if (method != null) return method.call(iterable);\n      }\n\n      if (Symbol.iterator) {\n        method = iterable[Symbol.iterator];\n        if (method != null) return method.call(iterable);\n      }\n    }\n\n    throw new TypeError('Object is not async iterable');\n  }\n\n  function _AwaitValue(value) {\n    this.wrapped = value;\n  }\n\n  function _AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function(resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n        var wrappedAwait = value instanceof _AwaitValue;\n        Promise.resolve(wrappedAwait ? value.wrapped : value).then(\n          function(arg) {\n            if (wrappedAwait) {\n              resume('next', arg);\n              return;\n            }\n\n            settle(result.done ? 'return' : 'normal', arg);\n          },\n          function(err) {\n            resume('throw', err);\n          }\n        );\n      } catch (err) {\n        settle('throw', err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case 'return':\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case 'throw':\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== 'function') {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === 'function' && Symbol.asyncIterator) {\n    _AsyncGenerator.prototype[Symbol.asyncIterator] = function() {\n      return this;\n    };\n  }\n\n  _AsyncGenerator.prototype.next = function(arg) {\n    return this._invoke('next', arg);\n  };\n\n  _AsyncGenerator.prototype.throw = function(arg) {\n    return this._invoke('throw', arg);\n  };\n\n  _AsyncGenerator.prototype.return = function(arg) {\n    return this._invoke('return', arg);\n  };\n\n  function _wrapAsyncGenerator(fn) {\n    return function() {\n      return new _AsyncGenerator(fn.apply(this, arguments));\n    };\n  }\n\n  function _awaitAsyncGenerator(value) {\n    return new _AwaitValue(value);\n  }\n\n  function _asyncGeneratorDelegate(inner, awaitWrap) {\n    var iter = {},\n      waiting = false;\n\n    function pump(key, value) {\n      waiting = true;\n      value = new Promise(function(resolve) {\n        resolve(inner[key](value));\n      });\n      return {\n        done: false,\n        value: awaitWrap(value)\n      };\n    }\n\n    if (typeof Symbol === 'function' && Symbol.iterator) {\n      iter[Symbol.iterator] = function() {\n        return this;\n      };\n    }\n\n    iter.next = function(value) {\n      if (waiting) {\n        waiting = false;\n        return value;\n      }\n\n      return pump('next', value);\n    };\n\n    if (typeof inner.throw === 'function') {\n      iter.throw = function(value) {\n        if (waiting) {\n          waiting = false;\n          throw value;\n        }\n\n        return pump('throw', value);\n      };\n    }\n\n    if (typeof inner.return === 'function') {\n      iter.return = function(value) {\n        return pump('return', value);\n      };\n    }\n\n    return iter;\n  }\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function() {\n      var self = this,\n        args = arguments;\n      return new Promise(function(resolve, reject) {\n        var gen = fn.apply(self, args);\n\n        function _next(value) {\n          asyncGeneratorStep(\n            gen,\n            resolve,\n            reject,\n            _next,\n            _throw,\n            'next',\n            value\n          );\n        }\n\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);\n        }\n\n        _next(undefined);\n      });\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineEnumerableProperties(obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if ('value' in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var objectSymbols = Object.getOwnPropertySymbols(descs);\n\n      for (var i = 0; i < objectSymbols.length; i++) {\n        var sym = objectSymbols[i];\n        var desc = descs[sym];\n        desc.configurable = desc.enumerable = true;\n        if ('value' in desc) desc.writable = true;\n        Object.defineProperty(obj, sym, desc);\n      }\n    }\n\n    return obj;\n  }\n\n  function _defaults(obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n\n    return obj;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _extends() {\n    _extends =\n      Object.assign ||\n      function(target) {\n        for (var i = 1; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(\n          Object.getOwnPropertySymbols(source).filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n          })\n        );\n      }\n\n      ownKeys.forEach(function(key) {\n        _defineProperty(target, key, source[key]);\n      });\n    }\n\n    return target;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly)\n        symbols = symbols.filter(function(sym) {\n          return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(source, true).forEach(function(key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(\n          target,\n          Object.getOwnPropertyDescriptors(source)\n        );\n      } else {\n        ownKeys(source).forEach(function(key) {\n          Object.defineProperty(\n            target,\n            key,\n            Object.getOwnPropertyDescriptor(source, key)\n          );\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== 'function' && superClass !== null) {\n      throw new TypeError('Super expression must either be null or a function');\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n  }\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf\n      ? Object.getPrototypeOf\n      : function _getPrototypeOf(o) {\n          return o.__proto__ || Object.getPrototypeOf(o);\n        };\n    return _getPrototypeOf(o);\n  }\n\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf =\n      Object.setPrototypeOf ||\n      function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n      };\n\n    return _setPrototypeOf(o, p);\n  }\n\n  function isNativeReflectConstruct() {\n    if (typeof Reflect === 'undefined' || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === 'function') return true;\n\n    try {\n      Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  function _construct(Parent, args, Class) {\n    if (isNativeReflectConstruct()) {\n      _construct = Reflect.construct;\n    } else {\n      _construct = function _construct(Parent, args, Class) {\n        var a = [null];\n        a.push.apply(a, args);\n        var Constructor = Function.bind.apply(Parent, a);\n        var instance = new Constructor();\n        if (Class) _setPrototypeOf(instance, Class.prototype);\n        return instance;\n      };\n    }\n\n    return _construct.apply(null, arguments);\n  }\n\n  function _isNativeFunction(fn) {\n    return Function.toString.call(fn).indexOf('[native code]') !== -1;\n  }\n\n  function _wrapNativeSuper(Class) {\n    var _cache = typeof Map === 'function' ? new Map() : undefined;\n\n    _wrapNativeSuper = function _wrapNativeSuper(Class) {\n      if (Class === null || !_isNativeFunction(Class)) return Class;\n\n      if (typeof Class !== 'function') {\n        throw new TypeError(\n          'Super expression must either be null or a function'\n        );\n      }\n\n      if (typeof _cache !== 'undefined') {\n        if (_cache.has(Class)) return _cache.get(Class);\n\n        _cache.set(Class, Wrapper);\n      }\n\n      function Wrapper() {\n        return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n      }\n\n      Wrapper.prototype = Object.create(Class.prototype, {\n        constructor: {\n          value: Wrapper,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n      return _setPrototypeOf(Wrapper, Class);\n    };\n\n    return _wrapNativeSuper(Class);\n  }\n\n  function _instanceof(left, right) {\n    if (\n      right != null &&\n      typeof Symbol !== 'undefined' &&\n      right[Symbol.hasInstance]\n    ) {\n      return !!right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  }\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule\n      ? obj\n      : {\n          default: obj\n        };\n  }\n\n  function _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc =\n              Object.defineProperty && Object.getOwnPropertyDescriptor\n                ? Object.getOwnPropertyDescriptor(obj, key)\n                : {};\n\n            if (desc.get || desc.set) {\n              Object.defineProperty(newObj, key, desc);\n            } else {\n              newObj[key] = obj[key];\n            }\n          }\n        }\n      }\n\n      newObj.default = obj;\n      return newObj;\n    }\n  }\n\n  function _newArrowCheck(innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError('Cannot instantiate an arrow function');\n    }\n  }\n\n  function _objectDestructuringEmpty(obj) {\n    if (obj == null) throw new TypeError('Cannot destructure undefined');\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n\n    var key, i;\n\n    if (Object.getOwnPropertySymbols) {\n      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n      for (i = 0; i < sourceSymbolKeys.length; i++) {\n        key = sourceSymbolKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n        target[key] = source[key];\n      }\n    }\n\n    return target;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\n        \"this hasn't been initialised - super() hasn't been called\"\n      );\n    }\n\n    return self;\n  }\n\n  function _possibleConstructorReturn(self, call) {\n    if (call && (typeof call === 'object' || typeof call === 'function')) {\n      return call;\n    }\n\n    return _assertThisInitialized(self);\n  }\n\n  function _superPropBase(object, property) {\n    while (!Object.prototype.hasOwnProperty.call(object, property)) {\n      object = _getPrototypeOf(object);\n      if (object === null) break;\n    }\n\n    return object;\n  }\n\n  function _get(target, property, receiver) {\n    if (typeof Reflect !== 'undefined' && Reflect.get) {\n      _get = Reflect.get;\n    } else {\n      _get = function _get(target, property, receiver) {\n        var base = _superPropBase(target, property);\n\n        if (!base) return;\n        var desc = Object.getOwnPropertyDescriptor(base, property);\n\n        if (desc.get) {\n          return desc.get.call(receiver);\n        }\n\n        return desc.value;\n      };\n    }\n\n    return _get(target, property, receiver || target);\n  }\n\n  function set(target, property, value, receiver) {\n    if (typeof Reflect !== 'undefined' && Reflect.set) {\n      set = Reflect.set;\n    } else {\n      set = function set(target, property, value, receiver) {\n        var base = _superPropBase(target, property);\n\n        var desc;\n\n        if (base) {\n          desc = Object.getOwnPropertyDescriptor(base, property);\n\n          if (desc.set) {\n            desc.set.call(receiver, value);\n            return true;\n          } else if (!desc.writable) {\n            return false;\n          }\n        }\n\n        desc = Object.getOwnPropertyDescriptor(receiver, property);\n\n        if (desc) {\n          if (!desc.writable) {\n            return false;\n          }\n\n          desc.value = value;\n          Object.defineProperty(receiver, property, desc);\n        } else {\n          _defineProperty(receiver, property, value);\n        }\n\n        return true;\n      };\n    }\n\n    return set(target, property, value, receiver);\n  }\n\n  function _set(target, property, value, receiver, isStrict) {\n    var s = set(target, property, value, receiver || target);\n\n    if (!s && isStrict) {\n      throw new Error('failed to set property');\n    }\n\n    return value;\n  }\n\n  function _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n      raw = strings.slice(0);\n    }\n\n    return Object.freeze(\n      Object.defineProperties(strings, {\n        raw: {\n          value: Object.freeze(raw)\n        }\n      })\n    );\n  }\n\n  function _taggedTemplateLiteralLoose(strings, raw) {\n    if (!raw) {\n      raw = strings.slice(0);\n    }\n\n    strings.raw = raw;\n    return strings;\n  }\n\n  function _temporalRef(val, name) {\n    if (val === _temporalUndefined) {\n      throw new ReferenceError(name + ' is not defined - temporal dead zone');\n    } else {\n      return val;\n    }\n  }\n\n  function _readOnlyError(name) {\n    throw new Error('\"' + name + '\" is read-only');\n  }\n\n  function _classNameTDZError(name) {\n    throw new Error(\n      'Class \"' + name + '\" cannot be referenced in computed property keys.'\n    );\n  }\n\n  var _temporalUndefined = {};\n\n  function _slicedToArray(arr, i) {\n    return (\n      _arrayWithHoles(arr) ||\n      _iterableToArrayLimit(arr, i) ||\n      _nonIterableRest()\n    );\n  }\n\n  function _slicedToArrayLoose(arr, i) {\n    return (\n      _arrayWithHoles(arr) ||\n      _iterableToArrayLimitLoose(arr, i) ||\n      _nonIterableRest()\n    );\n  }\n\n  function _toArray(arr) {\n    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();\n  }\n\n  function _toConsumableArray(arr) {\n    return (\n      _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread()\n    );\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)\n        arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n  }\n\n  function _iterableToArray(iter) {\n    if (\n      Symbol.iterator in Object(iter) ||\n      Object.prototype.toString.call(iter) === '[object Arguments]'\n    )\n      return Array.from(iter);\n  }\n\n  function _iterableToArrayLimit(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (\n        var _i = arr[Symbol.iterator](), _s;\n        !(_n = (_s = _i.next()).done);\n        _n = true\n      ) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return'] != null) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  function _iterableToArrayLimitLoose(arr, i) {\n    var _arr = [];\n\n    for (\n      var _iterator = arr[Symbol.iterator](), _step;\n      !(_step = _iterator.next()).done;\n\n    ) {\n      _arr.push(_step.value);\n\n      if (i && _arr.length === i) break;\n    }\n\n    return _arr;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError('Invalid attempt to spread non-iterable instance');\n  }\n\n  function _nonIterableRest() {\n    throw new TypeError('Invalid attempt to destructure non-iterable instance');\n  }\n\n  function _skipFirstGeneratorNext(fn) {\n    return function() {\n      var it = fn.apply(this, arguments);\n      it.next();\n      return it;\n    };\n  }\n\n  function _toPrimitive(input, hint) {\n    if (typeof input !== 'object' || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || 'default');\n      if (typeof res !== 'object') return res;\n      throw new TypeError('@@toPrimitive must return a primitive value.');\n    }\n\n    return (hint === 'string' ? String : Number)(input);\n  }\n\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, 'string');\n\n    return typeof key === 'symbol' ? key : String(key);\n  }\n\n  function _initializerWarningHelper(descriptor, context) {\n    throw new Error(\n      'Decorating class property failed. Please ensure that ' +\n        'proposal-class-properties is enabled and set to use loose mode. ' +\n        'To use proposal-class-properties in spec mode with decorators, wait for ' +\n        'the next major version of decorators in stage 2.'\n    );\n  }\n\n  function _initializerDefineProperty(target, property, descriptor, context) {\n    if (!descriptor) return;\n    Object.defineProperty(target, property, {\n      enumerable: descriptor.enumerable,\n      configurable: descriptor.configurable,\n      writable: descriptor.writable,\n      value: descriptor.initializer\n        ? descriptor.initializer.call(context)\n        : void 0\n    });\n  }\n\n  function _applyDecoratedDescriptor(\n    target,\n    property,\n    decorators,\n    descriptor,\n    context\n  ) {\n    var desc = {};\n    Object.keys(descriptor).forEach(function(key) {\n      desc[key] = descriptor[key];\n    });\n    desc.enumerable = !!desc.enumerable;\n    desc.configurable = !!desc.configurable;\n\n    if ('value' in desc || desc.initializer) {\n      desc.writable = true;\n    }\n\n    desc = decorators\n      .slice()\n      .reverse()\n      .reduce(function(desc, decorator) {\n        return decorator(target, property, desc) || desc;\n      }, desc);\n\n    if (context && desc.initializer !== void 0) {\n      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n      desc.initializer = undefined;\n    }\n\n    if (desc.initializer === void 0) {\n      Object.defineProperty(target, property, desc);\n      desc = null;\n    }\n\n    return desc;\n  }\n\n  var id = 0;\n\n  function _classPrivateFieldLooseKey(name) {\n    return '__private_' + id++ + '_' + name;\n  }\n\n  function _classPrivateFieldLooseBase(receiver, privateKey) {\n    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {\n      throw new TypeError('attempted to use private field on non-instance');\n    }\n\n    return receiver;\n  }\n\n  function _classPrivateFieldGet(receiver, privateMap) {\n    var descriptor = privateMap.get(receiver);\n\n    if (!descriptor) {\n      throw new TypeError('attempted to get private field on non-instance');\n    }\n\n    if (descriptor.get) {\n      return descriptor.get.call(receiver);\n    }\n\n    return descriptor.value;\n  }\n\n  function _classPrivateFieldSet(receiver, privateMap, value) {\n    var descriptor = privateMap.get(receiver);\n\n    if (!descriptor) {\n      throw new TypeError('attempted to set private field on non-instance');\n    }\n\n    if (descriptor.set) {\n      descriptor.set.call(receiver, value);\n    } else {\n      if (!descriptor.writable) {\n        throw new TypeError('attempted to set read only private field');\n      }\n\n      descriptor.value = value;\n    }\n\n    return value;\n  }\n\n  function _classPrivateFieldDestructureSet(receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n      throw new TypeError('attempted to set private field on non-instance');\n    }\n\n    var descriptor = privateMap.get(receiver);\n\n    if (descriptor.set) {\n      if (!('__destrObj' in descriptor)) {\n        descriptor.__destrObj = {\n          set value(v) {\n            descriptor.set.call(receiver, v);\n          }\n        };\n      }\n\n      return descriptor.__destrObj;\n    } else {\n      if (!descriptor.writable) {\n        throw new TypeError('attempted to set read only private field');\n      }\n\n      return descriptor;\n    }\n  }\n\n  function _classStaticPrivateFieldSpecGet(\n    receiver,\n    classConstructor,\n    descriptor\n  ) {\n    if (receiver !== classConstructor) {\n      throw new TypeError('Private static access of wrong provenance');\n    }\n\n    return descriptor.value;\n  }\n\n  function _classStaticPrivateFieldSpecSet(\n    receiver,\n    classConstructor,\n    descriptor,\n    value\n  ) {\n    if (receiver !== classConstructor) {\n      throw new TypeError('Private static access of wrong provenance');\n    }\n\n    if (!descriptor.writable) {\n      throw new TypeError('attempted to set read only private field');\n    }\n\n    descriptor.value = value;\n    return value;\n  }\n\n  function _classStaticPrivateMethodGet(receiver, classConstructor, method) {\n    if (receiver !== classConstructor) {\n      throw new TypeError('Private static access of wrong provenance');\n    }\n\n    return method;\n  }\n\n  function _classStaticPrivateMethodSet() {\n    throw new TypeError('attempted to set read only static private field');\n  }\n\n  function _decorate(decorators, factory, superClass, mixins) {\n    var api = _getDecoratorsApi();\n\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        api = mixins[i](api);\n      }\n    }\n\n    var r = factory(function initialize(O) {\n      api.initializeInstanceElements(O, decorated.elements);\n    }, superClass);\n    var decorated = api.decorateClass(\n      _coalesceClassElements(r.d.map(_createElementDescriptor)),\n      decorators\n    );\n    api.initializeClassElements(r.F, decorated.elements);\n    return api.runClassFinishers(r.F, decorated.finishers);\n  }\n\n  function _getDecoratorsApi() {\n    _getDecoratorsApi = function() {\n      return api;\n    };\n\n    var api = {\n      elementsDefinitionOrder: [['method'], ['field']],\n      initializeInstanceElements: function(O, elements) {\n        ['method', 'field'].forEach(function(kind) {\n          elements.forEach(function(element) {\n            if (element.kind === kind && element.placement === 'own') {\n              this.defineClassElement(O, element);\n            }\n          }, this);\n        }, this);\n      },\n      initializeClassElements: function(F, elements) {\n        var proto = F.prototype;\n        ['method', 'field'].forEach(function(kind) {\n          elements.forEach(function(element) {\n            var placement = element.placement;\n\n            if (\n              element.kind === kind &&\n              (placement === 'static' || placement === 'prototype')\n            ) {\n              var receiver = placement === 'static' ? F : proto;\n              this.defineClassElement(receiver, element);\n            }\n          }, this);\n        }, this);\n      },\n      defineClassElement: function(receiver, element) {\n        var descriptor = element.descriptor;\n\n        if (element.kind === 'field') {\n          var initializer = element.initializer;\n          descriptor = {\n            enumerable: descriptor.enumerable,\n            writable: descriptor.writable,\n            configurable: descriptor.configurable,\n            value: initializer === void 0 ? void 0 : initializer.call(receiver)\n          };\n        }\n\n        Object.defineProperty(receiver, element.key, descriptor);\n      },\n      decorateClass: function(elements, decorators) {\n        var newElements = [];\n        var finishers = [];\n        var placements = {\n          static: [],\n          prototype: [],\n          own: []\n        };\n        elements.forEach(function(element) {\n          this.addElementPlacement(element, placements);\n        }, this);\n        elements.forEach(function(element) {\n          if (!_hasDecorators(element)) return newElements.push(element);\n          var elementFinishersExtras = this.decorateElement(\n            element,\n            placements\n          );\n          newElements.push(elementFinishersExtras.element);\n          newElements.push.apply(newElements, elementFinishersExtras.extras);\n          finishers.push.apply(finishers, elementFinishersExtras.finishers);\n        }, this);\n\n        if (!decorators) {\n          return {\n            elements: newElements,\n            finishers: finishers\n          };\n        }\n\n        var result = this.decorateConstructor(newElements, decorators);\n        finishers.push.apply(finishers, result.finishers);\n        result.finishers = finishers;\n        return result;\n      },\n      addElementPlacement: function(element, placements, silent) {\n        var keys = placements[element.placement];\n\n        if (!silent && keys.indexOf(element.key) !== -1) {\n          throw new TypeError('Duplicated element (' + element.key + ')');\n        }\n\n        keys.push(element.key);\n      },\n      decorateElement: function(element, placements) {\n        var extras = [];\n        var finishers = [];\n\n        for (\n          var decorators = element.decorators, i = decorators.length - 1;\n          i >= 0;\n          i--\n        ) {\n          var keys = placements[element.placement];\n          keys.splice(keys.indexOf(element.key), 1);\n          var elementObject = this.fromElementDescriptor(element);\n          var elementFinisherExtras = this.toElementFinisherExtras(\n            (0, decorators[i])(elementObject) || elementObject\n          );\n          element = elementFinisherExtras.element;\n          this.addElementPlacement(element, placements);\n\n          if (elementFinisherExtras.finisher) {\n            finishers.push(elementFinisherExtras.finisher);\n          }\n\n          var newExtras = elementFinisherExtras.extras;\n\n          if (newExtras) {\n            for (var j = 0; j < newExtras.length; j++) {\n              this.addElementPlacement(newExtras[j], placements);\n            }\n\n            extras.push.apply(extras, newExtras);\n          }\n        }\n\n        return {\n          element: element,\n          finishers: finishers,\n          extras: extras\n        };\n      },\n      decorateConstructor: function(elements, decorators) {\n        var finishers = [];\n\n        for (var i = decorators.length - 1; i >= 0; i--) {\n          var obj = this.fromClassDescriptor(elements);\n          var elementsAndFinisher = this.toClassDescriptor(\n            (0, decorators[i])(obj) || obj\n          );\n\n          if (elementsAndFinisher.finisher !== undefined) {\n            finishers.push(elementsAndFinisher.finisher);\n          }\n\n          if (elementsAndFinisher.elements !== undefined) {\n            elements = elementsAndFinisher.elements;\n\n            for (var j = 0; j < elements.length - 1; j++) {\n              for (var k = j + 1; k < elements.length; k++) {\n                if (\n                  elements[j].key === elements[k].key &&\n                  elements[j].placement === elements[k].placement\n                ) {\n                  throw new TypeError(\n                    'Duplicated element (' + elements[j].key + ')'\n                  );\n                }\n              }\n            }\n          }\n        }\n\n        return {\n          elements: elements,\n          finishers: finishers\n        };\n      },\n      fromElementDescriptor: function(element) {\n        var obj = {\n          kind: element.kind,\n          key: element.key,\n          placement: element.placement,\n          descriptor: element.descriptor\n        };\n        var desc = {\n          value: 'Descriptor',\n          configurable: true\n        };\n        Object.defineProperty(obj, Symbol.toStringTag, desc);\n        if (element.kind === 'field') obj.initializer = element.initializer;\n        return obj;\n      },\n      toElementDescriptors: function(elementObjects) {\n        if (elementObjects === undefined) return;\n        return _toArray(elementObjects).map(function(elementObject) {\n          var element = this.toElementDescriptor(elementObject);\n          this.disallowProperty(\n            elementObject,\n            'finisher',\n            'An element descriptor'\n          );\n          this.disallowProperty(\n            elementObject,\n            'extras',\n            'An element descriptor'\n          );\n          return element;\n        }, this);\n      },\n      toElementDescriptor: function(elementObject) {\n        var kind = String(elementObject.kind);\n\n        if (kind !== 'method' && kind !== 'field') {\n          throw new TypeError(\n            'An element descriptor\\'s .kind property must be either \"method\" or' +\n              ' \"field\", but a decorator created an element descriptor with' +\n              ' .kind \"' +\n              kind +\n              '\"'\n          );\n        }\n\n        var key = _toPropertyKey(elementObject.key);\n\n        var placement = String(elementObject.placement);\n\n        if (\n          placement !== 'static' &&\n          placement !== 'prototype' &&\n          placement !== 'own'\n        ) {\n          throw new TypeError(\n            'An element descriptor\\'s .placement property must be one of \"static\",' +\n              ' \"prototype\" or \"own\", but a decorator created an element descriptor' +\n              ' with .placement \"' +\n              placement +\n              '\"'\n          );\n        }\n\n        var descriptor = elementObject.descriptor;\n        this.disallowProperty(\n          elementObject,\n          'elements',\n          'An element descriptor'\n        );\n        var element = {\n          kind: kind,\n          key: key,\n          placement: placement,\n          descriptor: Object.assign({}, descriptor)\n        };\n\n        if (kind !== 'field') {\n          this.disallowProperty(\n            elementObject,\n            'initializer',\n            'A method descriptor'\n          );\n        } else {\n          this.disallowProperty(\n            descriptor,\n            'get',\n            'The property descriptor of a field descriptor'\n          );\n          this.disallowProperty(\n            descriptor,\n            'set',\n            'The property descriptor of a field descriptor'\n          );\n          this.disallowProperty(\n            descriptor,\n            'value',\n            'The property descriptor of a field descriptor'\n          );\n          element.initializer = elementObject.initializer;\n        }\n\n        return element;\n      },\n      toElementFinisherExtras: function(elementObject) {\n        var element = this.toElementDescriptor(elementObject);\n\n        var finisher = _optionalCallableProperty(elementObject, 'finisher');\n\n        var extras = this.toElementDescriptors(elementObject.extras);\n        return {\n          element: element,\n          finisher: finisher,\n          extras: extras\n        };\n      },\n      fromClassDescriptor: function(elements) {\n        var obj = {\n          kind: 'class',\n          elements: elements.map(this.fromElementDescriptor, this)\n        };\n        var desc = {\n          value: 'Descriptor',\n          configurable: true\n        };\n        Object.defineProperty(obj, Symbol.toStringTag, desc);\n        return obj;\n      },\n      toClassDescriptor: function(obj) {\n        var kind = String(obj.kind);\n\n        if (kind !== 'class') {\n          throw new TypeError(\n            'A class descriptor\\'s .kind property must be \"class\", but a decorator' +\n              ' created a class descriptor with .kind \"' +\n              kind +\n              '\"'\n          );\n        }\n\n        this.disallowProperty(obj, 'key', 'A class descriptor');\n        this.disallowProperty(obj, 'placement', 'A class descriptor');\n        this.disallowProperty(obj, 'descriptor', 'A class descriptor');\n        this.disallowProperty(obj, 'initializer', 'A class descriptor');\n        this.disallowProperty(obj, 'extras', 'A class descriptor');\n\n        var finisher = _optionalCallableProperty(obj, 'finisher');\n\n        var elements = this.toElementDescriptors(obj.elements);\n        return {\n          elements: elements,\n          finisher: finisher\n        };\n      },\n      runClassFinishers: function(constructor, finishers) {\n        for (var i = 0; i < finishers.length; i++) {\n          var newConstructor = (0, finishers[i])(constructor);\n\n          if (newConstructor !== undefined) {\n            if (typeof newConstructor !== 'function') {\n              throw new TypeError('Finishers must return a constructor.');\n            }\n\n            constructor = newConstructor;\n          }\n        }\n\n        return constructor;\n      },\n      disallowProperty: function(obj, name, objectType) {\n        if (obj[name] !== undefined) {\n          throw new TypeError(\n            objectType + \" can't have a .\" + name + ' property.'\n          );\n        }\n      }\n    };\n    return api;\n  }\n\n  function _createElementDescriptor(def) {\n    var key = _toPropertyKey(def.key);\n\n    var descriptor;\n\n    if (def.kind === 'method') {\n      descriptor = {\n        value: def.value,\n        writable: true,\n        configurable: true,\n        enumerable: false\n      };\n    } else if (def.kind === 'get') {\n      descriptor = {\n        get: def.value,\n        configurable: true,\n        enumerable: false\n      };\n    } else if (def.kind === 'set') {\n      descriptor = {\n        set: def.value,\n        configurable: true,\n        enumerable: false\n      };\n    } else if (def.kind === 'field') {\n      descriptor = {\n        configurable: true,\n        writable: true,\n        enumerable: true\n      };\n    }\n\n    var element = {\n      kind: def.kind === 'field' ? 'field' : 'method',\n      key: key,\n      placement: def.static\n        ? 'static'\n        : def.kind === 'field'\n        ? 'own'\n        : 'prototype',\n      descriptor: descriptor\n    };\n    if (def.decorators) element.decorators = def.decorators;\n    if (def.kind === 'field') element.initializer = def.value;\n    return element;\n  }\n\n  function _coalesceGetterSetter(element, other) {\n    if (element.descriptor.get !== undefined) {\n      other.descriptor.get = element.descriptor.get;\n    } else {\n      other.descriptor.set = element.descriptor.set;\n    }\n  }\n\n  function _coalesceClassElements(elements) {\n    var newElements = [];\n\n    var isSameElement = function(other) {\n      return (\n        other.kind === 'method' &&\n        other.key === element.key &&\n        other.placement === element.placement\n      );\n    };\n\n    for (var i = 0; i < elements.length; i++) {\n      var element = elements[i];\n      var other;\n\n      if (\n        element.kind === 'method' &&\n        (other = newElements.find(isSameElement))\n      ) {\n        if (\n          _isDataDescriptor(element.descriptor) ||\n          _isDataDescriptor(other.descriptor)\n        ) {\n          if (_hasDecorators(element) || _hasDecorators(other)) {\n            throw new ReferenceError(\n              'Duplicated methods (' + element.key + \") can't be decorated.\"\n            );\n          }\n\n          other.descriptor = element.descriptor;\n        } else {\n          if (_hasDecorators(element)) {\n            if (_hasDecorators(other)) {\n              throw new ReferenceError(\n                \"Decorators can't be placed on different accessors with for \" +\n                  'the same property (' +\n                  element.key +\n                  ').'\n              );\n            }\n\n            other.decorators = element.decorators;\n          }\n\n          _coalesceGetterSetter(element, other);\n        }\n      } else {\n        newElements.push(element);\n      }\n    }\n\n    return newElements;\n  }\n\n  function _hasDecorators(element) {\n    return element.decorators && element.decorators.length;\n  }\n\n  function _isDataDescriptor(desc) {\n    return (\n      desc !== undefined &&\n      !(desc.value === undefined && desc.writable === undefined)\n    );\n  }\n\n  function _optionalCallableProperty(obj, name) {\n    var value = obj[name];\n\n    if (value !== undefined && typeof value !== 'function') {\n      throw new TypeError(\"Expected '\" + name + \"' to be a function\");\n    }\n\n    return value;\n  }\n\n  function _classPrivateMethodGet(receiver, privateSet, fn) {\n    if (!privateSet.has(receiver)) {\n      throw new TypeError('attempted to get private field on non-instance');\n    }\n\n    return fn;\n  }\n\n  function _classPrivateMethodSet() {\n    throw new TypeError('attempted to reassign private method');\n  }\n\n  function _wrapRegExp(re, groups) {\n    _wrapRegExp = function(re, groups) {\n      return new BabelRegExp(re, groups);\n    };\n\n    var _RegExp = _wrapNativeSuper(RegExp);\n\n    var _super = RegExp.prototype;\n\n    var _groups = new WeakMap();\n\n    function BabelRegExp(re, groups) {\n      var _this = _RegExp.call(this, re);\n\n      _groups.set(_this, groups);\n\n      return _this;\n    }\n\n    _inherits(BabelRegExp, _RegExp);\n\n    BabelRegExp.prototype.exec = function(str) {\n      var result = _super.exec.call(this, str);\n\n      if (result) result.groups = buildGroups(result, this);\n      return result;\n    };\n\n    BabelRegExp.prototype[Symbol.replace] = function(str, substitution) {\n      if (typeof substitution === 'string') {\n        var groups = _groups.get(this);\n\n        return _super[Symbol.replace].call(\n          this,\n          str,\n          substitution.replace(/\\$<([^>]+)>/g, function(_, name) {\n            return '$' + groups[name];\n          })\n        );\n      } else if (typeof substitution === 'function') {\n        var _this = this;\n\n        return _super[Symbol.replace].call(this, str, function() {\n          var args = [];\n          args.push.apply(args, arguments);\n\n          if (typeof args[args.length - 1] !== 'object') {\n            args.push(buildGroups(args, _this));\n          }\n\n          return substitution.apply(this, args);\n        });\n      } else {\n        return _super[Symbol.replace].call(this, str, substitution);\n      }\n    };\n\n    function buildGroups(result, re) {\n      var g = _groups.get(re);\n\n      return Object.keys(g).reduce(function(groups, name) {\n        groups[name] = result[g[name]];\n        return groups;\n      }, Object.create(null));\n    }\n\n    return _wrapRegExp.apply(this, arguments);\n  }\n\n  var arrayRemove = function arrayRemove(arr, index) {\n    return arr.splice(index, 1);\n  };\n\n  var run = function run(cb, sync) {\n    if (sync) {\n      cb();\n    } else if (document.hidden) {\n      Promise.resolve(1).then(cb);\n    } else {\n      setTimeout(cb, 0);\n    }\n  };\n\n  var on = function on() {\n    var listeners = [];\n    var off = function off(event, cb) {\n      arrayRemove(\n        listeners,\n        listeners.findIndex(function(listener) {\n          return listener.event === event && (listener.cb === cb || !cb);\n        })\n      );\n    };\n    var _fire = function fire(event, args, sync) {\n      listeners\n        .filter(function(listener) {\n          return listener.event === event;\n        })\n        .map(function(listener) {\n          return listener.cb;\n        })\n        .forEach(function(cb) {\n          return run(function() {\n            return cb.apply(void 0, _toConsumableArray(args));\n          }, sync);\n        });\n    };\n    return {\n      fireSync: function fireSync(event) {\n        for (\n          var _len = arguments.length,\n            args = new Array(_len > 1 ? _len - 1 : 0),\n            _key = 1;\n          _key < _len;\n          _key++\n        ) {\n          args[_key - 1] = arguments[_key];\n        }\n        _fire(event, args, true);\n      },\n      fire: function fire(event) {\n        for (\n          var _len2 = arguments.length,\n            args = new Array(_len2 > 1 ? _len2 - 1 : 0),\n            _key2 = 1;\n          _key2 < _len2;\n          _key2++\n        ) {\n          args[_key2 - 1] = arguments[_key2];\n        }\n        _fire(event, args, false);\n      },\n      on: function on(event, cb) {\n        listeners.push({ event: event, cb: cb });\n      },\n      onOnce: function onOnce(event, _cb) {\n        listeners.push({\n          event: event,\n          cb: function cb() {\n            off(event, _cb);\n            _cb.apply(void 0, arguments);\n          }\n        });\n      },\n      off: off\n    };\n  };\n\n  var copyObjectPropertiesToObject = function copyObjectPropertiesToObject(\n    src,\n    target,\n    excluded\n  ) {\n    Object.getOwnPropertyNames(src)\n      .filter(function(property) {\n        return !excluded.includes(property);\n      })\n      .forEach(function(key) {\n        return Object.defineProperty(\n          target,\n          key,\n          Object.getOwnPropertyDescriptor(src, key)\n        );\n      });\n  };\n\n  var PRIVATE = [\n    'fire',\n    'process',\n    'revert',\n    'load',\n    'on',\n    'off',\n    'onOnce',\n    'retryLoad',\n    'extend',\n    'archive',\n    'archived',\n    'release',\n    'released',\n    'requestProcessing',\n    'freeze'\n  ];\n\n  var createItemAPI = function createItemAPI(item) {\n    var api = {};\n    copyObjectPropertiesToObject(item, api, PRIVATE);\n    return api;\n  };\n\n  var removeReleasedItems = function removeReleasedItems(items) {\n    items.forEach(function(item, index) {\n      if (item.released) {\n        arrayRemove(items, index);\n      }\n    });\n  };\n\n  var ItemStatus = {\n    INIT: 1,\n    IDLE: 2,\n    PROCESSING_QUEUED: 9,\n    PROCESSING: 3,\n    PROCESSING_COMPLETE: 5,\n    PROCESSING_ERROR: 6,\n    PROCESSING_REVERT_ERROR: 10,\n    LOADING: 7,\n    LOAD_ERROR: 8\n  };\n\n  var FileOrigin = {\n    INPUT: 1,\n    LIMBO: 2,\n    LOCAL: 3\n  };\n\n  var getNonNumeric = function getNonNumeric(str) {\n    return /[^0-9]+/.exec(str);\n  };\n\n  var getDecimalSeparator = function getDecimalSeparator() {\n    return getNonNumeric((1.1).toLocaleString())[0];\n  };\n\n  var getThousandsSeparator = function getThousandsSeparator() {\n    // Added for browsers that do not return the thousands separator (happend on native browser Android 4.4.4)\n    // We check against the normal toString output and if they're the same return a comma when decimal separator is a dot\n    var decimalSeparator = getDecimalSeparator();\n    var thousandsStringWithSeparator = (1000.0).toLocaleString();\n    var thousandsStringWithoutSeparator = (1000.0).toString();\n    if (thousandsStringWithSeparator !== thousandsStringWithoutSeparator) {\n      return getNonNumeric(thousandsStringWithSeparator)[0];\n    }\n    return decimalSeparator === '.' ? ',' : '.';\n  };\n\n  var Type = {\n    BOOLEAN: 'boolean',\n    INT: 'int',\n    NUMBER: 'number',\n    STRING: 'string',\n    ARRAY: 'array',\n    OBJECT: 'object',\n    FUNCTION: 'function',\n    ACTION: 'action',\n    SERVER_API: 'serverapi',\n    REGEX: 'regex'\n  };\n\n  // all registered filters\n  var filters = [];\n\n  // loops over matching filters and passes options to each filter, returning the mapped results\n  var applyFilterChain = function applyFilterChain(key, value, utils) {\n    return new Promise(function(resolve, reject) {\n      // find matching filters for this key\n      var matchingFilters = filters\n        .filter(function(f) {\n          return f.key === key;\n        })\n        .map(function(f) {\n          return f.cb;\n        });\n\n      // resolve now\n      if (matchingFilters.length === 0) {\n        resolve(value);\n        return;\n      }\n\n      // first filter to kick things of\n      var initialFilter = matchingFilters.shift();\n\n      // chain filters\n      matchingFilters\n        .reduce(\n          // loop over promises passing value to next promise\n          function(current, next) {\n            return current.then(function(value) {\n              return next(value, utils);\n            });\n          },\n\n          // call initial filter, will return a promise\n          initialFilter(value, utils)\n\n          // all executed\n        )\n        .then(function(value) {\n          return resolve(value);\n        })\n        .catch(function(error) {\n          return reject(error);\n        });\n    });\n  };\n\n  var applyFilters = function applyFilters(key, value, utils) {\n    return filters\n      .filter(function(f) {\n        return f.key === key;\n      })\n      .map(function(f) {\n        return f.cb(value, utils);\n      });\n  };\n\n  // adds a new filter to the list\n  var addFilter = function addFilter(key, cb) {\n    return filters.push({ key: key, cb: cb });\n  };\n\n  var extendDefaultOptions = function extendDefaultOptions(additionalOptions) {\n    return Object.assign(defaultOptions, additionalOptions);\n  };\n\n  var getOptions = function getOptions() {\n    return Object.assign({}, defaultOptions);\n  };\n\n  var setOptions = function setOptions(opts) {\n    forin(opts, function(key, value) {\n      // key does not exist, so this option cannot be set\n      if (!defaultOptions[key]) {\n        return;\n      }\n      defaultOptions[key][0] = getValueByType(\n        value,\n        defaultOptions[key][0],\n        defaultOptions[key][1]\n      );\n    });\n  };\n\n  // default options on app\n  var defaultOptions = {\n    // the id to add to the root element\n    id: [null, Type.STRING],\n\n    // input field name to use\n    name: ['filepond', Type.STRING],\n\n    // disable the field\n    disabled: [false, Type.BOOLEAN],\n\n    // classname to put on wrapper\n    className: [null, Type.STRING],\n\n    // is the field required\n    required: [false, Type.BOOLEAN],\n\n    // Allow media capture when value is set\n    captureMethod: [null, Type.STRING],\n    // - \"camera\", \"microphone\" or \"camcorder\",\n    // - Does not work with multiple on apple devices\n    // - If set, acceptedFileTypes must be made to match with media wildcard \"image/*\", \"audio/*\" or \"video/*\"\n\n    // sync `acceptedFileTypes` property with `accept` attribute\n    allowSyncAcceptAttribute: [true, Type.BOOLEAN],\n\n    // Feature toggles\n    allowDrop: [true, Type.BOOLEAN], // Allow dropping of files\n    allowBrowse: [true, Type.BOOLEAN], // Allow browsing the file system\n    allowPaste: [true, Type.BOOLEAN], // Allow pasting files\n    allowMultiple: [false, Type.BOOLEAN], // Allow multiple files (disabled by default, as multiple attribute is also required on input to allow multiple)\n    allowReplace: [true, Type.BOOLEAN], // Allow dropping a file on other file to replace it (only works when multiple is set to false)\n    allowRevert: [true, Type.BOOLEAN], // Allows user to revert file upload\n    allowRemove: [true, Type.BOOLEAN], // Allow user to remove a file\n    allowProcess: [true, Type.BOOLEAN], // Allows user to process a file, when set to false, this removes the file upload button\n    allowReorder: [false, Type.BOOLEAN], // Allow reordering of files\n    allowDirectoriesOnly: [false, Type.BOOLEAN], // Allow only selecting directories with browse (no support for filtering dnd at this point)\n\n    // Revert mode\n    forceRevert: [false, Type.BOOLEAN], // Set to 'force' to require the file to be reverted before removal\n\n    // Input requirements\n    maxFiles: [null, Type.INT], // Max number of files\n    checkValidity: [false, Type.BOOLEAN], // Enables custom validity messages\n\n    // Where to put file\n    itemInsertLocationFreedom: [true, Type.BOOLEAN], // Set to false to always add items to begin or end of list\n    itemInsertLocation: ['before', Type.STRING], // Default index in list to add items that have been dropped at the top of the list\n    itemInsertInterval: [75, Type.INT],\n\n    // Drag 'n Drop related\n    dropOnPage: [false, Type.BOOLEAN], // Allow dropping of files anywhere on page (prevents browser from opening file if dropped outside of Up)\n    dropOnElement: [true, Type.BOOLEAN], // Drop needs to happen on element (set to false to also load drops outside of Up)\n    dropValidation: [false, Type.BOOLEAN], // Enable or disable validating files on drop\n    ignoredFiles: [['.ds_store', 'thumbs.db', 'desktop.ini'], Type.ARRAY],\n\n    // Upload related\n    instantUpload: [true, Type.BOOLEAN], // Should upload files immidiately on drop\n    maxParallelUploads: [2, Type.INT], // Maximum files to upload in parallel\n\n    // Chunks\n    chunkUploads: [false, Type.BOOLEAN], // Enable chunked uploads\n    chunkForce: [false, Type.BOOLEAN], // Force use of chunk uploads even for files smaller than chunk size\n    chunkSize: [5000000, Type.INT], // Size of chunks (5MB default)\n    chunkRetryDelays: [[500, 1000, 3000], Type.Array], // Amount of times to retry upload of a chunk when it fails\n\n    // The server api end points to use for uploading (see docs)\n    server: [null, Type.SERVER_API],\n\n    // Labels and status messages\n    labelDecimalSeparator: [getDecimalSeparator(), Type.STRING], // Default is locale separator\n    labelThousandsSeparator: [getThousandsSeparator(), Type.STRING], // Default is locale separator\n\n    labelIdle: [\n      'Drag & Drop your files or <span class=\"filepond--label-action\">Browse</span>',\n      Type.STRING\n    ],\n    labelInvalidField: ['Field contains invalid files', Type.STRING],\n    labelFileWaitingForSize: ['Waiting for size', Type.STRING],\n    labelFileSizeNotAvailable: ['Size not available', Type.STRING],\n    labelFileCountSingular: ['file in list', Type.STRING],\n    labelFileCountPlural: ['files in list', Type.STRING],\n    labelFileLoading: ['Loading', Type.STRING],\n    labelFileAdded: ['Added', Type.STRING], // assistive only\n    labelFileLoadError: ['Error during load', Type.STRING],\n    labelFileRemoved: ['Removed', Type.STRING], // assistive only\n    labelFileRemoveError: ['Error during remove', Type.STRING],\n    labelFileProcessing: ['Uploading', Type.STRING],\n    labelFileProcessingComplete: ['Upload complete', Type.STRING],\n    labelFileProcessingAborted: ['Upload cancelled', Type.STRING],\n    labelFileProcessingError: ['Error during upload', Type.STRING],\n    labelFileProcessingRevertError: ['Error during revert', Type.STRING],\n\n    labelTapToCancel: ['tap to cancel', Type.STRING],\n    labelTapToRetry: ['tap to retry', Type.STRING],\n    labelTapToUndo: ['tap to undo', Type.STRING],\n\n    labelButtonRemoveItem: ['Remove', Type.STRING],\n    labelButtonAbortItemLoad: ['Abort', Type.STRING],\n    labelButtonRetryItemLoad: ['Retry', Type.STRING],\n    labelButtonAbortItemProcessing: ['Cancel', Type.STRING],\n    labelButtonUndoItemProcessing: ['Undo', Type.STRING],\n    labelButtonRetryItemProcessing: ['Retry', Type.STRING],\n    labelButtonProcessItem: ['Upload', Type.STRING],\n\n    // make sure width and height plus viewpox are even numbers so icons are nicely centered\n    iconRemove: [\n      '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.586 13l-2.293 2.293a1 1 0 0 0 1.414 1.414L13 14.414l2.293 2.293a1 1 0 0 0 1.414-1.414L14.414 13l2.293-2.293a1 1 0 0 0-1.414-1.414L13 11.586l-2.293-2.293a1 1 0 0 0-1.414 1.414L11.586 13z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n      Type.STRING\n    ],\n\n    iconProcess: [\n      '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M14 10.414v3.585a1 1 0 0 1-2 0v-3.585l-1.293 1.293a1 1 0 0 1-1.414-1.415l3-3a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.415L14 10.414zM9 18a1 1 0 0 1 0-2h8a1 1 0 0 1 0 2H9z\" fill=\"currentColor\" fill-rule=\"evenodd\"/></svg>',\n      Type.STRING\n    ],\n\n    iconRetry: [\n      '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10.81 9.185l-.038.02A4.997 4.997 0 0 0 8 13.683a5 5 0 0 0 5 5 5 5 0 0 0 5-5 1 1 0 0 1 2 0A7 7 0 1 1 9.722 7.496l-.842-.21a.999.999 0 1 1 .484-1.94l3.23.806c.535.133.86.675.73 1.21l-.804 3.233a.997.997 0 0 1-1.21.73.997.997 0 0 1-.73-1.21l.23-.928v-.002z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n      Type.STRING\n    ],\n\n    iconUndo: [\n      '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M9.185 10.81l.02-.038A4.997 4.997 0 0 1 13.683 8a5 5 0 0 1 5 5 5 5 0 0 1-5 5 1 1 0 0 0 0 2A7 7 0 1 0 7.496 9.722l-.21-.842a.999.999 0 1 0-1.94.484l.806 3.23c.133.535.675.86 1.21.73l3.233-.803a.997.997 0 0 0 .73-1.21.997.997 0 0 0-1.21-.73l-.928.23-.002-.001z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n      Type.STRING\n    ],\n\n    iconDone: [\n      '<svg width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M18.293 9.293a1 1 0 0 1 1.414 1.414l-7.002 7a1 1 0 0 1-1.414 0l-3.998-4a1 1 0 1 1 1.414-1.414L12 15.586l6.294-6.293z\" fill=\"currentColor\" fill-rule=\"nonzero\"/></svg>',\n      Type.STRING\n    ],\n\n    // event handlers\n    oninit: [null, Type.FUNCTION],\n    onwarning: [null, Type.FUNCTION],\n    onerror: [null, Type.FUNCTION],\n    onactivatefile: [null, Type.FUNCTION],\n    oninitfile: [null, Type.FUNCTION],\n    onaddfilestart: [null, Type.FUNCTION],\n    onaddfileprogress: [null, Type.FUNCTION],\n    onaddfile: [null, Type.FUNCTION],\n    onprocessfilestart: [null, Type.FUNCTION],\n    onprocessfileprogress: [null, Type.FUNCTION],\n    onprocessfileabort: [null, Type.FUNCTION],\n    onprocessfilerevert: [null, Type.FUNCTION],\n    onprocessfile: [null, Type.FUNCTION],\n    onprocessfiles: [null, Type.FUNCTION],\n    onremovefile: [null, Type.FUNCTION],\n    onpreparefile: [null, Type.FUNCTION],\n    onupdatefiles: [null, Type.FUNCTION],\n    onreorderfiles: [null, Type.FUNCTION],\n\n    // hooks\n    beforeDropFile: [null, Type.FUNCTION],\n    beforeAddFile: [null, Type.FUNCTION],\n    beforeRemoveFile: [null, Type.FUNCTION],\n\n    // styles\n    stylePanelLayout: [null, Type.STRING], // null 'integrated', 'compact', 'circle'\n    stylePanelAspectRatio: [null, Type.STRING], // null or '3:2' or 1\n    styleItemPanelAspectRatio: [null, Type.STRING],\n    styleButtonRemoveItemPosition: ['left', Type.STRING],\n    styleButtonProcessItemPosition: ['right', Type.STRING],\n    styleLoadIndicatorPosition: ['right', Type.STRING],\n    styleProgressIndicatorPosition: ['right', Type.STRING],\n    styleButtonRemoveItemAlign: [false, Type.BOOLEAN],\n\n    // custom initial files array\n    files: [[], Type.ARRAY]\n  };\n\n  var getItemByQuery = function getItemByQuery(items, query) {\n    // just return first index\n    if (isEmpty(query)) {\n      return items[0] || null;\n    }\n\n    // query is index\n    if (isInt(query)) {\n      return items[query] || null;\n    }\n\n    // if query is item, get the id\n    if (typeof query === 'object') {\n      query = query.id;\n    }\n\n    // assume query is a string and return item by id\n    return (\n      items.find(function(item) {\n        return item.id === query;\n      }) || null\n    );\n  };\n\n  var getNumericAspectRatioFromString = function getNumericAspectRatioFromString(\n    aspectRatio\n  ) {\n    if (isEmpty(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (/:/.test(aspectRatio)) {\n      var parts = aspectRatio.split(':');\n      return parts[1] / parts[0];\n    }\n    return parseFloat(aspectRatio);\n  };\n\n  var getActiveItems = function getActiveItems(items) {\n    return items.filter(function(item) {\n      return !item.archived;\n    });\n  };\n\n  var Status = {\n    EMPTY: 0,\n    IDLE: 1, // waiting\n    ERROR: 2, // a file is in error state\n    BUSY: 3, // busy processing or loading\n    READY: 4 // all files uploaded\n  };\n\n  var ITEM_ERROR = [\n    ItemStatus.LOAD_ERROR,\n    ItemStatus.PROCESSING_ERROR,\n    ItemStatus.PROCESSING_REVERT_ERROR\n  ];\n  var ITEM_BUSY = [\n    ItemStatus.LOADING,\n    ItemStatus.PROCESSING,\n    ItemStatus.PROCESSING_QUEUED,\n    ItemStatus.INIT\n  ];\n  var ITEM_READY = [ItemStatus.PROCESSING_COMPLETE];\n\n  var isItemInErrorState = function isItemInErrorState(item) {\n    return ITEM_ERROR.includes(item.status);\n  };\n  var isItemInBusyState = function isItemInBusyState(item) {\n    return ITEM_BUSY.includes(item.status);\n  };\n  var isItemInReadyState = function isItemInReadyState(item) {\n    return ITEM_READY.includes(item.status);\n  };\n\n  var queries = function queries(state) {\n    return {\n      GET_STATUS: function GET_STATUS() {\n        var items = getActiveItems(state.items);\n        var EMPTY = Status.EMPTY,\n          ERROR = Status.ERROR,\n          BUSY = Status.BUSY,\n          IDLE = Status.IDLE,\n          READY = Status.READY;\n\n        if (items.length === 0) return EMPTY;\n\n        if (items.some(isItemInErrorState)) return ERROR;\n\n        if (items.some(isItemInBusyState)) return BUSY;\n\n        if (items.some(isItemInReadyState)) return READY;\n\n        return IDLE;\n      },\n\n      GET_ITEM: function GET_ITEM(query) {\n        return getItemByQuery(state.items, query);\n      },\n\n      GET_ACTIVE_ITEM: function GET_ACTIVE_ITEM(query) {\n        return getItemByQuery(getActiveItems(state.items), query);\n      },\n\n      GET_ACTIVE_ITEMS: function GET_ACTIVE_ITEMS() {\n        return getActiveItems(state.items);\n      },\n\n      GET_ITEMS: function GET_ITEMS() {\n        return state.items;\n      },\n\n      GET_ITEM_NAME: function GET_ITEM_NAME(query) {\n        var item = getItemByQuery(state.items, query);\n        return item ? item.filename : null;\n      },\n\n      GET_ITEM_SIZE: function GET_ITEM_SIZE(query) {\n        var item = getItemByQuery(state.items, query);\n        return item ? item.fileSize : null;\n      },\n\n      GET_STYLES: function GET_STYLES() {\n        return Object.keys(state.options)\n          .filter(function(key) {\n            return /^style/.test(key);\n          })\n          .map(function(option) {\n            return {\n              name: option,\n              value: state.options[option]\n            };\n          });\n      },\n\n      GET_PANEL_ASPECT_RATIO: function GET_PANEL_ASPECT_RATIO() {\n        var isShapeCircle = /circle/.test(state.options.stylePanelLayout);\n        var aspectRatio = isShapeCircle\n          ? 1\n          : getNumericAspectRatioFromString(\n              state.options.stylePanelAspectRatio\n            );\n        return aspectRatio;\n      },\n\n      GET_ITEM_PANEL_ASPECT_RATIO: function GET_ITEM_PANEL_ASPECT_RATIO() {\n        return state.options.styleItemPanelAspectRatio;\n      },\n\n      GET_ITEMS_BY_STATUS: function GET_ITEMS_BY_STATUS(status) {\n        return getActiveItems(state.items).filter(function(item) {\n          return item.status === status;\n        });\n      },\n\n      GET_TOTAL_ITEMS: function GET_TOTAL_ITEMS() {\n        return getActiveItems(state.items).length;\n      },\n\n      IS_ASYNC: function IS_ASYNC() {\n        return (\n          isObject(state.options.server) &&\n          (isObject(state.options.server.process) ||\n            isFunction(state.options.server.process))\n        );\n      }\n    };\n  };\n\n  var hasRoomForItem = function hasRoomForItem(state) {\n    var count = getActiveItems(state.items).length;\n\n    // if cannot have multiple items, to add one item it should currently not contain items\n    if (!state.options.allowMultiple) {\n      return count === 0;\n    }\n\n    // if allows multiple items, we check if a max item count has been set, if not, there's no limit\n    var maxFileCount = state.options.maxFiles;\n    if (maxFileCount === null) {\n      return true;\n    }\n\n    // we check if the current count is smaller than the max count, if so, another file can still be added\n    if (count < maxFileCount) {\n      return true;\n    }\n\n    // no more room for another file\n    return false;\n  };\n\n  var limit = function limit(value, min, max) {\n    return Math.max(Math.min(max, value), min);\n  };\n\n  var arrayInsert = function arrayInsert(arr, index, item) {\n    return arr.splice(index, 0, item);\n  };\n\n  var insertItem = function insertItem(items, item, index) {\n    if (isEmpty(item)) {\n      return null;\n    }\n\n    // if index is undefined, append\n    if (typeof index === 'undefined') {\n      items.push(item);\n      return item;\n    }\n\n    // limit the index to the size of the items array\n    index = limit(index, 0, items.length);\n\n    // add item to array\n    arrayInsert(items, index, item);\n\n    // expose\n    return item;\n  };\n\n  var isBase64DataURI = function isBase64DataURI(str) {\n    return /^\\s*data:([a-z]+\\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&',()*+;=\\-._~:@\\/?%\\s]*)\\s*$/i.test(\n      str\n    );\n  };\n\n  var getFilenameFromURL = function getFilenameFromURL(url) {\n    return url\n      .split('/')\n      .pop()\n      .split('?')\n      .shift();\n  };\n\n  var getExtensionFromFilename = function getExtensionFromFilename(name) {\n    return name.split('.').pop();\n  };\n\n  var guesstimateExtension = function guesstimateExtension(type) {\n    // if no extension supplied, exit here\n    if (typeof type !== 'string') {\n      return '';\n    }\n\n    // get subtype\n    var subtype = type.split('/').pop();\n\n    // is svg subtype\n    if (/svg/.test(subtype)) {\n      return 'svg';\n    }\n\n    if (/zip|compressed/.test(subtype)) {\n      return 'zip';\n    }\n\n    if (/plain/.test(subtype)) {\n      return 'txt';\n    }\n\n    if (/msword/.test(subtype)) {\n      return 'doc';\n    }\n\n    // if is valid subtype\n    if (/[a-z]+/.test(subtype)) {\n      // always use jpg extension\n      if (subtype === 'jpeg') {\n        return 'jpg';\n      }\n\n      // return subtype\n      return subtype;\n    }\n\n    return '';\n  };\n\n  var leftPad = function leftPad(value) {\n    var padding =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    return (padding + value).slice(-padding.length);\n  };\n\n  var getDateString = function getDateString() {\n    var date =\n      arguments.length > 0 && arguments[0] !== undefined\n        ? arguments[0]\n        : new Date();\n    return (\n      date.getFullYear() +\n      '-' +\n      leftPad(date.getMonth() + 1, '00') +\n      '-' +\n      leftPad(date.getDate(), '00') +\n      '_' +\n      leftPad(date.getHours(), '00') +\n      '-' +\n      leftPad(date.getMinutes(), '00') +\n      '-' +\n      leftPad(date.getSeconds(), '00')\n    );\n  };\n\n  var getFileFromBlob = function getFileFromBlob(blob, filename) {\n    var type =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var extension =\n      arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var file =\n      typeof type === 'string'\n        ? blob.slice(0, blob.size, type)\n        : blob.slice(0, blob.size, blob.type);\n    file.lastModifiedDate = new Date();\n\n    // copy relative path\n    if (blob._relativePath) file._relativePath = blob._relativePath;\n\n    // if blob has name property, use as filename if no filename supplied\n    if (!isString(filename)) {\n      filename = getDateString();\n    }\n\n    // if filename supplied but no extension and filename has extension\n    if (filename && extension === null && getExtensionFromFilename(filename)) {\n      file.name = filename;\n    } else {\n      extension = extension || guesstimateExtension(file.type);\n      file.name = filename + (extension ? '.' + extension : '');\n    }\n\n    return file;\n  };\n\n  var getBlobBuilder = function getBlobBuilder() {\n    return (window.BlobBuilder =\n      window.BlobBuilder ||\n      window.WebKitBlobBuilder ||\n      window.MozBlobBuilder ||\n      window.MSBlobBuilder);\n  };\n\n  var createBlob = function createBlob(arrayBuffer, mimeType) {\n    var BB = getBlobBuilder();\n\n    if (BB) {\n      var bb = new BB();\n      bb.append(arrayBuffer);\n      return bb.getBlob(mimeType);\n    }\n\n    return new Blob([arrayBuffer], {\n      type: mimeType\n    });\n  };\n\n  var getBlobFromByteStringWithMimeType = function getBlobFromByteStringWithMimeType(\n    byteString,\n    mimeType\n  ) {\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n\n    return createBlob(ab, mimeType);\n  };\n\n  var getMimeTypeFromBase64DataURI = function getMimeTypeFromBase64DataURI(\n    dataURI\n  ) {\n    return (/^data:(.+);/.exec(dataURI) || [])[1] || null;\n  };\n\n  var getBase64DataFromBase64DataURI = function getBase64DataFromBase64DataURI(\n    dataURI\n  ) {\n    // get data part of string (remove data:image/jpeg...,)\n    var data = dataURI.split(',')[1];\n\n    // remove any whitespace as that causes InvalidCharacterError in IE\n    return data.replace(/\\s/g, '');\n  };\n\n  var getByteStringFromBase64DataURI = function getByteStringFromBase64DataURI(\n    dataURI\n  ) {\n    return atob(getBase64DataFromBase64DataURI(dataURI));\n  };\n\n  var getBlobFromBase64DataURI = function getBlobFromBase64DataURI(dataURI) {\n    var mimeType = getMimeTypeFromBase64DataURI(dataURI);\n    var byteString = getByteStringFromBase64DataURI(dataURI);\n\n    return getBlobFromByteStringWithMimeType(byteString, mimeType);\n  };\n\n  var getFileFromBase64DataURI = function getFileFromBase64DataURI(\n    dataURI,\n    filename,\n    extension\n  ) {\n    return getFileFromBlob(\n      getBlobFromBase64DataURI(dataURI),\n      filename,\n      null,\n      extension\n    );\n  };\n\n  var getFileNameFromHeader = function getFileNameFromHeader(header) {\n    // test if is content disposition header, if not exit\n    if (!/^content-disposition:/i.test(header)) return null;\n\n    // get filename parts\n    var matches = header\n      .split(/filename=|filename\\*=.+''/)\n      .splice(1)\n      .map(function(name) {\n        return name.trim().replace(/^[\"']|[;\"']{0,2}$/g, '');\n      })\n      .filter(function(name) {\n        return name.length;\n      });\n\n    return matches.length ? decodeURI(matches[matches.length - 1]) : null;\n  };\n\n  var getFileSizeFromHeader = function getFileSizeFromHeader(header) {\n    if (/content-length:/i.test(header)) {\n      var size = header.match(/[0-9]+/)[0];\n      return size ? parseInt(size, 10) : null;\n    }\n    return null;\n  };\n\n  var getTranfserIdFromHeader = function getTranfserIdFromHeader(header) {\n    if (/x-content-transfer-id:/i.test(header)) {\n      var id = (header.split(':')[1] || '').trim();\n      return id || null;\n    }\n    return null;\n  };\n\n  var getFileInfoFromHeaders = function getFileInfoFromHeaders(headers) {\n    var info = {\n      source: null,\n      name: null,\n      size: null\n    };\n\n    var rows = headers.split('\\n');\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n    try {\n      for (\n        var _iterator = rows[Symbol.iterator](), _step;\n        !(_iteratorNormalCompletion = (_step = _iterator.next()).done);\n        _iteratorNormalCompletion = true\n      ) {\n        var header = _step.value;\n\n        var name = getFileNameFromHeader(header);\n        if (name) {\n          info.name = name;\n          continue;\n        }\n\n        var size = getFileSizeFromHeader(header);\n        if (size) {\n          info.size = size;\n          continue;\n        }\n\n        var source = getTranfserIdFromHeader(header);\n        if (source) {\n          info.source = source;\n          continue;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return info;\n  };\n\n  var createFileLoader = function createFileLoader(fetchFn) {\n    var state = {\n      source: null,\n      complete: false,\n      progress: 0,\n      size: null,\n      timestamp: null,\n      duration: 0,\n      request: null\n    };\n\n    var getProgress = function getProgress() {\n      return state.progress;\n    };\n    var abort = function abort() {\n      if (state.request && state.request.abort) {\n        state.request.abort();\n      }\n    };\n\n    // load source\n    var load = function load() {\n      // get quick reference\n      var source = state.source;\n\n      api.fire('init', source);\n\n      // Load Files\n      if (source instanceof File) {\n        api.fire('load', source);\n      } else if (source instanceof Blob) {\n        // Load blobs, set default name to current date\n        api.fire('load', getFileFromBlob(source, source.name));\n      } else if (isBase64DataURI(source)) {\n        // Load base 64, set default name to current date\n        api.fire('load', getFileFromBase64DataURI(source));\n      } else {\n        // Deal as if is external URL, let's load it!\n        loadURL(source);\n      }\n    };\n\n    // loads a url\n    var loadURL = function loadURL(url) {\n      // is remote url and no fetch method supplied\n      if (!fetchFn) {\n        api.fire('error', {\n          type: 'error',\n          body: \"Can't load URL\",\n          code: 400\n        });\n\n        return;\n      }\n\n      // set request start\n      state.timestamp = Date.now();\n\n      // load file\n      state.request = fetchFn(\n        url,\n        function(response) {\n          // update duration\n          state.duration = Date.now() - state.timestamp;\n\n          // done!\n          state.complete = true;\n\n          // turn blob response into a file\n          if (response instanceof Blob) {\n            response = getFileFromBlob(\n              response,\n              response.name || getFilenameFromURL(url)\n            );\n          }\n\n          api.fire(\n            'load',\n            // if has received blob, we go with blob, if no response, we return null\n            response instanceof Blob\n              ? response\n              : response\n              ? response.body\n              : null\n          );\n        },\n        function(error) {\n          api.fire(\n            'error',\n            typeof error === 'string'\n              ? {\n                  type: 'error',\n                  code: 0,\n                  body: error\n                }\n              : error\n          );\n        },\n        function(computable, current, total) {\n          // collected some meta data already\n          if (total) {\n            state.size = total;\n          }\n\n          // update duration\n          state.duration = Date.now() - state.timestamp;\n\n          // if we can't compute progress, we're not going to fire progress events\n          if (!computable) {\n            state.progress = null;\n            return;\n          }\n\n          // update progress percentage\n          state.progress = current / total;\n\n          // expose\n          api.fire('progress', state.progress);\n        },\n        function() {\n          api.fire('abort');\n        },\n        function(response) {\n          var fileinfo = getFileInfoFromHeaders(\n            typeof response === 'string' ? response : response.headers\n          );\n          api.fire('meta', {\n            size: state.size || fileinfo.size,\n            filename: fileinfo.name,\n            source: fileinfo.source\n          });\n        }\n      );\n    };\n\n    var api = Object.assign({}, on(), {\n      setSource: function setSource(source) {\n        return (state.source = source);\n      },\n      getProgress: getProgress, // file load progress\n      abort: abort, // abort file load\n      load: load // start load\n    });\n\n    return api;\n  };\n\n  var isGet = function isGet(method) {\n    return /GET|HEAD/.test(method);\n  };\n\n  var sendRequest = function sendRequest(data, url, options) {\n    var api = {\n      onheaders: function onheaders() {},\n      onprogress: function onprogress() {},\n      onload: function onload() {},\n      ontimeout: function ontimeout() {},\n      onerror: function onerror() {},\n      onabort: function onabort() {},\n      abort: function abort() {\n        aborted = true;\n        xhr.abort();\n      }\n    };\n\n    // timeout identifier, only used when timeout is defined\n    var aborted = false;\n    var headersReceived = false;\n\n    // set default options\n    options = Object.assign(\n      {\n        method: 'POST',\n        headers: {},\n        withCredentials: false\n      },\n      options\n    );\n\n    // encode url\n    url = encodeURI(url);\n\n    // if method is GET, add any received data to url\n\n    if (isGet(options.method) && data) {\n      url =\n        '' +\n        url +\n        encodeURIComponent(\n          typeof data === 'string' ? data : JSON.stringify(data)\n        );\n    }\n\n    // create request\n    var xhr = new XMLHttpRequest();\n\n    // progress of load\n    var process = isGet(options.method) ? xhr : xhr.upload;\n    process.onprogress = function(e) {\n      // no progress event when aborted ( onprogress is called once after abort() )\n      if (aborted) {\n        return;\n      }\n\n      api.onprogress(e.lengthComputable, e.loaded, e.total);\n    };\n\n    // tries to get header info to the app as fast as possible\n    xhr.onreadystatechange = function() {\n      // not interesting in these states ('unsent' and 'openend' as they don't give us any additional info)\n      if (xhr.readyState < 2) {\n        return;\n      }\n\n      // no server response\n      if (xhr.readyState === 4 && xhr.status === 0) {\n        return;\n      }\n\n      if (headersReceived) {\n        return;\n      }\n\n      headersReceived = true;\n\n      // we've probably received some useful data in response headers\n      api.onheaders(xhr);\n    };\n\n    // load successful\n    xhr.onload = function() {\n      // is classified as valid response\n      if (xhr.status >= 200 && xhr.status < 300) {\n        api.onload(xhr);\n      } else {\n        api.onerror(xhr);\n      }\n    };\n\n    // error during load\n    xhr.onerror = function() {\n      return api.onerror(xhr);\n    };\n\n    // request aborted\n    xhr.onabort = function() {\n      aborted = true;\n      api.onabort();\n    };\n\n    // request timeout\n    xhr.ontimeout = function() {\n      return api.ontimeout(xhr);\n    };\n\n    // open up open up!\n    xhr.open(options.method, url, true);\n\n    // set timeout if defined (do it after open so IE11 plays ball)\n    if (isInt(options.timeout)) {\n      xhr.timeout = options.timeout;\n    }\n\n    // add headers\n    Object.keys(options.headers).forEach(function(key) {\n      var value = unescape(encodeURIComponent(options.headers[key]));\n      xhr.setRequestHeader(key, value);\n    });\n\n    // set type of response\n    if (options.responseType) {\n      xhr.responseType = options.responseType;\n    }\n\n    // set credentials\n    if (options.withCredentials) {\n      xhr.withCredentials = true;\n    }\n\n    // let's send our data\n    xhr.send(data);\n\n    return api;\n  };\n\n  var createResponse = function createResponse(type, code, body, headers) {\n    return {\n      type: type,\n      code: code,\n      body: body,\n      headers: headers\n    };\n  };\n\n  var createTimeoutResponse = function createTimeoutResponse(cb) {\n    return function(xhr) {\n      cb(createResponse('error', 0, 'Timeout', xhr.getAllResponseHeaders()));\n    };\n  };\n\n  var hasQS = function hasQS(str) {\n    return /\\?/.test(str);\n  };\n  var buildURL = function buildURL() {\n    var url = '';\n    for (\n      var _len = arguments.length, parts = new Array(_len), _key = 0;\n      _key < _len;\n      _key++\n    ) {\n      parts[_key] = arguments[_key];\n    }\n    parts.forEach(function(part) {\n      url += hasQS(url) && hasQS(part) ? part.replace(/\\?/, '&') : part;\n    });\n    return url;\n  };\n\n  var createFetchFunction = function createFetchFunction() {\n    var apiUrl =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    // custom handler (should also handle file, load, error, progress and abort)\n    if (typeof action === 'function') {\n      return action;\n    }\n\n    // no action supplied\n    if (!action || !isString(action.url)) {\n      return null;\n    }\n\n    // set onload hanlder\n    var onload =\n      action.onload ||\n      function(res) {\n        return res;\n      };\n    var onerror =\n      action.onerror ||\n      function(res) {\n        return null;\n      };\n\n    // internal handler\n    return function(url, load, error, progress, abort, headers) {\n      // do local or remote request based on if the url is external\n      var request = sendRequest(\n        url,\n        buildURL(apiUrl, action.url),\n        Object.assign({}, action, {\n          responseType: 'blob'\n        })\n      );\n\n      request.onload = function(xhr) {\n        // get headers\n        var headers = xhr.getAllResponseHeaders();\n\n        // get filename\n        var filename =\n          getFileInfoFromHeaders(headers).name || getFilenameFromURL(url);\n\n        // create response\n        load(\n          createResponse(\n            'load',\n            xhr.status,\n            action.method === 'HEAD'\n              ? null\n              : getFileFromBlob(onload(xhr.response), filename),\n            headers\n          )\n        );\n      };\n\n      request.onerror = function(xhr) {\n        error(\n          createResponse(\n            'error',\n            xhr.status,\n            onerror(xhr.response) || xhr.statusText,\n            xhr.getAllResponseHeaders()\n          )\n        );\n      };\n\n      request.onheaders = function(xhr) {\n        headers(\n          createResponse(\n            'headers',\n            xhr.status,\n            null,\n            xhr.getAllResponseHeaders()\n          )\n        );\n      };\n\n      request.ontimeout = createTimeoutResponse(error);\n      request.onprogress = progress;\n      request.onabort = abort;\n\n      // should return request\n      return request;\n    };\n  };\n\n  var ChunkStatus = {\n    QUEUED: 0,\n    COMPLETE: 1,\n    PROCESSING: 2,\n    ERROR: 3,\n    WAITING: 4\n  };\n\n  /*\n                                                       function signature:\n                                                         (file, metadata, load, error, progress, abort, transfer, options) => {\n                                                           return {\n                                                           abort:() => {}\n                                                         }\n                                                       }\n                                                       */\n\n  // apiUrl, action, name, file, metadata, load, error, progress, abort, transfer, options\n  var processFileChunked = function processFileChunked(\n    apiUrl,\n    action,\n    name,\n    file,\n    metadata,\n    load,\n    error,\n    progress,\n    abort,\n    transfer,\n    options\n  ) {\n    // all chunks\n    var chunks = [];\n    var chunkTransferId = options.chunkTransferId,\n      chunkServer = options.chunkServer,\n      chunkSize = options.chunkSize,\n      chunkRetryDelays = options.chunkRetryDelays;\n\n    // default state\n    var state = {\n      serverId: chunkTransferId,\n      aborted: false\n    };\n\n    // set onload handlers\n    var ondata =\n      action.ondata ||\n      function(fd) {\n        return fd;\n      };\n    var onload =\n      action.onload ||\n      function(xhr, method) {\n        return method === 'HEAD'\n          ? xhr.getResponseHeader('Upload-Offset')\n          : xhr.response;\n      };\n    var onerror =\n      action.onerror ||\n      function(res) {\n        return null;\n      };\n\n    // create server hook\n    var requestTransferId = function requestTransferId(cb) {\n      var formData = new FormData();\n\n      // add metadata under same name\n      if (isObject(metadata)) formData.append(name, JSON.stringify(metadata));\n\n      var headers =\n        typeof action.headers === 'function'\n          ? action.headers(file, metadata)\n          : Object.assign({}, action.headers, {\n              'Upload-Length': file.size\n            });\n\n      var requestParams = Object.assign({}, action, {\n        headers: headers\n      });\n\n      // send request object\n      var request = sendRequest(\n        ondata(formData),\n        buildURL(apiUrl, action.url),\n        requestParams\n      );\n\n      request.onload = function(xhr) {\n        return cb(onload(xhr, requestParams.method));\n      };\n\n      request.onerror = function(xhr) {\n        return error(\n          createResponse(\n            'error',\n            xhr.status,\n            onerror(xhr.response) || xhr.statusText,\n            xhr.getAllResponseHeaders()\n          )\n        );\n      };\n\n      request.ontimeout = createTimeoutResponse(error);\n    };\n\n    var requestTransferOffset = function requestTransferOffset(cb) {\n      var requestUrl = buildURL(apiUrl, chunkServer.url, state.serverId);\n\n      var headers =\n        typeof action.headers === 'function'\n          ? action.headers(state.serverId)\n          : Object.assign({}, action.headers);\n\n      var requestParams = {\n        headers: headers,\n        method: 'HEAD'\n      };\n\n      var request = sendRequest(null, requestUrl, requestParams);\n\n      request.onload = function(xhr) {\n        return cb(onload(xhr, requestParams.method));\n      };\n\n      request.onerror = function(xhr) {\n        return error(\n          createResponse(\n            'error',\n            xhr.status,\n            onerror(xhr.response) || xhr.statusText,\n            xhr.getAllResponseHeaders()\n          )\n        );\n      };\n\n      request.ontimeout = createTimeoutResponse(error);\n    };\n\n    // create chunks\n    var lastChunkIndex = Math.floor(file.size / chunkSize);\n    for (var i = 0; i <= lastChunkIndex; i++) {\n      var offset = i * chunkSize;\n      var data = file.slice(\n        offset,\n        offset + chunkSize,\n        'application/offset+octet-stream'\n      );\n      chunks[i] = {\n        index: i,\n        size: data.size,\n        offset: offset,\n        data: data,\n        file: file,\n        progress: 0,\n        retries: _toConsumableArray(chunkRetryDelays),\n        status: ChunkStatus.QUEUED,\n        error: null,\n        request: null,\n        timeout: null\n      };\n    }\n\n    var completeProcessingChunks = function completeProcessingChunks() {\n      return load(state.serverId);\n    };\n\n    var canProcessChunk = function canProcessChunk(chunk) {\n      return (\n        chunk.status === ChunkStatus.QUEUED ||\n        chunk.status === ChunkStatus.ERROR\n      );\n    };\n\n    var processChunk = function processChunk(chunk) {\n      // processing is paused, wait here\n      if (state.aborted) return;\n\n      // get next chunk to process\n      chunk = chunk || chunks.find(canProcessChunk);\n\n      // no more chunks to process\n      if (!chunk) {\n        // all done?\n        if (\n          chunks.every(function(chunk) {\n            return chunk.status === ChunkStatus.COMPLETE;\n          })\n        ) {\n          completeProcessingChunks();\n        }\n\n        // no chunk to handle\n        return;\n      }\n\n      // now processing this chunk\n      chunk.status = ChunkStatus.PROCESSING;\n      chunk.progress = null;\n\n      // allow parsing of formdata\n      var ondata =\n        chunkServer.ondata ||\n        function(fd) {\n          return fd;\n        };\n      var onerror =\n        chunkServer.onerror ||\n        function(res) {\n          return null;\n        };\n\n      // send request object\n      var requestUrl = buildURL(apiUrl, chunkServer.url, state.serverId);\n\n      var headers =\n        typeof chunkServer.headers === 'function'\n          ? chunkServer.headers(chunk)\n          : Object.assign({}, chunkServer.headers, {\n              'Content-Type': 'application/offset+octet-stream',\n              'Upload-Offset': chunk.offset,\n              'Upload-Length': file.size,\n              'Upload-Name': file.name\n            });\n\n      var request = (chunk.request = sendRequest(\n        ondata(chunk.data),\n        requestUrl,\n        Object.assign({}, chunkServer, {\n          headers: headers\n        })\n      ));\n\n      request.onload = function() {\n        // done!\n        chunk.status = ChunkStatus.COMPLETE;\n\n        // remove request reference\n        chunk.request = null;\n\n        // start processing more chunks\n        processChunks();\n      };\n\n      request.onprogress = function(lengthComputable, loaded, total) {\n        chunk.progress = lengthComputable ? loaded : null;\n        updateTotalProgress();\n      };\n\n      request.onerror = function(xhr) {\n        chunk.status = ChunkStatus.ERROR;\n        chunk.request = null;\n        chunk.error = onerror(xhr.response) || xhr.statusText;\n        if (!retryProcessChunk(chunk)) {\n          error(\n            createResponse(\n              'error',\n              xhr.status,\n              onerror(xhr.response) || xhr.statusText,\n              xhr.getAllResponseHeaders()\n            )\n          );\n        }\n      };\n\n      request.ontimeout = function(xhr) {\n        chunk.status = ChunkStatus.ERROR;\n        chunk.request = null;\n        if (!retryProcessChunk(chunk)) {\n          createTimeoutResponse(error)(xhr);\n        }\n      };\n\n      request.onabort = function() {\n        chunk.status = ChunkStatus.QUEUED;\n        chunk.request = null;\n        abort();\n      };\n    };\n\n    var retryProcessChunk = function retryProcessChunk(chunk) {\n      // no more retries left\n      if (chunk.retries.length === 0) return false;\n\n      // new retry\n      chunk.status = ChunkStatus.WAITING;\n      clearTimeout(chunk.timeout);\n      chunk.timeout = setTimeout(function() {\n        processChunk(chunk);\n      }, chunk.retries.shift());\n\n      // we're going to retry\n      return true;\n    };\n\n    var updateTotalProgress = function updateTotalProgress() {\n      // calculate total progress fraction\n      var totalBytesTransfered = chunks.reduce(function(p, chunk) {\n        if (p === null || chunk.progress === null) return null;\n        return p + chunk.progress;\n      }, 0);\n\n      // can't compute progress\n      if (totalBytesTransfered === null) return progress(false, 0, 0);\n\n      // calculate progress values\n      var totalSize = chunks.reduce(function(total, chunk) {\n        return total + chunk.size;\n      }, 0);\n\n      // can update progress indicator\n      progress(true, totalBytesTransfered, totalSize);\n    };\n\n    // process new chunks\n    var processChunks = function processChunks() {\n      var totalProcessing = chunks.filter(function(chunk) {\n        return chunk.status === ChunkStatus.PROCESSING;\n      }).length;\n      if (totalProcessing >= 1) return;\n      processChunk();\n    };\n\n    var abortChunks = function abortChunks() {\n      chunks.forEach(function(chunk) {\n        clearTimeout(chunk.timeout);\n        if (chunk.request) {\n          chunk.request.abort();\n        }\n      });\n    };\n\n    // let's go!\n    if (!state.serverId) {\n      requestTransferId(function(serverId) {\n        // stop here if aborted, might have happened in between request and callback\n        if (state.aborted) return;\n\n        // pass back to item so we can use it if something goes wrong\n        transfer(serverId);\n\n        // store internally\n        state.serverId = serverId;\n        processChunks();\n      });\n    } else {\n      requestTransferOffset(function(offset) {\n        // stop here if aborted, might have happened in between request and callback\n        if (state.aborted) return;\n\n        // mark chunks with lower offset as complete\n        chunks\n          .filter(function(chunk) {\n            return chunk.offset < offset;\n          })\n          .forEach(function(chunk) {\n            chunk.status = ChunkStatus.COMPLETE;\n            chunk.progress = chunk.size;\n          });\n\n        // continue processing\n        processChunks();\n      });\n    }\n\n    return {\n      abort: function abort() {\n        state.aborted = true;\n        abortChunks();\n      }\n    };\n  };\n\n  /*\n                                                               function signature:\n                                                                 (file, metadata, load, error, progress, abort) => {\n                                                                   return {\n                                                                   abort:() => {}\n                                                                 }\n                                                               }\n                                                               */\n  var createFileProcessorFunction = function createFileProcessorFunction(\n    apiUrl,\n    action,\n    name,\n    options\n  ) {\n    return function(file, metadata, load, error, progress, abort, transfer) {\n      // no file received\n      if (!file) return;\n\n      // if was passed a file, and we can chunk it, exit here\n      var canChunkUpload = options.chunkUploads;\n      var shouldChunkUpload = canChunkUpload && file.size > options.chunkSize;\n      var willChunkUpload =\n        canChunkUpload && (shouldChunkUpload || options.chunkForce);\n      if (file instanceof Blob && willChunkUpload)\n        return processFileChunked(\n          apiUrl,\n          action,\n          name,\n          file,\n          metadata,\n          load,\n          error,\n          progress,\n          abort,\n          transfer,\n          options\n        );\n\n      // set handlers\n      var ondata =\n        action.ondata ||\n        function(fd) {\n          return fd;\n        };\n      var onload =\n        action.onload ||\n        function(res) {\n          return res;\n        };\n      var onerror =\n        action.onerror ||\n        function(res) {\n          return null;\n        };\n\n      // create formdata object\n      var formData = new FormData();\n\n      // add metadata under same name\n      if (isObject(metadata)) {\n        formData.append(name, JSON.stringify(metadata));\n      }\n\n      // Turn into an array of objects so no matter what the input, we can handle it the same way\n      (file instanceof Blob ? [{ name: null, file: file }] : file).forEach(\n        function(item) {\n          formData.append(\n            name,\n            item.file,\n            item.name === null\n              ? item.file.name\n              : '' + item.name + item.file.name\n          );\n        }\n      );\n\n      // send request object\n      var request = sendRequest(\n        ondata(formData),\n        buildURL(apiUrl, action.url),\n        action\n      );\n      request.onload = function(xhr) {\n        load(\n          createResponse(\n            'load',\n            xhr.status,\n            onload(xhr.response),\n            xhr.getAllResponseHeaders()\n          )\n        );\n      };\n\n      request.onerror = function(xhr) {\n        error(\n          createResponse(\n            'error',\n            xhr.status,\n            onerror(xhr.response) || xhr.statusText,\n            xhr.getAllResponseHeaders()\n          )\n        );\n      };\n\n      request.ontimeout = createTimeoutResponse(error);\n      request.onprogress = progress;\n      request.onabort = abort;\n\n      // should return request\n      return request;\n    };\n  };\n\n  var createProcessorFunction = function createProcessorFunction() {\n    var apiUrl =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    var name = arguments.length > 2 ? arguments[2] : undefined;\n    var options = arguments.length > 3 ? arguments[3] : undefined;\n\n    // custom handler (should also handle file, load, error, progress and abort)\n    if (typeof action === 'function')\n      return function() {\n        for (\n          var _len = arguments.length, params = new Array(_len), _key = 0;\n          _key < _len;\n          _key++\n        ) {\n          params[_key] = arguments[_key];\n        }\n        return action.apply(void 0, [name].concat(params, [options]));\n      };\n\n    // no action supplied\n    if (!action || !isString(action.url)) return null;\n\n    // internal handler\n    return createFileProcessorFunction(apiUrl, action, name, options);\n  };\n\n  /*\n                                                      function signature:\n                                                      (uniqueFileId, load, error) => { }\n                                                      */\n  var createRevertFunction = function createRevertFunction() {\n    var apiUrl =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    // is custom implementation\n    if (typeof action === 'function') {\n      return action;\n    }\n\n    // no action supplied, return stub function, interface will work, but file won't be removed\n    if (!action || !isString(action.url)) {\n      return function(uniqueFileId, load) {\n        return load();\n      };\n    }\n\n    // set onload hanlder\n    var onload =\n      action.onload ||\n      function(res) {\n        return res;\n      };\n    var onerror =\n      action.onerror ||\n      function(res) {\n        return null;\n      };\n\n    // internal implementation\n    return function(uniqueFileId, load, error) {\n      var request = sendRequest(\n        uniqueFileId,\n        apiUrl + action.url,\n        action // contains method, headers and withCredentials properties\n      );\n      request.onload = function(xhr) {\n        load(\n          createResponse(\n            'load',\n            xhr.status,\n            onload(xhr.response),\n            xhr.getAllResponseHeaders()\n          )\n        );\n      };\n\n      request.onerror = function(xhr) {\n        error(\n          createResponse(\n            'error',\n            xhr.status,\n            onerror(xhr.response) || xhr.statusText,\n            xhr.getAllResponseHeaders()\n          )\n        );\n      };\n\n      request.ontimeout = createTimeoutResponse(error);\n\n      return request;\n    };\n  };\n\n  var getRandomNumber = function getRandomNumber() {\n    var min =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var max =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return min + Math.random() * (max - min);\n  };\n\n  var createPerceivedPerformanceUpdater = function createPerceivedPerformanceUpdater(\n    cb\n  ) {\n    var duration =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n    var offset =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var tickMin =\n      arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 25;\n    var tickMax =\n      arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 250;\n    var timeout = null;\n    var start = Date.now();\n\n    var tick = function tick() {\n      var runtime = Date.now() - start;\n      var delay = getRandomNumber(tickMin, tickMax);\n\n      if (runtime + delay > duration) {\n        delay = runtime + delay - duration;\n      }\n\n      var progress = runtime / duration;\n      if (progress >= 1 || document.hidden) {\n        cb(1);\n        return;\n      }\n\n      cb(progress);\n\n      timeout = setTimeout(tick, delay);\n    };\n\n    tick();\n\n    return {\n      clear: function clear() {\n        clearTimeout(timeout);\n      }\n    };\n  };\n\n  var createFileProcessor = function createFileProcessor(processFn) {\n    var state = {\n      complete: false,\n      perceivedProgress: 0,\n      perceivedPerformanceUpdater: null,\n      progress: null,\n      timestamp: null,\n      perceivedDuration: 0,\n      duration: 0,\n      request: null,\n      response: null\n    };\n\n    var process = function process(file, metadata) {\n      var progressFn = function progressFn() {\n        // we've not yet started the real download, stop here\n        // the request might not go through, for instance, there might be some server trouble\n        // if state.progress is null, the server does not allow computing progress and we show the spinner instead\n        if (state.duration === 0 || state.progress === null) return;\n\n        // as we're now processing, fire the progress event\n        api.fire('progress', api.getProgress());\n      };\n\n      var completeFn = function completeFn() {\n        state.complete = true;\n        api.fire('load-perceived', state.response.body);\n      };\n\n      // let's start processing\n      api.fire('start');\n\n      // set request start\n      state.timestamp = Date.now();\n\n      // create perceived performance progress indicator\n      state.perceivedPerformanceUpdater = createPerceivedPerformanceUpdater(\n        function(progress) {\n          state.perceivedProgress = progress;\n          state.perceivedDuration = Date.now() - state.timestamp;\n\n          progressFn();\n\n          // if fake progress is done, and a response has been received,\n          // and we've not yet called the complete method\n          if (\n            state.response &&\n            state.perceivedProgress === 1 &&\n            !state.complete\n          ) {\n            // we done!\n            completeFn();\n          }\n        },\n        // random delay as in a list of files you start noticing\n        // files uploading at the exact same speed\n        getRandomNumber(750, 1500)\n      );\n\n      // remember request so we can abort it later\n      state.request = processFn(\n        // the file to process\n        file,\n\n        // the metadata to send along\n        metadata,\n\n        // callbacks (load, error, progress, abort, transfer)\n        // load expects the body to be a server id if\n        // you want to make use of revert\n        function(response) {\n          // we put the response in state so we can access\n          // it outside of this method\n          state.response = isObject(response)\n            ? response\n            : {\n                type: 'load',\n                code: 200,\n                body: '' + response,\n                headers: {}\n              };\n\n          // update duration\n          state.duration = Date.now() - state.timestamp;\n\n          // force progress to 1 as we're now done\n          state.progress = 1;\n\n          // actual load is done let's share results\n          api.fire('load', state.response.body);\n\n          // we are really done\n          // if perceived progress is 1 ( wait for perceived progress to complete )\n          // or if server does not support progress ( null )\n          if (state.perceivedProgress === 1) {\n            completeFn();\n          }\n        },\n\n        // error is expected to be an object with type, code, body\n        function(error) {\n          // cancel updater\n          state.perceivedPerformanceUpdater.clear();\n\n          // update others about this error\n          api.fire(\n            'error',\n            isObject(error)\n              ? error\n              : {\n                  type: 'error',\n                  code: 0,\n                  body: '' + error\n                }\n          );\n        },\n\n        // actual processing progress\n        function(computable, current, total) {\n          // update actual duration\n          state.duration = Date.now() - state.timestamp;\n\n          // update actual progress\n          state.progress = computable ? current / total : null;\n\n          progressFn();\n        },\n\n        // abort does not expect a value\n        function() {\n          // stop updater\n          state.perceivedPerformanceUpdater.clear();\n\n          // fire the abort event so we can switch visuals\n          api.fire('abort', state.response ? state.response.body : null);\n        },\n\n        // register the id for this transfer\n        function(transferId) {\n          api.fire('transfer', transferId);\n        }\n      );\n    };\n\n    var abort = function abort() {\n      // no request running, can't abort\n      if (!state.request) return;\n\n      // stop updater\n      state.perceivedPerformanceUpdater.clear();\n\n      // abort actual request\n      if (state.request.abort) state.request.abort();\n\n      // if has response object, we've completed the request\n      state.complete = true;\n    };\n\n    var reset = function reset() {\n      abort();\n      state.complete = false;\n      state.perceivedProgress = 0;\n      state.progress = 0;\n      state.timestamp = null;\n      state.perceivedDuration = 0;\n      state.duration = 0;\n      state.request = null;\n      state.response = null;\n    };\n\n    var getProgress = function getProgress() {\n      return state.progress\n        ? Math.min(state.progress, state.perceivedProgress)\n        : null;\n    };\n    var getDuration = function getDuration() {\n      return Math.min(state.duration, state.perceivedDuration);\n    };\n\n    var api = Object.assign({}, on(), {\n      process: process, // start processing file\n      abort: abort, // abort active process request\n      getProgress: getProgress,\n      getDuration: getDuration,\n      reset: reset\n    });\n\n    return api;\n  };\n\n  var getFilenameWithoutExtension = function getFilenameWithoutExtension(name) {\n    return name.substr(0, name.lastIndexOf('.')) || name;\n  };\n\n  var createFileStub = function createFileStub(source) {\n    var data = [source.name, source.size, source.type];\n\n    // is blob or base64, then we need to set the name\n    if (source instanceof Blob || isBase64DataURI(source)) {\n      data[0] = source.name || getDateString();\n    } else if (isBase64DataURI(source)) {\n      // if is base64 data uri we need to determine the average size and type\n      data[1] = source.length;\n      data[2] = getMimeTypeFromBase64DataURI(source);\n    } else if (isString(source)) {\n      // url\n      data[0] = getFilenameFromURL(source);\n      data[1] = 0;\n      data[2] = 'application/octet-stream';\n    }\n\n    return {\n      name: data[0],\n      size: data[1],\n      type: data[2]\n    };\n  };\n\n  var isFile = function isFile(value) {\n    return !!(value instanceof File || (value instanceof Blob && value.name));\n  };\n\n  var deepCloneObject = function deepCloneObject(src) {\n    if (!isObject(src)) return src;\n    var target = isArray(src) ? [] : {};\n    for (var key in src) {\n      if (!src.hasOwnProperty(key)) continue;\n      var v = src[key];\n      target[key] = v && isObject(v) ? deepCloneObject(v) : v;\n    }\n    return target;\n  };\n\n  var createItem = function createItem() {\n    var origin =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var serverFileReference =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var file =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    // unique id for this item, is used to identify the item across views\n    var id = getUniqueId();\n\n    /**\n     * Internal item state\n     */\n    var state = {\n      // is archived\n      archived: false,\n\n      // if is frozen, no longer fires events\n      frozen: false,\n\n      // removed from view\n      released: false,\n\n      // original source\n      source: null,\n\n      // file model reference\n      file: file,\n\n      // id of file on server\n      serverFileReference: serverFileReference,\n\n      // id of file transfer on server\n      transferId: null,\n\n      // is aborted\n      processingAborted: false,\n\n      // current item status\n      status: serverFileReference\n        ? ItemStatus.PROCESSING_COMPLETE\n        : ItemStatus.INIT,\n\n      // active processes\n      activeLoader: null,\n      activeProcessor: null\n    };\n\n    // callback used when abort processing is called to link back to the resolve method\n    var abortProcessingRequestComplete = null;\n\n    /**\n     * Externally added item metadata\n     */\n    var metadata = {};\n\n    // item data\n    var setStatus = function setStatus(status) {\n      return (state.status = status);\n    };\n\n    // fire event unless the item has been archived\n    var fire = function fire(event) {\n      if (state.released || state.frozen) return;\n      for (\n        var _len = arguments.length,\n          params = new Array(_len > 1 ? _len - 1 : 0),\n          _key = 1;\n        _key < _len;\n        _key++\n      ) {\n        params[_key - 1] = arguments[_key];\n      }\n      api.fire.apply(api, [event].concat(params));\n    };\n\n    // file data\n    var getFileExtension = function getFileExtension() {\n      return getExtensionFromFilename(state.file.name);\n    };\n    var getFileType = function getFileType() {\n      return state.file.type;\n    };\n    var getFileSize = function getFileSize() {\n      return state.file.size;\n    };\n    var getFile = function getFile() {\n      return state.file;\n    };\n\n    //\n    // logic to load a file\n    //\n    var load = function load(source, loader, onload) {\n      // remember the original item source\n      state.source = source;\n\n      // source is known\n      api.fireSync('init');\n\n      // file stub is already there\n      if (state.file) {\n        api.fireSync('load-skip');\n        return;\n      }\n\n      // set a stub file object while loading the actual data\n      state.file = createFileStub(source);\n\n      // starts loading\n      loader.on('init', function() {\n        fire('load-init');\n      });\n\n      // we'eve received a size indication, let's update the stub\n      loader.on('meta', function(meta) {\n        // set size of file stub\n        state.file.size = meta.size;\n\n        // set name of file stub\n        state.file.filename = meta.filename;\n\n        // if has received source, we done\n        if (meta.source) {\n          origin = FileOrigin.LIMBO;\n          state.serverFileReference = meta.source;\n          state.status = ItemStatus.PROCESSING_COMPLETE;\n        }\n\n        // size has been updated\n        fire('load-meta');\n      });\n\n      // the file is now loading we need to update the progress indicators\n      loader.on('progress', function(progress) {\n        setStatus(ItemStatus.LOADING);\n\n        fire('load-progress', progress);\n      });\n\n      // an error was thrown while loading the file, we need to switch to error state\n      loader.on('error', function(error) {\n        setStatus(ItemStatus.LOAD_ERROR);\n\n        fire('load-request-error', error);\n      });\n\n      // user or another process aborted the file load (cannot retry)\n      loader.on('abort', function() {\n        setStatus(ItemStatus.INIT);\n        fire('load-abort');\n      });\n\n      // done loading\n      loader.on('load', function(file) {\n        // as we've now loaded the file the loader is no longer required\n        state.activeLoader = null;\n\n        // called when file has loaded succesfully\n        var success = function success(result) {\n          // set (possibly) transformed file\n          state.file = isFile(result) ? result : state.file;\n\n          // file received\n          if (origin === FileOrigin.LIMBO && state.serverFileReference) {\n            setStatus(ItemStatus.PROCESSING_COMPLETE);\n          } else {\n            setStatus(ItemStatus.IDLE);\n          }\n\n          fire('load');\n        };\n\n        var error = function error(result) {\n          // set original file\n          state.file = file;\n          fire('load-meta');\n\n          setStatus(ItemStatus.LOAD_ERROR);\n          fire('load-file-error', result);\n        };\n\n        // if we already have a server file reference, we don't need to call the onload method\n        if (state.serverFileReference) {\n          success(file);\n          return;\n        }\n\n        // no server id, let's give this file the full treatment\n        onload(file, success, error);\n      });\n\n      // set loader source data\n      loader.setSource(source);\n\n      // set as active loader\n      state.activeLoader = loader;\n\n      // load the source data\n      loader.load();\n    };\n\n    var retryLoad = function retryLoad() {\n      if (!state.activeLoader) {\n        return;\n      }\n      state.activeLoader.load();\n    };\n\n    var abortLoad = function abortLoad() {\n      if (state.activeLoader) {\n        state.activeLoader.abort();\n        return;\n      }\n      setStatus(ItemStatus.INIT);\n      fire('load-abort');\n    };\n\n    //\n    // logic to process a file\n    //\n    var process = function process(processor, onprocess) {\n      // processing was aborted\n      if (state.processingAborted) {\n        state.processingAborted = false;\n        return;\n      }\n\n      // now processing\n      setStatus(ItemStatus.PROCESSING);\n\n      // reset abort callback\n      abortProcessingRequestComplete = null;\n\n      // if no file loaded we'll wait for the load event\n      if (!(state.file instanceof Blob)) {\n        api.on('load', function() {\n          process(processor, onprocess);\n        });\n        return;\n      }\n\n      // setup processor\n      processor.on('load', function(serverFileReference) {\n        // need this id to be able to revert the upload\n        state.transferId = null;\n        state.serverFileReference = serverFileReference;\n      });\n\n      // register transfer id\n      processor.on('transfer', function(transferId) {\n        // need this id to be able to revert the upload\n        state.transferId = transferId;\n      });\n\n      processor.on('load-perceived', function(serverFileReference) {\n        // no longer required\n        state.activeProcessor = null;\n\n        // need this id to be able to rever the upload\n        state.transferId = null;\n        state.serverFileReference = serverFileReference;\n\n        setStatus(ItemStatus.PROCESSING_COMPLETE);\n        fire('process-complete', serverFileReference);\n      });\n\n      processor.on('start', function() {\n        fire('process-start');\n      });\n\n      processor.on('error', function(error) {\n        state.activeProcessor = null;\n        setStatus(ItemStatus.PROCESSING_ERROR);\n        fire('process-error', error);\n      });\n\n      processor.on('abort', function(serverFileReference) {\n        state.activeProcessor = null;\n\n        // if file was uploaded but processing was cancelled during perceived processor time store file reference\n        state.transferId = null;\n        state.serverFileReference = serverFileReference;\n\n        setStatus(ItemStatus.IDLE);\n        fire('process-abort');\n\n        // has timeout so doesn't interfere with remove action\n        if (abortProcessingRequestComplete) {\n          abortProcessingRequestComplete();\n        }\n      });\n\n      processor.on('progress', function(progress) {\n        fire('process-progress', progress);\n      });\n\n      // when successfully transformed\n      var success = function success(file) {\n        // if was archived in the mean time, don't process\n        if (state.archived) return;\n\n        // process file!\n        processor.process(file, Object.assign({}, metadata));\n      };\n\n      // something went wrong during transform phase\n      var error = console.error;\n\n      // start processing the file\n      onprocess(state.file, success, error);\n\n      // set as active processor\n      state.activeProcessor = processor;\n    };\n\n    var requestProcessing = function requestProcessing() {\n      state.processingAborted = false;\n      setStatus(ItemStatus.PROCESSING_QUEUED);\n    };\n\n    var abortProcessing = function abortProcessing() {\n      return new Promise(function(resolve) {\n        if (!state.activeProcessor) {\n          state.processingAborted = true;\n\n          setStatus(ItemStatus.IDLE);\n          fire('process-abort');\n\n          resolve();\n          return;\n        }\n\n        abortProcessingRequestComplete = function abortProcessingRequestComplete() {\n          resolve();\n        };\n\n        state.activeProcessor.abort();\n      });\n    };\n\n    //\n    // logic to revert a processed file\n    //\n    var revert = function revert(revertFileUpload, forceRevert) {\n      return new Promise(function(resolve, reject) {\n        // cannot revert without a server id for this process\n        if (state.serverFileReference === null) {\n          resolve();\n          return;\n        }\n\n        // revert the upload (fire and forget)\n        revertFileUpload(\n          state.serverFileReference,\n          function() {\n            // reset file server id as now it's no available on the server\n            state.serverFileReference = null;\n            resolve();\n          },\n          function(error) {\n            // don't set error state when reverting is optional, it will always resolve\n            if (!forceRevert) {\n              resolve();\n              return;\n            }\n\n            // oh no errors\n            setStatus(ItemStatus.PROCESSING_REVERT_ERROR);\n            fire('process-revert-error');\n            reject(error);\n          }\n        );\n\n        // fire event\n        setStatus(ItemStatus.IDLE);\n        fire('process-revert');\n      });\n    };\n\n    // exposed methods\n    var _setMetadata = function setMetadata(key, value, silent) {\n      var keys = key.split('.');\n      var root = keys[0];\n      var last = keys.pop();\n      var data = metadata;\n      keys.forEach(function(key) {\n        return (data = data[key]);\n      });\n\n      // compare old value against new value, if they're the same, we're not updating\n      if (JSON.stringify(data[last]) === JSON.stringify(value)) return;\n\n      // update value\n      data[last] = value;\n\n      // don't fire update\n      if (silent) return;\n\n      // fire update\n      fire('metadata-update', {\n        key: root,\n        value: metadata[root]\n      });\n    };\n\n    var getMetadata = function getMetadata(key) {\n      return deepCloneObject(key ? metadata[key] : metadata);\n    };\n\n    var api = Object.assign(\n      {\n        id: {\n          get: function get() {\n            return id;\n          }\n        },\n        origin: {\n          get: function get() {\n            return origin;\n          }\n        },\n        serverId: {\n          get: function get() {\n            return state.serverFileReference;\n          }\n        },\n        transferId: {\n          get: function get() {\n            return state.transferId;\n          }\n        },\n        status: {\n          get: function get() {\n            return state.status;\n          }\n        },\n        filename: {\n          get: function get() {\n            return state.file.name;\n          }\n        },\n        filenameWithoutExtension: {\n          get: function get() {\n            return getFilenameWithoutExtension(state.file.name);\n          }\n        },\n        fileExtension: { get: getFileExtension },\n        fileType: { get: getFileType },\n        fileSize: { get: getFileSize },\n        file: { get: getFile },\n        relativePath: {\n          get: function get() {\n            return state.file._relativePath;\n          }\n        },\n\n        source: {\n          get: function get() {\n            return state.source;\n          }\n        },\n\n        getMetadata: getMetadata,\n        setMetadata: function setMetadata(key, value, silent) {\n          if (isObject(key)) {\n            var data = key;\n            Object.keys(data).forEach(function(key) {\n              _setMetadata(key, data[key], value);\n            });\n            return key;\n          }\n          _setMetadata(key, value, silent);\n          return value;\n        },\n\n        extend: function extend(name, handler) {\n          return (itemAPI[name] = handler);\n        },\n\n        abortLoad: abortLoad,\n        retryLoad: retryLoad,\n        requestProcessing: requestProcessing,\n        abortProcessing: abortProcessing,\n\n        load: load,\n        process: process,\n        revert: revert\n      },\n\n      on(),\n      {\n        freeze: function freeze() {\n          return (state.frozen = true);\n        },\n\n        release: function release() {\n          return (state.released = true);\n        },\n        released: {\n          get: function get() {\n            return state.released;\n          }\n        },\n\n        archive: function archive() {\n          return (state.archived = true);\n        },\n        archived: {\n          get: function get() {\n            return state.archived;\n          }\n        }\n      }\n    );\n\n    // create it here instead of returning it instantly so we can extend it later\n    var itemAPI = createObject(api);\n\n    return itemAPI;\n  };\n\n  var getItemIndexByQuery = function getItemIndexByQuery(items, query) {\n    // just return first index\n    if (isEmpty(query)) {\n      return 0;\n    }\n\n    // invalid queries\n    if (!isString(query)) {\n      return -1;\n    }\n\n    // return item by id (or -1 if not found)\n    return items.findIndex(function(item) {\n      return item.id === query;\n    });\n  };\n\n  var getItemById = function getItemById(items, itemId) {\n    var index = getItemIndexByQuery(items, itemId);\n    if (index < 0) {\n      return;\n    }\n    return items[index] || null;\n  };\n\n  var fetchBlob = function fetchBlob(\n    url,\n    load,\n    error,\n    progress,\n    abort,\n    headers\n  ) {\n    var request = sendRequest(null, url, {\n      method: 'GET',\n      responseType: 'blob'\n    });\n\n    request.onload = function(xhr) {\n      // get headers\n      var headers = xhr.getAllResponseHeaders();\n\n      // get filename\n      var filename =\n        getFileInfoFromHeaders(headers).name || getFilenameFromURL(url);\n\n      // create response\n      load(\n        createResponse(\n          'load',\n          xhr.status,\n          getFileFromBlob(xhr.response, filename),\n          headers\n        )\n      );\n    };\n\n    request.onerror = function(xhr) {\n      error(\n        createResponse(\n          'error',\n          xhr.status,\n          xhr.statusText,\n          xhr.getAllResponseHeaders()\n        )\n      );\n    };\n\n    request.onheaders = function(xhr) {\n      headers(\n        createResponse('headers', xhr.status, null, xhr.getAllResponseHeaders())\n      );\n    };\n\n    request.ontimeout = createTimeoutResponse(error);\n    request.onprogress = progress;\n    request.onabort = abort;\n\n    // should return request\n    return request;\n  };\n\n  var getDomainFromURL = function getDomainFromURL(url) {\n    if (url.indexOf('//') === 0) {\n      url = location.protocol + url;\n    }\n    return url\n      .toLowerCase()\n      .replace('blob:', '')\n      .replace(/([a-z])?:\\/\\//, '$1')\n      .split('/')[0];\n  };\n\n  var isExternalURL = function isExternalURL(url) {\n    return (\n      (url.indexOf(':') > -1 || url.indexOf('//') > -1) &&\n      getDomainFromURL(location.href) !== getDomainFromURL(url)\n    );\n  };\n\n  var dynamicLabel = function dynamicLabel(label) {\n    return function() {\n      return isFunction(label) ? label.apply(void 0, arguments) : label;\n    };\n  };\n\n  var isMockItem = function isMockItem(item) {\n    return !isFile(item.file);\n  };\n\n  var listUpdated = function listUpdated(dispatch, state) {\n    clearTimeout(state.listUpdateTimeout);\n    state.listUpdateTimeout = setTimeout(function() {\n      dispatch('DID_UPDATE_ITEMS', { items: getActiveItems(state.items) });\n    }, 0);\n  };\n\n  var optionalPromise = function optionalPromise(fn) {\n    for (\n      var _len = arguments.length,\n        params = new Array(_len > 1 ? _len - 1 : 0),\n        _key = 1;\n      _key < _len;\n      _key++\n    ) {\n      params[_key - 1] = arguments[_key];\n    }\n    return new Promise(function(resolve) {\n      if (!fn) {\n        return resolve(true);\n      }\n\n      var result = fn.apply(void 0, params);\n\n      if (result == null) {\n        return resolve(true);\n      }\n\n      if (typeof result === 'boolean') {\n        return resolve(result);\n      }\n\n      if (typeof result.then === 'function') {\n        result.then(resolve);\n      }\n    });\n  };\n\n  var sortItems = function sortItems(state, compare) {\n    state.items.sort(function(a, b) {\n      return compare(createItemAPI(a), createItemAPI(b));\n    });\n  };\n\n  // returns item based on state\n  var getItemByQueryFromState = function getItemByQueryFromState(\n    state,\n    itemHandler\n  ) {\n    return function() {\n      var _ref =\n        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var query = _ref.query,\n        _ref$success = _ref.success,\n        success = _ref$success === void 0 ? function() {} : _ref$success,\n        _ref$failure = _ref.failure,\n        failure = _ref$failure === void 0 ? function() {} : _ref$failure,\n        options = _objectWithoutProperties(_ref, [\n          'query',\n          'success',\n          'failure'\n        ]);\n      var item = getItemByQuery(state.items, query);\n      if (!item) {\n        failure({\n          error: createResponse('error', 0, 'Item not found'),\n\n          file: null\n        });\n\n        return;\n      }\n      itemHandler(item, success, failure, options || {});\n    };\n  };\n\n  var actions = function actions(dispatch, query, state) {\n    return {\n      /**\n       * Aborts all ongoing processes\n       */\n      ABORT_ALL: function ABORT_ALL() {\n        getActiveItems(state.items).forEach(function(item) {\n          item.freeze();\n          item.abortLoad();\n          item.abortProcessing();\n        });\n      },\n\n      /**\n       * Sets initial files\n       */\n      DID_SET_FILES: function DID_SET_FILES(_ref2) {\n        var _ref2$value = _ref2.value,\n          value = _ref2$value === void 0 ? [] : _ref2$value;\n\n        // map values to file objects\n        var files = value.map(function(file) {\n          return {\n            source: file.source ? file.source : file,\n            options: file.options\n          };\n        });\n\n        // loop over files, if file is in list, leave it be, if not, remove\n        // test if items should be moved\n        var activeItems = getActiveItems(state.items);\n\n        activeItems.forEach(function(item) {\n          // if item not is in new value, remove\n          if (\n            !files.find(function(file) {\n              return file.source === item.source || file.source === item.file;\n            })\n          ) {\n            dispatch('REMOVE_ITEM', { query: item, remove: false });\n          }\n        });\n\n        // add new files\n        activeItems = getActiveItems(state.items);\n        files.forEach(function(file, index) {\n          // if file is already in list\n          if (\n            activeItems.find(function(item) {\n              return item.source === file.source || item.file === file.source;\n            })\n          )\n            return;\n\n          // not in list, add\n          dispatch(\n            'ADD_ITEM',\n            Object.assign({}, file, {\n              interactionMethod: InteractionMethod.NONE,\n              index: index\n            })\n          );\n        });\n      },\n\n      DID_UPDATE_ITEM_METADATA: function DID_UPDATE_ITEM_METADATA(_ref3) {\n        var id = _ref3.id;\n\n        // if is called multiple times in close succession we combined all calls together to save resources\n        clearTimeout(state.itemUpdateTimeout);\n        state.itemUpdateTimeout = setTimeout(function() {\n          var item = getItemById(state.items, id);\n\n          // only revert and attempt to upload when we're uploading to a server\n          if (!query('IS_ASYNC')) {\n            // should we update the output data\n            applyFilterChain('SHOULD_PREPARE_OUTPUT', false, {\n              item: item,\n              query: query\n            }).then(function(shouldPrepareOutput) {\n              if (!shouldPrepareOutput) {\n                return;\n              }\n              dispatch(\n                'REQUEST_PREPARE_OUTPUT',\n                {\n                  query: id,\n                  item: item,\n                  success: function success(file) {\n                    dispatch('DID_PREPARE_OUTPUT', { id: id, file: file });\n                  }\n                },\n                true\n              );\n            });\n\n            return;\n          }\n\n          // for async scenarios\n          var upload = function upload() {\n            // we push this forward a bit so the interface is updated correctly\n            setTimeout(function() {\n              dispatch('REQUEST_ITEM_PROCESSING', { query: id });\n            }, 32);\n          };\n\n          var revert = function revert(doUpload) {\n            item\n              .revert(\n                createRevertFunction(\n                  state.options.server.url,\n                  state.options.server.revert\n                ),\n                query('GET_FORCE_REVERT')\n              )\n              .then(doUpload ? upload : function() {})\n              .catch(function() {});\n          };\n\n          var abort = function abort(doUpload) {\n            item.abortProcessing().then(doUpload ? upload : function() {});\n          };\n\n          // if we should re-upload the file immidiately\n          if (item.status === ItemStatus.PROCESSING_COMPLETE) {\n            return revert(state.options.instantUpload);\n          }\n\n          // if currently uploading, cancel upload\n          if (item.status === ItemStatus.PROCESSING) {\n            return abort(state.options.instantUpload);\n          }\n\n          if (state.options.instantUpload) {\n            upload();\n          }\n        }, 0);\n      },\n\n      MOVE_ITEM: function MOVE_ITEM(_ref4) {\n        var query = _ref4.query,\n          index = _ref4.index;\n        var item = getItemByQuery(state.items, query);\n        if (!item) return;\n        var currentIndex = state.items.indexOf(item);\n        index = limit(index, 0, state.items.length - 1);\n        if (currentIndex === index) return;\n        state.items.splice(index, 0, state.items.splice(currentIndex, 1)[0]);\n      },\n\n      SORT: function SORT(_ref5) {\n        var compare = _ref5.compare;\n        sortItems(state, compare);\n        dispatch('DID_SORT_ITEMS', {\n          items: query('GET_ACTIVE_ITEMS')\n        });\n      },\n\n      ADD_ITEMS: function ADD_ITEMS(_ref6) {\n        var items = _ref6.items,\n          index = _ref6.index,\n          interactionMethod = _ref6.interactionMethod,\n          _ref6$success = _ref6.success,\n          success = _ref6$success === void 0 ? function() {} : _ref6$success,\n          _ref6$failure = _ref6.failure,\n          failure = _ref6$failure === void 0 ? function() {} : _ref6$failure;\n\n        var currentIndex = index;\n\n        if (index === -1 || typeof index === 'undefined') {\n          var insertLocation = query('GET_ITEM_INSERT_LOCATION');\n          var totalItems = query('GET_TOTAL_ITEMS');\n          currentIndex = insertLocation === 'before' ? 0 : totalItems;\n        }\n\n        var ignoredFiles = query('GET_IGNORED_FILES');\n        var isValidFile = function isValidFile(source) {\n          return isFile(source)\n            ? !ignoredFiles.includes(source.name.toLowerCase())\n            : !isEmpty(source);\n        };\n        var validItems = items.filter(isValidFile);\n\n        var promises = validItems.map(function(source) {\n          return new Promise(function(resolve, reject) {\n            dispatch('ADD_ITEM', {\n              interactionMethod: interactionMethod,\n              source: source.source || source,\n              success: resolve,\n              failure: reject,\n              index: currentIndex++,\n              options: source.options || {}\n            });\n          });\n        });\n\n        Promise.all(promises)\n          .then(success)\n          .catch(failure);\n      },\n\n      /**\n       * @param source\n       * @param index\n       * @param interactionMethod\n       */\n      ADD_ITEM: function ADD_ITEM(_ref7) {\n        var source = _ref7.source,\n          _ref7$index = _ref7.index,\n          index = _ref7$index === void 0 ? -1 : _ref7$index,\n          interactionMethod = _ref7.interactionMethod,\n          _ref7$success = _ref7.success,\n          success = _ref7$success === void 0 ? function() {} : _ref7$success,\n          _ref7$failure = _ref7.failure,\n          failure = _ref7$failure === void 0 ? function() {} : _ref7$failure,\n          _ref7$options = _ref7.options,\n          options = _ref7$options === void 0 ? {} : _ref7$options;\n\n        // if no source supplied\n        if (isEmpty(source)) {\n          failure({\n            error: createResponse('error', 0, 'No source'),\n\n            file: null\n          });\n\n          return;\n        }\n\n        // filter out invalid file items, used to filter dropped directory contents\n        if (\n          isFile(source) &&\n          state.options.ignoredFiles.includes(source.name.toLowerCase())\n        ) {\n          // fail silently\n          return;\n        }\n\n        // test if there's still room in the list of files\n        if (!hasRoomForItem(state)) {\n          // if multiple allowed, we can't replace\n          // or if only a single item is allowed but we're not allowed to replace it we exit\n          if (\n            state.options.allowMultiple ||\n            (!state.options.allowMultiple && !state.options.allowReplace)\n          ) {\n            var error = createResponse('warning', 0, 'Max files');\n\n            dispatch('DID_THROW_MAX_FILES', {\n              source: source,\n              error: error\n            });\n\n            failure({ error: error, file: null });\n\n            return;\n          }\n\n          // let's replace the item\n          // id of first item we're about to remove\n          var _item = getActiveItems(state.items)[0];\n\n          // if has been processed remove it from the server as well\n          if (\n            _item.status === ItemStatus.PROCESSING_COMPLETE ||\n            _item.status === ItemStatus.PROCESSING_REVERT_ERROR\n          ) {\n            var forceRevert = query('GET_FORCE_REVERT');\n            _item\n              .revert(\n                createRevertFunction(\n                  state.options.server.url,\n                  state.options.server.revert\n                ),\n                forceRevert\n              )\n              .then(function() {\n                if (!forceRevert) return;\n\n                // try to add now\n                dispatch('ADD_ITEM', {\n                  source: source,\n                  index: index,\n                  interactionMethod: interactionMethod,\n                  success: success,\n                  failure: failure,\n                  options: options\n                });\n              })\n              .catch(function() {}); // no need to handle this catch state for now\n\n            if (forceRevert) return;\n          }\n\n          // remove first item as it will be replaced by this item\n          dispatch('REMOVE_ITEM', { query: _item.id });\n        }\n\n        // where did the file originate\n        var origin =\n          options.type === 'local'\n            ? FileOrigin.LOCAL\n            : options.type === 'limbo'\n            ? FileOrigin.LIMBO\n            : FileOrigin.INPUT;\n\n        // create a new blank item\n        var item = createItem(\n          // where did this file come from\n          origin,\n\n          // an input file never has a server file reference\n          origin === FileOrigin.INPUT ? null : source,\n\n          // file mock data, if defined\n          options.file\n        );\n\n        // set initial meta data\n        Object.keys(options.metadata || {}).forEach(function(key) {\n          item.setMetadata(key, options.metadata[key]);\n        });\n\n        // created the item, let plugins add methods\n        applyFilters('DID_CREATE_ITEM', item, {\n          query: query,\n          dispatch: dispatch\n        });\n\n        // where to insert new items\n        var itemInsertLocation = query('GET_ITEM_INSERT_LOCATION');\n\n        // adjust index if is not allowed to pick location\n        if (!state.options.itemInsertLocationFreedom) {\n          index = itemInsertLocation === 'before' ? -1 : state.items.length;\n        }\n\n        // add item to list\n        insertItem(state.items, item, index);\n\n        // sort items in list\n        if (isFunction(itemInsertLocation) && source) {\n          sortItems(state, itemInsertLocation);\n        }\n\n        // get a quick reference to the item id\n        var id = item.id;\n\n        // observe item events\n        item.on('init', function() {\n          dispatch('DID_INIT_ITEM', { id: id });\n        });\n\n        item.on('load-init', function() {\n          dispatch('DID_START_ITEM_LOAD', { id: id });\n        });\n\n        item.on('load-meta', function() {\n          dispatch('DID_UPDATE_ITEM_META', { id: id });\n        });\n\n        item.on('load-progress', function(progress) {\n          dispatch('DID_UPDATE_ITEM_LOAD_PROGRESS', {\n            id: id,\n            progress: progress\n          });\n        });\n\n        item.on('load-request-error', function(error) {\n          var mainStatus = dynamicLabel(state.options.labelFileLoadError)(\n            error\n          );\n\n          // is client error, no way to recover\n          if (error.code >= 400 && error.code < 500) {\n            dispatch('DID_THROW_ITEM_INVALID', {\n              id: id,\n              error: error,\n              status: {\n                main: mainStatus,\n                sub: error.code + ' (' + error.body + ')'\n              }\n            });\n\n            // reject the file so can be dealt with through API\n            failure({ error: error, file: createItemAPI(item) });\n            return;\n          }\n\n          // is possible server error, so might be possible to retry\n          dispatch('DID_THROW_ITEM_LOAD_ERROR', {\n            id: id,\n            error: error,\n            status: {\n              main: mainStatus,\n              sub: state.options.labelTapToRetry\n            }\n          });\n        });\n\n        item.on('load-file-error', function(error) {\n          dispatch('DID_THROW_ITEM_INVALID', {\n            id: id,\n            error: error.status,\n            status: error.status\n          });\n\n          failure({ error: error.status, file: createItemAPI(item) });\n        });\n\n        item.on('load-abort', function() {\n          dispatch('REMOVE_ITEM', { query: id });\n        });\n\n        item.on('load-skip', function() {\n          dispatch('COMPLETE_LOAD_ITEM', {\n            query: id,\n            item: item,\n            data: {\n              source: source,\n              success: success\n            }\n          });\n        });\n\n        item.on('load', function() {\n          var handleAdd = function handleAdd(shouldAdd) {\n            // no should not add this file\n            if (!shouldAdd) {\n              dispatch('REMOVE_ITEM', {\n                query: id\n              });\n\n              return;\n            }\n\n            // now interested in metadata updates\n            item.on('metadata-update', function(change) {\n              dispatch('DID_UPDATE_ITEM_METADATA', { id: id, change: change });\n            });\n\n            // let plugins decide if the output data should be prepared at this point\n            // means we'll do this and wait for idle state\n            applyFilterChain('SHOULD_PREPARE_OUTPUT', false, {\n              item: item,\n              query: query\n            }).then(function(shouldPrepareOutput) {\n              var loadComplete = function loadComplete() {\n                dispatch('COMPLETE_LOAD_ITEM', {\n                  query: id,\n                  item: item,\n                  data: {\n                    source: source,\n                    success: success\n                  }\n                });\n\n                listUpdated(dispatch, state);\n              };\n\n              // exit\n              if (shouldPrepareOutput) {\n                // wait for idle state and then run PREPARE_OUTPUT\n                dispatch(\n                  'REQUEST_PREPARE_OUTPUT',\n                  {\n                    query: id,\n                    item: item,\n                    success: function success(file) {\n                      dispatch('DID_PREPARE_OUTPUT', { id: id, file: file });\n                      loadComplete();\n                    }\n                  },\n                  true\n                );\n\n                return;\n              }\n\n              loadComplete();\n            });\n          };\n\n          // item loaded, allow plugins to\n          // - read data (quickly)\n          // - add metadata\n          applyFilterChain('DID_LOAD_ITEM', item, {\n            query: query,\n            dispatch: dispatch\n          })\n            .then(function() {\n              optionalPromise(\n                query('GET_BEFORE_ADD_FILE'),\n                createItemAPI(item)\n              ).then(handleAdd);\n            })\n            .catch(function() {\n              handleAdd(false);\n            });\n        });\n\n        item.on('process-start', function() {\n          dispatch('DID_START_ITEM_PROCESSING', { id: id });\n        });\n\n        item.on('process-progress', function(progress) {\n          dispatch('DID_UPDATE_ITEM_PROCESS_PROGRESS', {\n            id: id,\n            progress: progress\n          });\n        });\n\n        item.on('process-error', function(error) {\n          dispatch('DID_THROW_ITEM_PROCESSING_ERROR', {\n            id: id,\n            error: error,\n            status: {\n              main: dynamicLabel(state.options.labelFileProcessingError)(error),\n              sub: state.options.labelTapToRetry\n            }\n          });\n        });\n\n        item.on('process-revert-error', function(error) {\n          dispatch('DID_THROW_ITEM_PROCESSING_REVERT_ERROR', {\n            id: id,\n            error: error,\n            status: {\n              main: dynamicLabel(state.options.labelFileProcessingRevertError)(\n                error\n              ),\n              sub: state.options.labelTapToRetry\n            }\n          });\n        });\n\n        item.on('process-complete', function(serverFileReference) {\n          dispatch('DID_COMPLETE_ITEM_PROCESSING', {\n            id: id,\n            error: null,\n            serverFileReference: serverFileReference\n          });\n\n          dispatch('DID_DEFINE_VALUE', { id: id, value: serverFileReference });\n        });\n\n        item.on('process-abort', function() {\n          dispatch('DID_ABORT_ITEM_PROCESSING', { id: id });\n        });\n\n        item.on('process-revert', function() {\n          dispatch('DID_REVERT_ITEM_PROCESSING', { id: id });\n          dispatch('DID_DEFINE_VALUE', { id: id, value: null });\n        });\n\n        // let view know the item has been inserted\n        dispatch('DID_ADD_ITEM', {\n          id: id,\n          index: index,\n          interactionMethod: interactionMethod\n        });\n\n        listUpdated(dispatch, state);\n\n        // start loading the source\n        var _ref8 = state.options.server || {},\n          url = _ref8.url,\n          load = _ref8.load,\n          restore = _ref8.restore,\n          fetch = _ref8.fetch;\n\n        item.load(\n          source,\n\n          // this creates a function that loads the file based on the type of file (string, base64, blob, file) and location of file (local, remote, limbo)\n          createFileLoader(\n            origin === FileOrigin.INPUT\n              ? // input, if is remote, see if should use custom fetch, else use default fetchBlob\n                isString(source) && isExternalURL(source)\n                ? fetch\n                  ? createFetchFunction(url, fetch)\n                  : fetchBlob // remote url\n                : fetchBlob // try to fetch url\n              : // limbo or local\n              origin === FileOrigin.LIMBO\n              ? createFetchFunction(url, restore) // limbo\n              : createFetchFunction(url, load) // local\n          ),\n\n          // called when the file is loaded so it can be piped through the filters\n          function(file, success, error) {\n            // let's process the file\n            applyFilterChain('LOAD_FILE', file, { query: query })\n              .then(success)\n              .catch(error);\n          }\n        );\n      },\n\n      REQUEST_PREPARE_OUTPUT: function REQUEST_PREPARE_OUTPUT(_ref9) {\n        var item = _ref9.item,\n          success = _ref9.success,\n          _ref9$failure = _ref9.failure,\n          failure = _ref9$failure === void 0 ? function() {} : _ref9$failure;\n\n        // error response if item archived\n        var err = {\n          error: createResponse('error', 0, 'Item not found'),\n\n          file: null\n        };\n\n        // don't handle archived items, an item could have been archived (load aborted) while waiting to be prepared\n        if (item.archived) return failure(err);\n\n        // allow plugins to alter the file data\n        applyFilterChain('PREPARE_OUTPUT', item.file, {\n          query: query,\n          item: item\n        }).then(function(result) {\n          applyFilterChain('COMPLETE_PREPARE_OUTPUT', result, {\n            query: query,\n            item: item\n          }).then(function(result) {\n            // don't handle archived items, an item could have been archived (load aborted) while being prepared\n            if (item.archived) return failure(err);\n\n            // we done!\n            success(result);\n          });\n        });\n      },\n\n      COMPLETE_LOAD_ITEM: function COMPLETE_LOAD_ITEM(_ref10) {\n        var item = _ref10.item,\n          data = _ref10.data;\n        var success = data.success,\n          source = data.source;\n\n        // sort items in list\n        var itemInsertLocation = query('GET_ITEM_INSERT_LOCATION');\n        if (isFunction(itemInsertLocation) && source) {\n          sortItems(state, itemInsertLocation);\n        }\n\n        // let interface know the item has loaded\n        dispatch('DID_LOAD_ITEM', {\n          id: item.id,\n          error: null,\n          serverFileReference: item.origin === FileOrigin.INPUT ? null : source\n        });\n\n        // item has been successfully loaded and added to the\n        // list of items so can now be safely returned for use\n        success(createItemAPI(item));\n\n        // if this is a local server file we need to show a different state\n        if (item.origin === FileOrigin.LOCAL) {\n          dispatch('DID_LOAD_LOCAL_ITEM', { id: item.id });\n          return;\n        }\n\n        // if is a temp server file we prevent async upload call here (as the file is already on the server)\n        if (item.origin === FileOrigin.LIMBO) {\n          dispatch('DID_COMPLETE_ITEM_PROCESSING', {\n            id: item.id,\n            error: null,\n            serverFileReference: source\n          });\n\n          dispatch('DID_DEFINE_VALUE', {\n            id: item.id,\n            value: source\n          });\n\n          return;\n        }\n\n        // id we are allowed to upload the file immidiately, lets do it\n        if (query('IS_ASYNC') && state.options.instantUpload) {\n          dispatch('REQUEST_ITEM_PROCESSING', { query: item.id });\n        }\n      },\n\n      RETRY_ITEM_LOAD: getItemByQueryFromState(state, function(item) {\n        // try loading the source one more time\n        item.retryLoad();\n      }),\n\n      REQUEST_ITEM_PREPARE: getItemByQueryFromState(state, function(\n        item,\n        _success,\n        failure\n      ) {\n        dispatch(\n          'REQUEST_PREPARE_OUTPUT',\n          {\n            query: item.id,\n            item: item,\n            success: function success(file) {\n              dispatch('DID_PREPARE_OUTPUT', { id: item.id, file: file });\n              _success({\n                file: item,\n                output: file\n              });\n            },\n            failure: failure\n          },\n          true\n        );\n      }),\n\n      REQUEST_ITEM_PROCESSING: getItemByQueryFromState(state, function(\n        item,\n        success,\n        failure\n      ) {\n        // cannot be queued (or is already queued)\n        var itemCanBeQueuedForProcessing =\n          // waiting for something\n          item.status === ItemStatus.IDLE ||\n          // processing went wrong earlier\n          item.status === ItemStatus.PROCESSING_ERROR;\n\n        // not ready to be processed\n        if (!itemCanBeQueuedForProcessing) {\n          var processNow = function processNow() {\n            return dispatch('REQUEST_ITEM_PROCESSING', {\n              query: item,\n              success: success,\n              failure: failure\n            });\n          };\n\n          var process = function process() {\n            return document.hidden ? processNow() : setTimeout(processNow, 32);\n          };\n\n          // if already done processing or tried to revert but didn't work, try again\n          if (\n            item.status === ItemStatus.PROCESSING_COMPLETE ||\n            item.status === ItemStatus.PROCESSING_REVERT_ERROR\n          ) {\n            item\n              .revert(\n                createRevertFunction(\n                  state.options.server.url,\n                  state.options.server.revert\n                ),\n                query('GET_FORCE_REVERT')\n              )\n              .then(process)\n              .catch(function() {}); // don't continue with processing if something went wrong\n          } else if (item.status === ItemStatus.PROCESSING) {\n            item.abortProcessing().then(process);\n          }\n\n          return;\n        }\n\n        // already queued for processing\n        if (item.status === ItemStatus.PROCESSING_QUEUED) return;\n\n        item.requestProcessing();\n\n        dispatch('DID_REQUEST_ITEM_PROCESSING', { id: item.id });\n\n        dispatch(\n          'PROCESS_ITEM',\n          { query: item, success: success, failure: failure },\n          true\n        );\n      }),\n\n      PROCESS_ITEM: getItemByQueryFromState(state, function(\n        item,\n        success,\n        failure\n      ) {\n        var maxParallelUploads = query('GET_MAX_PARALLEL_UPLOADS');\n        var totalCurrentUploads = query(\n          'GET_ITEMS_BY_STATUS',\n          ItemStatus.PROCESSING\n        ).length;\n\n        // queue and wait till queue is freed up\n        if (totalCurrentUploads === maxParallelUploads) {\n          // queue for later processing\n          state.processingQueue.push({\n            id: item.id,\n            success: success,\n            failure: failure\n          });\n\n          // stop it!\n          return;\n        }\n\n        // if was not queued or is already processing exit here\n        if (item.status === ItemStatus.PROCESSING) return;\n\n        var processNext = function processNext() {\n          // process queueud items\n          var queueEntry = state.processingQueue.shift();\n\n          // no items left\n          if (!queueEntry) return;\n\n          // get item reference\n          var id = queueEntry.id,\n            success = queueEntry.success,\n            failure = queueEntry.failure;\n          var itemReference = getItemByQuery(state.items, id);\n\n          // if item was archived while in queue, jump to next\n          if (!itemReference || itemReference.archived) {\n            processNext();\n            return;\n          }\n\n          // process queued item\n          dispatch(\n            'PROCESS_ITEM',\n            { query: id, success: success, failure: failure },\n            true\n          );\n        };\n\n        // we done function\n        item.onOnce('process-complete', function() {\n          success(createItemAPI(item));\n          processNext();\n\n          // All items processed? No errors?\n          var allItemsProcessed =\n            query('GET_ITEMS_BY_STATUS', ItemStatus.PROCESSING_COMPLETE)\n              .length === state.items.length;\n          if (allItemsProcessed) {\n            dispatch('DID_COMPLETE_ITEM_PROCESSING_ALL');\n          }\n        });\n\n        // we error function\n        item.onOnce('process-error', function(error) {\n          failure({ error: error, file: createItemAPI(item) });\n          processNext();\n        });\n\n        // start file processing\n        var options = state.options;\n        item.process(\n          createFileProcessor(\n            createProcessorFunction(\n              options.server.url,\n              options.server.process,\n              options.name,\n              {\n                chunkTransferId: item.transferId,\n                chunkServer: options.server.patch,\n                chunkUploads: options.chunkUploads,\n                chunkForce: options.chunkForce,\n                chunkSize: options.chunkSize,\n                chunkRetryDelays: options.chunkRetryDelays\n              }\n            )\n          ),\n\n          // called when the file is about to be processed so it can be piped through the transform filters\n          function(file, success, error) {\n            // allow plugins to alter the file data\n            applyFilterChain('PREPARE_OUTPUT', file, {\n              query: query,\n              item: item\n            })\n              .then(function(file) {\n                dispatch('DID_PREPARE_OUTPUT', { id: item.id, file: file });\n\n                success(file);\n              })\n              .catch(error);\n          }\n        );\n      }),\n\n      RETRY_ITEM_PROCESSING: getItemByQueryFromState(state, function(item) {\n        dispatch('REQUEST_ITEM_PROCESSING', { query: item });\n      }),\n\n      REQUEST_REMOVE_ITEM: getItemByQueryFromState(state, function(item) {\n        optionalPromise(\n          query('GET_BEFORE_REMOVE_FILE'),\n          createItemAPI(item)\n        ).then(function(shouldRemove) {\n          if (!shouldRemove) {\n            return;\n          }\n          dispatch('REMOVE_ITEM', { query: item });\n        });\n      }),\n\n      RELEASE_ITEM: getItemByQueryFromState(state, function(item) {\n        item.release();\n      }),\n\n      REMOVE_ITEM: getItemByQueryFromState(state, function(\n        item,\n        success,\n        failure,\n        options\n      ) {\n        var removeFromView = function removeFromView() {\n          // get id reference\n          var id = item.id;\n\n          // archive the item, this does not remove it from the list\n          getItemById(state.items, id).archive();\n\n          // tell the view the item has been removed\n          dispatch('DID_REMOVE_ITEM', { error: null, id: id, item: item });\n\n          // now the list has been modified\n          listUpdated(dispatch, state);\n\n          // correctly removed\n          success(createItemAPI(item));\n        };\n\n        // if this is a local file and the server.remove function has been configured, send source there so dev can remove file from server\n        var server = state.options.server;\n        if (\n          item.origin === FileOrigin.LOCAL &&\n          server &&\n          isFunction(server.remove) &&\n          options.remove !== false\n        ) {\n          dispatch('DID_START_ITEM_REMOVE', { id: item.id });\n\n          server.remove(\n            item.source,\n            function() {\n              return removeFromView();\n            },\n            function(status) {\n              dispatch('DID_THROW_ITEM_REMOVE_ERROR', {\n                id: item.id,\n                error: createResponse('error', 0, status, null),\n                status: {\n                  main: dynamicLabel(state.options.labelFileRemoveError)(\n                    status\n                  ),\n                  sub: state.options.labelTapToRetry\n                }\n              });\n            }\n          );\n        } else {\n          // if is requesting revert and can revert need to call revert handler (not calling request_ because that would also trigger beforeRemoveHook)\n          if (\n            options.revert &&\n            item.origin !== FileOrigin.LOCAL &&\n            item.serverId !== null\n          ) {\n            item.revert(\n              createRevertFunction(\n                state.options.server.url,\n                state.options.server.revert\n              ),\n              query('GET_FORCE_REVERT')\n            );\n          }\n\n          // can now safely remove from view\n          removeFromView();\n        }\n      }),\n\n      ABORT_ITEM_LOAD: getItemByQueryFromState(state, function(item) {\n        item.abortLoad();\n      }),\n\n      ABORT_ITEM_PROCESSING: getItemByQueryFromState(state, function(item) {\n        // test if is already processed\n        if (item.serverId) {\n          dispatch('REVERT_ITEM_PROCESSING', { id: item.id });\n          return;\n        }\n\n        // abort\n        item.abortProcessing().then(function() {\n          var shouldRemove = state.options.instantUpload;\n          if (shouldRemove) {\n            dispatch('REMOVE_ITEM', { query: item.id });\n          }\n        });\n      }),\n\n      REQUEST_REVERT_ITEM_PROCESSING: getItemByQueryFromState(state, function(\n        item\n      ) {\n        // not instant uploading, revert immidiately\n        if (!state.options.instantUpload) {\n          dispatch('REVERT_ITEM_PROCESSING', { query: item });\n          return;\n        }\n\n        // if we're instant uploading the file will also be removed if we revert,\n        // so if a before remove file hook is defined we need to run it now\n        var handleRevert = function handleRevert(shouldRevert) {\n          if (!shouldRevert) return;\n          dispatch('REVERT_ITEM_PROCESSING', { query: item });\n        };\n\n        var fn = query('GET_BEFORE_REMOVE_FILE');\n        if (!fn) {\n          return handleRevert(true);\n        }\n\n        var requestRemoveResult = fn(createItemAPI(item));\n        if (requestRemoveResult == null) {\n          // undefined or null\n          return handleRevert(true);\n        }\n\n        if (typeof requestRemoveResult === 'boolean') {\n          return handleRevert(requestRemoveResult);\n        }\n\n        if (typeof requestRemoveResult.then === 'function') {\n          requestRemoveResult.then(handleRevert);\n        }\n      }),\n\n      REVERT_ITEM_PROCESSING: getItemByQueryFromState(state, function(item) {\n        item\n          .revert(\n            createRevertFunction(\n              state.options.server.url,\n              state.options.server.revert\n            ),\n            query('GET_FORCE_REVERT')\n          )\n          .then(function() {\n            var shouldRemove = state.options.instantUpload || isMockItem(item);\n            if (shouldRemove) {\n              dispatch('REMOVE_ITEM', { query: item.id });\n            }\n          })\n          .catch(function() {});\n      }),\n\n      SET_OPTIONS: function SET_OPTIONS(_ref11) {\n        var options = _ref11.options;\n        forin(options, function(key, value) {\n          dispatch('SET_' + fromCamels(key, '_').toUpperCase(), {\n            value: value\n          });\n        });\n      }\n    };\n  };\n\n  var formatFilename = function formatFilename(name) {\n    return name;\n  };\n\n  var createElement$1 = function createElement(tagName) {\n    return document.createElement(tagName);\n  };\n\n  var text = function text(node, value) {\n    var textNode = node.childNodes[0];\n    if (!textNode) {\n      textNode = document.createTextNode(value);\n      node.appendChild(textNode);\n    } else if (value !== textNode.nodeValue) {\n      textNode.nodeValue = value;\n    }\n  };\n\n  var polarToCartesian = function polarToCartesian(\n    centerX,\n    centerY,\n    radius,\n    angleInDegrees\n  ) {\n    var angleInRadians = (((angleInDegrees % 360) - 90) * Math.PI) / 180.0;\n    return {\n      x: centerX + radius * Math.cos(angleInRadians),\n      y: centerY + radius * Math.sin(angleInRadians)\n    };\n  };\n\n  var describeArc = function describeArc(\n    x,\n    y,\n    radius,\n    startAngle,\n    endAngle,\n    arcSweep\n  ) {\n    var start = polarToCartesian(x, y, radius, endAngle);\n    var end = polarToCartesian(x, y, radius, startAngle);\n    return [\n      'M',\n      start.x,\n      start.y,\n      'A',\n      radius,\n      radius,\n      0,\n      arcSweep,\n      0,\n      end.x,\n      end.y\n    ].join(' ');\n  };\n\n  var percentageArc = function percentageArc(x, y, radius, from, to) {\n    var arcSweep = 1;\n    if (to > from && to - from <= 0.5) {\n      arcSweep = 0;\n    }\n    if (from > to && from - to >= 0.5) {\n      arcSweep = 0;\n    }\n    return describeArc(\n      x,\n      y,\n      radius,\n      Math.min(0.9999, from) * 360,\n      Math.min(0.9999, to) * 360,\n      arcSweep\n    );\n  };\n\n  var create = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n    // start at 0\n    props.spin = false;\n    props.progress = 0;\n    props.opacity = 0;\n\n    // svg\n    var svg = createElement('svg');\n    root.ref.path = createElement('path', {\n      'stroke-width': 2,\n      'stroke-linecap': 'round'\n    });\n\n    svg.appendChild(root.ref.path);\n\n    root.ref.svg = svg;\n\n    root.appendChild(svg);\n  };\n\n  var write = function write(_ref2) {\n    var root = _ref2.root,\n      props = _ref2.props;\n\n    if (props.opacity === 0) {\n      return;\n    }\n\n    if (props.align) {\n      root.element.dataset.align = props.align;\n    }\n\n    // get width of stroke\n    var ringStrokeWidth = parseInt(attr(root.ref.path, 'stroke-width'), 10);\n\n    // calculate size of ring\n    var size = root.rect.element.width * 0.5;\n\n    // ring state\n    var ringFrom = 0;\n    var ringTo = 0;\n\n    // now in busy mode\n    if (props.spin) {\n      ringFrom = 0;\n      ringTo = 0.5;\n    } else {\n      ringFrom = 0;\n      ringTo = props.progress;\n    }\n\n    // get arc path\n    var coordinates = percentageArc(\n      size,\n      size,\n      size - ringStrokeWidth,\n      ringFrom,\n      ringTo\n    );\n\n    // update progress bar\n    attr(root.ref.path, 'd', coordinates);\n\n    // hide while contains 0 value\n    attr(\n      root.ref.path,\n      'stroke-opacity',\n      props.spin || props.progress > 0 ? 1 : 0\n    );\n  };\n\n  var progressIndicator = createView({\n    tag: 'div',\n    name: 'progress-indicator',\n    ignoreRectUpdate: true,\n    ignoreRect: true,\n    create: create,\n    write: write,\n    mixins: {\n      apis: ['progress', 'spin', 'align'],\n      styles: ['opacity'],\n      animations: {\n        opacity: { type: 'tween', duration: 500 },\n        progress: {\n          type: 'spring',\n          stiffness: 0.95,\n          damping: 0.65,\n          mass: 10\n        }\n      }\n    }\n  });\n\n  var create$1 = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n    root.element.innerHTML =\n      (props.icon || '') + ('<span>' + props.label + '</span>');\n\n    props.isDisabled = false;\n  };\n\n  var write$1 = function write(_ref2) {\n    var root = _ref2.root,\n      props = _ref2.props;\n    var isDisabled = props.isDisabled;\n    var shouldDisable = root.query('GET_DISABLED') || props.opacity === 0;\n\n    if (shouldDisable && !isDisabled) {\n      props.isDisabled = true;\n      attr(root.element, 'disabled', 'disabled');\n    } else if (!shouldDisable && isDisabled) {\n      props.isDisabled = false;\n      root.element.removeAttribute('disabled');\n    }\n  };\n\n  var fileActionButton = createView({\n    tag: 'button',\n    attributes: {\n      type: 'button'\n    },\n\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    name: 'file-action-button',\n    mixins: {\n      apis: ['label'],\n      styles: ['translateX', 'translateY', 'scaleX', 'scaleY', 'opacity'],\n      animations: {\n        scaleX: 'spring',\n        scaleY: 'spring',\n        translateX: 'spring',\n        translateY: 'spring',\n        opacity: { type: 'tween', duration: 250 }\n      },\n\n      listeners: true\n    },\n\n    create: create$1,\n    write: write$1\n  });\n\n  var toNaturalFileSize = function toNaturalFileSize(bytes) {\n    var decimalSeparator =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.';\n    // nope, no negative byte sizes\n    bytes = Math.round(Math.abs(bytes));\n\n    // just bytes\n    if (bytes < 1000) {\n      return bytes + ' bytes';\n    }\n\n    // kilobytes\n    if (bytes < MB) {\n      return Math.floor(bytes / KB) + ' KB';\n    }\n\n    // megabytes\n    if (bytes < GB) {\n      return removeDecimalsWhenZero(bytes / MB, 1, decimalSeparator) + ' MB';\n    }\n\n    // gigabytes\n    return removeDecimalsWhenZero(bytes / GB, 2, decimalSeparator) + ' GB';\n  };\n\n  var KB = 1000;\n  var MB = 1000000;\n  var GB = 1000000000;\n\n  var removeDecimalsWhenZero = function removeDecimalsWhenZero(\n    value,\n    decimalCount,\n    separator\n  ) {\n    return value\n      .toFixed(decimalCount)\n      .split('.')\n      .filter(function(part) {\n        return part !== '0';\n      })\n      .join(separator);\n  };\n\n  var create$2 = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n    // filename\n    var fileName = createElement$1('span');\n    fileName.className = 'filepond--file-info-main';\n    // hide for screenreaders\n    // the file is contained in a fieldset with legend that contains the filename\n    // no need to read it twice\n    attr(fileName, 'aria-hidden', 'true');\n    root.appendChild(fileName);\n    root.ref.fileName = fileName;\n\n    // filesize\n    var fileSize = createElement$1('span');\n    fileSize.className = 'filepond--file-info-sub';\n    root.appendChild(fileSize);\n    root.ref.fileSize = fileSize;\n\n    // set initial values\n    text(fileSize, root.query('GET_LABEL_FILE_WAITING_FOR_SIZE'));\n    text(fileName, formatFilename(root.query('GET_ITEM_NAME', props.id)));\n  };\n\n  var updateFile = function updateFile(_ref2) {\n    var root = _ref2.root,\n      props = _ref2.props;\n    text(\n      root.ref.fileSize,\n      toNaturalFileSize(root.query('GET_ITEM_SIZE', props.id))\n    );\n\n    text(\n      root.ref.fileName,\n      formatFilename(root.query('GET_ITEM_NAME', props.id))\n    );\n  };\n\n  var updateFileSizeOnError = function updateFileSizeOnError(_ref3) {\n    var root = _ref3.root,\n      props = _ref3.props;\n    // if size is available don't fallback to unknown size message\n    if (isInt(root.query('GET_ITEM_SIZE', props.id))) {\n      return;\n    }\n\n    text(root.ref.fileSize, root.query('GET_LABEL_FILE_SIZE_NOT_AVAILABLE'));\n  };\n\n  var fileInfo = createView({\n    name: 'file-info',\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    write: createRoute({\n      DID_LOAD_ITEM: updateFile,\n      DID_UPDATE_ITEM_META: updateFile,\n      DID_THROW_ITEM_LOAD_ERROR: updateFileSizeOnError,\n      DID_THROW_ITEM_INVALID: updateFileSizeOnError\n    }),\n\n    didCreateView: function didCreateView(root) {\n      applyFilters('CREATE_VIEW', Object.assign({}, root, { view: root }));\n    },\n    create: create$2,\n    mixins: {\n      styles: ['translateX', 'translateY'],\n      animations: {\n        translateX: 'spring',\n        translateY: 'spring'\n      }\n    }\n  });\n\n  var toPercentage = function toPercentage(value) {\n    return Math.round(value * 100);\n  };\n\n  var create$3 = function create(_ref) {\n    var root = _ref.root;\n\n    // main status\n    var main = createElement$1('span');\n    main.className = 'filepond--file-status-main';\n    root.appendChild(main);\n    root.ref.main = main;\n\n    // sub status\n    var sub = createElement$1('span');\n    sub.className = 'filepond--file-status-sub';\n    root.appendChild(sub);\n    root.ref.sub = sub;\n\n    didSetItemLoadProgress({ root: root, action: { progress: null } });\n  };\n\n  var didSetItemLoadProgress = function didSetItemLoadProgress(_ref2) {\n    var root = _ref2.root,\n      action = _ref2.action;\n    var title =\n      action.progress === null\n        ? root.query('GET_LABEL_FILE_LOADING')\n        : root.query('GET_LABEL_FILE_LOADING') +\n          ' ' +\n          toPercentage(action.progress) +\n          '%';\n\n    text(root.ref.main, title);\n    text(root.ref.sub, root.query('GET_LABEL_TAP_TO_CANCEL'));\n  };\n\n  var didSetItemProcessProgress = function didSetItemProcessProgress(_ref3) {\n    var root = _ref3.root,\n      action = _ref3.action;\n    var title =\n      action.progress === null\n        ? root.query('GET_LABEL_FILE_PROCESSING')\n        : root.query('GET_LABEL_FILE_PROCESSING') +\n          ' ' +\n          toPercentage(action.progress) +\n          '%';\n\n    text(root.ref.main, title);\n    text(root.ref.sub, root.query('GET_LABEL_TAP_TO_CANCEL'));\n  };\n\n  var didRequestItemProcessing = function didRequestItemProcessing(_ref4) {\n    var root = _ref4.root;\n    text(root.ref.main, root.query('GET_LABEL_FILE_PROCESSING'));\n    text(root.ref.sub, root.query('GET_LABEL_TAP_TO_CANCEL'));\n  };\n\n  var didAbortItemProcessing = function didAbortItemProcessing(_ref5) {\n    var root = _ref5.root;\n    text(root.ref.main, root.query('GET_LABEL_FILE_PROCESSING_ABORTED'));\n    text(root.ref.sub, root.query('GET_LABEL_TAP_TO_RETRY'));\n  };\n\n  var didCompleteItemProcessing = function didCompleteItemProcessing(_ref6) {\n    var root = _ref6.root;\n    text(root.ref.main, root.query('GET_LABEL_FILE_PROCESSING_COMPLETE'));\n    text(root.ref.sub, root.query('GET_LABEL_TAP_TO_UNDO'));\n  };\n\n  var clear = function clear(_ref7) {\n    var root = _ref7.root;\n    text(root.ref.main, '');\n    text(root.ref.sub, '');\n  };\n\n  var error = function error(_ref8) {\n    var root = _ref8.root,\n      action = _ref8.action;\n    text(root.ref.main, action.status.main);\n    text(root.ref.sub, action.status.sub);\n  };\n\n  var fileStatus = createView({\n    name: 'file-status',\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    write: createRoute({\n      DID_LOAD_ITEM: clear,\n      DID_REVERT_ITEM_PROCESSING: clear,\n      DID_REQUEST_ITEM_PROCESSING: didRequestItemProcessing,\n      DID_ABORT_ITEM_PROCESSING: didAbortItemProcessing,\n      DID_COMPLETE_ITEM_PROCESSING: didCompleteItemProcessing,\n      DID_UPDATE_ITEM_PROCESS_PROGRESS: didSetItemProcessProgress,\n      DID_UPDATE_ITEM_LOAD_PROGRESS: didSetItemLoadProgress,\n      DID_THROW_ITEM_LOAD_ERROR: error,\n      DID_THROW_ITEM_INVALID: error,\n      DID_THROW_ITEM_PROCESSING_ERROR: error,\n      DID_THROW_ITEM_PROCESSING_REVERT_ERROR: error,\n      DID_THROW_ITEM_REMOVE_ERROR: error\n    }),\n\n    didCreateView: function didCreateView(root) {\n      applyFilters('CREATE_VIEW', Object.assign({}, root, { view: root }));\n    },\n    create: create$3,\n    mixins: {\n      styles: ['translateX', 'translateY', 'opacity'],\n      animations: {\n        opacity: { type: 'tween', duration: 250 },\n        translateX: 'spring',\n        translateY: 'spring'\n      }\n    }\n  });\n\n  /**\n   * Button definitions for the file view\n   */\n\n  var Buttons = {\n    AbortItemLoad: {\n      label: 'GET_LABEL_BUTTON_ABORT_ITEM_LOAD',\n      action: 'ABORT_ITEM_LOAD',\n      className: 'filepond--action-abort-item-load',\n      align: 'LOAD_INDICATOR_POSITION' // right\n    },\n    RetryItemLoad: {\n      label: 'GET_LABEL_BUTTON_RETRY_ITEM_LOAD',\n      action: 'RETRY_ITEM_LOAD',\n      icon: 'GET_ICON_RETRY',\n      className: 'filepond--action-retry-item-load',\n      align: 'BUTTON_PROCESS_ITEM_POSITION' // right\n    },\n    RemoveItem: {\n      label: 'GET_LABEL_BUTTON_REMOVE_ITEM',\n      action: 'REQUEST_REMOVE_ITEM',\n      icon: 'GET_ICON_REMOVE',\n      className: 'filepond--action-remove-item',\n      align: 'BUTTON_REMOVE_ITEM_POSITION' // left\n    },\n    ProcessItem: {\n      label: 'GET_LABEL_BUTTON_PROCESS_ITEM',\n      action: 'REQUEST_ITEM_PROCESSING',\n      icon: 'GET_ICON_PROCESS',\n      className: 'filepond--action-process-item',\n      align: 'BUTTON_PROCESS_ITEM_POSITION' // right\n    },\n    AbortItemProcessing: {\n      label: 'GET_LABEL_BUTTON_ABORT_ITEM_PROCESSING',\n      action: 'ABORT_ITEM_PROCESSING',\n      className: 'filepond--action-abort-item-processing',\n      align: 'BUTTON_PROCESS_ITEM_POSITION' // right\n    },\n    RetryItemProcessing: {\n      label: 'GET_LABEL_BUTTON_RETRY_ITEM_PROCESSING',\n      action: 'RETRY_ITEM_PROCESSING',\n      icon: 'GET_ICON_RETRY',\n      className: 'filepond--action-retry-item-processing',\n      align: 'BUTTON_PROCESS_ITEM_POSITION' // right\n    },\n    RevertItemProcessing: {\n      label: 'GET_LABEL_BUTTON_UNDO_ITEM_PROCESSING',\n      action: 'REQUEST_REVERT_ITEM_PROCESSING',\n      icon: 'GET_ICON_UNDO',\n      className: 'filepond--action-revert-item-processing',\n      align: 'BUTTON_PROCESS_ITEM_POSITION' // right\n    }\n  };\n\n  // make a list of buttons, we can then remove buttons from this list if they're disabled\n  var ButtonKeys = [];\n  forin(Buttons, function(key) {\n    ButtonKeys.push(key);\n  });\n\n  var calculateFileInfoOffset = function calculateFileInfoOffset(root) {\n    var buttonRect = root.ref.buttonRemoveItem.rect.element;\n    return buttonRect.hidden ? null : buttonRect.width + buttonRect.left;\n  };\n\n  var calculateButtonWidth = function calculateButtonWidth(root) {\n    var buttonRect = root.ref.buttonAbortItemLoad.rect.element;\n    return buttonRect.width;\n  };\n\n  // Force on full pixels so text stays crips\n  var calculateFileVerticalCenterOffset = function calculateFileVerticalCenterOffset(\n    root\n  ) {\n    return Math.floor(root.ref.buttonRemoveItem.rect.element.height / 4);\n  };\n  var calculateFileHorizontalCenterOffset = function calculateFileHorizontalCenterOffset(\n    root\n  ) {\n    return Math.floor(root.ref.buttonRemoveItem.rect.element.left / 2);\n  };\n\n  var getLoadIndicatorAlignment = function getLoadIndicatorAlignment(root) {\n    return root.query('GET_STYLE_LOAD_INDICATOR_POSITION');\n  };\n  var getProcessIndicatorAlignment = function getProcessIndicatorAlignment(\n    root\n  ) {\n    return root.query('GET_STYLE_PROGRESS_INDICATOR_POSITION');\n  };\n  var getRemoveIndicatorAligment = function getRemoveIndicatorAligment(root) {\n    return root.query('GET_STYLE_BUTTON_REMOVE_ITEM_POSITION');\n  };\n\n  var DefaultStyle = {\n    buttonAbortItemLoad: { opacity: 0 },\n    buttonRetryItemLoad: { opacity: 0 },\n    buttonRemoveItem: { opacity: 0 },\n    buttonProcessItem: { opacity: 0 },\n    buttonAbortItemProcessing: { opacity: 0 },\n    buttonRetryItemProcessing: { opacity: 0 },\n    buttonRevertItemProcessing: { opacity: 0 },\n    loadProgressIndicator: { opacity: 0, align: getLoadIndicatorAlignment },\n    processProgressIndicator: {\n      opacity: 0,\n      align: getProcessIndicatorAlignment\n    },\n    processingCompleteIndicator: { opacity: 0, scaleX: 0.75, scaleY: 0.75 },\n    info: { translateX: 0, translateY: 0, opacity: 0 },\n    status: { translateX: 0, translateY: 0, opacity: 0 }\n  };\n\n  var IdleStyle = {\n    buttonRemoveItem: { opacity: 1 },\n    buttonProcessItem: { opacity: 1 },\n    info: { translateX: calculateFileInfoOffset },\n    status: { translateX: calculateFileInfoOffset }\n  };\n\n  var ProcessingStyle = {\n    buttonAbortItemProcessing: { opacity: 1 },\n    processProgressIndicator: { opacity: 1 },\n    status: { opacity: 1 }\n  };\n\n  var StyleMap = {\n    DID_THROW_ITEM_INVALID: {\n      buttonRemoveItem: { opacity: 1 },\n      info: { translateX: calculateFileInfoOffset },\n      status: { translateX: calculateFileInfoOffset, opacity: 1 }\n    },\n\n    DID_START_ITEM_LOAD: {\n      buttonAbortItemLoad: { opacity: 1 },\n      loadProgressIndicator: { opacity: 1 },\n      status: { opacity: 1 }\n    },\n\n    DID_THROW_ITEM_LOAD_ERROR: {\n      buttonRetryItemLoad: { opacity: 1 },\n      buttonRemoveItem: { opacity: 1 },\n      info: { translateX: calculateFileInfoOffset },\n      status: { opacity: 1 }\n    },\n\n    DID_START_ITEM_REMOVE: {\n      processProgressIndicator: {\n        opacity: 1,\n        align: getRemoveIndicatorAligment\n      },\n      info: { translateX: calculateFileInfoOffset },\n      status: { opacity: 0 }\n    },\n\n    DID_THROW_ITEM_REMOVE_ERROR: {\n      processProgressIndicator: {\n        opacity: 0,\n        align: getRemoveIndicatorAligment\n      },\n      buttonRemoveItem: { opacity: 1 },\n      info: { translateX: calculateFileInfoOffset },\n      status: { opacity: 1, translateX: calculateFileInfoOffset }\n    },\n\n    DID_LOAD_ITEM: IdleStyle,\n    DID_LOAD_LOCAL_ITEM: {\n      buttonRemoveItem: { opacity: 1 },\n      info: { translateX: calculateFileInfoOffset },\n      status: { translateX: calculateFileInfoOffset }\n    },\n\n    DID_START_ITEM_PROCESSING: ProcessingStyle,\n    DID_REQUEST_ITEM_PROCESSING: ProcessingStyle,\n    DID_UPDATE_ITEM_PROCESS_PROGRESS: ProcessingStyle,\n    DID_COMPLETE_ITEM_PROCESSING: {\n      buttonRevertItemProcessing: { opacity: 1 },\n      info: { opacity: 1 },\n      status: { opacity: 1 }\n    },\n\n    DID_THROW_ITEM_PROCESSING_ERROR: {\n      buttonRemoveItem: { opacity: 1 },\n      buttonRetryItemProcessing: { opacity: 1 },\n      status: { opacity: 1 },\n      info: { translateX: calculateFileInfoOffset }\n    },\n\n    DID_THROW_ITEM_PROCESSING_REVERT_ERROR: {\n      buttonRevertItemProcessing: { opacity: 1 },\n      status: { opacity: 1 },\n      info: { opacity: 1 }\n    },\n\n    DID_ABORT_ITEM_PROCESSING: {\n      buttonRemoveItem: { opacity: 1 },\n      buttonProcessItem: { opacity: 1 },\n      info: { translateX: calculateFileInfoOffset },\n      status: { opacity: 1 }\n    },\n\n    DID_REVERT_ITEM_PROCESSING: IdleStyle\n  };\n\n  // complete indicator view\n  var processingCompleteIndicatorView = createView({\n    create: function create(_ref) {\n      var root = _ref.root;\n      root.element.innerHTML = root.query('GET_ICON_DONE');\n    },\n    name: 'processing-complete-indicator',\n    ignoreRect: true,\n    mixins: {\n      styles: ['scaleX', 'scaleY', 'opacity'],\n      animations: {\n        scaleX: 'spring',\n        scaleY: 'spring',\n        opacity: { type: 'tween', duration: 250 }\n      }\n    }\n  });\n\n  /**\n   * Creates the file view\n   */\n  var create$4 = function create(_ref2) {\n    var root = _ref2.root,\n      props = _ref2.props;\n    var id = props.id;\n\n    // allow reverting upload\n    var allowRevert = root.query('GET_ALLOW_REVERT');\n\n    // allow remove file\n    var allowRemove = root.query('GET_ALLOW_REMOVE');\n\n    // allow processing upload\n    var allowProcess = root.query('GET_ALLOW_PROCESS');\n\n    // is instant uploading, need this to determine the icon of the undo button\n    var instantUpload = root.query('GET_INSTANT_UPLOAD');\n\n    // is async set up\n    var isAsync = root.query('IS_ASYNC');\n\n    // should align remove item buttons\n    var alignRemoveItemButton = root.query(\n      'GET_STYLE_BUTTON_REMOVE_ITEM_ALIGN'\n    );\n\n    // enabled buttons array\n    var buttonFilter;\n    if (isAsync) {\n      if (allowProcess && !allowRevert) {\n        // only remove revert button\n        buttonFilter = function buttonFilter(key) {\n          return !/RevertItemProcessing/.test(key);\n        };\n      } else if (!allowProcess && allowRevert) {\n        // only remove process button\n        buttonFilter = function buttonFilter(key) {\n          return !/ProcessItem|RetryItemProcessing|AbortItemProcessing/.test(\n            key\n          );\n        };\n      } else if (!allowProcess && !allowRevert) {\n        // remove all process buttons\n        buttonFilter = function buttonFilter(key) {\n          return !/Process/.test(key);\n        };\n      }\n    } else {\n      // no process controls available\n      buttonFilter = function buttonFilter(key) {\n        return !/Process/.test(key);\n      };\n    }\n\n    var enabledButtons = buttonFilter\n      ? ButtonKeys.filter(buttonFilter)\n      : ButtonKeys.concat();\n\n    // update icon and label for revert button when instant uploading\n    if (instantUpload && allowRevert) {\n      Buttons['RevertItemProcessing'].label = 'GET_LABEL_BUTTON_REMOVE_ITEM';\n      Buttons['RevertItemProcessing'].icon = 'GET_ICON_REMOVE';\n    }\n\n    // remove last button (revert) if not allowed\n    if (isAsync && !allowRevert) {\n      var map = StyleMap['DID_COMPLETE_ITEM_PROCESSING'];\n      map.info.translateX = calculateFileHorizontalCenterOffset;\n      map.info.translateY = calculateFileVerticalCenterOffset;\n      map.status.translateY = calculateFileVerticalCenterOffset;\n      map.processingCompleteIndicator = { opacity: 1, scaleX: 1, scaleY: 1 };\n    }\n\n    // should align center\n    if (isAsync && !allowProcess) {\n      [\n        'DID_START_ITEM_PROCESSING',\n        'DID_REQUEST_ITEM_PROCESSING',\n        'DID_UPDATE_ITEM_PROCESS_PROGRESS',\n        'DID_THROW_ITEM_PROCESSING_ERROR'\n      ].forEach(function(key) {\n        StyleMap[key].status.translateY = calculateFileVerticalCenterOffset;\n      });\n      StyleMap[\n        'DID_THROW_ITEM_PROCESSING_ERROR'\n      ].status.translateX = calculateButtonWidth;\n    }\n\n    // move remove button to right\n    if (alignRemoveItemButton && allowRevert) {\n      Buttons['RevertItemProcessing'].align = 'BUTTON_REMOVE_ITEM_POSITION';\n      var _map = StyleMap['DID_COMPLETE_ITEM_PROCESSING'];\n      _map.info.translateX = calculateFileInfoOffset;\n      _map.status.translateY = calculateFileVerticalCenterOffset;\n      _map.processingCompleteIndicator = { opacity: 1, scaleX: 1, scaleY: 1 };\n    }\n\n    if (!allowRemove) {\n      Buttons['RemoveItem'].disabled = true;\n    }\n\n    // create the button views\n    forin(Buttons, function(key, definition) {\n      // create button\n      var buttonView = root.createChildView(fileActionButton, {\n        label: root.query(definition.label),\n        icon: root.query(definition.icon),\n        opacity: 0\n      });\n\n      // should be appended?\n      if (enabledButtons.includes(key)) {\n        root.appendChildView(buttonView);\n      }\n\n      // toggle\n      if (definition.disabled) {\n        buttonView.element.setAttribute('disabled', 'disabled');\n        buttonView.element.setAttribute('hidden', 'hidden');\n      }\n\n      // add position attribute\n      buttonView.element.dataset.align = root.query(\n        'GET_STYLE_' + definition.align\n      );\n\n      // add class\n      buttonView.element.classList.add(definition.className);\n\n      // handle interactions\n      buttonView.on('click', function(e) {\n        e.stopPropagation();\n        if (definition.disabled) return;\n        root.dispatch(definition.action, { query: id });\n      });\n\n      // set reference\n      root.ref['button' + key] = buttonView;\n    });\n\n    // checkmark\n    root.ref.processingCompleteIndicator = root.appendChildView(\n      root.createChildView(processingCompleteIndicatorView)\n    );\n    root.ref.processingCompleteIndicator.element.dataset.align = root.query(\n      'GET_STYLE_BUTTON_PROCESS_ITEM_POSITION'\n    );\n\n    // create file info view\n    root.ref.info = root.appendChildView(\n      root.createChildView(fileInfo, { id: id })\n    );\n\n    // create file status view\n    root.ref.status = root.appendChildView(\n      root.createChildView(fileStatus, { id: id })\n    );\n\n    // add progress indicators\n    var loadIndicatorView = root.appendChildView(\n      root.createChildView(progressIndicator, {\n        opacity: 0,\n        align: root.query('GET_STYLE_LOAD_INDICATOR_POSITION')\n      })\n    );\n\n    loadIndicatorView.element.classList.add('filepond--load-indicator');\n    root.ref.loadProgressIndicator = loadIndicatorView;\n\n    var progressIndicatorView = root.appendChildView(\n      root.createChildView(progressIndicator, {\n        opacity: 0,\n        align: root.query('GET_STYLE_PROGRESS_INDICATOR_POSITION')\n      })\n    );\n\n    progressIndicatorView.element.classList.add('filepond--process-indicator');\n    root.ref.processProgressIndicator = progressIndicatorView;\n\n    // current active styles\n    root.ref.activeStyles = [];\n  };\n\n  var write$2 = function write(_ref3) {\n    var root = _ref3.root,\n      actions = _ref3.actions,\n      props = _ref3.props;\n\n    // route actions\n    route({ root: root, actions: actions, props: props });\n\n    // select last state change action\n    var action = actions\n      .concat()\n      .filter(function(action) {\n        return /^DID_/.test(action.type);\n      })\n      .reverse()\n      .find(function(action) {\n        return StyleMap[action.type];\n      });\n\n    // a new action happened, let's get the matching styles\n    if (action) {\n      // define new active styles\n      root.ref.activeStyles = [];\n\n      var stylesToApply = StyleMap[action.type];\n      forin(DefaultStyle, function(name, defaultStyles) {\n        // get reference to control\n        var control = root.ref[name];\n\n        // loop over all styles for this control\n        forin(defaultStyles, function(key, defaultValue) {\n          var value =\n            stylesToApply[name] &&\n            typeof stylesToApply[name][key] !== 'undefined'\n              ? stylesToApply[name][key]\n              : defaultValue;\n          root.ref.activeStyles.push({\n            control: control,\n            key: key,\n            value: value\n          });\n        });\n      });\n    }\n\n    // apply active styles to element\n    root.ref.activeStyles.forEach(function(_ref4) {\n      var control = _ref4.control,\n        key = _ref4.key,\n        value = _ref4.value;\n      control[key] = typeof value === 'function' ? value(root) : value;\n    });\n  };\n\n  var route = createRoute({\n    DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING: function DID_SET_LABEL_BUTTON_ABORT_ITEM_PROCESSING(\n      _ref5\n    ) {\n      var root = _ref5.root,\n        action = _ref5.action;\n      root.ref.buttonAbortItemProcessing.label = action.value;\n    },\n    DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD: function DID_SET_LABEL_BUTTON_ABORT_ITEM_LOAD(\n      _ref6\n    ) {\n      var root = _ref6.root,\n        action = _ref6.action;\n      root.ref.buttonAbortItemLoad.label = action.value;\n    },\n    DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL: function DID_SET_LABEL_BUTTON_ABORT_ITEM_REMOVAL(\n      _ref7\n    ) {\n      var root = _ref7.root,\n        action = _ref7.action;\n      root.ref.buttonAbortItemRemoval.label = action.value;\n    },\n    DID_REQUEST_ITEM_PROCESSING: function DID_REQUEST_ITEM_PROCESSING(_ref8) {\n      var root = _ref8.root;\n      root.ref.processProgressIndicator.spin = true;\n      root.ref.processProgressIndicator.progress = 0;\n    },\n    DID_START_ITEM_LOAD: function DID_START_ITEM_LOAD(_ref9) {\n      var root = _ref9.root;\n      root.ref.loadProgressIndicator.spin = true;\n      root.ref.loadProgressIndicator.progress = 0;\n    },\n    DID_START_ITEM_REMOVE: function DID_START_ITEM_REMOVE(_ref10) {\n      var root = _ref10.root;\n      root.ref.processProgressIndicator.spin = true;\n      root.ref.processProgressIndicator.progress = 0;\n    },\n    DID_UPDATE_ITEM_LOAD_PROGRESS: function DID_UPDATE_ITEM_LOAD_PROGRESS(\n      _ref11\n    ) {\n      var root = _ref11.root,\n        action = _ref11.action;\n      root.ref.loadProgressIndicator.spin = false;\n      root.ref.loadProgressIndicator.progress = action.progress;\n    },\n    DID_UPDATE_ITEM_PROCESS_PROGRESS: function DID_UPDATE_ITEM_PROCESS_PROGRESS(\n      _ref12\n    ) {\n      var root = _ref12.root,\n        action = _ref12.action;\n      root.ref.processProgressIndicator.spin = false;\n      root.ref.processProgressIndicator.progress = action.progress;\n    }\n  });\n\n  var file = createView({\n    create: create$4,\n    write: write$2,\n    didCreateView: function didCreateView(root) {\n      applyFilters('CREATE_VIEW', Object.assign({}, root, { view: root }));\n    },\n    name: 'file'\n  });\n\n  /**\n   * Creates the file view\n   */\n  var create$5 = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n\n    // filename\n    root.ref.fileName = createElement$1('legend');\n    root.appendChild(root.ref.fileName);\n\n    // file appended\n    root.ref.file = root.appendChildView(\n      root.createChildView(file, { id: props.id })\n    );\n\n    // data has moved to data.js\n    root.ref.data = false;\n  };\n\n  /**\n   * Data storage\n   */\n  var didLoadItem = function didLoadItem(_ref2) {\n    var root = _ref2.root,\n      props = _ref2.props;\n    // updates the legend of the fieldset so screenreaders can better group buttons\n    text(\n      root.ref.fileName,\n      formatFilename(root.query('GET_ITEM_NAME', props.id))\n    );\n  };\n\n  var fileWrapper = createView({\n    create: create$5,\n    ignoreRect: true,\n    write: createRoute({\n      DID_LOAD_ITEM: didLoadItem\n    }),\n\n    didCreateView: function didCreateView(root) {\n      applyFilters('CREATE_VIEW', Object.assign({}, root, { view: root }));\n    },\n    tag: 'fieldset',\n    name: 'file-wrapper'\n  });\n\n  var PANEL_SPRING_PROPS = { type: 'spring', damping: 0.6, mass: 7 };\n\n  var create$6 = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n    [\n      {\n        name: 'top'\n      },\n\n      {\n        name: 'center',\n        props: {\n          translateY: null,\n          scaleY: null\n        },\n\n        mixins: {\n          animations: {\n            scaleY: PANEL_SPRING_PROPS\n          },\n\n          styles: ['translateY', 'scaleY']\n        }\n      },\n\n      {\n        name: 'bottom',\n        props: {\n          translateY: null\n        },\n\n        mixins: {\n          animations: {\n            translateY: PANEL_SPRING_PROPS\n          },\n\n          styles: ['translateY']\n        }\n      }\n    ].forEach(function(section) {\n      createSection(root, section, props.name);\n    });\n\n    root.element.classList.add('filepond--' + props.name);\n\n    root.ref.scalable = null;\n  };\n\n  var createSection = function createSection(root, section, className) {\n    var viewConstructor = createView({\n      name: 'panel-' + section.name + ' filepond--' + className,\n      mixins: section.mixins,\n      ignoreRectUpdate: true\n    });\n\n    var view = root.createChildView(viewConstructor, section.props);\n\n    root.ref[section.name] = root.appendChildView(view);\n  };\n\n  var write$3 = function write(_ref2) {\n    var root = _ref2.root,\n      props = _ref2.props;\n\n    // update scalable state\n    if (root.ref.scalable === null || props.scalable !== root.ref.scalable) {\n      root.ref.scalable = isBoolean(props.scalable) ? props.scalable : true;\n      root.element.dataset.scalable = root.ref.scalable;\n    }\n\n    // no height, can't set\n    if (!props.height) return;\n\n    // get child rects\n    var topRect = root.ref.top.rect.element;\n    var bottomRect = root.ref.bottom.rect.element;\n\n    // make sure height never is smaller than bottom and top seciton heights combined (will probably never happen, but who knows)\n    var height = Math.max(topRect.height + bottomRect.height, props.height);\n\n    // offset center part\n    root.ref.center.translateY = topRect.height;\n\n    // scale center part\n    // use math ceil to prevent transparent lines because of rounding errors\n    root.ref.center.scaleY =\n      (height - topRect.height - bottomRect.height) / 100;\n\n    // offset bottom part\n    root.ref.bottom.translateY = height - bottomRect.height;\n  };\n\n  var panel = createView({\n    name: 'panel',\n    write: write$3,\n    create: create$6,\n    ignoreRect: true,\n    mixins: {\n      apis: ['height', 'scalable']\n    }\n  });\n\n  var createDragHelper = function createDragHelper(items) {\n    var itemIds = items.map(function(item) {\n      return item.id;\n    });\n    var prevIndex = undefined;\n    return {\n      setIndex: function setIndex(index) {\n        prevIndex = index;\n      },\n      getIndex: function getIndex() {\n        return prevIndex;\n      },\n      getItemIndex: function getItemIndex(item) {\n        return itemIds.indexOf(item.id);\n      }\n    };\n  };\n\n  var ITEM_TRANSLATE_SPRING = {\n    type: 'spring',\n    stiffness: 0.75,\n    damping: 0.45,\n    mass: 10\n  };\n\n  var ITEM_SCALE_SPRING = 'spring';\n\n  var StateMap = {\n    DID_START_ITEM_LOAD: 'busy',\n    DID_UPDATE_ITEM_LOAD_PROGRESS: 'loading',\n    DID_THROW_ITEM_INVALID: 'load-invalid',\n    DID_THROW_ITEM_LOAD_ERROR: 'load-error',\n    DID_LOAD_ITEM: 'idle',\n    DID_THROW_ITEM_REMOVE_ERROR: 'remove-error',\n    DID_START_ITEM_REMOVE: 'busy',\n    DID_START_ITEM_PROCESSING: 'busy processing',\n    DID_REQUEST_ITEM_PROCESSING: 'busy processing',\n    DID_UPDATE_ITEM_PROCESS_PROGRESS: 'processing',\n    DID_COMPLETE_ITEM_PROCESSING: 'processing-complete',\n    DID_THROW_ITEM_PROCESSING_ERROR: 'processing-error',\n    DID_THROW_ITEM_PROCESSING_REVERT_ERROR: 'processing-revert-error',\n    DID_ABORT_ITEM_PROCESSING: 'cancelled',\n    DID_REVERT_ITEM_PROCESSING: 'idle'\n  };\n\n  /**\n   * Creates the file view\n   */\n  var create$7 = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n\n    // select\n    root.ref.handleClick = function(e) {\n      return root.dispatch('DID_ACTIVATE_ITEM', { id: props.id });\n    };\n\n    // set id\n    root.element.id = 'filepond--item-' + props.id;\n    root.element.addEventListener('click', root.ref.handleClick);\n\n    // file view\n    root.ref.container = root.appendChildView(\n      root.createChildView(fileWrapper, { id: props.id })\n    );\n\n    // file panel\n    root.ref.panel = root.appendChildView(\n      root.createChildView(panel, { name: 'item-panel' })\n    );\n\n    // default start height\n    root.ref.panel.height = null;\n\n    // by default not marked for removal\n    props.markedForRemoval = false;\n\n    // if not allowed to reorder file items, exit here\n    if (!root.query('GET_ALLOW_REORDER')) return;\n\n    // set to idle so shows grab cursor\n    root.element.dataset.dragState = 'idle';\n\n    var grab = function grab(e) {\n      if (!e.isPrimary) return;\n\n      var removedActivateListener = false;\n\n      var origin = {\n        x: e.pageX,\n        y: e.pageY\n      };\n\n      props.dragOrigin = {\n        x: root.translateX,\n        y: root.translateY\n      };\n\n      props.dragCenter = {\n        x: e.offsetX,\n        y: e.offsetY\n      };\n\n      var dragState = createDragHelper(root.query('GET_ACTIVE_ITEMS'));\n\n      root.dispatch('DID_GRAB_ITEM', { id: props.id, dragState: dragState });\n\n      var drag = function drag(e) {\n        if (!e.isPrimary) return;\n\n        e.stopPropagation();\n        e.preventDefault();\n\n        props.dragOffset = {\n          x: e.pageX - origin.x,\n          y: e.pageY - origin.y\n        };\n\n        // if dragged stop listening to clicks, will re-add when done dragging\n        var dist =\n          props.dragOffset.x * props.dragOffset.x +\n          props.dragOffset.y * props.dragOffset.y;\n        if (dist > 16 && !removedActivateListener) {\n          removedActivateListener = true;\n          root.element.removeEventListener('click', root.ref.handleClick);\n        }\n\n        root.dispatch('DID_DRAG_ITEM', { id: props.id, dragState: dragState });\n      };\n\n      var drop = function drop(e) {\n        if (!e.isPrimary) return;\n\n        document.removeEventListener('pointermove', drag);\n        document.removeEventListener('pointerup', drop);\n\n        props.dragOffset = {\n          x: e.pageX - origin.x,\n          y: e.pageY - origin.y\n        };\n\n        root.dispatch('DID_DROP_ITEM', { id: props.id, dragState: dragState });\n\n        // start listening to clicks again\n        if (removedActivateListener) {\n          setTimeout(function() {\n            return root.element.addEventListener('click', root.ref.handleClick);\n          }, 0);\n        }\n      };\n\n      document.addEventListener('pointermove', drag);\n      document.addEventListener('pointerup', drop);\n    };\n\n    root.element.addEventListener('pointerdown', grab);\n  };\n\n  var route$1 = createRoute({\n    DID_UPDATE_PANEL_HEIGHT: function DID_UPDATE_PANEL_HEIGHT(_ref2) {\n      var root = _ref2.root,\n        action = _ref2.action;\n      root.height = action.height;\n    }\n  });\n\n  var write$4 = createRoute(\n    {\n      DID_GRAB_ITEM: function DID_GRAB_ITEM(_ref3) {\n        var root = _ref3.root,\n          props = _ref3.props;\n        props.dragOrigin = {\n          x: root.translateX,\n          y: root.translateY\n        };\n      },\n      DID_DRAG_ITEM: function DID_DRAG_ITEM(_ref4) {\n        var root = _ref4.root;\n        root.element.dataset.dragState = 'drag';\n      },\n      DID_DROP_ITEM: function DID_DROP_ITEM(_ref5) {\n        var root = _ref5.root,\n          props = _ref5.props;\n        props.dragOffset = null;\n        props.dragOrigin = null;\n        root.element.dataset.dragState = 'drop';\n      }\n    },\n    function(_ref6) {\n      var root = _ref6.root,\n        actions = _ref6.actions,\n        props = _ref6.props,\n        shouldOptimize = _ref6.shouldOptimize;\n\n      if (root.element.dataset.dragState === 'drop') {\n        if (root.scaleX <= 1) {\n          root.element.dataset.dragState = 'idle';\n        }\n      }\n\n      // select last state change action\n      var action = actions\n        .concat()\n        .filter(function(action) {\n          return /^DID_/.test(action.type);\n        })\n        .reverse()\n        .find(function(action) {\n          return StateMap[action.type];\n        });\n\n      // no need to set same state twice\n      if (action && action.type !== props.currentState) {\n        // set current state\n        props.currentState = action.type;\n\n        // set state\n        root.element.dataset.filepondItemState =\n          StateMap[props.currentState] || '';\n      }\n\n      // route actions\n      var aspectRatio =\n        root.query('GET_ITEM_PANEL_ASPECT_RATIO') ||\n        root.query('GET_PANEL_ASPECT_RATIO');\n      if (!aspectRatio) {\n        route$1({ root: root, actions: actions, props: props });\n        if (!root.height && root.ref.container.rect.element.height > 0) {\n          root.height = root.ref.container.rect.element.height;\n        }\n      } else if (!shouldOptimize) {\n        root.height = root.rect.element.width * aspectRatio;\n      }\n\n      // sync panel height with item height\n      if (shouldOptimize) {\n        root.ref.panel.height = null;\n      }\n\n      root.ref.panel.height = root.height;\n    }\n  );\n\n  var item = createView({\n    create: create$7,\n    write: write$4,\n    destroy: function destroy(_ref7) {\n      var root = _ref7.root,\n        props = _ref7.props;\n      root.element.removeEventListener('click', root.ref.handleClick);\n      root.dispatch('RELEASE_ITEM', { query: props.id });\n    },\n    tag: 'li',\n    name: 'item',\n    mixins: {\n      apis: [\n        'id',\n        'interactionMethod',\n        'markedForRemoval',\n        'spawnDate',\n        'dragCenter',\n        'dragOrigin',\n        'dragOffset'\n      ],\n      styles: [\n        'translateX',\n        'translateY',\n        'scaleX',\n        'scaleY',\n        'opacity',\n        'height'\n      ],\n\n      animations: {\n        scaleX: ITEM_SCALE_SPRING,\n        scaleY: ITEM_SCALE_SPRING,\n        translateX: ITEM_TRANSLATE_SPRING,\n        translateY: ITEM_TRANSLATE_SPRING,\n        opacity: { type: 'tween', duration: 150 }\n      }\n    }\n  });\n\n  var getItemIndexByPosition = function getItemIndexByPosition(\n    view,\n    children,\n    positionInView\n  ) {\n    if (!positionInView) return;\n\n    var horizontalSpace = view.rect.element.width;\n    // const children = view.childViews;\n    var l = children.length;\n    var last = null;\n\n    // -1, don't move items to accomodate (either add to top or bottom)\n    if (l === 0 || positionInView.top < children[0].rect.element.top) return -1;\n\n    // let's get the item width\n    var item = children[0];\n    var itemRect = item.rect.element;\n    var itemHorizontalMargin = itemRect.marginLeft + itemRect.marginRight;\n    var itemWidth = itemRect.width + itemHorizontalMargin;\n    var itemsPerRow = Math.round(horizontalSpace / itemWidth);\n\n    // stack\n    if (itemsPerRow === 1) {\n      for (var index = 0; index < l; index++) {\n        var child = children[index];\n        var childMid = child.rect.outer.top + child.rect.element.height * 0.5;\n        if (positionInView.top < childMid) {\n          return index;\n        }\n      }\n      return l;\n    }\n\n    // grid\n    var itemVerticalMargin = itemRect.marginTop + itemRect.marginBottom;\n    var itemHeight = itemRect.height + itemVerticalMargin;\n    for (var _index = 0; _index < l; _index++) {\n      var indexX = _index % itemsPerRow;\n      var indexY = Math.floor(_index / itemsPerRow);\n\n      var offsetX = indexX * itemWidth;\n      var offsetY = indexY * itemHeight;\n\n      var itemTop = offsetY - itemRect.marginTop;\n      var itemRight = offsetX + itemWidth;\n      var itemBottom = offsetY + itemHeight + itemRect.marginBottom;\n\n      if (positionInView.top < itemBottom && positionInView.top > itemTop) {\n        if (positionInView.left < itemRight) {\n          return _index;\n        } else if (_index !== l - 1) {\n          last = _index;\n        } else {\n          last = null;\n        }\n      }\n    }\n\n    if (last !== null) {\n      return last;\n    }\n\n    return l;\n  };\n\n  var dropAreaDimensions = {\n    height: 0,\n    width: 0,\n    get getHeight() {\n      return this.height;\n    },\n    set setHeight(val) {\n      if (this.height === 0 || val === 0) this.height = val;\n    },\n    get getWidth() {\n      return this.width;\n    },\n    set setWidth(val) {\n      if (this.width === 0 || val === 0) this.width = val;\n    },\n    setDimensions: function setDimensions(height, width) {\n      if (this.height === 0 || height === 0) this.height = height;\n      if (this.width === 0 || width === 0) this.width = width;\n    }\n  };\n\n  var create$8 = function create(_ref) {\n    var root = _ref.root;\n    // need to set role to list as otherwise it won't be read as a list by VoiceOver\n    attr(root.element, 'role', 'list');\n\n    root.ref.lastItemSpanwDate = Date.now();\n  };\n\n  /**\n   * Inserts a new item\n   * @param root\n   * @param action\n   */\n  var addItemView = function addItemView(_ref2) {\n    var root = _ref2.root,\n      action = _ref2.action;\n    var id = action.id,\n      index = action.index,\n      interactionMethod = action.interactionMethod;\n\n    root.ref.addIndex = index;\n\n    var now = Date.now();\n    var spawnDate = now;\n    var opacity = 1;\n\n    if (interactionMethod !== InteractionMethod.NONE) {\n      opacity = 0;\n      var cooldown = root.query('GET_ITEM_INSERT_INTERVAL');\n      var dist = now - root.ref.lastItemSpanwDate;\n      spawnDate = dist < cooldown ? now + (cooldown - dist) : now;\n    }\n\n    root.ref.lastItemSpanwDate = spawnDate;\n\n    root.appendChildView(\n      root.createChildView(\n        // view type\n        item,\n\n        // props\n        {\n          spawnDate: spawnDate,\n          id: id,\n          opacity: opacity,\n          interactionMethod: interactionMethod\n        }\n      ),\n\n      index\n    );\n  };\n\n  var moveItem = function moveItem(item, x, y) {\n    var vx =\n      arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var vy =\n      arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n    // set to null to remove animation while dragging\n    if (item.dragOffset) {\n      item.translateX = null;\n      item.translateY = null;\n      item.translateX = item.dragOrigin.x + item.dragOffset.x;\n      item.translateY = item.dragOrigin.y + item.dragOffset.y;\n      item.scaleX = 1.025;\n      item.scaleY = 1.025;\n    } else {\n      item.translateX = x;\n      item.translateY = y;\n\n      if (Date.now() > item.spawnDate) {\n        // reveal element\n        if (item.opacity === 0) {\n          introItemView(item, x, y, vx, vy);\n        }\n\n        // make sure is default scale every frame\n        item.scaleX = 1;\n        item.scaleY = 1;\n        item.opacity = 1;\n      }\n    }\n  };\n\n  var introItemView = function introItemView(item, x, y, vx, vy) {\n    if (item.interactionMethod === InteractionMethod.NONE) {\n      item.translateX = null;\n      item.translateX = x;\n      item.translateY = null;\n      item.translateY = y;\n    } else if (item.interactionMethod === InteractionMethod.DROP) {\n      item.translateX = null;\n      item.translateX = x - vx * 20;\n\n      item.translateY = null;\n      item.translateY = y - vy * 10;\n\n      item.scaleX = 0.8;\n      item.scaleY = 0.8;\n    } else if (item.interactionMethod === InteractionMethod.BROWSE) {\n      item.translateY = null;\n      item.translateY = y - 30;\n    } else if (item.interactionMethod === InteractionMethod.API) {\n      item.translateX = null;\n      item.translateX = x - 30;\n      item.translateY = null;\n    }\n  };\n\n  /**\n   * Removes an existing item\n   * @param root\n   * @param action\n   */\n  var removeItemView = function removeItemView(_ref3) {\n    var root = _ref3.root,\n      action = _ref3.action;\n    var id = action.id;\n\n    // get the view matching the given id\n    var view = root.childViews.find(function(child) {\n      return child.id === id;\n    });\n\n    // if no view found, exit\n    if (!view) {\n      return;\n    }\n\n    // animate view out of view\n    view.scaleX = 0.9;\n    view.scaleY = 0.9;\n    view.opacity = 0;\n\n    // mark for removal\n    view.markedForRemoval = true;\n  };\n\n  var getItemHeight = function getItemHeight(child) {\n    return (\n      child.rect.element.height +\n      child.rect.element.marginBottom * 0.5 +\n      child.rect.element.marginTop * 0.5\n    );\n  };\n  var getItemWidth = function getItemWidth(child) {\n    return (\n      child.rect.element.width +\n      child.rect.element.marginLeft * 0.5 +\n      child.rect.element.marginRight * 0.5\n    );\n  };\n\n  var dragItem = function dragItem(_ref4) {\n    var root = _ref4.root,\n      action = _ref4.action;\n    var id = action.id,\n      dragState = action.dragState;\n\n    // reference to item\n    var item = root.query('GET_ITEM', { id: id });\n\n    // get the view matching the given id\n    var view = root.childViews.find(function(child) {\n      return child.id === id;\n    });\n\n    var numItems = root.childViews.length;\n    var oldIndex = dragState.getItemIndex(item);\n\n    // if no view found, exit\n    if (!view) return;\n\n    var dragPosition = {\n      x: view.dragOrigin.x + view.dragOffset.x + view.dragCenter.x,\n      y: view.dragOrigin.y + view.dragOffset.y + view.dragCenter.y\n\n      // get drag area dimensions\n    };\n    var dragHeight = getItemHeight(view);\n    var dragWidth = getItemWidth(view);\n\n    // get rows and columns (There will always be at least one row and one column if a file is present)\n    var cols = Math.floor(root.rect.outer.width / dragWidth);\n    if (cols > numItems) cols = numItems;\n\n    // rows are used to find when we have left the preview area bounding box\n    var rows = Math.floor(numItems / cols + 1);\n\n    dropAreaDimensions.setHeight = dragHeight * rows;\n    dropAreaDimensions.setWidth = dragWidth * cols;\n\n    // get new index of dragged item\n    var location = {\n      y: Math.floor(dragPosition.y / dragHeight),\n      x: Math.floor(dragPosition.x / dragWidth),\n      getGridIndex: function getGridIndex() {\n        if (\n          dragPosition.y > dropAreaDimensions.getHeight ||\n          dragPosition.y < 0 ||\n          dragPosition.x > dropAreaDimensions.getWidth ||\n          dragPosition.x < 0\n        )\n          return oldIndex;\n        return this.y * cols + this.x;\n      },\n      getColIndex: function getColIndex() {\n        var items = root.query('GET_ACTIVE_ITEMS');\n        var visibleChildren = root.childViews.filter(function(child) {\n          return child.rect.element.height;\n        });\n        var children = items.map(function(item) {\n          return visibleChildren.find(function(childView) {\n            return childView.id === item.id;\n          });\n        });\n        var currentIndex = children.findIndex(function(child) {\n          return child === view;\n        });\n        var dragHeight = getItemHeight(view);\n        var l = children.length;\n        var idx = l;\n        var childHeight = 0;\n        var childBottom = 0;\n        var childTop = 0;\n        for (var i = 0; i < l; i++) {\n          childHeight = getItemHeight(children[i]);\n          childTop = childBottom;\n          childBottom = childTop + childHeight;\n          if (dragPosition.y < childBottom) {\n            if (currentIndex > i) {\n              if (dragPosition.y < childTop + dragHeight) {\n                idx = i;\n                break;\n              }\n              continue;\n            }\n            idx = i;\n            break;\n          }\n        }\n        return idx;\n      }\n\n      // get new index\n    };\n    var index = cols > 1 ? location.getGridIndex() : location.getColIndex();\n    root.dispatch('MOVE_ITEM', { query: view, index: index });\n\n    // if the index of the item changed, dispatch reorder action\n    var currentIndex = dragState.getIndex();\n\n    if (currentIndex === undefined || currentIndex !== index) {\n      dragState.setIndex(index);\n\n      if (currentIndex === undefined) return;\n\n      root.dispatch('DID_REORDER_ITEMS', {\n        items: root.query('GET_ACTIVE_ITEMS'),\n        origin: oldIndex,\n        target: index\n      });\n    }\n  };\n\n  /**\n   * Setup action routes\n   */\n  var route$2 = createRoute({\n    DID_ADD_ITEM: addItemView,\n    DID_REMOVE_ITEM: removeItemView,\n    DID_DRAG_ITEM: dragItem\n  });\n\n  /**\n   * Write to view\n   * @param root\n   * @param actions\n   * @param props\n   */\n  var write$5 = function write(_ref5) {\n    var root = _ref5.root,\n      props = _ref5.props,\n      actions = _ref5.actions,\n      shouldOptimize = _ref5.shouldOptimize;\n\n    // route actions\n    route$2({ root: root, props: props, actions: actions });\n    var dragCoordinates = props.dragCoordinates;\n\n    // available space on horizontal axis\n    var horizontalSpace = root.rect.element.width;\n\n    // only draw children that have dimensions\n    var visibleChildren = root.childViews.filter(function(child) {\n      return child.rect.element.height;\n    });\n\n    // sort based on current active items\n    var children = root\n      .query('GET_ACTIVE_ITEMS')\n      .map(function(item) {\n        return visibleChildren.find(function(child) {\n          return child.id === item.id;\n        });\n      })\n      .filter(function(item) {\n        return item;\n      });\n\n    // get index\n    var dragIndex = dragCoordinates\n      ? getItemIndexByPosition(root, children, dragCoordinates)\n      : null;\n\n    // add index is used to reserve the dropped/added item index till the actual item is rendered\n    var addIndex = root.ref.addIndex || null;\n\n    // add index no longer needed till possibly next draw\n    root.ref.addIndex = null;\n\n    var dragIndexOffset = 0;\n    var removeIndexOffset = 0;\n    var addIndexOffset = 0;\n\n    if (children.length === 0) return;\n\n    var childRect = children[0].rect.element;\n    var itemVerticalMargin = childRect.marginTop + childRect.marginBottom;\n    var itemHorizontalMargin = childRect.marginLeft + childRect.marginRight;\n    var itemWidth = childRect.width + itemHorizontalMargin;\n    var itemHeight = childRect.height + itemVerticalMargin;\n    var itemsPerRow = Math.round(horizontalSpace / itemWidth);\n\n    // stack\n    if (itemsPerRow === 1) {\n      var offsetY = 0;\n      var dragOffset = 0;\n\n      children.forEach(function(child, index) {\n        if (dragIndex) {\n          var dist = index - dragIndex;\n          if (dist === -2) {\n            dragOffset = -itemVerticalMargin * 0.25;\n          } else if (dist === -1) {\n            dragOffset = -itemVerticalMargin * 0.75;\n          } else if (dist === 0) {\n            dragOffset = itemVerticalMargin * 0.75;\n          } else if (dist === 1) {\n            dragOffset = itemVerticalMargin * 0.25;\n          } else {\n            dragOffset = 0;\n          }\n        }\n\n        if (shouldOptimize) {\n          child.translateX = null;\n          child.translateY = null;\n        }\n\n        if (!child.markedForRemoval) {\n          moveItem(child, 0, offsetY + dragOffset);\n        }\n\n        var itemHeight = child.rect.element.height + itemVerticalMargin;\n\n        var visualHeight =\n          itemHeight * (child.markedForRemoval ? child.opacity : 1);\n\n        offsetY += visualHeight;\n      });\n    }\n    // grid\n    else {\n      var prevX = 0;\n      var prevY = 0;\n\n      children.forEach(function(child, index) {\n        if (index === dragIndex) {\n          dragIndexOffset = 1;\n        }\n\n        if (index === addIndex) {\n          addIndexOffset += 1;\n        }\n\n        if (child.markedForRemoval && child.opacity < 0.5) {\n          removeIndexOffset -= 1;\n        }\n\n        var visualIndex =\n          index + addIndexOffset + dragIndexOffset + removeIndexOffset;\n\n        var indexX = visualIndex % itemsPerRow;\n        var indexY = Math.floor(visualIndex / itemsPerRow);\n\n        var offsetX = indexX * itemWidth;\n        var offsetY = indexY * itemHeight;\n\n        var vectorX = Math.sign(offsetX - prevX);\n        var vectorY = Math.sign(offsetY - prevY);\n\n        prevX = offsetX;\n        prevY = offsetY;\n\n        if (child.markedForRemoval) return;\n\n        if (shouldOptimize) {\n          child.translateX = null;\n          child.translateY = null;\n        }\n\n        moveItem(child, offsetX, offsetY, vectorX, vectorY);\n      });\n    }\n  };\n\n  /**\n   * Filters actions that are meant specifically for a certain child of the list\n   * @param child\n   * @param actions\n   */\n  var filterSetItemActions = function filterSetItemActions(child, actions) {\n    return actions.filter(function(action) {\n      // if action has an id, filter out actions that don't have this child id\n      if (action.data && action.data.id) {\n        return child.id === action.data.id;\n      }\n\n      // allow all other actions\n      return true;\n    });\n  };\n\n  var list = createView({\n    create: create$8,\n    write: write$5,\n    tag: 'ul',\n    name: 'list',\n    didWriteView: function didWriteView(_ref6) {\n      var root = _ref6.root;\n      root.childViews\n        .filter(function(view) {\n          return view.markedForRemoval && view.opacity === 0 && view.resting;\n        })\n        .forEach(function(view) {\n          view._destroy();\n          root.removeChildView(view);\n        });\n    },\n    filterFrameActionsForChild: filterSetItemActions,\n    mixins: {\n      apis: ['dragCoordinates']\n    }\n  });\n\n  var create$9 = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n    root.ref.list = root.appendChildView(root.createChildView(list));\n    props.dragCoordinates = null;\n    props.overflowing = false;\n  };\n\n  var storeDragCoordinates = function storeDragCoordinates(_ref2) {\n    var root = _ref2.root,\n      props = _ref2.props,\n      action = _ref2.action;\n    if (!root.query('GET_ITEM_INSERT_LOCATION_FREEDOM')) return;\n    props.dragCoordinates = {\n      left: action.position.scopeLeft - root.ref.list.rect.element.left,\n      top:\n        action.position.scopeTop -\n        (root.rect.outer.top +\n          root.rect.element.marginTop +\n          root.rect.element.scrollTop)\n    };\n  };\n\n  var clearDragCoordinates = function clearDragCoordinates(_ref3) {\n    var props = _ref3.props;\n    props.dragCoordinates = null;\n  };\n\n  var route$3 = createRoute({\n    DID_DRAG: storeDragCoordinates,\n    DID_END_DRAG: clearDragCoordinates\n  });\n\n  var write$6 = function write(_ref4) {\n    var root = _ref4.root,\n      props = _ref4.props,\n      actions = _ref4.actions;\n\n    // route actions\n    route$3({ root: root, props: props, actions: actions });\n\n    // current drag position\n    root.ref.list.dragCoordinates = props.dragCoordinates;\n\n    // if currently overflowing but no longer received overflow\n    if (props.overflowing && !props.overflow) {\n      props.overflowing = false;\n\n      // reset overflow state\n      root.element.dataset.state = '';\n      root.height = null;\n    }\n\n    // if is not overflowing currently but does receive overflow value\n    if (props.overflow) {\n      var newHeight = Math.round(props.overflow);\n      if (newHeight !== root.height) {\n        props.overflowing = true;\n        root.element.dataset.state = 'overflow';\n        root.height = newHeight;\n      }\n    }\n  };\n\n  var listScroller = createView({\n    create: create$9,\n    write: write$6,\n    name: 'list-scroller',\n    mixins: {\n      apis: ['overflow', 'dragCoordinates'],\n      styles: ['height', 'translateY'],\n      animations: {\n        translateY: 'spring'\n      }\n    }\n  });\n\n  var attrToggle = function attrToggle(element, name, state) {\n    var enabledValue =\n      arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    if (state) {\n      attr(element, name, enabledValue);\n    } else {\n      element.removeAttribute(name);\n    }\n  };\n\n  var resetFileInput = function resetFileInput(input) {\n    // no value, no need to reset\n    if (!input || input.value === '') {\n      return;\n    }\n\n    try {\n      // for modern browsers\n      input.value = '';\n    } catch (err) {}\n\n    // for IE10\n    if (input.value) {\n      // quickly append input to temp form and reset form\n      var form = createElement$1('form');\n      var parentNode = input.parentNode;\n      var ref = input.nextSibling;\n      form.appendChild(input);\n      form.reset();\n\n      // re-inject input where it originally was\n      if (ref) {\n        parentNode.insertBefore(input, ref);\n      } else {\n        parentNode.appendChild(input);\n      }\n    }\n  };\n\n  var create$a = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n\n    // set id so can be referenced from outside labels\n    root.element.id = 'filepond--browser-' + props.id;\n\n    // set name of element (is removed when a value is set)\n    attr(root.element, 'name', root.query('GET_NAME'));\n\n    // we have to link this element to the status element\n    attr(root.element, 'aria-controls', 'filepond--assistant-' + props.id);\n\n    // set label, we use labelled by as otherwise the screenreader does not read the \"browse\" text in the label (as it has tabindex: 0)\n    attr(root.element, 'aria-labelledby', 'filepond--drop-label-' + props.id);\n\n    // set configurable props\n    setAcceptedFileTypes({\n      root: root,\n      action: { value: root.query('GET_ACCEPTED_FILE_TYPES') }\n    });\n    toggleAllowMultiple({\n      root: root,\n      action: { value: root.query('GET_ALLOW_MULTIPLE') }\n    });\n    toggleDirectoryFilter({\n      root: root,\n      action: { value: root.query('GET_ALLOW_DIRECTORIES_ONLY') }\n    });\n    toggleDisabled({ root: root });\n    toggleRequired({\n      root: root,\n      action: { value: root.query('GET_REQUIRED') }\n    });\n    setCaptureMethod({\n      root: root,\n      action: { value: root.query('GET_CAPTURE_METHOD') }\n    });\n\n    // handle changes to the input field\n    root.ref.handleChange = function(e) {\n      if (!root.element.value) {\n        return;\n      }\n\n      // extract files and move value of webkitRelativePath path to _relativePath\n      var files = Array.from(root.element.files).map(function(file) {\n        file._relativePath = file.webkitRelativePath;\n        return file;\n      });\n\n      // we add a little delay so the OS file select window can move out of the way before we add our file\n      setTimeout(function() {\n        // load files\n        props.onload(files);\n\n        // reset input, it's just for exposing a method to drop files, should not retain any state\n        resetFileInput(root.element);\n      }, 250);\n    };\n\n    root.element.addEventListener('change', root.ref.handleChange);\n  };\n\n  var setAcceptedFileTypes = function setAcceptedFileTypes(_ref2) {\n    var root = _ref2.root,\n      action = _ref2.action;\n    if (!root.query('GET_ALLOW_SYNC_ACCEPT_ATTRIBUTE')) return;\n    attrToggle(\n      root.element,\n      'accept',\n      !!action.value,\n      action.value ? action.value.join(',') : ''\n    );\n  };\n\n  var toggleAllowMultiple = function toggleAllowMultiple(_ref3) {\n    var root = _ref3.root,\n      action = _ref3.action;\n    attrToggle(root.element, 'multiple', action.value);\n  };\n\n  var toggleDirectoryFilter = function toggleDirectoryFilter(_ref4) {\n    var root = _ref4.root,\n      action = _ref4.action;\n    attrToggle(root.element, 'webkitdirectory', action.value);\n  };\n\n  var toggleDisabled = function toggleDisabled(_ref5) {\n    var root = _ref5.root;\n    var isDisabled = root.query('GET_DISABLED');\n    var doesAllowBrowse = root.query('GET_ALLOW_BROWSE');\n    var disableField = isDisabled || !doesAllowBrowse;\n    attrToggle(root.element, 'disabled', disableField);\n  };\n\n  var toggleRequired = function toggleRequired(_ref6) {\n    var root = _ref6.root,\n      action = _ref6.action;\n    // want to remove required, always possible\n    if (!action.value) {\n      attrToggle(root.element, 'required', false);\n    }\n    // if want to make required, only possible when zero items\n    else if (root.query('GET_TOTAL_ITEMS') === 0) {\n      attrToggle(root.element, 'required', true);\n    }\n  };\n\n  var setCaptureMethod = function setCaptureMethod(_ref7) {\n    var root = _ref7.root,\n      action = _ref7.action;\n    attrToggle(\n      root.element,\n      'capture',\n      !!action.value,\n      action.value === true ? '' : action.value\n    );\n  };\n\n  var updateRequiredStatus = function updateRequiredStatus(_ref8) {\n    var root = _ref8.root;\n    var element = root.element;\n    // always remove the required attribute when more than zero items\n    if (root.query('GET_TOTAL_ITEMS') > 0) {\n      attrToggle(element, 'required', false);\n      attrToggle(element, 'name', false);\n    } else {\n      // add name attribute\n      attrToggle(element, 'name', true, root.query('GET_NAME'));\n\n      // remove any validation messages\n      var shouldCheckValidity = root.query('GET_CHECK_VALIDITY');\n      if (shouldCheckValidity) {\n        element.setCustomValidity('');\n      }\n\n      // we only add required if the field has been deemed required\n      if (root.query('GET_REQUIRED')) {\n        attrToggle(element, 'required', true);\n      }\n    }\n  };\n\n  var updateFieldValidityStatus = function updateFieldValidityStatus(_ref9) {\n    var root = _ref9.root;\n    var shouldCheckValidity = root.query('GET_CHECK_VALIDITY');\n    if (!shouldCheckValidity) return;\n    root.element.setCustomValidity(root.query('GET_LABEL_INVALID_FIELD'));\n  };\n\n  var browser = createView({\n    tag: 'input',\n    name: 'browser',\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    attributes: {\n      type: 'file'\n    },\n\n    create: create$a,\n    destroy: function destroy(_ref10) {\n      var root = _ref10.root;\n      root.element.removeEventListener('change', root.ref.handleChange);\n    },\n    write: createRoute({\n      DID_LOAD_ITEM: updateRequiredStatus,\n      DID_REMOVE_ITEM: updateRequiredStatus,\n      DID_THROW_ITEM_INVALID: updateFieldValidityStatus,\n\n      DID_SET_DISABLED: toggleDisabled,\n      DID_SET_ALLOW_BROWSE: toggleDisabled,\n      DID_SET_ALLOW_DIRECTORIES_ONLY: toggleDirectoryFilter,\n      DID_SET_ALLOW_MULTIPLE: toggleAllowMultiple,\n      DID_SET_ACCEPTED_FILE_TYPES: setAcceptedFileTypes,\n      DID_SET_CAPTURE_METHOD: setCaptureMethod,\n      DID_SET_REQUIRED: toggleRequired\n    })\n  });\n\n  var Key = {\n    ENTER: 13,\n    SPACE: 32\n  };\n\n  var create$b = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n\n    // create the label and link it to the file browser\n    var label = createElement$1('label');\n    attr(label, 'for', 'filepond--browser-' + props.id);\n\n    // use for labeling file input (aria-labelledby on file input)\n    attr(label, 'id', 'filepond--drop-label-' + props.id);\n\n    // hide the label for screenreaders, the input element will read the contents of the label when it's focussed. If we don't set aria-hidden the screenreader will also navigate the contents of the label separately from the input.\n    attr(label, 'aria-hidden', 'true');\n\n    // handle keys\n    root.ref.handleKeyDown = function(e) {\n      var isActivationKey = e.keyCode === Key.ENTER || e.keyCode === Key.SPACE;\n      if (!isActivationKey) return;\n      // stops from triggering the element a second time\n      e.preventDefault();\n\n      // click link (will then in turn activate file input)\n      root.ref.label.click();\n    };\n\n    root.ref.handleClick = function(e) {\n      var isLabelClick = e.target === label || label.contains(e.target);\n\n      // don't want to click twice\n      if (isLabelClick) return;\n\n      // click link (will then in turn activate file input)\n      root.ref.label.click();\n    };\n\n    // attach events\n    label.addEventListener('keydown', root.ref.handleKeyDown);\n    root.element.addEventListener('click', root.ref.handleClick);\n\n    // update\n    updateLabelValue(label, props.caption);\n\n    // add!\n    root.appendChild(label);\n    root.ref.label = label;\n  };\n\n  var updateLabelValue = function updateLabelValue(label, value) {\n    label.innerHTML = value;\n    var clickable = label.querySelector('.filepond--label-action');\n    if (clickable) {\n      attr(clickable, 'tabindex', '0');\n    }\n    return value;\n  };\n\n  var dropLabel = createView({\n    name: 'drop-label',\n    ignoreRect: true,\n    create: create$b,\n    destroy: function destroy(_ref2) {\n      var root = _ref2.root;\n      root.ref.label.addEventListener('keydown', root.ref.handleKeyDown);\n      root.element.removeEventListener('click', root.ref.handleClick);\n    },\n    write: createRoute({\n      DID_SET_LABEL_IDLE: function DID_SET_LABEL_IDLE(_ref3) {\n        var root = _ref3.root,\n          action = _ref3.action;\n        updateLabelValue(root.ref.label, action.value);\n      }\n    }),\n\n    mixins: {\n      styles: ['opacity', 'translateX', 'translateY'],\n      animations: {\n        opacity: { type: 'tween', duration: 150 },\n        translateX: 'spring',\n        translateY: 'spring'\n      }\n    }\n  });\n\n  var blob = createView({\n    name: 'drip-blob',\n    ignoreRect: true,\n    mixins: {\n      styles: ['translateX', 'translateY', 'scaleX', 'scaleY', 'opacity'],\n      animations: {\n        scaleX: 'spring',\n        scaleY: 'spring',\n        translateX: 'spring',\n        translateY: 'spring',\n        opacity: { type: 'tween', duration: 250 }\n      }\n    }\n  });\n\n  var addBlob = function addBlob(_ref) {\n    var root = _ref.root;\n    var centerX = root.rect.element.width * 0.5;\n    var centerY = root.rect.element.height * 0.5;\n\n    root.ref.blob = root.appendChildView(\n      root.createChildView(blob, {\n        opacity: 0,\n        scaleX: 2.5,\n        scaleY: 2.5,\n        translateX: centerX,\n        translateY: centerY\n      })\n    );\n  };\n\n  var moveBlob = function moveBlob(_ref2) {\n    var root = _ref2.root,\n      action = _ref2.action;\n    if (!root.ref.blob) {\n      addBlob({ root: root });\n      return;\n    }\n\n    root.ref.blob.translateX = action.position.scopeLeft;\n    root.ref.blob.translateY = action.position.scopeTop;\n    root.ref.blob.scaleX = 1;\n    root.ref.blob.scaleY = 1;\n    root.ref.blob.opacity = 1;\n  };\n\n  var hideBlob = function hideBlob(_ref3) {\n    var root = _ref3.root;\n    if (!root.ref.blob) {\n      return;\n    }\n    root.ref.blob.opacity = 0;\n  };\n\n  var explodeBlob = function explodeBlob(_ref4) {\n    var root = _ref4.root;\n    if (!root.ref.blob) {\n      return;\n    }\n    root.ref.blob.scaleX = 2.5;\n    root.ref.blob.scaleY = 2.5;\n    root.ref.blob.opacity = 0;\n  };\n\n  var write$7 = function write(_ref5) {\n    var root = _ref5.root,\n      props = _ref5.props,\n      actions = _ref5.actions;\n    route$4({ root: root, props: props, actions: actions });\n    var blob = root.ref.blob;\n\n    if (actions.length === 0 && blob && blob.opacity === 0) {\n      root.removeChildView(blob);\n      root.ref.blob = null;\n    }\n  };\n\n  var route$4 = createRoute({\n    DID_DRAG: moveBlob,\n    DID_DROP: explodeBlob,\n    DID_END_DRAG: hideBlob\n  });\n\n  var drip = createView({\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    name: 'drip',\n    write: write$7\n  });\n\n  var create$c = function create(_ref) {\n    var root = _ref.root;\n    return (root.ref.fields = {});\n  };\n\n  var getField = function getField(root, id) {\n    return root.ref.fields[id];\n  };\n\n  var syncFieldPositionsWithItems = function syncFieldPositionsWithItems(root) {\n    root.query('GET_ACTIVE_ITEMS').forEach(function(item) {\n      if (!root.ref.fields[item.id]) return;\n      root.element.appendChild(root.ref.fields[item.id]);\n    });\n  };\n\n  var didReorderItems = function didReorderItems(_ref2) {\n    var root = _ref2.root;\n    return syncFieldPositionsWithItems(root);\n  };\n\n  var didAddItem = function didAddItem(_ref3) {\n    var root = _ref3.root,\n      action = _ref3.action;\n    var dataContainer = createElement$1('input');\n    dataContainer.type = 'hidden';\n    dataContainer.name = root.query('GET_NAME');\n    dataContainer.disabled = root.query('GET_DISABLED');\n    root.ref.fields[action.id] = dataContainer;\n    syncFieldPositionsWithItems(root);\n  };\n\n  var didLoadItem$1 = function didLoadItem(_ref4) {\n    var root = _ref4.root,\n      action = _ref4.action;\n    var field = getField(root, action.id);\n    if (!field || action.serverFileReference === null) return;\n    field.value = action.serverFileReference;\n  };\n\n  var didSetDisabled = function didSetDisabled(_ref5) {\n    var root = _ref5.root;\n    root.element.disabled = root.query('GET_DISABLED');\n  };\n\n  var didRemoveItem = function didRemoveItem(_ref6) {\n    var root = _ref6.root,\n      action = _ref6.action;\n    var field = getField(root, action.id);\n    if (!field) return;\n    field.parentNode.removeChild(field);\n    delete root.ref.fields[action.id];\n  };\n\n  var didDefineValue = function didDefineValue(_ref7) {\n    var root = _ref7.root,\n      action = _ref7.action;\n    var field = getField(root, action.id);\n    if (!field) return;\n    if (action.value === null) {\n      field.removeAttribute('value');\n    } else {\n      field.value = action.value;\n    }\n    syncFieldPositionsWithItems(root);\n  };\n\n  var write$8 = createRoute({\n    DID_SET_DISABLED: didSetDisabled,\n    DID_ADD_ITEM: didAddItem,\n    DID_LOAD_ITEM: didLoadItem$1,\n    DID_REMOVE_ITEM: didRemoveItem,\n    DID_DEFINE_VALUE: didDefineValue,\n    DID_REORDER_ITEMS: didReorderItems,\n    DID_SORT_ITEMS: didReorderItems\n  });\n\n  var data = createView({\n    tag: 'fieldset',\n    name: 'data',\n    create: create$c,\n    write: write$8,\n    ignoreRect: true\n  });\n\n  var getRootNode = function getRootNode(element) {\n    return 'getRootNode' in element ? element.getRootNode() : document;\n  };\n\n  var images = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg', 'tiff'];\n  var text$1 = ['css', 'csv', 'html', 'txt'];\n  var map = {\n    zip: 'zip|compressed',\n    epub: 'application/epub+zip'\n  };\n\n  var guesstimateMimeType = function guesstimateMimeType() {\n    var extension =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    extension = extension.toLowerCase();\n    if (images.includes(extension)) {\n      return (\n        'image/' +\n        (extension === 'jpg'\n          ? 'jpeg'\n          : extension === 'svg'\n          ? 'svg+xml'\n          : extension)\n      );\n    }\n    if (text$1.includes(extension)) {\n      return 'text/' + extension;\n    }\n\n    return map[extension] || '';\n  };\n\n  var requestDataTransferItems = function requestDataTransferItems(\n    dataTransfer\n  ) {\n    return new Promise(function(resolve, reject) {\n      // try to get links from transfer, if found we'll exit immidiately (unless a file is in the dataTransfer as well, this is because Firefox could represent the file as a URL and a file object at the same time)\n      var links = getLinks(dataTransfer);\n      if (links.length && !hasFiles(dataTransfer)) {\n        return resolve(links);\n      }\n      // try to get files from the transfer\n      getFiles(dataTransfer).then(resolve);\n    });\n  };\n\n  /**\n   * Test if datatransfer has files\n   */\n  var hasFiles = function hasFiles(dataTransfer) {\n    if (dataTransfer.files) return dataTransfer.files.length > 0;\n    return false;\n  };\n\n  /**\n   * Extracts files from a DataTransfer object\n   */\n  var getFiles = function getFiles(dataTransfer) {\n    return new Promise(function(resolve, reject) {\n      // get the transfer items as promises\n      var promisedFiles = (dataTransfer.items\n        ? Array.from(dataTransfer.items)\n        : []\n      )\n        // only keep file system items (files and directories)\n        .filter(function(item) {\n          return isFileSystemItem(item);\n        })\n\n        // map each item to promise\n        .map(function(item) {\n          return getFilesFromItem(item);\n        });\n\n      // if is empty, see if we can extract some info from the files property as a fallback\n      if (!promisedFiles.length) {\n        // TODO: test for directories (should not be allowed)\n        // Use FileReader, problem is that the files property gets lost in the process\n        resolve(dataTransfer.files ? Array.from(dataTransfer.files) : []);\n        return;\n      }\n\n      // done!\n      Promise.all(promisedFiles)\n        .then(function(returnedFileGroups) {\n          // flatten groups\n          var files = [];\n          returnedFileGroups.forEach(function(group) {\n            files.push.apply(files, group);\n          });\n\n          // done (filter out empty files)!\n          resolve(\n            files\n              .filter(function(file) {\n                return file;\n              })\n              .map(function(file) {\n                if (!file._relativePath)\n                  file._relativePath = file.webkitRelativePath;\n                return file;\n              })\n          );\n        })\n        .catch(console.error);\n    });\n  };\n\n  var isFileSystemItem = function isFileSystemItem(item) {\n    if (isEntry(item)) {\n      var entry = getAsEntry(item);\n      if (entry) {\n        return entry.isFile || entry.isDirectory;\n      }\n    }\n    return item.kind === 'file';\n  };\n\n  var getFilesFromItem = function getFilesFromItem(item) {\n    return new Promise(function(resolve, reject) {\n      if (isDirectoryEntry(item)) {\n        getFilesInDirectory(getAsEntry(item))\n          .then(resolve)\n          .catch(reject);\n        return;\n      }\n\n      resolve([item.getAsFile()]);\n    });\n  };\n\n  var getFilesInDirectory = function getFilesInDirectory(entry) {\n    return new Promise(function(resolve, reject) {\n      var files = [];\n\n      // the total entries to read\n      var dirCounter = 0;\n      var fileCounter = 0;\n\n      var resolveIfDone = function resolveIfDone() {\n        if (fileCounter === 0 && dirCounter === 0) {\n          resolve(files);\n        }\n      };\n\n      // the recursive function\n      var readEntries = function readEntries(dirEntry) {\n        dirCounter++;\n\n        var directoryReader = dirEntry.createReader();\n\n        // directories are returned in batches, we need to process all batches before we're done\n        var readBatch = function readBatch() {\n          directoryReader.readEntries(function(entries) {\n            if (entries.length === 0) {\n              dirCounter--;\n              resolveIfDone();\n              return;\n            }\n\n            entries.forEach(function(entry) {\n              // recursively read more directories\n              if (entry.isDirectory) {\n                readEntries(entry);\n              } else {\n                // read as file\n                fileCounter++;\n\n                entry.file(function(file) {\n                  var correctedFile = correctMissingFileType(file);\n                  if (entry.fullPath)\n                    correctedFile._relativePath = entry.fullPath;\n                  files.push(correctedFile);\n                  fileCounter--;\n                  resolveIfDone();\n                });\n              }\n            });\n\n            // try to get next batch of files\n            readBatch();\n          }, reject);\n        };\n\n        // read first batch of files\n        readBatch();\n      };\n\n      // go!\n      readEntries(entry);\n    });\n  };\n\n  var correctMissingFileType = function correctMissingFileType(file) {\n    if (file.type.length) return file;\n    var date = file.lastModifiedDate;\n    var name = file.name;\n    file = file.slice(\n      0,\n      file.size,\n      guesstimateMimeType(getExtensionFromFilename(file.name))\n    );\n    file.name = name;\n    file.lastModifiedDate = date;\n    return file;\n  };\n\n  var isDirectoryEntry = function isDirectoryEntry(item) {\n    return isEntry(item) && (getAsEntry(item) || {}).isDirectory;\n  };\n\n  var isEntry = function isEntry(item) {\n    return 'webkitGetAsEntry' in item;\n  };\n\n  var getAsEntry = function getAsEntry(item) {\n    return item.webkitGetAsEntry();\n  };\n\n  /**\n   * Extracts links from a DataTransfer object\n   */\n  var getLinks = function getLinks(dataTransfer) {\n    var links = [];\n    try {\n      // look in meta data property\n      links = getLinksFromTransferMetaData(dataTransfer);\n      if (links.length) {\n        return links;\n      }\n      links = getLinksFromTransferURLData(dataTransfer);\n    } catch (e) {\n      // nope nope nope (probably IE trouble)\n    }\n    return links;\n  };\n\n  var getLinksFromTransferURLData = function getLinksFromTransferURLData(\n    dataTransfer\n  ) {\n    var data = dataTransfer.getData('url');\n    if (typeof data === 'string' && data.length) {\n      return [data];\n    }\n    return [];\n  };\n\n  var getLinksFromTransferMetaData = function getLinksFromTransferMetaData(\n    dataTransfer\n  ) {\n    var data = dataTransfer.getData('text/html');\n    if (typeof data === 'string' && data.length) {\n      var matches = data.match(/src\\s*=\\s*\"(.+?)\"/);\n      if (matches) {\n        return [matches[1]];\n      }\n    }\n    return [];\n  };\n\n  var dragNDropObservers = [];\n\n  var eventPosition = function eventPosition(e) {\n    return {\n      pageLeft: e.pageX,\n      pageTop: e.pageY,\n      scopeLeft: e.offsetX || e.layerX,\n      scopeTop: e.offsetY || e.layerY\n    };\n  };\n\n  var createDragNDropClient = function createDragNDropClient(\n    element,\n    scopeToObserve,\n    filterElement\n  ) {\n    var observer = getDragNDropObserver(scopeToObserve);\n\n    var client = {\n      element: element,\n      filterElement: filterElement,\n      state: null,\n      ondrop: function ondrop() {},\n      onenter: function onenter() {},\n      ondrag: function ondrag() {},\n      onexit: function onexit() {},\n      onload: function onload() {},\n      allowdrop: function allowdrop() {}\n    };\n\n    client.destroy = observer.addListener(client);\n\n    return client;\n  };\n\n  var getDragNDropObserver = function getDragNDropObserver(element) {\n    // see if already exists, if so, return\n    var observer = dragNDropObservers.find(function(item) {\n      return item.element === element;\n    });\n    if (observer) {\n      return observer;\n    }\n\n    // create new observer, does not yet exist for this element\n    var newObserver = createDragNDropObserver(element);\n    dragNDropObservers.push(newObserver);\n    return newObserver;\n  };\n\n  var createDragNDropObserver = function createDragNDropObserver(element) {\n    var clients = [];\n\n    var routes = {\n      dragenter: dragenter,\n      dragover: dragover,\n      dragleave: dragleave,\n      drop: drop\n    };\n\n    var handlers = {};\n\n    forin(routes, function(event, createHandler) {\n      handlers[event] = createHandler(element, clients);\n      element.addEventListener(event, handlers[event], false);\n    });\n\n    var observer = {\n      element: element,\n      addListener: function addListener(client) {\n        // add as client\n        clients.push(client);\n\n        // return removeListener function\n        return function() {\n          // remove client\n          clients.splice(clients.indexOf(client), 1);\n\n          // if no more clients, clean up observer\n          if (clients.length === 0) {\n            dragNDropObservers.splice(dragNDropObservers.indexOf(observer), 1);\n\n            forin(routes, function(event) {\n              element.removeEventListener(event, handlers[event], false);\n            });\n          }\n        };\n      }\n    };\n\n    return observer;\n  };\n\n  var elementFromPoint = function elementFromPoint(root, point) {\n    if (!('elementFromPoint' in root)) {\n      root = document;\n    }\n    return root.elementFromPoint(point.x, point.y);\n  };\n\n  var isEventTarget = function isEventTarget(e, target) {\n    // get root\n    var root = getRootNode(target);\n\n    // get element at position\n    // if root is not actual shadow DOM and does not have elementFromPoint method, use the one on document\n    var elementAtPosition = elementFromPoint(root, {\n      x: e.pageX - window.pageXOffset,\n      y: e.pageY - window.pageYOffset\n    });\n\n    // test if target is the element or if one of its children is\n    return elementAtPosition === target || target.contains(elementAtPosition);\n  };\n\n  var initialTarget = null;\n\n  var setDropEffect = function setDropEffect(dataTransfer, effect) {\n    // is in try catch as IE11 will throw error if not\n    try {\n      dataTransfer.dropEffect = effect;\n    } catch (e) {}\n  };\n\n  var dragenter = function dragenter(root, clients) {\n    return function(e) {\n      e.preventDefault();\n\n      initialTarget = e.target;\n\n      clients.forEach(function(client) {\n        var element = client.element,\n          onenter = client.onenter;\n\n        if (isEventTarget(e, element)) {\n          client.state = 'enter';\n\n          // fire enter event\n          onenter(eventPosition(e));\n        }\n      });\n    };\n  };\n\n  var dragover = function dragover(root, clients) {\n    return function(e) {\n      e.preventDefault();\n\n      var dataTransfer = e.dataTransfer;\n\n      requestDataTransferItems(dataTransfer).then(function(items) {\n        var overDropTarget = false;\n\n        clients.some(function(client) {\n          var filterElement = client.filterElement,\n            element = client.element,\n            onenter = client.onenter,\n            onexit = client.onexit,\n            ondrag = client.ondrag,\n            allowdrop = client.allowdrop;\n\n          // by default we can drop\n          setDropEffect(dataTransfer, 'copy');\n\n          // allow transfer of these items\n          var allowsTransfer = allowdrop(items);\n\n          // only used when can be dropped on page\n          if (!allowsTransfer) {\n            setDropEffect(dataTransfer, 'none');\n            return;\n          }\n\n          // targetting this client\n          if (isEventTarget(e, element)) {\n            overDropTarget = true;\n\n            // had no previous state, means we are entering this client\n            if (client.state === null) {\n              client.state = 'enter';\n              onenter(eventPosition(e));\n              return;\n            }\n\n            // now over element (no matter if it allows the drop or not)\n            client.state = 'over';\n\n            // needs to allow transfer\n            if (filterElement && !allowsTransfer) {\n              setDropEffect(dataTransfer, 'none');\n              return;\n            }\n\n            // dragging\n            ondrag(eventPosition(e));\n          } else {\n            // should be over an element to drop\n            if (filterElement && !overDropTarget) {\n              setDropEffect(dataTransfer, 'none');\n            }\n\n            // might have just left this client?\n            if (client.state) {\n              client.state = null;\n              onexit(eventPosition(e));\n            }\n          }\n        });\n      });\n    };\n  };\n\n  var drop = function drop(root, clients) {\n    return function(e) {\n      e.preventDefault();\n\n      var dataTransfer = e.dataTransfer;\n\n      requestDataTransferItems(dataTransfer).then(function(items) {\n        clients.forEach(function(client) {\n          var filterElement = client.filterElement,\n            element = client.element,\n            ondrop = client.ondrop,\n            onexit = client.onexit,\n            allowdrop = client.allowdrop;\n\n          client.state = null;\n\n          // if we're filtering on element we need to be over the element to drop\n          if (filterElement && !isEventTarget(e, element)) return;\n\n          // no transfer for this client\n          if (!allowdrop(items)) return onexit(eventPosition(e));\n\n          // we can drop these items on this client\n          ondrop(eventPosition(e), items);\n        });\n      });\n    };\n  };\n\n  var dragleave = function dragleave(root, clients) {\n    return function(e) {\n      if (initialTarget !== e.target) {\n        return;\n      }\n\n      clients.forEach(function(client) {\n        var onexit = client.onexit;\n\n        client.state = null;\n\n        onexit(eventPosition(e));\n      });\n    };\n  };\n\n  var createHopper = function createHopper(scope, validateItems, options) {\n    // is now hopper scope\n    scope.classList.add('filepond--hopper');\n\n    // shortcuts\n    var catchesDropsOnPage = options.catchesDropsOnPage,\n      requiresDropOnElement = options.requiresDropOnElement,\n      _options$filterItems = options.filterItems,\n      filterItems =\n        _options$filterItems === void 0\n          ? function(items) {\n              return items;\n            }\n          : _options$filterItems;\n\n    // create a dnd client\n    var client = createDragNDropClient(\n      scope,\n      catchesDropsOnPage ? document.documentElement : scope,\n      requiresDropOnElement\n    );\n\n    // current client state\n    var lastState = '';\n    var currentState = '';\n\n    // determines if a file may be dropped\n    client.allowdrop = function(items) {\n      // TODO: if we can, throw error to indicate the items cannot by dropped\n\n      return validateItems(filterItems(items));\n    };\n\n    client.ondrop = function(position, items) {\n      var filteredItems = filterItems(items);\n\n      if (!validateItems(filteredItems)) {\n        api.ondragend(position);\n        return;\n      }\n\n      currentState = 'drag-drop';\n\n      api.onload(filteredItems, position);\n    };\n\n    client.ondrag = function(position) {\n      api.ondrag(position);\n    };\n\n    client.onenter = function(position) {\n      currentState = 'drag-over';\n\n      api.ondragstart(position);\n    };\n\n    client.onexit = function(position) {\n      currentState = 'drag-exit';\n\n      api.ondragend(position);\n    };\n\n    var api = {\n      updateHopperState: function updateHopperState() {\n        if (lastState !== currentState) {\n          scope.dataset.hopperState = currentState;\n          lastState = currentState;\n        }\n      },\n      onload: function onload() {},\n      ondragstart: function ondragstart() {},\n      ondrag: function ondrag() {},\n      ondragend: function ondragend() {},\n      destroy: function destroy() {\n        // destroy client\n        client.destroy();\n      }\n    };\n\n    return api;\n  };\n\n  var listening = false;\n  var listeners$1 = [];\n\n  var handlePaste = function handlePaste(e) {\n    // if is pasting in input or textarea and the target is outside of a filepond scope, ignore\n    var activeEl = document.activeElement;\n    if (activeEl && /textarea|input/i.test(activeEl.nodeName)) {\n      // test textarea or input is contained in filepond root\n      var inScope = false;\n      var element = activeEl;\n      while (element !== document.body) {\n        if (element.classList.contains('filepond--root')) {\n          inScope = true;\n          break;\n        }\n        element = element.parentNode;\n      }\n\n      if (!inScope) return;\n    }\n\n    requestDataTransferItems(e.clipboardData).then(function(files) {\n      // no files received\n      if (!files.length) {\n        return;\n      }\n\n      // notify listeners of received files\n      listeners$1.forEach(function(listener) {\n        return listener(files);\n      });\n    });\n  };\n\n  var listen = function listen(cb) {\n    // can't add twice\n    if (listeners$1.includes(cb)) {\n      return;\n    }\n\n    // add initial listener\n    listeners$1.push(cb);\n\n    // setup paste listener for entire page\n    if (listening) {\n      return;\n    }\n\n    listening = true;\n    document.addEventListener('paste', handlePaste);\n  };\n\n  var unlisten = function unlisten(listener) {\n    arrayRemove(listeners$1, listeners$1.indexOf(listener));\n\n    // clean up\n    if (listeners$1.length === 0) {\n      document.removeEventListener('paste', handlePaste);\n      listening = false;\n    }\n  };\n\n  var createPaster = function createPaster() {\n    var cb = function cb(files) {\n      api.onload(files);\n    };\n\n    var api = {\n      destroy: function destroy() {\n        unlisten(cb);\n      },\n      onload: function onload() {}\n    };\n\n    listen(cb);\n\n    return api;\n  };\n\n  /**\n   * Creates the file view\n   */\n  var create$d = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n    root.element.id = 'filepond--assistant-' + props.id;\n    attr(root.element, 'role', 'status');\n    attr(root.element, 'aria-live', 'polite');\n    attr(root.element, 'aria-relevant', 'additions');\n  };\n\n  var addFilesNotificationTimeout = null;\n  var notificationClearTimeout = null;\n\n  var filenames = [];\n\n  var assist = function assist(root, message) {\n    root.element.textContent = message;\n  };\n\n  var clear$1 = function clear(root) {\n    root.element.textContent = '';\n  };\n\n  var listModified = function listModified(root, filename, label) {\n    var total = root.query('GET_TOTAL_ITEMS');\n    assist(\n      root,\n      label +\n        ' ' +\n        filename +\n        ', ' +\n        total +\n        ' ' +\n        (total === 1\n          ? root.query('GET_LABEL_FILE_COUNT_SINGULAR')\n          : root.query('GET_LABEL_FILE_COUNT_PLURAL'))\n    );\n\n    // clear group after set amount of time so the status is not read twice\n    clearTimeout(notificationClearTimeout);\n    notificationClearTimeout = setTimeout(function() {\n      clear$1(root);\n    }, 1500);\n  };\n\n  var isUsingFilePond = function isUsingFilePond(root) {\n    return root.element.parentNode.contains(document.activeElement);\n  };\n\n  var itemAdded = function itemAdded(_ref2) {\n    var root = _ref2.root,\n      action = _ref2.action;\n    if (!isUsingFilePond(root)) {\n      return;\n    }\n\n    root.element.textContent = '';\n    var item = root.query('GET_ITEM', action.id);\n    filenames.push(item.filename);\n\n    clearTimeout(addFilesNotificationTimeout);\n    addFilesNotificationTimeout = setTimeout(function() {\n      listModified(\n        root,\n        filenames.join(', '),\n        root.query('GET_LABEL_FILE_ADDED')\n      );\n\n      filenames.length = 0;\n    }, 750);\n  };\n\n  var itemRemoved = function itemRemoved(_ref3) {\n    var root = _ref3.root,\n      action = _ref3.action;\n    if (!isUsingFilePond(root)) {\n      return;\n    }\n\n    var item = action.item;\n    listModified(root, item.filename, root.query('GET_LABEL_FILE_REMOVED'));\n  };\n\n  var itemProcessed = function itemProcessed(_ref4) {\n    var root = _ref4.root,\n      action = _ref4.action;\n    // will also notify the user when FilePond is not being used, as the user might be occupied with other activities while uploading a file\n\n    var item = root.query('GET_ITEM', action.id);\n    var filename = item.filename;\n    var label = root.query('GET_LABEL_FILE_PROCESSING_COMPLETE');\n\n    assist(root, filename + ' ' + label);\n  };\n\n  var itemProcessedUndo = function itemProcessedUndo(_ref5) {\n    var root = _ref5.root,\n      action = _ref5.action;\n    var item = root.query('GET_ITEM', action.id);\n    var filename = item.filename;\n    var label = root.query('GET_LABEL_FILE_PROCESSING_ABORTED');\n\n    assist(root, filename + ' ' + label);\n  };\n\n  var itemError = function itemError(_ref6) {\n    var root = _ref6.root,\n      action = _ref6.action;\n    var item = root.query('GET_ITEM', action.id);\n    var filename = item.filename;\n\n    // will also notify the user when FilePond is not being used, as the user might be occupied with other activities while uploading a file\n\n    assist(root, action.status.main + ' ' + filename + ' ' + action.status.sub);\n  };\n\n  var assistant = createView({\n    create: create$d,\n    ignoreRect: true,\n    ignoreRectUpdate: true,\n    write: createRoute({\n      DID_LOAD_ITEM: itemAdded,\n      DID_REMOVE_ITEM: itemRemoved,\n      DID_COMPLETE_ITEM_PROCESSING: itemProcessed,\n\n      DID_ABORT_ITEM_PROCESSING: itemProcessedUndo,\n      DID_REVERT_ITEM_PROCESSING: itemProcessedUndo,\n\n      DID_THROW_ITEM_REMOVE_ERROR: itemError,\n      DID_THROW_ITEM_LOAD_ERROR: itemError,\n      DID_THROW_ITEM_INVALID: itemError,\n      DID_THROW_ITEM_PROCESSING_ERROR: itemError\n    }),\n\n    tag: 'span',\n    name: 'assistant'\n  });\n\n  var toCamels = function toCamels(string) {\n    var separator =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n    return string.replace(new RegExp(separator + '.', 'g'), function(sub) {\n      return sub.charAt(1).toUpperCase();\n    });\n  };\n\n  var debounce = function debounce(func) {\n    var interval =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n    var immidiateOnly =\n      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var last = Date.now();\n    var timeout = null;\n\n    return function() {\n      for (\n        var _len = arguments.length, args = new Array(_len), _key = 0;\n        _key < _len;\n        _key++\n      ) {\n        args[_key] = arguments[_key];\n      }\n      clearTimeout(timeout);\n\n      var dist = Date.now() - last;\n\n      var fn = function fn() {\n        last = Date.now();\n        func.apply(void 0, args);\n      };\n\n      if (dist < interval) {\n        // we need to delay by the difference between interval and dist\n        // for example: if distance is 10 ms and interval is 16 ms,\n        // we need to wait an additional 6ms before calling the function)\n        if (!immidiateOnly) {\n          timeout = setTimeout(fn, interval - dist);\n        }\n      } else {\n        // go!\n        fn();\n      }\n    };\n  };\n\n  var MAX_FILES_LIMIT = 1000000;\n\n  var prevent = function prevent(e) {\n    return e.preventDefault();\n  };\n\n  var create$e = function create(_ref) {\n    var root = _ref.root,\n      props = _ref.props;\n\n    // Add id\n    var id = root.query('GET_ID');\n    if (id) {\n      root.element.id = id;\n    }\n\n    // Add className\n    var className = root.query('GET_CLASS_NAME');\n    if (className) {\n      className\n        .split(' ')\n        .filter(function(name) {\n          return name.length;\n        })\n        .forEach(function(name) {\n          root.element.classList.add(name);\n        });\n    }\n\n    // Field label\n    root.ref.label = root.appendChildView(\n      root.createChildView(\n        dropLabel,\n        Object.assign({}, props, {\n          translateY: null,\n          caption: root.query('GET_LABEL_IDLE')\n        })\n      )\n    );\n\n    // List of items\n    root.ref.list = root.appendChildView(\n      root.createChildView(listScroller, { translateY: null })\n    );\n\n    // Background panel\n    root.ref.panel = root.appendChildView(\n      root.createChildView(panel, { name: 'panel-root' })\n    );\n\n    // Assistant notifies assistive tech when content changes\n    root.ref.assistant = root.appendChildView(\n      root.createChildView(assistant, Object.assign({}, props))\n    );\n\n    // Data\n    root.ref.data = root.appendChildView(\n      root.createChildView(data, Object.assign({}, props))\n    );\n\n    // Measure (tests if fixed height was set)\n    // DOCTYPE needs to be set for this to work\n    root.ref.measure = createElement$1('div');\n    root.ref.measure.style.height = '100%';\n    root.element.appendChild(root.ref.measure);\n\n    // information on the root height or fixed height status\n    root.ref.bounds = null;\n\n    // apply initial style properties\n    root\n      .query('GET_STYLES')\n      .filter(function(style) {\n        return !isEmpty(style.value);\n      })\n      .map(function(_ref2) {\n        var name = _ref2.name,\n          value = _ref2.value;\n        root.element.dataset[name] = value;\n      });\n\n    // determine if width changed\n    root.ref.widthPrevious = null;\n    root.ref.widthUpdated = debounce(function() {\n      root.ref.updateHistory = [];\n      root.dispatch('DID_RESIZE_ROOT');\n    }, 250);\n\n    // history of updates\n    root.ref.previousAspectRatio = null;\n    root.ref.updateHistory = [];\n\n    // prevent scrolling and zooming on iOS (only if supports pointer events, for then we can enable reorder)\n    var canHover = window.matchMedia('(pointer: fine) and (hover: hover)')\n      .matches;\n    var hasPointerEvents = 'PointerEvent' in window;\n    if (root.query('GET_ALLOW_REORDER') && hasPointerEvents && !canHover) {\n      root.element.addEventListener('touchmove', prevent, { passive: false });\n      root.element.addEventListener('gesturestart', prevent);\n    }\n  };\n\n  var write$9 = function write(_ref3) {\n    var root = _ref3.root,\n      props = _ref3.props,\n      actions = _ref3.actions;\n\n    // route actions\n    route$5({ root: root, props: props, actions: actions });\n\n    // apply style properties\n    actions\n      .filter(function(action) {\n        return /^DID_SET_STYLE_/.test(action.type);\n      })\n      .filter(function(action) {\n        return !isEmpty(action.data.value);\n      })\n      .map(function(_ref4) {\n        var type = _ref4.type,\n          data = _ref4.data;\n        var name = toCamels(type.substr(8).toLowerCase(), '_');\n        root.element.dataset[name] = data.value;\n        root.invalidateLayout();\n      });\n\n    if (root.rect.element.hidden) return;\n\n    if (root.rect.element.width !== root.ref.widthPrevious) {\n      root.ref.widthPrevious = root.rect.element.width;\n      root.ref.widthUpdated();\n    }\n\n    // get box bounds, we do this only once\n    var bounds = root.ref.bounds;\n    if (!bounds) {\n      bounds = root.ref.bounds = calculateRootBoundingBoxHeight(root);\n\n      // destroy measure element\n      root.element.removeChild(root.ref.measure);\n      root.ref.measure = null;\n    }\n\n    // get quick references to various high level parts of the upload tool\n    var _root$ref = root.ref,\n      hopper = _root$ref.hopper,\n      label = _root$ref.label,\n      list = _root$ref.list,\n      panel = _root$ref.panel;\n\n    // sets correct state to hopper scope\n    if (hopper) {\n      hopper.updateHopperState();\n    }\n\n    // bool to indicate if we're full or not\n    var aspectRatio = root.query('GET_PANEL_ASPECT_RATIO');\n    var isMultiItem = root.query('GET_ALLOW_MULTIPLE');\n    var totalItems = root.query('GET_TOTAL_ITEMS');\n    var maxItems = isMultiItem\n      ? root.query('GET_MAX_FILES') || MAX_FILES_LIMIT\n      : 1;\n    var atMaxCapacity = totalItems === maxItems;\n\n    // action used to add item\n    var addAction = actions.find(function(action) {\n      return action.type === 'DID_ADD_ITEM';\n    });\n\n    // if reached max capacity and we've just reached it\n    if (atMaxCapacity && addAction) {\n      // get interaction type\n      var interactionMethod = addAction.data.interactionMethod;\n\n      // hide label\n      label.opacity = 0;\n\n      if (isMultiItem) {\n        label.translateY = -40;\n      } else {\n        if (interactionMethod === InteractionMethod.API) {\n          label.translateX = 40;\n        } else if (interactionMethod === InteractionMethod.BROWSE) {\n          label.translateY = 40;\n        } else {\n          label.translateY = 30;\n        }\n      }\n    } else if (!atMaxCapacity) {\n      label.opacity = 1;\n      label.translateX = 0;\n      label.translateY = 0;\n    }\n\n    var listItemMargin = calculateListItemMargin(root);\n\n    var listHeight = calculateListHeight(root);\n\n    var labelHeight = label.rect.element.height;\n    var currentLabelHeight = !isMultiItem || atMaxCapacity ? 0 : labelHeight;\n\n    var listMarginTop = atMaxCapacity ? list.rect.element.marginTop : 0;\n    var listMarginBottom =\n      totalItems === 0 ? 0 : list.rect.element.marginBottom;\n\n    var visualHeight =\n      currentLabelHeight + listMarginTop + listHeight.visual + listMarginBottom;\n    var boundsHeight =\n      currentLabelHeight + listMarginTop + listHeight.bounds + listMarginBottom;\n\n    // link list to label bottom position\n    list.translateY =\n      Math.max(0, currentLabelHeight - list.rect.element.marginTop) -\n      listItemMargin.top;\n\n    if (aspectRatio) {\n      // fixed aspect ratio\n\n      // calculate height based on width\n      var width = root.rect.element.width;\n      var height = width * aspectRatio;\n\n      // clear history if aspect ratio has changed\n      if (aspectRatio !== root.ref.previousAspectRatio) {\n        root.ref.previousAspectRatio = aspectRatio;\n        root.ref.updateHistory = [];\n      }\n\n      // remember this width\n      var history = root.ref.updateHistory;\n      history.push(width);\n\n      var MAX_BOUNCES = 2;\n      if (history.length > MAX_BOUNCES * 2) {\n        var l = history.length;\n        var bottom = l - 10;\n        var bounces = 0;\n        for (var i = l; i >= bottom; i--) {\n          if (history[i] === history[i - 2]) {\n            bounces++;\n          }\n\n          if (bounces >= MAX_BOUNCES) {\n            // dont adjust height\n            return;\n          }\n        }\n      }\n\n      // fix height of panel so it adheres to aspect ratio\n      panel.scalable = false;\n      panel.height = height;\n\n      // available height for list\n      var listAvailableHeight =\n        // the height of the panel minus the label height\n        height -\n        currentLabelHeight -\n        // the room we leave open between the end of the list and the panel bottom\n        (listMarginBottom - listItemMargin.bottom) -\n        // if we're full we need to leave some room between the top of the panel and the list\n        (atMaxCapacity ? listMarginTop : 0);\n\n      if (listHeight.visual > listAvailableHeight) {\n        list.overflow = listAvailableHeight;\n      } else {\n        list.overflow = null;\n      }\n\n      // set container bounds (so pushes siblings downwards)\n      root.height = height;\n    } else if (bounds.fixedHeight) {\n      // fixed height\n\n      // fix height of panel\n      panel.scalable = false;\n\n      // available height for list\n      var _listAvailableHeight =\n        // the height of the panel minus the label height\n        bounds.fixedHeight -\n        currentLabelHeight -\n        // the room we leave open between the end of the list and the panel bottom\n        (listMarginBottom - listItemMargin.bottom) -\n        // if we're full we need to leave some room between the top of the panel and the list\n        (atMaxCapacity ? listMarginTop : 0);\n\n      // set list height\n      if (listHeight.visual > _listAvailableHeight) {\n        list.overflow = _listAvailableHeight;\n      } else {\n        list.overflow = null;\n      }\n\n      // no need to set container bounds as these are handles by CSS fixed height\n    } else if (bounds.cappedHeight) {\n      // max-height\n\n      // not a fixed height panel\n      var isCappedHeight = visualHeight >= bounds.cappedHeight;\n      var panelHeight = Math.min(bounds.cappedHeight, visualHeight);\n      panel.scalable = true;\n      panel.height = isCappedHeight\n        ? panelHeight\n        : panelHeight - listItemMargin.top - listItemMargin.bottom;\n\n      // available height for list\n      var _listAvailableHeight2 =\n        // the height of the panel minus the label height\n        panelHeight -\n        currentLabelHeight -\n        // the room we leave open between the end of the list and the panel bottom\n        (listMarginBottom - listItemMargin.bottom) -\n        // if we're full we need to leave some room between the top of the panel and the list\n        (atMaxCapacity ? listMarginTop : 0);\n\n      // set list height (if is overflowing)\n      if (\n        visualHeight > bounds.cappedHeight &&\n        listHeight.visual > _listAvailableHeight2\n      ) {\n        list.overflow = _listAvailableHeight2;\n      } else {\n        list.overflow = null;\n      }\n\n      // set container bounds (so pushes siblings downwards)\n      root.height = Math.min(\n        bounds.cappedHeight,\n        boundsHeight - listItemMargin.top - listItemMargin.bottom\n      );\n    } else {\n      // flexible height\n\n      // not a fixed height panel\n      var itemMargin =\n        totalItems > 0 ? listItemMargin.top + listItemMargin.bottom : 0;\n      panel.scalable = true;\n      panel.height = Math.max(labelHeight, visualHeight - itemMargin);\n\n      // set container bounds (so pushes siblings downwards)\n      root.height = Math.max(labelHeight, boundsHeight - itemMargin);\n    }\n  };\n\n  var calculateListItemMargin = function calculateListItemMargin(root) {\n    var item = root.ref.list.childViews[0].childViews[0];\n    return item\n      ? {\n          top: item.rect.element.marginTop,\n          bottom: item.rect.element.marginBottom\n        }\n      : {\n          top: 0,\n          bottom: 0\n        };\n  };\n\n  var calculateListHeight = function calculateListHeight(root) {\n    var visual = 0;\n    var bounds = 0;\n\n    // get file list reference\n    var scrollList = root.ref.list;\n    var itemList = scrollList.childViews[0];\n    var visibleChildren = itemList.childViews.filter(function(child) {\n      return child.rect.element.height;\n    });\n    var children = root\n      .query('GET_ACTIVE_ITEMS')\n      .map(function(item) {\n        return visibleChildren.find(function(child) {\n          return child.id === item.id;\n        });\n      })\n      .filter(function(item) {\n        return item;\n      });\n\n    // no children, done!\n    if (children.length === 0) return { visual: visual, bounds: bounds };\n\n    var horizontalSpace = itemList.rect.element.width;\n    var dragIndex = getItemIndexByPosition(\n      itemList,\n      children,\n      scrollList.dragCoordinates\n    );\n\n    var childRect = children[0].rect.element;\n\n    var itemVerticalMargin = childRect.marginTop + childRect.marginBottom;\n    var itemHorizontalMargin = childRect.marginLeft + childRect.marginRight;\n\n    var itemWidth = childRect.width + itemHorizontalMargin;\n    var itemHeight = childRect.height + itemVerticalMargin;\n\n    var newItem = typeof dragIndex !== 'undefined' && dragIndex >= 0 ? 1 : 0;\n    var removedItem = children.find(function(child) {\n      return child.markedForRemoval && child.opacity < 0.45;\n    })\n      ? -1\n      : 0;\n    var verticalItemCount = children.length + newItem + removedItem;\n    var itemsPerRow = Math.round(horizontalSpace / itemWidth);\n\n    // stack\n    if (itemsPerRow === 1) {\n      children.forEach(function(item) {\n        var height = item.rect.element.height + itemVerticalMargin;\n        bounds += height;\n        visual += height * item.opacity;\n      });\n    }\n    // grid\n    else {\n      bounds = Math.ceil(verticalItemCount / itemsPerRow) * itemHeight;\n      visual = bounds;\n    }\n\n    return { visual: visual, bounds: bounds };\n  };\n\n  var calculateRootBoundingBoxHeight = function calculateRootBoundingBoxHeight(\n    root\n  ) {\n    var height = root.ref.measureHeight || null;\n    var cappedHeight = parseInt(root.style.maxHeight, 10) || null;\n    var fixedHeight = height === 0 ? null : height;\n\n    return {\n      cappedHeight: cappedHeight,\n      fixedHeight: fixedHeight\n    };\n  };\n\n  var exceedsMaxFiles = function exceedsMaxFiles(root, items) {\n    var allowReplace = root.query('GET_ALLOW_REPLACE');\n    var allowMultiple = root.query('GET_ALLOW_MULTIPLE');\n    var totalItems = root.query('GET_TOTAL_ITEMS');\n    var maxItems = root.query('GET_MAX_FILES');\n\n    // total amount of items being dragged\n    var totalBrowseItems = items.length;\n\n    // if does not allow multiple items and dragging more than one item\n    if (!allowMultiple && totalBrowseItems > 1) {\n      return true;\n    }\n\n    // limit max items to one if not allowed to drop multiple items\n    maxItems = allowMultiple ? maxItems : allowReplace ? maxItems : 1;\n\n    // no more room?\n    var hasMaxItems = isInt(maxItems);\n    if (hasMaxItems && totalItems + totalBrowseItems > maxItems) {\n      root.dispatch('DID_THROW_MAX_FILES', {\n        source: items,\n        error: createResponse('warning', 0, 'Max files')\n      });\n\n      return true;\n    }\n\n    return false;\n  };\n\n  var getDragIndex = function getDragIndex(list, children, position) {\n    var itemList = list.childViews[0];\n    return getItemIndexByPosition(itemList, children, {\n      left: position.scopeLeft - itemList.rect.element.left,\n      top:\n        position.scopeTop -\n        (list.rect.outer.top +\n          list.rect.element.marginTop +\n          list.rect.element.scrollTop)\n    });\n  };\n\n  /**\n   * Enable or disable file drop functionality\n   */\n  var toggleDrop = function toggleDrop(root) {\n    var isAllowed = root.query('GET_ALLOW_DROP');\n    var isDisabled = root.query('GET_DISABLED');\n    var enabled = isAllowed && !isDisabled;\n    if (enabled && !root.ref.hopper) {\n      var hopper = createHopper(\n        root.element,\n        function(items) {\n          // these files don't fit so stop here\n          if (exceedsMaxFiles(root, items)) return false;\n\n          // allow quick validation of dropped items\n          var beforeDropFile =\n            root.query('GET_BEFORE_DROP_FILE') ||\n            function() {\n              return true;\n            };\n\n          // all items should be validated by all filters as valid\n          var dropValidation = root.query('GET_DROP_VALIDATION');\n          return dropValidation\n            ? items.every(function(item) {\n                return (\n                  applyFilters('ALLOW_HOPPER_ITEM', item, {\n                    query: root.query\n                  }).every(function(result) {\n                    return result === true;\n                  }) && beforeDropFile(item)\n                );\n              })\n            : true;\n        },\n        {\n          filterItems: function filterItems(items) {\n            var ignoredFiles = root.query('GET_IGNORED_FILES');\n            return items.filter(function(item) {\n              if (isFile(item)) {\n                return !ignoredFiles.includes(item.name.toLowerCase());\n              }\n              return true;\n            });\n          },\n          catchesDropsOnPage: root.query('GET_DROP_ON_PAGE'),\n          requiresDropOnElement: root.query('GET_DROP_ON_ELEMENT')\n        }\n      );\n\n      hopper.onload = function(items, position) {\n        // get item children elements and sort based on list sort\n        var list = root.ref.list.childViews[0];\n        var visibleChildren = list.childViews.filter(function(child) {\n          return child.rect.element.height;\n        });\n        var children = root\n          .query('GET_ACTIVE_ITEMS')\n          .map(function(item) {\n            return visibleChildren.find(function(child) {\n              return child.id === item.id;\n            });\n          })\n          .filter(function(item) {\n            return item;\n          });\n\n        // go\n        root.dispatch('ADD_ITEMS', {\n          items: items,\n          index: getDragIndex(root.ref.list, children, position),\n          interactionMethod: InteractionMethod.DROP\n        });\n\n        root.dispatch('DID_DROP', { position: position });\n\n        root.dispatch('DID_END_DRAG', { position: position });\n      };\n\n      hopper.ondragstart = function(position) {\n        root.dispatch('DID_START_DRAG', { position: position });\n      };\n\n      hopper.ondrag = debounce(function(position) {\n        root.dispatch('DID_DRAG', { position: position });\n      });\n\n      hopper.ondragend = function(position) {\n        root.dispatch('DID_END_DRAG', { position: position });\n      };\n\n      root.ref.hopper = hopper;\n\n      root.ref.drip = root.appendChildView(root.createChildView(drip));\n    } else if (!enabled && root.ref.hopper) {\n      root.ref.hopper.destroy();\n      root.ref.hopper = null;\n      root.removeChildView(root.ref.drip);\n    }\n  };\n\n  /**\n   * Enable or disable browse functionality\n   */\n  var toggleBrowse = function toggleBrowse(root, props) {\n    var isAllowed = root.query('GET_ALLOW_BROWSE');\n    var isDisabled = root.query('GET_DISABLED');\n    var enabled = isAllowed && !isDisabled;\n    if (enabled && !root.ref.browser) {\n      root.ref.browser = root.appendChildView(\n        root.createChildView(\n          browser,\n          Object.assign({}, props, {\n            onload: function onload(items) {\n              // these files don't fit so stop here\n              if (exceedsMaxFiles(root, items)) return false;\n\n              // add items!\n              root.dispatch('ADD_ITEMS', {\n                items: items,\n                index: -1,\n                interactionMethod: InteractionMethod.BROWSE\n              });\n            }\n          })\n        ),\n\n        0\n      );\n    } else if (!enabled && root.ref.browser) {\n      root.removeChildView(root.ref.browser);\n      root.ref.browser = null;\n    }\n  };\n\n  /**\n   * Enable or disable paste functionality\n   */\n  var togglePaste = function togglePaste(root) {\n    var isAllowed = root.query('GET_ALLOW_PASTE');\n    var isDisabled = root.query('GET_DISABLED');\n    var enabled = isAllowed && !isDisabled;\n    if (enabled && !root.ref.paster) {\n      root.ref.paster = createPaster();\n      root.ref.paster.onload = function(items) {\n        root.dispatch('ADD_ITEMS', {\n          items: items,\n          index: -1,\n          interactionMethod: InteractionMethod.PASTE\n        });\n      };\n    } else if (!enabled && root.ref.paster) {\n      root.ref.paster.destroy();\n      root.ref.paster = null;\n    }\n  };\n\n  /**\n   * Route actions\n   */\n  var route$5 = createRoute({\n    DID_SET_ALLOW_BROWSE: function DID_SET_ALLOW_BROWSE(_ref5) {\n      var root = _ref5.root,\n        props = _ref5.props;\n      toggleBrowse(root, props);\n    },\n    DID_SET_ALLOW_DROP: function DID_SET_ALLOW_DROP(_ref6) {\n      var root = _ref6.root;\n      toggleDrop(root);\n    },\n    DID_SET_ALLOW_PASTE: function DID_SET_ALLOW_PASTE(_ref7) {\n      var root = _ref7.root;\n      togglePaste(root);\n    },\n    DID_SET_DISABLED: function DID_SET_DISABLED(_ref8) {\n      var root = _ref8.root,\n        props = _ref8.props;\n      toggleDrop(root);\n      togglePaste(root);\n      toggleBrowse(root, props);\n      var isDisabled = root.query('GET_DISABLED');\n      if (isDisabled) {\n        root.element.dataset.disabled = 'disabled';\n      } else {\n        // delete root.element.dataset.disabled; <= this does not work on iOS 10\n        root.element.removeAttribute('data-disabled');\n      }\n    }\n  });\n\n  var root = createView({\n    name: 'root',\n    read: function read(_ref9) {\n      var root = _ref9.root;\n      if (root.ref.measure) {\n        root.ref.measureHeight = root.ref.measure.offsetHeight;\n      }\n    },\n    create: create$e,\n    write: write$9,\n    destroy: function destroy(_ref10) {\n      var root = _ref10.root;\n      if (root.ref.paster) {\n        root.ref.paster.destroy();\n      }\n      if (root.ref.hopper) {\n        root.ref.hopper.destroy();\n      }\n      root.element.removeEventListener('touchmove', prevent);\n      root.element.removeEventListener('gesturestart', prevent);\n    },\n    mixins: {\n      styles: ['height']\n    }\n  });\n\n  // creates the app\n  var createApp = function createApp() {\n    var initialOptions =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // let element\n    var originalElement = null;\n\n    // get default options\n    var defaultOptions = getOptions();\n\n    // create the data store, this will contain all our app info\n    var store = createStore(\n      // initial state (should be serializable)\n      createInitialState(defaultOptions),\n\n      // queries\n      [queries, createOptionQueries(defaultOptions)],\n\n      // action handlers\n      [actions, createOptionActions(defaultOptions)]\n    );\n\n    // set initial options\n    store.dispatch('SET_OPTIONS', { options: initialOptions });\n\n    // kick thread if visibility changes\n    var visibilityHandler = function visibilityHandler() {\n      if (document.hidden) return;\n      store.dispatch('KICK');\n    };\n    document.addEventListener('visibilitychange', visibilityHandler);\n\n    // re-render on window resize start and finish\n    var resizeDoneTimer = null;\n    var isResizing = false;\n    var isResizingHorizontally = false;\n    var initialWindowWidth = null;\n    var currentWindowWidth = null;\n    var resizeHandler = function resizeHandler() {\n      if (!isResizing) {\n        isResizing = true;\n      }\n      clearTimeout(resizeDoneTimer);\n      resizeDoneTimer = setTimeout(function() {\n        isResizing = false;\n        initialWindowWidth = null;\n        currentWindowWidth = null;\n        if (isResizingHorizontally) {\n          isResizingHorizontally = false;\n          store.dispatch('DID_STOP_RESIZE');\n        }\n      }, 500);\n    };\n    window.addEventListener('resize', resizeHandler);\n\n    // render initial view\n    var view = root(store, { id: getUniqueId() });\n\n    //\n    // PRIVATE API -------------------------------------------------------------------------------------\n    //\n    var isResting = false;\n    var isHidden = false;\n\n    var readWriteApi = {\n      // necessary for update loop\n\n      /**\n       * Reads from dom (never call manually)\n       * @private\n       */\n      _read: function _read() {\n        // test if we're resizing horizontally\n        // TODO: see if we can optimize this by measuring root rect\n        if (isResizing) {\n          currentWindowWidth = window.innerWidth;\n          if (!initialWindowWidth) {\n            initialWindowWidth = currentWindowWidth;\n          }\n\n          if (\n            !isResizingHorizontally &&\n            currentWindowWidth !== initialWindowWidth\n          ) {\n            store.dispatch('DID_START_RESIZE');\n            isResizingHorizontally = true;\n          }\n        }\n\n        if (isHidden && isResting) {\n          // test if is no longer hidden\n          isResting = view.element.offsetParent === null;\n        }\n\n        // if resting, no need to read as numbers will still all be correct\n        if (isResting) return;\n\n        // read view data\n        view._read();\n\n        // if is hidden we need to know so we exit rest mode when revealed\n        isHidden = view.rect.element.hidden;\n      },\n\n      /**\n       * Writes to dom (never call manually)\n       * @private\n       */\n      _write: function _write(ts) {\n        // get all actions from store\n        var actions = store\n          .processActionQueue()\n\n          // filter out set actions (these will automatically trigger DID_SET)\n          .filter(function(action) {\n            return !/^SET_/.test(action.type);\n          });\n\n        // if was idling and no actions stop here\n        if (isResting && !actions.length) return;\n\n        // some actions might trigger events\n        routeActionsToEvents(actions);\n\n        // update the view\n        isResting = view._write(ts, actions, isResizingHorizontally);\n\n        // will clean up all archived items\n        removeReleasedItems(store.query('GET_ITEMS'));\n\n        // now idling\n        if (isResting) {\n          store.processDispatchQueue();\n        }\n      }\n    };\n\n    //\n    // EXPOSE EVENTS -------------------------------------------------------------------------------------\n    //\n    var createEvent = function createEvent(name) {\n      return function(data) {\n        // create default event\n        var event = {\n          type: name\n        };\n\n        // no data to add\n        if (!data) {\n          return event;\n        }\n\n        // copy relevant props\n        if (data.hasOwnProperty('error')) {\n          event.error = data.error ? Object.assign({}, data.error) : null;\n        }\n\n        if (data.status) {\n          event.status = Object.assign({}, data.status);\n        }\n\n        if (data.file) {\n          event.output = data.file;\n        }\n\n        // only source is available, else add item if possible\n        if (data.source) {\n          event.file = data.source;\n        } else if (data.item || data.id) {\n          var item = data.item ? data.item : store.query('GET_ITEM', data.id);\n          event.file = item ? createItemAPI(item) : null;\n        }\n\n        // map all items in a possible items array\n        if (data.items) {\n          event.items = data.items.map(createItemAPI);\n        }\n\n        // if this is a progress event add the progress amount\n        if (/progress/.test(name)) {\n          event.progress = data.progress;\n        }\n\n        // copy relevant props\n        if (data.hasOwnProperty('origin') && data.hasOwnProperty('target')) {\n          event.origin = data.origin;\n          event.target = data.target;\n        }\n\n        return event;\n      };\n    };\n\n    var eventRoutes = {\n      DID_DESTROY: createEvent('destroy'),\n\n      DID_INIT: createEvent('init'),\n\n      DID_THROW_MAX_FILES: createEvent('warning'),\n\n      DID_INIT_ITEM: createEvent('initfile'),\n      DID_START_ITEM_LOAD: createEvent('addfilestart'),\n      DID_UPDATE_ITEM_LOAD_PROGRESS: createEvent('addfileprogress'),\n      DID_LOAD_ITEM: createEvent('addfile'),\n\n      DID_THROW_ITEM_INVALID: [createEvent('error'), createEvent('addfile')],\n\n      DID_THROW_ITEM_LOAD_ERROR: [createEvent('error'), createEvent('addfile')],\n\n      DID_THROW_ITEM_REMOVE_ERROR: [\n        createEvent('error'),\n        createEvent('removefile')\n      ],\n\n      DID_PREPARE_OUTPUT: createEvent('preparefile'),\n\n      DID_START_ITEM_PROCESSING: createEvent('processfilestart'),\n      DID_UPDATE_ITEM_PROCESS_PROGRESS: createEvent('processfileprogress'),\n      DID_ABORT_ITEM_PROCESSING: createEvent('processfileabort'),\n      DID_COMPLETE_ITEM_PROCESSING: createEvent('processfile'),\n      DID_COMPLETE_ITEM_PROCESSING_ALL: createEvent('processfiles'),\n      DID_REVERT_ITEM_PROCESSING: createEvent('processfilerevert'),\n\n      DID_THROW_ITEM_PROCESSING_ERROR: [\n        createEvent('error'),\n        createEvent('processfile')\n      ],\n\n      DID_REMOVE_ITEM: createEvent('removefile'),\n\n      DID_UPDATE_ITEMS: createEvent('updatefiles'),\n\n      DID_ACTIVATE_ITEM: createEvent('activatefile'),\n\n      DID_REORDER_ITEMS: createEvent('reorderfiles')\n    };\n\n    var exposeEvent = function exposeEvent(event) {\n      // create event object to be dispatched\n      var detail = Object.assign({ pond: exports }, event);\n      delete detail.type;\n      view.element.dispatchEvent(\n        new CustomEvent('FilePond:' + event.type, {\n          // event info\n          detail: detail,\n\n          // event behaviour\n          bubbles: true,\n          cancelable: true,\n          composed: true // triggers listeners outside of shadow root\n        })\n      );\n\n      // event object to params used for `on()` event handlers and callbacks `oninit()`\n      var params = [];\n\n      // if is possible error event, make it the first param\n      if (event.hasOwnProperty('error')) {\n        params.push(event.error);\n      }\n\n      // file is always section\n      if (event.hasOwnProperty('file')) {\n        params.push(event.file);\n      }\n\n      // append other props\n      var filtered = ['type', 'error', 'file'];\n      Object.keys(event)\n        .filter(function(key) {\n          return !filtered.includes(key);\n        })\n        .forEach(function(key) {\n          return params.push(event[key]);\n        });\n\n      // on(type, () => { })\n      exports.fire.apply(exports, [event.type].concat(params));\n\n      // oninit = () => {}\n      var handler = store.query('GET_ON' + event.type.toUpperCase());\n      if (handler) {\n        handler.apply(void 0, params);\n      }\n    };\n\n    var routeActionsToEvents = function routeActionsToEvents(actions) {\n      if (!actions.length) return;\n      actions\n        .filter(function(action) {\n          return eventRoutes[action.type];\n        })\n        .forEach(function(action) {\n          var routes = eventRoutes[action.type];\n          (Array.isArray(routes) ? routes : [routes]).forEach(function(route) {\n            // this isn't fantastic, but because of the stacking of settimeouts plugins can handle the did_load before the did_init\n            if (action.type === 'DID_INIT_ITEM') {\n              exposeEvent(route(action.data));\n            } else {\n              setTimeout(function() {\n                exposeEvent(route(action.data));\n              }, 0);\n            }\n          });\n        });\n    };\n\n    //\n    // PUBLIC API -------------------------------------------------------------------------------------\n    //\n    var setOptions = function setOptions(options) {\n      return store.dispatch('SET_OPTIONS', { options: options });\n    };\n\n    var getFile = function getFile(query) {\n      return store.query('GET_ACTIVE_ITEM', query);\n    };\n\n    var prepareFile = function prepareFile(query) {\n      return new Promise(function(resolve, reject) {\n        store.dispatch('REQUEST_ITEM_PREPARE', {\n          query: query,\n          success: function success(item) {\n            resolve(item);\n          },\n          failure: function failure(error) {\n            reject(error);\n          }\n        });\n      });\n    };\n\n    var addFile = function addFile(source) {\n      var options =\n        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function(resolve, reject) {\n        addFiles([{ source: source, options: options }], {\n          index: options.index\n        })\n          .then(function(items) {\n            return resolve(items && items[0]);\n          })\n          .catch(reject);\n      });\n    };\n\n    var isFilePondFile = function isFilePondFile(obj) {\n      return obj.file && obj.id;\n    };\n\n    var removeFile = function removeFile(query, options) {\n      // if only passed options\n      if (typeof query === 'object' && !isFilePondFile(query) && !options) {\n        options = query;\n        query = undefined;\n      }\n\n      // request item removal\n      store.dispatch(\n        'REMOVE_ITEM',\n        Object.assign({}, options, { query: query })\n      );\n\n      // see if item has been removed\n      return store.query('GET_ACTIVE_ITEM', query) === null;\n    };\n\n    var addFiles = function addFiles() {\n      for (\n        var _len = arguments.length, args = new Array(_len), _key = 0;\n        _key < _len;\n        _key++\n      ) {\n        args[_key] = arguments[_key];\n      }\n      return new Promise(function(resolve, reject) {\n        var sources = [];\n        var options = {};\n\n        // user passed a sources array\n        if (isArray(args[0])) {\n          sources.push.apply(sources, args[0]);\n          Object.assign(options, args[1] || {});\n        } else {\n          // user passed sources as arguments, last one might be options object\n          var lastArgument = args[args.length - 1];\n          if (\n            typeof lastArgument === 'object' &&\n            !(lastArgument instanceof Blob)\n          ) {\n            Object.assign(options, args.pop());\n          }\n\n          // add rest to sources\n          sources.push.apply(sources, args);\n        }\n\n        store.dispatch('ADD_ITEMS', {\n          items: sources,\n          index: options.index,\n          interactionMethod: InteractionMethod.API,\n          success: resolve,\n          failure: reject\n        });\n      });\n    };\n\n    var getFiles = function getFiles() {\n      return store.query('GET_ACTIVE_ITEMS');\n    };\n\n    var processFile = function processFile(query) {\n      return new Promise(function(resolve, reject) {\n        store.dispatch('REQUEST_ITEM_PROCESSING', {\n          query: query,\n          success: function success(item) {\n            resolve(item);\n          },\n          failure: function failure(error) {\n            reject(error);\n          }\n        });\n      });\n    };\n\n    var prepareFiles = function prepareFiles() {\n      for (\n        var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;\n        _key2 < _len2;\n        _key2++\n      ) {\n        args[_key2] = arguments[_key2];\n      }\n      var queries = Array.isArray(args[0]) ? args[0] : args;\n      var items = queries.length ? queries : getFiles();\n      return Promise.all(items.map(prepareFile));\n    };\n\n    var processFiles = function processFiles() {\n      for (\n        var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;\n        _key3 < _len3;\n        _key3++\n      ) {\n        args[_key3] = arguments[_key3];\n      }\n      var queries = Array.isArray(args[0]) ? args[0] : args;\n      if (!queries.length) {\n        var files = getFiles().filter(function(item) {\n          return (\n            !(\n              item.status === ItemStatus.IDLE &&\n              item.origin === FileOrigin.LOCAL\n            ) &&\n            item.status !== ItemStatus.PROCESSING &&\n            item.status !== ItemStatus.PROCESSING_COMPLETE &&\n            item.status !== ItemStatus.PROCESSING_REVERT_ERROR\n          );\n        });\n\n        return Promise.all(files.map(processFile));\n      }\n      return Promise.all(queries.map(processFile));\n    };\n\n    var removeFiles = function removeFiles() {\n      for (\n        var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;\n        _key4 < _len4;\n        _key4++\n      ) {\n        args[_key4] = arguments[_key4];\n      }\n\n      var queries = Array.isArray(args[0]) ? args[0] : args;\n\n      var options;\n      if (typeof queries[queries.length - 1] === 'object') {\n        options = queries.pop();\n      } else if (Array.isArray(args[0])) {\n        options = args[1];\n      }\n\n      var files = getFiles();\n\n      if (!queries.length)\n        return Promise.all(\n          files.map(function(file) {\n            return removeFile(file, options);\n          })\n        );\n\n      // when removing by index the indexes shift after each file removal so we need to convert indexes to ids\n      var mappedQueries = queries\n        .map(function(query) {\n          return isNumber(query)\n            ? files[query]\n              ? files[query].id\n              : null\n            : query;\n        })\n        .filter(function(query) {\n          return query;\n        });\n\n      return mappedQueries.map(function(q) {\n        return removeFile(q, options);\n      });\n    };\n\n    var exports = Object.assign(\n      {},\n\n      on(),\n      {},\n\n      readWriteApi,\n      {},\n\n      createOptionAPI(store, defaultOptions),\n      {\n        /**\n         * Override options defined in options object\n         * @param options\n         */\n        setOptions: setOptions,\n\n        /**\n         * Load the given file\n         * @param source - the source of the file (either a File, base64 data uri or url)\n         * @param options - object, { index: 0 }\n         */\n        addFile: addFile,\n\n        /**\n         * Load the given files\n         * @param sources - the sources of the files to load\n         * @param options - object, { index: 0 }\n         */\n        addFiles: addFiles,\n\n        /**\n         * Returns the file objects matching the given query\n         * @param query { string, number, null }\n         */\n        getFile: getFile,\n\n        /**\n         * Upload file with given name\n         * @param query { string, number, null  }\n         */\n        processFile: processFile,\n\n        /**\n         * Request prepare output for file with given name\n         * @param query { string, number, null  }\n         */\n        prepareFile: prepareFile,\n\n        /**\n         * Removes a file by its name\n         * @param query { string, number, null  }\n         */\n        removeFile: removeFile,\n\n        /**\n         * Moves a file to a new location in the files list\n         */\n        moveFile: function moveFile(query, index) {\n          return store.dispatch('MOVE_ITEM', { query: query, index: index });\n        },\n\n        /**\n         * Returns all files (wrapped in public api)\n         */\n        getFiles: getFiles,\n\n        /**\n         * Starts uploading all files\n         */\n        processFiles: processFiles,\n\n        /**\n         * Clears all files from the files list\n         */\n        removeFiles: removeFiles,\n\n        /**\n         * Starts preparing output of all files\n         */\n        prepareFiles: prepareFiles,\n\n        /**\n         * Sort list of files\n         */\n        sort: function sort(compare) {\n          return store.dispatch('SORT', { compare: compare });\n        },\n\n        /**\n         * Browse the file system for a file\n         */\n        browse: function browse() {\n          // needs to be trigger directly as user action needs to be traceable (is not traceable in requestAnimationFrame)\n          var input = view.element.querySelector('input[type=file]');\n          if (input) {\n            input.click();\n          }\n        },\n\n        /**\n         * Destroys the app\n         */\n        destroy: function destroy() {\n          // request destruction\n          exports.fire('destroy', view.element);\n\n          // stop active processes (file uploads, fetches, stuff like that)\n          // loop over items and depending on states call abort for ongoing processes\n          store.dispatch('ABORT_ALL');\n\n          // destroy view\n          view._destroy();\n\n          // stop listening to resize\n          window.removeEventListener('resize', resizeHandler);\n\n          // stop listening to the visiblitychange event\n          document.removeEventListener('visibilitychange', visibilityHandler);\n\n          // dispatch destroy\n          store.dispatch('DID_DESTROY');\n        },\n\n        /**\n         * Inserts the plugin before the target element\n         */\n        insertBefore: function insertBefore$1(element) {\n          return insertBefore(view.element, element);\n        },\n\n        /**\n         * Inserts the plugin after the target element\n         */\n        insertAfter: function insertAfter$1(element) {\n          return insertAfter(view.element, element);\n        },\n\n        /**\n         * Appends the plugin to the target element\n         */\n        appendTo: function appendTo(element) {\n          return element.appendChild(view.element);\n        },\n\n        /**\n         * Replaces an element with the app\n         */\n        replaceElement: function replaceElement(element) {\n          // insert the app before the element\n          insertBefore(view.element, element);\n\n          // remove the original element\n          element.parentNode.removeChild(element);\n\n          // remember original element\n          originalElement = element;\n        },\n\n        /**\n         * Restores the original element\n         */\n        restoreElement: function restoreElement() {\n          if (!originalElement) {\n            return; // no element to restore\n          }\n\n          // restore original element\n          insertAfter(originalElement, view.element);\n\n          // remove our element\n          view.element.parentNode.removeChild(view.element);\n\n          // remove reference\n          originalElement = null;\n        },\n\n        /**\n         * Returns true if the app root is attached to given element\n         * @param element\n         */\n        isAttachedTo: function isAttachedTo(element) {\n          return view.element === element || originalElement === element;\n        },\n\n        /**\n         * Returns the root element\n         */\n        element: {\n          get: function get() {\n            return view.element;\n          }\n        },\n\n        /**\n         * Returns the current pond status\n         */\n        status: {\n          get: function get() {\n            return store.query('GET_STATUS');\n          }\n        }\n      }\n    );\n\n    // Done!\n    store.dispatch('DID_INIT');\n\n    // create actual api object\n    return createObject(exports);\n  };\n\n  var createAppObject = function createAppObject() {\n    var customOptions =\n      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // default options\n    var defaultOptions = {};\n    forin(getOptions(), function(key, value) {\n      defaultOptions[key] = value[0];\n    });\n\n    // set app options\n    var app = createApp(\n      Object.assign(\n        {},\n\n        defaultOptions,\n        {},\n\n        customOptions\n      )\n    );\n\n    // return the plugin instance\n    return app;\n  };\n\n  var lowerCaseFirstLetter = function lowerCaseFirstLetter(string) {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n  };\n\n  var attributeNameToPropertyName = function attributeNameToPropertyName(\n    attributeName\n  ) {\n    return toCamels(attributeName.replace(/^data-/, ''));\n  };\n\n  var mapObject = function mapObject(object, propertyMap) {\n    // remove unwanted\n    forin(propertyMap, function(selector, mapping) {\n      forin(object, function(property, value) {\n        // create regexp shortcut\n        var selectorRegExp = new RegExp(selector);\n\n        // tests if\n        var matches = selectorRegExp.test(property);\n\n        // no match, skip\n        if (!matches) {\n          return;\n        }\n\n        // if there's a mapping, the original property is always removed\n        delete object[property];\n\n        // should only remove, we done!\n        if (mapping === false) {\n          return;\n        }\n\n        // move value to new property\n        if (isString(mapping)) {\n          object[mapping] = value;\n          return;\n        }\n\n        // move to group\n        var group = mapping.group;\n        if (isObject(mapping) && !object[group]) {\n          object[group] = {};\n        }\n\n        object[group][\n          lowerCaseFirstLetter(property.replace(selectorRegExp, ''))\n        ] = value;\n      });\n\n      // do submapping\n      if (mapping.mapping) {\n        mapObject(object[mapping.group], mapping.mapping);\n      }\n    });\n  };\n\n  var getAttributesAsObject = function getAttributesAsObject(node) {\n    var attributeMapping =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // turn attributes into object\n    var attributes = [];\n    forin(node.attributes, function(index) {\n      attributes.push(node.attributes[index]);\n    });\n\n    var output = attributes\n      .filter(function(attribute) {\n        return attribute.name;\n      })\n      .reduce(function(obj, attribute) {\n        var value = attr(node, attribute.name);\n\n        obj[attributeNameToPropertyName(attribute.name)] =\n          value === attribute.name ? true : value;\n        return obj;\n      }, {});\n\n    // do mapping of object properties\n    mapObject(output, attributeMapping);\n\n    return output;\n  };\n\n  var createAppAtElement = function createAppAtElement(element) {\n    var options =\n      arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // how attributes of the input element are mapped to the options for the plugin\n    var attributeMapping = {\n      // translate to other name\n      '^class$': 'className',\n      '^multiple$': 'allowMultiple',\n      '^capture$': 'captureMethod',\n      '^webkitdirectory$': 'allowDirectoriesOnly',\n\n      // group under single property\n      '^server': {\n        group: 'server',\n        mapping: {\n          '^process': {\n            group: 'process'\n          },\n\n          '^revert': {\n            group: 'revert'\n          },\n\n          '^fetch': {\n            group: 'fetch'\n          },\n\n          '^restore': {\n            group: 'restore'\n          },\n\n          '^load': {\n            group: 'load'\n          }\n        }\n      },\n\n      // don't include in object\n      '^type$': false,\n      '^files$': false\n    };\n\n    // add additional option translators\n    applyFilters('SET_ATTRIBUTE_TO_OPTION_MAP', attributeMapping);\n\n    // create final options object by setting options object and then overriding options supplied on element\n    var mergedOptions = Object.assign({}, options);\n\n    var attributeOptions = getAttributesAsObject(\n      element.nodeName === 'FIELDSET'\n        ? element.querySelector('input[type=file]')\n        : element,\n      attributeMapping\n    );\n\n    // merge with options object\n    Object.keys(attributeOptions).forEach(function(key) {\n      if (isObject(attributeOptions[key])) {\n        if (!isObject(mergedOptions[key])) {\n          mergedOptions[key] = {};\n        }\n        Object.assign(mergedOptions[key], attributeOptions[key]);\n      } else {\n        mergedOptions[key] = attributeOptions[key];\n      }\n    });\n\n    // if parent is a fieldset, get files from parent by selecting all input fields that are not file upload fields\n    // these will then be automatically set to the initial files\n    mergedOptions.files = (options.files || []).concat(\n      Array.from(element.querySelectorAll('input:not([type=file])')).map(\n        function(input) {\n          return {\n            source: input.value,\n            options: {\n              type: input.dataset.type\n            }\n          };\n        }\n      )\n    );\n\n    // build plugin\n    var app = createAppObject(mergedOptions);\n\n    // add already selected files\n    if (element.files) {\n      Array.from(element.files).forEach(function(file) {\n        app.addFile(file);\n      });\n    }\n\n    // replace the target element\n    app.replaceElement(element);\n\n    // expose\n    return app;\n  };\n\n  // if an element is passed, we create the instance at that element, if not, we just create an up object\n  var createApp$1 = function createApp() {\n    return isNode(arguments.length <= 0 ? undefined : arguments[0])\n      ? createAppAtElement.apply(void 0, arguments)\n      : createAppObject.apply(void 0, arguments);\n  };\n\n  var PRIVATE_METHODS = ['fire', '_read', '_write'];\n\n  var createAppAPI = function createAppAPI(app) {\n    var api = {};\n\n    copyObjectPropertiesToObject(app, api, PRIVATE_METHODS);\n\n    return api;\n  };\n\n  /**\n   * Replaces placeholders in given string with replacements\n   * @param string - \"Foo {bar}\"\"\n   * @param replacements - { \"bar\": 10 }\n   */\n  var replaceInString = function replaceInString(string, replacements) {\n    return string.replace(/(?:{([a-zA-Z]+)})/g, function(match, group) {\n      return replacements[group];\n    });\n  };\n\n  var createWorker = function createWorker(fn) {\n    var workerBlob = new Blob(['(', fn.toString(), ')()'], {\n      type: 'application/javascript'\n    });\n\n    var workerURL = URL.createObjectURL(workerBlob);\n    var worker = new Worker(workerURL);\n\n    return {\n      transfer: function transfer(message, cb) {},\n      post: function post(message, cb, transferList) {\n        var id = getUniqueId();\n\n        worker.onmessage = function(e) {\n          if (e.data.id === id) {\n            cb(e.data.message);\n          }\n        };\n\n        worker.postMessage(\n          {\n            id: id,\n            message: message\n          },\n\n          transferList\n        );\n      },\n      terminate: function terminate() {\n        worker.terminate();\n        URL.revokeObjectURL(workerURL);\n      }\n    };\n  };\n\n  var loadImage = function loadImage(url) {\n    return new Promise(function(resolve, reject) {\n      var img = new Image();\n      img.onload = function() {\n        resolve(img);\n      };\n      img.onerror = function(e) {\n        reject(e);\n      };\n      img.src = url;\n    });\n  };\n\n  var renameFile = function renameFile(file, name) {\n    var renamedFile = file.slice(0, file.size, file.type);\n    renamedFile.lastModifiedDate = file.lastModifiedDate;\n    renamedFile.name = name;\n    return renamedFile;\n  };\n\n  var copyFile = function copyFile(file) {\n    return renameFile(file, file.name);\n  };\n\n  // already registered plugins (can't register twice)\n  var registeredPlugins = [];\n\n  // pass utils to plugin\n  var createAppPlugin = function createAppPlugin(plugin) {\n    // already registered\n    if (registeredPlugins.includes(plugin)) {\n      return;\n    }\n\n    // remember this plugin\n    registeredPlugins.push(plugin);\n\n    // setup!\n    var pluginOutline = plugin({\n      addFilter: addFilter,\n      utils: {\n        Type: Type,\n        forin: forin,\n        isString: isString,\n        isFile: isFile,\n        toNaturalFileSize: toNaturalFileSize,\n        replaceInString: replaceInString,\n        getExtensionFromFilename: getExtensionFromFilename,\n        getFilenameWithoutExtension: getFilenameWithoutExtension,\n        guesstimateMimeType: guesstimateMimeType,\n        getFileFromBlob: getFileFromBlob,\n        getFilenameFromURL: getFilenameFromURL,\n        createRoute: createRoute,\n        createWorker: createWorker,\n        createView: createView,\n        createItemAPI: createItemAPI,\n        loadImage: loadImage,\n        copyFile: copyFile,\n        renameFile: renameFile,\n        createBlob: createBlob,\n        applyFilterChain: applyFilterChain,\n        text: text,\n        getNumericAspectRatioFromString: getNumericAspectRatioFromString\n      },\n\n      views: {\n        fileActionButton: fileActionButton\n      }\n    });\n\n    // add plugin options to default options\n    extendDefaultOptions(pluginOutline.options);\n  };\n\n  // feature detection used by supported() method\n  var isOperaMini = function isOperaMini() {\n    return (\n      Object.prototype.toString.call(window.operamini) === '[object OperaMini]'\n    );\n  };\n  var hasPromises = function hasPromises() {\n    return 'Promise' in window;\n  };\n  var hasBlobSlice = function hasBlobSlice() {\n    return 'slice' in Blob.prototype;\n  };\n  var hasCreateObjectURL = function hasCreateObjectURL() {\n    return 'URL' in window && 'createObjectURL' in window.URL;\n  };\n  var hasVisibility = function hasVisibility() {\n    return 'visibilityState' in document;\n  };\n  var hasTiming = function hasTiming() {\n    return 'performance' in window;\n  }; // iOS 8.x\n  var hasCSSSupports = function hasCSSSupports() {\n    return 'supports' in (window.CSS || {});\n  }; // use to detect Safari 9+\n  var isIE11 = function isIE11() {\n    return /MSIE|Trident/.test(window.navigator.userAgent);\n  };\n\n  var supported = (function() {\n    // Runs immidiately and then remembers result for subsequent calls\n    var isSupported =\n      // Has to be a browser\n      isBrowser() &&\n      // Can't run on Opera Mini due to lack of everything\n      !isOperaMini() &&\n      // Require these APIs to feature detect a modern browser\n      hasVisibility() &&\n      hasPromises() &&\n      hasBlobSlice() &&\n      hasCreateObjectURL() &&\n      hasTiming() &&\n      // doesn't need CSSSupports but is a good way to detect Safari 9+ (we do want to support IE11 though)\n      (hasCSSSupports() || isIE11());\n\n    return function() {\n      return isSupported;\n    };\n  })();\n\n  /**\n   * Plugin internal state (over all instances)\n   */\n  var state = {\n    // active app instances, used to redraw the apps and to find the later\n    apps: []\n  };\n\n  // plugin name\n  var name = 'filepond';\n\n  /**\n   * Public Plugin methods\n   */\n  var fn = function fn() {};\n  exports.Status = {};\n  exports.FileStatus = {};\n  exports.FileOrigin = {};\n  exports.OptionTypes = {};\n  exports.create = fn;\n  exports.destroy = fn;\n  exports.parse = fn;\n  exports.find = fn;\n  exports.registerPlugin = fn;\n  exports.getOptions = fn;\n  exports.setOptions = fn;\n\n  // if not supported, no API\n  if (supported()) {\n    // start painter and fire load event\n    createPainter(\n      function() {\n        state.apps.forEach(function(app) {\n          return app._read();\n        });\n      },\n      function(ts) {\n        state.apps.forEach(function(app) {\n          return app._write(ts);\n        });\n      }\n    );\n\n    // fire loaded event so we know when FilePond is available\n    var dispatch = function dispatch() {\n      // let others know we have area ready\n      document.dispatchEvent(\n        new CustomEvent('FilePond:loaded', {\n          detail: {\n            supported: supported,\n            create: exports.create,\n            destroy: exports.destroy,\n            parse: exports.parse,\n            find: exports.find,\n            registerPlugin: exports.registerPlugin,\n            setOptions: exports.setOptions\n          }\n        })\n      );\n\n      // clean up event\n      document.removeEventListener('DOMContentLoaded', dispatch);\n    };\n\n    if (document.readyState !== 'loading') {\n      // move to back of execution queue, FilePond should have been exported by then\n      setTimeout(function() {\n        return dispatch();\n      }, 0);\n    } else {\n      document.addEventListener('DOMContentLoaded', dispatch);\n    }\n\n    // updates the OptionTypes object based on the current options\n    var updateOptionTypes = function updateOptionTypes() {\n      return forin(getOptions(), function(key, value) {\n        exports.OptionTypes[key] = value[1];\n      });\n    };\n\n    exports.Status = Object.assign({}, Status);\n    exports.FileOrigin = Object.assign({}, FileOrigin);\n    exports.FileStatus = Object.assign({}, ItemStatus);\n\n    exports.OptionTypes = {};\n    updateOptionTypes();\n\n    // create method, creates apps and adds them to the app array\n    exports.create = function create() {\n      var app = createApp$1.apply(void 0, arguments);\n      app.on('destroy', exports.destroy);\n      state.apps.push(app);\n      return createAppAPI(app);\n    };\n\n    // destroys apps and removes them from the app array\n    exports.destroy = function destroy(hook) {\n      // returns true if the app was destroyed successfully\n      var indexToRemove = state.apps.findIndex(function(app) {\n        return app.isAttachedTo(hook);\n      });\n      if (indexToRemove >= 0) {\n        // remove from apps\n        var app = state.apps.splice(indexToRemove, 1)[0];\n\n        // restore original dom element\n        app.restoreElement();\n\n        return true;\n      }\n\n      return false;\n    };\n\n    // parses the given context for plugins (does not include the context element itself)\n    exports.parse = function parse(context) {\n      // get all possible hooks\n      var matchedHooks = Array.from(context.querySelectorAll('.' + name));\n\n      // filter out already active hooks\n      var newHooks = matchedHooks.filter(function(newHook) {\n        return !state.apps.find(function(app) {\n          return app.isAttachedTo(newHook);\n        });\n      });\n\n      // create new instance for each hook\n      return newHooks.map(function(hook) {\n        return exports.create(hook);\n      });\n    };\n\n    // returns an app based on the given element hook\n    exports.find = function find(hook) {\n      var app = state.apps.find(function(app) {\n        return app.isAttachedTo(hook);\n      });\n      if (!app) {\n        return null;\n      }\n      return createAppAPI(app);\n    };\n\n    // adds a plugin extension\n    exports.registerPlugin = function registerPlugin() {\n      for (\n        var _len = arguments.length, plugins = new Array(_len), _key = 0;\n        _key < _len;\n        _key++\n      ) {\n        plugins[_key] = arguments[_key];\n      }\n\n      // register plugins\n      plugins.forEach(createAppPlugin);\n\n      // update OptionTypes, each plugin might have extended the default options\n      updateOptionTypes();\n    };\n\n    exports.getOptions = function getOptions$1() {\n      var opts = {};\n      forin(getOptions(), function(key, value) {\n        opts[key] = value[0];\n      });\n      return opts;\n    };\n\n    exports.setOptions = function setOptions$1(opts) {\n      if (isObject(opts)) {\n        // update existing plugins\n        state.apps.forEach(function(app) {\n          app.setOptions(opts);\n        });\n\n        // override defaults\n        setOptions(opts);\n      }\n\n      // return new options\n      return exports.getOptions();\n    };\n  }\n\n  exports.supported = supported;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/filepond/dist/filepond.js\n");

/***/ }),

/***/ "./node_modules/filepond/dist/filepond.min.css":
/*!*****************************************************!*\
  !*** ./node_modules/filepond/dist/filepond.min.css ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../../css-loader??ref--9-1!../../postcss-loader/src??ref--9-2!./filepond.min.css */ \"./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/filepond/dist/filepond.min.css\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../../style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmlsZXBvbmQvZGlzdC9maWxlcG9uZC5taW4uY3NzP2U0OGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGNBQWMsbUJBQU8sQ0FBQyx3TkFBc0c7O0FBRTVILDRDQUE0QyxRQUFTOztBQUVyRDtBQUNBOzs7O0FBSUEsZUFBZTs7QUFFZjtBQUNBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyx5RkFBc0M7O0FBRTNEOztBQUVBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ZpbGVwb25kL2Rpc3QvZmlsZXBvbmQubWluLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTktMSEuLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOS0yIS4vZmlsZXBvbmQubWluLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTktMSEuLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tOS0yIS4vZmlsZXBvbmQubWluLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tOS0xIS4uLy4uL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS05LTIhLi9maWxlcG9uZC5taW4uY3NzXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/filepond/dist/filepond.min.css\n");

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(/*! ./urls */ \"./node_modules/style-loader/lib/urls.js\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === 'function'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/lib/addStyles.js\n");

/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzP2Y2ZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXLEVBQUU7QUFDckQsd0NBQXdDLFdBQVcsRUFBRTs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxzQ0FBc0M7QUFDdEMsR0FBRztBQUNIO0FBQ0EsOERBQThEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/lib/urls.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./resources/js/dashboard/bundles/bundleProfile.js":
/*!*********************************************************!*\
  !*** ./resources/js/dashboard/bundles/bundleProfile.js ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../main */ \"./resources/js/dashboard/main.js\");\n/* harmony import */ var _plugins_article_editor_article_editor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../plugins/article-editor/article-editor */ \"./resources/plugins/article-editor/article-editor.js\");\n/* harmony import */ var _plugins_article_editor_article_editor__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_plugins_article_editor_article_editor__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var filepond__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! filepond */ \"./node_modules/filepond/dist/filepond.js\");\n/* harmony import */ var filepond__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(filepond__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var filepond_plugin_file_validate_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! filepond-plugin-file-validate-type */ \"./node_modules/filepond-plugin-file-validate-type/dist/filepond-plugin-file-validate-type.js\");\n/* harmony import */ var filepond_plugin_file_validate_type__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(filepond_plugin_file_validate_type__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var filepond_dist_filepond_min_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! filepond/dist/filepond.min.css */ \"./node_modules/filepond/dist/filepond.min.css\");\n/* harmony import */ var filepond_dist_filepond_min_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(filepond_dist_filepond_min_css__WEBPACK_IMPORTED_MODULE_4__);\n//!######################################\n//! \t\t\t\tImports\t\t\t\t#\n//!######################################\n\n\n\n__webpack_require__(/*! ../../../plugins/article-editor/plugins/reorder/reorder */ \"./resources/plugins/article-editor/plugins/reorder/reorder.js\");\n\n\n\n //!##############################################\n//! \t\t\tGLOBAL VARIABLES\t\t\t\t#\n//!##############################################\n\nvar bundleId = $(\"#bundle-title\")[0].dataset.bundleId;\nvar bundleSlug = $(\"#bundle-title\")[0].dataset.bundleSlug;\nvar namespace = \"App\\\\Bundle\";\nvar baseUrl = window.location.origin; //!##########################################\n//! \t\t\tEventListerners\t\t\t\t#\n//!##########################################\n\n$(\".js-editors-toggle\").on(\"change\", function () {\n  var _this = this;\n\n  var editorToggles = $(\".js-editors-toggle\");\n  var field = {};\n\n  for (var i = 0; i < editorToggles.length; i++) {\n    field[\"\".concat(editorToggles[i].dataset.field)] = editorToggles[i].checked ? 1 : 0;\n  }\n\n  var fields = JSON.stringify(field);\n  axios.patch(\"/bundle/\".concat(bundleSlug, \"/toggle-editors\"), {\n    fields: fields\n  }).then(function (res) {\n    var icon = _this.checked ? \"success\" : \"info\";\n    var message = _this.checked ? \"Ενεργοποιήθηκε\" : \"Απενεργοποιήθηκε\";\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert(icon, message);\n  })[\"catch\"](function (err) {\n    console.log(err);\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert(\"error\", \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n  });\n});\n$(\"#remove-cover-btn\").on(\"click\", function () {\n  var _this2 = this;\n\n  axios.patch(\"/media/remove-cover\", {\n    namespace: namespace,\n    id: bundleId\n  }).then(function (res) {\n    var cnt = _this2.parentElement;\n    $(\"#cover-image\").addClass(\"d-none\");\n    $(\"#cover-status\").removeClass(\"d-none\");\n    $(\"#change-cover-btn\").text(\"Προσθήκη\");\n    cnt.classList.remove(\"d-flex\");\n    cnt.classList.add(\"d-none\");\n  })[\"catch\"](function (err) {\n    console.log(err);\n  });\n});\n$(\"#add-users-btn\").on(\"click\", function () {\n  var pickedUsers = $(\".js-remaining-user-checkbox:checked\");\n  var ids = [];\n\n  for (var i = 0; i < pickedUsers.length; i++) {\n    ids.push(pickedUsers[i].dataset.userId);\n  }\n\n  addUserBundle(ids);\n});\n$(\"#remove-selected-users-btn\").on(\"click\", function () {\n  var pickUsers = $(\".js-active-user-checkbox:checked\");\n  var ids = [];\n\n  for (var i = 0; i < pickUsers.length; i++) {\n    ids.push(pickUsers[i].dataset.userId);\n  }\n\n  Swal.fire({\n    title: \"Είστε σίγουρος/η;\",\n    text: \"\\u0397 \\u03B5\\u03BD\\u03AD\\u03C1\\u03B3\\u03B5\\u03B9\\u03B1 \\u03B8\\u03B1 \\u03B1\\u03C6\\u03B1\\u03B9\\u03C1\\u03AD\\u03C3\\u03B5\\u03B9 \".concat(i, \" \\u03B1\\u03C0\\u03BF \\u03C4\\u03BF\\u03C5\\u03C2 \\u03C7\\u03C1\\u03AE\\u03C3\\u03C4\\u03B5\\u03C2 \\u03C4\\u03BF\\u03C5 Bundle.\"),\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonColor: '#536de6',\n    confirmButtonText: 'Ναι, αφαίρεση!',\n    cancelButtonText: 'Άκυρο'\n  }).then(function (result) {\n    if (result.isConfirmed) {\n      removeUsers(ids);\n    }\n  });\n});\n$(\"#remaining-all-users-checkbox\").on(\"click\", function () {\n  var minorCheckboxes = $(\".js-remaining-user-checkbox\");\n  var bulk = $(\"#add-users-btn\")[0];\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].minorCheckboxSwitcher(this, minorCheckboxes, bulk);\n});\n$(\"#main-active-users-checkbox\").on(\"change\", function () {\n  var minorCheckboxes = $(\".js-active-user-checkbox\");\n  var bulk = $(\"#users-bulk\")[0];\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].minorCheckboxSwitcher(this, minorCheckboxes, bulk);\n});\n$(\"#change-cover-btn\").on(\"click\", function () {\n  $(\"#gallery-content\")[0].dataset.type = \"cover\";\n  $(\"#gallery-modal\").modal('show');\n});\n$(\"#image-search\").on(\"input\", _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].searchHandler);\n$(\".js-gallery-page-btn\").on('click', _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].paginationHandler);\n$(\".js-add-image\").on(\"click\", _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].imageHandler);\n$(\".tab-link\").on(\"show.bs.tab\", function (event) {\n  event.preventDefault();\n  Swal.fire('Προσοχή', '<p>Θα πρέπει να αποθηκεύσετε το Bundle</p>για να συνεχίσετε!', 'info');\n});\n$(\".under-development\").on('click', function () {\n  Swal.fire({\n    toast: 'true',\n    position: 'top-end',\n    icon: \"info\",\n    title: \"Under Development...\",\n    showConfirmButton: false,\n    timer: 3000,\n    timerProgressBar: true\n  });\n});\n$(\"#bundle-delete-btn\").on(\"click\", function () {\n  Swal.fire({\n    title: 'Είστε σίγουρος;',\n    text: \"Η ενέργεια θα είναι μη αναστρέψιμη!\",\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonColor: '#ff5b5b',\n    confirmButtonText: 'Ναι, διαγραφή!',\n    cancelButtonText: 'Άκυρο'\n  }).then(function (result) {\n    if (result.value) {\n      $(\"#delete-bundle-form\").submit();\n    }\n  });\n});\nvar publishDate = $(\"#publish-date-select\").daterangepicker({\n  singleDatePicker: true,\n  drops: \"auto\",\n  opens: \"center\",\n  timePicker: true,\n  autoUpdateInput: false,\n  timePicker24Hour: true,\n  cancelButtonClasses: \"btn-secondary\",\n  locale: {\n    format: \"DD-MM-YYYY H:mm\"\n  }\n});\npublishDate.on(\"apply.daterangepicker\", function (event, picker) {\n  var startDate = picker.startDate.format('DD-MM-YYYY H:mm');\n  this.value = startDate;\n});\npublishDate.on('cancel.daterangepicker', function (event, picker) {\n  this.value = \"\";\n});\n$('#main-active-courses-checkbox').on(\"click\", function () {\n  var checkboxes = $('.js-course-checkbox');\n  var bulkBtn = $(\"#courses-bulk\")[0];\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].minorCheckboxSwitcher(this, checkboxes, bulkBtn);\n});\n$('#all-courses-checkbox').on(\"change\", function () {\n  var checkboxes = $('.js-remainings-checkbox');\n  var bulkBtn = $(\"#add-courses-btn\")[0];\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].minorCheckboxSwitcher(this, checkboxes, bulkBtn);\n});\n$('#add-courses-btn').on(\"click\", function () {\n  var checkboxes = $('.js-remainings-checkbox:checked');\n  var ids = [];\n\n  if (checkboxes.length == 0) {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('info', \"Δεν υπάρχουν επιλεγμένα μαθήματα...\");\n    return;\n  } else {\n    for (var i = 0; i < checkboxes.length; i++) {\n      ids.push(checkboxes[i].dataset.courseId);\n    }\n\n    postCourseIds(ids);\n    $(\"#remaining-courses-modal\").modal(\"hide\");\n  }\n});\n$('#remove-selected-courses-btn').on(\"click\", function () {\n  var checkboxes = $('.js-course-checkbox:checked');\n  var ids = [];\n\n  if (checkboxes.length == 0) {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('info', \"Δεν υπάρχουν επιλεγμένα μαθήματα...\");\n    return;\n  } else {\n    for (var i = 0; i < checkboxes.length; i++) {\n      ids.push(checkboxes[i].dataset.courseId);\n    }\n\n    Swal.fire({\n      title: \"Είστε σίγουρος/η;\",\n      html: \"<p class=\\\"mb-0\\\">\\u0397 \\u03B5\\u03BD\\u03AD\\u03C1\\u03B3\\u03B5\\u03B9\\u03B1 \\u03B8\\u03B1 \\u03B1\\u03C6\\u03B1\\u03B9\\u03C1\\u03AD\\u03C3\\u03B5\\u03B9 \".concat(i, \" Course(s)</p>\\u03B1\\u03C0\\u03BF \\u03C4\\u03BF Bundle.\"),\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#536de6',\n      confirmButtonText: 'Ναι, αφαίρεση!',\n      cancelButtonText: 'Άκυρο'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        removeCourses(ids);\n      }\n    });\n  }\n}); //! EventListerners /end\n//! Datatables\n\nvar bundleCoursesTable = $(\"#bundle-courses-list\").DataTable({\n  order: [3, \"desc\"],\n  searchDelay: \"1000\",\n  processing: true,\n  serverSide: true,\n  ajax: {\n    url: \"/bundles/bundle-courses-datatable\",\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    type: \"post\",\n    data: function data(d) {\n      return $.extend({}, d, {\n        bundleId: bundleId,\n        startDate: _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].startDate($(\"#bundle-course-date-range\")[0]),\n        endDate: _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].endDate($(\"#bundle-course-date-range\")[0])\n      });\n    }\n  },\n  columns: [{\n    data: 'action',\n    name: 'action',\n    className: \"align-middle text-center\",\n    orderable: false,\n    width: \"5%\"\n  }, {\n    data: 'title',\n    name: 'title',\n    className: \"align-middle cursor-default\"\n  }, {\n    data: 'curator',\n    name: 'curator',\n    className: \"align-middle cursor-default\"\n  }, {\n    data: 'topics',\n    name: 'topics',\n    className: \"align-middle cursor-default\"\n  }, {\n    data: 'version',\n    name: 'version',\n    className: \"align-middle text-center cursor-default\"\n  }, {\n    data: 'updated_at',\n    name: 'updated_at',\n    className: \"align-middle text-center cursor-default\",\n    render: function render(data) {\n      var date = new Date(data);\n      var day = date.toLocaleDateString().replace(/[/]/g, \"-\");\n      var hours = \"\".concat(date.getHours()).padStart(2, \"0\");\n      var minutes = \"\".concat(date.getMinutes()).padStart(2, \"0\");\n      var time = \"\".concat(hours, \":\").concat(minutes);\n      return \"<p class=\\\"mb-0\\\">\".concat(day, \"</p><p class=\\\"mb-0\\\">\").concat(time, \"</p>\");\n    }\n  }, {\n    data: 'created_at',\n    name: 'created_at',\n    className: \"align-middle text-center cursor-default\",\n    render: function render(data) {\n      var date = new Date(data);\n      var day = date.toLocaleDateString().replace(/[/]/g, \"-\");\n      var hours = \"\".concat(date.getHours()).padStart(2, \"0\");\n      var minutes = \"\".concat(date.getMinutes()).padStart(2, \"0\");\n      var time = \"\".concat(hours, \":\").concat(minutes);\n      return \"<p class=\\\"mb-0\\\">\".concat(day, \"</p><p class=\\\"mb-0\\\">\").concat(time, \"</p>\");\n    }\n  }, {\n    data: 'btns',\n    className: \"align-middle text-center\",\n    searchable: false,\n    orderable: false\n  }],\n  language: _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tableLocale,\n  fnInitComplete: function fnInitComplete(oSettings, json) {\n    var lenthSelection = $(\"select[name='bundle-courses-list_length']\");\n    lenthSelection.addClass(\"select2\");\n    lenthSelection.select2({\n      minimumResultsForSearch: -1\n    });\n  },\n  drawCallback: function drawCallback() {\n    $(\".dataTables_paginate > .pagination\").addClass(\"pagination-rounded\");\n    $(\".dataTables_wrapper > .row:first-child > div\").removeClass(\"col-sm-12 col-md-6\");\n    $(\".dataTables_wrapper > .row:first-child > div\").addClass(\"col-lg-12 col-xl-6 d-md-flex justify-content-md-center d-xl-block\");\n    $(\".js-remove-table-classes > thead > tr > th\").removeClass(\"cursor-default\");\n    activeCoursesCheckboxToggle();\n    removeCourseBtnInit();\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].resetBulk($(\"#courses-bulk\"), $(\"#main-active-courses-checkbox\"));\n  }\n}); //!##########################################\n//!\t\t\t\tDatatable filters\t\t\t#\n//!##########################################\n//* Append Course Materials Date Picker Filter\n\nvar bundleCourseSearchInput = $(\"#bundle-courses-list_filter > label > input\")[0];\nvar bundleCourseDateInput = _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createDateElm(\"bundle-course-date-range\");\nbundleCourseDateInput.appendBefore(bundleCourseSearchInput); //* Topic Filter\n\nvar courseLengthElm = $(\"#bundle-courses-list_length > label\")[0];\nvar topicFIlter = $(\"#topic-filter\")[0];\ncourseLengthElm.append(topicFIlter);\n$(\"#topic-filter\").select2({});\n$(\"#topic-filter\").on(\"change\", function () {\n  var label = $(\"#select2-topic-filter-container\")[0];\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].filterStyle(label, this.value);\n  bundleCoursesTable.column(3).search(this.value).draw();\n}); //* Course type filter\n\nvar activeCoursesType = _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createCourseTypeSelect(\"active-course-type-slt\");\ncourseLengthElm.append(activeCoursesType);\n$(\"#active-course-type-slt\").select2({\n  minimumResultsForSearch: -1\n});\n$(\"#active-course-type-slt\").on(\"change\", function () {\n  var label = $(\"#select2-active-course-type-slt-container\")[0];\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].filterStyle(label, this.value);\n  bundleCoursesTable.column(4).search(this.value).draw();\n}); //! Event Initializers!\n\nfunction removeCourseBtnInit() {\n  $(\".js-remove-course\").on(\"click\", function () {\n    var id = this.dataset.courseId;\n    Swal.fire({\n      title: \"Είστε σίγουρος/η;\",\n      text: \"\\u0397 \\u03B5\\u03BD\\u03AD\\u03C1\\u03B3\\u03B5\\u03B9\\u03B1 \\u03B8\\u03B1 \\u03B1\\u03C6\\u03B1\\u03B9\\u03C1\\u03AD\\u03C3\\u03B5\\u03B9 \\u03AD\\u03BD\\u03B1 \\u03B1\\u03C0\\u03BF \\u03C4\\u03B1 Courses.\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#536de6',\n      confirmButtonText: 'Ναι, αφαίρεση!',\n      cancelButtonText: 'Άκυρο'\n    }).then(function (result) {\n      if (result.isConfirmed) {\n        removeCourses([id]);\n      }\n    });\n  });\n}\n\nfunction activeCoursesCheckboxToggle() {\n  var mainCheckbox = $('#main-active-courses-checkbox')[0];\n  var minorCheckbox = $('.js-course-checkbox');\n  var bulkBtn = $(\"#courses-bulk\")[0];\n  minorCheckbox.unbind();\n  minorCheckbox.on(\"change\", function () {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mainCheckboxSwitcher(mainCheckbox, minorCheckbox, bulkBtn);\n  });\n}\n\nvar bundleUsersTable = $(\"#bundle-users-table\").DataTable({\n  order: [1, \"asc\"],\n  searchDelay: \"1000\",\n  processing: true,\n  serverSide: true,\n  ajax: {\n    url: \"/bundles/bundle-users-datatable\",\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    type: \"post\",\n    data: {\n      id: bundleId\n    }\n  },\n  columns: [{\n    data: 'action',\n    name: 'action',\n    orderable: false,\n    searchable: false,\n    className: \"align-middle text-center\"\n  }, {\n    data: 'last_name',\n    name: 'last_name',\n    className: \"align-middle cursor-default\"\n  }, {\n    data: 'email',\n    name: 'email',\n    className: \"align-middle text-center cursor-default\"\n  }, {\n    data: 'phone',\n    name: 'phone',\n    className: \"align-middle text-center cursor-default\"\n  }, {\n    data: 'btn',\n    name: 'btn',\n    orderable: false,\n    searchable: false,\n    className: \"align-middle text-center\"\n  }],\n  language: _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tableLocale,\n  drawCallback: function drawCallback() {\n    $(\".dataTables_paginate > .pagination\").addClass(\"pagination-rounded\");\n    $(\".dataTables_wrapper > .row:first-child > div\").removeClass(\"col-sm-12 col-md-6\");\n    $(\".dataTables_wrapper > .row:first-child > div\").addClass(\"col-lg-12 col-xl-6 d-md-flex justify-content-md-center d-xl-block\");\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].resetBulk($(\"#users-bulk\"), $(\"#main-active-users-checkbox\"));\n    activeUsersCheckboxesInit();\n    removeUserBinInit();\n  }\n}); //* Table eventlisteners init\n\nfunction removeUserBinInit() {\n  var bin = $(\".js-remove-user\");\n  bin.off();\n  bin.on(\"click\", function () {\n    var _this3 = this;\n\n    Swal.fire({\n      title: 'Είστε σίγουρος/η;',\n      html: \"<p class=\\\"mb-0\\\">\\u0397 \\u03B5\\u03BD\\u03AD\\u03C1\\u03B3\\u03B5\\u03B9\\u03B1 \\u03B8\\u03B1 \\u03B1\\u03C6\\u03B1\\u03B9\\u03C1\\u03AD\\u03C3\\u03B5\\u03B9 \\u03AD\\u03BD\\u03B1\\u03BD \\u03B1\\u03C0\\u03BF</p>\\u03C4\\u03BF\\u03C5\\u03C2 \\u03C7\\u03C1\\u03AE\\u03C3\\u03C4\\u03B5\\u03C2 \\u03C4\\u03BF\\u03C5 Bundle.\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#536de6',\n      confirmButtonText: 'Ναι, αφαίρεση!',\n      cancelButtonText: 'Άκυρο'\n    }).then(function (result) {\n      if (result.value) {\n        removeUsers([_this3.dataset.userId]);\n      }\n    });\n  });\n}\n\nfunction activeUsersCheckboxesInit() {\n  var minorCheckboxes = $(\".js-active-user-checkbox\");\n  var mainCheckbox = $(\"#main-active-users-checkbox\")[0];\n  var bulk = $(\"#users-bulk\")[0];\n  minorCheckboxes.off();\n  minorCheckboxes.on(\"change\", function () {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mainCheckboxSwitcher(mainCheckbox, minorCheckboxes, bulk);\n  });\n}\n\nvar remainingCoursesTable = $(\"#remaining-courses-table\").DataTable({\n  order: [1, \"asc\"],\n  searchDelay: \"1000\",\n  processing: true,\n  serverSide: true,\n  ajax: {\n    url: \"/bundles/remaining-courses-datatable\",\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    type: \"post\",\n    data: {\n      bundleId: bundleId\n    }\n  },\n  columns: [{\n    data: 'action',\n    name: 'action',\n    orderable: false,\n    searchable: false,\n    className: \"align-middle text-center\"\n  }, {\n    data: 'title',\n    name: 'title',\n    className: \"cursor-default\"\n  }, {\n    data: 'curator',\n    name: 'curator',\n    className: \"align-middle text-center cursor-default\"\n  }, {\n    data: 'topics',\n    name: 'topics',\n    className: \"align-middle cursor-default\"\n  }, {\n    data: 'version',\n    name: 'version',\n    className: \"align-middle text-center cursor-default\"\n  }, {\n    data: 'addBtn',\n    name: 'addBtn',\n    orderable: false,\n    searchable: false,\n    className: \"align-middle text-center\"\n  }],\n  language: _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tableLocale,\n  fnInitComplete: function fnInitComplete(oSettings, json) {\n    var lenthSelection = $(\"select[name='remaining-courses-table_length']\");\n    lenthSelection.addClass(\"select2\");\n    lenthSelection.select2({\n      minimumResultsForSearch: -1\n    });\n  },\n  drawCallback: function drawCallback() {\n    $(\".dataTables_paginate > .pagination\").addClass(\"pagination-rounded\");\n    $(\".dataTables_wrapper > .row:first-child > div\").removeClass(\"col-sm-12 col-md-6\");\n    $(\".dataTables_wrapper > .row:first-child > div\").addClass(\"col-lg-12 col-xl-6 d-md-flex justify-content-md-center d-xl-block\");\n    $(\".js-remove-table-classes > thead > tr > th\").removeClass(\"cursor-pointer\");\n    $(\".js-remove-table-classes > tfoot > tr > th\").removeClass(\"cursor-pointer\");\n    addcourse();\n    remainingsCheckboxes();\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].resetAddButton($(\"#add-courses-btn\"), $(\"#all-courses-checkbox\"));\n  }\n}); //! DataTables /end\n//! DataTables function / EventListener\n\nfunction addcourse() {\n  $('.js-add-course-btn').on(\"click\", function () {\n    $('.js-add-course-btn').prop(\"disabled\", true);\n    var courseId = [this.dataset.courseId];\n    postCourseIds(courseId);\n  });\n}\n\nfunction remainingsCheckboxes() {\n  var mainCheckbox = $('#all-courses-checkbox')[0];\n  var minorCheckbox = $('.js-remainings-checkbox');\n  var bulkBtn = $(\"#add-courses-btn\")[0];\n  minorCheckbox.unbind();\n  minorCheckbox.on(\"change\", function () {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mainCheckboxSwitcher(mainCheckbox, minorCheckbox, bulkBtn);\n  });\n} // DataTables function / EventListener End\n//!##################################################\n//!\t\t\t\t\tAdd Courses Filters\t\t\t\t#\n//!##################################################\n//* Topic Filter\n\n\nvar remainingCoursesLength = $(\"#remaining-courses-table_length > label\")[0];\nvar addCourseTopicFilter = $(\"#add-course-topic-filter\")[0];\nremainingCoursesLength.append(addCourseTopicFilter);\n$(\"#add-course-topic-filter\").select2({});\n$(\"#add-course-topic-filter\").on(\"change\", function () {\n  var label = $(\"#select2-add-course-topic-filter-container\")[0];\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].filterStyle(label, this.value);\n  remainingCoursesTable.column(3).search(this.value).draw();\n}); //* Course type filter\n\nvar addCoursesTypesFilter = _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createCourseTypeSelect(\"add-courses-type-filter\");\nremainingCoursesLength.append(addCoursesTypesFilter), $(\"#add-courses-type-filter\").select2({\n  minimumResultsForSearch: -1\n});\n$(\"#add-courses-type-filter\").on(\"change\", function () {\n  var label = $(\"#select2-add-courses-type-filter-container\")[0];\n  _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].filterStyle(label, this.value);\n  remainingCoursesTable.column(4).search(this.value).draw();\n});\n\nfunction postCourseIds(courseIds) {\n  axios.patch(\"/bundles/add-courses\", {\n    bundleId: bundleId,\n    courseIds: courseIds\n  }).then(function (res) {\n    var message = courseIds.length == 1 ? \"1 Course προστέθηκε\" : \"\".concat(courseIds.length, \" Course \\u03C0\\u03C1\\u03BF\\u03C3\\u03C4\\u03AD\\u03B8\\u03B7\\u03BA\\u03B1\\u03BD\");\n    bundleCoursesTable.ajax.reload();\n    remainingCoursesTable.ajax.reload();\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('success', message);\n  })[\"catch\"](function (err) {\n    console.log(err);\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('error', \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n  });\n}\n\nfunction removeCourses(courseIds) {\n  axios.patch(\"/bundles/remove-courses\", {\n    bundleId: bundleId,\n    courseIds: courseIds\n  }).then(function (res) {\n    var message = courseIds.length == 1 ? \"1 Course Αφαιρέθηκε\" : \"\".concat(courseIds.length, \" Course \\u03B1\\u03C6\\u03B1\\u03B9\\u03C1\\u03AD\\u03B8\\u03B7\\u03BA\\u03B1\\u03BD\");\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('info', message);\n    bundleCoursesTable.ajax.reload();\n    remainingCoursesTable.ajax.reload();\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].resetBulk($(\"#courses-bulk\"), $(\"#main-active-courses-checkbox\"));\n  })[\"catch\"](function (err) {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('error', \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n  });\n}\n\nfunction removeUsers(users) {\n  axios.post(\"/bundles/remove-users\", {\n    bundleId: bundleId,\n    users: users\n  }).then(function (res) {\n    var count = users.length;\n    var message = count == 1 ? \"\\u039F \\u03C7\\u03C1\\u03AE\\u03C3\\u03C4\\u03B7\\u03C2 \\u03B1\\u03C6\\u03B1\\u03B9\\u03C1\\u03AD\\u03B8\\u03B7\\u03BA\\u03B5...\" : \"\".concat(count, \" \\u03C7\\u03C1\\u03AE\\u03C3\\u03C4\\u03B5\\u03C2 \\u03B1\\u03C6\\u03B1\\u03B9\\u03C1\\u03AD\\u03B8\\u03B7\\u03BA\\u03B1\\u03BD...\");\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert(\"info\", message);\n    bundleUsersTable.ajax.reload();\n    remainingUsersTable.ajax.reload();\n  })[\"catch\"](function (err) {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('error', \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n  });\n}\n\nvar remainingUsersTable = $(\"#remaining-users-table\").DataTable({\n  order: [1, \"asc\"],\n  searchDelay: \"1000\",\n  processing: true,\n  serverSide: true,\n  ajax: {\n    url: \"/bundles/remaining-users-datatable\",\n    headers: {\n      'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n    },\n    type: \"post\",\n    data: {\n      bundleId: bundleId\n    }\n  },\n  columns: [{\n    data: 'action',\n    name: 'action',\n    orderable: false,\n    searchable: false,\n    className: \"align-middle text-center\"\n  }, {\n    data: 'last_name',\n    name: 'last_name',\n    className: \"align-middle cursor-default\"\n  }, {\n    data: 'email',\n    name: 'email',\n    className: \"align-middle text-center cursor-default\"\n  }, {\n    data: 'phone',\n    name: 'phone',\n    className: \"align-middle text-center cursor-default\"\n  }, {\n    data: 'btn',\n    name: 'btn',\n    orderable: false,\n    searchable: false,\n    className: \"align-middle text-center\"\n  }],\n  language: _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].tableLocale,\n  drawCallback: function drawCallback() {\n    $(\".dataTables_paginate > .pagination\").addClass(\"pagination-rounded\");\n    $(\".dataTables_wrapper > .row:first-child > div\").removeClass(\"col-sm-12 col-md-6\");\n    $(\".dataTables_wrapper > .row:first-child > div\").addClass(\"col-lg-12 col-xl-6 d-md-flex justify-content-md-center d-xl-block\");\n    addUserBtnInit();\n    minorUsersCheckboxInit();\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].resetAddButton($(\"#add-users-btn\"), $(\"#remaining-all-users-checkbox\"));\n  }\n});\n\nfunction addUserBtnInit() {\n  var addBtn = $(\".js-add-user-btn\");\n  addBtn.on(\"click\", function () {\n    addBtn.prop(\"disabled\", true);\n    addUserBundle([this.dataset.userId]);\n  });\n}\n\nfunction minorUsersCheckboxInit() {\n  var main = $(\"#remaining-all-users-checkbox\")[0];\n  var minors = $(\".js-remaining-user-checkbox\");\n  var bulk = $(\"#add-users-btn\")[0];\n  minors.off();\n  minors.on(\"change\", function () {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mainCheckboxSwitcher(main, minors, bulk);\n  });\n}\n\nfunction addUserBundle(users) {\n  axios.post(\"/bundles/add-users\", {\n    bundleId: bundleId,\n    users: users\n  }).then(function (res) {\n    var count = users.length;\n    var message = count == 1 ? \"Ένας χρήστης προστέθηκε.\" : \"\".concat(count, \" \\u03C7\\u03C1\\u03AE\\u03C3\\u03C4\\u03B5\\u03C2 \\u03C0\\u03C1\\u03BF\\u03C3\\u03C4\\u03AD\\u03B8\\u03B7\\u03BA\\u03B1\\u03BD.\");\n    remainingUsersTable.ajax.reload();\n    bundleUsersTable.ajax.reload();\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert(\"success\", message);\n\n    if (count > 1) {\n      $(\"#add-users\").modal(\"hide\");\n    }\n  })[\"catch\"](function (err) {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toastAlert('error', \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n  });\n} //!##########################################\n//!\t\t\t\tInitializations\t\t\t\t#\n//!##########################################\n//* Date Search\n\n\nvar dateRange = $(\".js-date-search\");\ndateRange.daterangepicker(_main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].datePickerConfig);\ndateRange.on(\"apply.daterangepicker\", function (event, picker) {\n  var startDate = picker.startDate.format('DD/MM/YYYY');\n  var endDate = picker.endDate.format('DD/MM/YYYY');\n  this.value = \"\".concat(startDate, \" - \").concat(endDate);\n  this.classList.add(\"select2-selected\");\n  var tableId = $(this).closest(\".table-cnt\").find(\".js-table\").attr(\"id\");\n  $(\"#\".concat(tableId)).DataTable().ajax.reload();\n});\ndateRange.on('cancel.daterangepicker', function (event, picker) {\n  this.value = \"\";\n  this.classList.remove(\"select2-selected\");\n  var tableId = $(this).closest(\".table-cnt\").find(\".js-table\").attr(\"id\");\n  $(\"#\".concat(tableId)).DataTable().ajax.reload();\n});\ndateRange.on(\"input\", function () {\n  this.value = this.value.replace(/[^0-9]/g, \"\").replace(/^(\\d{2})?(\\d{2})?(\\d{4})?(\\d{2})?(\\d{2})?(\\d{4})?/g, '$1/$2/$3 - $4/$5/$6').substr(0, 23);\n});\n$R.add('plugin', 'mediaLibrary', {\n  translations: {\n    en: {\n      \"mediaLibrary\": \"Media Library\"\n    }\n  },\n  init: function init(app) {\n    this.app = app;\n    this.lang = app.lang;\n    this.toolbar = app.toolbar;\n  },\n  start: function start() {\n    var buttonData = {\n      title: this.lang.get(\"mediaLibrary\"),\n      icon: \"<i class='mdi mdi-book-open-page-variant'></i>\",\n      api: \"plugin.mediaLibrary.toggle\"\n    };\n    var $button = this.toolbar.addButton(\"mediaLibrary\", buttonData);\n  },\n  toggle: function toggle() {\n    $('#gallery-content')[0].dataset.editorId = \"#summary\";\n    $('#gallery-content')[0].dataset.type = \"redactor\";\n    $('#gallery-modal').modal('show');\n  }\n});\n$R(\"#summary\", {\n  buttons: ['html', 'undo', 'redo', 'format', 'bold', 'underline', 'italic', 'deleted', 'sup', 'sub', 'lists', 'file', 'link', 'image'],\n  buttonsAddBefore: {\n    before: 'image',\n    buttons: ['mediaLibrary']\n  },\n  style: false,\n  plugins: [\"mediaLibrary\", 'alignment'],\n  minHeight: '150px',\n  imageResizable: true,\n  imagePosition: {\n    \"left\": \"image-left\",\n    \"right\": \"image-right\",\n    \"center\": \"image-center text-center\"\n  },\n  imageFloatMargin: '20px',\n  imageUpload: \"/media/upload-images\",\n  // imageData: {\n  // \tid: bundleId,\n  // \tnamespace: \"App\\\\Bundle\"\n  // },\n  callbacks: {\n    upload: {\n      beforeSend: function beforeSend(xhr) {\n        xhr.setRequestHeader('X-CSRF-Token', $('meta[name=\"csrf-token\"]').attr('content'));\n      }\n    }\n  }\n});\n_plugins_article_editor_article_editor__WEBPACK_IMPORTED_MODULE_1___default.a.add('plugin', 'mediaLibrary', {\n  start: function start() {\n    this.app.addbar.add('mediaButton', {\n      title: 'Media Library',\n      icon: \"<i class='mdi mdi-book-open-page-variant'></i>'\",\n      command: 'mediaLibrary.modal'\n    });\n  },\n  modal: function modal(params, button) {\n    this.app.popup.close();\n    $('#gallery-content')[0].dataset.editorId = \"#description\";\n    $('#gallery-content')[0].dataset.type = \"article\";\n    $('#gallery-modal').modal('show');\n  }\n});\n_plugins_article_editor_article_editor__WEBPACK_IMPORTED_MODULE_1___default()('#description', {\n  css: \"/css/\",\n  custom: {\n    css: [\"/css/bootstrap.min.css\", \"/css/customArticleStyle.css\"]\n  },\n  plugins: ['mediaLibrary', 'reorder'],\n  classes: {\n    img: 'img-fluid',\n    p: 'text-wrap'\n  },\n  grid: {\n    classname: 'row',\n    columns: 12,\n    gutter: '1px',\n    offset: {\n      left: '15px',\n      right: '15px'\n    },\n    patterns: {\n      '6|6': 'col-6|col-6',\n      '4|4|4': 'col-4|col-4|col-4',\n      '3|3|3|3': 'col-3|col-3|col-3|col-3',\n      '2|2|2|2|2|2': 'col-2|col-2|col-2|col-2|col-2|col-2',\n      '3|6|3': 'col-3|col-6|col-3',\n      '2|8|2': 'col-2|col-8|col-2',\n      '5|7': 'col-5|col-7',\n      '7|5': 'col-7|col-5',\n      '4|8': 'col-4|col-8',\n      '8|4': 'col-8|col-4',\n      '3|9': 'col-3|col-9',\n      '9|3': 'col-9|col-3',\n      '2|10': 'col-2|col-10',\n      '10|2': 'col-10|col-2',\n      '12': 'col-12'\n    }\n  },\n  align: {\n    left: \"text-left\",\n    center: \"text-center\",\n    right: \"text-right\"\n  },\n  editor: {\n    minHeight: \"300px\"\n  },\n  image: {\n    upload: \"/media/upload-images\",\n    data: {\n      \"_token\": $('meta[name=\"csrf-token\"]').attr('content') // \"id\": bundleId,\n      // namespace: \"App\\\\Bundle\"\n\n    }\n  }\n});\nvar dropzone = document.getElementById(\"file-pond\");\nfilepond__WEBPACK_IMPORTED_MODULE_2__[\"registerPlugin\"](filepond_plugin_file_validate_type__WEBPACK_IMPORTED_MODULE_3___default.a);\nvar pond = filepond__WEBPACK_IMPORTED_MODULE_2__[\"create\"](dropzone, {\n  name: 'file[]',\n  labelIdle: \"Drag & Drop your files or Browse\",\n  server: {\n    url: baseUrl,\n    process: {\n      url: '/media/upload-images',\n      headers: {\n        \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr('content')\n      }\n    }\n  },\n  onprocessfiles: function onprocessfiles() {\n    _main__WEBPACK_IMPORTED_MODULE_0__[\"default\"].paginationRequest(1, \"\");\n  },\n  allowMultiple: true,\n  allowRemove: true,\n  allowRevert: false,\n  acceptedFileTypes: ['image/png', 'image/jpeg'],\n  className: \"js-filepond-file-dragging\"\n});\nvar dropArea = document.getElementsByClassName(\"js-filepond-file-dragging\");\n\nfor (var i = 0; i < dropArea.length; i++) {\n  dropArea[i].addEventListener(\"dragover\", function (event) {\n    var draggingArea = this.getElementsByClassName(\"filepond--drop-label\")[0];\n    var label = draggingArea.querySelector(\"label\");\n    draggingArea.classList.add(\"limegreen\");\n    label.classList.add(\"text-limegreen\");\n  });\n  dropArea[i].addEventListener(\"dragleave\", function (event) {\n    var draggingArea = this.getElementsByClassName(\"filepond--drop-label\")[0];\n    var label = draggingArea.querySelector(\"label\");\n    draggingArea.classList.remove(\"limegreen\");\n    label.classList.remove(\"text-limegreen\");\n  });\n  dropArea[i].addEventListener(\"mouseleave\", function (event) {\n    var draggingArea = this.getElementsByClassName(\"filepond--drop-label\")[0];\n    var label = draggingArea.querySelector(\"label\");\n    draggingArea.classList.remove(\"limegreen\");\n    label.classList.remove(\"text-limegreen\");\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/dashboard/bundles/bundleProfile.js\n");

/***/ }),

/***/ "./resources/js/dashboard/main.js":
/*!****************************************!*\
  !*** ./resources/js/dashboard/main.js ***!
  \****************************************/
/*! exports provided: ALLOWEDTYPES, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ALLOWEDTYPES\", function() { return ALLOWEDTYPES; });\nElement.prototype.findParent = function (loops) {\n  var parent = this;\n\n  for (var i = 0; i < loops; i++) {\n    parent = parent.parentElement;\n  }\n\n  return parent;\n}, false;\nElement.prototype.appendBefore = function (element) {\n  element.parentNode.insertBefore(this, element);\n}, false;\nElement.prototype.appendAfter = function (element) {\n  element.parentNode.insertBefore(this, element.nextSibling);\n}, false; //!##########################################\n//!\t\t\t\tGlobal Variables\t\t\t#\n//!##########################################\n\nvar baseUrl = window.location.origin;\nvar timer = 0;\nvar ALLOWEDTYPES = [\"application/octet-stream\", \"application/x-zip-compressed\", \"application/pdf\", \"application/msword\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.template\", \"application/vnd.ms-word.document.macroEnabled.12\", \"application/vnd.ms-word.template.macroEnabled.12\", \"application/vnd.ms-excel\", \"application/vnd.ms-excel\", \"application/vnd.ms-excel\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.template\", \"application/vnd.ms-excel.sheet.macroEnabled.12\", \"application/vnd.ms-excel.template.macroEnabled.12\", \"application/vnd.ms-excel.addin.macroEnabled.12\", \"application/vnd.ms-excel.sheet.binary.macroEnabled.12\", \"application/vnd.ms-powerpoint\", \"application/vnd.openxmlformats-officedocument.presentationml.presentation\", \"application/vnd.openxmlformats-officedocument.presentationml.template\", \"application/vnd.openxmlformats-officedocument.presentationml.slideshow\", \"application/vnd.ms-powerpoint.addin.macroEnabled.12\", \"application/vnd.ms-powerpoint.presentation.macroEnabled.12\", \"application/vnd.ms-powerpoint.template.macroEnabled.12\", \"application/vnd.ms-powerpoint.slideshow.macroEnabled.12\", \"application/vnd.ms-access\", \"audio/mpeg\", \"application/vnd.oasis.opendocument.presentation\", \"application/vnd.oasis.opendocument.spreadsheet\", \"application/vnd.oasis.opendocument.text\", \"application/rtf\", \"application/vnd.oasis.opendocument.graphics\", \"text/html\"]; //!##########################################\n//!\t\t\t\tConfigurations\t\t\t\t#\n//!##########################################\n//!ALERT\n//!============================================================\n\nfunction toastAlert(icon, message) {\n  Swal.fire({\n    toast: 'true',\n    position: 'top-end',\n    icon: icon,\n    title: message,\n    showConfirmButton: false,\n    timer: 3000,\n    timerProgressBar: true\n  });\n}\n\nfunction toastAlertDelete(text) {\n  var icon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"warning\";\n  return Swal.fire({\n    title: 'Είστε σίγουρος;',\n    text: text,\n    icon: icon,\n    showCancelButton: true,\n    confirmButtonColor: '#ff5b5b',\n    confirmButtonText: 'Ναί, διαγραφή!',\n    cancelButtonText: 'Άκυρο'\n  });\n} //!CONFIG\n//!============================================================\n\n\nvar articleConfig = {\n  css: \"/css/\",\n  custom: {\n    css: [\"/css/bootstrap.min.css\", \"/css/customArticleStyle.css\"]\n  },\n  // plugins: ['mediaLibrary', 'reorder'],\n  classes: {\n    img: 'img-fluid',\n    p: 'text-wrap'\n  },\n  grid: {\n    classname: 'row',\n    columns: 12,\n    gutter: '1px',\n    offset: {\n      left: '15px',\n      right: '15px'\n    },\n    patterns: {\n      '6|6': 'col-6|col-6',\n      '4|4|4': 'col-4|col-4|col-4',\n      '3|3|3|3': 'col-3|col-3|col-3|col-3',\n      '2|2|2|2|2|2': 'col-2|col-2|col-2|col-2|col-2|col-2',\n      '3|6|3': 'col-3|col-6|col-3',\n      '2|8|2': 'col-2|col-8|col-2',\n      '5|7': 'col-5|col-7',\n      '7|5': 'col-7|col-5',\n      '4|8': 'col-4|col-8',\n      '8|4': 'col-8|col-4',\n      '3|9': 'col-3|col-9',\n      '9|3': 'col-9|col-3',\n      '2|10': 'col-2|col-10',\n      '10|2': 'col-10|col-2',\n      '12': 'col-12'\n    }\n  },\n  align: {\n    left: \"text-left\",\n    center: \"text-center\",\n    right: \"text-right\"\n  },\n  editor: {\n    minHeight: \"300px\"\n  },\n  image: {\n    upload: \"/media/upload-images\",\n    data: {\n      \"_token\": $('meta[name=\"csrf-token\"]').attr('content')\n    }\n  }\n};\nvar redactorConfig = {\n  buttons: ['html', 'undo', 'redo', 'format', 'bold', 'underline', 'italic', 'deleted', 'sup', 'sub', 'lists', 'file', 'link', 'image'],\n  style: false,\n  plugins: ['alignment'],\n  minHeight: '150px'\n};\nvar datePickerConfig = {\n  ranges: {\n    'Today': [moment(), moment()],\n    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n    'Last 7 Days': [moment().subtract(6, 'days'), moment()],\n    'Last 30 Days': [moment().subtract(29, 'days'), moment()],\n    'This Month': [moment().startOf('month'), moment().endOf('month')],\n    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],\n    'This Year': [moment().startOf('year'), moment().endOf('year')],\n    'Last Year': [moment().subtract(1, 'year').startOf('year'), moment().subtract(1, 'year').endOf('year')]\n  },\n  alwaysShowCalendars: true,\n  showCustomRangeLabel: false,\n  drops: \"auto\",\n  autoUpdateInput: false,\n  opens: \"center\",\n  locale: {\n    format: \"DD/MM/YYYY\"\n  }\n};\nvar tableLocale = {\n  emptyTable: \"Δεν υπάρχουν εγγραφές\",\n  info: \"_START_ έως _END_ απο τα _TOTAL_ αποτελέσματα\",\n  infoEmpty: \"0 απο 0 τα 0 αποτελέσματα\",\n  lengthMenu: \"_MENU_\",\n  loadingRecords: \"Φόρτωση ...\",\n  processing: \"Επεξεργασία ...\",\n  search: \"\",\n  searchPlaceholder: \"Αναζήτηση... \",\n  zeroRecords: \"Δεν βρέθηκαν αποτελέσματα\",\n  paginate: {\n    previous: \"<i class='mdi mdi-chevron-left'>\",\n    next: \"<i class='mdi mdi-chevron-right'>\"\n  },\n  infoFiltered: \"(Φιλτραρισμένα απο τις _MAX_ εγγραφές)\"\n}; //!GLOBAL FUNCTION\n//!============================================================\n\nfunction mainCheckboxSwitcher(main, minor) {\n  var bulkBtn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var status = true;\n  var counter = 0;\n  main.checked = true;\n\n  for (var i = 0; i < minor.length; i++) {\n    if (!minor[i].checked) {\n      minor[i].findParent(3).classList.remove(\"bg-selected\");\n      main.checked = false;\n    } else {\n      minor[i].findParent(3).classList.add(\"bg-selected\");\n      counter++;\n      status = false;\n    }\n  }\n\n  if (bulkBtn) {\n    bulkModifier(bulkBtn, status, counter);\n  }\n}\n\nfunction minorCheckboxSwitcher(main, minor) {\n  var bulkBtn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var counter = 0;\n  var status = true;\n\n  if (main.checked && minor.length > 0) {\n    counter = minor.length;\n    status = false;\n\n    for (var i = 0; i < minor.length; i++) {\n      minor[i].checked = true;\n      minor[i].findParent(3).classList.add(\"bg-selected\");\n    }\n  } else {\n    for (var i = 0; i < minor.length; i++) {\n      minor[i].checked = false;\n      minor[i].findParent(3).classList.remove(\"bg-selected\");\n    }\n  }\n\n  if (bulkBtn) {\n    bulkModifier(bulkBtn, status, counter);\n  }\n}\n\nfunction bulkModifier(bulkBtn, status, sum) {\n  var text = bulkBtn.dataset.text ? bulkBtn.dataset.text : \"Επιλογές\";\n  var enabledColor = bulkBtn.dataset.enabledColor ? bulkBtn.dataset.enabledColor : \"btn-warning\";\n  var disabledColor = bulkBtn.dataset.disabledColor ? bulkBtn.dataset.disabledColor : \"btn-secondary\";\n\n  if (status) {\n    bulkBtn.classList.add(disabledColor);\n    bulkBtn.classList.remove(enabledColor);\n    bulkBtn.textContent = \"\".concat(text, \" (0)  \");\n    bulkBtn.disabled = true;\n  } else {\n    bulkBtn.classList.add(enabledColor);\n    bulkBtn.classList.remove(disabledColor);\n    bulkBtn.textContent = \"\".concat(text, \"  (\").concat(sum, \")  \");\n    bulkBtn.disabled = false;\n  }\n}\n\nfunction filterStyle(input, value) {\n  if (value == \"\") {\n    input.classList.remove(\"select2-selected\");\n  } else {\n    input.classList.add(\"select2-selected\");\n  }\n}\n\nvar filterButton = function filterButton(attr, column, table, tableId) {\n  $(attr).detach().appendTo(tableId);\n  $(attr).on('change', function () {\n    table.columns(column).search(this.value).draw();\n  });\n};\n\nvar changeInputHidden = function changeInputHidden(attr, hiddenAttr) {\n  $(attr).change(function () {\n    if (attr == \"#activeMaterial\") {\n      this.value = $(this).prop('checked') == true ? 1 : 0;\n    }\n\n    var hiddenValue = $(hiddenAttr)[0].value = this.value;\n  });\n};\n\nfunction createStateSelect() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var selectElm = document.createElement(\"select\");\n  selectElm.classList.add(\"ml-1\", \"select2\");\n  selectElm.id = id;\n  selectElm.innerHTML = \"\\n\\t\\t<option value=\\\"\\\">\\u038C\\u03BB\\u03B5\\u03C2 \\u03BF\\u03B9 \\u039A\\u03B1\\u03C4\\u03B1\\u03C3\\u03C4\\u03AC\\u03C3\\u03B5\\u03B9\\u03C2</option>\\n\\t\\t<option value=\\\"1\\\">\\u0395\\u03BD\\u03B5\\u03C1\\u03B3\\u03AC</option>\\n\\t\\t<option value=\\\"0\\\">\\u0391\\u03BD\\u03B5\\u03BD\\u03B5\\u03C1\\u03B3\\u03AC</option>\\n\\t\";\n  return selectElm;\n}\n\nfunction createDateElm(id) {\n  var input = document.createElement(\"input\");\n  input.classList.add(\"form-control\", \"date\", \"d-inline-block\", \"ml-1\", \"js-date-search\");\n  input.id = id;\n  input.dataset.toggle = \"date-picker\";\n  input.dataset.cancelClass = \"btn-secondary\";\n  input.style.height = \"31.96px\";\n  input.style.width = \"195px\";\n  input.placeholder = \"Επιλέξτε ημερομηνίες...\";\n  return input;\n}\n\nfunction createCourseTypeSelect() {\n  var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var selectElm = document.createElement(\"select\");\n  selectElm.classList.add(\"ml-1\", \"select2\");\n  selectElm.id = id;\n  selectElm.innerHTML = \"\\n\\t\\t<option value=\\\"\\\">\\u038C\\u03BB\\u03B5\\u03C2 \\u03BF\\u03B9 \\u0395\\u03BA\\u03B4\\u03CC\\u03C3\\u03B5\\u03B9\\u03C2</option>\\n\\t\\t<option value=\\\"Normal\\\">Normal</option>\\n\\t\\t<option value=\\\"Trial\\\">Trial</option>\\n\\t\";\n  return selectElm;\n}\n\nfunction startDate(input) {\n  var dateInput = input;\n\n  if (!dateInput || dateInput.value == \"\") {\n    return \"\";\n  }\n\n  var dateInputValue = dateInput.value.split(\" - \");\n  var firstDate = dateInputValue[0].split(\"/\").reverse().join(\"-\");\n  return firstDate;\n}\n\nfunction endDate(input) {\n  var dateInput = input;\n\n  if (!dateInput || dateInput.value == \"\") {\n    return \"\";\n  }\n\n  var dateInputValue = dateInput.value.split(\" - \");\n  var secondDate = dateInputValue[1].split(\"/\").reverse().join(\"-\");\n  return secondDate;\n}\n\nfunction resetBulk(bulkBtn, checkbox) {\n  bulkBtn.text(\"Επιλογές  (0)\");\n  bulkBtn.addClass(\"btn-secondary\");\n  bulkBtn.removeClass(\"btn-warning\");\n  bulkBtn.prop(\"disabled\", true);\n  checkbox.prop(\"checked\", false);\n}\n\nfunction resetAddButton(addBtn, checkbox) {\n  addBtn.text(\"Προσθήκη Επιλογών (0)\");\n  addBtn.addClass(\"btn-secondary\");\n  addBtn.removeClass(\"btn-primary\");\n  addBtn.prop(\"disabled\", true);\n  checkbox.prop(\"checked\", false);\n} //!##############################################\n//!\t\t\t\tMedia Library Functions\t\t\t#\n//!##############################################\n\n\nfunction paginationHandler(event) {\n  event.preventDefault();\n  var activePage = this.href.split(\"page=\")[1];\n  var search = $(\"#image-search\").val();\n  paginationRequest(activePage, search);\n}\n\nfunction searchHandler() {\n  clearTimeout(timer);\n\n  if (this.value.length < 3 || this.value == \"\") {\n    timer = setTimeout(paginationRequest, 800, 1, \"\");\n  } else {\n    timer = setTimeout(paginationRequest, 800, 1, this.value);\n  }\n}\n\nfunction imageHandler() {\n  var modal = $(\"#gallery-content\")[0];\n  var model = modal.dataset.model;\n  var modelId = modal.dataset.id;\n  var editorId = modal.dataset.editorId;\n  var type = modal.dataset.type;\n  var image = {\n    'img': {\n      url: \"\".concat(this.dataset.imageSource)\n    }\n  };\n\n  if (type == \"article\") {\n    ArticleEditor(editorId).image.insert(image);\n  } else if (type == \"redactor\") {\n    $R(editorId, 'insertion.insertHtml', \"<img class=\\\"img-fluid\\\" src=\\\"\".concat(this.dataset.imageSource, \"\\\" alt=\\\"\").concat(this.dataset.name, \"\\\" />\"));\n  } else if (type == \"gallery\") {\n    $(\"#remove-all-images-btn\").removeClass(\"d-none\");\n    addToGallery(model, modelId, this.dataset.imageId);\n    return;\n  } else {\n    changeCoverRequest(model, modelId, this.dataset.imageSource);\n  }\n\n  $(\"#gallery-modal\").modal('hide');\n}\n\nfunction paginationRequest(activePage, search) {\n  axios.get(\"/media/images\", {\n    params: {\n      page: activePage,\n      search: search\n    }\n  }).then(function (res) {\n    var gallery = $(\"#gallery-content\")[0];\n    gallery.innerHTML = res.data;\n    var pagination = gallery.getElementsByClassName(\"js-gallery-page-btn\");\n    var addBtns = gallery.getElementsByClassName(\"js-add-image\");\n\n    for (var i = 0; i < addBtns.length; i++) {\n      addBtns[i].removeEventListener(\"click\", imageHandler);\n      addBtns[i].addEventListener(\"click\", imageHandler);\n    }\n\n    for (var _i = 0; _i < pagination.length; _i++) {\n      pagination[_i].removeEventListener(\"click\", paginationHandler);\n\n      pagination[_i].addEventListener(\"click\", paginationHandler);\n    }\n  });\n}\n\nfunction changeCoverRequest(namespace, id, url) {\n  if (typeof id === \"undefined\" && namespace == \"App\\\\User\") {\n    var img = $(\"#cover-image\")[0];\n    var removeBtnCnt = $(\"#remove-cover-btn\").parent();\n    img.src = \"\".concat(url);\n    img.classList.remove(\"d-none\");\n    removeBtnCnt.removeClass(\"d-none\");\n    removeBtnCnt.addClass(\"d-flex\");\n    $(\"#custom-file\")[0].value = \"\".concat(url);\n  } else {\n    axios.patch(\"/media/cover/replace\", {\n      namespace: namespace,\n      id: id,\n      url: url\n    }).then(function (res) {\n      var img = $(\"#cover-image\")[0];\n      var removeBtnCnt = $(\"#remove-cover-btn\").parent();\n      img.src = \"\".concat(baseUrl, \"/\").concat(url);\n      img.classList.remove(\"d-none\");\n      $(\"#change-cover-btn\").text(\"Αλλαγή\");\n      $(\"#cover-status\").addClass(\"d-none\");\n      removeBtnCnt.removeClass(\"d-none\");\n      removeBtnCnt.addClass(\"d-flex\");\n      toastAlert(\"success\", \"Το Cover άλλαξε!\");\n    })[\"catch\"](function (err) {\n      console.log(err);\n      toastAlert('error', \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n    });\n  }\n}\n\nfunction addToGallery(namespace, id, imageId) {\n  axios.post(\"/media/gallery\", {\n    namespace: namespace,\n    modelId: id,\n    ids: [imageId]\n  }).then(function (res) {\n    var gallery = $(\"#gallery-cnt\");\n    gallery.html(res.data);\n    var closeBtns = gallery.find(\".js-remove-image\");\n    closeBtns.on(\"click\", removeImageHandler);\n    toastAlert(\"success\", \"Η εικόνα προστέθηκε.\");\n    gallery.modal(\"hide\");\n    var bulk = $(\"#gallery-bulk-action-btn\");\n    var checkboxes = $(\".js-gallery-checkbox\");\n    resetGalleryBtns(bulk, checkboxes);\n  })[\"catch\"](function (err) {\n    console.log(err);\n    toastAlert('error', \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n  });\n}\n\nfunction removeImageHandler() {\n  var _this = this;\n\n  Swal.fire({\n    icon: 'info',\n    title: 'Προσοχή!',\n    text: 'Η εικόνα θα αφαιρεθεί απο το Gallery.',\n    showCancelButton: true,\n    confirmButtonColor: '#536de6',\n    confirmButtonText: \"\\u039D\\u03B1\\u03B9, \\u03B1\\u03C6\\u03B1\\u03AF\\u03C1\\u03B5\\u03C3\\u03B7!\",\n    cancelButtonText: \"Άκυρο\"\n  }).then(function (result) {\n    if (result.isConfirmed) {\n      removeImages([_this.dataset.imageId]);\n    }\n  });\n}\n\nfunction removeImages(ids) {\n  var gallery = $(\"#gallery-cnt\")[0];\n  var namespace = gallery.dataset.namespace;\n  var modelId = gallery.dataset.modelId;\n  axios.post(\"/media/gallery-remove\", {\n    namespace: namespace,\n    modelId: modelId,\n    ids: ids\n  }).then(function (res) {\n    var gallery = $(\"#gallery-cnt\");\n    gallery.html(res.data);\n    var closeBtns = gallery.find(\".js-remove-image\");\n    closeBtns.on(\"click\", removeImageHandler);\n\n    if (closeBtns.length == 0) {\n      $(\"#remove-all-images-btn\").addClass(\"d-none\");\n    }\n  })[\"catch\"](function (err) {\n    console.log(err);\n    utilities.toastAlert('error', \"Παρουσιάστηκε κάποιο πρόβλημα ...\");\n  });\n}\n\nfunction resetGalleryBtns(bulk, checkboxes) {\n  bulk.text(\"Επιλογές (0)\");\n  bulk.prop(\"disabled\", true);\n  bulk.removeClass(\"btn-warning\");\n  bulk.addClass(\"btn-secondary\");\n\n  for (var i = 0; i < checkboxes.length; i++) {\n    checkboxes[i].checked = false;\n  }\n} //!######################################################\n//!\t\t\t\tMedia Library Functions End\t\t\t\t#\n//!######################################################\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  toastAlert: toastAlert,\n  mainCheckboxSwitcher: mainCheckboxSwitcher,\n  minorCheckboxSwitcher: minorCheckboxSwitcher,\n  filterButton: filterButton,\n  tableLocale: tableLocale,\n  changeInputHidden: changeInputHidden,\n  redactorConfig: redactorConfig,\n  createStateSelect: createStateSelect,\n  datePickerConfig: datePickerConfig,\n  toastAlertDelete: toastAlertDelete,\n  filterStyle: filterStyle,\n  createDateElm: createDateElm,\n  startDate: startDate,\n  endDate: endDate,\n  resetBulk: resetBulk,\n  resetAddButton: resetAddButton,\n  createCourseTypeSelect: createCourseTypeSelect,\n  paginationHandler: paginationHandler,\n  searchHandler: searchHandler,\n  imageHandler: imageHandler,\n  paginationRequest: paginationRequest,\n  resetGalleryBtns: resetGalleryBtns,\n  removeImageHandler: removeImageHandler,\n  removeImages: removeImages,\n  articleConfig: articleConfig,\n  ALLOWEDTYPES: ALLOWEDTYPES\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvZGFzaGJvYXJkL21haW4uanM/ODIyYiJdLCJuYW1lcyI6WyJFbGVtZW50IiwicHJvdG90eXBlIiwiZmluZFBhcmVudCIsImxvb3BzIiwicGFyZW50IiwiaSIsInBhcmVudEVsZW1lbnQiLCJhcHBlbmRCZWZvcmUiLCJlbGVtZW50IiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImFwcGVuZEFmdGVyIiwibmV4dFNpYmxpbmciLCJiYXNlVXJsIiwid2luZG93IiwibG9jYXRpb24iLCJvcmlnaW4iLCJ0aW1lciIsIkFMTE9XRURUWVBFUyIsInRvYXN0QWxlcnQiLCJpY29uIiwibWVzc2FnZSIsIlN3YWwiLCJmaXJlIiwidG9hc3QiLCJwb3NpdGlvbiIsInRpdGxlIiwic2hvd0NvbmZpcm1CdXR0b24iLCJ0aW1lclByb2dyZXNzQmFyIiwidG9hc3RBbGVydERlbGV0ZSIsInRleHQiLCJzaG93Q2FuY2VsQnV0dG9uIiwiY29uZmlybUJ1dHRvbkNvbG9yIiwiY29uZmlybUJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25UZXh0IiwiYXJ0aWNsZUNvbmZpZyIsImNzcyIsImN1c3RvbSIsImNsYXNzZXMiLCJpbWciLCJwIiwiZ3JpZCIsImNsYXNzbmFtZSIsImNvbHVtbnMiLCJndXR0ZXIiLCJvZmZzZXQiLCJsZWZ0IiwicmlnaHQiLCJwYXR0ZXJucyIsImFsaWduIiwiY2VudGVyIiwiZWRpdG9yIiwibWluSGVpZ2h0IiwiaW1hZ2UiLCJ1cGxvYWQiLCJkYXRhIiwiJCIsImF0dHIiLCJyZWRhY3RvckNvbmZpZyIsImJ1dHRvbnMiLCJzdHlsZSIsInBsdWdpbnMiLCJkYXRlUGlja2VyQ29uZmlnIiwicmFuZ2VzIiwibW9tZW50Iiwic3VidHJhY3QiLCJzdGFydE9mIiwiZW5kT2YiLCJhbHdheXNTaG93Q2FsZW5kYXJzIiwic2hvd0N1c3RvbVJhbmdlTGFiZWwiLCJkcm9wcyIsImF1dG9VcGRhdGVJbnB1dCIsIm9wZW5zIiwibG9jYWxlIiwiZm9ybWF0IiwidGFibGVMb2NhbGUiLCJlbXB0eVRhYmxlIiwiaW5mbyIsImluZm9FbXB0eSIsImxlbmd0aE1lbnUiLCJsb2FkaW5nUmVjb3JkcyIsInByb2Nlc3NpbmciLCJzZWFyY2giLCJzZWFyY2hQbGFjZWhvbGRlciIsInplcm9SZWNvcmRzIiwicGFnaW5hdGUiLCJwcmV2aW91cyIsIm5leHQiLCJpbmZvRmlsdGVyZWQiLCJtYWluQ2hlY2tib3hTd2l0Y2hlciIsIm1haW4iLCJtaW5vciIsImJ1bGtCdG4iLCJzdGF0dXMiLCJjb3VudGVyIiwiY2hlY2tlZCIsImxlbmd0aCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsImJ1bGtNb2RpZmllciIsIm1pbm9yQ2hlY2tib3hTd2l0Y2hlciIsInN1bSIsImRhdGFzZXQiLCJlbmFibGVkQ29sb3IiLCJkaXNhYmxlZENvbG9yIiwidGV4dENvbnRlbnQiLCJkaXNhYmxlZCIsImZpbHRlclN0eWxlIiwiaW5wdXQiLCJ2YWx1ZSIsImZpbHRlckJ1dHRvbiIsImNvbHVtbiIsInRhYmxlIiwidGFibGVJZCIsImRldGFjaCIsImFwcGVuZFRvIiwib24iLCJkcmF3IiwiY2hhbmdlSW5wdXRIaWRkZW4iLCJoaWRkZW5BdHRyIiwiY2hhbmdlIiwicHJvcCIsImhpZGRlblZhbHVlIiwiY3JlYXRlU3RhdGVTZWxlY3QiLCJpZCIsInNlbGVjdEVsbSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsImNyZWF0ZURhdGVFbG0iLCJ0b2dnbGUiLCJjYW5jZWxDbGFzcyIsImhlaWdodCIsIndpZHRoIiwicGxhY2Vob2xkZXIiLCJjcmVhdGVDb3Vyc2VUeXBlU2VsZWN0Iiwic3RhcnREYXRlIiwiZGF0ZUlucHV0IiwiZGF0ZUlucHV0VmFsdWUiLCJzcGxpdCIsImZpcnN0RGF0ZSIsInJldmVyc2UiLCJqb2luIiwiZW5kRGF0ZSIsInNlY29uZERhdGUiLCJyZXNldEJ1bGsiLCJjaGVja2JveCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJyZXNldEFkZEJ1dHRvbiIsImFkZEJ0biIsInBhZ2luYXRpb25IYW5kbGVyIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImFjdGl2ZVBhZ2UiLCJocmVmIiwidmFsIiwicGFnaW5hdGlvblJlcXVlc3QiLCJzZWFyY2hIYW5kbGVyIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImltYWdlSGFuZGxlciIsIm1vZGFsIiwibW9kZWwiLCJtb2RlbElkIiwiZWRpdG9ySWQiLCJ0eXBlIiwidXJsIiwiaW1hZ2VTb3VyY2UiLCJBcnRpY2xlRWRpdG9yIiwiaW5zZXJ0IiwiJFIiLCJuYW1lIiwiYWRkVG9HYWxsZXJ5IiwiaW1hZ2VJZCIsImNoYW5nZUNvdmVyUmVxdWVzdCIsImF4aW9zIiwiZ2V0IiwicGFyYW1zIiwicGFnZSIsInRoZW4iLCJyZXMiLCJnYWxsZXJ5IiwicGFnaW5hdGlvbiIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhZGRCdG5zIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJuYW1lc3BhY2UiLCJyZW1vdmVCdG5DbnQiLCJzcmMiLCJwYXRjaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJwb3N0IiwiaWRzIiwiaHRtbCIsImNsb3NlQnRucyIsImZpbmQiLCJyZW1vdmVJbWFnZUhhbmRsZXIiLCJidWxrIiwiY2hlY2tib3hlcyIsInJlc2V0R2FsbGVyeUJ0bnMiLCJyZXN1bHQiLCJpc0NvbmZpcm1lZCIsInJlbW92ZUltYWdlcyIsInV0aWxpdGllcyJdLCJtYXBwaW5ncyI6IkFBQUFBO0FBQUFBO0FBQUFBLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkMsVUFBbEIsR0FBK0IsVUFBVUMsS0FBVixFQUFpQjtBQUM1QyxNQUFJQyxNQUFNLEdBQUcsSUFBYjs7QUFFQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLEtBQXBCLEVBQTJCRSxDQUFDLEVBQTVCLEVBQWdDO0FBQzVCRCxVQUFNLEdBQUdBLE1BQU0sQ0FB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RSxZQUFVLEVBQVZBLFVBRFc7QUFFWHNFLHNCQUFvQixFQUFwQkEsb0JBRlc7QUFHWFksdUJBQXFCLEVBQXJCQSxxQkFIVztBQUlYVSxjQUFZLEVBQVpBLFlBSlc7QUFLWHBDLGFBQVcsRUFBWEEsV0FMVztBQU1YNEMsbUJBQWlCLEVBQWpCQSxpQkFOVztBQU9YN0QsZ0JBQWMsRUFBZEEsY0FQVztBQVFYa0UsbUJBQWlCLEVBQWpCQSxpQkFSVztBQVNYOUQsa0JBQWdCLEVBQWhCQSxnQkFUVztBQVVYakMsa0JBQWdCLEVBQWhCQSxnQkFWVztBQVdYK0UsYUFBVyxFQUFYQSxXQVhXO0FBWVhzQixlQUFhLEVBQWJBLGFBWlc7QUFhWE8sV0FBUyxFQUFUQSxTQWJXO0FBY1hPLFNBQU8sRUFBUEEsT0FkVztBQWVYRSxXQUFTLEVBQVRBLFNBZlc7QUFnQlhJLGdCQUFjLEVBQWRBLGNBaEJXO0FBaUJYZCx3QkFBc0IsRUFBdEJBLHNCQWpCVztBQWtCWGdCLG1CQUFpQixFQUFqQkEsaUJBbEJXO0FBbUJYTyxlQUFhLEVBQWJBLGFBbkJXO0FBb0JYRyxjQUFZLEVBQVpBLFlBcEJXO0FBcUJkSixtQkFBaUIsRUFBakJBLGlCQXJCYztBQXNCZDhDLGtCQUFnQixFQUFoQkEsZ0JBdEJjO0FBdUJkSCxvQkFBa0IsRUFBbEJBLGtCQXZCYztBQXdCZE0sY0FBWSxFQUFaQSxZQXhCYztBQXlCZDVLLGVBQWEsRUFBYkEsYUF6QmM7QUEwQmRqQixjQUFZLEVBQVpBO0FBMUJjLENBQWYiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvZGFzaGJvYXJkL21haW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJFbGVtZW50LnByb3RvdHlwZS5maW5kUGFyZW50ID0gZnVuY3Rpb24gKGxvb3BzKSB7XG4gICAgbGV0IHBhcmVudCA9IHRoaXM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvb3BzOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudDtcbn0sIGZhbHNlO1xuXG5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmRCZWZvcmUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgZWxlbWVudCk7XG59LCBmYWxzZTtcblxuRWxlbWVudC5wcm90b3R5cGUuYXBwZW5kQWZ0ZXIgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuXG4gICAgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCBlbGVtZW50Lm5leHRTaWJsaW5nKTtcblxufSwgZmFsc2U7XG5cbi8vISMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8hXHRcdFx0XHRHbG9iYWwgVmFyaWFibGVzXHRcdFx0I1xuLy8hIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbmNvbnN0IGJhc2VVcmwgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xudmFyIHRpbWVyID0gMDtcbmV4cG9ydCBjb25zdCBBTExPV0VEVFlQRVMgPSBbXG5cdFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsIFwiYXBwbGljYXRpb24veC16aXAtY29tcHJlc3NlZFwiLCBcImFwcGxpY2F0aW9uL3BkZlwiLFxuXHRcImFwcGxpY2F0aW9uL21zd29yZFwiLCBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50XCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwudGVtcGxhdGVcIiwgXCJhcHBsaWNhdGlvbi92bmQubXMtd29yZC5kb2N1bWVudC5tYWNyb0VuYWJsZWQuMTJcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtd29yZC50ZW1wbGF0ZS5tYWNyb0VuYWJsZWQuMTJcIiwgXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIiwgXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIiwgXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldFwiLCBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnRlbXBsYXRlXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0Lm1hY3JvRW5hYmxlZC4xMlwiLCBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbC50ZW1wbGF0ZS5tYWNyb0VuYWJsZWQuMTJcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWwuYWRkaW4ubWFjcm9FbmFibGVkLjEyXCIsIFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsLnNoZWV0LmJpbmFyeS5tYWNyb0VuYWJsZWQuMTJcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtcG93ZXJwb2ludFwiLCBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb25cIixcblx0XCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwudGVtcGxhdGVcIiwgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwuc2xpZGVzaG93XCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQuYWRkaW4ubWFjcm9FbmFibGVkLjEyXCIsIFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnQucHJlc2VudGF0aW9uLm1hY3JvRW5hYmxlZC4xMlwiLFxuXHRcImFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnRlbXBsYXRlLm1hY3JvRW5hYmxlZC4xMlwiLCBcImFwcGxpY2F0aW9uL3ZuZC5tcy1wb3dlcnBvaW50LnNsaWRlc2hvdy5tYWNyb0VuYWJsZWQuMTJcIixcblx0XCJhcHBsaWNhdGlvbi92bmQubXMtYWNjZXNzXCIsIFwiYXVkaW8vbXBlZ1wiLCBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uXCIsXG5cdFwiYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldFwiLCBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dFwiLFxuXHRcImFwcGxpY2F0aW9uL3J0ZlwiLCBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuZ3JhcGhpY3NcIiwgXCJ0ZXh0L2h0bWxcIlxuXTtcblxuLy8hIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyFcdFx0XHRcdENvbmZpZ3VyYXRpb25zXHRcdFx0XHQjXG4vLyEjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxuLy8hQUxFUlRcbi8vIT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuZnVuY3Rpb24gdG9hc3RBbGVydChpY29uLCBtZXNzYWdlKSB7XG4gICAgU3dhbC5maXJlKHtcbiAgICAgICAgdG9hc3Q6ICd0cnVlJyxcbiAgICAgICAgcG9zaXRpb246ICd0b3AtZW5kJyxcbiAgICAgICAgaWNvbjogaWNvbixcbiAgICAgICAgdGl0bGU6IG1lc3NhZ2UsXG4gICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSxcbiAgICAgICAgdGltZXI6IDMwMDAsXG4gICAgICAgIHRpbWVyUHJvZ3Jlc3NCYXI6IHRydWVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdG9hc3RBbGVydERlbGV0ZSh0ZXh0LCBpY29uID0gXCJ3YXJuaW5nXCIpIHtcbiAgICByZXR1cm4gU3dhbC5maXJlKHtcbiAgICAgICAgdGl0bGU6ICfOlc6vz4PPhM61IM+Dzq/Os86/z4XPgc6/z4I7JyxcbiAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgaWNvbjogaWNvbixcblx0XHRzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuXHRcdGNvbmZpcm1CdXR0b25Db2xvcjogJyNmZjViNWInLFxuICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ86dzrHOrywgzrTOuc6xzrPPgc6xz4bOriEnLFxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiAnzobOus+Fz4HOvydcbiAgICB9KTtcbn1cblxuXG4vLyFDT05GSUdcbi8vIT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY29uc3QgYXJ0aWNsZUNvbmZpZyA9IHtcblx0Y3NzOiBcIi9jc3MvXCIsXG5cdGN1c3RvbToge1xuXHRcdGNzczogW1xuXHRcdFx0XCIvY3NzL2Jvb3RzdHJhcC5taW4uY3NzXCIsXG5cdFx0XHRcIi9jc3MvY3VzdG9tQXJ0aWNsZVN0eWxlLmNzc1wiLFxuXHRcdF1cblx0fSxcblx0Ly8gcGx1Z2luczogWydtZWRpYUxpYnJhcnknLCAncmVvcmRlciddLFxuXHRjbGFzc2VzOiB7XG5cdFx0aW1nOiAnaW1nLWZsdWlkJyxcblx0XHRwOiAndGV4dC13cmFwJ1xuXHR9LFxuXHRncmlkOiB7XG5cdFx0Y2xhc3NuYW1lOiAncm93Jyxcblx0XHRjb2x1bW5zOiAxMixcblx0XHRndXR0ZXI6ICcxcHgnLFxuXHRcdG9mZnNldDoge1xuXHRcdFx0bGVmdDogJzE1cHgnLFxuXHRcdFx0cmlnaHQ6ICcxNXB4J1xuXHRcdH0sXG5cdFx0cGF0dGVybnM6IHtcblx0XHRcdCc2fDYnOiAnY29sLTZ8Y29sLTYnLFxuXHRcdFx0JzR8NHw0JzogJ2NvbC00fGNvbC00fGNvbC00Jyxcblx0XHRcdCczfDN8M3wzJzogJ2NvbC0zfGNvbC0zfGNvbC0zfGNvbC0zJyxcblx0XHRcdCcyfDJ8MnwyfDJ8Mic6ICdjb2wtMnxjb2wtMnxjb2wtMnxjb2wtMnxjb2wtMnxjb2wtMicsXG5cdFx0XHQnM3w2fDMnOiAnY29sLTN8Y29sLTZ8Y29sLTMnLFxuXHRcdFx0JzJ8OHwyJzogJ2NvbC0yfGNvbC04fGNvbC0yJyxcblx0XHRcdCc1fDcnOiAnY29sLTV8Y29sLTcnLFxuXHRcdFx0Jzd8NSc6ICdjb2wtN3xjb2wtNScsXG5cdFx0XHQnNHw4JzogJ2NvbC00fGNvbC04Jyxcblx0XHRcdCc4fDQnOiAnY29sLTh8Y29sLTQnLFxuXHRcdFx0JzN8OSc6ICdjb2wtM3xjb2wtOScsXG5cdFx0XHQnOXwzJzogJ2NvbC05fGNvbC0zJyxcblx0XHRcdCcyfDEwJzogJ2NvbC0yfGNvbC0xMCcsXG5cdFx0XHQnMTB8Mic6ICdjb2wtMTB8Y29sLTInLFxuXHRcdFx0JzEyJzogJ2NvbC0xMidcblx0XHR9XG5cdH0sXG5cdGFsaWduOiB7XG5cdFx0bGVmdDogXCJ0ZXh0LWxlZnRcIixcblx0XHRjZW50ZXI6IFwidGV4dC1jZW50ZXJcIixcblx0XHRyaWdodDogXCJ0ZXh0LXJpZ2h0XCIsXG5cdH0sXG5cdGVkaXRvcjoge1xuXHRcdG1pbkhlaWdodDogXCIzMDBweFwiXG5cdH0sXG5cdGltYWdlOiB7XG5cdFx0dXBsb2FkOiBcIi9tZWRpYS91cGxvYWQtaW1hZ2VzXCIsXG5cdFx0ZGF0YToge1xuXHRcdFx0XCJfdG9rZW5cIjogJCgnbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKSxcblx0XHR9XG5cdH1cbn1cblxuY29uc3QgcmVkYWN0b3JDb25maWcgPSB7XG4gICAgYnV0dG9uczogW1xuXHRcdCdodG1sJywgJ3VuZG8nLCAncmVkbycsICdmb3JtYXQnLFxuXHRcdCdib2xkJywgJ3VuZGVybGluZScsICdpdGFsaWMnLCAnZGVsZXRlZCcsXG5cdFx0J3N1cCcsICdzdWInLCAnbGlzdHMnLCAnZmlsZScsICdsaW5rJywgJ2ltYWdlJ1xuXHRdLFxuXHRzdHlsZTogZmFsc2UsXG5cdHBsdWdpbnM6IFsnYWxpZ25tZW50J10sXG5cdG1pbkhlaWdodDogJzE1MHB4Jyxcbn1cblxuY29uc3QgZGF0ZVBpY2tlckNvbmZpZyA9IHtcbiAgICByYW5nZXM6IHtcbiAgICAgICAgJ1RvZGF5JzogW21vbWVudCgpLCBtb21lbnQoKV0sXG4gICAgICAgICdZZXN0ZXJkYXknOiBbbW9tZW50KCkuc3VidHJhY3QoMSwgJ2RheXMnKSwgbW9tZW50KCkuc3VidHJhY3QoMSwgJ2RheXMnKV0sXG4gICAgICAgICdMYXN0IDcgRGF5cyc6IFttb21lbnQoKS5zdWJ0cmFjdCg2LCAnZGF5cycpLCBtb21lbnQoKV0sXG4gICAgICAgICdMYXN0IDMwIERheXMnOiBbbW9tZW50KCkuc3VidHJhY3QoMjksICdkYXlzJyksIG1vbWVudCgpXSxcbiAgICAgICAgJ1RoaXMgTW9udGgnOiBbbW9tZW50KCkuc3RhcnRPZignbW9udGgnKSwgbW9tZW50KCkuZW5kT2YoJ21vbnRoJyldLFxuICAgICAgICAnTGFzdCBNb250aCc6IFttb21lbnQoKS5zdWJ0cmFjdCgxLCAnbW9udGgnKS5zdGFydE9mKCdtb250aCcpLCBtb21lbnQoKS5zdWJ0cmFjdCgxLCAnbW9udGgnKS5lbmRPZignbW9udGgnKV0sXG4gICAgICAgICdUaGlzIFllYXInOiBbbW9tZW50KCkuc3RhcnRPZigneWVhcicpLCBtb21lbnQoKS5lbmRPZigneWVhcicpXSxcbiAgICAgICAgJ0xhc3QgWWVhcic6IFttb21lbnQoKS5zdWJ0cmFjdCgxLCAneWVhcicpLnN0YXJ0T2YoJ3llYXInKSwgbW9tZW50KCkuc3VidHJhY3QoMSwgJ3llYXInKS5lbmRPZigneWVhcicpXVxuICAgIH0sXG4gICAgYWx3YXlzU2hvd0NhbGVuZGFyczogdHJ1ZSxcbiAgICBzaG93Q3VzdG9tUmFuZ2VMYWJlbDogZmFsc2UsXG4gICAgZHJvcHM6IFwiYXV0b1wiLFxuICAgIGF1dG9VcGRhdGVJbnB1dDogZmFsc2UsXG4gICAgb3BlbnM6IFwiY2VudGVyXCIsXG4gICAgbG9jYWxlOiB7XG4gICAgICAgIGZvcm1hdDogXCJERC9NTS9ZWVlZXCIsXG4gICAgfSxcbn1cblxuY29uc3QgdGFibGVMb2NhbGUgPSB7XG4gICAgZW1wdHlUYWJsZTogXCLOlM61zr0gz4XPgM6sz4HPh86/z4XOvSDOtc6zzrPPgc6xz4bOrc+CXCIsXG4gICAgaW5mbzogXCJfU1RBUlRfIM6tz4nPgiBfRU5EXyDOsc+Azr8gz4TOsSBfVE9UQUxfIM6xz4DOv8+EzrXOu86tz4POvM6xz4TOsVwiLFxuICAgIGluZm9FbXB0eTogXCIwIM6xz4DOvyAwIM+EzrEgMCDOsc+Azr/PhM61zrvOrc+DzrzOsc+EzrFcIixcbiAgICBsZW5ndGhNZW51OiBcIl9NRU5VX1wiLFxuICAgIGxvYWRpbmdSZWNvcmRzOiBcIs6mz4zPgc+Ez4nPg863IC4uLlwiLFxuICAgIHByb2Nlc3Npbmc6IFwizpXPgM61zr7Otc+BzrPOsc+Dzq/OsSAuLi5cIixcbiAgICBzZWFyY2g6IFwiXCIsXG4gICAgc2VhcmNoUGxhY2Vob2xkZXI6IFwizpHOvc6xzrbOrs+EzrfPg863Li4uIFwiLFxuICAgIHplcm9SZWNvcmRzOiBcIs6UzrXOvSDOss+Bzq3OuM63zrrOsc69IM6xz4DOv8+EzrXOu86tz4POvM6xz4TOsVwiLFxuICAgIHBhZ2luYXRlOiB7XG4gICAgICAgIHByZXZpb3VzOiBcIjxpIGNsYXNzPSdtZGkgbWRpLWNoZXZyb24tbGVmdCc+XCIsXG4gICAgICAgIG5leHQ6IFwiPGkgY2xhc3M9J21kaSBtZGktY2hldnJvbi1yaWdodCc+XCJcblx0fSxcblx0aW5mb0ZpbHRlcmVkOiBcIijOps65zrvPhM+BzrHPgc65z4POvM6tzr3OsSDOsc+Azr8gz4TOuc+CIF9NQVhfIM61zrPOs8+BzrHPhs6tz4IpXCJcbn1cblxuLy8hR0xPQkFMIEZVTkNUSU9OXG4vLyE9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmZ1bmN0aW9uIG1haW5DaGVja2JveFN3aXRjaGVyKG1haW4sIG1pbm9yLCBidWxrQnRuID0gZmFsc2UpIHtcbiAgICBsZXQgc3RhdHVzID0gdHJ1ZTtcbiAgICBsZXQgY291bnRlciA9IDA7XG4gICAgbWFpbi5jaGVja2VkID0gdHJ1ZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWlub3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFtaW5vcltpXS5jaGVja2VkKSB7XG4gICAgICAgICAgICBtaW5vcltpXS5maW5kUGFyZW50KDMpLmNsYXNzTGlzdC5yZW1vdmUoXCJiZy1zZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIG1haW4uY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWlub3JbaV0uZmluZFBhcmVudCgzKS5jbGFzc0xpc3QuYWRkKFwiYmctc2VsZWN0ZWRcIik7XG4gICAgICAgICAgICBjb3VudGVyKytcbiAgICAgICAgICAgIHN0YXR1cyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJ1bGtCdG4pIHtcbiAgICAgICAgYnVsa01vZGlmaWVyKGJ1bGtCdG4sIHN0YXR1cywgY291bnRlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtaW5vckNoZWNrYm94U3dpdGNoZXIobWFpbiwgbWlub3IsIGJ1bGtCdG4gPSBmYWxzZSkge1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBsZXQgc3RhdHVzID0gdHJ1ZTtcblxuICAgIGlmIChtYWluLmNoZWNrZWQgJiYgbWlub3IubGVuZ3RoID4gMCkge1xuXG4gICAgICAgIGNvdW50ZXIgPSBtaW5vci5sZW5ndGg7XG4gICAgICAgIHN0YXR1cyA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWlub3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG1pbm9yW2ldLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgICAgbWlub3JbaV0uZmluZFBhcmVudCgzKS5jbGFzc0xpc3QuYWRkKFwiYmctc2VsZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1pbm9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBtaW5vcltpXS5jaGVja2VkID0gZmFsc2U7XG4gICAgICAgICAgICBtaW5vcltpXS5maW5kUGFyZW50KDMpLmNsYXNzTGlzdC5yZW1vdmUoXCJiZy1zZWxlY3RlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChidWxrQnRuKSB7XG4gICAgICAgIGJ1bGtNb2RpZmllcihidWxrQnRuLCBzdGF0dXMsIGNvdW50ZXIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYnVsa01vZGlmaWVyKGJ1bGtCdG4sIHN0YXR1cywgc3VtKSB7XG5cbiAgICBsZXQgdGV4dCA9IGJ1bGtCdG4uZGF0YXNldC50ZXh0ID8gYnVsa0J0bi5kYXRhc2V0LnRleHQgOiBcIs6Vz4DOuc67zr/Os86tz4JcIjtcbiAgICBsZXQgZW5hYmxlZENvbG9yID0gYnVsa0J0bi5kYXRhc2V0LmVuYWJsZWRDb2xvciA/IGJ1bGtCdG4uZGF0YXNldC5lbmFibGVkQ29sb3IgOiBcImJ0bi13YXJuaW5nXCI7XG4gICAgbGV0IGRpc2FibGVkQ29sb3IgPSBidWxrQnRuLmRhdGFzZXQuZGlzYWJsZWRDb2xvciA/IGJ1bGtCdG4uZGF0YXNldC5kaXNhYmxlZENvbG9yIDogXCJidG4tc2Vjb25kYXJ5XCI7XG5cbiAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgIGJ1bGtCdG4uY2xhc3NMaXN0LmFkZChkaXNhYmxlZENvbG9yKVxuICAgICAgICBidWxrQnRuLmNsYXNzTGlzdC5yZW1vdmUoZW5hYmxlZENvbG9yKVxuICAgICAgICBidWxrQnRuLnRleHRDb250ZW50ID0gYCR7dGV4dH0gKDApICBgXG4gICAgICAgIGJ1bGtCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1bGtCdG4uY2xhc3NMaXN0LmFkZChlbmFibGVkQ29sb3IpO1xuICAgICAgICBidWxrQnRuLmNsYXNzTGlzdC5yZW1vdmUoZGlzYWJsZWRDb2xvcik7XG4gICAgICAgIGJ1bGtCdG4udGV4dENvbnRlbnQgPSBgJHt0ZXh0fSAgKCR7c3VtfSkgIGBcbiAgICAgICAgYnVsa0J0bi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyU3R5bGUoaW5wdXQsIHZhbHVlKSB7XG5cbiAgICBpZiAodmFsdWUgPT0gXCJcIikge1xuICAgICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKFwic2VsZWN0Mi1zZWxlY3RlZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKFwic2VsZWN0Mi1zZWxlY3RlZFwiKTtcbiAgICB9XG5cbn1cblxuY29uc3QgZmlsdGVyQnV0dG9uID0gZnVuY3Rpb24gKGF0dHIsIGNvbHVtbiwgdGFibGUsIHRhYmxlSWQpIHtcbiAgICAkKGF0dHIpLmRldGFjaCgpLmFwcGVuZFRvKHRhYmxlSWQpXG5cblxuXG4gICAgJChhdHRyKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB0YWJsZS5jb2x1bW5zKGNvbHVtbikuc2VhcmNoKHRoaXMudmFsdWUpLmRyYXcoKTtcblxuXG4gICAgfSk7XG59XG5cbmNvbnN0IGNoYW5nZUlucHV0SGlkZGVuID0gKGF0dHIsIGhpZGRlbkF0dHIpID0+IHtcblxuICAgICQoYXR0cikuY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGF0dHIgPT0gXCIjYWN0aXZlTWF0ZXJpYWxcIikge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9ICQodGhpcykucHJvcCgnY2hlY2tlZCcpID09IHRydWUgPyAxIDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBoaWRkZW5WYWx1ZSA9ICQoaGlkZGVuQXR0cilbMF0udmFsdWUgPSB0aGlzLnZhbHVlXG5cbiAgICB9KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdGF0ZVNlbGVjdChpZCA9IFwiXCIpIHtcbiAgICBjb25zdCBzZWxlY3RFbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuICAgIHNlbGVjdEVsbS5jbGFzc0xpc3QuYWRkKFwibWwtMVwiLCBcInNlbGVjdDJcIik7XG4gICAgc2VsZWN0RWxtLmlkID0gaWQ7XG5cbiAgICBzZWxlY3RFbG0uaW5uZXJIVE1MID0gYFxuXHRcdDxvcHRpb24gdmFsdWU9XCJcIj7OjM67zrXPgiDOv865IM6azrHPhM6xz4PPhM6sz4POtc65z4I8L29wdGlvbj5cblx0XHQ8b3B0aW9uIHZhbHVlPVwiMVwiPs6Vzr3Otc+BzrPOrDwvb3B0aW9uPlxuXHRcdDxvcHRpb24gdmFsdWU9XCIwXCI+zpHOvc61zr3Otc+BzrPOrDwvb3B0aW9uPlxuXHRgO1xuXG4gICAgcmV0dXJuIHNlbGVjdEVsbTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGF0ZUVsbShpZCkge1xuICAgIGxldCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcblxuICAgIGlucHV0LmNsYXNzTGlzdC5hZGQoXCJmb3JtLWNvbnRyb2xcIiwgXCJkYXRlXCIsIFwiZC1pbmxpbmUtYmxvY2tcIiwgXCJtbC0xXCIsIFwianMtZGF0ZS1zZWFyY2hcIik7XG4gICAgaW5wdXQuaWQgPSBpZDtcbiAgICBpbnB1dC5kYXRhc2V0LnRvZ2dsZSA9IFwiZGF0ZS1waWNrZXJcIjtcbiAgICBpbnB1dC5kYXRhc2V0LmNhbmNlbENsYXNzID0gXCJidG4tc2Vjb25kYXJ5XCI7XG4gICAgaW5wdXQuc3R5bGUuaGVpZ2h0ID0gXCIzMS45NnB4XCI7XG4gICAgaW5wdXQuc3R5bGUud2lkdGggPSBcIjE5NXB4XCI7XG4gICAgaW5wdXQucGxhY2Vob2xkZXIgPSBcIs6Vz4DOuc67zq3Ovs+EzrUgzrfOvM61z4HOv868zrfOvc6vzrXPgi4uLlwiO1xuXG4gICAgcmV0dXJuIGlucHV0O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb3Vyc2VUeXBlU2VsZWN0KGlkID0gXCJcIikge1xuXG4gICAgY29uc3Qgc2VsZWN0RWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcblxuICAgIHNlbGVjdEVsbS5jbGFzc0xpc3QuYWRkKFwibWwtMVwiLCBcInNlbGVjdDJcIik7XG4gICAgc2VsZWN0RWxtLmlkID0gaWQ7XG5cbiAgICBzZWxlY3RFbG0uaW5uZXJIVE1MID0gYFxuXHRcdDxvcHRpb24gdmFsdWU9XCJcIj7OjM67zrXPgiDOv865IM6VzrrOtM+Mz4POtc65z4I8L29wdGlvbj5cblx0XHQ8b3B0aW9uIHZhbHVlPVwiTm9ybWFsXCI+Tm9ybWFsPC9vcHRpb24+XG5cdFx0PG9wdGlvbiB2YWx1ZT1cIlRyaWFsXCI+VHJpYWw8L29wdGlvbj5cblx0YDtcblxuICAgIHJldHVybiBzZWxlY3RFbG07XG59XG5cbmZ1bmN0aW9uIHN0YXJ0RGF0ZShpbnB1dCkge1xuXG4gICAgbGV0IGRhdGVJbnB1dCA9IGlucHV0O1xuXG4gICAgaWYgKCFkYXRlSW5wdXQgfHwgZGF0ZUlucHV0LnZhbHVlID09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgbGV0IGRhdGVJbnB1dFZhbHVlID0gZGF0ZUlucHV0LnZhbHVlLnNwbGl0KFwiIC0gXCIpO1xuICAgIGxldCBmaXJzdERhdGUgPSBkYXRlSW5wdXRWYWx1ZVswXS5zcGxpdChcIi9cIikucmV2ZXJzZSgpLmpvaW4oXCItXCIpO1xuXG4gICAgcmV0dXJuIGZpcnN0RGF0ZTtcbn1cblxuZnVuY3Rpb24gZW5kRGF0ZShpbnB1dCkge1xuXG4gICAgbGV0IGRhdGVJbnB1dCA9IGlucHV0O1xuXG4gICAgaWYgKCFkYXRlSW5wdXQgfHwgZGF0ZUlucHV0LnZhbHVlID09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgbGV0IGRhdGVJbnB1dFZhbHVlID0gZGF0ZUlucHV0LnZhbHVlLnNwbGl0KFwiIC0gXCIpO1xuICAgIGxldCBzZWNvbmREYXRlID0gZGF0ZUlucHV0VmFsdWVbMV0uc3BsaXQoXCIvXCIpLnJldmVyc2UoKS5qb2luKFwiLVwiKTtcblxuICAgIHJldHVybiBzZWNvbmREYXRlO1xufVxuXG5mdW5jdGlvbiByZXNldEJ1bGsoYnVsa0J0biwgY2hlY2tib3gpIHtcblxuICAgIGJ1bGtCdG4udGV4dChcIs6Vz4DOuc67zr/Os86tz4IgICgwKVwiKTtcbiAgICBidWxrQnRuLmFkZENsYXNzKFwiYnRuLXNlY29uZGFyeVwiKTtcbiAgICBidWxrQnRuLnJlbW92ZUNsYXNzKFwiYnRuLXdhcm5pbmdcIik7XG4gICAgYnVsa0J0bi5wcm9wKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gICAgY2hlY2tib3gucHJvcChcImNoZWNrZWRcIiwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiByZXNldEFkZEJ1dHRvbihhZGRCdG4sIGNoZWNrYm94KSB7XG4gICAgYWRkQnRuLnRleHQoXCLOoM+Bzr/Pg864zq7Ous63IM6Vz4DOuc67zr/Os8+Ozr0gKDApXCIpO1xuICAgIGFkZEJ0bi5hZGRDbGFzcyhcImJ0bi1zZWNvbmRhcnlcIik7XG4gICAgYWRkQnRuLnJlbW92ZUNsYXNzKFwiYnRuLXByaW1hcnlcIik7XG4gICAgYWRkQnRuLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICBjaGVja2JveC5wcm9wKFwiY2hlY2tlZFwiLCBmYWxzZSk7XG59XG5cblxuLy8hIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuLy8hXHRcdFx0XHRNZWRpYSBMaWJyYXJ5IEZ1bmN0aW9uc1x0XHRcdCNcbi8vISMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcblxuZnVuY3Rpb24gcGFnaW5hdGlvbkhhbmRsZXIoZXZlbnQpIHtcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBsZXQgYWN0aXZlUGFnZSA9IHRoaXMuaHJlZi5zcGxpdChcInBhZ2U9XCIpWzFdO1xuICAgIGxldCBzZWFyY2ggPSAkKFwiI2ltYWdlLXNlYXJjaFwiKS52YWwoKTtcblxuICAgIHBhZ2luYXRpb25SZXF1ZXN0KGFjdGl2ZVBhZ2UsIHNlYXJjaCk7XG5cbn1cblxuZnVuY3Rpb24gc2VhcmNoSGFuZGxlcigpIHtcblxuICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG5cbiAgICBpZiAodGhpcy52YWx1ZS5sZW5ndGggPCAzIHx8IHRoaXMudmFsdWUgPT0gXCJcIikge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQocGFnaW5hdGlvblJlcXVlc3QsIDgwMCwgMSwgXCJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KHBhZ2luYXRpb25SZXF1ZXN0LCA4MDAsIDEsIHRoaXMudmFsdWUpO1xuICAgIH1cblxufVxuXG5mdW5jdGlvbiBpbWFnZUhhbmRsZXIoKSB7XG5cbiAgICBsZXQgbW9kYWwgPSAkKFwiI2dhbGxlcnktY29udGVudFwiKVswXTtcbiAgICBsZXQgbW9kZWwgPSBtb2RhbC5kYXRhc2V0Lm1vZGVsO1xuICAgIGxldCBtb2RlbElkID0gbW9kYWwuZGF0YXNldC5pZDtcbiAgICBsZXQgZWRpdG9ySWQgPSBtb2RhbC5kYXRhc2V0LmVkaXRvcklkO1xuICAgIGxldCB0eXBlID0gbW9kYWwuZGF0YXNldC50eXBlO1xuXG4gICAgbGV0IGltYWdlID0ge1xuICAgICAgICAnaW1nJzoge1xuICAgICAgICAgICAgdXJsOiBgJHt0aGlzLmRhdGFzZXQuaW1hZ2VTb3VyY2V9YCxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlID09IFwiYXJ0aWNsZVwiKSB7XG4gICAgICAgIEFydGljbGVFZGl0b3IoZWRpdG9ySWQpLmltYWdlLmluc2VydChpbWFnZSk7XG5cdH1cblx0ZWxzZSBpZiAodHlwZSA9PSBcInJlZGFjdG9yXCIpIHtcbiAgICAgICAgJFIoIGVkaXRvcklkLFxuICAgICAgICAgICAgJ2luc2VydGlvbi5pbnNlcnRIdG1sJyxcbiAgICAgICAgICAgIGA8aW1nIGNsYXNzPVwiaW1nLWZsdWlkXCIgc3JjPVwiJHt0aGlzLmRhdGFzZXQuaW1hZ2VTb3VyY2V9XCIgYWx0PVwiJHt0aGlzLmRhdGFzZXQubmFtZX1cIiAvPmBcbiAgICAgICAgKTtcblx0fVxuXHRlbHNlIGlmICggdHlwZSA9PSBcImdhbGxlcnlcIiApIHtcblxuXHRcdCQoXCIjcmVtb3ZlLWFsbC1pbWFnZXMtYnRuXCIpLnJlbW92ZUNsYXNzKFwiZC1ub25lXCIpO1xuXHRcdGFkZFRvR2FsbGVyeShtb2RlbCwgbW9kZWxJZCwgdGhpcy5kYXRhc2V0LmltYWdlSWQpO1xuXHRcdHJldHVybjtcblx0fVxuICAgIGVsc2Uge1xuXG4gICAgICAgIGNoYW5nZUNvdmVyUmVxdWVzdChtb2RlbCwgbW9kZWxJZCwgdGhpcy5kYXRhc2V0LmltYWdlU291cmNlKTtcblxuICAgIH1cblxuICAgICQoXCIjZ2FsbGVyeS1tb2RhbFwiKS5tb2RhbCgnaGlkZScpO1xuXG59XG5cbmZ1bmN0aW9uIHBhZ2luYXRpb25SZXF1ZXN0KGFjdGl2ZVBhZ2UsIHNlYXJjaCkge1xuXG4gICAgYXhpb3MuZ2V0KGAvbWVkaWEvaW1hZ2VzYCwge1xuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHBhZ2U6IGFjdGl2ZVBhZ2UsXG4gICAgICAgICAgICBzZWFyY2hcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgIGxldCBnYWxsZXJ5ID0gJChcIiNnYWxsZXJ5LWNvbnRlbnRcIilbMF1cbiAgICAgICAgICAgIGdhbGxlcnkuaW5uZXJIVE1MID0gcmVzLmRhdGE7XG5cbiAgICAgICAgICAgIGxldCBwYWdpbmF0aW9uID0gZ2FsbGVyeS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwianMtZ2FsbGVyeS1wYWdlLWJ0blwiKTtcbiAgICAgICAgICAgIGxldCBhZGRCdG5zID0gZ2FsbGVyeS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwianMtYWRkLWltYWdlXCIpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFkZEJ0bnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhZGRCdG5zW2ldLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBpbWFnZUhhbmRsZXIpO1xuXHRcdFx0XHRhZGRCdG5zW2ldLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBpbWFnZUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2luYXRpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYWdpbmF0aW9uW2ldLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBwYWdpbmF0aW9uSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbltpXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcGFnaW5hdGlvbkhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxufVxuXG5mdW5jdGlvbiBjaGFuZ2VDb3ZlclJlcXVlc3QobmFtZXNwYWNlLCBpZCwgdXJsKSB7XG5cdGlmICggdHlwZW9mIGlkID09PSBcInVuZGVmaW5lZFwiICYmIG5hbWVzcGFjZSA9PSBcIkFwcFxcXFxVc2VyXCIgKSB7XG5cdFx0bGV0IGltZyA9ICQoXCIjY292ZXItaW1hZ2VcIilbMF07XG5cdFx0bGV0IHJlbW92ZUJ0bkNudCA9ICQoXCIjcmVtb3ZlLWNvdmVyLWJ0blwiKS5wYXJlbnQoKTtcblxuXHRcdGltZy5zcmMgPSBgJHt1cmx9YDtcblx0XHRpbWcuY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiKTtcblxuXHRcdHJlbW92ZUJ0bkNudC5yZW1vdmVDbGFzcyhcImQtbm9uZVwiKTtcblx0XHRyZW1vdmVCdG5DbnQuYWRkQ2xhc3MoXCJkLWZsZXhcIik7XG5cbiAgICAgICAgJChcIiNjdXN0b20tZmlsZVwiKVswXS52YWx1ZSA9IGAke3VybH1gO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXhpb3MucGF0Y2goXCIvbWVkaWEvY292ZXIvcmVwbGFjZVwiLCB7XG4gICAgICAgICAgICBuYW1lc3BhY2UsIGlkLCB1cmxcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHJlcyA9PiB7XG5cdFx0XHRcdGxldCBpbWcgPSAkKFwiI2NvdmVyLWltYWdlXCIpWzBdO1xuXHRcdFx0XHRsZXQgcmVtb3ZlQnRuQ250ID0gJChcIiNyZW1vdmUtY292ZXItYnRuXCIpLnBhcmVudCgpO1xuXG5cdFx0XHRcdGltZy5zcmMgPSBgJHtiYXNlVXJsfS8ke3VybH1gO1xuXHRcdFx0XHRpbWcuY2xhc3NMaXN0LnJlbW92ZShcImQtbm9uZVwiKTtcblxuXHRcdFx0XHQkKFwiI2NoYW5nZS1jb3Zlci1idG5cIikudGV4dChcIs6RzrvOu86xzrPOrlwiKTtcblx0XHRcdFx0JChcIiNjb3Zlci1zdGF0dXNcIikuYWRkQ2xhc3MoXCJkLW5vbmVcIik7XG5cblx0XHRcdFx0cmVtb3ZlQnRuQ250LnJlbW92ZUNsYXNzKFwiZC1ub25lXCIpO1xuXHRcdFx0XHRyZW1vdmVCdG5DbnQuYWRkQ2xhc3MoXCJkLWZsZXhcIik7XG5cbiAgICAgICAgICAgICAgICB0b2FzdEFsZXJ0KFwic3VjY2Vzc1wiLCBcIs6kzr8gQ292ZXIgzqzOu867zrHOvs61IVwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgIHRvYXN0QWxlcnQoJ2Vycm9yJywgXCLOoM6xz4HOv8+Fz4POuc6sz4PPhM63zrrOtSDOus6sz4DOv865zr8gz4DPgc+MzrLOu863zrzOsSAuLi5cIik7XG4gICAgICAgICAgICB9KVxuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkVG9HYWxsZXJ5KG5hbWVzcGFjZSwgaWQsIGltYWdlSWQpIHtcblxuXHRheGlvcy5wb3N0KCBcIi9tZWRpYS9nYWxsZXJ5XCIsIHtcblx0XHRuYW1lc3BhY2UsXG5cdFx0bW9kZWxJZDogaWQsXG5cdFx0aWRzOiBbaW1hZ2VJZF1cblx0fSlcblx0LnRoZW4oIHJlcyA9PiB7XG5cblx0XHRsZXQgZ2FsbGVyeSA9ICQoXCIjZ2FsbGVyeS1jbnRcIik7XG5cdFx0Z2FsbGVyeS5odG1sKHJlcy5kYXRhKTtcblxuXHRcdGxldCBjbG9zZUJ0bnMgPSBnYWxsZXJ5LmZpbmQoXCIuanMtcmVtb3ZlLWltYWdlXCIpO1xuXHRcdGNsb3NlQnRucy5vbihcImNsaWNrXCIsIHJlbW92ZUltYWdlSGFuZGxlcik7XG5cblx0XHR0b2FzdEFsZXJ0KFwic3VjY2Vzc1wiLCBcIs6XIM61zrnOus+Mzr3OsSDPgM+Bzr/Pg8+Ezq3OuM63zrrOtS5cIik7XG5cdFx0Z2FsbGVyeS5tb2RhbChcImhpZGVcIik7XG5cblx0XHRsZXQgYnVsayA9ICQoXCIjZ2FsbGVyeS1idWxrLWFjdGlvbi1idG5cIik7XG5cdFx0bGV0IGNoZWNrYm94ZXMgPSAkKFwiLmpzLWdhbGxlcnktY2hlY2tib3hcIik7XG5cblx0XHRyZXNldEdhbGxlcnlCdG5zKCBidWxrLCBjaGVja2JveGVzICk7XG5cdH0pXG5cdC5jYXRjaCggZXJyID0+IHtcblx0XHRjb25zb2xlLmxvZyhlcnIpO1xuXHRcdHRvYXN0QWxlcnQoJ2Vycm9yJywgXCLOoM6xz4HOv8+Fz4POuc6sz4PPhM63zrrOtSDOus6sz4DOv865zr8gz4DPgc+MzrLOu863zrzOsSAuLi5cIik7XG5cdH0pXG59XG5cblxuZnVuY3Rpb24gcmVtb3ZlSW1hZ2VIYW5kbGVyKCkge1xuXHRTd2FsLmZpcmUoe1xuXHRcdGljb246ICdpbmZvJyxcblx0XHR0aXRsZTogJ86gz4HOv8+Dzr/Ph86uIScsXG5cdFx0dGV4dDogJ86XIM61zrnOus+Mzr3OsSDOuM6xIM6xz4bOsc65z4HOtc64zrXOryDOsc+Azr8gz4TOvyBHYWxsZXJ5LicsXG5cdFx0c2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcblx0XHRjb25maXJtQnV0dG9uQ29sb3I6ICcjNTM2ZGU2Jyxcblx0XHRjb25maXJtQnV0dG9uVGV4dDogYM6dzrHOuSwgzrHPhs6xzq/Pgc61z4POtyFgLFxuXHRcdGNhbmNlbEJ1dHRvblRleHQ6IFwizobOus+Fz4HOv1wiXG5cdH0pXG5cdC50aGVuKChyZXN1bHQpID0+IHtcblxuXHRcdGlmICggcmVzdWx0LmlzQ29uZmlybWVkICkge1xuXHRcdFx0cmVtb3ZlSW1hZ2VzKCBbdGhpcy5kYXRhc2V0LmltYWdlSWRdICk7XG5cdFx0fVxuXG5cdH0pXG59XG5cbmZ1bmN0aW9uIHJlbW92ZUltYWdlcyggaWRzICkge1xuXG5cdGxldCBnYWxsZXJ5ID0gJChcIiNnYWxsZXJ5LWNudFwiKVswXTtcblx0bGV0IG5hbWVzcGFjZSA9IGdhbGxlcnkuZGF0YXNldC5uYW1lc3BhY2U7XG5cdGxldCBtb2RlbElkID0gZ2FsbGVyeS5kYXRhc2V0Lm1vZGVsSWQ7XG5cblx0YXhpb3MucG9zdChcIi9tZWRpYS9nYWxsZXJ5LXJlbW92ZVwiLCB7XG5cdFx0bmFtZXNwYWNlLCBtb2RlbElkLCBpZHNcblx0fSlcblx0LnRoZW4oIHJlcyA9PiB7XG5cblx0XHRsZXQgZ2FsbGVyeSA9ICQoXCIjZ2FsbGVyeS1jbnRcIik7XG5cdFx0Z2FsbGVyeS5odG1sKHJlcy5kYXRhKTtcblxuXHRcdGxldCBjbG9zZUJ0bnMgPSBnYWxsZXJ5LmZpbmQoXCIuanMtcmVtb3ZlLWltYWdlXCIpO1xuXHRcdGNsb3NlQnRucy5vbihcImNsaWNrXCIsIHJlbW92ZUltYWdlSGFuZGxlcik7XG5cblx0XHRpZiAoIGNsb3NlQnRucy5sZW5ndGggPT0gMCApIHtcblx0XHRcdCQoXCIjcmVtb3ZlLWFsbC1pbWFnZXMtYnRuXCIpLmFkZENsYXNzKFwiZC1ub25lXCIpO1xuXHRcdH1cblxuXHR9KVxuXHQuY2F0Y2goIGVyciA9PiB7XG5cdFx0Y29uc29sZS5sb2coZXJyKTtcblx0XHR1dGlsaXRpZXMudG9hc3RBbGVydCggJ2Vycm9yJywgXCLOoM6xz4HOv8+Fz4POuc6sz4PPhM63zrrOtSDOus6sz4DOv865zr8gz4DPgc+MzrLOu863zrzOsSAuLi5cIiApO1xuXHR9KVxuXG59XG5cblxuXG5mdW5jdGlvbiByZXNldEdhbGxlcnlCdG5zKCBidWxrLCBjaGVja2JveGVzICkge1xuXG5cdGJ1bGsudGV4dChcIs6Vz4DOuc67zr/Os86tz4IgKDApXCIpXG5cdGJ1bGsucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xuXHRidWxrLnJlbW92ZUNsYXNzKFwiYnRuLXdhcm5pbmdcIik7XG5cdGJ1bGsuYWRkQ2xhc3MoXCJidG4tc2Vjb25kYXJ5XCIpO1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgY2hlY2tib3hlcy5sZW5ndGg7IGkrKykge1xuXHRcdGNoZWNrYm94ZXNbaV0uY2hlY2tlZCA9IGZhbHNlO1xuXHR9XG5cbn1cblxuLy8hIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG4vLyFcdFx0XHRcdE1lZGlhIExpYnJhcnkgRnVuY3Rpb25zIEVuZFx0XHRcdFx0I1xuLy8hIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICB0b2FzdEFsZXJ0LFxuICAgIG1haW5DaGVja2JveFN3aXRjaGVyLFxuICAgIG1pbm9yQ2hlY2tib3hTd2l0Y2hlcixcbiAgICBmaWx0ZXJCdXR0b24sXG4gICAgdGFibGVMb2NhbGUsXG4gICAgY2hhbmdlSW5wdXRIaWRkZW4sXG4gICAgcmVkYWN0b3JDb25maWcsXG4gICAgY3JlYXRlU3RhdGVTZWxlY3QsXG4gICAgZGF0ZVBpY2tlckNvbmZpZyxcbiAgICB0b2FzdEFsZXJ0RGVsZXRlLFxuICAgIGZpbHRlclN0eWxlLFxuICAgIGNyZWF0ZURhdGVFbG0sXG4gICAgc3RhcnREYXRlLFxuICAgIGVuZERhdGUsXG4gICAgcmVzZXRCdWxrLFxuICAgIHJlc2V0QWRkQnV0dG9uLFxuICAgIGNyZWF0ZUNvdXJzZVR5cGVTZWxlY3QsXG4gICAgcGFnaW5hdGlvbkhhbmRsZXIsXG4gICAgc2VhcmNoSGFuZGxlcixcbiAgICBpbWFnZUhhbmRsZXIsXG5cdHBhZ2luYXRpb25SZXF1ZXN0LFxuXHRyZXNldEdhbGxlcnlCdG5zLFxuXHRyZW1vdmVJbWFnZUhhbmRsZXIsXG5cdHJlbW92ZUltYWdlcyxcblx0YXJ0aWNsZUNvbmZpZyxcblx0QUxMT1dFRFRZUEVTXG59XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/dashboard/main.js\n");

/***/ }),

/***/ "./resources/plugins/article-editor/article-editor.js":
/*!************************************************************!*\
  !*** ./resources/plugins/article-editor/article-editor.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\r\n    Article Editor JS\r\n    Version 2.1.3\r\n    Updated: October 6, 2020\r\n\r\n    http://imperavi.com/article/\r\n\r\n    Copyright (c) 2009-2020, Imperavi Ltd.\r\n    License: http://imperavi.com/article/license/\r\n*/\nif (typeof CodeMirror === 'undefined') {\n  var CodeMirror = null;\n}\n\n(function () {\n  var Ajax = {};\n  Ajax.settings = {};\n\n  Ajax.post = function (options) {\n    return new AjaxRequest('post', options);\n  };\n\n  Ajax.get = function (options) {\n    return new AjaxRequest('get', options);\n  };\n\n  var AjaxRequest = function AjaxRequest(method, options) {\n    var defaults = {\n      method: method,\n      url: '',\n      before: function before() {},\n      success: function success() {},\n      error: function error() {},\n      data: false,\n      async: true,\n      headers: {}\n    };\n    this.p = this.extend(defaults, options);\n    this.p = this.extend(this.p, Ajax.settings);\n    this.p.method = this.p.method.toUpperCase();\n    this.prepareData();\n    this.xhr = new XMLHttpRequest();\n    this.xhr.open(this.p.method, this.p.url, this.p.async);\n    this.setHeaders();\n    var before = typeof this.p.before === 'function' ? this.p.before(this.xhr) : true;\n\n    if (before !== false) {\n      this.send();\n    }\n  };\n\n  AjaxRequest.prototype = {\n    extend: function extend(obj1, obj2) {\n      if (obj2) for (var name in obj2) {\n        obj1[name] = obj2[name];\n      }\n      return obj1;\n    },\n    prepareData: function prepareData() {\n      if (this.p.method === 'POST' && !this.isFormData()) this.p.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      if (_typeof(this.p.data) === 'object' && !this.isFormData()) this.p.data = this.toParams(this.p.data);\n      if (this.p.method === 'GET') this.p.url = this.p.data ? this.p.url + '?' + this.p.data : this.p.url;\n    },\n    setHeaders: function setHeaders() {\n      this.xhr.setRequestHeader('X-Requested-With', this.p.headers['X-Requested-With'] || 'XMLHttpRequest');\n\n      for (var name in this.p.headers) {\n        this.xhr.setRequestHeader(name, this.p.headers[name]);\n      }\n    },\n    isFormData: function isFormData() {\n      return typeof window.FormData !== 'undefined' && this.p.data instanceof window.FormData;\n    },\n    isComplete: function isComplete() {\n      return !(this.xhr.status < 200 || this.xhr.status >= 300 && this.xhr.status !== 304);\n    },\n    send: function send() {\n      if (this.p.async) {\n        this.xhr.onload = this.loaded.bind(this);\n        this.xhr.send(this.p.data);\n      } else {\n        this.xhr.send(this.p.data);\n        this.loaded.call(this);\n      }\n    },\n    loaded: function loaded() {\n      if (this.isComplete()) {\n        var response = this.xhr.response;\n        var json = this.parseJson(response);\n        response = json ? json : response;\n        if (typeof this.p.success === 'function') this.p.success(response, this.xhr);\n      } else {\n        if (typeof this.p.error === 'function') this.p.error(this.xhr.statusText);\n      }\n    },\n    parseJson: function parseJson(str) {\n      try {\n        var o = JSON.parse(str);\n\n        if (o && _typeof(o) === 'object') {\n          return o;\n        }\n      } catch (e) {}\n\n      return false;\n    },\n    toParams: function toParams(obj) {\n      return Object.keys(obj).map(function (k) {\n        return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]);\n      }).join('&');\n    }\n  }; // version 2\n\n  var DomCache = [0];\n  var DomExpando = 'data' + new Date().getTime();\n\n  var Dom = function Dom(selector, context) {\n    return this.parse(selector, context);\n  };\n\n  Dom.ready = function (fn) {\n    document.addEventListener('DOMContentLoaded', fn);\n  };\n\n  Dom.prototype = {\n    get length() {\n      return this.nodes.length;\n    },\n\n    parse: function parse(s, c) {\n      var n;\n      var rehtml = /^\\s*<(\\w+|!)[^>]*>/;\n\n      if (!s) {\n        n = [];\n      } else if (s instanceof Dom) {\n        this.nodes = s.nodes;\n        return s;\n      } else if (rehtml.test(s)) {\n        n = this.create(s);\n      } else if (typeof s !== 'string') {\n        if (s.nodeType && s.nodeType === 11) n = s.childNodes;else n = s.nodeType || this._isWindowNode(s) ? [s] : s;\n      } else {\n        n = this._query(s, c);\n      }\n\n      this.nodes = this._slice(n);\n    },\n    create: function create(html) {\n      if (/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/.test(html)) {\n        return [document.createElement(RegExp.$1)];\n      }\n\n      var elmns = [];\n      var c = document.createElement('div');\n      c.innerHTML = html;\n\n      for (var i = 0, l = c.childNodes.length; i < l; i++) {\n        elmns.push(c.childNodes[i]);\n      }\n\n      return elmns;\n    },\n    // dataset/dataget\n    dataset: function dataset(key, value) {\n      return this.each(function ($node) {\n        DomCache[this.dataindex($node.get())][key] = value;\n      });\n    },\n    dataget: function dataget(key) {\n      return DomCache[this.dataindex(this.get())][key];\n    },\n    dataindex: function dataindex(el) {\n      var index = el[DomExpando];\n      var nextIndex = DomCache.length;\n\n      if (!index) {\n        index = nextIndex;\n        if (el) el[DomExpando] = nextIndex;\n        DomCache[index] = {};\n      }\n\n      return index;\n    },\n    // add\n    add: function add(n) {\n      this.nodes = this.nodes.concat(this._array(n));\n      return this;\n    },\n    // get\n    get: function get(index) {\n      return this.nodes[index || 0] || false;\n    },\n    getAll: function getAll() {\n      return this.nodes;\n    },\n    eq: function eq(index) {\n      return new Dom(this.nodes[index]);\n    },\n    first: function first() {\n      return new Dom(this.nodes[0]);\n    },\n    last: function last() {\n      return new Dom(this.nodes[this.nodes.length - 1]);\n    },\n    contents: function contents() {\n      return this.get().childNodes;\n    },\n    // loop\n    each: function each(fn) {\n      var len = this.nodes.length;\n\n      for (var i = 0; i < len; i++) {\n        fn.call(this, new Dom(this.nodes[i]), i);\n      }\n\n      return this;\n    },\n    // traversing\n    is: function is(s) {\n      return this.filter(s).length > 0;\n    },\n    filter: function filter(s) {\n      var fn;\n\n      if (s === undefined) {\n        return this;\n      } else if (typeof s === 'function') {\n        fn = function fn(node) {\n          return s(new Dom(node));\n        };\n      } else {\n        fn = function fn(node) {\n          if (s && s.nodeType || s instanceof Node) {\n            return s === node;\n          } else {\n            node.matches = node.matches || node.msMatchesSelector || node.webkitMatchesSelector;\n            return node.nodeType === 1 ? node.matches(s || '*') : false;\n          }\n        };\n      }\n\n      return new Dom(this.nodes.filter.call(this.nodes, fn));\n    },\n    not: function not(filter) {\n      return this.filter(function (node) {\n        return !new Dom(node).is(filter || true);\n      });\n    },\n    find: function find(s) {\n      var n = [];\n      this.each(function ($n) {\n        var node = $n.get();\n\n        var ns = this._query(s, node);\n\n        for (var i = 0; i < ns.length; i++) {\n          n.push(ns[i]);\n        }\n      });\n      return new Dom(n);\n    },\n    children: function children(s) {\n      var n = [];\n      this.each(function ($n) {\n        var node = $n.get();\n\n        if (node.children) {\n          var ns = node.children;\n\n          for (var i = 0; i < ns.length; i++) {\n            n.push(ns[i]);\n          }\n        }\n      });\n      return new Dom(n).filter(s);\n    },\n    parent: function parent(s) {\n      var node = this.get();\n      var p = node.parentNode ? node.parentNode : false;\n      return p ? new Dom(p).filter(s) : new Dom();\n    },\n    parents: function parents(s, c) {\n      c = this._context(c);\n      var n = [];\n      this.each(function ($n) {\n        var node = $n.get();\n        var p = node.parentNode;\n\n        while (p && p !== c) {\n          if (s) {\n            if (new Dom(p).is(s)) {\n              n.push(p);\n            }\n          } else {\n            n.push(p);\n          }\n\n          p = p.parentNode;\n        }\n      });\n      return new Dom(n);\n    },\n    closest: function closest(s, c) {\n      c = this._context(c);\n      var n = [];\n      var isNode = s && s.nodeType;\n      this.each(function ($n) {\n        var node = $n.get();\n\n        do {\n          if (isNode && node === s || new Dom(node).is(s)) return n.push(node);\n        } while ((node = node.parentNode) && node !== c);\n      });\n      return new Dom(n);\n    },\n    next: function next(s) {\n      return this._sibling(s, 'nextSibling');\n    },\n    nextElement: function nextElement(s) {\n      return this._sibling(s, 'nextElementSibling');\n    },\n    prev: function prev(s) {\n      return this._sibling(s, 'previousSibling');\n    },\n    prevElement: function prevElement(s) {\n      return this._sibling(s, 'previousElementSibling');\n    },\n    // css\n    css: function css(name, value) {\n      if (value === undefined && _typeof(name) !== 'object') {\n        var node = this.get();\n\n        if (name === 'width' || name === 'height') {\n          return node.style ? this._getHeightOrWidth(name) + 'px' : undefined;\n        } else {\n          return node.style ? getComputedStyle(node, null)[name] : undefined;\n        }\n      } // set\n\n\n      return this.each(function ($n) {\n        var node = $n.get();\n        var o = {};\n        if (_typeof(name) === 'object') o = name;else o[name] = value;\n\n        for (var key in o) {\n          if (node.style) node.style[key] = o[key];\n        }\n      });\n    },\n    // attr\n    attr: function attr(name, value, data) {\n      data = data ? 'data-' : '';\n\n      if (typeof value === 'undefined' && _typeof(name) !== 'object') {\n        var node = this.get();\n\n        if (node && node.nodeType !== 3) {\n          return name === 'checked' ? node.checked : this._boolean(node.getAttribute(data + name));\n        } else {\n          return;\n        }\n      } // set\n\n\n      return this.each(function ($n) {\n        var node = $n.get();\n        var o = {};\n        if (_typeof(name) === 'object') o = name;else o[name] = value;\n\n        for (var key in o) {\n          if (node.nodeType !== 3) {\n            if (key === 'checked') node.checked = o[key];else node.setAttribute(data + key, o[key]);\n          }\n        }\n      });\n    },\n    data: function data(name, value) {\n      if (name === undefined) {\n        var reDataAttr = /^data-(.+)$/;\n        var attrs = this.get().attributes;\n        var data = {};\n\n        var replacer = function replacer(g) {\n          return g[1].toUpperCase();\n        };\n\n        for (var key in attrs) {\n          if (attrs[key] && reDataAttr.test(attrs[key].nodeName)) {\n            var dataName = attrs[key].nodeName.match(reDataAttr)[1];\n            var val = attrs[key].value;\n            dataName = dataName.replace(/-([a-z])/g, replacer);\n            if (val.search(/^{/) !== -1) val = this._object(val);else val = this._number(val) ? parseFloat(val) : this._boolean(val);\n            data[dataName] = val;\n          }\n        }\n\n        return data;\n      }\n\n      return this.attr(name, value, true);\n    },\n    val: function val(value) {\n      if (value === undefined) {\n        var el = this.get();\n        if (el.type && el.type === 'checkbox') return el.checked;else return el.value;\n      }\n\n      return this.each(function ($n) {\n        var el = $n.get();\n        if (el.type && el.type === 'checkbox') el.checked = value;else el.value = value;\n      });\n    },\n    removeAttr: function removeAttr(value) {\n      return this.each(function ($n) {\n        var node = $n.get();\n\n        var fn = function fn(name) {\n          if (node.nodeType !== 3) node.removeAttribute(name);\n        };\n\n        value.split(' ').forEach(fn);\n      });\n    },\n    // class\n    addClass: function addClass(value) {\n      return this._eachClass(value, 'add');\n    },\n    removeClass: function removeClass(value) {\n      return this._eachClass(value, 'remove');\n    },\n    toggleClass: function toggleClass(value) {\n      return this._eachClass(value, 'toggle');\n    },\n    hasClass: function hasClass(value) {\n      var node = this.get();\n      return node.classList ? node.classList.contains(value) : false;\n    },\n    // html & text\n    empty: function empty() {\n      return this.each(function ($n) {\n        $n.get().innerHTML = '';\n      });\n    },\n    html: function html(_html) {\n      return _html === undefined ? this.get().innerHTML || '' : this.empty().append(_html);\n    },\n    text: function text(_text) {\n      return _text === undefined ? this.get().textContent || '' : this.each(function ($n) {\n        $n.get().textContent = _text;\n      });\n    },\n    // manipulation\n    after: function after(html) {\n      return this._inject(html, function (frag, node) {\n        if (typeof frag === 'string') {\n          node.insertAdjacentHTML('afterend', frag);\n        } else {\n          if (node.parentNode !== null) {\n            for (var i = frag instanceof Node ? [frag] : this._array(frag).reverse(), s = 0; s < i.length; s++) {\n              node.parentNode.insertBefore(i[s], node.nextSibling);\n            }\n          }\n        }\n\n        return node;\n      });\n    },\n    before: function before(html) {\n      return this._inject(html, function (frag, node) {\n        if (typeof frag === 'string') {\n          node.insertAdjacentHTML('beforebegin', frag);\n        } else {\n          var elms = frag instanceof Node ? [frag] : this._array(frag);\n\n          for (var i = 0; i < elms.length; i++) {\n            node.parentNode.insertBefore(elms[i], node);\n          }\n        }\n\n        return node;\n      });\n    },\n    append: function append(html) {\n      return this._inject(html, function (frag, node) {\n        if (typeof frag === 'string' || typeof frag === 'number') {\n          node.insertAdjacentHTML('beforeend', frag);\n        } else {\n          var elms = frag instanceof Node ? [frag] : this._array(frag);\n\n          for (var i = 0; i < elms.length; i++) {\n            node.appendChild(elms[i]);\n          }\n        }\n\n        return node;\n      });\n    },\n    prepend: function prepend(html) {\n      return this._inject(html, function (frag, node) {\n        if (typeof frag === 'string' || typeof frag === 'number') {\n          node.insertAdjacentHTML('afterbegin', frag);\n        } else {\n          var elms = frag instanceof Node ? [frag] : this._array(frag).reverse();\n\n          for (var i = 0; i < elms.length; i++) {\n            node.insertBefore(elms[i], node.firstChild);\n          }\n        }\n\n        return node;\n      });\n    },\n    wrap: function wrap(html) {\n      return this._inject(html, function (frag, node) {\n        var wrapper = typeof frag === 'string' || typeof frag === 'number' ? this.create(frag)[0] : frag instanceof Node ? frag : this._array(frag)[0];\n\n        if (node.parentNode) {\n          node.parentNode.insertBefore(wrapper, node);\n        }\n\n        wrapper.appendChild(node);\n        return wrapper;\n      });\n    },\n    unwrap: function unwrap() {\n      return this.each(function ($n) {\n        var node = $n.get();\n        var docFrag = document.createDocumentFragment();\n\n        while (node.firstChild) {\n          var child = node.removeChild(node.firstChild);\n          docFrag.appendChild(child);\n        }\n\n        node.parentNode.replaceChild(docFrag, node);\n      });\n    },\n    replaceWith: function replaceWith(html) {\n      return this._inject(html, function (frag, node) {\n        var docFrag = document.createDocumentFragment();\n        var elms = typeof frag === 'string' || typeof frag === 'number' ? this.create(frag) : frag instanceof Node ? [frag] : this._array(frag);\n\n        for (var i = 0; i < elms.length; i++) {\n          docFrag.appendChild(elms[i]);\n        }\n\n        var result = docFrag.childNodes[0];\n\n        if (node.parentNode) {\n          node.parentNode.replaceChild(docFrag, node);\n        }\n\n        return result;\n      });\n    },\n    remove: function remove() {\n      return this.each(function ($n) {\n        var node = $n.get();\n        if (node.parentNode) node.parentNode.removeChild(node);\n      });\n    },\n    clone: function clone(events) {\n      var n = [];\n      this.each(function ($n) {\n        var node = $n.get();\n\n        var copy = this._clone(node);\n\n        if (events) copy = this._cloneEvents(node, copy);\n        n.push(copy);\n      });\n      return new Dom(n);\n    },\n    // show/hide\n    show: function show() {\n      return this.each(function ($n) {\n        var node = $n.get();\n        if (!node.style || !this._hasDisplayNone(node)) return;\n        var target = node.getAttribute('domTargetShow');\n        node.style.display = target ? target : 'block';\n        node.removeAttribute('domTargetShow');\n      }.bind(this));\n    },\n    hide: function hide() {\n      return this.each(function ($n) {\n        var node = $n.get();\n        if (!node.style || this._hasDisplayNone(node)) return;\n        var display = node.style.display;\n        if (display !== 'block') node.setAttribute('domTargetShow', display);\n        node.style.display = 'none';\n      });\n    },\n    // dimensions\n    scrollTop: function scrollTop(value) {\n      var node = this.get();\n\n      var isWindow = this._isWindowNode(node);\n\n      var isDocument = node.nodeType === 9;\n      var el = isDocument ? node.scrollingElement || node.body.parentNode || node.body || node.documentElement : node;\n\n      if (typeof value !== 'undefined') {\n        value = parseInt(value);\n        if (isWindow) node.scrollTo(0, value);else el.scrollTop = value;\n        return;\n      }\n\n      return isWindow ? node.pageYOffset : el.scrollTop;\n    },\n    offset: function offset() {\n      return this._getPos('offset');\n    },\n    position: function position() {\n      return this._getPos('position');\n    },\n    width: function width(value) {\n      return value !== undefined ? this.css('width', parseInt(value) + 'px') : this._getSize('width', 'Width');\n    },\n    height: function height(value) {\n      return value !== undefined ? this.css('height', parseInt(value) + 'px') : this._getSize('height', 'Height');\n    },\n    outerWidth: function outerWidth() {\n      return this._getSize('width', 'Width', 'outer');\n    },\n    outerHeight: function outerHeight() {\n      return this._getSize('height', 'Height', 'outer');\n    },\n    innerWidth: function innerWidth() {\n      return this._getSize('width', 'Width', 'inner');\n    },\n    innerHeight: function innerHeight() {\n      return this._getSize('height', 'Height', 'inner');\n    },\n    // events\n    click: function click() {\n      return this._trigger('click');\n    },\n    focus: function focus() {\n      return this._trigger('focus');\n    },\n    blur: function blur() {\n      return this._trigger('blur');\n    },\n    on: function on(names, handler, one) {\n      return this.each(function ($n) {\n        var node = $n.get();\n        var events = names.split(' ');\n\n        for (var i = 0; i < events.length; i++) {\n          var event = this._getEventName(events[i]);\n\n          var namespace = this._getEventNamespace(events[i]);\n\n          handler = one ? this._getOneHandler(handler, names) : handler;\n          node.addEventListener(event, handler);\n          node._e = node._e || {};\n          node._e[namespace] = node._e[namespace] || {};\n          node._e[namespace][event] = node._e[namespace][event] || [];\n\n          node._e[namespace][event].push(handler);\n        }\n      });\n    },\n    one: function one(events, handler) {\n      return this.on(events, handler, true);\n    },\n    off: function off(names, handler) {\n      var testEvent = function testEvent(name, key, event) {\n        return name === event;\n      };\n\n      var testNamespace = function testNamespace(name, key, event, namespace) {\n        return key === namespace;\n      };\n\n      var testEventNamespace = function testEventNamespace(name, key, event, namespace) {\n        return name === event && key === namespace;\n      };\n\n      var testPositive = function testPositive() {\n        return true;\n      };\n\n      if (names === undefined) {\n        // all\n        return this.each(function ($n) {\n          this._offEvent($n.get(), false, false, handler, testPositive);\n        });\n      }\n\n      return this.each(function ($n) {\n        var node = $n.get();\n        var events = names.split(' ');\n\n        for (var i = 0; i < events.length; i++) {\n          var event = this._getEventName(events[i]);\n\n          var namespace = this._getEventNamespace(events[i]); // 1) event without namespace\n\n\n          if (namespace === '_events') this._offEvent(node, event, namespace, handler, testEvent); // 2) only namespace\n          else if (!event && namespace !== '_events') this._offEvent(node, event, namespace, handler, testNamespace); // 3) event + namespace\n            else this._offEvent(node, event, namespace, handler, testEventNamespace);\n        }\n      });\n    },\n    // form\n    serialize: function serialize(asObject) {\n      var obj = {};\n      var elms = this.get().elements;\n\n      for (var i = 0; i < elms.length; i++) {\n        var el = elms[i];\n        if (/(checkbox|radio)/.test(el.type) && !el.checked) continue;\n        if (!el.name || el.disabled || el.type === 'file') continue;\n\n        if (el.type === 'select-multiple') {\n          for (var z = 0; z < el.options.length; z++) {\n            var opt = el.options[z];\n            if (opt.selected) obj[el.name] = opt.value;\n          }\n        }\n\n        obj[el.name] = this._number(el.value) ? parseFloat(el.value) : this._boolean(el.value);\n      }\n\n      return asObject ? obj : this._params(obj);\n    },\n    // animation\n    scroll: function scroll() {\n      this.get().scrollIntoView({\n        behavior: 'smooth'\n      });\n    },\n    fadeIn: function fadeIn(speed, fn) {\n      var anim = this._anim(speed, fn, 500);\n\n      return this.each(function ($n) {\n        $n.css({\n          'display': 'block',\n          'opacity': 0,\n          'animation': 'fadeIn ' + anim.speed + 's ease-in-out'\n        });\n        $n.one('animationend', function (e) {\n          $n.css({\n            'opacity': '',\n            'animation': ''\n          });\n          if (anim.fn) anim.fn($n);\n        });\n      });\n    },\n    fadeOut: function fadeOut(speed, fn) {\n      var anim = this._anim(speed, fn, 300);\n\n      return this.each(function ($n) {\n        $n.css({\n          'opacity': 1,\n          'animation': 'fadeOut ' + anim.speed + 's ease-in-out'\n        });\n        $n.one('animationend', function (e) {\n          $n.css({\n            'display': 'none',\n            'opacity': '',\n            'animation': ''\n          });\n          if (anim.fn) anim.fn($n);\n        });\n      });\n    },\n    slideUp: function slideUp(speed, fn) {\n      var anim = this._anim(speed, fn, 300);\n\n      return this.each(function ($n) {\n        $n.height($n.height());\n        $n.css({\n          'overflow': 'hidden',\n          'animation': 'slideUp ' + anim.speed + 's ease-out'\n        });\n        $n.one('animationend', function (e) {\n          $n.css({\n            'display': 'none',\n            'height': '',\n            'animation': ''\n          });\n          if (anim.fn) anim.fn($n);\n        });\n      });\n    },\n    slideDown: function slideDown(speed, fn) {\n      var anim = this._anim(speed, fn, 400);\n\n      return this.each(function ($n) {\n        $n.height($n.height());\n        $n.css({\n          'display': 'block',\n          'overflow': 'hidden',\n          'animation': 'slideDown ' + anim.speed + 's ease-in-out'\n        });\n        $n.one('animationend', function (e) {\n          $n.css({\n            'overflow': '',\n            'height': '',\n            'animation': ''\n          });\n          if (anim.fn) anim.fn($n);\n        });\n      });\n    },\n    // private\n    _queryContext: function _queryContext(s, c) {\n      c = this._context(c);\n      return c.nodeType !== 3 && typeof c.querySelectorAll === 'function' ? c.querySelectorAll(s) : [];\n    },\n    _query: function _query(s, c) {\n      var d = document;\n\n      if (c) {\n        return this._queryContext(s, c);\n      } else if (/^[.#]?[\\w-]*$/.test(s)) {\n        if (s[0] === '#') {\n          var el = d.getElementById(s.slice(1));\n          return el ? [el] : [];\n        }\n\n        if (s[0] === '.') {\n          return d.getElementsByClassName(s.slice(1));\n        }\n\n        return d.getElementsByTagName(s);\n      }\n\n      return d.querySelectorAll(s);\n    },\n    _context: function _context(c) {\n      return !c ? document : typeof c === 'string' ? document.querySelector(c) : c;\n    },\n    _sibling: function _sibling(s, method) {\n      var isNode = s && s.nodeType;\n      var sibling;\n      this.each(function ($n) {\n        var node = $n.get();\n\n        while (node = node[method]) {\n          if (isNode && node === s || new Dom(node).is(s)) {\n            sibling = node;\n            return;\n          }\n        }\n      });\n      return new Dom(sibling);\n    },\n    _slice: function _slice(o) {\n      return !o || o.length === 0 ? [] : o.length ? [].slice.call(o.nodes || o) : [o];\n    },\n    _array: function _array(o) {\n      if (o === undefined) return [];else if (o instanceof NodeList) {\n        var arr = [];\n\n        for (var i = 0; i < o.length; i++) {\n          arr[i] = o[i];\n        }\n\n        return arr;\n      }\n      return o instanceof Dom ? o.nodes : o;\n    },\n    _object: function _object(str) {\n      return new Function(\"return \" + str)();\n    },\n    _params: function _params(obj) {\n      var params = '';\n\n      for (var key in obj) {\n        params += '&' + this._encodeUri(key) + '=' + this._encodeUri(obj[key]);\n      }\n\n      return params.replace(/^&/, '');\n    },\n    _boolean: function _boolean(str) {\n      if (str === 'true') return true;else if (str === 'false') return false;\n      return str;\n    },\n    _number: function _number(str) {\n      return !isNaN(str) && !isNaN(parseFloat(str));\n    },\n    _inject: function _inject(html, fn) {\n      var len = this.nodes.length;\n      var nodes = [];\n\n      while (len--) {\n        var res = typeof html === 'function' ? html.call(this, this.nodes[len]) : html;\n        var el = len === 0 ? res : this._clone(res);\n        var node = fn.call(this, el, this.nodes[len]);\n\n        if (node) {\n          if (node.dom) nodes.push(node.get());else nodes.push(node);\n        }\n      }\n\n      return new Dom(nodes);\n    },\n    _clone: function _clone(node) {\n      if (typeof node === 'undefined') return;\n      if (typeof node === 'string') return node;else if (node instanceof Node || node.nodeType) return node.cloneNode(true);else if ('length' in node) {\n        return [].map.call(this._array(node), function (el) {\n          return el.cloneNode(true);\n        });\n      }\n    },\n    _cloneEvents: function _cloneEvents(node, copy) {\n      var events = node._e;\n\n      if (events) {\n        copy._e = events;\n\n        for (var name in events._events) {\n          for (var i = 0; i < events._events[name].length; i++) {\n            copy.addEventListener(name, events._events[name][i]);\n          }\n        }\n      }\n\n      return copy;\n    },\n    _trigger: function _trigger(name) {\n      var node = this.get();\n      if (node && node.nodeType !== 3) node[name]();\n      return this;\n    },\n    _encodeUri: function _encodeUri(str) {\n      return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/\\*/g, '%2A').replace(/%20/g, '+');\n    },\n    _getSize: function _getSize(name, cname, type) {\n      var el = this.get();\n      var value = 0;\n\n      if (el.nodeType === 3) {\n        value = 0;\n      } else if (el.nodeType === 9) {\n        value = this._getDocSize(el, cname);\n      } else if (this._isWindowNode(el)) {\n        value = window['inner' + cname];\n      } else {\n        value = this._getHeightOrWidth(name);\n      }\n\n      return Math.round(value);\n    },\n    _getDocSize: function _getDocSize(node, type) {\n      var body = node.body,\n          html = node.documentElement;\n      return Math.max(body['scroll' + type], body['offset' + type], html['client' + type], html['scroll' + type], html['offset' + type]);\n    },\n    _getPos: function _getPos(type) {\n      var node = this.get();\n      var dim = {\n        top: 0,\n        left: 0\n      };\n\n      if (node.nodeType === 3 || this._isWindowNode(node) || node.nodeType === 9) {\n        return dim;\n      } else if (type === 'position') {\n        return {\n          top: node.offsetTop,\n          left: node.offsetLeft\n        };\n      } else if (type === 'offset') {\n        var rect = node.getBoundingClientRect();\n        var doc = node.ownerDocument;\n        var docElem = doc.documentElement;\n        var win = doc.defaultView;\n        return {\n          top: rect.top + win.pageYOffset - docElem.clientTop,\n          left: rect.left + win.pageXOffset - docElem.clientLeft\n        };\n      }\n\n      return dim;\n    },\n    _getHeightOrWidth: function _getHeightOrWidth(name, type) {\n      var cname = name.charAt(0).toUpperCase() + name.slice(1);\n      var mode = type ? type : 'offset';\n      var result = 0;\n      var el = this.get();\n      var style = getComputedStyle(el, null);\n      var $targets = this.parents().filter(function ($n) {\n        var node = $n.get();\n        return node.nodeType === 1 && getComputedStyle(node, null).display === 'none' ? node : false;\n      });\n      if (style.display === 'none') $targets.add(el);\n\n      if ($targets.length !== 0) {\n        var fixStyle = 'visibility: hidden !important; display: block !important;';\n        var tmp = [];\n        $targets.each(function ($n) {\n          var thisStyle = $n.attr('style');\n          if (thisStyle !== null) tmp.push(thisStyle);\n          $n.attr('style', thisStyle !== null ? thisStyle + ';' + fixStyle : fixStyle);\n        });\n        result = el[mode + cname];\n        $targets.each(function ($n, i) {\n          if (tmp[i] === undefined) $n.removeAttr('style');else $n.attr('style', tmp[i]);\n        });\n      } else {\n        result = el[mode + cname];\n      }\n\n      return result;\n    },\n    _eachClass: function _eachClass(value, type) {\n      return this.each(function ($n) {\n        if (value) {\n          var node = $n.get();\n\n          var fn = function fn(name) {\n            if (node.classList) node.classList[type](name);\n          };\n\n          value.split(' ').forEach(fn);\n        }\n      });\n    },\n    _getOneHandler: function _getOneHandler(handler, events) {\n      var self = this;\n      return function () {\n        handler.apply(this, arguments);\n        self.off(events);\n      };\n    },\n    _getEventNamespace: function _getEventNamespace(event) {\n      var arr = event.split('.');\n      var namespace = arr[1] ? arr[1] : '_events';\n      return arr[2] ? namespace + arr[2] : namespace;\n    },\n    _getEventName: function _getEventName(event) {\n      return event.split('.')[0];\n    },\n    _offEvent: function _offEvent(node, event, namespace, handler, condition) {\n      for (var key in node._e) {\n        for (var name in node._e[key]) {\n          if (condition(name, key, event, namespace)) {\n            var handlers = node._e[key][name];\n\n            for (var i = 0; i < handlers.length; i++) {\n              if (typeof handler !== 'undefined' && handlers[i].toString() !== handler.toString()) {\n                continue;\n              }\n\n              node.removeEventListener(name, handlers[i]);\n\n              node._e[key][name].splice(i, 1);\n\n              if (node._e[key][name].length === 0) delete node._e[key][name];\n              if (Object.keys(node._e[key]).length === 0) delete node._e[key];\n            }\n          }\n        }\n      }\n    },\n    _hasDisplayNone: function _hasDisplayNone(el) {\n      return el.style.display === 'none' || (el.currentStyle ? el.currentStyle.display : getComputedStyle(el, null).display) === 'none';\n    },\n    _anim: function _anim(speed, fn, speedDef) {\n      if (typeof speed === 'function') {\n        fn = speed;\n        speed = speedDef;\n      } else {\n        speed = speed || speedDef;\n      }\n\n      return {\n        fn: fn,\n        speed: speed / 1000\n      };\n    },\n    _isWindowNode: function _isWindowNode(node) {\n      return node === window || node.parent && node.parent === window;\n    }\n  }; // Unique ID\n\n  var arx_uuid = 0; // Init\n\n  var ArticleEditor = function ArticleEditor(selector, settings) {\n    return ArticleEditorInit(selector, settings);\n  }; // Class\n\n\n  var ArticleEditorInit = function ArticleEditorInit(selector, settings) {\n    var $elms = $ARX.dom(selector);\n    var instance;\n    $elms.each(function ($el) {\n      instance = $el.dataget($ARX.namespace);\n\n      if (!instance) {\n        // Initialization\n        instance = new App($el, settings, arx_uuid);\n        $el.dataset($ARX.namespace, instance);\n        $ARX.instances[arx_uuid] = instance;\n        arx_uuid++;\n      }\n    });\n    return instance;\n  };\n\n  var $ARX = ArticleEditor; // Dom & Ajax\n\n  $ARX.dom = function (selector, context) {\n    return new Dom(selector, context);\n  };\n\n  $ARX.ajax = Ajax; // Globals\n\n  $ARX.instances = [];\n  $ARX.namespace = 'article-editor';\n  $ARX.prefix = 'arx';\n  $ARX.version = '2.1.3';\n  $ARX.settings = {};\n  $ARX.lang = {};\n  $ARX._mixins = {};\n  $ARX._repository = {};\n  $ARX._subscribe = {};\n  $ARX.keycodes = {\n    BACKSPACE: 8,\n    DELETE: 46,\n    UP: 38,\n    DOWN: 40,\n    ENTER: 13,\n    SPACE: 32,\n    ESC: 27,\n    TAB: 9,\n    CTRL: 17,\n    META: 91,\n    SHIFT: 16,\n    ALT: 18,\n    RIGHT: 39,\n    LEFT: 37\n  }; // Add\n\n  $ARX.add = function (type, name, obj) {\n    // translations\n    if (obj.translations) {\n      $ARX.lang = $ARX.extend(true, $ARX.lang, obj.translations);\n    } // defaults\n\n\n    if (obj.defaults) {\n      var localopts = {};\n      localopts[name] = obj.defaults;\n      $ARX.opts = $ARX.extend(true, $ARX.opts, localopts);\n    } // extend parser\n\n\n    if (obj.parser) {\n      var opt = {};\n      opt[obj.type] = obj.parser;\n      $ARX.opts.parser = $ARX.extend({}, true, $ARX.opts.parser, opt);\n    } // extend nested\n\n\n    if (obj.nested) {\n      $ARX.opts.nested.push(obj.type);\n    }\n\n    if (type === 'mixin') {\n      $ARX._mixins[name] = obj;\n    } else {\n      // subscribe\n      if (obj.subscribe) {\n        for (var key in obj.subscribe) {\n          var arr = key.split(',');\n\n          for (var i = 0; i < arr.length; i++) {\n            var ns = arr[i].trim();\n            if (typeof $ARX._subscribe[ns] === 'undefined') $ARX._subscribe[ns] = [];\n\n            $ARX._subscribe[ns].push({\n              module: name,\n              func: obj.subscribe[key]\n            });\n          }\n        }\n      } // prototype\n\n\n      var F = function F() {};\n\n      F.prototype = obj; // mixins\n\n      if (obj.mixins) {\n        for (var z = 0; z < obj.mixins.length; z++) {\n          $ARX.inherit(F, $ARX._mixins[obj.mixins[z]]);\n        }\n      }\n\n      $ARX._repository[name] = {\n        type: type,\n        proto: F,\n        obj: obj\n      };\n    }\n  }; // Extend\n\n\n  $ARX.extend = function () {\n    var extended = {};\n    var deep = false;\n    var i = 0;\n    var length = arguments.length;\n\n    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\n      deep = arguments[0];\n      i++;\n    }\n\n    var merge = function merge(obj) {\n      for (var prop in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n          if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') extended[prop] = $ARX.extend(true, extended[prop], obj[prop]);else extended[prop] = obj[prop];\n        }\n      }\n    };\n\n    for (; i < length; i++) {\n      var obj = arguments[i];\n      merge(obj);\n    }\n\n    return extended;\n  }; // Error\n\n\n  $ARX.error = function (exception) {\n    throw exception;\n  }; // Inherit\n\n\n  $ARX.inherit = function (current, parent) {\n    var F = function F() {};\n\n    F.prototype = parent;\n    var f = new F();\n\n    for (var prop in current.prototype) {\n      if (current.prototype.__lookupGetter__(prop)) f.__defineGetter__(prop, current.prototype.__lookupGetter__(prop));else f[prop] = current.prototype[prop];\n    }\n\n    current.prototype = f;\n    current.prototype[\"super\"] = parent;\n    return current;\n  }; // Lang\n\n\n  $ARX.addLang = function (lang, obj) {\n    if (typeof $ARX.lang[lang] === 'undefined') $ARX.lang[lang] = {};\n    $ARX.lang[lang] = $ARX.extend(true, $ARX.lang[lang], obj);\n  };\n\n  ArticleEditor.opts = {\n    plugins: [],\n    content: false,\n    placeholder: false,\n    css: false,\n    custom: {\n      css: false,\n      js: false\n    },\n    editor: {\n      classname: 'entry',\n      focus: false,\n      sync: true,\n      drop: true,\n      lang: 'en',\n      add: 'top',\n      padding: true,\n      markup: 'paragraph',\n      mobile: 400,\n      scrollTarget: window,\n      direction: 'ltr',\n      spellcheck: true,\n      grammarly: false,\n      notranslate: false,\n      minHeight: '100px',\n      // string, '500px'\n      maxHeight: false,\n      // string, '500px'\n      doctype: '<!doctype html>'\n    },\n    selection: {\n      multiple: true\n    },\n    control: true,\n    source: true,\n    image: {\n      states: true,\n      upload: false,\n      url: true,\n      select: false,\n      name: 'file',\n      data: false,\n      drop: true,\n      multiple: true,\n      clipboard: true,\n      types: ['image/*'],\n      tag: 'figure',\n      // p, div, figure\n      newtab: false,\n      link: true\n    },\n    classes: false,\n    codemirrorSrc: false,\n    codemirror: false,\n    state: {\n      limit: 100\n    },\n    path: {\n      title: '## editor.title ##',\n      sticky: true,\n      stickyMinHeight: 200,\n      // pixels\n      stickyTopOffset: 0 // number\n\n    },\n    autosave: {\n      url: false,\n      name: false,\n      data: false\n    },\n    paste: {\n      clean: true,\n      autolink: true,\n      paragraphize: true,\n      plaintext: false,\n      linkTarget: false,\n      images: true,\n      links: true,\n      keepStyle: [],\n      keepClass: [],\n      keepAttrs: ['td', 'th'],\n      formTags: ['form', 'input', 'button', 'select', 'textarea', 'legend', 'fieldset'],\n      blockTags: ['pre', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'table', 'tbody', 'thead', 'tfoot', 'th', 'tr', 'td', 'ul', 'ol', 'li', 'blockquote', 'p', 'hr', 'figure', 'iframe', 'figcaption', 'address', 'section', 'header', 'footer', 'aside', 'article'],\n      inlineTags: ['a', 'svg', 'img', 'br', 'strong', 'ins', 'code', 'del', 'span', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small', 'b', 'u', 'em', 'i', 'abbr']\n    },\n    clean: {\n      comments: false,\n      enter: true,\n      enterinline: false\n    },\n    tab: {\n      key: true,\n      spaces: false // true or number of spaces\n\n    },\n    topbar: {\n      undoredo: false,\n      shortcuts: true\n    },\n    toolbar: {\n      sticky: true,\n      stickyMinHeight: 200,\n      // pixels\n      stickyTopOffset: 0 // number\n\n    },\n    buttons: {\n      editor: {\n        add: {\n          command: 'addbar.popup',\n          title: '## buttons.add ##'\n        },\n        template: {\n          title: '## buttons.templates ##',\n          command: 'template.popup',\n          observer: 'template.observe'\n        },\n        mobile: {\n          title: '## buttons.mobile-view ##',\n          command: 'editor.toggleView'\n        },\n        html: {\n          title: '## buttons.html ##',\n          command: 'source.toggle'\n        }\n      },\n      topbar: {\n        undo: {\n          title: '## buttons.undo ##',\n          command: 'buffer.undo'\n        },\n        redo: {\n          title: '## buttons.redo ##',\n          command: 'buffer.redo'\n        },\n        shortcut: {\n          title: '## buttons.shortcuts ##',\n          observer: 'shortcut.observe',\n          command: 'shortcut.popup'\n        }\n      },\n      except: false,\n      add: false,\n      tags: {\n        'b': ['bold'],\n        'strong': ['bold'],\n        'i': ['italic'],\n        'em': ['italic'],\n        'del': ['deleted'],\n        'a': ['link']\n      },\n      types: false,\n      hidden: {}\n    },\n    card: {\n      classname: 'card',\n      template: '<div class=\"card\"><div class=\"card-head\"><h3>Card title</h3></div><div class=\"card-body\"><p>Card body</p></div></div>'\n    },\n    text: {\n      classname: 'arx-text'\n    },\n    noneditable: {\n      classname: 'noneditable'\n    },\n    embed: {\n      responsive: 'embed-responsive'\n    },\n    code: {\n      template: '<pre></pre>',\n      spaces: 4 // or false\n\n    },\n    line: true,\n    layer: {\n      template: '<div></div>'\n    },\n    table: {\n      template: '<table><tr><td></td><td></td></tr><tr><td></td><td></td></tr></table>'\n    },\n    quote: {\n      template: '<blockquote><p>Quote...</p><p><cite>Author Attribution</cite></p></blockquote>'\n    },\n    snippets: false,\n    templates: false,\n    grid: {\n      classname: 'grid',\n      classes: '',\n      overlay: true,\n      offset: {\n        left: 0,\n        right: 0\n      },\n      columns: 12,\n      gutter: '1.25rem',\n      patterns: {\n        '6|6': 'column column-6|column column-6',\n        '4|4|4': 'column column-4|column column-4|column column-4',\n        '3|3|3|3': 'column column-3|column column-3|column column-3|column column-3',\n        '2|2|2|2|2|2': 'column column-2|column column-2|column column-2|column column-2|column column-2|column column-2',\n        '3|6|3': 'column column-3|column column-6|column column-3',\n        '2|8|2': 'column column-2|column column-8|column column-2',\n        '5|7': 'column column-5|column column-7',\n        '7|5': 'column column-7|column column-5',\n        '4|8': 'column column-4|column column-8',\n        '8|4': 'column column-8|column column-4',\n        '3|9': 'column column-3|column column-9',\n        '9|3': 'column column-9|column column-3',\n        '2|10': 'column column-2|column column-10',\n        '10|2': 'column column-10|column column-2',\n        '12': 'column column-12'\n      }\n    },\n    link: {\n      size: 30,\n      nofollow: false,\n      target: false\n    },\n    addbar: ['paragraph', 'image', 'embed', 'line', 'table', 'snippet', 'quote', 'code', 'grid', 'layer'],\n    // text, card\n    addbarAdd: [],\n    addbarHide: [],\n    format: ['p', 'h1', 'h2', 'h3', 'ul', 'ol'],\n    // h4, h5, h6,  dl, address, div (text)\n    outset: {\n      none: 'none',\n      left: 'outset-left',\n      both: 'outset-both',\n      right: 'outset-right'\n    },\n    align: {\n      left: 'align-left',\n      center: 'align-center',\n      right: 'align-right',\n      justify: 'align-justify'\n    },\n    valign: {\n      none: 'none',\n      top: 'valign-top',\n      middle: 'valign-middle',\n      bottom: 'valign-bottom'\n    },\n    shortcutsBase: {\n      'meta+z': '## shortcuts.meta-z ##',\n      'meta+shift+z': '## shortcuts.meta-shift-z ##',\n      'meta+a': '## shortcuts.meta-a ##',\n      'meta+shift+a': '## shortcuts.meta-shift-a ##',\n      'meta+click': '## shortcuts.meta-click ##'\n    },\n    shortcuts: {\n      'ctrl+shift+d, meta+shift+d': {\n        title: '## shortcuts.meta-shift-d ##',\n        name: 'meta+shift+d',\n        command: 'block.duplicate'\n      },\n      'ctrl+shift+up, meta+shift+up': {\n        title: '## shortcuts.meta-shift-up ##',\n        name: 'meta+shift+&uarr;',\n        command: 'block.moveUp'\n      },\n      'ctrl+shift+down, meta+shift+down': {\n        title: '## shortcuts.meta-shift-down ##',\n        name: 'meta+shift+&darr;',\n        command: 'block.moveDown'\n      },\n      'ctrl+shift+m, meta+shift+m': {\n        title: '## shortcuts.meta-shift-m ##',\n        name: 'meta+shift+m',\n        command: 'inline.removeFormat'\n      },\n      'ctrl+b, meta+b': {\n        title: '## shortcuts.meta-b ##',\n        name: 'meta+b',\n        command: 'inline.set',\n        params: {\n          tag: 'b'\n        }\n      },\n      'ctrl+i, meta+i': {\n        title: '## shortcuts.meta-i ##',\n        name: 'meta+i',\n        command: 'inline.set',\n        params: {\n          tag: 'i'\n        }\n      },\n      'ctrl+u, meta+u': {\n        title: '## shortcuts.meta-u ##',\n        name: 'meta+u',\n        command: 'inline.set',\n        params: {\n          tag: 'u'\n        }\n      },\n      'ctrl+h, meta+h': {\n        title: '## shortcuts.meta-h ##',\n        name: 'meta+h',\n        command: 'inline.set',\n        params: {\n          tag: 'sup'\n        }\n      },\n      'ctrl+l, meta+l': {\n        title: '## shortcuts.meta-l ##',\n        name: 'meta+l',\n        command: 'inline.set',\n        params: {\n          tag: 'sub'\n        }\n      },\n      'ctrl+alt+0, meta+alt+0': {\n        title: '## shortcuts.meta-alt-0 ##',\n        name: 'meta+alt+0',\n        command: 'block.format',\n        params: {\n          tag: 'p'\n        }\n      },\n      'ctrl+alt+1, meta+alt+1': {\n        title: '## shortcuts.meta-alt-1 ##',\n        name: 'meta+alt+1',\n        command: 'block.format',\n        params: {\n          tag: 'h1'\n        }\n      },\n      'ctrl+alt+2, meta+alt+2': {\n        title: '## shortcuts.meta-alt-2 ##',\n        name: 'meta+alt+2',\n        command: 'block.format',\n        params: {\n          tag: 'h2'\n        }\n      },\n      'ctrl+alt+3, meta+alt+3': {\n        title: '## shortcuts.meta-alt-3 ##',\n        name: 'meta+alt+3',\n        command: 'block.format',\n        params: {\n          tag: 'h3'\n        }\n      },\n      'ctrl+alt+4, meta+alt+4': {\n        title: '## shortcuts.meta-alt-4 ##',\n        name: 'meta+alt+4',\n        command: 'block.format',\n        params: {\n          tag: 'h4'\n        }\n      },\n      'ctrl+alt+5, meta+alt+5': {\n        title: '## shortcuts.meta-alt-5 ##',\n        name: 'meta+alt+5',\n        command: 'block.format',\n        params: {\n          tag: 'h5'\n        }\n      },\n      'ctrl+alt+6, meta+alt+6': {\n        title: '## shortcuts.meta-alt-6 ##',\n        name: 'meta+alt+6',\n        command: 'block.format',\n        params: {\n          tag: 'h6'\n        }\n      },\n      'ctrl+shift+7, meta+shift+7': {\n        title: '## shortcuts.meta-shift-7 ##',\n        name: 'meta+shift+7',\n        command: 'block.format',\n        params: {\n          tag: 'ol'\n        }\n      },\n      'ctrl+shift+8, meta+shift+8': {\n        title: '## shortcuts.meta-shift-8 ##',\n        name: 'meta+shift+8',\n        command: 'block.format',\n        params: {\n          tag: 'ul'\n        }\n      },\n      'ctrl+], meta+]': {\n        title: '## shortcuts.meta-indent ##',\n        name: 'meta+]',\n        command: 'list.indent'\n      },\n      'ctrl+[, meta+[': {\n        title: '## shortcuts.meta-outdent ##',\n        name: 'meta+[',\n        command: 'list.outdent'\n      },\n      'ctrl+k, meta+k': {\n        title: '## shortcuts.meta-k ##',\n        name: 'meta+k',\n        command: 'link.format'\n      }\n    },\n    // private\n    markerChar: \"\\uFEFF\",\n    tags: {\n      denied: ['font', 'html', 'head', 'link', 'title', 'body', 'meta', 'applet', 'marquee'],\n      incode: ['!DOCTYPE', '!doctype', 'html', 'head', 'link', 'title', 'body', 'meta', 'textarea', 'style'],\n      form: ['form', 'input', 'button', 'select', 'textarea', 'legend', 'fieldset'],\n      inline: ['a', 'svg', 'span', 'strong', 'strike', 'b', 'u', 'em', 'i', 'code', 'del', 'ins', 'samp', 'kbd', 'sup', 'sub', 'mark', 'var', 'cite', 'small', 'abbr'],\n      block: ['pre', 'hr', 'ul', 'ol', 'li', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'dl', 'dt', 'dd', 'div', 'table', 'tbody', 'thead', 'tfoot', 'tr', 'th', 'td', 'blockquote', 'output', 'figcaption', 'figure', 'address', 'main', 'section', 'header', 'footer', 'aside', 'article', 'iframe'],\n      parser: ['pre', 'hr', 'ul', 'ol', 'dl', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'div', 'table', 'address', 'blockquote', 'figure', 'main', 'section', 'header', 'footer', 'aside', 'article', 'iframe']\n    },\n    bsmodal: false,\n    regex: {\n      youtube: /https?:\\/\\/(?:[0-9A-Z-]+\\.)?(?:youtu\\.be\\/|youtube\\.com\\S*[^\\w-\\s])([\\w-]{11})(?=[^\\w-]|$)(?![?=&+%\\w.-]*(?:['\"][^<>]*>|<\\/a>))[?=&+%\\w.-]*/gi,\n      vimeo: /(http|https)?:\\/\\/(?:www.|player.)?vimeo.com\\/(?:channels\\/(?:\\w+\\/)?|groups\\/(?:[^/]*)\\/videos\\/|album\\/(?:\\d+)\\/video\\/|video\\/|)(\\d+)(?:\\/[a-zA-Z0-9_-]+)?/gi,\n      imageurl: /((https?|www)[^\\s]+\\.)(jpe?g|png|gif)(\\?[^\\s-]+)?/gi,\n      url: /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/gi\n    },\n    addbarExtend: {},\n    addbarObj: {\n      paragraph: {\n        title: '## blocks.paragraph ##',\n        command: 'block.add'\n      },\n      image: {\n        title: '## blocks.image ##',\n        command: 'image.popup',\n        observer: 'image.observe'\n      },\n      embed: {\n        title: '## blocks.embed ##',\n        command: 'embed.popup',\n        observer: 'embed.observe'\n      },\n      line: {\n        title: '## blocks.line ##',\n        command: 'block.add',\n        observer: 'block.observe'\n      },\n      table: {\n        title: '## blocks.table ##',\n        command: 'table.add',\n        observer: 'table.observe'\n      },\n      snippet: {\n        title: '## blocks.snippet ##',\n        command: 'snippet.popup',\n        observer: 'snippet.observe'\n      },\n      quote: {\n        title: '## blocks.quote ##',\n        command: 'block.add',\n        observer: 'block.observe'\n      },\n      text: {\n        title: '## blocks.text ##',\n        command: 'block.add'\n      },\n      code: {\n        title: '## blocks.code ##',\n        command: 'block.add',\n        observer: 'block.observe'\n      },\n      grid: {\n        title: '## blocks.grid ##',\n        command: 'grid.popup',\n        observer: 'grid.observe'\n      },\n      layer: {\n        title: '## blocks.layer ##',\n        command: 'block.add',\n        observer: 'block.observe'\n      },\n      card: {\n        title: '## blocks.card ##',\n        command: 'block.add'\n      }\n    },\n    nested: [],\n    parser: {},\n    parserTags: [],\n    formatObj: {\n      p: {\n        title: '## blocks.paragraph ##',\n        type: 'paragraph',\n        shortcut: 'Ctrl+Alt+0'\n      },\n      div: {\n        title: '## blocks.text ##',\n        type: 'text'\n      },\n      h1: {\n        title: '<span style=\"font-size: 20px; font-weight: bold;\">## headings.h1 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+1'\n      },\n      h2: {\n        title: '<span style=\"font-size: 16px; font-weight: bold;\">## headings.h2 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+2'\n      },\n      h3: {\n        title: '<span style=\"font-weight: bold;\">## headings.h3 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+3'\n      },\n      h4: {\n        title: '<span style=\"font-weight: bold;\">## headings.h4 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+4'\n      },\n      h5: {\n        title: '<span style=\"font-weight: bold;\">## headings.h5 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+5'\n      },\n      h6: {\n        title: '<span style=\"font-weight: bold;\">## headings.h6 ##</span>',\n        type: 'heading',\n        shortcut: 'Ctrl+Alt+6'\n      },\n      ul: {\n        title: '&bull; ## list.unordered-list ##',\n        type: 'list',\n        shortcut: 'Ctrl+Shift+7'\n      },\n      ol: {\n        title: '1. ## list.ordered-list ##',\n        type: 'list',\n        shortcut: 'Ctrl+Shift+8'\n      },\n      dl: {\n        title: '## blocks.dlist ##',\n        type: 'dlist'\n      },\n      address: {\n        title: '<em>## blocks.address ##</em>',\n        type: 'address'\n      }\n    }\n  };\n  ArticleEditor.lang['en'] = {\n    \"accessibility\": {\n      \"help-label\": \"Rich text editor\"\n    },\n    \"editor\": {\n      \"title\": \"Article\",\n      \"multiple\": \"Multiple\"\n    },\n    \"placeholders\": {\n      \"figcaption\": \"Type caption (optional)\",\n      \"text\": \"Type something...\",\n      \"code\": \"Edit to add code...\",\n      \"layer\": \"Press enter to add a new text...\"\n    },\n    \"popup\": {\n      \"link\": \"Link\",\n      \"add\": \"Add\",\n      \"grid\": \"Grid\",\n      \"back\": \"Back\",\n      \"image\": \"Image\",\n      \"snippets\": \"Snippets\",\n      \"add-image\": \"Add Image\"\n    },\n    \"shortcuts\": {\n      \"meta-a\": \"Select text in the block\",\n      \"meta-shift-a\": \"Select all blocks\",\n      \"meta-click\": \"Select multiple blocks\",\n      \"meta-z\": \"Undo\",\n      \"meta-shift-z\": \"Redo\",\n      \"meta-shift-m\": \"Remove inline format\",\n      \"meta-b\": \"Bold\",\n      \"meta-i\": \"Italic\",\n      \"meta-u\": \"Underline\",\n      \"meta-h\": \"Superscript\",\n      \"meta-l\": \"Subscript\",\n      \"meta-k\": \"Link\",\n      \"meta-alt-0\": \"Normal text\",\n      \"meta-alt-1\": \"Heading 1\",\n      \"meta-alt-2\": \"Heading 2\",\n      \"meta-alt-3\": \"Heading 3\",\n      \"meta-alt-4\": \"Heading 4\",\n      \"meta-alt-5\": \"Heading 5\",\n      \"meta-alt-6\": \"Heading 6\",\n      \"meta-shift-7\": \"Ordered List\",\n      \"meta-shift-8\": \"Unordered List\",\n      \"meta-indent\": \"Indent\",\n      \"meta-outdent\": \"Outdent\",\n      \"meta-shift-backspace\": \"Delete block\",\n      \"meta-shift-d\": \"Duplicate block\",\n      \"meta-shift-up\": \"Move line up\",\n      \"meta-shift-down\": \"Move line down\"\n    },\n    \"headings\": {\n      \"h1\": \"Large Heading\",\n      \"h2\": \"Medium Heading\",\n      \"h3\": \"Small Heading\",\n      \"h4\": \"Heading 4\",\n      \"h5\": \"Heading 5\",\n      \"h6\": \"Heading 6\"\n    },\n    \"inline\": {\n      \"bold\": \"Bold\",\n      \"italic\": \"Italic\",\n      \"deleted\": \"Deleted\"\n    },\n    \"list\": {\n      \"unordered-list\": \"Unordered List\",\n      \"ordered-list\": \"Ordered List\",\n      \"indent\": \"Indent\",\n      \"outdent\": \"Outdent\"\n    },\n    \"link\": {\n      \"link\": \"Link\",\n      \"edit-link\": \"Edit link\",\n      \"unlink\": \"Unlink\",\n      \"link-in-new-tab\": \"Open link in new tab\",\n      \"save\": \"Save\",\n      \"insert\": \"Insert\",\n      \"cancel\": \"Cancel\",\n      \"text\": \"Text\",\n      \"url\": \"URL\"\n    },\n    \"table\": {\n      \"width\": \"Width\",\n      \"nowrap\": \"Nowrap\",\n      \"save\": \"Save\",\n      \"cancel\": \"Cancel\",\n      \"table-cell\": \"Table Cell\",\n      \"add-head\": \"Add head\",\n      \"remove-head\": \"Remove head\",\n      \"add-row-below\": \"Add row below\",\n      \"add-row-above\": \"Add row above\",\n      \"remove-row\": \"Remove row\",\n      \"add-column-after\": \"Add column after\",\n      \"add-column-before\": \"Add column before\",\n      \"remove-column\": \"Remove column\"\n    },\n    \"image\": {\n      \"or\": \"or\",\n      \"alt-text\": \"Alt Text\",\n      \"save\": \"Save\",\n      \"link\": \"Link\",\n      \"delete\": \"Delete\",\n      \"cancel\": \"Cancel\",\n      \"insert\": \"Insert\",\n      \"caption\": \"Caption\",\n      \"link-in-new-tab\": \"Open link in new tab\",\n      \"url-placeholder\": \"Paste url of image...\",\n      \"upload-new-placeholder\": \"Drag to upload a new image<br>or click to select\"\n    },\n    \"code\": {\n      \"code\": \"Code\",\n      \"insert\": \"Insert\",\n      \"save\": \"Save\",\n      \"cancel\": \"Cancel\"\n    },\n    \"embed\": {\n      \"embed\": \"Embed\",\n      \"caption\": \"Caption\",\n      \"insert\": \"Insert\",\n      \"save\": \"Save\",\n      \"cancel\": \"Cancel\",\n      \"description\": \"Paste any embed/html code or enter the url (vimeo or youtube video only)\",\n      \"responsive-video\": \"Responsive video\"\n    },\n    \"upload\": {\n      \"placeholder\": \"Drag to upload <br>or click to select\"\n    },\n    \"templates\": {\n      \"templates\": \"Templates\"\n    },\n    \"snippets\": {\n      \"snippets\": \"Snippets\"\n    },\n    \"form\": {\n      \"link\": \"Link\",\n      \"url\": \"Url\",\n      \"text\": \"Text\",\n      \"name\": \"Name\",\n      \"alt-text\": \"Alt Text\",\n      \"image\": \"Image\",\n      \"upload\": \"Upload\",\n      \"alignment\": \"Alignment\",\n      \"outset\": \"Outset\",\n      \"valign\": \"Valign\"\n    },\n    \"buttons\": {\n      \"mobile-view\": \"Mobile View\",\n      \"cancel\": \"Cancel\",\n      \"insert\": \"Insert\",\n      \"unlink\": \"Unlink\",\n      \"save\": \"Save\",\n      \"add\": \"Add\",\n      \"transform-to-text\": \"Transform to text\",\n      \"align\": \"Alignment\",\n      \"valign\": \"Valign\",\n      \"outset\": \"Outset\",\n      \"indent\": \"Indent\",\n      \"outdent\": \"Outdent\",\n      \"head\": \"Head\",\n      \"row\": \"Row\",\n      \"cell\": \"Cell\",\n      \"html\": \"HTML\",\n      \"templates\": \"Templates\",\n      \"shortcuts\": \"Keyboard Shortcuts\",\n      \"format\": \"Format\",\n      \"bold\": \"Bold\",\n      \"italic\": \"Italic\",\n      \"deleted\": \"Deleted\",\n      \"underline\": \"Underline\",\n      \"table\": \"Table\",\n      \"link\": \"Link\",\n      \"undo\": \"Undo\",\n      \"redo\": \"Redo\",\n      \"style\": \"Style\",\n      \"config\": \"Config\",\n      \"settings\": \"Settings\",\n      \"text\": \"Text\",\n      \"embed\": \"Embed\",\n      \"grid\": \"Grid\",\n      \"image\": \"Image\",\n      \"list\": \"List\",\n      \"delete\": \"Delete\",\n      \"duplicate\": \"Duplicate\",\n      \"sort\": \"Sort\",\n      \"edit\": \"Edit\",\n      \"inline\": \"Inline\"\n    },\n    \"blocks\": {\n      \"noneditable\": \"Noneditable\",\n      \"paragraph\": \"Paragraph\",\n      \"heading\": \"Heading\",\n      \"image\": \"Image\",\n      \"figcaption\": \"Figcaption\",\n      \"embed\": \"Embed\",\n      \"line\": \"Line\",\n      \"code\": \"Code\",\n      \"quote\": \"Quote\",\n      \"quoteitem\": \"Paragraph\",\n      \"snippet\": \"Snippet\",\n      \"column\": \"Column\",\n      \"grid\": \"Grid\",\n      \"list\": \"List\",\n      \"table\": \"Table\",\n      \"layer\": \"Layer\",\n      \"row\": \"Row\",\n      \"text\": \"Text\",\n      \"cell\": \"Cell\",\n      \"dlist\": \"Definition List\",\n      \"address\": \"Address\",\n      \"form\": \"Form\",\n      \"card\": \"Card\"\n    }\n  };\n\n  var App = function App($element, settings, uuid) {\n    // environment\n    var maps = ['keycodes', 'prefix', 'dom', 'ajax', '_repository', '_subscribe'];\n\n    for (var i = 0; i < maps.length; i++) {\n      this[maps[i]] = $ARX[maps[i]];\n    }\n\n    this.uuid = uuid;\n    this.$win = this.dom(window);\n    this.$doc = this.dom(document);\n    this.$body = this.dom('body');\n    this.$element = $element;\n    this.app = this; // initial\n\n    this.initialSettings = settings; // starter\n\n    this._initer = ['setting', 'lang'];\n    this._priority = ['container', 'editor', 'accessibility', 'state'];\n    this._plugins = []; // started\n\n    this.started = false; // start\n\n    this.start();\n  };\n\n  App.prototype = {\n    // start\n    start: function start(settings) {\n      if (!this.isTextarea()) return;\n      if (this.isStarted()) return;\n      if (settings) this.initialSettings = settings; // core\n\n      this._initCore();\n\n      this._plugins = this.setting.get('plugins'); // starting\n\n      this.broadcast('app.before.start'); // init\n\n      this._initModules();\n\n      this._initPlugins(); // start\n\n\n      this._startPriority();\n\n      this._startModules();\n\n      this._startPlugins();\n\n      this.started = true; // started\n\n      this.broadcast('app.start'); // call load methods\n\n      this._loadModulesAndPlugins();\n    },\n    isStarted: function isStarted() {\n      return this.started;\n    },\n    isTextarea: function isTextarea() {\n      return this.$element.get().tagName === 'TEXTAREA';\n    },\n    // stop\n    stop: function stop() {\n      if (this.isStopped()) return; // stopping\n\n      this.broadcast('app.before.stop');\n\n      this._stopPriority();\n\n      this._stopModules();\n\n      this._stopPlugins();\n\n      this.started = false; // stopped\n\n      this.broadcast('app.stop');\n    },\n    isStopped: function isStopped() {\n      return !this.started;\n    },\n    // textarea\n    // broadcast\n    broadcast: function broadcast(name, params) {\n      var event = params instanceof App.Event ? params : new App.Event(name, params);\n\n      if (typeof this._subscribe[name] !== 'undefined') {\n        var events = this._subscribe[name];\n\n        for (var i = 0; i < events.length; i++) {\n          var instance = this[events[i].module];\n\n          if (instance) {\n            events[i].func.call(instance, event);\n          }\n        }\n      } // callbacks\n\n\n      var callbacks = this.setting.has('subscribe') ? this.setting.get('subscribe') : {};\n\n      if (typeof callbacks[name] === 'function') {\n        callbacks[name].call(this, event);\n      }\n\n      return event;\n    },\n    broadcastParams: function broadcastParams(name, params) {\n      var event = this.broadcast(name, params);\n      return event.getAll();\n    },\n    broadcastHtml: function broadcastHtml(name, html) {\n      var event = this.broadcast(name, {\n        html: html\n      });\n      return event.get('html');\n    },\n    // create\n    create: function create(name) {\n      if (typeof this._repository[name] === 'undefined') {\n        $ARX.error('The class \"' + name + '\" does not exist.');\n      }\n\n      var args = [].slice.call(arguments, 1);\n      var instance = new this._repository[name].proto(); // extend\n\n      instance._name = name;\n      instance.app = this;\n      var maps = ['uuid', 'prefix', 'dom', 'ajax'];\n\n      for (var i = 0; i < maps.length; i++) {\n        instance[maps[i]] = this[maps[i]];\n      } // lang & settings\n\n\n      if (this.lang) instance.lang = this.lang;\n      if (this.opts) instance.opts = this.opts; // init\n\n      var result;\n\n      if (instance.init) {\n        result = instance.init.apply(instance, args);\n      }\n\n      return result ? result : instance;\n    },\n    // api\n    api: function api(name) {\n      var args = [].slice.call(arguments, 1);\n      var namespaces = name.split(\".\");\n      var func = namespaces.pop();\n      var context = this;\n\n      for (var i = 0; i < namespaces.length; i++) {\n        context = context[namespaces[i]];\n      }\n\n      if (context && typeof context[func] === 'function') {\n        return context[func].apply(context, args);\n      }\n    },\n    // init\n    _initCore: function _initCore() {\n      for (var i = 0; i < this._initer.length; i++) {\n        this[this._initer[i]] = this.create(this._initer[i]);\n      } // opts\n\n\n      if (this.setting) {\n        this.opts = this.setting.dump();\n      }\n    },\n    _initModules: function _initModules() {\n      for (var key in this._repository) {\n        if (this._repository[key].type === 'module' && this._initer.indexOf(key) === -1) {\n          this[key] = this.create(key);\n        }\n      }\n    },\n    _initPlugins: function _initPlugins() {\n      var plugins = this.setting.get('plugins');\n\n      for (var key in this._repository) {\n        if (this._repository[key].type === 'plugin' && plugins.indexOf(key) !== -1) {\n          this[key] = this.create(key);\n        }\n      }\n    },\n    // start\n    _startPriority: function _startPriority() {\n      for (var i = 0; i < this._priority.length; i++) {\n        this._call(this[this._priority[i]], 'start');\n      }\n    },\n    _startModules: function _startModules() {\n      this._iterate('module', 'start');\n    },\n    _startPlugins: function _startPlugins() {\n      this._iterate('plugin', 'start');\n    },\n    // stop\n    _stopPriority: function _stopPriority() {\n      var priority = this._priority.slice().reverse();\n\n      for (var i = 0; i < priority.length; i++) {\n        this._call(this[priority[i]], 'stop');\n      }\n    },\n    _stopModules: function _stopModules() {\n      this._iterate('module', 'stop');\n    },\n    _stopPlugins: function _stopPlugins() {\n      this._iterate('plugin', 'stop');\n    },\n    // load\n    _loadModulesAndPlugins: function _loadModulesAndPlugins() {\n      this._iterate('module', 'load');\n\n      this._iterate('plugin', 'load');\n    },\n    // iterate\n    _iterate: function _iterate(type, method) {\n      for (var key in this._repository) {\n        var isIn = type === 'module' ? method === 'load' || this._priority.indexOf(key) === -1 : this._plugins.indexOf(key) !== -1;\n\n        if (this._repository[key].type === type && isIn) {\n          this._call(this[key], method);\n        }\n      }\n    },\n    // call\n    _call: function _call(instance, method) {\n      if (typeof instance[method] === 'function') {\n        instance[method].apply(instance);\n      }\n    }\n  };\n\n  App.Event = function (name, params) {\n    // local\n    this.name = name;\n    this.params = typeof params === 'undefined' ? {} : params;\n    this.stopped = false;\n  };\n\n  App.Event.prototype = {\n    is: function is(name) {\n      if (Array.isArray(name)) {\n        for (var i = 0; i < name.length; i++) {\n          if (this.params[name[i]]) {\n            return true;\n          }\n        }\n      } else {\n        return this.get(name);\n      }\n    },\n    has: function has(name) {\n      return typeof this.params[name] !== 'undefined';\n    },\n    getAll: function getAll() {\n      return this.params;\n    },\n    get: function get(name) {\n      return this.params[name];\n    },\n    set: function set(name, value) {\n      this.params[name] = value;\n    },\n    stop: function stop() {\n      this.stopped = true;\n    },\n    isStopped: function isStopped() {\n      return this.stopped;\n    }\n  };\n  ArticleEditor.add('mixin', 'block', {\n    defaults: {\n      id: {\n        getter: 'getId',\n        setter: 'setId'\n      },\n      html: {\n        getter: 'getHtml',\n        setter: 'setHtml'\n      },\n      align: {\n        getter: 'getAlign',\n        setter: 'setAlign'\n      },\n      valign: {\n        getter: 'getValign',\n        setter: 'setValign'\n      },\n      outset: {\n        getter: 'getOutset',\n        setter: 'setOutset'\n      }\n    },\n    init: function init(source) {\n      this.$block = source ? this.dom(source) : this.create(); // build & render\n\n      this._build();\n\n      this._buildData();\n\n      this._render();\n    },\n    // is\n    isBlock: function isBlock() {\n      return true;\n    },\n    isAllowedButton: function isAllowedButton(name, obj) {\n      // type\n      var type = this.getType(); // hidden\n\n      if (typeof this.opts.buttons.hidden[name] !== 'undefined') {\n        var val = this.opts.buttons.hidden[name];\n\n        if (val === true) {\n          return false;\n        } else if (Array.isArray(val) && val.indexOf(type) !== -1) {\n          return false;\n        }\n      } // all\n\n\n      if (typeof obj.blocks === 'undefined') {\n        return true;\n      }\n\n      var blocks = obj.blocks; // except\n\n      if (blocks.except && blocks.except.indexOf(type) !== -1) {\n        return false;\n      } // array of elements\n\n\n      if (Array.isArray(blocks.types) && blocks.types.indexOf(type) !== -1) {\n        return true;\n      }\n\n      if (blocks.all) {\n        // editable\n        if (blocks.all === true || blocks.all === 'all') {\n          return true;\n        } else if (blocks.all === 'editable' && this.isEditable()) {\n          return true;\n        } else if (blocks.all === 'first-level' && this.isFirstLevel()) {\n          return true;\n        } else if (blocks.all === 'noneditable' && !this.isEditable()) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    isFirstLevel: function isFirstLevel() {\n      return this.$block.attr('data-' + this.prefix + '-first-level');\n    },\n    isEditable: function isEditable() {\n      return typeof this.editable !== 'undefined' && this.editable === true;\n    },\n    isInlineBlock: function isInlineBlock() {\n      return typeof this.inline !== 'undefined';\n    },\n    isAllSelected: function isAllSelected() {\n      if (this.isEditable()) {\n        return this.app.selection.isAll(this.$block);\n      } else {\n        return true;\n      }\n    },\n    isEmpty: function isEmpty() {\n      if (this.isEmptiable()) {\n        if (this.$block.hasClass(this.prefix + '-empty-layer')) {\n          return true;\n        } else {\n          var html = this.$block.html();\n          html = html.trim();\n          html = this._cleanEmpty(html);\n          return html === '';\n        }\n      } else if (this.isEditable()) {\n        return this._isEmpty();\n      }\n    },\n    isEmptiable: function isEmptiable() {\n      return typeof this.emptiable !== 'undefined';\n    },\n    isCaretStart: function isCaretStart() {\n      if (this.getType() === 'code') {\n        return this.app.caret.is(this.$block, 'start', false, false);\n      } else if (this.isEditable()) {\n        return this.app.caret.is(this.$block, 'start');\n      }\n\n      return true;\n    },\n    isCaretEnd: function isCaretEnd() {\n      if (this.getType() === 'code') {\n        return this.app.caret.is(this.$block, 'end', false, false);\n      } else if (this.isEditable()) {\n        return this.app.caret.is(this.$block, 'end');\n      }\n\n      return true;\n    },\n    // get\n    getData: function getData(name) {\n      var data = {};\n\n      for (var key in this.data) {\n        data[key] = this[this.data[key].getter].apply(this);\n      }\n\n      return name ? data[name] : data;\n    },\n    getType: function getType() {\n      return this.type;\n    },\n    getTag: function getTag() {\n      return this.$block ? this.$block.get().tagName.toLowerCase() : false;\n    },\n    getTitle: function getTitle() {\n      var type = this.getType();\n      var titles = this.lang.get('blocks');\n      var title = this.$block.attr('data-title');\n      return typeof titles[type] !== 'undefined' ? titles[type] : title;\n    },\n    getOffset: function getOffset() {\n      var offset = this.app.editor.getFrame().offset();\n      var elOffset = this.$block.offset();\n      return {\n        top: offset.top + elOffset.top,\n        left: offset.left + elOffset.left\n      };\n    },\n    getBlock: function getBlock() {\n      return this.$block;\n    },\n    getHtml: function getHtml() {\n      return this.$block.html();\n    },\n    getPlainText: function getPlainText() {\n      var html = this.$block.html();\n      return this.app.content.getTextFromHtml(html, {\n        nl: true\n      });\n    },\n    getOuterHtml: function getOuterHtml() {\n      return this.$block.get().outerHTML;\n    },\n    getParents: function getParents(types) {\n      var selector = '[' + this.opts.names.datatype + '=' + types.join('],[' + this.opts.names.datatype + '=') + ']';\n      return this.$block.parents(selector);\n    },\n    getParent: function getParent(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.parent().closest('[data-' + this.prefix + '-type' + type + ']');\n\n      if ($el.length !== 0) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getNext: function getNext(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.nextElement();\n\n      if ($el.length !== 0 && $el.is('[data-' + this.prefix + '-type' + type + ']')) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getPrev: function getPrev(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.prevElement();\n\n      if ($el.length !== 0 && $el.is('[data-' + this.prefix + '-type' + type + ']')) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getChildFirst: function getChildFirst(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.find('[data-' + this.prefix + '-type' + type + ']').first();\n\n      if ($el.length !== 0) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getChildLast: function getChildLast(type) {\n      type = type ? '=' + type : '';\n      var $el = this.$block.find('[data-' + this.prefix + '-type' + type + ']').last();\n\n      if ($el.length !== 0) {\n        return $el.dataget('instance');\n      }\n\n      return false;\n    },\n    getId: function getId() {\n      return this.$block.attr('id');\n    },\n    getAlign: function getAlign() {\n      var obj = this.opts.align;\n      if (!obj) return false;\n      var value = 'left';\n\n      for (var key in obj) {\n        if (this.$block.hasClass(obj[key])) {\n          value = key;\n        }\n      }\n\n      return value;\n    },\n    getValign: function getValign() {\n      var obj = this.opts.valign;\n      if (!obj) return false;\n      var value = 'none';\n\n      for (var key in obj) {\n        if (this.$block.hasClass(obj[key])) {\n          value = key;\n        }\n      }\n\n      return value;\n    },\n    getOutset: function getOutset() {\n      var obj = this.opts.outset;\n      if (!obj) return false;\n      var value = 'none';\n\n      for (var key in obj) {\n        if (this.$block.hasClass(obj[key])) {\n          value = key;\n        }\n      }\n\n      return value;\n    },\n    getCaption: function getCaption() {\n      var $caption = this.$block.find('figcaption');\n      return $caption.length !== 0 ? $caption.html() : '';\n    },\n    // set\n    setData: function setData(data) {\n      for (var key in data) {\n        if (!this.data[key]) continue;\n        this[this.data[key].setter].call(this, data[key]);\n      }\n    },\n    setEmpty: function setEmpty() {\n      this.$block.html('');\n\n      if (this.isEmptiable()) {\n        this.app.content.addEmptyButton(this.$block);\n      }\n    },\n    setSelectAll: function setSelectAll() {\n      if (this.isEditable()) {\n        this.app.selection.select(this.$block);\n      }\n    },\n    setHtml: function setHtml(html) {\n      this.$block.html(html);\n\n      if (html !== '') {\n        this._buildInstancesInside(this.$block);\n      }\n    },\n    setId: function setId(value) {\n      if (value === '') {\n        this.$block.removeAttr('id');\n      } else {\n        this.$block.attr('id', value);\n      }\n    },\n    setAlign: function setAlign(value) {\n      this._removeObjClasses(this.opts.align);\n\n      this.$block.addClass(this.opts.align[value]);\n    },\n    setValign: function setValign(value) {\n      this._removeObjClasses(this.opts.valign);\n\n      if (value !== 'none') {\n        this.$block.addClass(this.opts.valign[value]);\n      }\n    },\n    setOutset: function setOutset(value) {\n      this._removeObjClasses(this.opts.outset);\n\n      if (value !== 'none') {\n        this.$block.addClass(this.opts.outset[value]);\n      } // ui\n\n\n      this.app.control.updatePosition();\n    },\n    setCaption: function setCaption(value) {\n      if (value === '') {\n        this.$block.find('figcaption').remove();\n      } else {\n        var $caption = this.$block.find('figcaption');\n\n        if ($caption.length === 0) {\n          $caption = this.dom('<figcaption>');\n          $caption.attr('data-placeholder', this.lang.get('placeholders.figcaption'));\n          this.$block.append($caption); // create\n\n          this.app.create('block.figcaption', $caption);\n        }\n\n        $caption.html(value);\n      }\n    },\n    // has\n    hasClass: function hasClass(value) {\n      value = typeof value === 'string' ? [value] : value;\n\n      for (var i = 0; i < value.length; i++) {\n        if (this.$block.hasClass(value[i])) {\n          return value[i];\n        }\n      }\n\n      return false;\n    },\n    // remove\n    remove: function remove() {\n      var parent = this.getParent();\n      this.$block.remove(); // emptiable\n\n      if (parent && parent.isEmptiable() && parent.isEmpty()) {\n        parent.setEmpty();\n      }\n    },\n    // duplicate\n    duplicate: function duplicate(empty) {\n      var type = this.getType();\n      var $clone = this.$block.clone();\n      $clone.removeClass(this.prefix + '-block-focus ' + this.prefix + '-block-multiple-hover');\n\n      if (empty) {\n        $clone.html('');\n      }\n\n      return this.app.create('block.' + type, $clone);\n    },\n    duplicateEmpty: function duplicateEmpty() {\n      return this.duplicate(true);\n    },\n    // insert\n    insertEmpty: function insertEmpty(params) {\n      params = params || {};\n      params.instance = this.app.block.create();\n      return this.insert(params);\n    },\n    insert: function insert(params) {\n      var defs = {\n        instance: false,\n        position: false,\n        caret: false\n      }; // params\n\n      var p = $ARX.extend({}, defs, params);\n      var $block = p.instance.getBlock(); // delete selection\n\n      if (this.isEditable()) {\n        this.app.selection.deleteContents();\n      } // list to list\n\n\n      if (p.instance.getType() === 'list' && this.getType() === 'list') {\n        this.app.insertion.insertListToList($block, this.$block, p.caret);\n      } else {\n        // variable to variable\n        if (p.instance.isInlineBlock() && this.isInlineBlock()) {\n          this.$block.after($block);\n          this.$block.remove();\n        } // like variable\n        else if (p.instance.isInlineBlock() && this.isEditable()) {\n            this.app.insertion.insertNode(p.instance.getBlock(), 'end', true);\n          } // editable\n          else if (this.isEditable() && this.getType() !== 'card') {\n              // detect position\n              p.position = this.app.insertion.detectPosition(this.$block, p.position); // insert\n\n              if (p.position === 'split') {\n                this.app.element.split(this.$block).before($block);\n              } else {\n                this.$block[p.position]($block); // remove\n\n                if (this.isEmpty()) {\n                  this.$block.remove();\n                }\n              }\n            } // non editable\n            else {\n                p.position = p.position || 'after';\n                this.$block[p.position]($block);\n              } // set caret\n\n\n        if (p.caret) {\n          this.app.block.set(p.instance, p.caret);\n        } // rebuild\n\n\n        this.app.editor.build();\n        this.app.toolbar.observe(); // broadcast\n\n        this.app.broadcast('block.add', {\n          instance: p.instance\n        });\n        return p.instance;\n      }\n    },\n    // append\n    appendNext: function appendNext() {\n      var next = this.getNext(); // next empty\n\n      if (next.isEmpty()) {\n        next.remove();\n        return;\n      } // current empty\n      else if (this.isEmpty()) {\n          this.remove();\n          this.app.block.set(next, 'start');\n          return;\n        } // not empty\n\n\n      var html = next.getHtml();\n      var type = this.getType();\n      var nextType = next.getType();\n      var insert = true;\n      var remove = true; // code\n\n      if (type === 'code' && nextType !== 'code') {\n        html = next.getPlainText();\n      } // next type\n\n\n      if (nextType === 'dlist') {\n        if (type === 'dlist') {\n          // append as nodes\n          var nodes = next.getBlock().children();\n          this.$block.append(nodes);\n          insert = false;\n        } else {\n          // insert with br\n          html = next.getPlainText(true);\n        }\n      } else if (nextType === 'list') {\n        if (type === 'list') {\n          var $items = next.getBlock().children();\n          this.$block.append($items);\n          insert = false;\n          remove = true;\n        } else {\n          html = this._appendListHtml(next.getBlock(), html);\n          remove = next.isEmpty();\n        }\n      } // append\n\n\n      if (insert) {\n        // set caret after inline\n        var inline = this.app.selection.getTopInline();\n\n        if (inline) {\n          this.app.caret.set(inline, 'after');\n        } // insert\n\n\n        this.app.insertion.insertHtml(html, 'start');\n\n        this._buildInstancesInside(this.$block);\n      } // remove\n\n\n      if (remove) {\n        next.remove();\n      }\n    },\n    appendToPrev: function appendToPrev() {\n      var prev = this.getPrev(); // current empty\n\n      if (this.isEmpty()) {\n        this.remove();\n        this.app.block.set(prev, 'end');\n        return;\n      } // prev empty\n      else if (prev.isEmpty()) {\n          prev.remove();\n          this.app.control.updatePosition();\n          return;\n        } // not empty\n\n\n      var prevType = prev.getType();\n      var html = this.getHtml();\n      var type = this.getType();\n      var insert = true;\n      var remove = true; // code\n\n      if (type !== 'code' && prevType === 'code') {\n        html = this.getPlainText();\n      } // current type\n\n\n      if (type === 'dlist') {\n        if (prevType === 'dlist') {\n          // append as nodes\n          var nodes = this.getBlock().children();\n          this.app.block.set(prev, 'end');\n          prev.getBlock().append(nodes);\n          insert = false;\n        } else {\n          // insert with br\n          html = this.getPlainText(true);\n        }\n      } else if (type === 'list') {\n        if (prevType === 'list') {\n          var $items = this.getBlock().children();\n          this.app.block.set(prev, 'end');\n          prev.getBlock().append($items);\n          insert = false;\n          remove = true;\n        } else {\n          html = this._appendListHtml(this.getBlock(), html);\n          remove = this.isEmpty();\n        }\n      } // append\n\n\n      if (insert) {\n        // set\n        this.app.block.set(prev, 'end'); // set caret after inline\n\n        var inline = this.app.selection.getTopInline();\n\n        if (inline) {\n          this.app.caret.set(inline, 'after');\n        } // insert\n\n\n        this.app.insertion.insertHtml(html, 'start');\n\n        this._buildInstancesInside(prev.getBlock());\n      } // remove\n\n\n      if (remove) {\n        this.remove();\n      }\n    },\n    append: function append(instance, set) {\n      if (this.isEmptiable() && this.isEmpty()) {\n        this.$block.html('');\n        this.$block.removeClass(this.prefix + '-empty-layer');\n      }\n\n      this.$block.append(instance.getBlock());\n\n      if (set !== false) {\n        this.app.block.set(instance);\n      } // broadcast\n\n\n      this.app.broadcast('block.add', {\n        instance: instance\n      });\n    },\n    // move\n    moveUp: function moveUp() {\n      var target = this.getPrev();\n      if (!target) return;\n\n      this._move(target, 'before');\n    },\n    moveDown: function moveDown(direction) {\n      var target = this.getNext();\n      if (!target) return;\n\n      this._move(target, 'after');\n    },\n    // private\n    _appendListHtml: function _appendListHtml($target, html) {\n      var $item = $target.find('li').first();\n      html = $item.html().trim();\n      html = html.replace(/<\\/li>/gi, '</li><br>');\n      html = html.replace(/<(ul|ol)/gi, '<br><$1');\n      html = this.app.content.removeTags(html, ['ul', 'ol', 'li']);\n      html = html.trim();\n      html = html.replace(/<br\\s?\\/?>$/gi, '');\n      $item.remove();\n      return html;\n    },\n    _move: function _move(target, func) {\n      // save selection\n      if (this.isEditable()) this.app.selection.save(this.$block); // move\n\n      var $targetBlock = target.getBlock();\n      $targetBlock[func](this.$block, true); // set force\n\n      this.app.block.set(this.$block, false, true); // restore selection\n\n      if (this.isEditable()) this.app.selection.restore(this.$block);\n    },\n    _build: function _build() {\n      // build empty\n      if (this.isEmptiable() && this.isEmpty()) {\n        this.app.content.addEmptyButton(this.$block);\n      } // build\n\n\n      if (this.build) {\n        this.build();\n      } // instances inside\n\n\n      this._buildInstancesInside(this.$block);\n    },\n    _buildData: function _buildData() {\n      if (!this.data) this.data = {};\n      this.data = $ARX.extend({}, true, this.defaults, this.data);\n    },\n    _buildInstancesInside: function _buildInstancesInside($block) {\n      $block.find('[data-' + this.prefix + '-type]').each(this._buildInstanceInside.bind(this));\n    },\n    _buildInstanceInside: function _buildInstanceInside($node) {\n      var instance = $node.dataget('instance');\n\n      if (!instance) {\n        var type = $node.attr('data-' + this.prefix + '-type');\n        this.app.create('block.' + type, $node);\n      }\n    },\n    _buildItems: function _buildItems(selector, type) {\n      var $items = this.$block.find(selector);\n\n      if ($items.length !== 0) {\n        $items.each(function ($node) {\n          this.app.create('block.' + type, $node);\n        }.bind(this));\n      }\n    },\n    _buildCaption: function _buildCaption() {\n      if (this.getTag() !== 'figure') return;\n      this.$block.find('figcaption').attr('data-placeholder', this.lang.get('placeholders.figcaption'));\n    },\n    _isEmpty: function _isEmpty() {\n      var html = this.$block.text();\n      html = this._cleanEmpty(html);\n      return html === '';\n    },\n    _getNameByTag: function _getNameByTag() {\n      var tag = this.getTag();\n      var name = this.app.utils.capitalize(tag);\n      return name;\n    },\n    _render: function _render() {\n      this._renderEdit();\n\n      this._renderDraggable();\n\n      this._renderEditable();\n    },\n    _renderDraggable: function _renderDraggable() {\n      if (typeof this.draggable !== 'undefined' && this.draggable === false) {\n        this.$block.on('dragstart', function (e) {\n          e.preventDefault();\n          return false;\n        });\n        this.$block.find('img').on('dragstart', function (e) {\n          e.preventDefault();\n          return false;\n        });\n      }\n    },\n    _renderEditable: function _renderEditable() {\n      if (this.isEditable()) {\n        this.$block.attr('contenteditable', true);\n      } else if (typeof this.editable !== 'undefined' && this.editable === false) {\n        this.$block.attr('contenteditable', false);\n      }\n\n      if (this.isEditable() && !this.opts.editor.grammarly) this.$block.attr('data-gramm_editor', false);\n    },\n    _renderEdit: function _renderEdit() {\n      this.$block.dataset('instance', this);\n      this.$block.attr('data-' + this.prefix + '-type', this.getType());\n    },\n    _cleanEmpty: function _cleanEmpty(html) {\n      html = this.app.utils.removeInvisibleChars(html);\n      html = html.search(/^<br\\s?\\/?>$/) !== -1 ? '' : html;\n      html = html.replace(/\\n/g, '');\n      return html;\n    },\n    _removeObjClasses: function _removeObjClasses(obj) {\n      var classes = this._buildObjClasses(obj);\n\n      this.$block.removeClass(classes.join(' '));\n      this.app.element.removeEmptyAttrs(this.$block, ['class']);\n    },\n    _buildObjClasses: function _buildObjClasses(obj) {\n      var classes = [];\n\n      for (var key in obj) {\n        if (obj[key]) {\n          classes.push(obj[key]);\n        }\n      }\n\n      return classes;\n    }\n  });\n  ArticleEditor.add('mixin', 'tool', {\n    init: function init(name, obj, stack, data, instance) {\n      this.name = name;\n      this.setter = stack.setter;\n      this.stack = stack;\n      this.data = data;\n      this.instance = instance;\n      this.obj = this._observe(obj);\n\n      if (this.obj) {\n        this._build();\n      }\n    },\n    getElement: function getElement() {\n      return this.$tool;\n    },\n    getInput: function getInput() {\n      return this.$input;\n    },\n    getValue: function getValue() {\n      var value = this.$input.val();\n      return value.trim();\n    },\n    setValue: function setValue(value) {\n      this.$input.val(value);\n    },\n    setFocus: function setFocus() {\n      this.$input.focus();\n    },\n    trigger: function trigger(value) {\n      this.setValue(value);\n\n      if (this.setter) {\n        this.app.api(this.setter, this.stack);\n      }\n    },\n    // private\n    _build: function _build() {\n      this._buildTool();\n\n      this._buildLabel();\n\n      this._buildInputElement();\n\n      this._buildInput();\n\n      this._buildEvent(); // props\n\n\n      if (this._has('placeholder')) this.$input.attr('placeholder', this.lang.parse(this.obj.placeholder));\n      if (this._has('width')) this.$input.css('width', this.obj.width);\n      if (this._has('classname')) this.$input.addClass(this.obj.classname);\n    },\n    _buildInputElement: function _buildInputElement() {\n      this.$input = this.dom('<' + this._getInputParam('tag') + '>').addClass(this.prefix + this._getInputParam('classname'));\n      this.$input.attr({\n        'name': this.name,\n        'type': this._getInputParam('type'),\n        'data-type': this.type\n      });\n      this.$input.dataset('instance', this);\n    },\n    _buildInput: function _buildInput() {\n      return;\n    },\n    _buildEvent: function _buildEvent() {\n      var types = ['segment'];\n\n      if (types.indexOf(this.type) === -1 && this.setter) {\n        var events = this.type === 'checkbox' || this.type === 'select' ? 'change' : 'keydown blur';\n        this.$input.on(events, this._catchSetter.bind(this));\n      }\n    },\n    _buildTool: function _buildTool() {\n      this.$tool = this.dom('<div>').addClass(this.prefix + '-form-item').dataset('instance', this);\n    },\n    _buildLabel: function _buildLabel() {\n      if (this.type !== 'checkbox' && this._has('label')) {\n        this.$label = this.dom('<label>').addClass(this.prefix + '-form-label').html(this.lang.parse(this.obj.label));\n        this.$tool.append(this.$label);\n      }\n    },\n    _getInputParam: function _getInputParam(name) {\n      return this.input && typeof this.input[name] !== 'undefined' ? this.input[name] : '';\n    },\n    _get: function _get(name) {\n      return this.obj[name];\n    },\n    _has: function _has(name) {\n      return this.obj.hasOwnProperty(name);\n    },\n    _observe: function _observe(obj) {\n      if (obj.hasOwnProperty('observer')) {\n        obj = this.app.api(obj.observer, obj, this.name);\n      }\n\n      return obj;\n    },\n    _catchSetter: function _catchSetter(e) {\n      if (e.type === 'keydown' && e.which !== 13) return;\n      if (e.type === 'keydown') e.preventDefault(); // call setter\n\n      this.app.api(this.setter, this.stack);\n    }\n  });\n  ArticleEditor.add('module', 'lang', {\n    init: function init() {\n      this.langKey = this.app.setting.get('editor.lang');\n      this.vars = this._build();\n    },\n    get: function get(name) {\n      var value = this._get(name, this.vars);\n\n      if (typeof value === 'undefined' && this.langKey !== 'en') {\n        value = this._get(name, $ARX.lang['en']);\n      }\n\n      return typeof value === 'undefined' ? '' : value;\n    },\n    parse: function parse(str) {\n      if (typeof str !== 'string') return str;\n      var matches = str.match(/## (.*?) ##/g);\n\n      if (matches) {\n        for (var i = 0; i < matches.length; i++) {\n          var key = matches[i].replace(/^##\\s/g, '').replace(/\\s##$/g, '');\n          str = str.replace(matches[i], this.get(key));\n        }\n      }\n\n      return str;\n    },\n    // private\n    _get: function _get(name, vars) {\n      var value;\n      var arr = name.split('.');\n      if (arr.length === 1) value = vars[name];else value = typeof vars[arr[0]] !== 'undefined' ? vars[arr[0]][arr[1]] : undefined;\n      return value;\n    },\n    _build: function _build() {\n      var vars = $ARX.lang['en'];\n\n      if (this.langKey !== 'en') {\n        vars = $ARX.lang[this.langKey] !== 'undefined' ? $ARX.lang[this.langKey] : vars;\n      }\n\n      return vars;\n    }\n  });\n  ArticleEditor.add('module', 'setting', {\n    init: function init() {\n      this.opts = this._build();\n    },\n    dump: function dump() {\n      return this.opts;\n    },\n    has: function has(name) {\n      var value;\n      var arr = name.split('.');\n      if (arr.length === 1) value = typeof this.opts[name] !== 'undefined';else value = typeof this.opts[arr[0]] !== 'undefined' && typeof this.opts[arr[1]] !== 'undefined';\n      return value;\n    },\n    set: function set(section, name, value) {\n      if (typeof this.opts[section] === 'undefined') this.opts[section] = {};\n      if (typeof value === 'undefined') this.opts[section] = name;else this.opts[section][name] = value;\n    },\n    get: function get(name) {\n      var value;\n      var arr = name.split('.');\n      if (arr.length === 1) value = this.opts[name];else value = typeof this.opts[arr[0]] !== 'undefined' ? this.opts[arr[0]][arr[1]] : undefined;\n      return value;\n    },\n    // private\n    _build: function _build() {\n      var opts = $ARX.extend(true, {}, $ARX.opts, this.app.initialSettings);\n      opts = $ARX.extend(true, opts, $ARX.settings);\n      return opts;\n    }\n  });\n  ArticleEditor.add('module', 'container', {\n    init: function init() {\n      this.containers = {\n        main: ['bars', 'editor', 'source', 'statusbar'],\n        bars: ['pathbar', 'toolbar']\n      };\n    },\n    start: function start() {\n      this._buildMain();\n\n      this._buildContainers(this.$main, this.containers.main);\n\n      this._buildBSModal();\n    },\n    stop: function stop() {\n      this.$main.remove();\n    },\n    get: function get(name) {\n      return this['$' + name];\n    },\n    // private\n    _buildMain: function _buildMain() {\n      this.$main = this.dom('<div>');\n      this.$main.addClass(this.prefix + '-container ' + this.prefix + '-container-' + this.uuid);\n      this.$main.attr(this.prefix + '-uuid', this.uuid); // place\n\n      this.app.$element.after(this.$main);\n    },\n    _buildContainers: function _buildContainers($target, containers) {\n      for (var i = 0; i < containers.length; i++) {\n        var name = containers[i];\n        var elName = '$' + name; // create\n\n        this[elName] = this._createContainer(name); // nested\n\n        if (typeof this.containers[name] !== 'undefined') {\n          this._buildContainers(this[elName], this.containers[name]);\n        } // append\n\n\n        $target.append(this[elName]);\n      }\n    },\n    _buildBSModal: function _buildBSModal() {\n      this.opts.bsmodal = this.$main.closest('.modal-dialog').length !== 0;\n    },\n    _createContainer: function _createContainer(name) {\n      return this.dom('<div>').addClass(this.prefix + '-' + name + '-container');\n    }\n  });\n  ArticleEditor.add('module', 'editor', {\n    init: function init() {\n      this.mobileMode = false;\n    },\n    start: function start() {\n      this._buildFrame();\n\n      this._buildBlurClass();\n\n      this._buildOptions();\n\n      this._buildParserTags();\n\n      this._buildStartHtml();\n\n      this._buildLayout();\n\n      this._buildContent();\n    },\n    stop: function stop() {\n      this.$editor = false;\n      this.app.$element.show();\n    },\n    load: function load() {\n      this._setFocusOnStart();\n    },\n    build: function build() {\n      this.app.embed.build();\n      this.app.blocks.build();\n      this.app.image.observeStates();\n    },\n    // insert\n    insertContent: function insertContent(params) {\n      this.app.insertion.insertContent(params);\n    },\n    // set\n    setContent: function setContent(params) {\n      this.app.insertion.setContent(params);\n    },\n    setEmpty: function setEmpty() {\n      this.app.insertion.setContent({\n        html: ''\n      });\n    },\n    setFocus: function setFocus(caret) {\n      if (caret) {\n        this._setFocusCaret(caret);\n      } else {\n        this._setFocusEvent();\n      }\n    },\n    setBlur: function setBlur() {\n      if (!this.isFocus()) return;\n\n      this._unsetFocusContainerClass();\n\n      this._enableToolbarButtons();\n\n      this.app.block.unset();\n      this.app.blocks.unset();\n      this.app.selection.removeAllRanges(); // ui\n\n      if (!this.isMobileView()) {\n        this.app.path.build();\n        this.app.toolbar.build();\n        this.app.control.close();\n      }\n\n      this.app.popup.close(false); // broadcast\n\n      this.app.broadcast('editor.blur');\n    },\n    // select\n    selectAll: function selectAll(type) {\n      if (this.isAllSelected()) return;\n\n      this._setSelectAllClass();\n\n      this.app.blocks.unset();\n      this.app.blocks.setFirstLevel();\n      this.app.selection.removeAllRanges(); // ui\n\n      this.app.path.build();\n      this.app.toolbar.build();\n      this.app.control.close();\n    },\n    // unselect\n    unselectAll: function unselectAll() {\n      if (!this.isAllSelected()) return;\n      this.unsetSelectAllClass();\n      this.app.block.unset();\n      this.app.blocks.unset();\n    },\n    // unset\n    unsetSelectAllClass: function unsetSelectAllClass() {\n      this.$editor.removeClass(this.prefix + '-select-all');\n    },\n    // add\n    addButton: function addButton(name, obj) {\n      this.opts.buttons.editor[name] = obj;\n    },\n    // get\n    getButtons: function getButtons() {\n      var buttons = this.opts.buttons.editor;\n      var res = {};\n\n      for (var name in buttons) {\n        if (name === 'html' && !this.opts.source) continue;\n        if (name === 'templates' && !this.opts.templates.json) continue;\n        res[name] = buttons[name];\n      }\n\n      return res;\n    },\n    getContent: function getContent(tidy) {\n      var html = '';\n\n      if (this.app.source.is()) {\n        html = this.app.source.getContent();\n      } else {\n        html = this._getContent();\n        html = tidy ? this.app.tidy.parse(html) : html;\n      }\n\n      return html;\n    },\n    getFrameRect: function getFrameRect() {\n      var offset = this.$editor.offset();\n      var width = this.$editor.width();\n      var height = this.$editor.height();\n      var top = Math.round(offset.top);\n      var left = Math.round(offset.left);\n      return {\n        top: top,\n        left: left,\n        bottom: top + height,\n        right: left + width,\n        width: width,\n        height: height\n      };\n    },\n    getFrame: function getFrame() {\n      return this.$editor ? this.$editor : this.dom();\n    },\n    getLayout: function getLayout() {\n      return this.$layout;\n    },\n    getHead: function getHead() {\n      return this.getDoc().find('head');\n    },\n    getBody: function getBody() {\n      return this.$editor ? this.getDoc().find('body') : this.dom();\n    },\n    getDoc: function getDoc() {\n      return this.dom(this.getDocNode());\n    },\n    getDocNode: function getDocNode() {\n      return this.$editor.get().contentWindow.document;\n    },\n    getWin: function getWin() {\n      return this.dom(this.getWinNode());\n    },\n    getWinNode: function getWinNode() {\n      return this.$editor.get().contentWindow;\n    },\n    // adjust\n    adjustHeight: function adjustHeight() {\n      if (!this.$editor) return;\n      setTimeout(function () {\n        this.$editor.height(this.getBody().height());\n      }.bind(this), 1);\n    },\n    // toggle\n    toggleView: function toggleView(button) {\n      if (this.mobileMode) {\n        this.$editor.css('width', '');\n        this.app.path.enable();\n        this.app.topbar.enable();\n        this.app.toolbar.enable();\n        this.app.toolbar.unsetToggled('mobile');\n        this.app.event.run();\n        this.app.blocks.runEditableBlocks();\n        this.app.observer.build();\n        this.mobileMode = false;\n      } else {\n        this.$editor.css('width', this.opts.editor.mobile + 'px');\n        this.app.path.disable();\n        this.app.topbar.disable();\n        this.app.toolbar.disable();\n        this.app.toolbar.setToggled('mobile');\n        this.app.popup.close();\n        this.app.control.close();\n        this.app.event.pause();\n        this.app.blocks.pauseEditableBlocks();\n        this.app.observer.stop();\n        this.mobileMode = true;\n      }\n\n      this.adjustHeight();\n    },\n    // is\n    isLayout: function isLayout(el) {\n      return this.dom(el).get() === this.$layout.get();\n    },\n    isTextarea: function isTextarea() {\n      return this.opts.content === false;\n    },\n    isAllSelected: function isAllSelected() {\n      return this.$editor.hasClass(this.prefix + '-select-all');\n    },\n    isFocus: function isFocus() {\n      return this.app.container.get('main').hasClass(this.prefix + '-in-focus');\n    },\n    isEmpty: function isEmpty(emptyparagraph) {\n      return this.app.content.isEmptyHtml(this.$layout.html(), emptyparagraph);\n    },\n    isMobileView: function isMobileView() {\n      return this.mobileMode;\n    },\n    // build\n    _buildFrame: function _buildFrame() {\n      this.app.$element.hide();\n      this.$editor = this.dom('<iframe>').addClass(this.prefix + '-editor-frame'); // append\n\n      this.app.container.get('editor').append(this.$editor);\n    },\n    _buildBlurClass: function _buildBlurClass() {\n      this.app.container.get('main').addClass(this.prefix + '-in-blur');\n    },\n    _buildOptions: function _buildOptions() {\n      var $e = this.$editor;\n      var o = this.opts.editor;\n      $e.attr('dir', o.direction);\n      $e.attr('scrolling', 'no');\n      $e.css('visibility', 'hidden');\n      if (o.minHeight) $e.css('min-height', o.minHeight);\n\n      if (o.maxHeight) {\n        $e.css('max-height', o.maxHeight);\n        $e.attr('scrolling', 'yes');\n      }\n\n      if (o.notranslate) $e.addClass('notranslate');\n      if (!o.spellcheck) $e.attr('spellcheck', false);\n    },\n    _buildStartHtml: function _buildStartHtml() {\n      var doctype = this._createDoctype();\n\n      var scripts = this._createScripts();\n\n      var layout = '<div class=\"' + this.opts.editor.classname + '\"></div>';\n      var code = doctype + '<html><head></head><body>' + layout + scripts + '</body></html>'; // write code\n\n      this._writeCode(code);\n    },\n    _buildLayout: function _buildLayout() {\n      var $body = this.getBody();\n      this.$layout = $body.find('.' + this.opts.editor.classname).first();\n      this.$layout.attr('dir', this.opts.editor.direction);\n\n      if (this.opts.editor.padding === false) {\n        this.$layout.css('padding', 0);\n      } // body height\n\n\n      $body.css('height', 'auto');\n    },\n    _buildContent: function _buildContent() {\n      var content = this._getContentValue();\n\n      content = this.app.broadcastHtml('editor.before.load', content); // set parsed\n\n      var $parsed = this.app.parser.parse(content);\n      this.$layout.html($parsed.children()); // set unparsed\n\n      var unparsed = this.app.parser.unparse(this.$layout.html());\n      this.app.$element.val(unparsed); // load\n\n      this._load();\n    },\n    _buildVisibility: function _buildVisibility() {\n      this.$editor.css('visibility', 'visible');\n    },\n    _buildEditorCss: function _buildEditorCss() {\n      if (!this.opts.css) return;\n      var css;\n\n      if (Array.isArray(this.opts.css)) {\n        css = this.opts.css;\n      } else {\n        css = [this.opts.css + 'arx-frame.min.css', this.opts.css + 'arx-content.min.css'];\n      }\n\n      for (var i = 0; i < css.length; i++) {\n        this._buildCssLink(css[i]);\n      }\n    },\n    _buildCustomCss: function _buildCustomCss() {\n      if (!this.opts.custom.css) return;\n\n      for (var i = 0; i < this.opts.custom.css.length; i++) {\n        this._buildCssLink(this.opts.custom.css[i]);\n      }\n    },\n    _buildCssLink: function _buildCssLink(href) {\n      var obj = _typeof(href) === 'object' ? href : {\n        href: href\n      };\n      obj.href = obj.href + '?' + new Date().getTime(); // link tag\n\n      var $css = this.dom('<link>').attr({\n        'class': this.prefix + '-css',\n        'rel': 'stylesheet'\n      });\n      $css.attr(obj); // append\n\n      this.getHead().append($css);\n    },\n    _buildGridCssVar: function _buildGridCssVar() {\n      if (!this.opts.grid) return;\n      var style = this.getDocNode().documentElement.style;\n      style.setProperty('--' + this.prefix + '-grid-columns', this.opts.grid.columns);\n      style.setProperty('--' + this.prefix + '-grid-gutter', this.opts.grid.gutter);\n      style.setProperty('--' + this.prefix + '-grid-offset-left', this.opts.grid.offset.left);\n      style.setProperty('--' + this.prefix + '-grid-offset-right', this.opts.grid.offset.right); // patterns opts\n\n      if (this.app.initialSettings.grid && this.app.initialSettings.grid.patterns) {\n        this.opts.grid.patterns = this.app.initialSettings.grid.patterns;\n      }\n    },\n    _buildParserTags: function _buildParserTags() {\n      var parser = this.opts.parser;\n\n      for (var key in parser) {\n        // add tag\n        if (parser[key].parse && parser[key].tag) {\n          var tag = parser[key].tag;\n          if (typeof this.opts.parserTags[tag] === 'undefined') this.opts.parserTags[tag] = [];\n          this.opts.parserTags[tag].push(parser[key].parse);\n        }\n      }\n    },\n    _buildDraggable: function _buildDraggable() {\n      var $items = this.app.$body.find('[data-' + this.prefix + '-drop-id]');\n      $items.each(function ($node) {\n        $node.attr('draggable', true);\n        $node.on('dragstart', function (e) {\n          var $target = this.dom(e.target);\n          var id = $target.attr('data-' + this.prefix + '-drop-id');\n          e.dataTransfer.setData('item', id);\n        }.bind(this));\n      }.bind(this));\n    },\n    // load\n    _load: function _load() {\n      try {\n        this._loadImages();\n\n        this._loaded();\n      } catch (e) {\n        $ARX.error(e);\n      }\n    },\n    _loaded: function _loaded() {\n      this.app.sync.build();\n      this.app.observer.build();\n      this.app.event.build();\n      this.app.embed.build();\n      this.app.blocks.build();\n      this.app.image.observeStates();\n\n      this._buildVisibility();\n\n      this._buildEditorCss();\n\n      this._buildCustomCss();\n\n      this._buildGridCssVar();\n\n      this._buildDraggable(); // adjust on resize\n\n\n      this.getWin().on('resize.' + this.prefix + '-editor-frame', this.adjustHeight.bind(this)); // broadcast\n\n      this.app.broadcast('editor.load'); // adjust height\n\n      setTimeout(this.adjustHeight.bind(this), 1000);\n      setTimeout(this.adjustHeight.bind(this), 3000);\n    },\n    _loadedImage: function _loadedImage() {\n      this.imageslen--;\n    },\n    _loadImages: function _loadImages() {\n      var $doc = this.getDoc();\n      var $images = $doc.find('img');\n      this.imageslen = $images.length;\n      $images.each(this._loadImage.bind(this));\n      var timerImg = setInterval(function () {\n        if (this.imageslen === 0) {\n          this.adjustHeight();\n          clearInterval(timerImg);\n          return;\n        }\n      }.bind(this), 50);\n    },\n    _loadImage: function _loadImage($img) {\n      var img = $img.get();\n\n      if (this.opts.editor.images) {\n        var arr = img.src.split('/');\n        var last = arr[arr.length - 1];\n        img.src = this.opts.editor.images + last;\n      }\n\n      $img.one('load', this._loadedImage.bind(this));\n    },\n    // set\n    _setFocusOnStart: function _setFocusOnStart() {\n      if (!this.opts.editor.focus) return;\n      this.setFocus();\n      this.setFocus(this.opts.editor.focus);\n    },\n    _setSelectAllClass: function _setSelectAllClass() {\n      this.$editor.addClass(this.prefix + '-select-all');\n    },\n    _setFocusCaret: function _setFocusCaret(caret) {\n      caret = this._getCaretPosition(caret);\n\n      var target = this._getFocusTarget(caret);\n\n      this.app.block.set(target, caret);\n    },\n    _setFocusEvent: function _setFocusEvent() {\n      if (this.isFocus()) return;\n\n      for (var i = 0; i < $ARX.instances.length; i++) {\n        if ($ARX.instances[i] !== this.app) {\n          $ARX.instances[i].editor.setBlur();\n        }\n      }\n\n      this._setFocusContainerClass(); // broadcast\n\n\n      this.app.broadcast('editor.focus');\n    },\n    _setFocusContainerClass: function _setFocusContainerClass() {\n      this.app.container.get('main').removeClass(this.prefix + '-in-blur').addClass(this.prefix + '-in-focus');\n    },\n    // unset\n    _unsetFocusContainerClass: function _unsetFocusContainerClass() {\n      this.app.container.get('main').removeClass(this.prefix + '-in-focus').addClass(this.prefix + '-in-blur');\n    },\n    // get\n    _getCaretPosition: function _getCaretPosition(caret) {\n      return caret === true ? 'start' : caret;\n    },\n    _getFocusTarget: function _getFocusTarget(caret) {\n      return caret === 'start' ? this.app.blocks.getFirst() : this.app.blocks.getLast();\n    },\n    _getContent: function _getContent() {\n      var html = this.$layout.html();\n      html = this.app.parser.unparse(html);\n      return html;\n    },\n    _getContentValue: function _getContentValue() {\n      return this.opts.content ? this.opts.content : this.app.$element.val();\n    },\n    // enable\n    _enableToolbarButtons: function _enableToolbarButtons() {\n      if (this.app.source.is() || this.isMobileView()) return;\n      this.app.toolbar.enable();\n    },\n    // write\n    _writeCode: function _writeCode(html) {\n      var doc = this.getDocNode();\n      doc.open();\n      doc.write(html);\n      doc.close();\n    },\n    // create\n    _createDoctype: function _createDoctype() {\n      return this.opts.editor.doctype + '\\n';\n    },\n    _createScripts: function _createScripts() {\n      if (!this.opts.custom.js) return '';\n      var str = '';\n      var scripts = this.opts.custom.js;\n\n      for (var i = 0; i < scripts.length; i++) {\n        var obj = _typeof(scripts[i]) === 'object' ? scripts[i] : {\n          src: scripts[i]\n        };\n        obj.src = obj.src + '?' + new Date().getTime(); // script tag\n\n        var $el = this.dom('<script>').addClass(this.prefix + '-js').attr(obj); // all scripts str\n\n        str = str + $el.get().outerHTML;\n      }\n\n      return str;\n    }\n  });\n  ArticleEditor.add('module', 'source', {\n    start: function start() {\n      this.eventname = this.prefix + '-source-events';\n\n      this._build();\n    },\n    toggle: function toggle() {\n      if (this.is()) this.close();else this.open();\n    },\n    is: function is() {\n      return this.app.container.get('source').css('display') !== 'none';\n    },\n    open: function open() {\n      this.app.broadcast('source.before.open');\n      var html = this.app.editor.getContent();\n      html = this.app.tidy.parse(html);\n      var height = this.app.container.get('editor').height();\n      this.$source.height(height);\n      this.$source.val(html);\n      this.$source.on('input.' + this.eventname, this._handleChanges.bind(this));\n      this.$source.on('keydown.' + this.eventname, this.app.input.handleTextareaTab.bind(this));\n      this.app.editor.unselectAll();\n      this.app.container.get('editor').hide();\n      this.app.container.get('source').show(); // codemirror\n\n      var codemirror = this.app.codemirror.create({\n        el: this.$source,\n        height: height,\n        focus: true\n      });\n\n      if (codemirror) {\n        codemirror.on('change', this._handleChanges.bind(this));\n      } // ui\n\n\n      this.app.path.disable();\n      this.app.topbar.disable();\n      this.app.toolbar.disable();\n      this.app.toolbar.disableSticky();\n      this.app.toolbar.setToggled('html'); // broadcast\n\n      this.app.broadcast('source.open');\n    },\n    close: function close() {\n      this.app.broadcast('source.before.close');\n      var html = this.getContent();\n      this.app.codemirror.destroy();\n      this.$source.off('.' + this.eventname);\n      this.app.container.get('source').hide();\n      this.app.container.get('editor').show(); // set code\n\n      this.app.editor.setContent({\n        html: html,\n        caret: false\n      }); // ui\n\n      this.app.path.enable();\n      this.app.topbar.enable();\n      this.app.toolbar.enable();\n      this.app.toolbar.enableSticky();\n      this.app.toolbar.unsetToggled('html'); // broadcast\n\n      this.app.broadcast('source.close');\n    },\n    update: function update(html) {\n      var func = this.app.editor.isTextarea() ? 'val' : 'html';\n      this.app.$element[func](html);\n    },\n    getContent: function getContent() {\n      var html = this.$source.val();\n      html = this.app.codemirror.val(html);\n      return html;\n    },\n    // private\n    _build: function _build() {\n      this.$source = this.dom('<textarea>').addClass(this.prefix + '-source');\n      this.$source.attr('data-gramm_editor', false);\n      this.app.container.get('source').append(this.$source);\n    },\n    _handleChanges: function _handleChanges(e) {\n      var html = this.getContent();\n      this.update(html);\n      this.app.broadcast('source.change', {\n        e: e\n      });\n    }\n  });\n  ArticleEditor.add('module', 'placeholder', {\n    start: function start() {\n      this.placeholder = false;\n      this.$layout = this.app.editor.getLayout(); // build\n\n      this._build();\n    },\n    handleClick: function handleClick(e) {\n      if (this.dom(e.target).hasClass(this.prefix + '-placeholder')) {\n        this.app.editor.setFocus('start');\n      }\n    },\n    toggle: function toggle() {\n      if (this.placeholder && this.app.editor.isEmpty(true)) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n    show: function show() {\n      this.$layout.addClass(this.prefix + '-placeholder');\n    },\n    hide: function hide() {\n      this.$layout.removeClass(this.prefix + '-placeholder');\n    },\n    // private\n    _build: function _build() {\n      var is = this.opts.placeholder !== false || this.app.$element.attr('placeholder');\n      if (!is) return;\n      var text = this.opts.placeholder !== false ? this.opts.placeholder : this.app.$element.attr('placeholder');\n      this.$layout.attr('placeholder', text);\n      this.placeholder = true;\n      this.toggle();\n    }\n  });\n  ArticleEditor.add('module', 'accessibility', {\n    start: function start() {\n      this._buildRole();\n\n      this._buildLabel();\n    },\n    _buildRole: function _buildRole() {\n      this.app.editor.getFrame().attr({\n        'aria-labelledby': this.prefix + '-voice',\n        'role': 'presentation'\n      });\n    },\n    _buildLabel: function _buildLabel() {\n      var html = this.lang.get('accessibility.help-label');\n\n      var $label = this._createLabel(html); // append\n\n\n      this.app.container.get('main').prepend($label);\n    },\n    _createLabel: function _createLabel(html) {\n      return this.dom('<span />').addClass(this.prefix + '-voice-label').attr({\n        'id': this.prefix + '-voice-' + this.uuid,\n        'aria-hidden': false\n      }).html(html);\n    }\n  });\n  ArticleEditor.add('module', 'observer', {\n    init: function init() {\n      this.observer = false;\n      this.trigger = true;\n    },\n    build: function build() {\n      if (window.MutationObserver) {\n        var el = this.app.editor.getLayout().get();\n        this.observer = this._build(el);\n        this.observer.observe(el, {\n          attributes: true,\n          subtree: true,\n          childList: true,\n          characterData: true,\n          characterDataOldValue: true\n        });\n      }\n    },\n    stop: function stop() {\n      if (this.observer) this.observer.disconnect();\n      this.trigger = true;\n    },\n    // private\n    _build: function _build(el) {\n      var self = this;\n      return new MutationObserver(function (mutations) {\n        self._observe(mutations[mutations.length - 1], el);\n      });\n    },\n    _observe: function _observe(mutation, el) {\n      if (mutation.type === 'attributes' && mutation.target === el) {\n        return;\n      } // sync\n\n\n      if (this.trigger) {\n        this.app.editor.adjustHeight();\n        this.app.broadcast('observer.change');\n        this.app.placeholder.toggle();\n        this.app.sync.trigger();\n      }\n    }\n  });\n  ArticleEditor.add('module', 'utils', {\n    // invisible chars\n    createInvisibleChar: function createInvisibleChar() {\n      return document.createTextNode(this.opts.markerChar);\n    },\n    searchInvisibleChars: function searchInvisibleChars(str) {\n      return str.search(/^\\uFEFF$/g);\n    },\n    removeInvisibleChars: function removeInvisibleChars(str) {\n      return str.replace(/\\uFEFF/g, '');\n    },\n    // wrapper\n    wrap: function wrap(html, func) {\n      var $w = this.dom('<div>').html(html);\n      func($w);\n      html = $w.html();\n      $w.remove();\n      return html;\n    },\n    // arrays\n    extendArray: function extendArray(arr, extend) {\n      arr = arr.concat(arr);\n\n      if (extend) {\n        for (var i = 0; i < extend.length; i++) {\n          arr.push(extend[i]);\n        }\n      }\n\n      return arr;\n    },\n    removeFromArrayByValue: function removeFromArrayByValue(arr, val) {\n      val = Array.isArray(val) ? val : [val];\n      var index;\n\n      for (var i = 0; i < val.length; i++) {\n        index = arr.indexOf(val[i]);\n        if (index > -1) arr.splice(index, 1);\n      }\n\n      return arr;\n    },\n    sumOfArray: function sumOfArray(arr) {\n      return arr.reduce(function (a, b) {\n        return parseInt(a) + parseInt(b);\n      }, 0);\n    },\n    // object\n    getObjectIndex: function getObjectIndex(obj, key) {\n      return Object.keys(obj).indexOf(key);\n    },\n    insertToObject: function insertToObject(key, value, obj, pos) {\n      return Object.keys(obj).reduce(function (ac, a, i) {\n        if (i === pos) ac[key] = value;\n        ac[a] = obj[a];\n        return ac;\n      }, {});\n    },\n    // random\n    getRandomId: function getRandomId() {\n      var id = '';\n      var possible = 'abcdefghijklmnopqrstuvwxyz0123456789';\n\n      for (var i = 0; i < 12; i++) {\n        id += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      return id;\n    },\n    // escape\n    escapeRegExp: function escapeRegExp(s) {\n      return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    },\n    // string\n    capitalize: function capitalize(str) {\n      str = str.toLowerCase();\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    },\n    // data\n    extendData: function extendData(data, obj) {\n      for (var key in obj) {\n        if (key === 'elements') {\n          data = this._extendDataElements(data, obj[key]);\n        } else {\n          data = this._setData(data, key, obj[key]);\n        }\n      }\n\n      return data;\n    },\n    _extendDataElements: function _extendDataElements(data, value) {\n      this.dom(value).each(function ($node) {\n        if ($node.get().tagName === 'FORM') {\n          var serializedData = $node.serialize(true);\n\n          for (var z in serializedData) {\n            data = this._setData(data, z, serializedData[z]);\n          }\n        } else {\n          var name = $node.attr('name') ? $node.attr('name') : $node.attr('id');\n          data = this._setData(data, name, $node.val());\n        }\n      }.bind(this));\n      return data;\n    },\n    _setData: function _setData(data, name, value) {\n      if (data instanceof FormData) data.append(name, value);else data[name] = value;\n      return data;\n    }\n  });\n  ArticleEditor.add('module', 'content', {\n    init: function init() {\n      this._selectors = {\n        code: ['pre', 'code'],\n        embed: ['figure'],\n        noneditable: ['.' + this.opts.noneditable.classname],\n        images: ['img'],\n        links: ['a']\n      };\n    },\n    // paragraphize\n    paragraphize: function paragraphize(html) {\n      return this.app.paragraphizer.paragraphize(html);\n    },\n    // encode\n    encodeEntities: function encodeEntities(str) {\n      return this.decodeEntities(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n    },\n    encodeCode: function encodeCode(html) {\n      // replace all tags\n      html = html.replace(/<(.*?)>/gi, 'xtagstartz$1xtagendz'); // revert pre / code\n\n      html = html.replace(/xtagstartzpre(.*?)xtagendz/g, '<pre$1>');\n      html = html.replace(/xtagstartzcode(.*?)xtagendz/g, '<code$1>');\n      html = html.replace(/xtagstartz\\/codextagendz/g, '</code>');\n      html = html.replace(/xtagstartz\\/prextagendz/g, '</pre>'); // encode\n\n      html = this._encodeCode(html); // revert all tags\n\n      html = html.replace(/xtagstartz(.*?)xtagendz/g, '<$1>');\n      html = html.replace(/xtagstartz\\/(.*?)xtagendz/g, '</$1>');\n      return html;\n    },\n    // decode\n    decodeEntities: function decodeEntities(str) {\n      return String(str).replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&amp;/g, '&');\n    },\n    // sanitize\n    sanitize: function sanitize(html) {\n      html = this.app.utils.wrap(html, function ($w) {\n        $w.find('[src]').each(this._sanitizeSrc);\n        $w.find('a').each(this._sanitizeHref);\n        $w.find('a,b,i,svg,img,details').each(this._sanitizeEvents);\n      }.bind(this));\n      return html;\n    },\n    // escape\n    escapeHtml: function escapeHtml(str) {\n      return str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n    },\n    // store / restore\n    store: function store(html, name, stored, storedIndex) {\n      var selectors = this._selectors[name];\n\n      for (var i = 0; i < selectors.length; i++) {\n        var matched = this._getElementsFromHtml(html, selectors[i]);\n\n        html = this._store(html, name, matched, stored, storedIndex);\n      }\n\n      return html;\n    },\n    restore: function restore(html, name, stored) {\n      if (typeof stored[name] === 'undefined') return html;\n\n      for (var i = 0; i < stored[name].length; i++) {\n        html = html.replace('####_' + name + i + '_####', stored[name][i]);\n      }\n\n      return html;\n    },\n    storeComments: function storeComments(html, storedComments) {\n      var comments = html.match(new RegExp('<!--([\\\\w\\\\W]*?)-->', 'gi'));\n      if (comments === null) return html;\n\n      for (var i = 0; i < comments.length; i++) {\n        html = html.replace(comments[i], '#####xstarthtmlcommentzz' + i + 'xendhtmlcommentzz#####');\n        storedComments.push(comments[i]);\n      }\n\n      return html;\n    },\n    restoreComments: function restoreComments(html, storedComments) {\n      for (var i = 0; i < storedComments.length; i++) {\n        var str = storedComments[i].replace(/\\$/gi, '&#36;');\n        html = html.replace('#####xstarthtmlcommentzz' + i + 'xendhtmlcommentzz#####', str);\n      }\n\n      return html;\n    },\n    // cache / recache\n    cacheStyle: function cacheStyle(html) {\n      var selector = this.opts.tags.block.join(',') + ',img,' + this.opts.tags.inline.join(',');\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(selector).each(this._cacheStyle.bind(this));\n      }.bind(this));\n    },\n    recacheStyle: function recacheStyle(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('[data-' + this.prefix + '-style-cache]').each(this._recacheStyle.bind(this));\n      }.bind(this));\n    },\n    // add\n    addNofollow: function addNofollow(html) {\n      if (!this.opts.link.nofollow) return html;\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('a').attr('rel', 'nofollow');\n      });\n    },\n    addHttps: function addHttps(html) {\n      if (!this.opts.editor.https) {\n        return html;\n      }\n\n      html = html.replace('href=\"http://', 'href=\"https://');\n      html = html.replace('src=\"http://', 'src=\"https://');\n      html = html.replace('srcset=\"http://', 'srcset=\"https://');\n      return html;\n    },\n    addSpaceToBlocks: function addSpaceToBlocks(html) {\n      return html.replace(/<\\/(div|li|dt|dd|td|p|H[1-6])>\\n?/gi, '</$1> ');\n    },\n    addBrToBlocks: function addBrToBlocks(html) {\n      return html.replace(/<\\/(div|li|dt|dd|td|p|H[1-6])>\\n?/gi, '</$1><br>');\n    },\n    addEmptyButton: function addEmptyButton($el) {\n      if ($el.hasClass(this.prefix + '-empty-layer')) return;\n      $el.addClass(this.prefix + '-empty-layer');\n      var $plus = this.dom('<span>').addClass(this.prefix + '-plus-button'); // button\n\n      this.app.create('button', {\n        name: 'plus',\n        element: $plus\n      }, {\n        command: 'addbar.popup'\n      }); // append\n\n      $el.append($plus);\n    },\n    // fix\n    fixListMargin: function fixListMargin($block) {\n      var ml = parseInt($block.css('margin-left'));\n\n      if (ml !== 0) {\n        var pl = parseInt($block.css('padding-left'));\n        $block.css({\n          'margin-left': 0,\n          'padding-left': pl + ml + 'px'\n        });\n        $block.attr(this.prefix + '-list-left', ml);\n      }\n    },\n    unfixListMargin: function unfixListMargin($block) {\n      if ($block.attr(this.prefix + '-list-left')) {\n        $block.css({\n          'padding-left': '',\n          'margin-left': ''\n        });\n        $block.removeAttr(this.prefix + '-list-left');\n      }\n    },\n    // get\n    getText: function getText(n) {\n      var rv = '';\n\n      if (n.nodeType === 3) {\n        rv = n.nodeValue;\n      } else {\n        for (var i = 0; i < n.childNodes.length; i++) {\n          rv += this.getText(n.childNodes[i]);\n        }\n\n        var d = n.nodeType === 1 ? getComputedStyle(n).getPropertyValue('display') : '';\n\n        if (d.match(/^block/) || d.match(/list/) || n.tagName === 'BR' || n.tagName === 'HR') {\n          rv += \"\\n\";\n        }\n      }\n\n      return rv;\n    },\n    getTextFromHtml: function getTextFromHtml(html, params) {\n      var stored = {};\n      var storedIndex = 0;\n      var defaults = {\n        br: false,\n        nl: false,\n        trimlines: true,\n        images: false,\n        links: false\n      };\n      params = $ARX.extend({}, defaults, params);\n      html = this.store(html, 'code', stored, storedIndex);\n      html = params.links ? this.store(html, 'links', stored, storedIndex) : html;\n      html = params.images ? this.store(html, 'images', stored, storedIndex) : html;\n      html = html.replace(/<(ul|ol)>\\s+<li>/gi, '<$1><li>');\n      html = html.replace(/<li[^>]*>\\n/gi, '<li$1>');\n      html = html.replace(/<p[^>]*>(\\s+|)<\\/p>/gi, 'xemptyz');\n      html = html.replace(/<!--[\\s\\S]*?-->/gi, '');\n      html = html.replace(/<style[\\s\\S]*?style>/gi, '');\n      html = html.replace(/<script[\\s\\S]*?script>/gi, '');\n      html = html.replace(/<\\/(div|li|dt|dd|td|p|H[1-6])>\\n?/gi, '</$1>\\n');\n      html = html.replace(/&(lt|gt);/gi, 'x$1z');\n      var $tmp = this.dom('<div>').html(html);\n      html = this.getText($tmp.get()); // trim lines\n\n      if (params.trimlines) {\n        var str = '';\n        var arr = html.split(\"\\n\");\n\n        for (var i = 0; i < arr.length; i++) {\n          str += arr[i].trim() + '\\n';\n        }\n\n        html = str;\n      }\n\n      html = html.replace(/[\\n]+/g, \"\\n\");\n      html = html.replace('xemptyz', \"\\n\");\n      html = html.replace(/x(lt|gt)z/gi, '&$1;'); // keep newlines\n\n      if (params.br) {\n        html = html.replace(/\\n/g, \"<br>\\n\");\n        html = html.replace(/<br\\s?\\/?>\\n?$/gi, '');\n      } else {\n        html = params.nl ? html : html.replace(/\\n/gi, ' ');\n      }\n\n      html = this.restore(html, 'code', stored);\n      html = params.links ? this.restore(html, 'links', stored) : html;\n      html = params.images ? this.restore(html, 'images', stored) : html;\n      html = html.replace(/<pre[^>]*>/g, '');\n      html = html.replace(/<code[^>]*>/g, '');\n      html = html.replace(/<\\/pre>\\n?/g, '');\n      html = html.replace(/<\\/code>/g, '');\n\n      if (!params.images) {\n        html = html.replace(/<img[\\s\\S]*?>/gi, '');\n        html = html.replace(/<a[^>]*>(\\s+|)<\\/a>/gi, '');\n      }\n\n      return html.trim();\n    },\n    // extract\n    extractHtmlFromCaret: function extractHtmlFromCaret(el) {\n      var node = this.dom(el).get();\n      var range = this.app.selection.getRange();\n\n      if (range) {\n        var cloned = range.cloneRange();\n        cloned.selectNodeContents(node);\n        cloned.setStart(range.endContainer, range.endOffset);\n        return cloned.extractContents();\n      }\n    },\n    // is\n    isEmptyHtml: function isEmptyHtml(html, emptyparagraph) {\n      html = html.trim();\n      html = this.app.utils.removeInvisibleChars(html);\n      html = html.replace(/^&nbsp;$/gi, '1');\n      html = html.replace(/&nbsp;/gi, '');\n      html = html.replace(/<\\/?br\\s?\\/?>/g, '');\n      html = html.replace(/\\s/g, '');\n      html = html.replace(/^<p>\\s\\S<\\/p>$/i, '');\n      html = html.replace(/<hr(.*?[^>])>$/i, 'hr');\n      html = html.replace(/<iframe(.*?[^>])>$/i, 'iframe');\n      html = html.replace(/<source(.*?[^>])>$/i, 'source'); // remove comments\n\n      html = this.removeComments(html); // remove empty tags\n\n      html = emptyparagraph ? html.replace(/<p[^>]*><\\/p>/gi, '') : html;\n      html = html.replace(/<[^/>]><\\/[^>]+>/gi, '');\n      html = html.replace(/<[^/>]><\\/[^>]+>/gi, ''); // trim\n\n      html = html.trim();\n      return html === '';\n    },\n    isLine: function isLine(html) {\n      var element = document.createElement(\"div\");\n      element.innerHTML = html;\n      return this.dom(element).find(this.opts.tags.block.join(',') + ',img').length === 0;\n    },\n    // drop\n    drop: function drop(e, html, position, cleanDrop) {\n      var target = this.app.element.getDataBlock(e.target);\n      target = target.length === 0 ? this.app.blocks.getFirst() : target; // set target\n\n      this.app.block.set(target); // drop point\n\n      if (!position) {\n        this.app.insertion.insertPoint(e);\n      }\n\n      var clean = true;\n      var parse = true;\n      var instance = this.app.block.get();\n      var isAll = this.app.editor.isAllSelected();\n\n      if (instance && instance.getType() === 'code' && !isAll) {\n        clean = false;\n        parse = false;\n        html = this.getTextFromHtml(html, {\n          nl: true,\n          trimlines: false\n        });\n      }\n\n      if (cleanDrop === false) {\n        clean = false;\n      } // empty\n\n\n      if (html === '') {\n        return;\n      } // autolink\n\n\n      html = clean ? this.app.autolink.parse(html) : html; // insert\n\n      this.app.insertion.insertContent({\n        html: html,\n        clean: clean,\n        parse: parse,\n        position: position\n      });\n    },\n    // paste\n    paste: function paste(e) {\n      // broadcast\n      var event = this.app.broadcast('editor.before.paste', {\n        e: e\n      });\n      if (event.isStopped()) return e.preventDefault();\n      e.preventDefault();\n      var clipboard = e.clipboardData; // image\n\n      if (this.app.image.insertFromClipboard(clipboard)) {\n        return;\n      } // html / text\n\n\n      var url = clipboard.getData('URL');\n      var html = this.app.clipboard.getContent(clipboard); // get safari anchor links\n\n      html = !url || url === '' ? html : url; // clean\n\n      var instance = this.app.block.get();\n      var clean = true;\n      var parse = true;\n      var isAll = this.app.editor.isAllSelected();\n\n      if (this.opts.paste.plaintext) {\n        clean = false;\n        parse = false;\n        html = this.getTextFromHtml(html, {\n          br: true\n        });\n      } else if (instance && instance.getType() === 'code' && !isAll) {\n        clean = false;\n        parse = false;\n        html = this.getTextFromHtml(html, {\n          nl: true,\n          trimlines: false\n        });\n      } // empty\n\n\n      if (html === '') {\n        return;\n      } // autolink\n\n\n      html = clean ? this.app.autolink.parse(html) : html; // insert\n\n      var inserted = this.app.insertion.insertContent({\n        html: html,\n        clean: clean,\n        parse: parse\n      }); // broadcast\n\n      this.app.broadcast('editor.paste', inserted);\n    },\n    // copy\n    copy: function copy(e) {\n      this._copy(e, 'copy');\n    },\n    // cut\n    cut: function cut(e) {\n      this._copy(e, 'cut');\n    },\n    // remove\n    removeDoctype: function removeDoctype(html) {\n      return html.replace(new RegExp(\"<!doctype[^>]*>\", 'gi'), '');\n    },\n    removeComments: function removeComments(html) {\n      return html.replace(/<!--[\\s\\S]*?-->\\n?/g, '');\n    },\n    removeTags: function removeTags(input, denied) {\n      var re = denied ? /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi : /(<([^>]+)>)/gi;\n      var replacer = !denied ? '' : function ($0, $1) {\n        return denied.indexOf($1.toLowerCase()) === -1 ? $0 : '';\n      };\n      return input.replace(re, replacer);\n    },\n    removeTagsExcept: function removeTagsExcept(input, except) {\n      if (except === undefined) {\n        return input.replace(/(<([^>]+)>)/gi, '');\n      }\n\n      var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi;\n      return input.replace(tags, function ($0, $1) {\n        return except.indexOf($1.toLowerCase()) === -1 ? '' : $0;\n      });\n    },\n    removeTagsWithContent: function removeTagsWithContent(html, tags) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(tags.join(',')).remove();\n      });\n    },\n    removeMarkers: function removeMarkers(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('.' + this.prefix + '-plus-button').remove();\n        $w.find('.' + this.prefix + 'pastemarker').removeClass(this.prefix + 'pastemarker');\n        $w.find('.' + this.prefix + 'pasteitems').removeClass(this.prefix + 'pasteitems');\n        $w.find('.' + this.prefix + '-selection-marker').remove();\n      }.bind(this));\n    },\n    removeEmptySpans: function removeEmptySpans(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('span').each(this._removeEmptySpan.bind(this));\n      }.bind(this));\n    },\n    removeEmptyInlines: function removeEmptyInlines(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(this.opts.tags.inline.join(',')).each(this._removeEmptyTag.bind(this));\n      }.bind(this));\n    },\n    removeEmptyAttrs: function removeEmptyAttrs(html, attrs) {\n      return this.app.utils.wrap(html, function ($w) {\n        for (var i = 0; i < attrs.length; i++) {\n          $w.find('[' + attrs[i] + '=\"\"]').removeAttr(attrs[i]);\n        }\n      });\n    },\n    removeBlockTags: function removeBlockTags(html, tags, except) {\n      var blocks = this.opts.tags.block.concat(); // except\n\n      if (except) {\n        blocks = this.app.utils.removeFromArrayByValue(blocks, except);\n      } // extend\n\n\n      if (tags) {\n        tags = tags ? this.app.utils.extendArray(blocks, tags) : blocks;\n      }\n\n      return this.removeTags(html, tags);\n    },\n    removeBlockTagsInside: function removeBlockTagsInside(html, tags) {\n      this.blockListTags = this.app.utils.removeFromArrayByValue(this.opts.tags.block.concat(), ['ul', 'ol', 'li']);\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(tags.join(',')).each(this._removeBlockTagsInside.bind(this));\n      }.bind(this));\n    },\n    removeInlineStyles: function removeInlineStyles(html) {\n      var inlines = this.app.utils.removeFromArrayByValue(this.opts.tags.inline, 'a');\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(inlines.join(',')).removeAttr('style');\n      });\n    },\n    removeStyleAttr: function removeStyleAttr(html, filter) {\n      filter = filter || '';\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('*').not('[data-' + this.prefix + '-style-cache]' + filter).removeAttr('style');\n      }.bind(this));\n    },\n    // private\n    _cacheStyle: function _cacheStyle($el) {\n      var name = 'data-' + this.prefix + '-style-cache';\n      var style = $el.attr('style');\n\n      if (style) {\n        $el.attr(name, style);\n      } else if (!style || style === '') {\n        $el.removeAttr(name);\n      }\n    },\n    _recacheStyle: function _recacheStyle($el) {\n      var name = 'data-' + this.prefix + '-style-cache';\n      var style = $el.attr(name);\n      $el.attr('style', style).removeAttr(name);\n    },\n    // clean\n    _cleanEmpty: function _cleanEmpty(html) {\n      html = html.trim();\n      html = this.app.utils.removeInvisibleChars(html);\n      html = html.replace(/<\\/?br\\s?\\/?>/g, '');\n      html = html.replace(/\\s/g, '');\n      return html;\n    },\n    // copy\n    _copyFromAllSelected: function _copyFromAllSelected(name, html) {\n      html = this.app.editor.getLayout().html(); // set empty\n\n      if (name === 'cut') this.app.editor.setEmpty();\n      return html;\n    },\n    _copyFromMultiple: function _copyFromMultiple(name, html) {\n      var $blocks = this.app.blocks.getSelected();\n      var $tmp = this.dom('<div>');\n      $blocks.each(function ($node) {\n        $tmp.append($node.clone());\n      });\n      html = $tmp.html(); // remove selected blocks\n\n      if (name === 'cut') this.app.blocks.removeSelected(false);\n      return html;\n    },\n    _copyFromEditable: function _copyFromEditable(name, html, instance) {\n      var type = instance.getType();\n\n      if (type === 'figcaption' || type === 'cell') {\n        html = this.app.selection.getHtml(); // delete selection\n\n        if (name === 'cut') {\n          this.app.selection.deleteContents();\n        }\n      } else if (instance.isAllSelected()) {\n        html = instance.getOuterHtml(); // remove block\n\n        if (name === 'cut') {\n          instance.remove();\n        }\n      } else if (type === 'dlist') {\n        html = this.app.selection.getHtml();\n\n        if (html.search(/<dl/gi) === -1) {\n          // wrap to list\n          html = '<dl>' + html + '</dl>';\n        } // delete selection\n\n\n        if (name === 'cut') {\n          this.app.selection.deleteContents();\n        }\n      } else if (type === 'list') {\n        var tag = instance.getTag(); // contains li\n\n        html = this.app.selection.getHtml();\n\n        if (html.search(/<li/gi) !== -1) {\n          // does not have li at start\n          if (html.search(/^<li/g) === -1) {\n            html = '<li>' + html + '</li>';\n          } // wrap to list\n\n\n          html = '<' + tag + '>' + html + '</' + tag + '>';\n        } // delete selection\n\n\n        if (name === 'cut') {\n          this.app.selection.deleteContents();\n        }\n      } else {\n        html = this.app.selection.getHtml(); // delete selection\n\n        if (name === 'cut') {\n          this.app.selection.deleteContents();\n        }\n      }\n\n      return html;\n    },\n    _copyFromNonEditable: function _copyFromNonEditable(name, html, instance) {\n      var $block = instance.getBlock();\n      var type = instance.getType(); // column\n\n      if (type === 'column') {\n        html = $block.html();\n      } // row\n      else if (type === 'row') {\n          // wrap to table\n          html = instance.getOuterHtml();\n          html = '<table>' + html + '</table>'; // delete cell content\n\n          if (name === 'cut') {\n            $block.find('td, th').html('');\n          }\n        } else {\n          html = instance.getOuterHtml();\n        } // remove block\n\n\n      if (name === 'cut') {\n        var parentInstance = instance.getParent('layer');\n\n        if (type === 'column') {\n          instance.setEmpty();\n        } else {\n          instance.remove();\n        }\n\n        if (type === 'layer' && parentInstance && parentInstance.isEmpty()) {\n          parentInstance.setEmpty();\n        }\n      }\n\n      return html;\n    },\n    _copy: function _copy(e, name) {\n      var instance = this.app.block.get();\n      var isMultiple = this.app.blocks.is();\n      var html = false; // do nothing\n\n      if (!isMultiple && !instance) return;\n      if (!isMultiple && instance && instance.isEditable() && this.app.selection.isCollapsed()) return; // stop event\n\n      e.preventDefault(); // select all\n\n      if (this.app.editor.isAllSelected()) {\n        html = this._copyFromAllSelected(name, html);\n      } // multiple\n      else if (isMultiple) {\n          html = this._copyFromMultiple(name, html);\n        } // single editable\n        else if (instance && instance.isEditable()) {\n            html = this._copyFromEditable(name, html, instance);\n          } // single non editable\n          else if (instance) {\n              html = this._copyFromNonEditable(name, html, instance);\n            } // broadcast\n\n\n      var event = this.app.broadcast('editor.before.' + name, {\n        e: e,\n        html: html\n      });\n      if (event.isStopped()) return e.preventDefault();\n      html = event.get('html'); // set to clipboard\n\n      html = this.app.clipboard.setContent(e, html); // broadcast\n\n      this.app.broadcastHtml('editor.' + name, html);\n    },\n    // remove\n    _removeEmptySpan: function _removeEmptySpan($node) {\n      if ($node.get().attributes.length === 0) {\n        $node.unwrap();\n      }\n    },\n    _removeEmptyTag: function _removeEmptyTag($node) {\n      var html = $node.html().trim();\n\n      if ($node.get().attributes.length === 0 && html === '') {\n        $node.unwrap();\n      }\n    },\n    _removeBlockTagsInside: function _removeBlockTagsInside($node) {\n      var tags = $node.get().tagName === 'LI' ? this.blockListTags : this.opts.tags.block;\n      $node.find(tags.join(',')).append('<br>').unwrap();\n    },\n    // store\n    _store: function _store(html, name, matched, stored, storedIndex) {\n      if (!matched) return html;\n      if (typeof stored[name] === 'undefined') stored[name] = [];\n\n      for (var i = 0; i < matched.length; i++) {\n        stored[name][storedIndex] = matched[i];\n        html = html.replace(matched[i], '####_' + name + storedIndex + '_####');\n        storedIndex++;\n      }\n\n      return html;\n    },\n    // get\n    _getElementsFromHtml: function _getElementsFromHtml(html, selector) {\n      var matched = [];\n      var $div = this.dom('<div>').html(html);\n      $div.find(selector).each(function ($node) {\n        matched.push($node.get().outerHTML);\n      });\n      return matched;\n    },\n    // sanitize\n    _sanitizeSrc: function _sanitizeSrc($node) {\n      var node = $node.get();\n\n      if (node.getAttribute('src').search(/^data|javascript:/i) !== -1) {\n        node.setAttribute('src', '');\n      }\n    },\n    _sanitizeHref: function _sanitizeHref($node) {\n      var node = $node.get();\n      var str = node.getAttribute('href');\n\n      if (str && str.search(/^javascript:/i) !== -1) {\n        node.setAttribute('href', '');\n      }\n    },\n    _sanitizeEvents: function _sanitizeEvents($node) {\n      $node.removeAttr('onload onerror ontoggle onwheel onmouseover oncopy');\n    },\n    // encode\n    _encodeCode: function _encodeCode(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('pre code, pre, code').each(this._encodeNode.bind(this));\n      }.bind(this));\n    },\n    _encodeNode: function _encodeNode($node) {\n      var node = $node.get();\n      var first = node.firstChild;\n      var html = node.innerHTML;\n\n      if (node.tagName === 'PRE' && first && first.tagName === 'CODE') {\n        return;\n      }\n\n      html = html.replace(/xtagstartz/g, '<');\n      html = html.replace(/xtagendz/g, '>');\n      var encoded = this.decodeEntities(html);\n      node.textContent = this._encodeNodeHtml(encoded);\n    },\n    _encodeNodeHtml: function _encodeNodeHtml(html) {\n      html = html.replace(/&nbsp;/g, ' ').replace(/<br\\s?\\/?>/g, '\\n');\n      html = this.opts.code.spaces ? html.replace(/\\t/g, new Array(this.opts.code.spaces + 1).join(' ')) : html;\n      return html;\n    }\n  });\n  ArticleEditor.add('module', 'paragraphizer', {\n    init: function init() {\n      this.remStart = '#####replace';\n      this.remEnd = '#####';\n      var extendTags = ['form', 'figcaption', 'object', 'style', 'script', 'iframe', 'select', 'input', 'textarea', 'button', 'option', 'map', 'area', 'math', 'fieldset', 'legend', 'hgroup', 'nav', 'details', 'menu', 'summary'];\n      this.tags = this.opts.tags.parser.concat(extendTags);\n    },\n    paragraphize: function paragraphize(html) {\n      // build markup tag\n      var tag = 'p';\n      var stored = [];\n      var storedComments = []; // store\n\n      html = this._storeTags(html, stored);\n      html = this.app.content.storeComments(html, storedComments); // trim\n\n      html = html.trim();\n      html = this._trimLinks(html); // replace new lines\n\n      html = html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)$/g, '');\n      html = html.replace(/xparagraphmarkerz$/g, '');\n      html = html.replace(/xparagraphmarkerz(?:\\r\\n|\\r|\\n)/g, '\\n');\n      html = html.replace(/xparagraphmarkerz/g, '\\n');\n      html = html.replace(/[\\n]+/g, \"\\n\"); // wrap to tag\n\n      var str = '';\n      var arr = html.split(\"\\n\");\n\n      for (var i = 0; i < arr.length; i++) {\n        str += '<' + tag + '>' + arr[i].trim() + '</' + tag + '>\\n';\n      } // trim new line at the end\n\n\n      html = str.replace(/\\n$/, ''); // clean\n\n      html = html.replace(new RegExp('<' + tag + '>\\\\s+#####', 'gi'), '#####');\n      html = html.replace(new RegExp('<' + tag + '>#####', 'gi'), '#####');\n      html = html.replace(new RegExp('#####</' + tag + '>', 'gi'), '#####'); // restore\n\n      html = this._restoreTags(html, stored);\n      html = this.app.content.restoreComments(html, storedComments); // clean empty\n\n      html = html.replace(/<p(.*?)><\\/?br\\s?\\/?><\\/p>/gi, \"<p$1></p>\");\n      html = html.replace(/<div(.*?)><\\/?br\\s?\\/?><\\/div>/gi, \"<div$1></div>\");\n      return html;\n    },\n    // private\n    _storeTags: function _storeTags(html, stored) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find(this.tags.join(', ')).each(function ($node, i) {\n          this._replaceTag($node, i, stored);\n        }.bind(this));\n      }.bind(this));\n    },\n    _restoreTags: function _restoreTags(html, stored) {\n      for (var i = 0; i < stored.length; i++) {\n        var str = stored[i].replace(/\\$/gi, '&#36;');\n        html = html.replace(this.remStart + i + this.remEnd, str);\n      }\n\n      return html;\n    },\n    _replaceTag: function _replaceTag($node, i, stored) {\n      var node = $node.get();\n      var replacement = document.createTextNode(this.remStart + i + this.remEnd + 'xparagraphmarkerz');\n      stored.push(node.outerHTML);\n      node.parentNode.replaceChild(replacement, node);\n    },\n    _trimLinks: function _trimLinks(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('a').each(this._trimLink.bind(this));\n      }.bind(this));\n    },\n    _trimLink: function _trimLink($node) {\n      $node.html($node.html().trim());\n    }\n  });\n  ArticleEditor.add('module', 'parser', {\n    build: function build(html) {\n      this.$layout = this.dom('<div>');\n      this.$layout.html(html);\n      this.$layout.find('[data-' + this.prefix + '-type]').each(this._build.bind(this));\n      return this.$layout;\n    },\n    buildElement: function buildElement($el) {\n      $el.find('[data-' + this.prefix + '-type]').each(this._build.bind(this));\n    },\n    // parse\n    parse: function parse(html, build) {\n      // parse\n      html = html.trim();\n      html = this.app.broadcastHtml('editor.before.parse', html); // check empty\n\n      if (this.app.content.isEmptyHtml(html)) {\n        html = this.app.block.createHtml();\n      } // clean & parse\n      else {\n          html = this._clean(html);\n          html = this._parse(html);\n        } // broadcast\n\n\n      html = this.app.broadcastHtml('editor.parse', html); // build\n\n      return build !== false ? this.build(html) : html;\n    },\n    parseLine: function parseLine(html, build) {\n      if (html === ' ') {\n        html = '&nbsp;';\n      } else {\n        // broadcast\n        html = this.app.broadcastHtml('editor.before.parse', html); // convert newlines to br\n\n        html = html.replace(/\\r?\\n/g, \"<br>\");\n        html = this.app.content.encodeCode(html);\n        html = this.app.content.sanitize(html);\n        html = this.app.content.removeEmptySpans(html);\n        html = this.app.content.addHttps(html); // broadcast\n\n        html = this.app.broadcastHtml('editor.parse', html);\n      } // build\n\n\n      return build !== false ? this.build(html) : html;\n    },\n    // unparse\n    unparse: function unparse(html) {\n      var stored = {};\n      var storedIndex = 0;\n      html = html.trim();\n      html = this.app.broadcastHtml('editor.before.unparse', html); // empty\n\n      if (this.app.content.isEmptyHtml(html)) {\n        return '';\n      } // revert\n\n\n      html = this._revertForms(html);\n      html = this._revertFrames(html); // store\n\n      html = this.app.content.store(html, 'noneditable', stored, storedIndex);\n      html = this.app.content.store(html, 'embed', stored, storedIndex); // link nofollow\n\n      html = this.app.content.addNofollow(html); // remove selection markers\n\n      html = this.app.content.removeMarkers(html); // restore data style cache\n\n      html = this.app.content.recacheStyle(html); // restore\n\n      html = this.app.content.restore(html, 'noneditable', stored);\n      html = this.app.content.restore(html, 'embed', stored); // remove empty attrs\n\n      html = this.app.content.removeEmptyAttrs(html, ['style', 'class', 'rel', 'alt', 'title']); // unparse\n\n      html = this._unparseAllTags(html);\n      html = this._unparseDataType(html); // remove empty attrs again\n\n      html = this.app.content.removeEmptyAttrs(html, ['style', 'class', 'rel', 'alt', 'title']);\n\n      if (html === '<p></p>') {\n        html = '';\n      } // tidy\n      //html = this.app.content.tidy.html(html);\n      // broadcast\n\n\n      return this.app.broadcastHtml('editor.unparse', html);\n    },\n    // private\n    _build: function _build($node) {\n      var type = $node.attr('data-' + this.prefix + '-type');\n      this.app.create('block.' + type, $node);\n    },\n    _clean: function _clean(html) {\n      var stored = {};\n      var storedIndex = 0;\n      var storedComments = []; // store comments\n\n      html = this.app.content.storeComments(html, storedComments); // encode\n\n      if (this.app.editor.isTextarea()) {\n        html = this.app.content.encodeCode(html);\n      } // sanitize\n\n\n      html = this.app.content.sanitize(html); // convert\n\n      html = this._convertFrames(html);\n      html = this._convertForms(html); // store\n\n      html = this.app.content.store(html, 'noneditable', stored, storedIndex);\n      html = this.app.content.store(html, 'embed', stored, storedIndex); // remove denied tags\n\n      html = this.app.content.removeTags(html, this.opts.tags.denied); // remove doctype tag\n\n      html = this.app.content.removeDoctype(html); // remove style & script tag\n\n      html = this.app.content.removeTagsWithContent(html, ['script', 'style']); // remove comments\n\n      if (this.opts.clean.comments) {\n        html = this.app.content.removeComments(html);\n      } // remove empty spans\n\n\n      html = this.app.content.removeEmptySpans(html); // add https for links and images\n\n      html = this.app.content.addHttps(html); // remove block tags in\n\n      html = this.app.content.removeBlockTagsInside(html, ['th', 'td', 'li', 'dt', 'dd', 'address']); // cache styles for block and inline tags and img\n\n      html = this.app.content.cacheStyle(html); // restore\n\n      html = this.app.content.restore(html, 'noneditable', stored);\n      html = this.app.content.restore(html, 'embed', stored); // restore comments\n\n      html = this.app.content.restoreComments(html, storedComments); // empty or paragraphize\n\n      if (this.app.content.isEmptyHtml(html)) {\n        html = this.app.block.createHtml();\n      } else {\n        html = this.app.content.paragraphize(html);\n      }\n\n      return html;\n    },\n    _parse: function _parse(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        var nodes = this.app.element.getBlocks($w);\n\n        for (var i = 0; i < nodes.length; i++) {\n          this._parseHtml(nodes[i]);\n        } // predefined classes\n\n\n        if (this.opts.classes) {\n          $w.find(this._getPredefinedTags().join(',')).each(this._addPredefinedClass.bind(this));\n        }\n      }.bind(this));\n    },\n    _parseHtml: function _parseHtml(el) {\n      var tag = el.tagName.toLowerCase();\n      var $el = this.dom(el);\n      var type; // check custom\n\n      var parser = this.opts.parserTags;\n\n      if (parser[tag]) {\n        for (var i = 0; i < parser[tag].length; i++) {\n          type = parser[tag][i].call(this.app, $el);\n          if (type) break;\n        }\n      }\n\n      if (!type) {\n        type = this._parseType($el, tag);\n      } // set\n\n\n      if (type) {\n        $el.attr('data-' + this.prefix + '-type', type); // nested\n\n        if (this.opts.nested.indexOf(type) !== -1) {\n          this._parseNested($el);\n        }\n      }\n    },\n    _parseType: function _parseType($el, tag) {\n      var type;\n\n      if ($el.attr('data-' + this.prefix + '-type')) {\n        type = $el.attr('data-' + this.prefix + '-type');\n      } else if (this._isNoneditable($el)) {\n        type = 'noneditable';\n      } else {\n        type = this._parseTypeByTag($el, tag);\n      }\n\n      return type;\n    },\n    _parseNested: function _parseNested($el) {\n      var nodes = this.app.element.getBlocks($el);\n\n      for (var i = 0; i < nodes.length; i++) {\n        this._parseHtml(nodes[i]);\n      }\n    },\n    _parseTypeByTag: function _parseTypeByTag($el, tag) {\n      var type;\n\n      switch (tag) {\n        case 'p':\n          type = 'paragraph';\n\n          if (this._isImageBlock($el, 'p')) {\n            type = 'image';\n          }\n\n          break;\n\n        case 'figure':\n          type = 'embed';\n\n          if (this._isImageBlock($el, 'figure')) {\n            type = 'image';\n          } else if (this._hasChild($el, 'pre')) {\n            type = 'code';\n          } else if (this._hasChild($el, 'blockquote')) {\n            type = 'quote';\n          }\n\n          break;\n\n        case 'div':\n          type = 'layer';\n\n          if ($el.attr('data-' + this.prefix + '-type')) {\n            type = false;\n          } else if (this._isGridBlock($el)) {\n            type = 'grid';\n          } else if (this._isColumnBlock($el)) {\n            type = 'column';\n          } else if (this._isTextBlock($el)) {\n            type = 'text';\n          } else if (this._isCardBlock($el)) {\n            type = 'card';\n          } else if (this._isImageBlock($el, 'div')) {\n            type = 'image';\n          }\n\n          break;\n\n        case 'h1':\n        case 'h2':\n        case 'h3':\n        case 'h4':\n        case 'h5':\n        case 'h6':\n          type = 'heading';\n          break;\n\n        case 'blockquote':\n          type = 'quote';\n          break;\n\n        case 'table':\n          type = 'table';\n          break;\n\n        case 'pre':\n          type = 'code';\n          break;\n\n        case 'hr':\n          type = 'line';\n          break;\n\n        case 'dl':\n          type = 'dlist';\n          break;\n\n        case 'address':\n          type = 'address';\n          break;\n\n        case 'ul':\n        case 'ol':\n          type = 'list';\n          break;\n\n        case 'main':\n        case 'section':\n        case 'header':\n        case 'footer':\n        case 'aside':\n        case 'article':\n          type = 'layer';\n          break;\n\n        default:\n          break;\n      }\n\n      return type;\n    },\n    // is\n    _isNoneditable: function _isNoneditable($el) {\n      return $el.hasClass(this.opts.noneditable.classname);\n    },\n    _isColumnBlock: function _isColumnBlock($el) {\n      if (!this.opts.grid) return;\n      var $parent = $el.parent();\n\n      if ($parent.length !== 0 && $parent.attr('data-' + this.prefix + '-type') === 'grid') {\n        return true;\n      }\n    },\n    _isGridBlock: function _isGridBlock($el) {\n      if (!this.opts.grid) return;\n      return $el.hasClass(this.opts.grid.classname);\n    },\n    _isTextBlock: function _isTextBlock($el) {\n      return this.opts.text && $el.hasClass(this.opts.text.classname);\n    },\n    _isCardBlock: function _isCardBlock($el) {\n      return this.opts.card && $el.hasClass(this.opts.card.classname);\n    },\n    _isImageBlock: function _isImageBlock($el, tag) {\n      var $img = $el.find('img');\n      if ($img.length === 0) return;\n      if (tag === 'div' && $img.closest('figure').length !== 0) return;\n      var $target = $img;\n      var $parent = $img.parent();\n      var parentTag = $parent.length !== 0 ? $parent.get().tagName : false;\n\n      if (parentTag && (parentTag === 'A' || parentTag === 'SPAN')) {\n        $target = $parent;\n      } else if (parentTag && $parent.get() !== $el.get()) {\n        return;\n      }\n\n      if ($target.prevElement().length !== 0) return;\n      if (tag !== 'figure' && $target.nextElement().length !== 0) return;\n      return true;\n    },\n    // has\n    _hasChild: function _hasChild($el, tag) {\n      if (tag === 'pre') {\n        var $pre = $el.find('pre');\n\n        if ($pre.length !== 0) {\n          return true;\n        }\n      } else if (tag === 'blockquote') {\n        var $quote = $el.find('blockquote');\n        var $script = $el.find('script');\n\n        if ($script.length === 0 && $quote.length !== 0) {\n          return true;\n        }\n      }\n    },\n    // get\n    _getPredefinedTags: function _getPredefinedTags() {\n      var tags = [];\n\n      for (var z in this.opts.classes) {\n        tags.push(z);\n      }\n\n      return tags;\n    },\n    // add\n    _addPredefinedClass: function _addPredefinedClass($node) {\n      var tag = $node.get().tagName.toLowerCase();\n\n      if (typeof this.opts.classes[tag] !== 'undefined') {\n        $node.addClass(this.opts.classes[tag]);\n      }\n    },\n    // unparse\n    _unparseAllTags: function _unparseAllTags(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('*').removeAttr('contenteditable data-gramm_editor'); // remove images states\n\n        if (!this.opts.image.states) {\n          $w.find('img').removeAttr('data-image');\n        }\n      }.bind(this));\n    },\n    _unparseDataType: function _unparseDataType(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        var $elms = $w.find('[data-' + this.prefix + '-type]');\n        $elms.removeAttr('data-' + this.prefix + '-first-level data-' + this.prefix + '-parsed');\n        $elms.removeClass(this.prefix + '-block-focus ' + this.prefix + '-block-multiple-focus ' + this.prefix + '-block-multiple-hover ' + this.prefix + '-editable-pause');\n        $elms.removeClass(this.prefix + '-empty-layer');\n        $elms.each(this._unparseByType.bind(this));\n        $elms.removeAttr('data-' + this.prefix + '-type');\n        $w.find('figcaption').removeAttr('data-' + this.prefix + '-type data-placeholder').each(this.app.content._removeEmptyTag.bind(this));\n      }.bind(this));\n    },\n    _unparseByType: function _unparseByType($node) {\n      var type = $node.attr('data-' + this.prefix + '-type');\n\n      if (this.opts.parser[type] && this.opts.parser[type].unparse) {\n        this.opts.parser[type].unparse.call(this.app, $node);\n      }\n    },\n    // convert\n    _convertFrames: function _convertFrames(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('iframe').each(this._convertFrame.bind(this));\n      }.bind(this));\n    },\n    _convertForms: function _convertForms(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('form').each(this._convertForm.bind(this));\n      }.bind(this));\n    },\n    _convertFrame: function _convertFrame($node) {\n      if ($node.closest('figure').length === 0) {\n        $node.wrap('<figure>');\n        $node.parent().addClass(this.prefix + '-figure-iframe');\n      }\n    },\n    _convertForm: function _convertForm($node) {\n      var $el = this.app.element.replaceToTag($node, 'figure');\n      $el.addClass(this.prefix + '-figure-form');\n      $el.attr('data-' + this.prefix + '-type', 'form');\n    },\n    // revert\n    _revertFrames: function _revertFrames(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('.' + this.prefix + '-figure-iframe').each(this._revertFrame.bind(this));\n      }.bind(this));\n    },\n    _revertForms: function _revertForms(html) {\n      return this.app.utils.wrap(html, function ($w) {\n        $w.find('.' + this.prefix + '-figure-form').each(this._revertForm.bind(this));\n      }.bind(this));\n    },\n    _revertFrame: function _revertFrame($node) {\n      var $figcaption = $node.find('figcaption');\n\n      if ($figcaption.length !== 0) {\n        $node.removeClass(this.prefix + '-figure-iframe');\n      } else {\n        $node.unwrap();\n      }\n    },\n    _revertForm: function _revertForm($node) {\n      var $el = this.app.element.replaceToTag($node, 'form');\n      $el.removeClass(this.prefix + '-figure-form');\n    }\n  });\n  ArticleEditor.add('module', 'element', {\n    // is\n    is: function is(el, type, extend) {\n      var res = false;\n      var node = type === 'text' ? el : this._getNode(el);\n\n      if (type === 'inline') {\n        res = this._isElement(node) && this._isInlineTag(node.tagName, extend);\n      } else if (type === 'block') {\n        res = this._isElement(node) && this._isBlockTag(node.tagName, extend);\n      } else if (type === 'element') {\n        res = this._isElement(node);\n      } else if (type === 'text') {\n        res = typeof node === 'string' && !/^\\s*<(\\w+|!)[^>]*>/.test(node) ? true : this.isTextNode(node);\n      } else if (type === 'list') {\n        res = this._isElement(node) && ['ul', 'ol'].indexOf(node.tagName.toLowerCase()) !== -1;\n      } else if (type === 'heading') {\n        res = this._isElement(node) && ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].indexOf(node.tagName.toLowerCase()) !== -1;\n      }\n\n      return res;\n    },\n    isEmptyOrImageInline: function isEmptyOrImageInline(el) {\n      var node = this.dom(el).get();\n\n      if (!node || node.nodeType === 3) {\n        return false;\n      }\n\n      var tag = node.tagName.toLowerCase();\n      var tags = ['svg', 'img'];\n      var noeditattr = node.getAttribute('contenteditable') === 'false';\n      var isInline = this.is(node, 'inline');\n\n      if (isInline && this.isEmpty(node) || isInline && noeditattr || tags.indexOf(tag) !== -1) {\n        return true;\n      }\n\n      return false;\n    },\n    isEmpty: function isEmpty(el) {\n      var node = this._getNode(el);\n\n      if (node) {\n        return node.nodeType === 3 ? node.textContent.trim().replace(/\\n/, '') === '' : node.innerHTML === '';\n      }\n\n      return false;\n    },\n    isTag: function isTag(el, tag) {\n      return this._getNode(el).tagName.toLowerCase() === tag;\n    },\n    isTextNode: function isTextNode(el) {\n      var node = this._getNode(el);\n\n      return node && node.nodeType && node.nodeType === 3;\n    },\n    isVisible: function isVisible(el) {\n      var node = this._getNode(el);\n\n      return !!(node.offsetWidth || node.offsetHeight || node.getClientRects().length);\n    },\n    isScrollVisible: function isScrollVisible(el, tolerance) {\n      var $scrollTarget = this.app.scroll.getTarget();\n      var $el = this.dom(el);\n      var docViewTop = $scrollTarget.scrollTop();\n      var docViewBottom = docViewTop + $scrollTarget.height();\n      var elemTop = $el.offset().top;\n      tolerance = tolerance || 0;\n      return elemTop <= docViewBottom;\n    },\n    // get\n    getDataBlock: function getDataBlock(el) {\n      return this.dom(el).closest('[data-' + this.prefix + '-type]');\n    },\n    getType: function getType(el) {\n      return this.dom(el).attr('data-' + this.prefix + '-type');\n    },\n    getAllInlines: function getAllInlines(inline) {\n      var inlines = [];\n      var node = inline;\n\n      while (node) {\n        if (this.is(node, 'inline')) {\n          inlines.push(node);\n        }\n\n        node = node.parentNode;\n      }\n\n      return inlines;\n    },\n    // scroll\n    scrollTo: function scrollTo($el, tolerance) {\n      if (!this.isScrollVisible($el)) {\n        tolerance = tolerance || 60;\n        var offset = $el.offset();\n        var $target = this.app.scroll.getTarget();\n        var value = offset.top - tolerance;\n        $target.scrollTop(value);\n        setTimeout(function () {\n          $target.scrollTop(value);\n        }, 1);\n      }\n    },\n    // replace\n    replaceToTag: function replaceToTag(el, tag) {\n      return this.dom(el).replaceWith(function (node) {\n        var $el = this.dom('<' + tag + '>').append(node.innerHTML);\n\n        if (node.attributes) {\n          var attrs = node.attributes;\n\n          for (var i = 0; i < attrs.length; i++) {\n            $el.attr(attrs[i].nodeName, attrs[i].value);\n          }\n        }\n\n        return $el;\n      }.bind(this));\n    },\n    // split\n    split: function split(el) {\n      var $el = this.dom(el);\n      el = $el.get();\n      var tag = el.tagName.toLowerCase();\n      var fragment = this.app.content.extractHtmlFromCaret(el);\n\n      if (fragment.nodeType && fragment.nodeType === 11) {\n        fragment = this.dom(fragment.childNodes);\n      }\n\n      var $secondPart = this.dom('<' + tag + ' />');\n      $secondPart = this.cloneAttrs(el, $secondPart);\n      $secondPart.append(fragment);\n      $el.after($secondPart);\n      var $last = $el.children().last();\n\n      if (this.is($last, 'inline')) {\n        var html = $last.html();\n        html = this.app.utils.removeInvisibleChars(html);\n\n        if (html === '') {\n          $last.remove();\n        }\n      }\n\n      var type = this.getType($secondPart);\n\n      if (type) {\n        this.app.create('block.' + type, $secondPart, true);\n      }\n\n      if ($el.html() === '') $el.remove();\n      return $secondPart;\n    },\n    // clone\n    cloneEmpty: function cloneEmpty(el) {\n      var $el = this.dom(el);\n      var tag = $el.get().tagName.toLowerCase();\n      var $clone = this.dom('<' + tag + '>');\n      return $clone;\n    },\n    cloneAttrs: function cloneAttrs(elFrom, elTo) {\n      var $elTo = this.dom(elTo);\n\n      var attrs = this._getNode(elFrom).attributes;\n\n      var len = attrs.length;\n\n      while (len--) {\n        var attr = attrs[len];\n        $elTo.attr(attr.name, attr.value);\n      }\n\n      return $elTo;\n    },\n    // attrs\n    getAttrs: function getAttrs(el) {\n      var node = this._getNode(el);\n\n      var attr = {};\n\n      if (node.attributes != null && node.attributes.length) {\n        for (var i = 0; i < node.attributes.length; i++) {\n          var val = node.attributes[i].nodeValue;\n          val = this._isNumber(val) ? parseFloat(val) : this._getBooleanFromStr(val);\n          attr[node.attributes[i].nodeName] = val;\n        }\n      }\n\n      return attr;\n    },\n    removeEmptyAttrs: function removeEmptyAttrs(el, attrs) {\n      var $el = this.dom(el);\n      var name = attrs.join(' ');\n      var res = false;\n\n      if (typeof $el.attr(name) === 'undefined' || $el.attr(name) === null) {\n        res = true;\n      } else if ($el.attr(name) === '') {\n        $el.removeAttr(name);\n        res = true;\n      }\n\n      return res;\n    },\n    // blocks\n    getBlocks: function getBlocks(el, parsertags, extendtags) {\n      var node = this._getNode(el);\n\n      var nodes = node.childNodes;\n      var finalNodes = [];\n      var tags = parsertags || this.opts.tags.parser;\n\n      if (extendtags) {\n        tags = this.app.utils.extendArray(tags, extendtags);\n      }\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (nodes[i].nodeType === 1 && tags.indexOf(nodes[i].tagName.toLowerCase()) !== -1) {\n          finalNodes.push(nodes[i]);\n        }\n      }\n\n      return finalNodes;\n    },\n    hasBlocks: function hasBlocks(el) {\n      return this.getBlocks(el).length !== 0;\n    },\n    // siblings\n    hasTextSiblings: function hasTextSiblings(el) {\n      var node = this._getNode(el);\n\n      var hasPrev = node.previousSibling && node.previousSibling.nodeType === 3 && !this.isEmpty(node.previousSibling);\n      var hasNext = node.nextSibling && node.nextSibling.nodeType === 3 && !this.isEmpty(node.nextSibling);\n      return hasPrev || hasNext;\n    },\n    // private\n    _getNode: function _getNode(el) {\n      return this.dom(el).get();\n    },\n    _getBooleanFromStr: function _getBooleanFromStr(str) {\n      if (str === 'true') return true;else if (str === 'false') return false;\n      return str;\n    },\n    _isBlockTag: function _isBlockTag(tag, extend) {\n      var arr = this.app.utils.extendArray(this.opts.tags.block, extend);\n      return arr.indexOf(tag.toLowerCase()) !== -1;\n    },\n    _isInlineTag: function _isInlineTag(tag, extend) {\n      var arr = this.app.utils.extendArray(this.opts.tags.inline, extend);\n      return arr.indexOf(tag.toLowerCase()) !== -1;\n    },\n    _isElement: function _isElement(node) {\n      return node && node.nodeType && node.nodeType === 1;\n    },\n    _isTag: function _isTag(tag) {\n      return tag !== undefined && tag;\n    },\n    _isNumber: function _isNumber(str) {\n      return !isNaN(str) && !isNaN(parseFloat(str));\n    }\n  });\n  ArticleEditor.add('module', 'blocks', {\n    build: function build() {\n      this._buildFirstLevel();\n    },\n    is: function is() {\n      return this.getSelected().length > 1;\n    },\n    set: function set($block) {\n      $block = $block.closest('[data-' + this.prefix + '-first-level]'); // unset not first level\n\n      this.unsetNotFirstLevel(); // set focus class\n\n      this._setFocus($block);\n\n      setTimeout(function () {\n        this.app.selection.removeAllRanges();\n      }.bind(this), 0); // ui\n\n      this.app.path.build();\n      this.app.toolbar.build();\n      this.app.control.close(); // check all or one selected\n\n      this._checkSelected();\n    },\n    setFirstLevel: function setFirstLevel() {\n      this.app.blocks.getFirstLevel().addClass(this.prefix + '-block-focus');\n    },\n    unset: function unset() {\n      this.getBlocks().removeClass(this.prefix + '-block-focus ' + this.prefix + '-block-multiple-hover');\n    },\n    unsetNotFirstLevel: function unsetNotFirstLevel() {\n      this.getBlocks().not('[data-' + this.prefix + '-first-level]').removeClass(this.prefix + '-block-focus');\n    },\n    unsetHover: function unsetHover() {\n      this.getBlocks().removeClass(this.prefix + '-block-multiple-hover');\n    },\n    getBlocks: function getBlocks() {\n      return this.app.editor.getLayout().find('[data-' + this.prefix + '-type]');\n    },\n    getFirstLevel: function getFirstLevel() {\n      return this.app.editor.getLayout().find('[data-' + this.prefix + '-first-level]');\n    },\n    getEditableBlocks: function getEditableBlocks() {\n      return this.app.editor.getLayout().find('[contenteditable=true]');\n    },\n    getSelected: function getSelected() {\n      return this.app.editor.getLayout().find('.' + this.prefix + '-block-focus');\n    },\n    getFirst: function getFirst() {\n      return this.getBlocks().first().dataget('instance');\n    },\n    getFirstSelected: function getFirstSelected() {\n      return this.getSelected().first().dataget('instance');\n    },\n    getLast: function getLast() {\n      return this.getBlocks().last().dataget('instance');\n    },\n    getLastSelected: function getLastSelected() {\n      return this.getSelected().last().dataget('instance');\n    },\n    pauseEditableBlocks: function pauseEditableBlocks() {\n      this.getEditableBlocks().attr('contenteditable', false).addClass(this.prefix + '-editable-pause');\n    },\n    runEditableBlocks: function runEditableBlocks() {\n      var $blocks = this.app.editor.getLayout().find('.' + this.prefix + '-editable-pause');\n      $blocks.attr('contenteditable', true).removeClass(this.prefix + '-editable-pause');\n    },\n    removeSelected: function removeSelected(traverse) {\n      var last = this.getLastSelected();\n      var next;\n\n      if (traverse !== false && last) {\n        next = last.getNext();\n      } // remove\n\n\n      this.getSelected().each(this._removeSelectedBlock.bind(this)); // traverse\n\n      if (next) {\n        this.app.block.set(next, 'start');\n      }\n    },\n    // private\n    _buildFirstLevel: function _buildFirstLevel() {\n      var name = 'data-' + this.prefix + '-first-level';\n      var $layout = this.app.editor.getLayout();\n      $layout.find('[' + name + ']').removeAttr(name);\n      $layout.children('[data-' + this.prefix + '-type]').attr(name, true);\n    },\n    _checkSelected: function _checkSelected() {\n      var $all = this.getFirstLevel();\n      var $selected = this.getSelected();\n\n      if ($selected.length === 0) {\n        this.unsetHover();\n        this.app.block.unset();\n      } else if ($selected.length === 1) {\n        this.unsetHover();\n        this.app.block.set($selected.eq(0), false, true);\n      } else if ($all.length === $selected.length) {\n        this.unsetHover();\n        this.app.editor.selectAll();\n      } else {\n        this.app.editor.unsetSelectAllClass();\n      }\n    },\n    _setFocus: function _setFocus($block) {\n      var func = $block.hasClass(this.prefix + '-block-focus') ? 'removeClass' : 'addClass';\n      $block[func](this.prefix + '-block-focus');\n      $block.removeClass(this.prefix + '-block-multiple-hover');\n    },\n    _removeSelectedBlock: function _removeSelectedBlock($node) {\n      var instance = $node.dataget('instance');\n      instance.remove({\n        traverse: false\n      });\n    }\n  });\n  ArticleEditor.add('module', 'block', {\n    init: function init() {\n      this.instance = false;\n      this.$block = false;\n    },\n    create: function create(html) {\n      var instance = this.app.create('block.' + this.opts.editor.markup);\n      if (html) instance.getBlock().html(html);\n      return instance;\n    },\n    createHtml: function createHtml(html) {\n      return this.create(html).getOuterHtml();\n    },\n    is: function is($el) {\n      return $el ? this._isBlockActive($el) : this.get();\n    },\n    get: function get() {\n      return this.instance;\n    },\n    set: function set(el, caret, force) {\n      // is instance\n      if (el.isBlock) {\n        el = el.getBlock();\n      } // check if active\n\n\n      if (force !== true && this._isBlockActive(el)) return; // unset\n\n      this.unset(); // set\n\n      this.instance = this._getInstance(el);\n      this.$block = this.instance.getBlock();\n      this.$block.addClass(this.prefix + '-block-focus'); // caret\n\n      this._setCaret(caret); // ui\n\n\n      this.app.path.build();\n      this.app.toolbar.build();\n      this.app.control.build(); // broadcast\n\n      this.app.broadcast('block.set');\n    },\n    unset: function unset() {\n      if (!this.instance) return;\n      this.instance = false;\n      this.$block = false; // unset\n\n      this.app.blocks.unset();\n      this.app.editor.unsetSelectAllClass(); // ui\n\n      this.app.path.build();\n      this.app.toolbar.build();\n      this.app.control.close(); // broadcast\n\n      this.app.broadcast('block.unset');\n    },\n    duplicate: function duplicate() {\n      if (!this._isAction()) return;\n      var instance = this.get();\n      var clone = instance.duplicate();\n      var newInstance = instance.insert({\n        instance: clone,\n        position: 'after',\n        caret: 'start'\n      });\n      this.app.broadcast('block.duplicate', {\n        instance: newInstance\n      });\n      return newInstance;\n    },\n    moveUp: function moveUp() {\n      if (!this._isAction()) return;\n      this.get().moveUp();\n    },\n    moveDown: function moveDown() {\n      if (!this._isAction()) return;\n      this.get().moveDown();\n    },\n    change: function change(instance) {\n      if (!this.is()) return;\n      var current = this.get();\n      var $block = current.getBlock();\n      var $newBlock = instance.getBlock();\n      $block.after($newBlock);\n      $block.remove(); // rebuild\n\n      this.app.parser.buildElement($newBlock);\n      this.app.editor.build(); // set\n\n      this.set(instance); // broadcast\n\n      this.app.broadcast('block.change', {\n        instance: instance\n      });\n    },\n    add: function add(params) {\n      this.app.popup.close();\n      var current = this.get();\n      var remove = false;\n      var position = false; // all selected\n\n      if (this.app.editor.isAllSelected()) {\n        current = this.create();\n        this.app.editor.unsetSelectAllClass();\n        this.app.editor.getLayout().html('').append(current.getBlock());\n        position = 'after';\n        remove = true;\n      } // blocks\n      else if (this.app.blocks.is()) {\n          current = this.app.blocks.getLastSelected();\n          position = 'after';\n        } // not selected\n        else if (!current) {\n            if (this.opts.editor.add === 'top') {\n              current = this.app.blocks.getFirst();\n              position = 'before';\n            } else {\n              current = this.app.blocks.getLast();\n              position = 'after';\n            }\n          } // like variable\n          else if (current.isInlineBlock()) {\n              var parent = current.getParent();\n              this.app.caret.set(current.getBlock(), 'after');\n              this.app.block.set(parent);\n              current = this.get();\n            } // empty emptiable\n            else if (current.isEmptiable() && current.isEmpty()) {\n                var $block = current.getBlock();\n                $block.removeClass(this.prefix + '-empty-layer');\n                $block.html('');\n                position = 'append';\n              } // position\n\n\n      position = params.position ? params.position : position; // create\n\n      var newInstance = params.instance ? params.instance : this.app.create('block.' + params.name, params.source); // insert\n\n      current.insert({\n        instance: newInstance,\n        position: position,\n        caret: params.caret ? params.caret : 'end'\n      });\n\n      if (remove) {\n        current.remove();\n      }\n\n      return newInstance;\n    },\n    format: function format(params) {\n      this.app.format.set(params);\n    },\n    remove: function remove(params) {\n      var instance = this.get();\n      if (!instance) return;\n      var type = instance.getType();\n      var parent = instance.getParent();\n      var imageUrl = type === 'image' ? instance.getSrc() : false;\n      var isTraverse = params && typeof params.tarverse !== 'undefined' && params.tarverse === false ? false : true;\n\n      if (isTraverse) {\n        var next = instance.getNext();\n        var prev = instance.getPrev();\n        instance.remove();\n\n        if (next) {\n          this.app.block.set(next, 'start');\n        } else if (prev) {\n          this.app.block.set(prev, 'end');\n        } else {\n          this.unset();\n        }\n      } else {\n        this.unset();\n        instance.remove();\n      } // broadcast image\n\n\n      if (type === 'image') {\n        this.app.broadcast('image.remove', {\n          url: imageUrl\n        });\n      } // broadcast\n\n\n      this.app.broadcast('block.remove', {\n        type: type,\n        parent: parent\n      }); // check empty\n\n      if (this.app.editor.isEmpty()) {\n        this.app.editor.setEmpty();\n      }\n    },\n    observe: function observe(obj, name) {\n      var types = ['line', 'quote', 'layer', 'code'];\n      if (types.indexOf(name) !== -1 && !this.opts[name]) return false; // align / valign / outset\n\n      if (name === 'alignment' && !this.opts.align) return false;\n      if (name === 'valign' && !this.opts.valign) return false;\n      if (name === 'outset' && !this.opts.outset) return false;\n    },\n    observeCard: function observeCard(obj, name) {\n      if (name === 'image') {\n        var instance = this.get();\n        if (!instance.hasImage()) return false;\n      }\n    },\n    popup: function popup(params, button, name) {\n      // alignment\n      var form;\n\n      if (name === 'alignment') {\n        form = this._buildSegments('align', 'alignment');\n      } // valign\n      else if (name === 'valign') {\n          form = this._buildSegments('valign');\n        } // outset\n        else if (name === 'outset') {\n            form = this._buildSegments('outset');\n          } // popup\n\n\n      this.app.popup.create(name, {\n        setter: 'block.setData',\n        getter: 'block.getData',\n        form: form\n      });\n      this.app.popup.open({\n        button: button\n      });\n    },\n    // data\n    getData: function getData() {\n      if (!this.is()) return;\n      var instance = this.get();\n      return instance.getData();\n    },\n    setData: function setData(stack) {\n      if (!this.is()) return;\n      var data = stack.getData();\n      var instance = this.get();\n      instance.setData(data);\n    },\n    // private\n    _isBlockActive: function _isBlockActive(el) {\n      if (this.app.blocks.is()) return false;\n      return this.instance && this.dom(el).get() === this.$block.get();\n    },\n    _isAction: function _isAction() {\n      return !this.app.blocks.is() && this.is();\n    },\n    _buildSegments: function _buildSegments(name, title) {\n      var form = {};\n      var segments = {};\n      var obj = this.opts[name];\n\n      for (var key in obj) {\n        if (!obj[key]) continue;\n        segments[key] = {\n          name: obj[key],\n          prefix: name\n        };\n      }\n\n      title = title || name;\n      form[name] = {\n        type: 'segment',\n        label: '## form.' + title + ' ##',\n        segments: segments\n      };\n      return form;\n    },\n    _appendToEmptyBlock: function _appendToEmptyBlock(instance) {\n      var emptyBlock = this.app.block.create();\n      emptyBlock.append(instance);\n      return emptyBlock.getBlock();\n    },\n    _getInstance: function _getInstance(el) {\n      return this.dom(el).dataget('instance');\n    },\n    _setCaret: function _setCaret(caret) {\n      if (this.instance.isEditable()) {\n        if (caret) {\n          var $target = this.$block;\n\n          if (this.instance.getType() === 'list' && (caret === 'start' || caret === 'end')) {\n            $target = caret === 'start' ? this.$block.find('li').first() : this.$block.find('li').last();\n          }\n\n          this.app.caret.set($target, caret);\n        }\n      } else {\n        this.app.scroll.save();\n        this.app.editor.getWin().focus();\n        this.$block.focus();\n        setTimeout(function () {\n          this.app.selection.removeAllRanges();\n        }.bind(this), 0);\n        this.app.scroll.restore();\n      }\n    }\n  });\n  ArticleEditor.add('module', 'event', {\n    init: function init() {\n      // local\n      this.dragoverEvent = false;\n      this.pressedCmd = false;\n      this.isPopupMouseUp = false; // events\n\n      this.events = {\n        frame: ['click', 'contextmenu', 'touchstart', 'mouseover', 'mouseup', 'mousedown', 'keydown', 'keyup', 'paste', 'copy', 'cut', 'drop', 'dragstart', 'dragover', 'dragleave'],\n        doc: ['keydown', 'mousedown', 'click'],\n        win: ['focus']\n      };\n    },\n    run: function run() {\n      this._runEvents();\n    },\n    pause: function pause() {\n      this._pauseEvents();\n    },\n    build: function build() {\n      this._buildTargets();\n\n      this._buildPreventLinks();\n\n      this._buildEvents();\n    },\n    stop: function stop() {\n      var eventname = this.prefix + '-events';\n      this.$body.off('.' + eventname);\n      this.$win.off('.' + eventname);\n      this.app.$doc.off('.' + eventname);\n    },\n    // on\n    onmouseover: function onmouseover(e) {\n      // multiple hover\n      this._buildHover(e); // broadcast\n\n\n      this.app.broadcast('editor.mouseover', {\n        e: e\n      });\n    },\n    oncontextmenu: function oncontextmenu(e) {\n      if (this.pressedCmd) {\n        e.preventDefault();\n\n        var $block = this._getBlock(e);\n\n        this.app.blocks.set($block);\n      }\n    },\n    onclick: function onclick(e) {\n      this.app.broadcast('editor.click', {\n        e: e\n      });\n    },\n    onmouseup: function onmouseup(e) {\n      // state\n      this.app.state.add(e); // broadcast\n\n      this.app.broadcast('editor.mouseup', {\n        e: e\n      }); // ui\n\n      this.app.toolbar.observe();\n    },\n    onmousedown: function onmousedown(e) {\n      if (this.app.popup.isOpen()) {\n        this.app.popup.close();\n      }\n\n      this._setBlock(e);\n\n      this._setCaretInline(e);\n\n      this.app.placeholder.handleClick(e); // state\n\n      this.app.state.add(e); // broadcast\n\n      this.app.broadcast('editor.mousedown', {\n        e: e\n      });\n    },\n    ontouchstart: function ontouchstart(e) {\n      // state\n      this.app.state.add(e);\n    },\n    onkeydown: function onkeydown(e) {\n      // broadcast\n      var event = this.app.broadcast('editor.keydown', this._buildEventKeysObj(e));\n      if (event.isStopped()) return e.preventDefault(); // listen undo & redo\n\n      if (this.app.state.listen(e)) {\n        this.pressedCmd = false;\n        return;\n      }\n\n      this.pressedCmd = this._isCmdPressed(e); // esc\n\n      if (this._isEsc(e)) {\n        this.app.block.unset();\n        this.app.selection.removeAllRanges();\n      } // handle shortcut\n\n\n      if (this.app.shortcut.handle(e)) return; // release keydown\n\n      this.app.input.handle(event);\n    },\n    onkeyup: function onkeyup(e) {\n      // broadcast\n      var event = this.app.broadcast('editor.keyup', this._buildEventKeysObj(e));\n      if (event.isStopped()) return e.preventDefault(); // catch tab\n\n      var key = e.which;\n\n      if (key === this.app.keycodes.TAB && !this.app.block.is()) {\n        if (e.target && e.target.tagName === 'BODY') {\n          var $first = this.app.blocks.getFirst();\n          this.app.editor.setFocus();\n          this.app.block.set($first);\n        } else {\n          this._setBlock(e);\n        }\n      }\n\n      this.pressedCmd = false;\n      this.app.blocks.unsetHover(); // ui\n\n      this.app.toolbar.observe();\n    },\n    onpaste: function onpaste(e) {\n      this.app.content.paste(e);\n    },\n    oncopy: function oncopy(e) {\n      this.app.content.copy(e);\n    },\n    oncut: function oncut(e) {\n      this.app.content.cut(e);\n    },\n    ondrop: function ondrop(e) {\n      if (!this.opts.editor.drop) return e.preventDefault(); // broadcast\n\n      var event = this.app.broadcast('editor.drop', {\n        e: e\n      });\n      if (event.isStopped()) return e.preventDefault(); // drop\n\n      var html;\n      var dt = e.dataTransfer;\n      var item = dt.getData('item');\n\n      if (item !== '') {\n        e.preventDefault();\n\n        if (this.opts.draggable && typeof this.opts.draggable[item] !== 'undefined') {\n          html = this.opts.draggable[item];\n        } else {\n          html = this.dom('[data-' + this.prefix + '-drop-item=' + item + ']').html();\n          html = html.trim();\n        } // drop\n\n\n        if (html) {\n          var position = 'after';\n          var $over = this.app.editor.getBody().find('.' + this.prefix + '-draggable-over');\n\n          if ($over.length !== 0) {\n            position = 'append';\n          }\n\n          this.app.content.drop(e, html, position, false);\n        }\n      } else if (this.opts.image && this.opts.image.upload && dt.files !== null && dt.files.length > 0) {\n        e.preventDefault();\n        this.app.image.drop(e, dt);\n      } else {\n        html = dt.getData(\"text/html\");\n        html = html.trim() === '' ? dt.getData('Text') : html; // drop\n\n        this.app.content.drop(e, html);\n      }\n\n      this._removeDragPlaceholder();\n\n      this.app.observer.trigger = true;\n    },\n    ondragstart: function ondragstart(e) {\n      // broadcast\n      this.app.broadcast('editor.dragstart', {\n        e: e\n      });\n    },\n    ondragover: function ondragover(e) {\n      e.preventDefault();\n      this.dragoverEvent = true;\n      this.app.observer.trigger = false;\n\n      this._removeDragPlaceholder(); // data\n\n\n      var types = e.dataTransfer.types;\n\n      if (types.indexOf('item') !== -1) {\n        var $block = this._getBlock(e.target);\n\n        if ($block.length !== 0) {\n          var instance = $block.dataget('instance');\n\n          if (instance.getType('layer') && instance.isEmpty()) {\n            $block.addClass(this.prefix + '-draggable-over');\n          } else {\n            var $pl = this.dom('<div>').addClass(this.prefix + '-draggable-placeholder');\n            $block.after($pl);\n          }\n        }\n      } // broadcast\n\n\n      this.app.broadcast('editor.dragover', {\n        e: e\n      });\n    },\n    ondragleave: function ondragleave(e) {\n      e.preventDefault();\n      this.dragoverEvent = false;\n\n      this._removeDragPlaceholder();\n\n      this.app.observer.trigger = true; // broadcast\n\n      this.app.broadcast('editor.dragleave', {\n        e: e\n      });\n    },\n    // on win\n    onwinfocus: function onwinfocus(e) {\n      if (this._isRemoveRanges()) {\n        setTimeout(function () {\n          this.app.selection.removeAllRanges();\n        }.bind(this), 0);\n        return;\n      }\n    },\n    // on doc\n    ondockeydown: function ondockeydown(e) {\n      if (this._isEsc(e) && this.app.popup.isOpen()) {\n        this.app.popup.close(false);\n      }\n    },\n    ondocmousedown: function ondocmousedown(e) {\n      this.isPopupMouseUp = this.dom(e.target).closest('.' + this.prefix + '-popup-' + this.uuid).length !== 0;\n    },\n    ondocclick: function ondocclick(e) {\n      if (!this._isOutsideEditor(e)) return;\n\n      if (this.app.popup.isOpen()) {\n        if (this.isPopupMouseUp === false) this.app.popup.close(false);\n      } else {\n        this.app.editor.setBlur();\n      }\n\n      this.pressedCmd = false;\n    },\n    // private\n    _buildPreventLinks: function _buildPreventLinks() {\n      var eventname = this.prefix + '-prevent-events';\n      this.$body.on('click.' + eventname + ' dblclick.' + eventname, this._preventLinks.bind(this));\n    },\n    _buildTargets: function _buildTargets() {\n      this.$body = this.app.editor.getBody();\n      this.$win = this.app.editor.getWin();\n    },\n    _buildEventKeysObj: function _buildEventKeysObj(e) {\n      var key = e.which;\n      var arrowKeys = [this.app.keycodes.UP, this.app.keycodes.DOWN, this.app.keycodes.LEFT, this.app.keycodes.RIGHT];\n      var isAlphaKeys = !e.ctrlKey && !e.metaKey && (key >= 48 && key <= 57 || key >= 65 && key <= 90);\n      var k = this.app.keycodes;\n      return {\n        'e': e,\n        'key': key,\n        'ctrl': e.ctrlKey || e.metaKey,\n        'shift': e.shiftKey,\n        'alt': e.altKey,\n        'select': (e.ctrlKey || e.metaKey) && !e.altKey && key === 65,\n        'enter': key === k.ENTER,\n        'space': key === k.SPACE,\n        'esc': key === k.ESC,\n        'tab': key === k.TAB && !e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey,\n        'delete': key === k.DELETE,\n        'backspace': key === k.BACKSPACE,\n        'alpha': isAlphaKeys,\n        'arrow': arrowKeys.indexOf(key) !== -1,\n        'left': key === k.LEFT,\n        'right': key === k.RIGHT,\n        'up': key === k.UP,\n        'down': key === k.DOWN,\n        'left-right': key === k.LEFT || key === k.RIGHT,\n        'up-left': key === k.UP || key === k.LEFT,\n        'down-right': key === k.DOWN || key === k.RIGHT\n      };\n    },\n    _buildEvents: function _buildEvents() {\n      var eventname = this.prefix + '-events';\n\n      this._buildTargetEvents(this.$body, this.events.frame, eventname, '');\n\n      this._buildTargetEvents(this.$win, this.events.win, eventname, 'win');\n\n      this._buildTargetEvents(this.app.$doc, this.events.doc, eventname, 'doc');\n    },\n    _buildTargetEvents: function _buildTargetEvents($target, events, eventname, type) {\n      for (var i = 0; i < events.length; i++) {\n        $target.on(events[i] + '.' + eventname, this['on' + type + events[i]].bind(this));\n      }\n    },\n    _buildHover: function _buildHover(e) {\n      var instance = this.app.block.get(); // check pressed & instance\n\n      if (!this.pressedCmd || !instance) return;\n      var $block = this.dom(e.target).closest('[data-' + this.prefix + '-first-level]');\n      if ($block.length === 0) return; // unset\n\n      this.app.blocks.unsetHover(); // build hover\n\n      if (!$block.hasClass(this.prefix + '-block-focus')) {\n        $block.addClass(this.prefix + '-block-multiple-hover');\n      }\n    },\n    _runEvents: function _runEvents() {\n      var eventname = this.prefix + '-events';\n\n      this._buildTargetEvents(this.$body, this.events.frame, eventname, '');\n\n      this._buildTargetEvents(this.$win, this.events.win, eventname, 'win');\n    },\n    _pauseEvents: function _pauseEvents() {\n      var eventname = this.prefix + '-events';\n\n      if (this.$body) {\n        this.$body.off('.' + eventname);\n        this.$win.off('.' + eventname);\n      }\n    },\n    _getBlock: function _getBlock(target) {\n      return this.dom(target).closest('[data-' + this.prefix + '-type]');\n    },\n    _setCaretInline: function _setCaretInline(e) {\n      var instance = this.app.block.get();\n      var code = false;\n\n      if (instance && instance.isEditable()) {\n        // svg or img\n        if (this.app.element.isEmptyOrImageInline(e.target)) {\n          this.app.caret.set(e.target, 'after');\n        } // code\n        else if (this.app.selection.isCollapsed() && e.target.tagName === 'CODE') {\n            code = true;\n            setTimeout(function () {\n              var current = this.app.selection.getElement();\n\n              if (current && code && current.tagName !== 'CODE') {\n                this.app.caret.set(e.target, 'start');\n                code = false;\n              }\n            }.bind(this), 1);\n          }\n      }\n    },\n    _setBlock: function _setBlock(e) {\n      // set focus event\n      this.app.editor.setFocus();\n      var $block = e ? this._getBlock(e.target) : this.app.selection.getDataBlock();\n      if ($block.length === 0) return; // prevent contenteditable false focus\n\n      if ($block.attr('contenteditable') === false) {\n        e.preventDefault();\n      } // multiple\n\n\n      if (this.pressedCmd) {\n        if (e) e.preventDefault();\n        this.app.blocks.set($block);\n      } // single\n      else {\n          this.app.block.set($block);\n        }\n    },\n    _isRemoveRanges: function _isRemoveRanges() {\n      var instance = this.app.block.get();\n      return this.app.blocks.is() || instance && instance.isInlineBlock();\n    },\n    _isEsc: function _isEsc(e) {\n      return e.which === this.app.keycodes.ESC;\n    },\n    _isOutsideEditor: function _isOutsideEditor(e) {\n      var $target = this.dom(e.target);\n      var targets = ['-container-', '-popup-', '-control-'];\n      return $target.closest('.' + this.prefix + targets.join(this.uuid + ',.' + this.prefix) + this.uuid).length === 0;\n    },\n    _isCmdPressed: function _isCmdPressed(e) {\n      return this.opts.selection.multiple ? (e.ctrlKey || e.metaKey) && !e.shiftKey && !e.altKey : false;\n    },\n    _isLinkClick: function _isLinkClick(e) {\n      return this.dom(e.target).closest('a').length !== 0;\n    },\n    _removeDragPlaceholder: function _removeDragPlaceholder() {\n      var $body = this.app.editor.getBody();\n      $body.find('.' + this.prefix + '-draggable-placeholder').remove();\n      $body.find('.' + this.prefix + '-draggable-over').removeClass(this.prefix + '-draggable-over');\n    },\n    _preventLinks: function _preventLinks(e) {\n      if (this._isLinkClick(e)) e.preventDefault();\n    }\n  });\n  ArticleEditor.add('module', 'selection', {\n    init: function init() {\n      this.savedSelection = false;\n      this.savedMarker = false;\n    },\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    // get\n    get: function get() {\n      var sel = this._getSelection();\n\n      var range = this._getRange(sel);\n\n      var current = this._getCurrent(sel);\n\n      return {\n        selection: sel,\n        range: range,\n        collapsed: this._getCollapsed(sel, range),\n        current: current,\n        parent: this._getParent(current)\n      };\n    },\n    getRange: function getRange() {\n      return this._getRange(this.get().selection);\n    },\n    getNodes: function getNodes(data) {\n      var sel = this.get();\n      var isInline = data && (data.type && data.type === 'inline' || data.tags && data.tags.indexOf('a') !== -1);\n      var func = isInline ? '_getAllRangeNodes' : '_getRangeNodes';\n      var nodes = [];\n\n      if (this.app.editor.isAllSelected()) {\n        nodes = this.app.editor.getLayout().children().getAll();\n      } else {\n        nodes = sel.selection && sel.range ? this[func](sel.range) : nodes;\n      }\n\n      return nodes.length > 0 ? this._filterNodes(nodes, sel.range, isInline, data) : nodes;\n    },\n    getCurrent: function getCurrent() {\n      var sel = this._getSelection();\n\n      return this._getCurrent(sel);\n    },\n    getParent: function getParent() {\n      var current = this.getCurrent();\n      return this._getParent(current);\n    },\n    getElement: function getElement(el) {\n      return this._getElement(el, 'element');\n    },\n    getInline: function getInline(el) {\n      return this._getElement(el, 'inline');\n    },\n    getTopInline: function getTopInline(el) {\n      var node = el ? this.dom(el).get() : this.getCurrent();\n      var inlines = [];\n\n      while (node) {\n        if (this._getElement(node, 'inline')) {\n          inlines.push(node);\n        } else {\n          break;\n        }\n\n        node = node.parentNode;\n      }\n\n      return inlines[inlines.length - 1];\n    },\n    getDataBlock: function getDataBlock(el) {\n      var sel = this._getSelection();\n\n      var node = el || this._getCurrent(sel);\n\n      if (node) {\n        node = this.dom(node).get();\n\n        while (node) {\n          if (node.nodeType === 1 && node.getAttribute('data-' + this.prefix + '-type')) {\n            return this.dom(node);\n          }\n\n          node = node.parentNode;\n        }\n      }\n\n      return this.dom();\n    },\n    getBlock: function getBlock(el) {\n      return this._getElement(el, 'block');\n    },\n    getText: function getText(type, num) {\n      var sel = this.get();\n      var text = false;\n      if (!sel.selection) return false;\n\n      if (type && sel.range) {\n        num = typeof num === 'undefined' ? 1 : num;\n        var el = this.app.editor.getLayout().get();\n        var cloned = sel.range.cloneRange();\n\n        if (type === 'before') {\n          cloned.collapse(true);\n          cloned.setStart(el, 0);\n          text = cloned.toString().slice(-num);\n        } else if (type === 'after') {\n          cloned.selectNodeContents(el);\n          cloned.setStart(sel.range.endContainer, sel.range.endOffset);\n          text = cloned.toString().slice(0, num);\n        }\n      } else {\n        text = sel.selection ? sel.selection.toString() : '';\n      }\n\n      return text;\n    },\n    getHtml: function getHtml() {\n      var html = '';\n      var sel = this.get();\n\n      if (sel.selection) {\n        var cloned = sel.range.cloneContents();\n        var div = document.createElement('div');\n        div.appendChild(cloned);\n        html = div.innerHTML;\n        html = html.replace(/<p><\\/p>$/i, '');\n      }\n\n      return html;\n    },\n    getPosition: function getPosition() {\n      var range = this.getRange();\n      var pos = {\n        top: 0,\n        left: 0,\n        width: 0,\n        height: 0\n      };\n\n      if (this.win.getSelection && range.getBoundingClientRect) {\n        range = range.cloneRange();\n        var offset = range.startOffset - 1;\n        range.setStart(range.startContainer, offset < 0 ? 0 : offset);\n        var rect = range.getBoundingClientRect();\n        pos = {\n          top: rect.top,\n          left: rect.left,\n          width: rect.right - rect.left,\n          height: rect.bottom - rect.top\n        };\n      }\n\n      return pos;\n    },\n    // set\n    set: function set(sel, range) {\n      if (sel) {\n        sel.removeAllRanges();\n        sel.addRange(range);\n      }\n    },\n    setRange: function setRange(range) {\n      this.set(this.win.getSelection(), range);\n    },\n    // is\n    is: function is(el) {\n      if (typeof el !== 'undefined') {\n        var node = this.dom(el).get();\n        var nodes = this.getNodes();\n\n        for (var i = 0; i < nodes.length; i++) {\n          if (nodes[i] === node) return true;\n        }\n      } else {\n        return this.get().selection;\n      }\n\n      return false;\n    },\n    isCollapsed: function isCollapsed() {\n      var sel = this.get();\n      return this._getCollapsed(sel.selection, sel.range);\n    },\n    isIn: function isIn(el) {\n      var node = this.dom(el).get();\n      var current = this.getCurrent();\n      return current && node ? node.contains(current) : false;\n    },\n    isAll: function isAll(el) {\n      var node = this.dom(el).get();\n      var selection = this.win.getSelection();\n\n      var range = this._getRange(selection);\n\n      if (selection.isCollapsed) return false;\n\n      if (this.is(node)) {\n        return typeof node.textContent !== 'undefined' && node.textContent.trim().length === range.toString().trim().length;\n      } else {\n        return false;\n      }\n    },\n    // select\n    select: function select(el) {\n      var node = this.dom(el).get();\n      var range = this.doc.createRange();\n      range.selectNodeContents(node);\n      this.setRange(range);\n    },\n    // remove\n    removeAllRanges: function removeAllRanges() {\n      var sel = this._getSelection();\n\n      if (sel) {\n        sel.removeAllRanges();\n      }\n    },\n    // delete\n    deleteContents: function deleteContents() {\n      var range = this.getRange();\n\n      if (!this.isCollapsed() && range) {\n        range.deleteContents();\n      }\n    },\n    // collapse\n    collapse: function collapse(type) {\n      type = type || 'start';\n      var sel = this.get();\n\n      if (sel.selection && !sel.collapsed) {\n        if (type === 'start') sel.selection.collapseToStart();else sel.selection.collapseToEnd();\n      }\n    },\n    // save & restore\n    save: function save(el) {\n      if (!el) {\n        var instance = this.app.block.get();\n\n        if (instance) {\n          el = instance.getBlock();\n        }\n      }\n\n      this.savedSelection = {\n        el: el,\n        offset: this.app.offset.get(el)\n      };\n    },\n    restore: function restore() {\n      if (this.savedMarker) return;\n      if (!this.savedSelection) return;\n      this.app.editor.getWinNode().focus();\n      var el = this.savedSelection.el;\n      var instance = this.dom(el).dataget('instance');\n\n      if (instance) {\n        this.app.block.set(el);\n      }\n\n      if (el) {\n        el.focus();\n        this.app.offset.set(el, this.savedSelection.offset);\n      }\n\n      this.savedSelection = false;\n    },\n    saveMarker: function saveMarker() {\n      this.savedMarker = true;\n      this.app.marker.insert();\n    },\n    restoreMarker: function restoreMarker() {\n      this.app.marker.restore();\n      this.savedMarker = false;\n      this.savedSelection = false;\n    },\n    // private\n    _getSelection: function _getSelection() {\n      var sel = this.win.getSelection();\n      return sel.rangeCount > 0 ? sel : false;\n    },\n    _getRange: function _getRange(selection) {\n      return selection ? selection.rangeCount > 0 ? selection.getRangeAt(0) : false : false;\n    },\n    _getCurrent: function _getCurrent(selection) {\n      return selection ? selection.anchorNode : false;\n    },\n    _getParent: function _getParent(current) {\n      return current ? current.parentNode : false;\n    },\n    _getElement: function _getElement(el, type) {\n      var sel = this._getSelection();\n\n      if (sel) {\n        var node = el || this._getCurrent(sel);\n\n        node = this.dom(node).get();\n\n        while (node) {\n          if (this.app.element.is(node, type)) {\n            return node;\n          }\n\n          node = node.parentNode;\n        }\n      }\n\n      return false;\n    },\n    _getCollapsed: function _getCollapsed(selection, range) {\n      var collapsed = false;\n      if (selection && selection.isCollapsed) collapsed = true;else if (range && range.toString().length === 0) collapsed = true;\n      return collapsed;\n    },\n    _getNextNode: function _getNextNode(node) {\n      if (node.firstChild) return node.firstChild;\n\n      while (node) {\n        if (node.nextSibling) return node.nextSibling;\n        node = node.parentNode;\n      }\n    },\n    _getRangeNodes: function _getRangeNodes(range, all) {\n      var start = range.startContainer.childNodes[range.startOffset] || range.startContainer;\n      var end = range.endContainer.childNodes[range.endOffset] || range.endContainer;\n      var commonAncestor = range.commonAncestorContainer;\n      var nodes = [];\n      var node;\n\n      if (all) {\n        if (!this.app.editor.isLayout(start)) {\n          nodes.push(start);\n        }\n\n        for (node = start.parentNode; node; node = node.parentNode) {\n          if (this.app.editor.isLayout(node)) break;\n          nodes.push(node);\n          if (node === commonAncestor) break;\n        }\n\n        nodes.reverse();\n\n        for (node = start; node; node = this._getNextNode(node)) {\n          if (node.nodeType !== 3 && this.dom(node.parentNode).closest(commonAncestor).length === 0) break;\n          nodes.push(node);\n          if (node === end) break;\n        }\n      } else {\n        // push first element\n        if (start.nodeType === 3) {\n          nodes.push(this.getBlock());\n        }\n\n        for (node = start; node; node = this._getNextNode(node)) {\n          if (node === commonAncestor) break;\n          if (node.nodeType !== 3 && this.dom(node.parentNode).closest(commonAncestor).length === 0) break;\n          nodes.push(node);\n          if (node === end) break;\n        }\n      }\n\n      return nodes;\n    },\n    _getAllRangeNodes: function _getAllRangeNodes(range) {\n      return this._getRangeNodes(range, true);\n    },\n    _filterNodes: function _filterNodes(nodes, range, isInline, data) {\n      var selected = this.getText();\n      selected = selected.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\n      var finalNodes = [];\n\n      for (var i = 0; i < nodes.length; i++) {\n        var push = true;\n\n        if (data) {\n          push = data.types ? this._filterByTypes(push, data, nodes[i]) : push;\n          push = data.selected ? this._filterBySelected(push, data, nodes[i], range, selected) : push;\n          push = data.type ? this._filterByType(push, data, nodes[i], isInline) : push;\n          push = data.tags ? this._filterByTags(push, data, nodes[i]) : push;\n        }\n\n        if (push) {\n          finalNodes.push(nodes[i]);\n        }\n      }\n\n      return finalNodes;\n    },\n    _filterByTypes: function _filterByTypes(push, data, node) {\n      var type;\n\n      if (data.types === true) {\n        type = this.app.element.getType(node);\n\n        if (!type) {\n          push = false;\n        }\n      } else {\n        type = this.app.element.getType(node);\n\n        if (data.types.indexOf(type) === -1) {\n          push = false;\n        }\n      }\n\n      return push;\n    },\n    _filterByType: function _filterByType(push, data, node, isInline) {\n      if (isInline) {\n        if (data.links) {\n          if (!this.app.element.is(node, data.type)) {\n            push = false;\n          }\n        } else {\n          if (node.nodeType === 1 && node.tagName === 'A' || !this.app.element.is(node, data.type)) {\n            push = false;\n          }\n        }\n      } else if (!this.app.element.is(node, data.type)) {\n        push = false;\n      }\n\n      return push;\n    },\n    _filterByTags: function _filterByTags(push, data, node) {\n      var isTagName = typeof node.tagName !== 'undefined';\n\n      if (!isTagName) {\n        push = false;\n      } else if (isTagName && data.tags.indexOf(node.tagName.toLowerCase()) === -1) {\n        push = false;\n      }\n\n      return push;\n    },\n    _filterBySelected: function _filterBySelected(push, data, node, range, selected) {\n      if (data.selected === true && !this._containsNodeText(range, node)) {\n        push = false;\n      } else if (data.selected === 'inside') {\n        if (node.nodeType === 1 && node.tagName === 'A') {\n          push = true;\n        } else if (!this._isTextSelected(node, selected)) {\n          push = false;\n        }\n      }\n\n      return push;\n    },\n    _isTextSelected: function _isTextSelected(node, selected) {\n      var text = this.app.utils.removeInvisibleChars(node.textContent);\n      return selected === text || text.search(selected) !== -1 || selected.search(new RegExp('^' + this.app.utils.escapeRegExp(text) + '$')) !== -1;\n    },\n    _containsNodeText: function _containsNodeText(range, node) {\n      var treeWalker = this.doc.createTreeWalker(node, NodeFilter.SHOW_TEXT, {\n        acceptNode: function acceptNode(node) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n      }, false);\n      var first, last, textNode;\n\n      while (textNode = treeWalker.nextNode()) {\n        if (!first) {\n          first = textNode;\n        }\n\n        last = textNode;\n      }\n\n      var nodeRange = range.cloneRange();\n\n      if (first) {\n        nodeRange.setStart(first, 0);\n        nodeRange.setEnd(last, last.length);\n      } else {\n        nodeRange.selectNodeContents(node);\n      }\n\n      return range.compareBoundaryPoints(Range.START_TO_START, nodeRange) < 1 && range.compareBoundaryPoints(Range.END_TO_END, nodeRange) > -1;\n    }\n  });\n  ArticleEditor.add('module', 'caret', {\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    set: function set(el, type) {\n      var node = this.dom(el).get();\n      if (!node) return;\n\n      this._apply(node, type);\n    },\n    is: function is(el, type, removeblocks, trimmed) {\n      var node = this.dom(el).get();\n      if (!node) return false;\n      var sel = this.doc.getSelection();\n      if (!sel.isCollapsed) return false;\n\n      var position = this._position(node, trimmed);\n\n      var size = this._size(node, removeblocks, trimmed);\n\n      if (type === 'end') {\n        return position === size;\n      } else if (type === 'start') {\n        return position === 0;\n      }\n\n      return false;\n    },\n    // private\n    _apply: function _apply(node, type) {\n      if (!this._isInPage(node)) return; // focus\n\n      this.app.editor.getWin().focus(); // range\n\n      var range = this.doc.createRange();\n      var tag = node.nodeType !== 3 ? node.tagName.toLowerCase() : false; // non editable inline node\n\n      if (this.app.element.is(node, 'inline') && this._isNon(node)) {\n        if (type === 'start') type = 'before';else if (type === 'end') type = 'after';\n      }\n\n      if (type === 'start') {\n        range.setStart(node, 0);\n        range.collapse(true);\n\n        var inline = this._getInlineInside(node);\n\n        if (inline) {\n          var inlines = this.app.element.getAllInlines(inline);\n          node = inlines[0];\n          range.selectNodeContents(node);\n          range.collapse(true);\n        }\n\n        if (this.app.element.is(node, 'inline')) {\n          this._insertInvisibleNode(range);\n        }\n      } else if (type === 'end') {\n        var set;\n        var last = node.nodeType === 1 ? node.lastChild : false;\n        var lastInline = last && this.app.element.is(last, 'inline');\n\n        if (lastInline && this._isNon(last)) {\n          set = true;\n          range.setStartAfter(last);\n          range.collapse(true); // set after\n\n          this._insertInvisibleNode(range);\n        } else if (lastInline) {\n          node = last;\n        }\n\n        if (set !== true) {\n          range.selectNodeContents(node);\n          range.collapse(false);\n        }\n      } else if (type === 'before') {\n        range.setStartBefore(node);\n        range.collapse(true);\n\n        if (this.app.element.is(node, 'inline')) {\n          this._insertInvisibleNode(range, node);\n        }\n      } else if (type === 'after') {\n        range.setStartAfter(node);\n        range.collapse(true);\n\n        if (this.app.element.is(node, 'inline') || tag === 'br' || tag === 'svg') {\n          this._insertInvisibleNode(range);\n        }\n      } // set range\n\n\n      var sel = this.win.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n    },\n    _insertInvisibleNode: function _insertInvisibleNode(range, before) {\n      var textNode = this.app.utils.createInvisibleChar();\n\n      if (before) {\n        before.parentNode.insertBefore(textNode, before);\n      } else {\n        range.insertNode(textNode);\n      }\n\n      range.selectNodeContents(textNode);\n      range.collapse(false);\n      return textNode;\n    },\n    _getInlineInside: function _getInlineInside(node) {\n      var inline = node.firstChild;\n\n      if (this.app.element.is(inline, 'inline')) {\n        var inlineInside = inline.firstChild;\n\n        while (inlineInside) {\n          if (this.app.element.is(inlineInside, 'inline')) {\n            return inlineInside;\n          }\n\n          inlineInside = inlineInside.firstChild;\n        }\n\n        return inline;\n      }\n    },\n    _size: function _size(node, removeblocks, trimmed) {\n      var str;\n      var isTextNode = node.nodeType === 3;\n\n      if (removeblocks && removeblocks.length !== 0) {\n        var $node = this.dom(node);\n        var $cloned = $node.clone();\n        $cloned.find(removeblocks.join(',')).remove();\n        str = $cloned.html().trim();\n      } else {\n        str = isTextNode ? node.textContent : node.innerHTML;\n        str = isTextNode || trimmed === false ? str : str.trim();\n      }\n\n      return this._trimmed(str, isTextNode, trimmed).length;\n    },\n    _position: function _position(node, trimmed) {\n      var range = this.win.getSelection().getRangeAt(0);\n      var caretRange = range.cloneRange();\n      var tmp = document.createElement(\"div\");\n      var isTextNode = node.nodeType === 3;\n      caretRange.selectNodeContents(node);\n      caretRange.setEnd(range.endContainer, range.endOffset);\n      tmp.appendChild(caretRange.cloneContents());\n      var str = isTextNode || trimmed === false ? tmp.innerHTML : tmp.innerHTML.trim();\n      var brEnd = str.search(/<\\/?br\\s?\\/?>$/g) !== -1 ? 1 : 0;\n      str = this._trimmed(str, isTextNode, trimmed);\n      return str.length + brEnd;\n    },\n    _trimmed: function _trimmed(str, isTextNode, trimmed) {\n      if (trimmed === false) {\n        str = str.replace(/\\n$/g, '');\n        return str;\n      }\n\n      str = this.app.utils.removeInvisibleChars(str);\n      str = str.replace(/<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi, '');\n      str = str.replace(/\\s+/g, ' ');\n\n      if (str !== '' && !isTextNode) {\n        str = str.replace(/\\s$/, '');\n      }\n\n      return str;\n    },\n    _isInPage: function _isInPage(node) {\n      if (node && node.nodeType) {\n        return node === this.doc.body ? false : this.doc.body.contains(node);\n      }\n\n      return false;\n    },\n    _isNon: function _isNon(node) {\n      return node.getAttribute('contenteditable') === 'false';\n    }\n  });\n  ArticleEditor.add('module', 'scroll', {\n    init: function init() {\n      this.scrolltop = false;\n    },\n    save: function save() {\n      this.scrolltop = this.getTarget().scrollTop();\n    },\n    restore: function restore() {\n      if (this.scrolltop !== false) {\n        this.getTarget().scrollTop(this.scrolltop);\n        this.scrolltop = false;\n      }\n    },\n    isTarget: function isTarget() {\n      return this.opts.editor.scrollTarget !== window;\n    },\n    getTarget: function getTarget() {\n      return this.dom(this.opts.editor.scrollTarget);\n    }\n  });\n  ArticleEditor.add('module', 'offset', {\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    get: function get(el) {\n      el = this._getEl(el);\n      var sel = this.win.getSelection();\n      var offset = false;\n\n      if (sel && sel.rangeCount > 0) {\n        var range = sel.getRangeAt(0);\n\n        if (el.contains(sel.anchorNode)) {\n          var cloned = range.cloneRange();\n          cloned.selectNodeContents(el);\n          cloned.setEnd(range.startContainer, range.startOffset);\n          var start = cloned.toString().length;\n          offset = {\n            start: start,\n            end: start + range.toString().length\n          };\n        }\n      }\n\n      return offset;\n    },\n    set: function set(el, offset) {\n      if (!offset) {\n        offset = el;\n        el = false;\n      } // el\n\n\n      el = this._getEl(el);\n      var charIndex = 0,\n          range = this.doc.createRange();\n      var nodeStack = [el],\n          node,\n          foundStart = false,\n          stop = false;\n      range.setStart(el, 0);\n      range.collapse(true);\n\n      while (!stop && (node = nodeStack.pop())) {\n        if (node.nodeType === 3) {\n          var nextCharIndex = charIndex + node.length;\n\n          if (!foundStart && offset.start >= charIndex && offset.start <= nextCharIndex) {\n            range.setStart(node, offset.start - charIndex);\n            foundStart = true;\n          }\n\n          if (foundStart && offset.end >= charIndex && offset.end <= nextCharIndex) {\n            range.setEnd(node, offset.end - charIndex);\n            stop = true;\n          }\n\n          charIndex = nextCharIndex;\n        } else {\n          var i = node.childNodes.length;\n\n          while (i--) {\n            nodeStack.push(node.childNodes[i]);\n          }\n        }\n      }\n\n      var sel = this.win.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n    },\n    // private\n    _getEl: function _getEl(el) {\n      return !el ? this.app.editor.getLayout().get() : this.dom(el).get();\n    }\n  });\n  ArticleEditor.add('module', 'input', {\n    handle: function handle(event) {\n      var e = event.get('e');\n      var key = event.get('key');\n\n      if (this._doSelectAll(e, event)) {\n        return;\n      } // events\n\n\n      if (event.is('enter') && event.is('shift')) {\n        this.handleShiftEnter(e, key, event);\n      } else if (event.is('enter')) {\n        this.handleEnter(e, key, event);\n      } else if (event.is('space') && event.is('shift')) {\n        this.handleShiftSpace(e, key, event);\n      } else if (event.is('space')) {\n        this.handleSpace(e, key, event);\n      } else if (event.is('tab') && this.opts.tab.key) {\n        this.handleTab(e, key, event);\n      } else if (event.is('arrow')) {\n        if (event.is(['shift', 'alt', 'ctrl'])) return;\n        this.handleArrow(e, key, event);\n      } else if (event.is(['delete', 'backspace'])) {\n        this.handleDelete(e, key, event);\n      }\n    },\n    // handle\n    handleDelete: function handleDelete(e, key, event) {\n      var instance = this.app.block.get();\n      var isBackspace = event.is('backspace');\n      var isDelete = event.is('delete');\n\n      if (this.app.blocks.is()) {\n        e.preventDefault();\n        this.app.blocks.removeSelected();\n        return;\n      } // trim invisible char\n\n\n      if (instance && instance.isEditable() && this._trimInvisibleChar(e, event.is('backspace') ? 'left' : 'right', isDelete)) {\n        return;\n      } // inline\n\n\n      var inline = this.app.selection.getInline();\n\n      if (inline && inline.innerHTML.length === 1) {\n        e.preventDefault();\n        inline.innerHTML = '';\n        return;\n      } // handle block\n\n\n      if (instance.handleDelete && instance.handleDelete(e, key, event)) {\n        return;\n      } // instance\n\n\n      var next = instance.getNext();\n      var prev = instance.getPrev(); // like variable\n\n      if (instance.isInlineBlock()) {\n        e.preventDefault();\n        var $block = instance.getBlock();\n        var parent = instance.getParent();\n        this.app.caret.set($block, 'after');\n        instance.remove();\n        this.app.block.set(parent);\n      } // non editable\n      else if (!instance.isEditable()) {\n          e.preventDefault();\n          instance.remove();\n\n          if (next) {\n            this.app.block.set(next, 'start');\n          } else if (prev) {\n            this.app.block.set(prev, 'end');\n          } else {\n            if (this.app.editor.isEmpty()) {\n              this.app.editor.setEmpty();\n            } else {\n              this.app.block.unset();\n            }\n          }\n        } // editable\n        else if (instance.isEditable()) {\n            var type = instance.getType(); // all block selected\n\n            if (instance.isAllSelected()) {\n              e.preventDefault();\n\n              if (type === 'card') {\n                this.app.block.remove();\n              } else {\n                instance.setEmpty();\n              }\n\n              return;\n            } // delete & end\n\n\n            if (isDelete && next && instance.isCaretEnd()) {\n              e.preventDefault();\n\n              if (next.getType() === 'card' || !next.isEditable()) {\n                this.app.block.set(next);\n              } else {\n                if (type === 'card') {\n                  return;\n                } else {\n                  instance.appendNext();\n                }\n              }\n            } // backspace & start\n            else if (isBackspace && prev && instance.isCaretStart()) {\n                e.preventDefault();\n\n                if (prev.getType() === 'card' || !prev.isEditable()) {\n                  this.app.block.set(prev);\n                } else {\n                  if (type === 'card') {\n                    return;\n                  } else {\n                    instance.appendToPrev();\n                  }\n                }\n              }\n          }\n    },\n    handleArrow: function handleArrow(e, key, event) {\n      var instance = this.app.block.get(); // multiple\n\n      if (this.app.blocks.is()) {\n        return;\n      } // editable & inline code or like variable\n\n\n      if (instance.isEditable()) {\n        var current = this.app.selection.getCurrent();\n        var inline = this.app.selection.getTopInline(); // inline code\n\n        if (event.is('left') && inline && inline.tagName === 'CODE') {\n          var offset = this.app.offset.get(inline);\n          var caretStart = this.app.caret.is(inline, 'start');\n\n          if (!caretStart && offset.start === 1 && offset.end === 1) {\n            e.preventDefault();\n            this.app.caret.set(inline, 'start');\n            return;\n          } else if (caretStart) {\n            e.preventDefault();\n            this.app.caret.set(inline, 'before');\n            return;\n          }\n        } else {\n          // variable\n          if (inline && this._catchInlineBlock(e, event, inline)) {\n            return;\n          } else if (current && this._catchInlineBlock(e, event, current)) {\n            return;\n          }\n        }\n      } // trim invisible char\n\n\n      if (instance.isEditable() && this._trimInvisibleChar(e, event.is('left') ? 'left' : 'right')) {\n        return;\n      } // handle block\n\n\n      if (instance.handleArrow && instance.handleArrow(e, key, event)) {\n        return;\n      } // like variable\n\n\n      if (instance.isInlineBlock()) {\n        e.preventDefault();\n        var $block = instance.getBlock();\n        var parent = instance.getParent();\n        var caret = event.is('up-left') ? 'before' : 'after';\n        this.app.caret.set($block, caret);\n        this.app.block.set(parent);\n      } else {\n        // editable & non editable\n        var target;\n\n        if (event.is('up-left') && instance.isCaretStart()) {\n          caret = 'end';\n          target = instance.getPrev();\n        } else if (event.is('down-right') && instance.isCaretEnd()) {\n          caret = 'start';\n          target = instance.getNext();\n        }\n\n        if (target) {\n          e.preventDefault();\n          this.app.block.set(target, caret);\n        }\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      var instance = this.app.block.get(); // multiple\n\n      if (this.app.blocks.is()) {\n        e.preventDefault();\n        return;\n      } // handle block tab\n\n\n      if (instance.handleTab && instance.handleTab(e, key, event)) {\n        return;\n      } // tab as spaces\n\n\n      if (this.opts.tab.spaces && instance.isEditable()) {\n        e.preventDefault();\n        var num = this.opts.tab.spaces;\n        var node = document.createTextNode(Array(num + 1).join(\"\\xA0\"));\n        this.app.insertion.insertNode(node, 'end');\n        return;\n      } // like variable\n      else if (instance.isInlineBlock()) {\n          e.preventDefault();\n          var $block = instance.getBlock();\n          var parent = instance.getParent();\n          this.app.caret.set($block, 'after');\n          this.app.block.set(parent);\n        } else {\n          e.preventDefault();\n          var next = instance.getNext();\n\n          if (next) {\n            this.app.block.set(next, 'start');\n          }\n        }\n    },\n    handleShiftSpace: function handleShiftSpace(e, key, event) {\n      var instance = this.app.block.get(); // multiple\n\n      if (this.app.blocks.is()) return; // instance\n\n      var $block = instance.getBlock(); // editable\n\n      if (instance.isEditable()) {\n        // selected all\n        if (instance.isAllSelected()) {\n          instance.setEmpty();\n          return;\n        } else {\n          if (instance.getType() !== 'code') {\n            e.preventDefault();\n            this.app.insertion.insertHtml('&nbsp;', 'end');\n          }\n        }\n      } // like variable\n      else if (instance.isInlineBlock()) {\n          e.preventDefault();\n          var parent = instance.getParent();\n          this.app.caret.set($block, 'after');\n          instance.remove();\n          this.app.block.set(parent);\n          this.app.insertion.insertHtml('&nbsp;', 'end');\n        } // emptiable\n        else if (instance.isEmptiable() && instance.isEmpty()) {\n            e.preventDefault();\n            $block.removeClass(this.prefix + '-empty-layer');\n            $block.html('');\n            instance.insertEmpty({\n              position: 'append',\n              caret: 'start'\n            });\n          }\n    },\n    handleSpace: function handleSpace(e, key, event) {\n      var instance = this.app.block.get(); // multiple\n\n      if (this.app.blocks.is()) {\n        e.preventDefault();\n        var last = this.app.blocks.getLastSelected();\n        last.insertEmpty({\n          position: 'after',\n          caret: 'start'\n        });\n        this.app.blocks.removeSelected(false);\n        return;\n      } // instance\n\n\n      var $block = instance.getBlock();\n      var type = instance.getType(); // handle block space\n\n      if (instance.handleSpace && instance.handleSpace(e, key, event)) {\n        return;\n      } // do nothing\n\n\n      if (type === 'row') {\n        e.preventDefault();\n        return;\n      } // editable\n      else if (instance.isEditable() && instance.isAllSelected()) {\n          instance.setEmpty();\n          return;\n        } // like variable\n        else if (instance.isInlineBlock()) {\n            e.preventDefault();\n            var parent = instance.getParent();\n            this.app.caret.set($block, 'after');\n            instance.remove();\n            this.app.block.set(parent);\n            this.app.insertion.insertHtml('&nbsp;', 'end');\n          } // emptiable\n          else if (instance.isEmptiable() && instance.isEmpty()) {\n              e.preventDefault();\n              $block.removeClass(this.prefix + '-empty-layer');\n              $block.html('');\n              instance.insertEmpty({\n                position: 'append',\n                caret: 'start'\n              });\n            } // non editable\n            else if (!instance.isEditable()) {\n                e.preventDefault();\n                instance.insertEmpty({\n                  position: 'after',\n                  caret: 'start'\n                });\n                instance.remove();\n                this.app.control.updatePosition();\n              }\n    },\n    handleShiftEnter: function handleShiftEnter(e, key, event) {\n      var instance = this.app.block.get();\n      var type = instance.getType();\n      var $block = instance.getBlock();\n\n      if (this.app.blocks.is() || type === 'row') {\n        e.preventDefault();\n      } // like variable\n      else if (instance.isInlineBlock()) {\n          e.preventDefault();\n          var parent = instance.getParent();\n          this.app.caret.set($block, 'after');\n          instance.remove();\n          this.app.block.set(parent);\n          this.app.insertion.insertBreakline();\n        } // editable\n        else if (instance.isEditable()) {\n            e.preventDefault();\n            this.app.insertion.insertBreakline();\n          } // non editable\n          else {\n              e.preventDefault();\n              var position = 'after';\n\n              if (instance.isEmptiable() && instance.isEmpty()) {\n                position = 'append';\n                $block.removeClass(this.prefix + '-empty-layer');\n                $block.html('');\n              }\n\n              instance.insertEmpty({\n                position: position,\n                caret: 'start'\n              });\n            }\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      var instance = this.app.block.get(); // blocks\n\n      if (this.app.blocks.is()) {\n        e.preventDefault();\n        var last = this.app.blocks.getLastSelected();\n        last.insertEmpty({\n          position: 'after',\n          caret: 'start'\n        });\n        return;\n      } // instance\n\n\n      var $block = instance.getBlock(); // editable\n\n      if (instance.isEditable()) {\n        // all block selected\n        if (instance.isAllSelected()) {\n          e.preventDefault();\n          instance.setEmpty();\n          return;\n        } // partial selected\n        else if (!this.app.selection.isCollapsed()) {\n            e.preventDefault();\n\n            if (instance.getType() === 'code') {\n              this.app.insertion.insertNewline();\n            } else {\n              this.app.insertion.insertBreakline();\n            }\n\n            return;\n          }\n      } // like variable\n\n\n      if (instance.isInlineBlock()) {\n        e.preventDefault();\n        var parent = instance.getParent();\n        this.app.caret.set($block, 'after');\n        instance.remove();\n        this.app.block.set(parent);\n      } // emptiable\n      else if (instance.isEmptiable() && instance.isEmpty()) {\n          e.preventDefault();\n          $block.removeClass(this.prefix + '-empty-layer');\n          $block.html('');\n          instance.insertEmpty({\n            position: 'append',\n            caret: 'start'\n          });\n        } // non editable\n        else if (!instance.isEditable()) {\n            e.preventDefault();\n            instance.insertEmpty({\n              position: 'after',\n              caret: 'start'\n            });\n          } // handle block enter\n\n\n      if (instance.handleEnter) {\n        instance.handleEnter(e, key, event);\n      } // ui\n\n\n      this.app.control.updatePosition();\n    },\n    handleTextareaTab: function handleTextareaTab(e) {\n      if (e.keyCode !== 9) return true;\n      e.preventDefault();\n      var el = e.target;\n      var val = el.value;\n      var start = el.selectionStart;\n      el.value = val.substring(0, start) + \"    \" + val.substring(el.selectionEnd);\n      el.selectionStart = el.selectionEnd = start + 4;\n    },\n    // private\n    _isNextBlock: function _isNextBlock(event, node) {\n      return event.is('right') && this.app.caret.is(node, 'end') && this.app.element.getType(node.nextSibling);\n    },\n    _isPrevBlock: function _isPrevBlock(event, node) {\n      return event.is('left') && this.app.caret.is(node, 'start') && this.app.element.getType(node.previousSibling);\n    },\n    _isSiblingInlineBlock: function _isSiblingInlineBlock(e, node) {\n      var $el = this.dom(node);\n      var instance = $el.dataget('instance');\n\n      if (instance && instance.isInlineBlock()) {\n        e.preventDefault();\n        this.app.block.set(instance);\n        return true;\n      }\n    },\n    _isInvisibleChar: function _isInvisibleChar(direction) {\n      var sel = this.app.selection.get();\n      var text = this.app.selection.getText(direction);\n      return sel.current && sel.current.nodeType === 3 && this.app.utils.searchInvisibleChars(text) === 0;\n    },\n    _catchInlineBlock: function _catchInlineBlock(e, event, node) {\n      if (event.is('left') && node.nodeType === 3) {\n        var str = node.textContent;\n        var isChar = this.app.utils.searchInvisibleChars(str) !== -1;\n\n        if (isChar) {\n          var charnode = node;\n\n          if (this._isSiblingInlineBlock(e, node.previousSibling)) {\n            charnode.parentNode.removeChild(charnode);\n            return true;\n          }\n        }\n      }\n\n      if (this._isPrevBlock(event, node)) {\n        if (this._isSiblingInlineBlock(e, node.previousSibling)) return true;\n      } else if (this._isNextBlock(event, node)) {\n        if (this._isSiblingInlineBlock(e, node.nextSibling)) return true;\n      }\n    },\n    _trimInvisibleChar: function _trimInvisibleChar(e, pointer, remove) {\n      var direction = pointer === 'left' ? 'before' : 'after';\n      var sel = this.app.selection.get();\n\n      var isChar = this._isInvisibleChar(direction);\n\n      var el;\n\n      if (isChar && pointer === 'left') {\n        el = sel.current;\n        this.dom(el).replaceWith(el.textContent.replace(/\\s+$/, \"\"));\n      } else if (isChar && remove && sel.current && sel.current.nextSibling) {\n        el = sel.current.nextSibling;\n        this.dom(el).replaceWith(el.textContent.replace(/^\\s+/, \"\"));\n      } else if (isChar && pointer === 'right') {\n        e.preventDefault();\n        var data = this.app.offset.get();\n        this.app.offset.set({\n          start: data.start + 1,\n          end: data.end + 1\n        });\n        return true;\n      }\n    },\n    _doSelectAll: function _doSelectAll(e, event) {\n      var instance = this.app.block.get(); // if select all & action key - make empty\n\n      if (this._isAllSelected(event)) {\n        this._setEditorEmpty(e, event);\n\n        return true;\n      } // select all\n\n\n      if (event.is('select')) {\n        e.preventDefault();\n\n        if (!this.app.blocks.is() && instance) {\n          if (instance.isAllSelected()) {\n            this.app.editor.selectAll();\n          } else {\n            instance.setSelectAll();\n          }\n        } else {\n          this.app.editor.selectAll();\n        }\n\n        return true;\n      }\n    },\n    _isAllSelected: function _isAllSelected(event) {\n      return this.app.editor.isAllSelected() && event.is(['enter', 'delete', 'backspace', 'alpha', 'space']);\n    },\n    _setEditorEmpty: function _setEditorEmpty(e, event) {\n      if (!event.is(['alpha', 'space'])) e.preventDefault();\n      this.app.editor.setEmpty();\n    }\n  });\n  ArticleEditor.add('module', 'shortcut', {\n    init: function init() {\n      // local\n      this.shortcuts = this.opts.shortcuts; // based on https://github.com/jeresig/jquery.hotkeys\n\n      this.hotkeys = {\n        8: \"backspace\",\n        9: \"tab\",\n        10: \"return\",\n        13: \"return\",\n        16: \"shift\",\n        17: \"ctrl\",\n        18: \"alt\",\n        19: \"pause\",\n        20: \"capslock\",\n        27: \"esc\",\n        32: \"space\",\n        33: \"pageup\",\n        34: \"pagedown\",\n        35: \"end\",\n        36: \"home\",\n        37: \"left\",\n        38: \"up\",\n        39: \"right\",\n        40: \"down\",\n        45: \"insert\",\n        46: \"del\",\n        59: \";\",\n        61: \"=\",\n        96: \"0\",\n        97: \"1\",\n        98: \"2\",\n        99: \"3\",\n        100: \"4\",\n        101: \"5\",\n        102: \"6\",\n        103: \"7\",\n        104: \"8\",\n        105: \"9\",\n        106: \"*\",\n        107: \"+\",\n        109: \"-\",\n        110: \".\",\n        111: \"/\",\n        112: \"f1\",\n        113: \"f2\",\n        114: \"f3\",\n        115: \"f4\",\n        116: \"f5\",\n        117: \"f6\",\n        118: \"f7\",\n        119: \"f8\",\n        120: \"f9\",\n        121: \"f10\",\n        122: \"f11\",\n        123: \"f12\",\n        144: \"numlock\",\n        145: \"scroll\",\n        173: \"-\",\n        186: \";\",\n        187: \"=\",\n        188: \",\",\n        189: \"-\",\n        190: \".\",\n        191: \"/\",\n        192: \"`\",\n        219: \"[\",\n        220: \"\\\\\",\n        221: \"]\",\n        222: \"'\"\n      };\n      this.hotkeysShiftNums = {\n        \"`\": \"~\",\n        \"1\": \"!\",\n        \"2\": \"@\",\n        \"3\": \"#\",\n        \"4\": \"$\",\n        \"5\": \"%\",\n        \"6\": \"^\",\n        \"7\": \"&\",\n        \"8\": \"*\",\n        \"9\": \"(\",\n        \"0\": \")\",\n        \"-\": \"_\",\n        \"=\": \"+\",\n        \";\": \": \",\n        \"'\": \"\\\"\",\n        \",\": \"<\",\n        \".\": \">\",\n        \"/\": \"?\",\n        \"\\\\\": \"|\"\n      };\n\n      if (this.opts.selection.multiple === false) {\n        this.remove('meta+click');\n      }\n    },\n    add: function add(keys, obj) {\n      this.shortcuts[keys] = obj;\n    },\n    remove: function remove(keys) {\n      this.opts.shortcutsBase = this._remove(keys, this.opts.shortcutsBase);\n      this.opts.shortcuts = this._remove(keys, this.opts.shortcuts);\n    },\n    handle: function handle(e) {\n      this.triggered = false; // disable browser's hot keys for bold and italic if shortcuts off\n\n      if (this.shortcuts === false) {\n        if ((e.ctrlKey || e.metaKey) && (e.which === 66 || e.which === 73)) {\n          e.preventDefault();\n        }\n\n        return true;\n      } // build\n\n\n      if (e.ctrlKey || e.metaKey || e.shoftKey || e.altKey) {\n        for (var key in this.shortcuts) {\n          this._build(e, key, this.shortcuts[key]);\n        }\n      }\n\n      return this.triggered;\n    },\n    observe: function observe(obj, name) {\n      return this.opts.topbar.shortcuts ? obj : false;\n    },\n    popup: function popup(params, button) {\n      var meta = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform) ? '<b>&#8984;</b>' : 'ctrl';\n      var items = {};\n      var z = 0; // items\n\n      this._buildPopupItems(items, z, this.opts.shortcutsBase, meta, 'base');\n\n      this._buildPopupItems(items, z, this.opts.shortcuts, meta); // create\n\n\n      this.app.popup.create('shortcuts', {\n        width: '360px',\n        items: items\n      }); // open\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    // private\n    _buildPopupItems: function _buildPopupItems(items, z, shortcuts, meta, type) {\n      for (var key in shortcuts) {\n        var $item = this.dom('<div>').addClass(this.prefix + '-popup-shortcut-item');\n        var title = type === 'base' ? shortcuts[key] : shortcuts[key].title;\n        var $title = this.dom('<span>').addClass(this.prefix + '-popup-shortcut-title').html(this.lang.parse(title));\n        var $kbd = this.dom('<span>').addClass(this.prefix + '-popup-shortcut-kbd');\n        var name = type === 'base' ? key.replace('meta', meta) : shortcuts[key].name.replace('meta', meta);\n        var arr = name.split('+');\n\n        for (var i = 0; i < arr.length; i++) {\n          arr[i] = '<span>' + arr[i] + '</span>';\n        }\n\n        $kbd.html(arr.join('+'));\n        $item.append($title);\n        $item.append($kbd);\n        items[z] = {\n          html: $item\n        };\n        z++;\n      }\n    },\n    _build: function _build(e, str, obj) {\n      var keys = str.split(',');\n      var len = keys.length;\n\n      for (var i = 0; i < len; i++) {\n        if (typeof keys[i] === 'string' && !obj.hasOwnProperty('trigger')) {\n          this._handler(e, keys[i].trim(), obj);\n        }\n      }\n    },\n    _handler: function _handler(e, keys, obj) {\n      keys = keys.toLowerCase().split(\" \");\n      var special = this.hotkeys[e.keyCode];\n      var character = e.which !== 91 ? String.fromCharCode(e.which).toLowerCase() : false;\n      var modif = \"\",\n          possible = {};\n      var cmdKeys = [\"meta\", \"ctrl\", \"alt\", \"shift\"];\n\n      for (var i = 0; i < cmdKeys.length; i++) {\n        var specialKey = cmdKeys[i];\n\n        if (e[specialKey + 'Key'] && special !== specialKey) {\n          modif += specialKey + '+';\n        }\n      } // right cmd\n\n\n      if (e.keyCode === 93) {\n        modif += 'meta+';\n      }\n\n      if (special) possible[modif + special] = true;\n\n      if (character) {\n        possible[modif + character] = true;\n        possible[modif + this.hotkeysShiftNums[character]] = true; // \"$\" can be triggered as \"Shift+4\" or \"Shift+$\" or just \"$\"\n\n        if (modif === \"shift+\") {\n          possible[this.hotkeysShiftNums[character]] = true;\n        }\n      }\n\n      var len = keys.length;\n\n      for (var z = 0; z < len; z++) {\n        if (possible[keys[z]]) {\n          e.preventDefault();\n          this.triggered = true;\n          this.app.api(obj.command, obj.params, e);\n          return;\n        }\n      }\n    },\n    _remove: function _remove(keys, obj) {\n      return Object.keys(obj).reduce(function (object, key) {\n        if (key !== keys) {\n          object[key] = obj[key];\n        }\n\n        ;\n        return object;\n      }, {});\n    }\n  });\n  ArticleEditor.add('module', 'toolbar', {\n    init: function init() {\n      // local\n      this.activeClass = 'active';\n      this.toggledClass = 'toggled';\n      this.disableClass = 'disable';\n      this.customButtons = {};\n      this.aTags = {};\n      this.aTypes = {};\n    },\n    start: function start() {\n      if (this.opts.toolbar) {\n        this.sticky = this.opts.toolbar;\n      } else if (this.opts.path && this.opts.path.sticky) {\n        this.sticky = this.opts.path;\n      }\n\n      if (this._isToolbar()) {\n        this.$container = this.app.container.get('toolbar');\n\n        this._build();\n      }\n\n      this._buildSticky();\n    },\n    load: function load() {\n      this._buildActiveButtons();\n\n      if (this._isToolbar()) {\n        this.$toolbar.html('');\n\n        this._buildButtons();\n      }\n    },\n    stop: function stop() {\n      this.$toolbar.remove();\n      this.customButtons = {};\n      this.editorButtons = {};\n    },\n    build: function build() {\n      if (!this._isToolbar()) return;\n      this.$toolbar.html('');\n\n      this._buildButtons();\n    },\n    observe: function observe() {\n      if (!this._isToolbar()) return;\n      this.unsetActive();\n      if (this.app.blocks.is() || this.app.editor.isAllSelected()) return;\n      if (!this._isObserveButtons()) return;\n      var instance = this.app.block.get();\n      var type = instance ? instance.getType() : false;\n      var tag = instance ? instance.getTag() : false;\n      var inlines = this.app.selection.getNodes({\n        type: 'inline',\n        selected: 'inside',\n        links: true\n      });\n\n      var tags = this._getObservedTags(tag, inlines);\n\n      var buttons = [];\n      var keys; // tags\n\n      for (var i = 0; i < tags.length; i++) {\n        keys = this.aTags[tags[i]];\n\n        if (keys) {\n          buttons = buttons.concat(keys);\n        }\n      } // types\n\n\n      if (type) {\n        keys = this.aTypes[type];\n\n        if (keys) {\n          buttons = buttons.concat(keys);\n        }\n      } // set active\n\n\n      this._setActiveKeys(buttons);\n    },\n    // public\n    getElement: function getElement() {\n      return this.$toolbar;\n    },\n    get: function get(name) {\n      return this._findButton(name);\n    },\n    add: function add(name, obj) {\n      this.customButtons[name] = obj;\n    },\n    setActive: function setActive(name) {\n      if (!this._isToolbar()) return;\n\n      this._findButtons().removeClass(this.activeClass);\n\n      this._findButton(name).removeClass(this.disableClass).addClass(this.activeClass);\n    },\n    setToggled: function setToggled(name) {\n      if (!this._isToolbar()) return;\n\n      this._findButtons().removeClass(this.toggledClass);\n\n      this._findButton(name).removeClass(this.disableClass).addClass(this.toggledClass);\n    },\n    unsetActive: function unsetActive(name) {\n      if (!this._isToolbar()) return;\n      var $elms = name ? this._findButton(name) : this._findButtons();\n      $elms.removeClass(this.activeClass);\n    },\n    unsetToggled: function unsetToggled(name) {\n      if (!this._isToolbar()) return;\n      var $elms = name ? this._findButton(name) : this._findButtons();\n      $elms.removeClass(this.toggledClass);\n    },\n    enable: function enable() {\n      if (!this._isToolbar()) return;\n\n      this._findButtons().removeClass(this.disableClass);\n    },\n    disable: function disable(except) {\n      if (!this._isToolbar()) return;\n\n      this._findButtons().removeClass(this.toggledClass).removeClass(this.activeClass).addClass(this.disableClass);\n    },\n    disableSticky: function disableSticky() {\n      if (!this._isToolbar()) return;\n      var $container = this.app.container.get('bars');\n      $container.removeClass(this.prefix + '-bars-sticky');\n      $container.css('top', '');\n    },\n    enableSticky: function enableSticky() {\n      if (!this._isToolbar()) return;\n\n      if (this.opts.toolbar.sticky) {\n        var $container = this.app.container.get('bars');\n        $container.addClass(this.prefix + '-bars-sticky');\n        $container.css('top', this.opts.toolbar.stickyTopOffset + 'px');\n      }\n    },\n    isSticky: function isSticky() {\n      var $container = this.app.container.get('bars');\n      var $main = this.app.container.get('main');\n      var mainTop = $main.offset().top + parseInt($main.css('border-top-width'));\n      var containerTop = $container.offset().top;\n      return containerTop > mainTop || containerTop < mainTop;\n    },\n    // private\n    _build: function _build() {\n      this.$toolbar = this.dom('<div>').addClass(this.prefix + '-toolbar');\n      this.$container.append(this.$toolbar);\n      this.app.container.get('bars').addClass('has-toolbar');\n    },\n    _buildSticky: function _buildSticky() {\n      if (this.sticky) {\n        var $container = this.app.container.get('bars');\n        $container.addClass(this.prefix + '-bars-sticky');\n        $container.css('top', this.sticky.stickyTopOffset + 'px');\n        var $scrollTarget = this.app.scroll.getTarget();\n        $scrollTarget.on('scroll.' + this.prefix + '-toolbar', this._observeSticky.bind(this));\n      }\n    },\n    _buildActiveButtons: function _buildActiveButtons() {\n      this.aTags = this.opts.buttons.tags ? this.opts.buttons.tags : {};\n      this.aTypes = this.opts.buttons.types ? this.opts.buttons.types : {};\n      var btns = this.customButtons;\n\n      for (var key in btns) {\n        var active = btns[key].active;\n\n        if (active) {\n          this._buildActiveButton(key, active.tags, this.aTags);\n\n          this._buildActiveButton(key, active.types, this.aTypes);\n        }\n      }\n    },\n    _buildActiveButton: function _buildActiveButton(key, arr, obj) {\n      if (!arr) return;\n\n      for (var i = 0; i < arr.length; i++) {\n        var item = arr[i];\n\n        if (obj[item]) {\n          obj[item].push(key);\n        } else {\n          obj[item] = [key];\n        }\n      }\n    },\n    _buildButtons: function _buildButtons() {\n      var instance = this._getCurrentInstance();\n\n      var buttons = instance ? instance.toolbar : this.app.editor.getButtons(); // create button\n\n      this._createButtons(buttons, instance); // create custom (plugin)\n\n\n      if (instance) {\n        this._createButtons(this.customButtons, instance);\n      }\n    },\n    _createButtons: function _createButtons(buttons, instance) {\n      for (var name in buttons) {\n        if (instance && !instance.isAllowedButton(name, buttons[name])) continue;\n        this.app.create('button', name, buttons[name], this.$toolbar, 'toolbar');\n      }\n    },\n    _observeSticky: function _observeSticky() {\n      var $scrollTarget = this.app.scroll.getTarget();\n      var paddingTop = this.app.scroll.isTarget() ? parseInt($scrollTarget.css('padding-top')) : 0;\n      var $container = this.app.container.get('bars');\n      $container.css('top', 0 - paddingTop + this.sticky.stickyTopOffset + 'px');\n\n      if (this.isSticky()) {\n        this.app.broadcast('toolbar.sticky');\n      } else {\n        this.app.broadcast('toolbar.static');\n      }\n    },\n    _findButtons: function _findButtons() {\n      return this.$toolbar.find('.' + this.prefix + '-button-toolbar');\n    },\n    _findButton: function _findButton(name) {\n      return this.$toolbar.find('[data-name=' + name + ']');\n    },\n    _isToolbar: function _isToolbar() {\n      return this.opts.toolbar;\n    },\n    _isObserveButtons: function _isObserveButtons() {\n      if (!this.opts.buttons.tags && !this.opts.buttons.types) return false;\n      return true;\n    },\n    _setActiveKeys: function _setActiveKeys(keys) {\n      for (var i = 0; i < keys.length; i++) {\n        this._findButton(keys[i]).addClass(this.activeClass);\n      }\n    },\n    _getCurrentInstance: function _getCurrentInstance() {\n      var instance = this.app.block.is() ? this.app.block.get() : false;\n      return this.app.blocks.is() ? false : instance;\n    },\n    _getObservedTags: function _getObservedTags(tag, inlines) {\n      var tags = [];\n\n      if (tag) {\n        tags.push(tag);\n      }\n\n      if (inlines.length > 0) {\n        for (var i = 0; i < inlines.length; i++) {\n          tags.push(inlines[i].tagName.toLowerCase());\n        }\n      }\n\n      return tags;\n    }\n  });\n  ArticleEditor.add('module', 'button', {\n    init: function init(name, obj, $container, type) {\n      // build\n      if (_typeof(name) === 'object') {\n        this.name = name.name;\n        this.obj = obj;\n\n        this._buildFromElement(name.element);\n      } else if (name) {\n        this.type = type || false;\n        this.name = name;\n\n        var res = this._observe(obj);\n\n        this.obj = typeof res === 'undefined' ? obj : res;\n\n        if (this.obj) {\n          this._build(name, $container);\n        }\n      }\n    },\n    setColor: function setColor(stack, data) {\n      var name = stack.getName();\n\n      if (name === 'background' || name === 'text-color') {\n        var key = name === 'background' ? 'background-color' : 'color';\n        this.setBackground(data[key]);\n      }\n    },\n    isButton: function isButton() {\n      return true;\n    },\n    getName: function getName() {\n      return this.name;\n    },\n    getTitle: function getTitle() {\n      return this.title;\n    },\n    getParams: function getParams() {\n      return this._has('params') ? this.obj.params : false;\n    },\n    getOffset: function getOffset() {\n      return this.$button.offset();\n    },\n    getDimension: function getDimension() {\n      return {\n        width: this.$button.width(),\n        height: this.$button.height()\n      };\n    },\n    getElement: function getElement() {\n      return this.$button;\n    },\n    setBackground: function setBackground(color) {\n      this._background('add', color);\n    },\n    resetBackground: function resetBackground() {\n      this._background('remove', '');\n    },\n    // private\n    _has: function _has(name) {\n      return this.obj.hasOwnProperty(name);\n    },\n    _observe: function _observe(obj) {\n      if (obj.hasOwnProperty('observer')) {\n        obj = this.app.api(obj.observer, obj, this.name);\n      }\n\n      return obj;\n    },\n    _background: function _background(type, color) {\n      var func = type === 'remove' ? 'removeClass' : 'addClass';\n      this.$icon[func](this.prefix + '-button-icon-color').css({\n        'background-color': color,\n        'color': color !== '' ? this.app.color.invert(color) : ''\n      });\n    },\n    _buildFromElement: function _buildFromElement(element) {\n      this.$button = this.dom(element);\n      this.$button.addClass(this.prefix + '-button-target');\n\n      this._buildData();\n    },\n    _build: function _build(name, $container) {\n      this._buildTitle();\n\n      this._buildElement();\n\n      this._buildIcon();\n\n      this._buildData($container);\n    },\n    _buildData: function _buildData($container) {\n      // data\n      this.$button.attr({\n        'tabindex': '-1',\n        'data-name': this.name,\n        'data-command': this.obj.command || false\n      });\n      this.$button.dataset('instance', this); // func\n\n      var func = this._has('command') ? '_catch' : '_stop'; // events\n\n      this.$button.on('click.' + this.prefix + '-button', this[func].bind(this));\n      this.$button.on('dragstart.' + this.prefix + '-button', function (e) {\n        e.preventDefault();\n        return;\n      });\n\n      if ($container) {\n        this._buildTooltip();\n\n        this._buildBackground();\n\n        this._buildPosition($container);\n      }\n    },\n    _buildTitle: function _buildTitle() {\n      this.title = typeof this.obj.title !== 'undefined' ? this.lang.parse(this.obj.title) : '';\n    },\n    _buildElement: function _buildElement() {\n      this.$button = this.dom('<a href=\"#\"></a>');\n      this.$button.addClass(this.prefix + '-button ' + this.prefix + '-button-target');\n\n      if (this.type) {\n        this.$button.addClass(this.prefix + '-button-' + this.type);\n      }\n\n      if (this._has('classname')) {\n        this.$button.addClass(this.obj.classname);\n      }\n    },\n    _buildIcon: function _buildIcon() {\n      var isIcon = this._has('icon');\n\n      var span = '<span class=\"' + this.prefix + '-icon-' + this.name + '\"></span>';\n      this.$icon = this._buildIconElement();\n\n      if (isIcon) {\n        span = this.obj.icon.search(/</) !== -1 ? this.obj.icon : '<span class=\"' + this.prefix + '-icon-' + this.obj.icon + '\"></span>';\n      }\n\n      this.$icon.append(span);\n      this.$button.append(this.$icon);\n    },\n    _buildIconElement: function _buildIconElement() {\n      return this.dom('<span>').addClass(this.prefix + '-button-icon');\n    },\n    _buildTooltip: function _buildTooltip() {\n      if (this.type === 'toolbar') {\n        this.app.tooltip.build(this.$button, this.title);\n      }\n    },\n    _buildBackground: function _buildBackground() {\n      if (this._has('background')) {\n        this.setBackground(this.obj.background);\n      }\n    },\n    _buildPosition: function _buildPosition($container) {\n      if (this._has('position')) {\n        var pos = this.obj.position;\n\n        if (pos === 'first') {\n          $container.prepend(this.$button);\n        } else if (_typeof(pos) === 'object') {\n          var type = pos.hasOwnProperty('after') ? 'after' : 'before';\n          var name = pos[type];\n          var $el = $container.find('[data-name=' + name + ']');\n\n          if ($el.length !== 0) {\n            $el[type](this.$button);\n          } else {\n            $container.append(this.$button);\n          }\n        }\n      } else {\n        $container.append(this.$button);\n      }\n    },\n    _stop: function _stop(e) {\n      e.preventDefault();\n      e.stopPropagation();\n    },\n    _catch: function _catch(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $btn = this.dom(e.target).closest('.' + this.prefix + '-button-target');\n      if ($btn.hasClass('disable')) return; // editor focus\n\n      this.app.editor.setFocus();\n      var command = $btn.attr('data-command');\n      var name = $btn.attr('data-name');\n      var instance = $btn.dataget('instance'); // command\n\n      this.app.api(command, this.getParams(), instance, name, e);\n      this.app.tooltip.close();\n    }\n  });\n  ArticleEditor.add('module', 'tooltip', {\n    build: function build($button, title) {\n      title = title ? title.replace(/(<([^>]+)>)/gi, '') : false;\n\n      if (title) {\n        var name = this.prefix + '-button-' + this.uuid;\n        $button.attr('data-tooltip', title);\n        $button.on('mouseover.' + name, this.open.bind(this));\n        $button.on('mouseout.' + name, this.close.bind(this));\n      }\n    },\n    open: function open(e) {\n      if (this.app.popup.isOpen()) return;\n      var $btn = this.dom(e.target).closest('.' + this.prefix + '-button-target');\n\n      if ($btn.hasClass('disable')) {\n        return;\n      }\n\n      var $tooltip = this.dom('<span>').addClass(this.prefix + '-tooltip').html($btn.attr('data-tooltip'));\n      var offset = $btn.offset();\n      var height = $btn.height();\n      $tooltip.css({\n        top: offset.top + height + 'px',\n        left: offset.left + 'px'\n      }); // bs modal\n\n      if (this.opts.bsmodal) {\n        $tooltip.css('z-index', 1051);\n      }\n\n      this.app.$body.append($tooltip);\n    },\n    close: function close() {\n      this.app.$body.find('.' + this.prefix + '-tooltip').remove();\n    }\n  });\n  ArticleEditor.add('module', 'path', {\n    init: function init() {\n      this.activeClass = 'active';\n      this.disableClass = 'disable';\n      this.pathItemClass = this.prefix + '-path-item';\n    },\n    start: function start() {\n      if (!this.opts.path) return;\n      this.$container = this.app.container.get('pathbar');\n\n      this._build();\n\n      this._buildRoot();\n\n      this._buildActive();\n    },\n    build: function build() {\n      if (!this.opts.path) return;\n\n      this._clear();\n\n      this._buildRoot();\n\n      if (this.app.blocks.is()) {\n        this._buildMultipleItem();\n      } else {\n        this._buildItems();\n\n        this._buildActive();\n      }\n    },\n    disable: function disable() {\n      if (!this.opts.path) return;\n\n      this._getAll().addClass(this.disableClass);\n    },\n    enable: function enable() {\n      if (!this.opts.path) return;\n\n      this._getAll().removeClass(this.disableClass);\n    },\n    // private\n    _clear: function _clear() {\n      this.$path.find('.' + this.pathItemClass).off('.' + this.prefix + '-path-' + this.uuid);\n      this.$path.html('');\n    },\n    _getAll: function _getAll() {\n      return this.$path.find('.' + this.pathItemClass);\n    },\n    _selectItem: function _selectItem(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var $item = this.dom(e.target).closest('.' + this.pathItemClass);\n      if ($item.hasClass(this.disableClass)) return;\n      var instance = $item.dataget('instance');\n\n      if (instance) {\n        this.app.popup.close();\n        this.app.block.set(instance, 'start');\n      } else {\n        this._clear();\n\n        this._buildRoot();\n\n        this._buildActive();\n\n        this.app.block.unset();\n      }\n    },\n    _createItem: function _createItem() {\n      return this.dom('<a href=\"#\"></a>').attr('tabindex', '-1').addClass(this.pathItemClass);\n    },\n    _build: function _build() {\n      this.$path = this.dom('<div>').addClass(this.prefix + '-path');\n      this.$container.append(this.$path);\n    },\n    _buildRoot: function _buildRoot() {\n      this._buildItem(false, this.lang.parse(this.opts.path.title));\n    },\n    _buildActive: function _buildActive() {\n      this.$path.find('a').removeClass(this.activeClass).last().addClass(this.activeClass);\n    },\n    _buildItems: function _buildItems() {\n      var current = this.app.block.get();\n      if (!current) return; // parents\n\n      var $parents = current.getBlock().parents('[data-' + this.prefix + '-type]');\n      $parents.nodes.reverse();\n      $parents.each(this._buildParentItem.bind(this)); // current\n\n      this._buildItem(current);\n    },\n    _buildParentItem: function _buildParentItem($el) {\n      var instance = $el.dataget('instance');\n\n      this._buildItem(instance);\n    },\n    _buildMultipleItem: function _buildMultipleItem() {\n      var $item = this._createItem();\n\n      $item.addClass(this.activeClass);\n\n      this._buildTitle($item, this.lang.get('editor.multiple'));\n\n      this.$path.append($item);\n    },\n    _buildItem: function _buildItem(instance, root) {\n      var $item = this._createItem();\n\n      $item.dataset('instance', instance);\n      $item.on('click.' + this.prefix + '-path-' + this.uuid, this._selectItem.bind(this));\n\n      this._buildTitle($item, root || instance.getTitle());\n\n      this.$path.append($item);\n    },\n    _buildTitle: function _buildTitle($item, title) {\n      var $title = this.dom('<span>').html(title);\n      $item.append($title);\n    }\n  });\n  ArticleEditor.add('module', 'topbar', {\n    init: function init() {\n      this.activeClass = 'active';\n      this.toggledClass = 'disable';\n      this.disableClass = 'disable';\n      this.customButtons = {};\n    },\n    start: function start() {\n      if (!this._isTopbar()) return;\n\n      this._build();\n\n      this._buildButtons();\n    },\n    get: function get(name) {\n      return this._findButton(name);\n    },\n    add: function add(name, obj) {\n      this.customButtons[name] = obj;\n    },\n    setToggled: function setToggled(name) {\n      if (!this._isTopbar()) return;\n\n      this._findButtons().removeClass(this.toggledClass);\n\n      this._findButton(name).addClass(this.toggledClass);\n    },\n    unsetToggled: function unsetToggled(name) {\n      if (!this._isTopbar()) return;\n      var $elms = name ? this._findButton(name) : this._findButtons();\n      $elms.removeClass(this.toggledClass);\n    },\n    enable: function enable() {\n      if (!this._isTopbar()) return;\n\n      this._findButtons().removeClass(this.disableClass);\n    },\n    disable: function disable() {\n      if (!this._isTopbar()) return;\n\n      this._findButtons().removeClass(this.toggledClass).removeClass(this.activeClass).addClass(this.disableClass);\n    },\n    // private\n    _isTopbar: function _isTopbar() {\n      return this.opts.path;\n    },\n    _build: function _build() {\n      this.$topbar = this.dom('<div>').addClass(this.prefix + '-topbar');\n      this.app.container.get('pathbar').append(this.$topbar);\n    },\n    _buildButtons: function _buildButtons() {\n      var buttons = this.opts.buttons.topbar;\n\n      for (var name in buttons) {\n        if (name === 'undo' && !this.opts.topbar.undoredo) continue;\n        if (name === 'redo' && !this.opts.topbar.undoredo) continue;\n        if (name === 'shortcut' && !this.opts.topbar.shortcuts) continue;\n        this.app.create('button', name, buttons[name], this.$topbar, 'topbar');\n      }\n    },\n    _findButtons: function _findButtons() {\n      return this.$topbar.find('.' + this.prefix + '-button-topbar');\n    },\n    _findButton: function _findButton(name) {\n      return this.$topbar.find('[data-name=' + name + ']');\n    }\n  });\n  ArticleEditor.add('module', 'control', {\n    init: function init() {\n      this.instance = false;\n      this.customButtons = {};\n      this.eventName = this.prefix + '-control';\n    },\n    start: function start() {\n      if (!this.opts.control) return;\n\n      this._build();\n    },\n    stop: function stop() {\n      this.$control.remove();\n      this.instance = false;\n      this.customButtons = {};\n    },\n    isOpen: function isOpen() {\n      return this.$control.css('display') !== 'none';\n    },\n    getElement: function getElement() {\n      return this.$control;\n    },\n    get: function get(name) {\n      return this._findButton(name);\n    },\n    add: function add(name, obj) {\n      this.customButtons[name] = obj;\n    },\n    remove: function remove(name) {\n      this._findButton(name).remove();\n    },\n    build: function build() {\n      if (!this.opts.control) return;\n      var instance = this.app.block.get();\n\n      if (!instance) {\n        this.close();\n      } else {\n        this.open(instance);\n      }\n    },\n    open: function open(instance) {\n      if (!this.opts.control) return;\n      this.$control.html('');\n      this.instance = instance;\n\n      var len = this._buildButtons();\n\n      if (len > 0) {\n        var $scrollTarget = this.app.scroll.getTarget();\n        this.updatePosition();\n        $scrollTarget.on('resize.' + this.eventName, this.updatePosition.bind(this));\n        $scrollTarget.on('scroll.' + this.eventName, this.updatePosition.bind(this));\n        this.app.editor.getWin().on('scroll.' + this.eventName, this.updatePosition.bind(this));\n        this.instance.getBlock().on('keyup.' + this.eventName, this.updatePosition.bind(this));\n        this.updatePosition();\n      } else {\n        this.close();\n      }\n    },\n    close: function close() {\n      if (!this.opts.control) return;\n      this.$control.hide();\n\n      if (this.instance) {\n        var $block = this.instance.getBlock();\n        this.app.content.unfixListMargin($block);\n        $block.off('.' + this.eventName);\n      }\n\n      this.app.scroll.getTarget().off('.' + this.eventName);\n      this.app.editor.getDoc().off('.' + this.eventName);\n      this.instance = false;\n    },\n    updatePosition: function updatePosition() {\n      if (!this.opts.control) return;\n\n      if (!this.instance) {\n        this.close();\n        return;\n      }\n\n      var isEditable = this.instance.isEditable();\n      var offset = this.instance.getOffset();\n      var width = this.$control.width();\n      var scrollTop = this.app.editor.getWin().scrollTop();\n      var topOutlineFix = isEditable ? 4 : 2;\n      var leftOutlineFix = isEditable ? 6 : 4;\n      var top = offset.top - topOutlineFix - scrollTop;\n      var left = offset.left - width - leftOutlineFix;\n      var $container = this.app.container.get('toolbar');\n      var toolbarBottom = $container.offset().top + $container.height() - topOutlineFix;\n      var frameRect = this.app.editor.getFrameRect();\n\n      if (this.instance.getType() === 'list') {\n        var $block = this.instance.getBlock();\n        this.app.content.fixListMargin($block);\n      }\n\n      if (top < toolbarBottom || frameRect.bottom < top) {\n        this.$control.hide();\n      } else {\n        this.$control.show();\n      } // scroll target bottom hide\n\n\n      if (this.app.scroll.isTarget()) {\n        var $target = this.app.scroll.getTarget();\n        var targetBottom = $target.offset().top + $target.height();\n        var bottom = top + this.$control.height();\n\n        if (bottom > targetBottom) {\n          this.$control.hide();\n        }\n      } // left out of edge\n\n\n      if (!isEditable && left + width / 2 < frameRect.left) {\n        left = frameRect.left + 3;\n        top = top + 6;\n      } // position\n\n\n      this.$control.css({\n        top: top + 'px',\n        left: left + 'px'\n      });\n    },\n    // private\n    _buildButtons: function _buildButtons() {\n      var buttons = this.instance.control;\n      var count = 0;\n      count = this._createButtons(buttons, count);\n      count = this._createButtons(this.customButtons, count);\n      return count;\n    },\n    _build: function _build() {\n      this.$control = this.dom('<div>').addClass(this.prefix + '-control ' + this.prefix + '-control-' + this.uuid).hide(); // bs modal\n\n      if (this.opts.bsmodal) {\n        this.$control.css('z-index', 1051);\n      }\n\n      this.app.$body.append(this.$control);\n    },\n    _createButtons: function _createButtons(buttons, count) {\n      for (var name in buttons) {\n        if (!this.instance.isAllowedButton(name, buttons[name])) continue;\n        this.app.create('button', name, buttons[name], this.$control, 'control');\n        count++;\n      }\n\n      return count;\n    },\n    _findButton: function _findButton(name) {\n      return this.$control.find('[data-name=' + name + ']');\n    }\n  });\n  ArticleEditor.add('module', 'cleaner', {\n    cleanHtml: function cleanHtml(html) {\n      html = this.app.broadcastHtml('editor.before.clean', html); // local\n\n      var exceptedTags = this.opts.paste.blockTags.concat(this.opts.paste.inlineTags).concat(this.opts.paste.formTags);\n      var filterStyle = this.opts.paste.keepStyle.length !== 0 ? ',' + this.opts.paste.keepStyle.join(',') : ''; // gdocs & word\n\n      var isPages = this._isPages(html);\n\n      var isMsWord = this._isHtmlMsWord(html); // remove doctype tag\n\n\n      html = this.app.content.removeDoctype(html); // remove denied tags\n\n      html = this.app.content.removeTags(html, this.opts.tags.denied); // remove comments\n\n      html = this.app.content.removeComments(html); // remove style & script tag\n\n      html = this.app.content.removeTagsWithContent(html, ['script', 'style']); // clean pages\n\n      html = isPages ? this._cleanPages(html) : html; // clean gdocs\n\n      html = this._cleanGDocs(html); // encode php code\n\n      html = this._encodePhp(html); // remove tags\n\n      html = this.app.content.removeTagsExcept(html, exceptedTags); // clean ms word\n\n      html = isMsWord ? this._cleanMsWord(html) : html; // remove style\n\n      html = this.app.content.removeStyleAttr(html, filterStyle); // restore data style\n\n      html = this.app.content.cacheStyle(html); // remove empty inline\n\n      html = this.app.content.removeEmptyInlines(html); // clean empty p\n\n      html = html.replace(/<p>&nbsp;<\\/p>/gi, '<p></p>');\n      html = html.replace(/<p><br\\s?\\/?><\\/p>/gi, '<p></p>'); // gmail list paste\n\n      html = html.replace(/^<li/gi, '<ul><li');\n      html = html.replace(/<\\/li>$/gi, '</li></ul>');\n\n      if (isMsWord) {\n        html = html.replace(/<p><\\/p>/gi, '');\n        html = html.replace(/<p>\\s<\\/p>/gi, '');\n      } // tidy lists\n\n\n      html = this.app.utils.wrap(html, function ($w) {\n        // place ul/ol into li\n        $w.find('ul, ol').each(this._placeListToItem.bind(this)); // remove p in li\n\n        $w.find('li p').unwrap();\n      }.bind(this)); // broadcast\n\n      return this.app.broadcastHtml('editor.clean', html);\n    },\n    // private\n    _encodePhp: function _encodePhp(html) {\n      html = html.replace('<?php', '&lt;?php');\n      html = html.replace('<?', '&lt;?');\n      html = html.replace('?>', '?&gt;');\n      return html;\n    },\n    _isHtmlMsWord: function _isHtmlMsWord(html) {\n      return html.match(/class=\"?Mso|style=\"[^\"]*\\bmso-|style='[^'']*\\bmso-|w:WordDocument/i);\n    },\n    _isPages: function _isPages(html) {\n      return html.match(/name=\"Generator\"\\scontent=\"Cocoa\\sHTML\\sWriter\"/i);\n    },\n    _placeListToItem: function _placeListToItem($node) {\n      var node = $node.get();\n      var prev = node.previousSibling;\n\n      if (prev && prev.tagName === 'LI') {\n        var $li = this.dom(prev);\n        $li.find('p').unwrap();\n        $li.append(node);\n      }\n    },\n    _cleanPages: function _cleanPages(html) {\n      html = html.replace(/\\sclass=\"s[0-9]\"/gi, '');\n      html = html.replace(/\\sclass=\"p[0-9]\"/gi, '');\n      html = this.app.utils.wrap(html, function ($w) {\n        $w.find('.Apple-converted-space').remove();\n      });\n      return html;\n    },\n    _cleanGDocs: function _cleanGDocs(html) {\n      html = html.replace(/<b\\sid=\"internal-source-marker(.*?)\">([\\w\\W]*?)<\\/b>/gi, \"$2\");\n      html = html.replace(/<b(.*?)id=\"docs-internal-guid(.*?)\">([\\w\\W]*?)<\\/b>/gi, \"$3\");\n      html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?bold|font-weight:\\s?bold;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\n      html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?600|font-weight:\\s?600;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\n      html = html.replace(/<span[^>]*(font-style:\\s?italic;\\s?font-weight:\\s?700|font-weight:\\s?700;\\s?font-style:\\s?italic)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b><i>$2</i></b>');\n      html = html.replace(/<span[^>]*font-style:\\s?italic[^>]*>([\\w\\W]*?)<\\/span>/gi, '<i>$1</i>');\n      html = html.replace(/<span[^>]*font-weight:\\s?(bold|600|700)[^>]*>([\\w\\W]*?)<\\/span>/gi, '<b>$2</b>');\n      return html;\n    },\n    _cleanMsWord: function _cleanMsWord(html) {\n      // comments\n      html = html.replace(/<!--[\\s\\S]+?-->/gi, '');\n      html = html.trim();\n      html = html.replace(/<(!|script[^>]*>.*?<\\/script(?=[>\\s])|\\/?(\\?xml(:\\w+)?|img|meta|link|style|\\w:\\w+)(?=[\\s/>]))[^>]*>/gi, '');\n      html = html.replace(/<(\\/?)s>/gi, \"<$1strike>\");\n      html = html.replace(/&nbsp;/gi, ' ');\n      html = html.replace(/<span\\s+style\\s*=\\s*\"\\s*mso-spacerun\\s*:\\s*yes\\s*;?\\s*\"\\s*>([\\s\\u00a0]*)<\\/span>/gi, function (str, spaces) {\n        return spaces.length > 0 ? spaces.replace(/./, \" \").slice(Math.floor(spaces.length / 2)).split(\"\").join(\"\\xA0\") : '';\n      });\n      html = this.app.utils.wrap(html, function ($w) {\n        // build lists\n        $w.find('p').each(function ($node) {\n          var matches = /mso-list:\\w+ \\w+([0-9]+)/.exec($node.attr('style'));\n\n          if (matches) {\n            $node.attr('data-listLevel', parseInt(matches[1], 10));\n          }\n        }); // parse Lists\n\n        this._parseWordLists($w);\n\n        $w.find('[align]').removeAttr('align');\n        $w.find('[name]').removeAttr('name');\n        $w.find('span').each(function ($node) {\n          var str = $node.attr('style');\n          var matches = /mso-list:Ignore/.exec(str);\n          if (matches) $node.remove();else $node.unwrap();\n        });\n        $w.find('[style]').removeAttr('style');\n        $w.find(\"[class^='Mso']\").removeAttr('class');\n        $w.find('a').filter(function ($node) {\n          return !$node.attr('href');\n        }).unwrap();\n      }.bind(this));\n      html = html.replace(/<p[^>]*><\\/p>/gi, '');\n      html = html.replace(/<li>·/gi, '<li>');\n      html = html.trim(); // remove spaces between\n\n      html = html.replace(/\\/(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)>\\s+<(p|ul|ol|h1|h2|h3|h4|h5|h6|blockquote)/gi, '/$1>\\n<$2');\n      var result = '';\n      var lines = html.split(/\\n/);\n\n      for (var i = 0; i < lines.length; i++) {\n        var space = lines[i] !== '' && lines[i].search(/>$/) === -1 ? ' ' : '\\n';\n        result += lines[i] + space;\n      }\n\n      result = result.trim();\n      return result;\n    },\n    _parseWordLists: function _parseWordLists($w) {\n      var lastLevel = 0;\n      var $item = null;\n      var $list = null;\n      var $listChild = null;\n      $w.find('p').each(function ($node) {\n        var level = $node.attr('data-listLevel');\n\n        if (level === null && $node.hasClass('MsoListParagraphCxSpMiddle')) {\n          level = 1;\n        }\n\n        if (level !== null) {\n          var txt = $node.text();\n          var listTag = /^\\s*\\w+\\./.test(txt) ? '<ol></ol>' : '<ul></ul>'; // new parent list\n\n          if ($node.hasClass('MsoListParagraphCxSpFirst') || $node.hasClass('MsoNormal')) {\n            $list = this.dom(listTag);\n            $node.before($list);\n          } // new child list\n          else if (level > lastLevel && lastLevel !== 0) {\n              $listChild = this.dom(listTag);\n              $item.append($listChild);\n              $list = $listChild;\n            } // level up\n\n\n          if (level < lastLevel) {\n            var len = lastLevel - level + 1;\n\n            for (var i = 0; i < len; i++) {\n              $list = $list.parent();\n            }\n          } // create item\n\n\n          $node.find('span').first().unwrap();\n          $item = this.dom('<li>' + $node.html().trim() + '</li>');\n\n          if ($list === null) {\n            $node.before(listTag);\n            $list = $node.prev();\n          } // append\n\n\n          $list.append($item);\n          $node.remove();\n          lastLevel = level;\n        } else {\n          $list = null;\n          lastLevel = 0;\n        }\n      }.bind(this));\n    }\n  });\n  ArticleEditor.add('module', 'insertion', {\n    init: function init() {\n      this._clear();\n    },\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    // get\n    getFirstInserted: function getFirstInserted() {\n      return this.inserted.instances[0];\n    },\n    getLastInserted: function getLastInserted() {\n      var len = this.inserted.instances.length;\n      var last = this.inserted.instances[len - 1];\n\n      if (last && last.isInlineBlock()) {\n        last = last.getParent();\n      }\n\n      return last;\n    },\n    getInserted: function getInserted() {\n      return this.inserted;\n    },\n    // set\n    setContent: function setContent(params) {\n      this._insert(params, 'set');\n\n      var inserted = this.getInserted();\n      this.inserted = false;\n      return inserted;\n    },\n    // insert\n    insertContent: function insertContent(params) {\n      this._insert(params, 'insert');\n\n      var inserted = this.getInserted();\n      this.inserted = false;\n      return inserted;\n    },\n    insertEmptyBlock: function insertEmptyBlock() {\n      this._insert({\n        html: this.app.block.createHtml()\n      }, 'insert');\n\n      var inserted = this.getInserted();\n      this.inserted = false;\n      return inserted;\n    },\n    insertNewline: function insertNewline(caret, doublenode) {\n      var str = doublenode ? '\\n\\n' : '\\n';\n      return this._insertFragment({\n        node: document.createTextNode(str)\n      }, caret ? caret : 'after');\n    },\n    insertPoint: function insertPoint(e) {\n      var range;\n      var marker = this.app.utils.createInvisibleChar();\n      var doc = this.app.editor.getDocNode();\n      var x = e.clientX,\n          y = e.clientY;\n\n      if (doc.caretPositionFromPoint) {\n        var pos = doc.caretPositionFromPoint(x, y);\n        var sel = doc.getSelection();\n        range = sel.getRangeAt(0);\n        range.setStart(pos.offsetNode, pos.offset);\n        range.collapse(true);\n        range.insertNode(marker);\n      } else if (doc.caretRangeFromPoint) {\n        range = doc.caretRangeFromPoint(x, y);\n        range.insertNode(marker);\n      }\n\n      this.app.caret.set(marker, 'after');\n    },\n    insertBreakline: function insertBreakline(caret) {\n      // split inline\n      var inlines = this.app.selection.getNodes({\n        type: 'inline'\n      });\n\n      if (this.app.selection.isCollapsed() && inlines.length !== 0) {\n        return this._splitInline(inlines, document.createElement('br'));\n      }\n\n      return this._insertFragment({\n        node: document.createElement('br')\n      }, caret ? caret : 'after');\n    },\n    insertNode: function insertNode(node, caret, splitinline) {\n      if (splitinline) {\n        var inlines = this.app.selection.getNodes({\n          type: 'inline'\n        });\n\n        if (inlines.length !== 0) {\n          return this._splitInline(inlines, node);\n        }\n      }\n\n      return this._insertFragment({\n        node: this.dom(node).get()\n      }, caret);\n    },\n    insertHtml: function insertHtml(html, caret) {\n      return this._insertFragment({\n        html: html\n      }, caret);\n    },\n    insertText: function insertText(text, caret) {\n      var instance = this.app.block.get();\n\n      if (instance && !instance.isEditable() || this.app.blocks.is()) {\n        this.insertContent({\n          html: text,\n          caret: caret\n        });\n        return;\n      }\n\n      var sel = this.win.getSelection();\n      var node;\n\n      if (sel.getRangeAt && sel.rangeCount) {\n        text = this.app.content.getTextFromHtml(text, {\n          nl: true\n        });\n        node = document.createTextNode(text);\n        var range = sel.getRangeAt(0);\n        range.deleteContents();\n        range.insertNode(node);\n        caret = caret || 'end';\n        this.app.caret.set(node, caret);\n      }\n\n      return node;\n    },\n    insertListToList: function insertListToList($list, $target, caret) {\n      // add paste marker\n      var $items = $list.find('li');\n      var $last = $items.last();\n      $items.addClass(this.prefix + '-pasteitems');\n      $last.addClass(this.prefix + '-pastemarker'); // build nodes\n\n      var $nodes = $list.children(); // current li item\n\n      var $item = this.dom(this.app.selection.getBlock()); // caret position\n\n      var isStart = this.app.caret.is($target, 'start');\n      var isEnd = this.app.caret.is($target, 'end');\n      var isStartItem = this.app.caret.is($item, 'start');\n      var isEndItem = this.app.caret.is($item, 'end', ['ul', 'ol']); // start\n\n      if (isStart) {\n        $target.prepend($nodes);\n      } // end\n      else if (isEnd) {\n          $target.append($nodes);\n        } // middle\n        else {\n            // item empty\n            if (this.app.content.isEmptyHtml($item.html())) {\n              $item.after($nodes);\n              $item.remove();\n            } // item before\n            else if (isStartItem) {\n                $item.before($nodes);\n              } // item after\n              else if (isEndItem) {\n                  var $childList = $item.find('ul, ol');\n\n                  if ($childList.length !== 0) {\n                    $childList.prepend($nodes);\n                  } else {\n                    $item.after($nodes);\n                  }\n                } // item middle\n                else {\n                    this.app.element.split($item).before($nodes);\n                  }\n          } // set caret\n\n\n      var pastemarker = this.prefix + '-pastemarker';\n      var pasteitems = this.prefix + '-pasteitems';\n\n      if (caret) {\n        $last = this.app.editor.getLayout().find('.' + pastemarker).removeClass(pastemarker);\n        this.app.caret.set($last, 'end');\n      }\n\n      return this.app.editor.getLayout().find('.' + pasteitems).removeClass(pasteitems);\n    },\n    // detect\n    detectPosition: function detectPosition($target, position) {\n      if (position) return position; // caret position\n\n      var isStart = this.app.caret.is($target, 'start');\n      var isEnd = this.app.caret.is($target, 'end'); // end\n\n      if (isEnd) {\n        position = 'after';\n      } // start\n      else if (isStart) {\n          position = 'before';\n        } // middle\n        else {\n            position = 'split';\n          }\n\n      return position;\n    },\n    // private\n    // insert\n    _insert: function _insert(params, type) {\n      this.html = params.html; // broadcast before\n\n      this.html = this.app.broadcastHtml('editor.before.insert', this.html); // params\n\n      this.isParse = typeof params.parse === 'undefined' ? true : params.parse;\n      this.isClean = typeof params.clean === 'undefined' ? false : params.clean;\n      this.isCaret = typeof params.caret === 'undefined' ? true : params.caret;\n      this.isPosition = typeof params.position === 'undefined' ? false : params.position; // type\n\n      if (type === 'set' || this.app.editor.isAllSelected()) {\n        // set\n        this._setContent();\n      } else {\n        // insert\n        this._insertContent();\n      } // broadcast\n\n\n      this.app.broadcast('editor.insert', this.inserted);\n    },\n    _insertContent: function _insertContent() {\n      var current = this.app.block.get();\n      var position = false;\n      var remove = false;\n      var nodes, $block; // check\n\n      this._checkEmpty();\n\n      this._checkLine(); // blocks\n\n\n      if (this.app.blocks.is()) {\n        // insert to blocks\n        if (this.isEmpty) {\n          return;\n        } else if (this.isLine) {\n          this.html = this.app.block.createHtml(this.html);\n        } // parse & clean\n\n\n        this._clean();\n\n        this._parse();\n\n        this._parseBuild(); // nodes\n\n\n        nodes = this._buildParsedNodes(); // insert\n\n        var last = this.app.blocks.getLastSelected();\n        var $last = last.getBlock();\n        $last.after(nodes); // remove\n\n        this.app.blocks.removeSelected(false);\n      } // not selected\n      else if (!current || this.isPosition) {\n          // insert to blocks\n          if (this.isEmpty) {\n            return;\n          } else if (this.isLine) {\n            this.html = this.app.block.createHtml(this.html);\n          } // parse & clean\n\n\n          this._clean();\n\n          this._parse();\n\n          this._parseBuild(); // nodes\n\n\n          nodes = this._buildParsedNodes();\n          var positions = ['after', 'before', 'append'];\n          var emptyLayer = false;\n\n          if (this.isPosition === 'top' || !this.isPosition && this.opts.editor.add === 'top') {\n            current = this.app.blocks.getFirst();\n            position = 'before';\n          } else if (current && positions.indexOf(this.isPosition) !== -1) {\n            position = this.isPosition;\n            emptyLayer = current.getType('layer') && current.isEmpty();\n          } else {\n            current = this.app.blocks.getLast();\n            position = 'after';\n          }\n\n          $block = current.getBlock();\n\n          if (emptyLayer) {\n            $block.removeClass(this.prefix + '-empty-layer');\n            $block.html('');\n          }\n\n          $block[position](nodes);\n        } // list to list\n        else if (this._isListToList(current)) {\n            // delete selection\n            this.app.selection.deleteContents(); // parse & clean\n\n            this._clean();\n\n            this._parse();\n\n            this._parseBuild(); // insert\n\n\n            $block = current.getBlock();\n            var $list = this.$parsed.children().first();\n            this.$nodes = this.insertListToList($list, $block, 'end');\n            this.isCaret = false;\n          } else if (current) {\n            // like variable\n            if (current.isInlineBlock()) {\n              var parent = current.getParent();\n              this.app.caret.set(current.getBlock(), 'after');\n              current.remove();\n              this.app.block.set(parent);\n              current = parent;\n            } // editable\n\n\n            if (current.isEditable()) {\n              if (this.isEmpty) {\n                return;\n              } // parse & clean\n\n\n              this._clean();\n\n              this._cleanSpecial();\n\n              if (this.isLine) this._parseLine();else this._parse();\n\n              this._parseBuild();\n\n              if (current.isEmpty()) {\n                remove = true;\n                position = 'after';\n              } else {\n                // delete selection\n                this.app.selection.deleteContents();\n              } // nodes\n\n\n              nodes = this._buildParsedNodes();\n              $block = current.getBlock(); // insert\n\n              this._insertToEditable(current, $block, nodes, position, remove);\n            } // non editable\n            else {\n                // set position\n                position = 'after'; // check\n\n                if (this.isEmpty) {\n                  return;\n                } else if (this.isLine) {\n                  this.html = this.app.block.createHtml(this.html);\n                } // parse & clean\n\n\n                this._clean();\n\n                if (this.isLine) this._parseLine();else this._parse();\n\n                this._parseBuild(); // nodes\n\n\n                nodes = this._buildParsedNodes();\n                $block = current.getBlock(); // emptiable empty\n\n                if (current.isEmptiable() && current.isEmpty()) {\n                  $block.removeClass(this.prefix + '-empty-layer');\n                  $block.html('');\n                  position = 'append';\n                } // insert\n\n\n                $block[position](nodes);\n              }\n          } else {\n            return;\n          } // inserted\n\n\n      this._buildInserted();\n\n      this._buildCaret();\n\n      this._buildEditor();\n    },\n    _insertToEditable: function _insertToEditable(current, $block, nodes, position, remove) {\n      if (this.isLine) {\n        this.$nodes = this._insertFragment({\n          fragment: this.$parsed.get()\n        }, 'end');\n        this.isCaret = false;\n      } else {\n        // detect position\n        if (this.app.content.isEmptyHtml($block.html())) {\n          position = 'after';\n          remove = true;\n        } else {\n          position = this.detectPosition($block, position);\n        } // insert\n\n\n        if (position === 'split') {\n          this.app.element.split($block).before(nodes);\n        } else {\n          $block[position](nodes);\n        } // remove\n\n\n        if (remove) current.remove();\n      }\n    },\n    _insertFragment: function _insertFragment(obj, caret) {\n      if (obj.html || obj.fragment) {\n        var fragment = this.app.fragment.build(obj.html || obj.fragment);\n        this.app.fragment.insert(fragment);\n      } else {\n        this.app.fragment.insert(obj.node);\n      }\n\n      if (caret) {\n        var target = obj.node ? obj.node : caret === 'start' ? fragment.first : fragment.last;\n        this.app.caret.set(target, caret);\n      }\n\n      if (obj.node) {\n        return this.dom(obj.node);\n      } else {\n        return this.dom(fragment.nodes);\n      }\n    },\n    // set\n    _setContent: function _setContent() {\n      // check\n      this._checkEmpty();\n\n      this._checkLine(); // set to editor\n\n\n      if (this.isEmpty) {\n        this.html = this.app.block.createHtml();\n      } else if (this.isLine) {\n        this.html = this.app.block.createHtml(this.html);\n      } // parse & clean\n\n\n      this._clean();\n\n      this._parse();\n\n      this._parseBuild(); // nodes\n\n\n      var nodes = this._buildParsedNodes(); // set\n\n\n      this.app.editor.unsetSelectAllClass();\n      this.app.editor.getLayout().html('').append(nodes); // broadcast empty\n\n      if (this.isEmpty) {\n        this.app.broadcast('editor.empty');\n      } // inserted\n\n\n      this._buildInserted();\n\n      this._buildCaret();\n\n      this._buildEditor();\n    },\n    // split\n    _splitInline: function _splitInline(inlines, node) {\n      var $part = this.app.element.split(inlines[0]);\n      $part.before(node);\n      this.app.caret.set($part, 'start');\n      return this.dom(node);\n    },\n    // build\n    _buildEditor: function _buildEditor() {\n      this.app.editor.build();\n      this.app.editor.setFocus();\n    },\n    _buildCaret: function _buildCaret() {\n      if (!this.isCaret) return;\n      var instance,\n          caret = 'end';\n\n      if (this.isCaret === 'start') {\n        instance = this.getFirstInserted();\n        caret = 'start';\n      } else {\n        instance = this.getLastInserted();\n      } // set\n\n\n      if (instance) {\n        this.app.block.set(instance, caret);\n      } // ui\n\n\n      this.app.toolbar.observe();\n    },\n    _buildInserted: function _buildInserted() {\n      this.inserted = {\n        $nodes: this.$nodes,\n        instances: []\n      };\n      this.inserted.$nodes.each(this._buildInstance.bind(this));\n    },\n    _buildInstance: function _buildInstance($node) {\n      var instance = $node.dataget('instance');\n\n      if (instance) {\n        this.inserted.instances.push(instance);\n      }\n\n      var $nodes = $node.find('[data-' + this.prefix + '-type]');\n\n      if ($nodes.length !== 0) {\n        $nodes.each(this._buildInstance.bind(this));\n      }\n    },\n    _buildParsedNodes: function _buildParsedNodes() {\n      return this.$parsed.get().childNodes;\n    },\n    // clear\n    _clear: function _clear() {\n      this.html = false;\n      this.isLine = false;\n      this.isEmpty = false;\n      this.isSplit = false;\n      this.isClean = false;\n      this.isParse = true;\n      this.isCaret = true;\n      this.isPosition = false;\n    },\n    // clean\n    _clean: function _clean() {\n      if (this.isClean) {\n        this.html = this.app.cleaner.cleanHtml(this.html);\n      }\n    },\n    _cleanSpecial: function _cleanSpecial(type) {\n      var clean, extend, except;\n\n      if (['cell', 'address', 'figcaption', 'quoteitem'].indexOf(type) !== -1) {\n        clean = true;\n      } else if (type === 'dlist') {\n        clean = true;\n        except = ['dt', 'dd'];\n      } else if (type === 'list') {\n        clean = true;\n        except = ['ul', 'ol', 'li'];\n      }\n\n      if (clean) {\n        this.isLine = true;\n        this.html = this.app.content.addBrToBlocks(this.html);\n        this.html = this.app.content.removeBlockTags(this.html, extend, except);\n        this.html = this.html.replace(/<br\\s?\\/?>\\n?$/gi, '');\n      }\n    },\n    // parse\n    _parse: function _parse() {\n      if (this.isParse) {\n        this.html = this.app.parser.parse(this.html, false);\n      }\n    },\n    _parseLine: function _parseLine() {\n      if (this.isParse) {\n        this.html = this.app.parser.parseLine(this.html, false);\n      }\n    },\n    _parseBuild: function _parseBuild() {\n      this.$parsed = this.app.parser.build(this.html);\n      this.$nodes = this.$parsed.children();\n    },\n    // check\n    _checkEmpty: function _checkEmpty() {\n      this.isEmpty = this.app.content.isEmptyHtml(this.html);\n    },\n    _checkLine: function _checkLine() {\n      this.isLine = this.app.content.isLine(this.html);\n    },\n    // is\n    _isListToList: function _isListToList(instance) {\n      var $target = instance.getBlock();\n      var type = $target.attr('data-' + this.prefix + '-type');\n      var $list = this.dom('<div>').html(this.html).children().first();\n      return type === 'list' && $list.length !== 0 && ['ul', 'ol'].indexOf($list.get().tagName.toLowerCase()) !== -1;\n    }\n  });\n  ArticleEditor.add('module', 'fragment', {\n    build: function build(node) {\n      return this.is(node) ? node : this.create(node);\n    },\n    insert: function insert(fragment) {\n      var sel = this.app.selection.get();\n      if (!sel.range) return;\n\n      if (sel.collapsed) {\n        var start = sel.range.startContainer;\n\n        if (start.nodeType !== 3 && start.tagName === 'BR') {\n          start.parentNode.removeChild(start);\n        }\n      } else {\n        sel.range.deleteContents();\n      }\n\n      if (fragment.frag) {\n        sel.range.insertNode(fragment.frag);\n      } else {\n        sel.range.insertNode(fragment);\n      }\n    },\n    createContainer: function createContainer(html) {\n      var $div = this.dom('<div>');\n      if (typeof html === 'string') $div.html(html);else $div.append(this.dom(html).clone(true));\n      return $div.get();\n    },\n    create: function create(html) {\n      var el = typeof html === 'string' ? this.createContainer(html) : html;\n      var frag = document.createDocumentFragment(),\n          node,\n          firstNode,\n          lastNode;\n      var nodes = [];\n      var i = 0;\n\n      while (node = el.firstChild) {\n        i++;\n        var n = frag.appendChild(node);\n        if (i === 1) firstNode = n;\n        nodes.push(n);\n        lastNode = n;\n      }\n\n      return {\n        frag: frag,\n        first: firstNode,\n        last: lastNode,\n        nodes: nodes\n      };\n    },\n    is: function is(obj) {\n      return _typeof(obj) === 'object' && obj.frag;\n    }\n  });\n  ArticleEditor.add('module', 'clipboard', {\n    getContent: function getContent(clipboard) {\n      var type = this.isPlainText(clipboard) ? 'text/plain' : 'text/html';\n      var html = clipboard.getData(type);\n      html = type === 'text/plain' ? this.app.content.escapeHtml(html) : html;\n      return html;\n    },\n    setContent: function setContent(e, html, text) {\n      var clipboard = e.clipboardData; // unparse\n\n      html = this.app.parser.unparse(html);\n      text = text || this.app.content.getTextFromHtml(html, {\n        nl: true\n      }); // set\n\n      clipboard.setData('text/html', html);\n      clipboard.setData('text/plain', text);\n    },\n    isPlainText: function isPlainText(clipboard) {\n      var text = clipboard.getData('text/plain');\n      var html = clipboard.getData('text/html');\n\n      if (html && html.trim() !== '') {\n        return false;\n      } else {\n        return text !== null;\n      }\n    }\n  });\n  ArticleEditor.add('module', 'addbar', {\n    init: function init() {\n      this.customButtons = {};\n    },\n    popup: function popup(params, button) {\n      // create\n      this.app.popup.create('addbar', {\n        width: '476px',\n        items: this.buildItems()\n      }); // open\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    buildItems: function buildItems() {\n      var items = {};\n      var obj = $ARX.extend(true, this.opts.addbarObj);\n      var arr = this.opts.addbar.concat(this.opts.addbarAdd);\n\n      if (this.opts.addbarAdd.length !== 0 && this.opts.addbarAdd.indexOf('text') !== -1) {\n        var tin = arr.indexOf('text');\n        var pin = arr.indexOf('paragraph');\n        var to = pin !== -1 ? pin + 1 : 0; // move text block button\n\n        arr.splice(to, 0, arr.splice(tin, 1)[0]);\n      }\n\n      for (var i = 0; i < arr.length; i++) {\n        var name = arr[i];\n        if (this.opts.addbarHide.indexOf(name) !== -1) continue;\n        items[name] = obj[name];\n      }\n\n      var customItems = $ARX.extend(true, this.customButtons);\n      var instance = this.app.block.get(); // build custom\n\n      for (var key in customItems) {\n        items[key] = customItems[key];\n      } // build all\n\n\n      for (var index in items) {\n        this._buildItem(instance, items, items[index], index);\n      }\n\n      return items;\n    },\n    add: function add(name, obj) {\n      this.customButtons[name] = obj;\n    },\n    // private\n    _buildItem: function _buildItem(instance, items, item, key) {\n      // allowed buttons\n      if (item.blocks && !instance || instance && item.blocks && !instance.isAllowedButton(key, item)) {\n        items[key] = false;\n        return;\n      }\n\n      items[key] = {\n        container: true,\n        title: item.title,\n        icon: item.icon || key,\n        command: item.command,\n        params: {\n          name: key\n        }\n      };\n    }\n  });\n  ArticleEditor.add('module', 'marker', {\n    start: function start() {\n      this.win = this.app.editor.getWinNode();\n      this.doc = this.app.editor.getDocNode();\n    },\n    build: function build(pos) {\n      var $marker = this.dom('<span>').attr('id', 'selection-marker-' + pos);\n      $marker.addClass(this.prefix + '-selection-marker');\n      $marker.html(this.opts.markerChar);\n      return $marker.get();\n    },\n    insert: function insert() {\n      this.remove();\n      var sel = this.app.selection.get();\n      var both = !sel.collapsed;\n      if (!sel.range) return;\n      var start = this.build('start');\n      var end = this.build('end');\n      var cloned = sel.range.cloneRange();\n\n      if (both) {\n        cloned.collapse(false);\n        cloned.insertNode(end);\n      }\n\n      cloned.setStart(sel.range.startContainer, sel.range.startOffset);\n      cloned.collapse(true);\n      cloned.insertNode(start);\n      sel.range.setStartAfter(start);\n\n      if (both) {\n        sel.range.setEndBefore(end);\n      }\n\n      this.app.selection.setRange(sel.range);\n    },\n    restore: function restore() {\n      var start = this.find('start');\n      var end = this.find('end');\n      var sel = this.app.selection.get();\n      var range = sel.range ? sel.range : this.doc.createRange();\n\n      if (start) {\n        var prev = end ? end.previousSibling : false;\n        var next = start.nextSibling;\n        next = next && next.nodeType === 3 && next.textContent.replace(/[\\n\\t]/g, '') === '' ? false : next;\n\n        if (!end) {\n          if (next) {\n            range.selectNodeContents(next);\n            range.collapse(true);\n          } else {\n            this._restoreInject(range, start);\n          }\n        } else if (next && next.id === 'selection-marker-end') {\n          this._restoreInject(range, start);\n        } else {\n          if (prev && next) {\n            range.selectNodeContents(prev);\n            range.collapse(false);\n            range.setStart(next, 0);\n          } else if (prev && !next) {\n            range.selectNodeContents(prev);\n            range.collapse(false);\n            range.setStartAfter(start);\n          } else {\n            range.setStartAfter(start);\n            range.setEndBefore(end);\n          }\n        }\n\n        this.app.selection.setRange(range);\n        var fix = start && end ? 2 : 1;\n        var offset = this.app.offset.get();\n        offset = {\n          start: offset.start - fix,\n          end: offset.end - fix\n        };\n        if (start) start.parentNode.removeChild(start);\n        if (end) end.parentNode.removeChild(end);\n        this.app.editor.getWin().focus();\n        this.app.offset.set(offset);\n      }\n    },\n    find: function find(pos) {\n      var $editor = this.app.editor.getLayout();\n      var $marker = $editor.find('#selection-marker-' + pos);\n      return $marker.length !== 0 ? $marker.get() : false;\n    },\n    remove: function remove() {\n      var start = this.find('start');\n      var end = this.find('end');\n      if (start) start.parentNode.removeChild(start);\n      if (end) end.parentNode.removeChild(end);\n    },\n    // private\n    _restoreInject: function _restoreInject(range, start) {\n      var textNode = this.app.utils.createInvisibleChar();\n      this.dom(start).after(textNode);\n      range.selectNodeContents(textNode);\n      range.collapse(false);\n    }\n  });\n  ArticleEditor.add('module', 'format', {\n    popup: function popup(params, button) {\n      var instance = this.app.block.get();\n      var tag = instance.getTag();\n      var tags = this.opts.format; // build items\n\n      var items = {};\n\n      for (var i = 0; i < tags.length; i++) {\n        var key = tags[i];\n        items[key] = {\n          title: this.opts.formatObj[key].title,\n          params: {\n            tag: key\n          },\n          command: 'block.format',\n          shortcut: this.opts.formatObj[key].shortcut,\n          active: key === tag\n        };\n      }\n\n      this.app.popup.create('format', {\n        width: '300px',\n        items: items\n      });\n      this.app.popup.open({\n        button: button\n      });\n    },\n    set: function set(params) {\n      // popup\n      if (this.app.popup.isOpen()) {\n        this.app.popup.close();\n      } // blocks\n\n\n      if (this.app.blocks.is()) {\n        return;\n      }\n\n      var instance = this.app.block.get();\n      var isEmpty = instance.isEmpty();\n      var caret = isEmpty ? 'start' : false;\n      var format = {\n        type: this.opts.formatObj[params.tag].type,\n        tag: params.tag\n      };\n      var $items; // current params\n\n      this.tag = instance.getTag();\n      this.type = instance.getType();\n      this.$block = instance.getBlock(); // selection\n\n      if (!isEmpty) {\n        this.app.selection.saveMarker();\n      } // check same\n\n\n      if (this._isSameTag(format)) {\n        format = this._checkSameFormat(format);\n      } // format\n\n\n      if (format) {\n        if (this._isListToText(format, 'list')) {\n          $items = this._formatListToText(format);\n        } else if (this._isListToText(format, 'dlist')) {\n          $items = this._formatListToText(format, true);\n        } else if (this._isTextToList(format, 'list')) {\n          this._formatTextToList(format, false, caret);\n        } else if (this._isTextToList(format, 'dlist')) {\n          this._formatTextToList(format, true, caret);\n        } else {\n          this._replaceTo(instance, format, caret);\n        }\n      } // restore\n\n\n      if (!isEmpty) {\n        this.app.selection.restoreMarker();\n      }\n\n      if ($items) {\n        var $block = this.app.selection.getDataBlock();\n        this.app.block.set($block, caret);\n      } // broadcast\n\n\n      instance = this.app.block.get();\n      this.app.broadcast('block.format', {\n        instance: instance\n      });\n    },\n    // private\n    _isSameTag: function _isSameTag(format) {\n      return this.tag === format.tag && this.type === format.type;\n    },\n    _checkSameFormat: function _checkSameFormat(format) {\n      if (['heading', 'list', 'dlist', 'address'].indexOf(this.type) !== -1) {\n        format = this._buildDefaultFormat();\n      } else if (['paragraph', 'text'].indexOf(this.type) !== -1) {\n        format = false;\n      }\n\n      return format;\n    },\n    _buildDefaultFormat: function _buildDefaultFormat() {\n      var type = this.opts.editor.markup;\n      var tag = type === 'paragraph' ? 'p' : 'div';\n      return {\n        type: type,\n        tag: tag\n      };\n    },\n    _formatListToText: function _formatListToText(format, dlist) {\n      var $items = dlist ? this._getDlistItems() : this._getListItems();\n\n      this._createItems($items, format);\n\n      this.$block.remove();\n      return $items;\n    },\n    _formatTextToList: function _formatTextToList(format, dlist, caret) {\n      var newInstance = this.app.create('block.' + format.type);\n      var $newBlock = newInstance.getBlock();\n\n      if (dlist && this.type === 'list') {\n        var z = 0;\n\n        this._getListItems().each(function ($node) {\n          var tag = z === 0 ? 'dt' : 'dd';\n          var $item = this.dom('<' + tag + '>').html($node.html());\n          z = tag === 'dt' ? 1 : 0;\n          $newBlock.append($item);\n        }.bind(this));\n      } else if (!dlist && this.type === 'dlist') {\n        this._getDlistItems().each(function ($node) {\n          var $item = this.dom('<li>').html($node.html());\n          $newBlock.append($item);\n        }.bind(this));\n      } else {\n        var tag = dlist ? '<dt>' : '<li>';\n        var $item = this.dom(tag).html(this.$block.html());\n        $newBlock.append($item);\n      } // parse instance\n\n\n      this.app.create('block.' + format.type, $newBlock);\n      this.$block.after($newBlock);\n      this.$block.remove(); // set\n\n      this.app.block.set($newBlock, caret);\n    },\n    _replaceTo: function _replaceTo(instance, format, caret) {\n      var $block = instance.getBlock();\n      var $newBlock = this.app.element.replaceToTag($block, format.tag); // clean classes & styles\n\n      $newBlock.removeAttr('style class data-' + this.prefix + '-style-cache'); // new instance\n\n      this.app.create('block.' + format.type, $newBlock); // set\n\n      this.app.block.set($newBlock, caret);\n    },\n    _createItems: function _createItems($items, format) {\n      $items.each(function ($node) {\n        var $item = this.dom('<' + format.tag + '>');\n        $item.html($node.html());\n        $node.remove();\n        this.app.create('block.' + format.type, $item);\n        this.$block.before($item);\n      }.bind(this));\n    },\n    _isListToText: function _isListToText(format, type) {\n      return this.type === type && ['heading', 'address', 'paragraph', 'text'].indexOf(format.type) !== -1;\n    },\n    _isTextToList: function _isTextToList(format, type) {\n      var checkType = type === 'list' ? 'dlist' : 'list';\n      return format.type === type && ['heading', 'address', 'paragraph', 'text', checkType].indexOf(this.type) !== -1;\n    },\n    _getListItems: function _getListItems() {\n      var $items = this.$block.find('li');\n      $items.find('ul, ol').each(function ($node) {\n        $node.parent().after($node);\n      });\n      $items.find('ul, ol').unwrap();\n      return $items;\n    },\n    _getDlistItems: function _getDlistItems() {\n      return this.$block.find('dt, dd');\n    }\n  });\n  ArticleEditor.add('module', 'inline', {\n    removeFormat: function removeFormat() {\n      this.app.popup.close();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      this.app.selection.save($block);\n      var nodes = this.app.selection.getNodes({\n        type: 'inline'\n      });\n\n      for (var i = 0; i < nodes.length; i++) {\n        var $node = this.dom(nodes[i]);\n\n        if (!$node.attr('data-' + this.prefix + '-type')) {\n          $node.unwrap();\n        }\n      }\n\n      this.app.selection.restore();\n      this.app.toolbar.observe();\n    },\n    set: function set(params) {\n      // popup\n      if (this.app.popup.isOpen()) {\n        this.app.popup.close();\n      } // params\n\n\n      this.params = params;\n      var nodes = [];\n      var sel = this.app.selection.get();\n\n      if (sel.collapsed) {\n        nodes = this.formatCollapsed();\n      } else {\n        nodes = this.formatUncollapsed();\n      }\n\n      this.app.toolbar.observe();\n      this.app.broadcast('inline.format', {\n        nodes: nodes\n      });\n      return nodes;\n    },\n    formatCollapsed: function formatCollapsed() {\n      var node;\n      var inline = this.app.selection.getInline();\n      var $inline = this.dom(inline);\n\n      var tags = this._getParamsTags();\n\n      var hasSameTag = this._isSameTag(inline, tags);\n\n      var caret = this.params && this.params.caret ? this.params.caret : false; // 1) not inline\n\n      if (!inline) {\n        node = this._insertInline(this.params.tag, caret);\n      } else {\n        // 2) inline is empty\n        if (this.app.content.isEmptyHtml(inline.innerHTML)) {\n          // 2.1) has same tag\n          if (hasSameTag) {\n            this.app.caret.set(inline, caret ? caret : 'after');\n            $inline.remove();\n          } // 2.2) has a different tag\n          else {\n              var $el = this.app.element.replaceToTag(inline, this.params.tag);\n              this.app.caret.set($el, caret ? caret : 'start');\n            }\n        } // 3) inline isn't empty\n        else {\n            // 3.1) has same tag\n            if (hasSameTag) {\n              var extractedContent = this.app.content.extractHtmlFromCaret(inline);\n              var $secondPart = this.dom('<' + this.params.tag + ' />');\n              $secondPart = this.app.element.cloneAttrs(inline, $secondPart);\n              $inline.after($secondPart.append(extractedContent));\n              this.app.caret.set($secondPart, caret ? caret : 'before');\n            } // 3.2) has a different tag\n            else {\n                node = this._insertInline(this.params.tag, caret);\n              }\n          }\n      }\n\n      return node ? node : [];\n    },\n    formatUncollapsed: function formatUncollapsed() {\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var inlines = this.app.selection.getNodes({\n        type: 'inline'\n      }); // convert del / u\n\n      this._convertTags('u', instance); // convert target tags\n\n\n      this._convertToStrike(inlines, instance); // save selection\n\n\n      this.app.selection.save($block); // apply strike\n\n      this.app.editor.getDocNode().execCommand('strikethrough'); // revert to inlines\n\n      var nodes = this._revertToInlines(instance); // restore selection\n\n\n      this.app.selection.restore(); // filter if node is not selected\n\n      var finalNodes = [];\n      var selected = this.app.selection.getText();\n\n      for (var i = 0; i < nodes.length; i++) {\n        if (this._isInSelection(nodes[i], selected)) {\n          finalNodes.push(nodes[i]);\n        }\n      } // clear and normalize\n\n\n      this._clearEmptyStyle(); // apply attr\n\n\n      if (this.params && typeof this.params.attr !== 'undefined') {\n        for (var z = 0; z < finalNodes.length; z++) {\n          for (var name in this.params.attr) {\n            finalNodes[z].setAttribute(name, this.params.attr[name]);\n          }\n        }\n      }\n\n      this.app.selection.save($block);\n      $block.get().normalize();\n\n      this._revertTags('u', instance);\n\n      this.app.selection.restore(); // caret\n\n      if (this.params && this.params.caret) {\n        var len = finalNodes.length;\n        var last = finalNodes[len - 1];\n        this.app.caret.set(last, this.params.caret);\n      }\n\n      return finalNodes;\n    },\n    // private\n    _clearEmptyStyle: function _clearEmptyStyle() {\n      var inlines = this.app.selection.getNodes({\n        type: 'inline'\n      });\n\n      for (var i = 0; i < inlines.length; i++) {\n        this._clearEmptyStyleAttr(inlines[i]);\n\n        var childNodes = inlines[i].childNodes;\n\n        if (childNodes) {\n          for (var z = 0; z < childNodes.length; z++) {\n            this._clearEmptyStyleAttr(childNodes[z]);\n          }\n        }\n      }\n    },\n    _clearEmptyStyleAttr: function _clearEmptyStyleAttr(node) {\n      if (node.nodeType !== 3 && node.getAttribute('style') === '') {\n        node.removeAttribute('style');\n      }\n    },\n    _isSameTag: function _isSameTag(inline, tags) {\n      return inline && tags.indexOf(inline.tagName.toLowerCase()) !== -1;\n    },\n    _isInSelection: function _isInSelection(node, selected) {\n      var text = this.app.utils.removeInvisibleChars(node.textContent);\n      return selected.search(new RegExp(this.app.utils.escapeRegExp(text))) !== -1;\n    },\n    _insertInline: function _insertInline(nodes, tag, caret) {\n      return this.app.insertion.insertNode(document.createElement(tag), caret ? caret : 'start');\n    },\n    _convertTags: function _convertTags(tag, instance) {\n      if (this.params.tag !== tag) {\n        var $block = instance.getBlock();\n        $block.find(tag).each(function (node) {\n          var $el = this.app.element.replaceToTag(node, 'span');\n          $el.addClass(this.prefix + '-convertable-' + tag);\n        }.bind(this));\n      }\n    },\n    _revertTags: function _revertTags(tag, instance) {\n      var $block = instance.getBlock();\n      $block.find('span.' + this.prefix + '-convertable-' + tag).each(function (node) {\n        var $el = this.app.element.replaceToTag(node, tag);\n        $el.removeClass(this.prefix + '-convertable-' + tag);\n        if (this.app.element.removeEmptyAttrs($el, 'class')) $el.removeAttr('class');\n      }.bind(this));\n    },\n    _convertToStrike: function _convertToStrike(inlines, instance) {\n      var $block = instance.getBlock();\n      this.app.selection.save($block);\n\n      var tags = this._getParamsTags();\n\n      for (var i = 0; i < inlines.length; i++) {\n        var inline = inlines[i];\n        var $inline = this.dom(inline);\n        var tag = inlines[i].tagName.toLowerCase();\n\n        if (tags.indexOf(tag) !== -1) {\n          this._replaceToStrike($inline);\n        }\n      }\n\n      this.app.selection.restore();\n    },\n    _getParamsTags: function _getParamsTags() {\n      var tags = [this.params.tag];\n\n      if (this.params.tag === 'b' || this.params.tag === 'strong') {\n        tags = ['b', 'strong'];\n      } else if (this.params.tag === 'i' || this.params.tag === 'em') {\n        tags = ['i', 'em'];\n      }\n\n      return tags;\n    },\n    _replaceToStrike: function _replaceToStrike($el) {\n      $el.replaceWith(function () {\n        return this.dom('<strike>').append($el.html());\n      }.bind(this));\n    },\n    _revertToInlines: function _revertToInlines(instance) {\n      var nodes = [];\n      var $block = instance.getBlock(); // strike\n\n      $block.find('strike').each(function (node) {\n        var $node = this.app.element.replaceToTag(node, this.params.tag);\n        nodes.push($node.get());\n      }.bind(this));\n      return nodes;\n    }\n  });\n  ArticleEditor.add('module', 'codemirror', {\n    init: function init() {\n      this.cm = false;\n    },\n    create: function create(params) {\n      if (!this.is()) return;\n      var opts = _typeof(this.opts.codemirror) === 'object' ? this.opts.codemirror : {};\n      var instance = this.opts.codemirrorSrc ? this.opts.codemirrorSrc : CodeMirror;\n      this.cm = instance.fromTextArea(this.dom(params.el).get(), opts);\n      if (params.height) this.cm.setSize(null, params.height);\n      if (params.focus) this.cm.focus();\n      return this.cm;\n    },\n    destroy: function destroy(html) {\n      if (this.cm) {\n        this.cm.toTextArea();\n        this.cm = false;\n      }\n    },\n    is: function is() {\n      return this.opts.codemirror;\n    },\n    val: function val(html) {\n      if (this.is() && this.cm) {\n        html = this.cm.getValue();\n      }\n\n      return html;\n    }\n  });\n  ArticleEditor.add('class', 'upload', {\n    defaults: {\n      type: 'image',\n      box: false,\n      url: false,\n      cover: true,\n      // 'cover'\n      name: 'file',\n      data: false,\n      multiple: true,\n      placeholder: false,\n      hidden: true,\n      target: false,\n      success: false,\n      error: false,\n      remove: false,\n      trigger: false,\n      input: false\n    },\n    init: function init($el, params) {\n      this.eventname = this.prefix + '-upload';\n\n      if ($el) {\n        this._build($el, params);\n      }\n    },\n    send: function send(e, files, params) {\n      this.p = this._buildParams(params);\n\n      this._send(e, files);\n    },\n    complete: function complete(response, e) {\n      this._complete(response, e);\n    },\n    // build\n    _build: function _build($el, params) {\n      this.p = this._buildParams(params);\n      this.$element = this.dom($el);\n      var tag = this.$element.get().tagName;\n\n      if (tag === 'INPUT') {\n        this._buildByInput();\n      } else {\n        this._buildByBox();\n      }\n    },\n    _buildParams: function _buildParams(params) {\n      return $ARX.extend(true, this.defaults, params);\n    },\n    // by input\n    _buildByInput: function _buildByInput() {\n      this.$input = this.$element; // box\n\n      if (this.p.box) {\n        this._buildBox();\n\n        this._buildPlaceholder();\n      } // input\n      else {\n          this.p.input = true;\n        }\n\n      this._buildAccept();\n\n      this._buildMultiple();\n\n      this._buildEvents();\n    },\n    // by box\n    _buildByBox: function _buildByBox() {\n      this._buildInput();\n\n      this._buildAccept();\n\n      this._buildMultiple();\n\n      this._buildBox();\n\n      this._buildPlaceholder();\n\n      this._buildEvents();\n    },\n    _buildBox: function _buildBox() {\n      this.$box = this.dom('<div>').addClass(this.prefix + '-form-upload-box');\n      this.$element.before(this.$box); // hide\n\n      if (this.p.hidden) {\n        this.$element.hide();\n      }\n    },\n    _buildPlaceholder: function _buildPlaceholder() {\n      if (!this.p.placeholder) return;\n      this.$placeholder = this.dom('<span>').addClass(this.prefix + '-form-upload-placeholder');\n      this.$placeholder.html(this.p.placeholder);\n      this.$box.append(this.$placeholder);\n    },\n    _buildInput: function _buildInput() {\n      this.$input = this.dom('<input>');\n      this.$input.attr('type', 'file');\n      this.$input.attr('name', this._getUploadParam());\n      this.$input.hide();\n      this.$element.before(this.$input);\n    },\n    _buildAccept: function _buildAccept() {\n      if (this.p.type !== 'image') return;\n      var types = this.opts.image.types.join(',');\n      this.$input.attr('accept', types);\n    },\n    _buildMultiple: function _buildMultiple() {\n      if (this.p.type !== 'image') return;\n\n      if (this.p.multiple) {\n        this.$input.attr('multiple', 'multiple');\n      } else {\n        this.$input.removeAttr('multiple');\n      }\n    },\n    _buildEvents: function _buildEvents() {\n      this.$input.on('change.' + this.eventname + '-' + this.uuid, this._change.bind(this));\n\n      if (this.p.input === false) {\n        this.$box.on('click.' + this.eventname, this._click.bind(this));\n        this.$box.on('drop.' + this.eventname, this._drop.bind(this));\n        this.$box.on('dragover.' + this.eventname, this._dragover.bind(this));\n        this.$box.on('dragleave.' + this.eventname, this._dragleave.bind(this));\n      }\n    },\n    _buildData: function _buildData(name, files, data) {\n      if (this.p.multiple) {\n        for (var i = 0; i < files.length; i++) {\n          data.append(name + '[]', files[i]);\n        }\n      } else {\n        data.append(name + '[]', files[0]);\n      }\n\n      return data;\n    },\n    // get\n    _getUploadParam: function _getUploadParam() {\n      return this.p.name;\n    },\n    // events\n    _click: function _click(e) {\n      e.preventDefault();\n      this.$input.click();\n    },\n    _change: function _change(e) {\n      this._send(e, this.$input.get().files);\n    },\n    _drop: function _drop(e) {\n      e.preventDefault();\n\n      this._send(e);\n    },\n    _dragover: function _dragover(e) {\n      e.preventDefault();\n\n      this._setStatus('hover');\n\n      return false;\n    },\n    _dragleave: function _dragleave(e) {\n      e.preventDefault();\n\n      this._removeStatus();\n\n      return false;\n    },\n    // set\n    _setStatus: function _setStatus(status) {\n      if (this.p.input || !this.p.box) return;\n\n      this._removeStatus();\n\n      this.$box.addClass(this.prefix + '-form-upload-' + status);\n    },\n    // remove\n    _removeStatus: function _removeStatus() {\n      if (this.p.input || !this.p.box) return;\n      var status = ['hover', 'error'];\n\n      for (var i = 0; i < status.length; i++) {\n        this.$box.removeClass(this.prefix + '-form-upload-' + status[i]);\n      }\n    },\n    // send\n    _send: function _send(e, files) {\n      files = files || e.dataTransfer.files;\n      var data = new FormData();\n\n      var name = this._getUploadParam();\n\n      data = this._buildData(name, files, data);\n      data = this.app.utils.extendData(data, this.p.data); // send data\n\n      this._sendData(e, files, data);\n    },\n    _sendData: function _sendData(e, files, data) {\n      if (typeof this.p.url === 'function') {\n        this.p.url.call(this.app, this, {\n          data: data,\n          files: files,\n          e: e\n        });\n      } else {\n        this.app.progress.show();\n        this.ajax.post({\n          url: this.p.url,\n          data: data,\n          before: function (xhr) {\n            var event = this.app.broadcast('upload.before.send', {\n              xhr: xhr,\n              data: data,\n              files: files,\n              e: e\n            });\n\n            if (event.isStopped()) {\n              this.app.progress.hide();\n              return false;\n            }\n          }.bind(this),\n          success: function (response) {\n            this._complete(response, e);\n          }.bind(this)\n        });\n      }\n    },\n    // complete\n    _complete: function _complete(response, e) {\n      if (response && response.error) {\n        this._setStatus('error');\n\n        if (this.p.error) {\n          this.app.broadcast('upload.error', {\n            response: response\n          });\n          this.app.api(this.p.error, response, e);\n        }\n      } else {\n        this._removeStatus();\n\n        if (this.p.success) {\n          this.app.broadcast('upload.complete', {\n            response: response\n          });\n          this.app.api(this.p.success, response, e);\n        }\n      }\n\n      setTimeout(this.app.progress.hide.bind(this.app), 500);\n    }\n  });\n  ArticleEditor.add('module', 'progress', {\n    stop: function stop() {\n      this.hide();\n    },\n    show: function show() {\n      this.hide();\n      this.$progress = this.dom('<div>');\n      this.$progress.attr('id', this.prefix + '-progress');\n      this.$progress.addClass(this.prefix + '-editor-progress');\n      this.$progressBar = this.dom('<span>');\n      this.$progress.append(this.$progressBar);\n      this.app.$body.append(this.$progress);\n    },\n    hide: function hide(settings) {\n      this.app.$body.find('#' + this.prefix + '-progress').remove();\n    }\n  });\n  ArticleEditor.add('module', 'sync', {\n    build: function build() {\n      this.syncedHtml = this.app.$element.val();\n    },\n    trigger: function trigger() {\n      if (!this.opts.editor.sync) return;\n\n      var html = this._getHtml();\n\n      if (this.is(html)) {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(function () {\n          this._sync(html);\n        }.bind(this), 200);\n      }\n    },\n    invoke: function invoke() {\n      var html = this._getHtml();\n\n      this.syncedHtml = html;\n\n      this._sync(html);\n    },\n    is: function is(html) {\n      var sync = false;\n\n      if (this.syncedHtml !== html) {\n        this.syncedHtml = html;\n        sync = true;\n      }\n\n      return sync;\n    },\n    // private\n    _getHtml: function _getHtml() {\n      var html = this.app.editor.getLayout().html();\n      return this.app.parser.unparse(html);\n    },\n    _sync: function _sync(html) {\n      var event = this.app.broadcast('editor.before.change', {\n        html: html\n      });\n\n      if (!event.isStopped()) {\n        this.app.$element.val(event.get('html'));\n        this.app.autosave.send();\n        this.app.state.trigger();\n        this.app.broadcast('editor.change', event);\n      }\n    }\n  });\n  ArticleEditor.add('module', 'autosave', {\n    send: function send() {\n      if (this.opts.autosave.url) {\n        this._sending();\n      }\n    },\n    // private\n    _getName: function _getName() {\n      var name;\n\n      if (this.opts.autosave.name) {\n        name = this.opts.autosave.name;\n      } else {\n        name = this.app.$element.attr('name');\n        name = !name ? 'content' + this.uuid : name;\n      }\n\n      return name;\n    },\n    _sending: function _sending() {\n      var name = this._getName();\n\n      var data = {};\n      data[name] = this.app.$element.val();\n      data = this.app.utils.extendData(data, this.opts.autosave.data);\n      this.ajax.post({\n        url: this.opts.autosave.url,\n        data: data,\n        before: function (xhr) {\n          var event = this.app.broadcast('autosave.before.send', {\n            xhr: xhr,\n            name: name,\n            data: data\n          });\n\n          if (event.isStopped()) {\n            return false;\n          }\n        }.bind(this),\n        success: function (response) {\n          this._complete(response, name, data);\n        }.bind(this)\n      });\n    },\n    _complete: function _complete(response, name, data) {\n      var callback = response && response.error ? 'autosave.error' : 'autosave.send';\n      this.app.broadcast(callback, {\n        name: name,\n        data: data,\n        response: response\n      });\n    }\n  });\n  ArticleEditor.add('module', 'tidy', {\n    init: function init() {},\n    parse: function parse(code) {\n      // clean setup\n      var ownLine = [];\n      var contOwnLine = [];\n      var newLevel = ['p', 'ul', 'ol', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'figure', 'figcaption', 'table', 'thead', 'tbody', 'tfoot', 'tr', 'td', 'th'];\n      this.lineBefore = new RegExp('^<(/?' + ownLine.join('|/?') + '|' + contOwnLine.join('|') + ')[ >]');\n      this.lineAfter = new RegExp('^<(br|/?' + ownLine.join('|/?') + '|/' + contOwnLine.join('|/') + ')[ >]');\n      this.newLevel = new RegExp('^</?(' + newLevel.join('|') + ')[ >]');\n      var i = 0,\n          codeLength = code.length,\n          point = 0,\n          start = null,\n          end = null,\n          tag = '',\n          out = '',\n          cont = '';\n      this.cleanlevel = 0;\n\n      for (; i < codeLength; i++) {\n        point = i; // if no more tags, copy and exit\n\n        if (-1 === code.substr(i).indexOf('<')) {\n          out += code.substr(i);\n          return this.finish(out);\n        } // copy verbatim until a tag\n\n\n        while (point < codeLength && code.charAt(point) !== '<') {\n          point++;\n        }\n\n        if (i !== point) {\n          cont = code.substr(i, point - i);\n\n          if (!cont.match(/^\\s{2,}$/g)) {\n            if ('\\n' === out.charAt(out.length - 1)) out += this.getTabs();else if ('\\n' === cont.charAt(0)) {\n              out += '\\n' + this.getTabs();\n              cont = cont.replace(/^\\s+/, '');\n            }\n            out += cont;\n          }\n\n          if (cont.match(/\\n/)) out += '\\n' + this.getTabs();\n        }\n\n        start = point; // find the end of the tag\n\n        while (point < codeLength && '>' !== code.charAt(point)) {\n          point++;\n        }\n\n        tag = code.substr(start, point - start);\n        i = point;\n        var t;\n\n        if ('!--' === tag.substr(1, 3)) {\n          if (!tag.match(/--$/)) {\n            while ('-->' !== code.substr(point, 3)) {\n              point++;\n            }\n\n            point += 2;\n            tag = code.substr(start, point - start);\n            i = point;\n          }\n\n          if ('\\n' !== out.charAt(out.length - 1)) out += '\\n';\n          out += this.getTabs();\n          out += tag + '>\\n';\n        } else if ('!' === tag[1]) {\n          out = this.placeTag(tag + '>', out);\n        } else if ('?' === tag[1]) {\n          out += tag + '>\\n';\n        } else if (t === tag.match(/^<(script|style|pre)/i)) {\n          t[1] = t[1].toLowerCase();\n          tag = this.cleanTag(tag);\n          out = this.placeTag(tag, out);\n          end = String(code.substr(i + 1)).toLowerCase().indexOf('</' + t[1]);\n\n          if (end) {\n            cont = code.substr(i + 1, end);\n            i += end;\n            out += cont;\n          }\n        } else {\n          tag = this.cleanTag(tag);\n          out = this.placeTag(tag, out);\n        }\n      }\n\n      return this.finish(out);\n    },\n    getTabs: function getTabs() {\n      var s = '';\n\n      for (var j = 0; j < this.cleanlevel; j++) {\n        s += '    ';\n      }\n\n      return s;\n    },\n    finish: function finish(code) {\n      code = code.replace(/\\n\\s*\\n/g, '\\n');\n      code = code.replace(/^[\\s\\n]*/, '');\n      code = code.replace(/[\\s\\n]*$/, '');\n      code = code.replace(/<script(.*?)>\\n<\\/script>/gi, '<script$1></script>');\n      this.cleanlevel = 0;\n      return code;\n    },\n    cleanTag: function cleanTag(tag) {\n      var tagout = '';\n      tag = tag.replace(/\\n/g, ' ');\n      tag = tag.replace(/\\s{2,}/g, ' ');\n      tag = tag.replace(/^\\s+|\\s+$/g, ' ');\n      var suffix = '';\n\n      if (tag.match(/\\/$/)) {\n        suffix = '/';\n        tag = tag.replace(/\\/+$/, '');\n      }\n\n      var m;\n\n      while (m = /\\s*([^= ]+)(?:=((['\"']).*?\\3|[^ ]+))?/.exec(tag)) {\n        if (m[2]) tagout += m[1].toLowerCase() + '=' + m[2];else if (m[1]) tagout += m[1].toLowerCase();\n        tagout += ' ';\n        tag = tag.substr(m[0].length);\n      }\n\n      return tagout.replace(/\\s*$/, '') + suffix + '>';\n    },\n    placeTag: function placeTag(tag, out) {\n      var nl = tag.match(this.newLevel);\n\n      if (tag.match(this.lineBefore) || nl) {\n        out = out.replace(/\\s*$/, '');\n        out += '\\n';\n      }\n\n      if (nl && '/' === tag.charAt(1)) this.cleanlevel--;\n      if ('\\n' === out.charAt(out.length - 1)) out += this.getTabs();\n      if (nl && '/' !== tag.charAt(1)) this.cleanlevel++;\n      out += tag;\n\n      if (tag.match(this.lineAfter) || tag.match(this.newLevel)) {\n        out = out.replace(/ *$/, '');\n        out += '\\n';\n      }\n\n      return out;\n    }\n  });\n  ArticleEditor.add('module', 'autolink', {\n    parse: function parse(html) {\n      if (!this.opts.paste.autolink) {\n        return html;\n      }\n\n      var storedComments = []; // store comments\n\n      html = this.app.content.storeComments(html, storedComments); // remove doctype tag\n\n      html = this.app.content.removeDoctype(html);\n      var tags = ['figure', 'html', 'form', 'pre', 'iframe', 'code', 'a', 'img', 'link', 'script'];\n      var stored = [];\n      var z = 0; // store tags\n\n      for (var i = 0; i < tags.length; i++) {\n        var reTags = tags[i] === 'img' || tags[i] === 'html' ? '<' + tags[i] + '[^>]*>' : '<' + tags[i] + '[^>]*>([\\\\w\\\\W]*?)</' + tags[i] + '>';\n        var matched = html.match(new RegExp(reTags, 'gi'));\n\n        if (matched !== null) {\n          for (var y = 0; y < matched.length; y++) {\n            html = html.replace(matched[y], '#####replaceparse' + z + '#####');\n            stored.push(matched[y]);\n            z++;\n          }\n        }\n      } // links\n\n\n      html = html.replace('&amp;', '&');\n\n      if (html.match(this.opts.regex.url) && !html.match(this.opts.regex.imageurl)) {\n        html = this._formatLinks(html);\n      } // restore\n\n\n      html = this._restoreReplaced(stored, html);\n      html = this.app.content.restoreComments(html, storedComments); // repeat for nested tags\n\n      html = this._restoreReplaced(stored, html);\n      return html;\n    },\n    // private\n    _formatLinks: function _formatLinks(content) {\n      var matches = content.match(this.opts.regex.url);\n      var obj = {};\n\n      for (var i = 0; i < matches.length; i++) {\n        var href = matches[i],\n            text = href;\n        var linkProtocol = href.match(/(https?|ftp):\\/\\//i) !== null ? '' : 'http://';\n        var regexB = [\"/\", \"&\", \"=\"].indexOf(href.slice(-1)) !== -1 ? '' : '\\\\b';\n        var target = this.opts.paste.linkTarget !== false ? ' target=\"' + this.opts.paste.linkTarget + '\"' : '';\n        text = text.length > this.opts.link.size ? text.substring(0, this.opts.link.size) + '...' : text;\n        text = text.search('%') === -1 ? decodeURIComponent(text) : text; // escaping url\n\n        var regexp = '(' + href.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&') + regexB + ')';\n        obj[regexp] = '<a href=\"' + linkProtocol + href.trim() + '\"' + target + '>' + text.trim() + '</a>';\n      } // replace\n\n\n      for (var key in obj) {\n        content = content.replace(new RegExp(key, 'g'), obj[key]);\n      }\n\n      return content;\n    },\n    _restoreReplaced: function _restoreReplaced(stored, html) {\n      for (var i = 0; i < stored.length; i++) {\n        html = html.replace('#####replaceparse' + i + '#####', stored[i]);\n      }\n\n      return html;\n    }\n  });\n  ArticleEditor.add('module', 'state', {\n    init: function init() {\n      this.started = false;\n      this.storage = false;\n      this.state = false;\n      this.passed = true;\n      this.undoStorage = [];\n      this.redoStorage = [];\n    },\n    load: function load() {\n      this.clear();\n      this.trigger(true);\n    },\n    stop: function stop() {\n      this.clear();\n    },\n    clear: function clear() {\n      this.storage = false;\n      this.state = false;\n      this.passed = true;\n      this.undoStorage = [];\n      this.redoStorage = [];\n    },\n    get: function get() {\n      return this.undoStorage;\n    },\n    add: function add(e) {\n      if (e && (e.ctrlKey || e.metaKey || this._isUndo(e) || this._isRedo(e)) || !this.app.observer.trigger) {\n        return;\n      } // state\n\n\n      this.state = this._createState();\n\n      if (this.started === false) {\n        this._setState(this.state, 0);\n\n        this.started = true;\n      }\n    },\n    trigger: function trigger(start) {\n      if (!this.passed) {\n        return;\n      } // storage\n\n\n      var storage = this._createState(); // storage\n\n\n      if (this.state) {\n        storage = this.state;\n      } else if (!this.state && !start) {\n        storage = this.storage;\n        this.started = true;\n      }\n\n      this._addState(storage); // previous state\n\n\n      this.storage = this._createState();\n      this.state = false;\n    },\n    listen: function listen(e) {\n      // undo\n      if (this._isUndo(e)) {\n        e.preventDefault();\n        this.undo();\n        return true;\n      } // redo\n      else if (this._isRedo(e)) {\n          e.preventDefault();\n          this.redo();\n          return true;\n        }\n\n      this.passed = true;\n    },\n    undo: function undo() {\n      if (!this._hasUndo()) return;\n      this.passed = false;\n\n      var state = this._getUndo();\n\n      this._setRedo();\n\n      var $parsed = this.app.parser.parse(state[0]);\n      this.app.editor.getLayout().html($parsed.children());\n\n      this._rebuild(state, 'undo');\n\n      var instance = this.app.block.get();\n      var el = instance && instance.isEditable() ? instance.getBlock() : false;\n      this.app.offset.set(el, state[1]);\n    },\n    redo: function redo() {\n      if (!this._hasRedo()) return;\n      this.passed = false;\n      var state = this.redoStorage.pop();\n\n      this._addState(state);\n\n      var $parsed = this.app.parser.parse(state[0]);\n      this.app.editor.getLayout().html($parsed.children());\n\n      this._rebuild(state, 'redo');\n\n      var instance = this.app.block.get();\n      var el = instance && instance.isEditable() ? instance.getBlock() : false;\n      this.app.offset.set(el, state[1]);\n    },\n    // private\n    _rebuild: function _rebuild(state, type) {\n      this.app.editor.build();\n      this.app.editor.getLayout().find('.' + this.prefix + '-block-state').each(function ($node) {\n        this.app.block.set($node);\n      }.bind(this));\n      this.app.broadcast('state.' + type, {\n        html: state[0],\n        offset: state[1]\n      });\n    },\n    _isUndo: function _isUndo(e) {\n      var key = e.which;\n      var ctrl = e.ctrlKey || e.metaKey;\n      return ctrl && key === 90 && !e.shiftKey && !e.altKey;\n    },\n    _isRedo: function _isRedo(e) {\n      var key = e.which;\n      var ctrl = e.ctrlKey || e.metaKey;\n      return ctrl && (key === 90 && e.shiftKey || key === 89 && !e.shiftKey) && !e.altKey;\n    },\n    _hasUndo: function _hasUndo() {\n      return this.undoStorage.length !== 0;\n    },\n    _hasRedo: function _hasRedo() {\n      return this.redoStorage.length !== 0;\n    },\n    _getUndo: function _getUndo() {\n      return this.undoStorage.length === 1 ? this.undoStorage[0] : this.undoStorage.pop();\n    },\n    _createState: function _createState() {\n      var html = this.app.editor.getLayout().html();\n      html = this.app.utils.wrap(html, function ($w) {\n        $w.find('.' + this.prefix + '-block-focus').addClass(this.prefix + '-block-state');\n      }.bind(this));\n      var instance = this.app.block.get();\n      var el = instance && instance.isEditable() ? instance.getBlock() : false;\n      var unparsed = this.app.parser.unparse(html);\n      var offset = this.app.offset.get(el);\n      return {\n        html: unparsed,\n        offset: offset\n      };\n    },\n    _setState: function _setState(state, pos) {\n      this.undoStorage[pos] = [state.html, state.offset];\n    },\n    _addState: function _addState(state) {\n      var last = this.undoStorage[this.undoStorage.length - 1];\n\n      if (typeof last === 'undefined' || last[0] !== state.html) {\n        this.undoStorage.push([state.html, state.offset]);\n\n        this._removeOverStorage();\n      } else {\n        last[1] = state.offset;\n      }\n    },\n    _setRedo: function _setRedo() {\n      var state = this._createState();\n\n      this.redoStorage.push([state.html, state.offset]);\n      this.redoStorage = this.redoStorage.slice(0, this.opts.state.limit);\n    },\n    _removeOverStorage: function _removeOverStorage() {\n      if (this.undoStorage.length > this.opts.state.limit) {\n        this.undoStorage = this.undoStorage.slice(0, this.undoStorage.length - this.opts.state.limit);\n      }\n    }\n  });\n  ArticleEditor.add('module', 'statusbar', {\n    init: function init() {\n      this.items = {};\n    },\n    start: function start() {\n      this._build();\n    },\n    add: function add(name, html) {\n      return this.update(name, html);\n    },\n    update: function update(name, html) {\n      var $item;\n\n      if (typeof this.items[name] !== 'undefined') {\n        $item = this.items[name];\n      } else {\n        $item = this.dom('<li>');\n        this.$statusbar.append($item);\n        this.items[name] = $item;\n      }\n\n      return $item.html(html);\n    },\n    get: function get(name) {\n      return this.items[name] ? this.items[name] : this.items;\n    },\n    remove: function remove(name) {\n      if (this.items[name]) {\n        this.items[name].remove();\n        delete this.items[name];\n      }\n    },\n    clear: function clear() {\n      this.items = {};\n      this.$statusbar.html('');\n    },\n    // private\n    _build: function _build() {\n      this.$statusbar = this.dom('<ul>');\n      this.$statusbar.addClass(this.prefix + '-statusbar ' + this.prefix + '-statusbar-' + this.uuid);\n      this.$statusbar.attr('dir', this.opts.editor.direction);\n      this.app.container.get('statusbar').append(this.$statusbar);\n    }\n  });\n  ArticleEditor.add('module', 'popup', {\n    init: function init() {\n      this.name = false;\n      this.stack = false;\n      this.button = false;\n    },\n    start: function start() {\n      this._build();\n\n      this._buildDepth();\n    },\n    stop: function stop() {\n      this._stopEvents();\n\n      if (this.$popup) {\n        this.$popup.remove();\n      }\n    },\n    isOpen: function isOpen(name) {\n      var opened = this.$popup.hasClass('open');\n\n      if (name) {\n        return this._getName() === name && opened;\n      }\n\n      return opened;\n    },\n    create: function create(name, params) {\n      if (this.isOpen(name)) {\n        return this.stack;\n      }\n\n      this._reset(name);\n\n      this.name = name;\n\n      if (params) {\n        params.collapse = false;\n      } // create stack\n\n\n      this.stack = this._createStack(name, params, true);\n      this.stack.setActive();\n      return this.stack;\n    },\n    add: function add(name, params) {\n      return this._createStack(name, params);\n    },\n    open: function open(params) {\n      // all popups are closed\n      if (!this.isOpen()) {\n        this._open(params);\n      } // current open\n      else if (this.isOpen(this.name)) {\n          this.close(false);\n        } // another is opened\n        else {\n            this.close(false);\n\n            this._open(params, false);\n          }\n    },\n    close: function close(e) {\n      if (!this.isOpen()) return;\n      if (e && this._isPopupTarget(e)) return; // close\n\n      this._stopEvents();\n\n      this._resetToolbarToggledButton(); // selection\n\n\n      if (e !== false) {\n        this.app.selection.restore();\n      }\n\n      this.$popup.hide();\n\n      this._closed();\n    },\n    getElement: function getElement() {\n      return this.$popup;\n    },\n    getButton: function getButton() {\n      return this.button;\n    },\n    getStack: function getStack(name) {\n      return name ? this._findStack(name) : this._findStackActive();\n    },\n    renderHeaderBack: function renderHeaderBack(stack) {\n      this._buildHeaderBack(stack);\n    },\n    closeStacks: function closeStacks() {\n      this._findStacks().each(function ($node) {\n        var stack = $node.dataget('instance');\n        stack.close();\n      });\n    },\n    updatePosition: function updatePosition(e) {\n      this._buildPosition(e);\n\n      this._cropHeight();\n    },\n    // open\n    _open: function _open(params, animation) {\n      // input focus\n      this.focus = params && params.focus ? params.focus : false; // selection\n\n      this.app.selection.save(); // build\n\n      this._buildButton(params);\n\n      this._buildName();\n\n      this._setToolbarToggledButton();\n\n      this._startEvents(); // broadcast\n\n\n      this.app.broadcast('popup.before.open'); // render stack\n\n      this.stack.render(); // build header\n\n      this._buildHeader(); // build position\n\n\n      this._buildPosition(); // show\n\n\n      if (animation === false) {\n        this.$popup.show();\n\n        this._opened();\n      } else {\n        this.$popup.fadeIn(100, this._opened.bind(this));\n      }\n    },\n    // build\n    _build: function _build() {\n      this.$popup = this.dom('<div>').addClass(this.prefix + '-popup ' + this.prefix + '-popup-' + this.uuid).hide();\n      this.$popup.attr('dir', this.opts.editor.direction); // header\n\n      this.$header = this.dom('<div>').addClass(this.prefix + '-popup-header');\n      this.$popup.append(this.$header); // stacks\n\n      this.$stacks = this.dom('<div>').addClass(this.prefix + '-popup-stacks');\n      this.$popup.append(this.$stacks); // append\n\n      this.app.$body.append(this.$popup);\n    },\n    _buildDepth: function _buildDepth() {\n      if (this.opts.bsmodal) {\n        this.$popup.css('z-index', 1052);\n      }\n    },\n    _buildButton: function _buildButton(params) {\n      if (!params) return;\n      this.button = params.hasOwnProperty('button') ? params.button : false;\n    },\n    _buildFocus: function _buildFocus() {\n      if (this.focus) {\n        this.getStack().setFocus(this.focus);\n      }\n    },\n    _buildName: function _buildName() {\n      this.$popup.attr('data-' + this.prefix + '-popup-name', this.name);\n    },\n    _buildPosition: function _buildPosition(e) {\n      var topFix = 1;\n      var pos = this._isButton() ? this._buildPositionButton() : this._buildPositionModal(); // set\n\n      this.$popup.css({\n        top: pos.top - topFix + 'px',\n        left: pos.left + 'px'\n      });\n    },\n    _buildPositionButton: function _buildPositionButton() {\n      var editorRect = this.app.editor.getFrameRect();\n      var offset = this.button.getOffset();\n      var dim = this.button.getDimension();\n      var popupWidth = this.$popup.width();\n      var pos = {};\n\n      if (this._isToolbarButton()) {\n        pos = {\n          top: offset.top + dim.height,\n          left: offset.left\n        }; // out of the right edge\n\n        if (pos.left + popupWidth > editorRect.right) {\n          pos.left = offset.left + dim.width - popupWidth;\n        }\n      } else {\n        pos = {\n          top: offset.top + editorRect.top + dim.height,\n          left: offset.left + editorRect.left + dim.width / 2 - popupWidth / 2\n        }; // out of the right edge\n\n        if (pos.left + popupWidth > editorRect.right) {\n          pos.left = editorRect.left + editorRect.width - popupWidth;\n        }\n      } // out of the left edge\n\n\n      if (pos.left < editorRect.left || pos.left < 0) {\n        pos.left = editorRect.left;\n      }\n\n      return pos;\n    },\n    _buildPositionModal: function _buildPositionModal() {\n      var $container = this.app.container.get('bars');\n      var offset = $container.offset();\n      var height = $container.height();\n      var pos = {\n        top: offset.top + height,\n        left: offset.left\n      };\n      return pos;\n    },\n    _buildHeader: function _buildHeader() {\n      var stacks = [];\n      this.$header.html('');\n\n      this._findStacks().each(function ($node) {\n        var stack = $node.dataget('instance');\n        var title = stack.getTitle();\n\n        if (title) {\n          stacks.push(stack);\n        }\n      });\n\n      var len = stacks.length; // path\n\n      if (len !== 0) {\n        this._buildPath();\n\n        this._buildClose();\n      } // items\n\n\n      for (var i = 0; i < len; i++) {\n        var $item = this._buildPathItem(stacks[i]);\n\n        this.$path.append($item);\n      }\n    },\n    _buildHeaderBack: function _buildHeaderBack(stack) {\n      this._buildPath();\n\n      this._buildBack(stack);\n\n      this._buildBackItem(stack);\n    },\n    _buildPath: function _buildPath() {\n      var name = this.prefix + '-popup-header-path';\n      this.$header.find('.' + name).remove();\n      this.$path = this.dom('<div>').addClass(name);\n      this.$header.append(this.$path);\n    },\n    _buildPathItem: function _buildPathItem(stack) {\n      var title = stack.getTitle();\n      var $item = this.dom('<span>').addClass(this.prefix + '-popup-header-item');\n      $item.html(this.lang.parse(title));\n      $item.dataset('stack', stack);\n      $item.on('click', this._catchOpen.bind(this));\n\n      if (stack.isActive()) {\n        $item.addClass('active');\n      }\n\n      return $item;\n    },\n    _buildBack: function _buildBack(stack) {\n      var $back = this.dom('<span>').addClass(this.prefix + '-popup-header-item');\n      $back.html(this.lang.get('popup.back'));\n      $back.dataset('stack-prev', stack.prev);\n      $back.dataset('stack-current', stack);\n      $back.on('click', this._catchBack.bind(this));\n      this.$path.append($back);\n    },\n    _buildBackItem: function _buildBackItem(stack) {\n      var title = stack.getTitle();\n      var $item = this.dom('<span>').addClass(this.prefix + '-popup-header-item');\n      $item.html(this.lang.parse(title));\n      $item.addClass('active');\n      this.$path.append($item);\n    },\n    _buildClose: function _buildClose() {\n      var $close = this.dom('<span>').addClass(this.prefix + '-popup-close');\n      $close.one('click', this._catchClose.bind(this));\n      this.$header.append($close);\n    },\n    // create\n    _createStack: function _createStack(name, params) {\n      var stack = this.app.create('popup.stack', name, params);\n      this.$stacks.append(stack.getElement());\n      return stack;\n    },\n    // catch\n    _catchClose: function _catchClose(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.close();\n    },\n    _catchOpen: function _catchOpen(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $target = this.dom(e.target);\n      var targetStack = $target.dataget('stack');\n      var $items = this.$path.find('.' + this.prefix + '-popup-header-item');\n      $items.each(function ($item) {\n        var stack = $item.dataget('stack');\n        stack.close();\n        $item.removeClass('active');\n      });\n      $target.addClass('active');\n      targetStack.open();\n    },\n    _catchBack: function _catchBack(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $item = this.dom(e.target);\n      var prev = $item.dataget('stack-prev');\n      var current = $item.dataget('stack-current');\n      current.collapse();\n      prev.rebuild();\n      prev.open(); // rebuild header\n\n      this._buildHeader();\n    },\n    // find\n    _findStacks: function _findStacks() {\n      return this.$popup.find('.' + this.prefix + '-popup-stack');\n    },\n    _findStack: function _findStack(name) {\n      return this.$popup.find('[data-' + this.prefix + '-popup-stack-name=' + name + ']').dataget('instance');\n    },\n    _findStackActive: function _findStackActive() {\n      return this.$popup.find('.' + this.prefix + '-popup-stack.open').dataget('instance');\n    },\n    // events\n    _startEvents: function _startEvents() {\n      var $target = this.app.scroll.getTarget();\n      var eventname = this.prefix + '-popup';\n      $target.on('resize.' + eventname, this.updatePosition.bind(this));\n      $target.on('scroll.' + eventname, this.updatePosition.bind(this));\n      this.app.editor.getFrame().on('resize.' + eventname, this.updatePosition.bind(this));\n    },\n    _stopEvents: function _stopEvents() {\n      var eventname = this.prefix + '-popup';\n      this.app.scroll.getTarget().off('.' + eventname);\n      this.app.editor.getFrame().off('.' + eventname);\n    },\n    // opened\n    _opened: function _opened() {\n      this._buildFocus();\n\n      this._cropHeight();\n\n      this.$popup.addClass('open'); // broadcast\n\n      this.app.broadcast('popup.open');\n    },\n    // closed\n    _closed: function _closed() {\n      this.$popup.removeAttr('data-' + this.prefix + '-popup-name');\n      this.$popup.removeClass('open'); // broadcast\n\n      this.app.broadcast('popup.close');\n    },\n    // crop\n    _cropHeight: function _cropHeight() {\n      var $target = this.app.scroll.getTarget();\n      var $toolbar = this.app.toolbar.getElement();\n      var tolerance = 10;\n      var offset = this.$popup.offset();\n      var top = offset.top - $target.scrollTop();\n      var targetHeight = $target.height();\n      var cropHeight = targetHeight - top - tolerance;\n\n      if (this.app.scroll.isTarget()) {\n        top = $toolbar.offset().top - $target.offset().top + $toolbar.height();\n        var targetOffset = $target.offset();\n        var winHeight = this.app.$win.height();\n        var winCropHeight = winHeight - targetOffset.top;\n        targetHeight = winCropHeight > targetHeight ? targetHeight : winCropHeight;\n        cropHeight = targetHeight - top - tolerance;\n      }\n\n      this.$popup.css('max-height', cropHeight + 'px');\n    },\n    // set\n    _setToolbarToggledButton: function _setToolbarToggledButton() {\n      this.app.toolbar.unsetToggled();\n      if (!this._isToolbarButton()) return;\n      var name = this.button.getName();\n      this.app.toolbar.setToggled(name);\n    },\n    // is\n    _isButton: function _isButton() {\n      return this.button;\n    },\n    _isToolbarButton: function _isToolbarButton() {\n      return this.button && (this.button.type === 'toolbar' || this.button.type === 'topbar');\n    },\n    _isPopupTarget: function _isPopupTarget(e) {\n      return this.dom(e.target).closest('.' + this.prefix + '-popup').length !== 0;\n    },\n    // get\n    _getName: function _getName() {\n      return this.$popup.attr('data-' + this.prefix + '-popup-name');\n    },\n    // reset\n    _reset: function _reset(name) {\n      this.stack = false;\n      this.button = false;\n      this.$header.html('');\n      this.$stacks.html('');\n      this.$popup.removeClass('has-items has-form has-footer');\n    },\n    _resetToolbarToggledButton: function _resetToolbarToggledButton() {\n      if (!this.button) return;\n      var name = this.button.getName();\n      this.app.toolbar.unsetToggled(name);\n    }\n  });\n  ArticleEditor.add('class', 'popup.item', {\n    defaults: {\n      container: false,\n      title: false,\n      html: false,\n      active: false,\n      divider: false,\n      remover: false,\n      classname: false,\n      params: false,\n      instance: false,\n      observer: false,\n      command: false\n    },\n    init: function init(stack, name, params) {\n      this.stack = stack;\n      this.name = name;\n      this.params = this._buildParams(params);\n\n      this._build();\n\n      this._buildContainer();\n\n      this._buildIcon();\n\n      this._buildTitle();\n\n      this._buildImage();\n\n      this._buildShortcut();\n\n      this._buildActive();\n\n      this._buildHidden();\n\n      this._buildDivider();\n\n      this._buildCommand();\n\n      this._buildRemover();\n    },\n    // get\n    getStack: function getStack() {\n      return this.stack;\n    },\n    getName: function getName() {\n      return this.name;\n    },\n    getParams: function getParams() {\n      return this.params.params;\n    },\n    getElement: function getElement() {\n      return this.$item;\n    },\n    getInstance: function getInstance() {\n      return this.params.instance;\n    },\n    // private\n    _build: function _build() {\n      this.$item = this.params.html ? this.dom(this.params.html) : this.dom('<div>');\n      this.$item.addClass(this.prefix + '-popup-item ' + this.prefix + '-popup-stack-item');\n      this.$item.attr({\n        'name': this.name\n      });\n    },\n    _buildContainer: function _buildContainer() {\n      if (this.params.container) {\n        this.$item.addClass(this.prefix + '-popup-item-container');\n      }\n    },\n    _buildTitle: function _buildTitle() {\n      if (this.params.title) {\n        this.$title = this.dom('<span>').addClass(this.prefix + '-popup-item-title');\n        this.$title.html(this.lang.parse(this.params.title));\n        this.$item.append(this.$title);\n      }\n    },\n    _buildImage: function _buildImage() {\n      if (this.params.image) {\n        this.$image = this.dom('<span>').addClass(this.prefix + '-popup-item-image');\n        this.$image.html(this.params.image);\n        this.$item.append(this.$image);\n      }\n    },\n    _buildIcon: function _buildIcon() {\n      if (this.params.icon) {\n        this.$icon = this.dom('<span>').addClass(this.prefix + '-popup-item-icon'); // html icon\n\n        if (this.params.icon.search(/</) !== -1) {\n          this.$icon.html(this.params.icon);\n        } else {\n          this.$icon.addClass(this.prefix + '-icon-' + this.params.icon);\n        }\n\n        this.$item.append(this.$icon);\n      }\n    },\n    _buildShortcut: function _buildShortcut() {\n      if (this.params.shortcut) {\n        var meta = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform) ? '<b>&#8984;</b>' : 'ctrl';\n        meta = this.params.shortcut.replace('Ctrl', meta);\n        this.$shortcut = this.dom('<span>').addClass(this.prefix + '-popup-item-shortcut');\n        this.$shortcut.html(meta);\n        this.$item.append(this.$shortcut);\n      }\n    },\n    _buildParams: function _buildParams(params) {\n      return $ARX.extend({}, true, this.defaults, params);\n    },\n    _buildActive: function _buildActive() {\n      if (this.params.active) {\n        this.$item.addClass('active');\n      }\n    },\n    _buildHidden: function _buildHidden() {\n      if (this.params.hidden) {\n        this.$item.addClass(this.prefix + '-popup-item-hidden');\n      }\n    },\n    _buildDivider: function _buildDivider() {\n      if (this.params.divider) {\n        this.$item.addClass(this.prefix + '-popup-item-divider-' + this.params.divider);\n      }\n    },\n    _buildCommand: function _buildCommand() {\n      if (this.params.command) {\n        this.$item.on('click.' + this.prefix + '-popup-item-' + this.uuid, this._catch.bind(this));\n        this.$item.attr('command', this.params.command);\n      }\n    },\n    _buildRemover: function _buildRemover() {\n      if (!this.params.title) return;\n\n      if (this.params.remover) {\n        var $trash = this.dom('<span>').addClass(this.prefix + '-popup-item-trash ' + this.prefix + '-icon-trash');\n        $trash.attr('command', this.params.remover);\n        $trash.on('click.' + this.prefix + '-popup-item-' + this.uuid, this._catchRemover.bind(this));\n        this.$item.append($trash);\n      }\n    },\n    _catchRemover: function _catchRemover(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $item = this.dom(e.target).closest('.' + this.prefix + '-popup-stack-item');\n      var $trash = this.dom(e.target).closest('.' + this.prefix + '-popup-item-trash');\n      var command = $trash.attr('command');\n      var name = $item.attr('name');\n      this.app.api(command, this, name);\n      $item.fadeOut(200, function ($node) {\n        $node.remove();\n      });\n    },\n    _catch: function _catch(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $item = this.dom(e.target).closest('.' + this.prefix + '-popup-stack-item');\n      var name = $item.attr('name');\n      var command = $item.attr('command');\n      this.stack.$items.find('.' + this.prefix + '-popup-stack-item').removeClass('active');\n      $item.addClass('active'); // command\n\n      this.app.api(command, this.getParams(), this, name, e);\n    }\n  });\n  ArticleEditor.add('class', 'popup.stack', {\n    defaults: {\n      title: false,\n      type: false,\n      // grid\n      name: false,\n      path: false,\n      width: false,\n      // string like '200px' or '100%'\n      setter: false,\n      getter: false,\n      builder: false,\n      observer: false,\n      instance: false,\n      collapse: true,\n      form: false,\n      items: false,\n      focus: false,\n      footer: false\n    },\n    init: function init(name, params) {\n      this.defaultWidth = '240px';\n      this.prev = this.app.popup.getStack();\n      this.name = name;\n      this.tools = {};\n      this.params = this._buildParams(params);\n      this.$popup = this.app.popup.getElement(); // data\n\n      this.instance = false;\n      this.width = false;\n      this.type = false;\n      this.data = false;\n      this.form = false;\n      this.items = false;\n      this.footer = false;\n      this.getter = false;\n      this.setter = false; // build\n\n      this._build(); // observe\n\n\n      if (this.params.observer) {\n        this.app.api(this.params.observer, this);\n      }\n    },\n    rebuild: function rebuild() {\n      this._renderItems();\n    },\n    open: function open(params) {\n      if (this.isCollapsed()) {\n        this.app.popup.closeStacks();\n        this.app.popup.renderHeaderBack(this);\n      } // active\n\n\n      this.setActive(); // broadcast\n\n      this.app.broadcast('popup.before.open'); // render\n\n      this.render();\n      this.app.popup.updatePosition(); // focus\n\n      if (params && params.focus) {\n        this.setFocus(params.focus);\n      } // broadcast\n\n\n      this.app.broadcast('popup.open');\n    },\n    close: function close() {\n      this.$stack.hide();\n      this.$stack.removeClass('open');\n    },\n    collapse: function collapse() {\n      this.$stack.remove();\n    },\n    render: function render() {\n      this._renderWidth();\n\n      this._renderType();\n\n      this._renderItems();\n\n      this._renderForm();\n\n      this._renderFooter();\n    },\n    // updatePosition\n    updatePosition: function updatePosition() {\n      this.app.popup.updatePosition();\n    },\n    // is\n    isCollapsed: function isCollapsed() {\n      return this.params.collapse;\n    },\n    isActive: function isActive() {\n      return this.$stack.hasClass('open');\n    },\n    // set\n    setActive: function setActive() {\n      this.$stack.show();\n      this.$stack.addClass('open');\n    },\n    setData: function setData(data) {\n      this.data = data;\n    },\n    setForm: function setForm(form) {\n      this.form = form;\n    },\n    setFooter: function setFooter(footer) {\n      this.footer = footer;\n    },\n    setWidth: function setWidth(width) {\n      this.$stack.attr('data-width', width);\n\n      if (width === '100%') {\n        width = this.app.container.get('main').width() + 'px';\n      }\n\n      this.$stack.css('width', width);\n      this.app.$win.on('resize.' + this.prefix + '-stack-' + this.uuid, this._resize.bind(this));\n\n      this._resize();\n    },\n    setFocus: function setFocus(name) {\n      if (typeof this.tools[name] !== 'undefined') {\n        this.tools[name].setFocus();\n      }\n    },\n    setItems: function setItems(items) {\n      this.items = items;\n    },\n    setType: function setType(type) {\n      this.type = type;\n    },\n    // get\n    getElement: function getElement() {\n      return this.$stack;\n    },\n    getTitle: function getTitle() {\n      return this.params.title;\n    },\n    getName: function getName() {\n      return this.name;\n    },\n    getInstance: function getInstance() {\n      return this.instance;\n    },\n    getItems: function getItems() {\n      return this.items;\n    },\n    getTool: function getTool(name) {\n      return typeof this.tools[name] !== 'undefined' ? this.tools[name] : false;\n    },\n    getInput: function getInput(name) {\n      var tool = this.getTool(name);\n      return tool ? tool.getInput() : this.dom();\n    },\n    getFormItem: function getFormItem(name) {\n      var tool = this.getTool(name);\n      return tool ? tool.getInput().closest('.' + this.prefix + '-form-item') : this.dom();\n    },\n    getFormElement: function getFormElement() {\n      return this.$form;\n    },\n    getForm: function getForm() {\n      return this.form;\n    },\n    getFooter: function getFooter() {\n      return this.footer;\n    },\n    getBody: function getBody() {\n      return this.$body;\n    },\n    getData: function getData(name) {\n      var data;\n\n      if (name) {\n        if (typeof this.tools[name] !== 'undefined') {\n          data = this.tools[name].getValue();\n        }\n      } else {\n        data = {};\n\n        for (var key in this.tools) {\n          data[key] = this.tools[key].getValue();\n        }\n      }\n\n      return data;\n    },\n    // build\n    _build: function _build() {\n      this._buildElement();\n\n      this._buildBody();\n\n      this._buildRender();\n    },\n    _buildParams: function _buildParams(params) {\n      return $ARX.extend({}, true, this.defaults, params);\n    },\n    _buildElement: function _buildElement() {\n      this.$stack = this.dom('<div>').addClass(this.prefix + '-popup-stack ' + this.prefix + '-popup-' + this.name);\n      this.$stack.dataset('instance', this);\n      this.$stack.attr('data-' + this.prefix + '-popup-stack-name', this.name);\n      this.$stack.hide();\n    },\n    _buildBody: function _buildBody() {\n      this.$body = this.dom('<div>').addClass(this.prefix + '-popup-body');\n      this.$items = this.dom('<div>').addClass(this.prefix + '-popup-items');\n      this.$stack.append(this.$body);\n    },\n    _buildRender: function _buildRender() {\n      this.width = this.params.width ? this.params.width : this.defaultWidth;\n      this.type = this.params.type;\n      this.form = this.params.form;\n      this.footer = this.params.footer;\n      this.instance = this.params.instance;\n      this.setter = this.params.setter ? this.params.setter : false;\n      this.getter = this.params.getter ? this.params.getter : false;\n      this.data = this.getter ? this.app.api(this.getter, this) : false; // items\n\n      if (this.params.builder) {\n        this.items = this.app.api(this.params.builder, this);\n      } else if (this.params.items) {\n        this.items = this.params.items;\n      }\n    },\n    // render\n    _renderType: function _renderType() {\n      this.$stack.removeClass(this.prefix + '-popup-stack-type-grid');\n\n      if (this.type) {\n        this.$stack.addClass(this.prefix + '-popup-stack-type-' + this.type);\n      }\n    },\n    _renderWidth: function _renderWidth() {\n      this.setWidth(this.width);\n    },\n    _renderForm: function _renderForm() {\n      if (!this.form) return; // build form element\n\n      this.$form = this.dom('<form>').addClass(this.prefix + '-popup-form');\n      this.formitems = this.form;\n\n      this._renderTools();\n\n      this._renderData();\n\n      this.$popup.addClass('has-form'); // append\n\n      this.$body.find('.' + this.prefix + '-popup-form').remove();\n      this.$body.append(this.$form);\n    },\n    _renderTools: function _renderTools() {\n      for (var name in this.formitems) {\n        this._renderTool(name, this.formitems[name]);\n      }\n    },\n    _renderTool: function _renderTool(name, obj) {\n      var tool = this.app.create('tool.' + obj.type, name, obj, this, this.data, this.instance);\n      var $tool = tool.getElement();\n\n      if ($tool) {\n        this.tools[name] = tool;\n        this.$form.append($tool);\n      }\n    },\n    _renderData: function _renderData() {\n      if (!this.data) return;\n\n      for (var name in this.data) {\n        if (typeof this.tools[name] !== 'undefined') {\n          this.tools[name].setValue(this.data[name]);\n        }\n      }\n    },\n    _renderItems: function _renderItems() {\n      this.$popup.removeClass('has-items');\n      if (!this.items) return;\n      this.$popup.addClass('has-items');\n      this.$body.find('.' + this.prefix + '-popup-item').off('.' + this.prefix + '-popup-item-' + this.uuid);\n      this.$items.html('');\n      this.$body.html('');\n      this.$body.append(this.$items); // build items\n\n      for (var name in this.items) {\n        if (this.items[name].hasOwnProperty('observer')) {\n          var res = this.app.api(this.items[name].observer, this.items[name], name, this);\n\n          if (typeof res !== 'undefined') {\n            this.items[name] = res;\n          }\n        }\n\n        if (this.items[name] === false) continue;\n        var item = this.app.create('popup.item', this, name, this.items[name]);\n        this.$items.append(item.getElement());\n      }\n    },\n    _renderFooter: function _renderFooter() {\n      this.$popup.removeClass('has-footer');\n      if (!this.footer) return;\n      if (this.$footer) this.$footer.remove();\n      this.$footer = this.dom('<div>').addClass(this.prefix + '-popup-footer'); // buttons\n\n      var buttons = this.footer;\n      var len = 0;\n\n      for (var key in buttons) {\n        if (buttons[key] === false) continue;\n        var button = this.app.create('popup.button', key, this, buttons[key]);\n        this.$footer.append(button.getElement());\n        len++;\n      }\n\n      if (len !== 0) {\n        this.$stack.append(this.$footer);\n        this.$popup.addClass('has-footer');\n      }\n    },\n    _resize: function _resize() {\n      var data = this.$stack.attr('data-width');\n      var width = this.app.container.get('main').width();\n\n      if (data !== '100%') {\n        var w = parseInt(data);\n\n        if (w < width) {\n          return;\n        }\n      }\n\n      this.$stack.css('width', width + 'px');\n    }\n  });\n  ArticleEditor.add('class', 'popup.button', {\n    init: function init(name, stack, obj) {\n      this.name = name;\n      this.obj = obj;\n      this.stack = stack;\n      this.$button = this.dom('<button>').addClass(this.prefix + '-form-button');\n      this.$button.attr('data-name', this.name);\n      this.$button.html(this.lang.parse(this.obj.title));\n      this.$button.dataset('instance', this);\n      if (this._has('type')) this.$button.addClass(this.prefix + '-form-button-' + this.obj.type);\n      if (this._has('classname')) this.$button.addClass(this.obj.classname);\n      if (this._has('fullwidth')) this.$button.addClass(this.prefix + '-form-button-fullwidth'); // event\n\n      this.$button.on('click.' + this.prefix + '-popup-button' + this.uuid, this._catch.bind(this));\n    },\n    getName: function getName() {\n      return this.name;\n    },\n    getElement: function getElement() {\n      return this.$button;\n    },\n    // private\n    _has: function _has(name) {\n      return this.obj.hasOwnProperty(name);\n    },\n    _catch: function _catch(e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (this._has('command')) {\n        this.app.api(this.obj.command, this.stack, this.name, e);\n      } else if (this._has('collapse')) {\n        this.stack.collapse();\n      } else if (this._has('close')) {\n        this.app.popup.close();\n      }\n    }\n  });\n  ArticleEditor.add('module', 'link', {\n    popups: {\n      format: {\n        format: {\n          title: '## link.link ##',\n          command: 'link.format',\n          shortcut: 'Ctrl+k'\n        },\n        unlink: {\n          title: '## link.unlink ##',\n          command: 'link.unlink'\n        }\n      },\n      edit: {\n        edit: {\n          title: '## link.edit-link ##',\n          command: 'link.edit',\n          shortcut: 'Ctrl+k'\n        },\n        unlink: {\n          title: '## link.unlink ##',\n          command: 'link.unlink'\n        }\n      },\n      form: {\n        text: {\n          type: 'input',\n          label: '## link.text ##'\n        },\n        url: {\n          type: 'input',\n          label: '## link.url ##'\n        },\n        target: {\n          type: 'checkbox',\n          text: '## link.link-in-new-tab ##'\n        }\n      },\n      insert: {\n        insert: {\n          title: '## link.insert ##',\n          command: 'link.insert',\n          type: 'primary'\n        },\n        cancel: {\n          title: '## link.cancel ##',\n          command: 'popup.close'\n        }\n      },\n      save: {\n        save: {\n          title: '## link.save ##',\n          command: 'link.save',\n          type: 'primary'\n        },\n        cancel: {\n          title: '## link.cancel ##',\n          command: 'popup.close'\n        }\n      }\n    },\n    popup: function popup(params, button) {\n      // get link\n      var $link = this.getLink();\n      var popup = $link.length === 0 ? this.popups.format : this.popups.edit;\n      this.app.popup.create('link', {\n        items: popup\n      });\n      this.app.popup.open({\n        button: button\n      });\n    },\n    format: function format(params) {\n      // selection\n      var text = this.app.selection.getText(); // popup\n\n      var stack = this.app.popup.create('link-create', {\n        title: '## popup.link ##',\n        width: '600px',\n        form: this.popups.form,\n        footer: this.popups.insert\n      }); // set data\n\n      stack.setData({\n        text: text\n      }); // open\n\n      this.app.popup.open({\n        focus: text ? 'url' : 'text'\n      });\n    },\n    edit: function edit() {\n      // get link\n      var $link = this.getLink();\n      var stack = this.app.popup.create('link-edit', {\n        title: '## popup.link ##',\n        width: '600px',\n        form: this.popups.form,\n        footer: this.popups.save\n      }); // set\n\n      var data = {\n        text: $link.text(),\n        url: $link.attr('href'),\n        target: $link.attr('target') || this.opts.link.target\n      }; // clean\n\n      data = this._encodeUrl(data); // set data\n\n      stack.setData(data); // open\n\n      this.app.popup.open({\n        focus: 'url'\n      });\n    },\n    insert: function insert(stack) {\n      this.app.popup.close();\n      var nodes = this.app.inline.set({\n        tag: 'a',\n        caret: 'after'\n      });\n      var $link = this.dom(nodes); // data\n\n      this._save(stack, $link, 'add');\n    },\n    save: function save(stack) {\n      this.app.popup.close();\n      var $link = this.getLink(); // data\n\n      this._save(stack, $link, 'change');\n    },\n    unlink: function unlink() {\n      this.app.popup.close();\n      var links = this.app.selection.getNodes({\n        tags: ['a']\n      });\n      if (links.length === 0) return; // unlink\n\n      for (var i = 0; i < links.length; i++) {\n        var $link = this.dom(links[i]);\n        this.app.broadcast('link.remove', {\n          url: $link.attr('href'),\n          text: $link.text()\n        });\n        $link.unwrap();\n      } // ui\n\n\n      this.app.toolbar.observe();\n    },\n    getLink: function getLink() {\n      var links = this.app.selection.getNodes({\n        tags: ['a']\n      });\n      var $link = links.length !== 0 ? this.dom(links[0]) : this.dom([]);\n      return $link;\n    },\n    // private\n    _save: function _save(stack, $link, type) {\n      var data = stack.getData();\n      data = this._cleanUrl(data);\n      data = this._encodeUrl(data);\n      if (data.url === '') return;\n      data = this._setUrl($link, data);\n\n      if ($link.length === 1) {\n        data = this._setText($link, data);\n      }\n\n      data = this._setTarget($link, data);\n      this.app.broadcast('link.' + type, data);\n    },\n    _cleanUrl: function _cleanUrl(data) {\n      data.url = this.app.content.escapeHtml(data.url);\n      data.url = data.url.search(/^javascript:/i) !== -1 ? '' : data.url;\n      return data;\n    },\n    _encodeUrl: function _encodeUrl(data) {\n      data.url = data.url.replace('&amp;', '&');\n      return data;\n    },\n    _setUrl: function _setUrl($link, data) {\n      $link.attr('href', data.url);\n      return data;\n    },\n    _setText: function _setText($link, data) {\n      data.text = data.text === '' ? data.url : data.text;\n      $link.text(data.text);\n      return data;\n    },\n    _setTarget: function _setTarget($link, data) {\n      if (data.target) $link.attr('target', '_blank');else $link.removeAttr('target');\n      return data;\n    }\n  });\n  ArticleEditor.add('module', 'embed', {\n    popups: {\n      insert: {\n        insert: {\n          title: '## buttons.insert ##',\n          command: 'embed.insert',\n          type: 'primary'\n        },\n        cancel: {\n          title: '## embed.cancel ##',\n          command: 'popup.close'\n        }\n      },\n      save: {\n        save: {\n          title: '## buttons.save ##',\n          command: 'embed.save',\n          type: 'primary'\n        },\n        cancel: {\n          title: '## embed.cancel ##',\n          command: 'popup.close'\n        }\n      },\n      edit: {\n        title: '## embed.embed ##',\n        width: '100%',\n        form: {\n          embed: {\n            type: 'textarea',\n            label: '## embed.description ##',\n            rows: 6\n          },\n          caption: {\n            type: 'input',\n            label: '## embed.caption ##'\n          },\n          responsive: {\n            type: 'checkbox',\n            text: '## embed.responsive-video ##'\n          }\n        }\n      }\n    },\n    build: function build(scripts) {\n      if (scripts) {\n        this._callScripts(scripts);\n      } else {\n        this._findScripts();\n      }\n    },\n    observe: function observe() {\n      if (!this.opts.embed) return false;\n    },\n    popup: function popup() {\n      var popup = this.popups.edit;\n      popup.footer = this.popups.insert;\n      popup.collapse = true;\n      var stack = this.app.popup.add('embed', popup);\n      stack.open({\n        focus: 'embed'\n      }); // codemirror\n\n      this._buildCodemirror(stack);\n    },\n    edit: function edit(params, button) {\n      var instance = this.app.block.get();\n      var popup = this.popups.edit;\n      popup.footer = this.popups.save;\n      var data = {\n        embed: instance.getEmbedCode(),\n        caption: instance.getCaption(),\n        responsive: instance.isResponsive()\n      }; // popup & data\n\n      var stack = this.app.popup.create('embed', popup);\n      stack.setData(data); // open\n\n      this.app.popup.open({\n        button: button,\n        focus: 'embed'\n      }); // codemirror\n\n      this._buildCodemirror(stack);\n    },\n    insert: function insert(stack) {\n      this.app.popup.close(); // data\n\n      var data = stack.getData();\n\n      var code = this._getEmbedCode(data);\n\n      if (code === '') {\n        return;\n      } // create\n\n\n      var instance = this._createInstance(data, code);\n\n      this.app.block.add({\n        instance: instance\n      });\n    },\n    save: function save(stack) {\n      this.app.popup.close(); // data\n\n      var current = this.app.block.get();\n      var data = stack.getData();\n\n      var code = this._getEmbedCode(data);\n\n      if (code === '') {\n        this.app.block.remove();\n        return;\n      } // create\n\n\n      var instance = this._createInstance(data, code, current); // change\n\n\n      if (this._isNeedToChange(data, instance, current)) {\n        this.app.block.change(instance);\n      }\n    },\n    // private\n    _buildCodemirror: function _buildCodemirror(stack) {\n      var $input = stack.getInput('embed');\n      this.app.codemirror.create({\n        el: $input,\n        height: '200px',\n        focus: true\n      });\n      this.app.popup.updatePosition();\n    },\n    _findScripts: function _findScripts() {\n      var scripts = this.app.editor.getLayout().find('[data-' + this.prefix + '-type=embed]').find('script').getAll();\n      this.build.call(this, scripts);\n    },\n    _callScripts: function _callScripts(scripts) {\n      for (var i = 0; i < scripts.length; i++) {\n        if (scripts[i].src !== '') {\n          var src = scripts[i].src;\n          this.app.editor.getDoc().find('head script[src=\"' + src + '\"]').remove();\n          var $script = this.dom('<script>').attr({\n            'src': src,\n            'async': true,\n            'defer': 'true'\n          });\n          $script.on('load', function () {\n            if (src.search('instagram') !== -1) {\n              var win = this.app.editor.getWinNode();\n\n              if (win.instgrm) {\n                win.instgrm.Embeds.process();\n              }\n            }\n\n            this.build(scripts.slice(i + 1));\n          }.bind(this));\n          var head = this.app.editor.getDocNode().getElementsByTagName('head')[0];\n          if (head) head.appendChild($script.get());\n        } else {\n          try {\n            eval(scripts[i].innerHTML);\n          } catch (e) {}\n        }\n      }\n    },\n    _getEmbedCode: function _getEmbedCode(data) {\n      var code = data.embed.trim();\n      code = this.app.codemirror.val(code);\n      code = this.app.content.sanitize(code);\n      code = !this._isHtmlString(code) && code !== '' ? this._parseUrl(code) : code;\n      return code;\n    },\n    _createInstance: function _createInstance(data, code, current) {\n      var $figure;\n\n      if (current) {\n        var figure = current.duplicateEmpty();\n        $figure = figure.getBlock();\n        $figure.html(code);\n      } else {\n        $figure = this._isFigure(code) ? code : '<figure>' + code + '</figure>';\n      }\n\n      var instance = this.app.create('block.embed', $figure); // caption\n\n      instance.setCaption(data.caption); // responsive\n\n      if (data.responsive) {\n        instance.addResponsive();\n      }\n\n      return instance;\n    },\n    _parseUrl: function _parseUrl(str) {\n      var iframeStart = '<iframe width=\"560\" height=\"315\" src=\"';\n      var iframeEnd = '\" frameborder=\"0\" allowfullscreen></iframe>';\n      var parsed;\n\n      if (str.match(this.opts.regex.youtube)) {\n        parsed = str.replace(this.opts.regex.youtube, '//www.youtube.com/embed/$1');\n        return iframeStart + parsed + iframeEnd;\n      } else if (str.match(this.opts.regex.vimeo)) {\n        parsed = str.replace(this.opts.regex.vimeo, '//player.vimeo.com/video/$2');\n        return iframeStart + parsed + iframeEnd;\n      }\n\n      return str;\n    },\n    _isNeedToChange: function _isNeedToChange(data, instance, current) {\n      if (current.getEmbedCode() !== instance.getEmbedCode()) return true;\n      if (data.responsive !== current.isResponsive()) return true;\n      if (data.caption !== current.getCaption()) return true;\n    },\n    _isHtmlString: function _isHtmlString(str) {\n      return /^\\s*<(\\w+|!)[^>]*>/.test(str);\n    },\n    _isFigure: function _isFigure(str) {\n      return /^<figure/.test(str);\n    }\n  });\n  ArticleEditor.add('module', 'list', {\n    indent: function indent(params, itemInstance) {\n      var sel = this.app.selection.get();\n      var item = this.app.selection.getBlock();\n      var $item = this.dom(item);\n      var $prev = $item.prevElement();\n      var prev = $prev.get();\n      var isIndent = sel.collapsed && item && prev && prev.tagName === 'LI';\n      this.app.selection.save(item);\n\n      if (isIndent) {\n        $prev = this.dom(prev);\n        var $prevChild = $prev.children('ul, ol');\n        var $list = $item.closest('ul, ol');\n\n        if ($prevChild.length !== 0) {\n          $prevChild.append($item);\n        } else {\n          var listTag = $list.get().tagName.toLowerCase();\n          var $newList = this.dom('<' + listTag + '>');\n          $newList.append($item);\n          $prev.append($newList);\n        }\n      }\n\n      this.app.selection.restore();\n    },\n    outdent: function outdent(params, itemInstance) {\n      var sel = this.app.selection.get();\n      var item = this.app.selection.getBlock();\n      var $item = this.dom(item);\n\n      if (sel.collapsed && item) {\n        var $listItem = $item.parent();\n        var $liItem = $listItem.closest('li');\n        var $prev = $item.prevElement();\n        var $next = $item.nextElement();\n        var prev = $prev.get();\n        var next = $next.get();\n        var nextItems, $newList;\n        var isTop = prev === false;\n        var isMiddle = prev !== false && next !== false;\n        this.app.selection.save(item); // out\n\n        if ($liItem.length !== 0) {\n          if (isMiddle) {\n            nextItems = this._getAllNext($item.get());\n            $newList = this.dom('<' + $listItem.get().tagName.toLowerCase() + '>');\n\n            for (var i = 0; i < nextItems.length; i++) {\n              $newList.append(nextItems[i]);\n            }\n\n            $liItem.after($item);\n            $item.append($newList);\n          } else {\n            $liItem.after($item);\n\n            if ($listItem.children().length === 0) {\n              $listItem.remove();\n            } else {\n              if (isTop) $item.append($listItem);\n            }\n          }\n        }\n\n        this.app.selection.restore();\n      }\n    },\n    // private\n    _getAllNext: function _getAllNext(next) {\n      var nodes = [];\n\n      while (next) {\n        var $next = this.dom(next).nextElement();\n        next = $next.get();\n        if (next) nodes.push(next);else return nodes;\n      }\n\n      return nodes;\n    }\n  });\n  ArticleEditor.add('module', 'grid', {\n    popup: function popup() {\n      // create\n      var stack = this.app.popup.add('grid', {\n        title: '## popup.grid ##',\n        width: '320px',\n        items: this.buildItems()\n      });\n      stack.open();\n    },\n    observe: function observe() {\n      if (!this.opts.grid) return false;\n    },\n    buildItems: function buildItems() {\n      var items = {};\n      var z = 0;\n\n      for (var pattern in this.opts.grid.patterns) {\n        z++;\n\n        var $item = this._createPattern(pattern);\n\n        items['column' + z] = {\n          html: $item,\n          command: 'grid.add',\n          params: {\n            pattern: pattern,\n            columns: this.opts.grid.patterns[pattern]\n          }\n        };\n      }\n\n      return items;\n    },\n    add: function add(params) {\n      this.app.popup.close();\n      var columns = params.columns.split('|');\n      var $grid = this.dom('<div>').addClass(this.opts.grid.classname);\n\n      for (var i = 0; i < columns.length; i++) {\n        var column = this.app.create('block.column');\n        var $column = column.getBlock();\n        $column.addClass(columns[i]);\n        $grid.append($column);\n      } // add\n\n\n      var instance = this.app.block.add({\n        name: 'grid',\n        source: $grid,\n        caret: false\n      }); // set\n\n      this.app.block.set(instance);\n    },\n    // private\n    _createPattern: function _createPattern(pattern) {\n      var $item = this.dom('<div>').addClass(this.prefix + '-popup-grid-box');\n      var columns = pattern.split('|');\n      var sum = this.app.utils.sumOfArray(columns);\n      var unit = 100 / sum;\n\n      for (var i = 0; i < columns.length; i++) {\n        var $column = this.dom('<span>');\n        $column.addClass(this.prefix + '-popup-grid-column');\n        $column.css('width', columns[i] * unit + '%');\n        $item.append($column);\n      }\n\n      return $item;\n    }\n  });\n  ArticleEditor.add('module', 'image', {\n    init: function init() {\n      this.dataStates = [];\n    },\n    popup: function popup() {\n      var stack = this.app.popup.add('image', {\n        title: '## popup.add-image ##',\n        width: '100%'\n      });\n      stack.open(); // body\n\n      var $body = stack.getBody(); // by url\n\n      if (this.opts.image.url) {\n        this._createImageByUrl($body);\n      } // section or\n\n\n      if (this.opts.image.url && (this.opts.image.upload || this.opts.image.select)) {\n        this._createOrSection($body);\n      } // upload\n\n\n      this.$upload = this.createUploadBox(this.opts.image.upload, $body); // list of images\n\n      this.createSelectBox(this.opts.image.select, $body, 'image.insertFromSelect'); // build upload\n\n      this._buildUpload(this.$upload, 'image.insertByUpload');\n    },\n    edit: function edit(params, button) {\n      this.app.popup.create('image-edit', {\n        title: '## popup.image ##',\n        width: '100%',\n        getter: 'block.getData',\n        setter: 'block.setData',\n        form: {\n          alt: {\n            type: 'input',\n            label: '## image.alt-text ##'\n          },\n          caption: {\n            type: 'input',\n            label: '## image.caption ##',\n            observer: 'image.observeImageCaption'\n          },\n          link: {\n            type: 'input',\n            label: '## image.link ##',\n            observer: 'image.observeImageLink'\n          },\n          target: {\n            type: 'checkbox',\n            text: '## image.link-in-new-tab ##',\n            observer: 'image.observeImageLink'\n          }\n        },\n        footer: {\n          'save': {\n            title: '## image.save ##',\n            command: 'image.save',\n            type: 'primary'\n          },\n          'cancel': {\n            title: '## image.cancel ##',\n            command: 'popup.close'\n          }\n        }\n      }); // upload\n\n      this._buildEditUpload(); // open\n\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    editCard: function editCard(params, button) {\n      this.app.popup.create('image-edit', {\n        title: '## popup.image ##',\n        width: '100%',\n        getter: 'block.getData',\n        setter: 'block.setData',\n        form: {\n          alt: {\n            type: 'input',\n            label: '## image.alt-text ##'\n          }\n        },\n        footer: {\n          'save': {\n            title: '## image.save ##',\n            command: 'image.save',\n            type: 'primary'\n          },\n          'cancel': {\n            title: '## image.cancel ##',\n            command: 'popup.close'\n          }\n        }\n      }); // upload\n\n      this._buildEditUpload(); // open\n\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    observe: function observe() {\n      if (!this.opts.image) return false;\n    },\n    observeStates: function observeStates() {\n      this._findImages().each(this._addImageState.bind(this));\n    },\n    observeImageLink: function observeImageLink(obj) {\n      return this.opts.image.link ? obj : false;\n    },\n    observeImageCaption: function observeImageCaption(obj) {\n      var instance = this.app.block.get();\n\n      if (instance && instance.getTag() === 'figure') {\n        return obj;\n      } else {\n        return false;\n      }\n    },\n    paste: function paste(blob, e) {\n      var params = {\n        url: this.opts.image.upload,\n        name: this.opts.image.name,\n        data: this.opts.image.data,\n        multiple: false,\n        success: 'image.insertFromBlob',\n        error: 'image.error'\n      }; // upload\n\n      var upload = this.app.create('upload');\n      upload.send(e, [blob], params);\n    },\n    drop: function drop(e, dt) {\n      var files = [];\n\n      for (var i = 0; i < dt.files.length; i++) {\n        var file = dt.files[i] || dt.items[i].getAsFile();\n\n        if (file) {\n          files.push(file);\n        }\n      }\n\n      var params = {\n        url: this.opts.image.upload,\n        name: this.opts.image.name,\n        data: this.opts.image.data,\n        multiple: this.opts.image.multiple,\n        success: 'image.insertByDrop',\n        error: 'image.error'\n      };\n\n      if (files.length > 0) {\n        var $block = this.dom(e.target).closest('[data-' + this.prefix + '-type]');\n\n        if ($block.length !== 0) {\n          this.app.block.set($block);\n        } // upload\n\n\n        var upload = this.app.create('upload');\n        upload.send(e, files, params);\n      }\n    },\n    insertFromClipboard: function insertFromClipboard(clipboard) {\n      var text = clipboard.getData(\"text/plain\") || clipboard.getData(\"text/html\");\n      text = text.trim();\n\n      if (text !== '') {\n        return;\n      }\n\n      var items = clipboard.items;\n      var blob = null;\n\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].type.indexOf(\"image\") === 0) {\n          blob = items[i].getAsFile();\n        }\n      }\n\n      if (blob !== null) {\n        this.paste(blob);\n        return true;\n      }\n    },\n    insertFromBlob: function insertFromBlob(response) {\n      this.insert(response);\n    },\n    insertByDrop: function insertByDrop(response, e) {\n      if (this.app.block.is()) {\n        var instance = this.app.block.get();\n        var target = e.target;\n        var type = instance.getType();\n        var isChange = type === 'card' && target && target.tagName === 'IMG' && instance.hasImage() || type === 'image';\n\n        if (isChange) {\n          this.change(response);\n          return;\n        } else if (e && type !== 'card' && instance.isEditable()) {\n          this.app.insertion.insertPoint(e);\n        }\n      }\n\n      this.insert(response);\n    },\n    insertByUpload: function insertByUpload(response) {\n      this.insert(response);\n    },\n    insertByUrl: function insertByUrl(e) {\n      e.preventDefault();\n      var str = this.$urlinput.val();\n\n      if (str.trim() === '') {\n        return;\n      }\n\n      var response = {\n        file: {\n          url: str,\n          id: this.app.utils.getRandomId()\n        }\n      }; // insert\n\n      this.insert(response);\n    },\n    insertFromSelect: function insertFromSelect(e) {\n      e.preventDefault();\n      var $target = this.dom(e.target);\n      var obj = {\n        url: $target.attr('data-url')\n      };\n      var id = $target.attr('data-id');\n\n      if (id !== null) {\n        obj.id = id;\n      } // insert\n\n\n      this.insert({\n        file: obj\n      });\n    },\n    changeClone: function changeClone(response) {\n      for (var key in response) {\n        this.$imageclone.attr('src', response[key].url);\n        break;\n      }\n\n      this.change(response, false);\n    },\n    change: function change(response, closepopup) {\n      if (closepopup !== false) {\n        this.app.popup.close();\n      }\n\n      var instance = this.app.block.get();\n\n      for (var key in response) {\n        instance.setImage(response[key]); // broadcast\n\n        this.app.broadcast('image.change', response[key]);\n        this.app.broadcast('image.upload', {\n          instance: instance,\n          data: response[key]\n        });\n        return;\n      }\n    },\n    save: function save(stack) {\n      this.app.popup.close();\n      this.app.block.setData(stack);\n    },\n    insert: function insert(response) {\n      // popup close\n      this.app.popup.close(); // insert\n\n      this.imageslen = 0;\n      this.imagescount = 0; // tag\n\n      var tag = this.opts.image.tag; // loop\n\n      for (var key in response) {\n        var $source = this.dom('<' + tag + '>');\n\n        var $image = this._createImageFromResponseItem(response[key]);\n\n        $source.append($image);\n        var instance = this.app.create('block.image', $source);\n        this.app.block.add({\n          instance: instance\n        }); // broadcast\n\n        this.app.broadcast('image.upload', {\n          instance: instance,\n          data: response[key]\n        });\n        this.$last = instance.getBlock();\n        this.imageslen++;\n      }\n    },\n    error: function error(response) {\n      this.app.broadcast('image.upload.error', {\n        response: response\n      });\n    },\n    getStates: function getStates() {\n      var $images = this._findImages(); // check status\n\n\n      for (var key in this.dataStates) {\n        var data = this.dataStates[key];\n        var status = $images.is('[data-image=\"' + data.id + '\"]');\n\n        this._setImageState(data.id, status);\n      }\n\n      return this.dataStates;\n    },\n    createUploadBox: function createUploadBox(upload, $body) {\n      if (!upload) return;\n      var $upload = this.dom('<div>');\n      $body.append($upload);\n      return $upload;\n    },\n    createSelectBox: function createSelectBox(select, $body, callback) {\n      if (!select) return; // images box\n\n      this.$selectbox = this._createImagesBox($body);\n\n      if (_typeof(select) === 'object') {\n        this._parseList(select, callback);\n      } else {\n        this.ajax.get({\n          url: select,\n          data: {\n            d: new Date().getTime()\n          },\n          success: function (data) {\n            this._parseList(data, callback);\n          }.bind(this)\n        });\n      }\n    },\n    // private\n    _findImages: function _findImages() {\n      return this.app.editor.getLayout().find('[data-image]');\n    },\n    _addImageState: function _addImageState($node) {\n      var id = $node.attr('data-image');\n      this.dataStates[id] = {\n        type: 'image',\n        status: true,\n        url: $node.attr('src'),\n        $img: $node,\n        id: id\n      };\n    },\n    _setImageState: function _setImageState(url, status) {\n      this.dataStates[url].status = status;\n    },\n    _checkImageLoad: function _checkImageLoad() {\n      this.imagescount++;\n\n      if (this.imagescount === this.imageslen) {\n        this.app.block.unset();\n        this.app.block.set(this.$last);\n        this.app.editor.adjustHeight();\n      }\n    },\n    _buildEditUpload: function _buildEditUpload() {\n      if (!this.opts.image.upload) return;\n      var instance = this.app.block.get(); // stack\n\n      var stack = this.app.popup.getStack();\n      var $body = stack.getBody(); // form item\n\n      var $item = this._createFormItem();\n\n      $item.addClass(this.prefix + '-form-item-edit-image-box'); // image\n\n      this.$imageclone = instance.getImage().clone();\n      var $imageitem = this.dom('<div>').addClass(this.prefix + '-form-item-image');\n      $imageitem.append(this.$imageclone);\n      $item.append($imageitem); // upload item\n\n      this.$upload = this.dom('<div>');\n      $item.append(this.$upload); // append to popup\n\n      $body.prepend($item); // build upload\n\n      this._buildUpload(this.$upload, 'image.changeClone');\n    },\n    _buildUpload: function _buildUpload($item, callback) {\n      if (!this.opts.image.upload) return;\n      var params = {\n        box: true,\n        placeholder: this.lang.get('image.upload-new-placeholder'),\n        url: this.opts.image.upload,\n        name: this.opts.image.name,\n        data: this.opts.image.data,\n        multiple: this.opts.image.multiple,\n        success: callback,\n        error: 'image.error'\n      };\n      this.app.create('upload', $item, params);\n    },\n    _createImageFromResponseItem: function _createImageFromResponseItem(item) {\n      var $image = this.dom('<img>').attr('src', item.url).one('load', this._checkImageLoad.bind(this));\n      if (item.hasOwnProperty('id')) $image.attr('data-image', item.id);\n      if (item.hasOwnProperty('2x')) $image.attr('srcset', item['2x'] + ' 2x');\n      return $image;\n    },\n    _createImagesBox: function _createImagesBox($body) {\n      var $box = this.dom('<div>').addClass(this.prefix + '-popup-images-box');\n      $body.append($box);\n      return $box;\n    },\n    _createOrSection: function _createOrSection($body) {\n      var $section = this.dom('<div>').addClass(this.prefix + '-popup-image-section-or');\n      $section.html(this.lang.get('image.or'));\n      $body.append($section);\n    },\n    _createImageByUrl: function _createImageByUrl($body) {\n      var $item = this._createFormItem();\n\n      this.$urlinput = this._createUrlInput();\n      this.$urlbutton = this._createUrlButton();\n      $item.append(this.$urlinput);\n      $item.append(this.$urlbutton);\n      $body.append($item); // focus\n\n      this.$urlinput.focus();\n    },\n    _createFormItem: function _createFormItem() {\n      return this.dom('<div>').addClass(this.prefix + '-form-container-flex');\n    },\n    _createUrlInput: function _createUrlInput() {\n      var $input = this.dom('<input>').addClass(this.prefix + '-form-input');\n      $input.attr('placeholder', this.lang.get('image.url-placeholder'));\n      return $input;\n    },\n    _createUrlButton: function _createUrlButton() {\n      var $button = this.dom('<button>').addClass(this.prefix + '-form-button ' + this.prefix + '-form-button-primary');\n      $button.html(this.lang.get('image.insert'));\n      $button.one('click', this.insertByUrl.bind(this));\n      return $button;\n    },\n    _parseList: function _parseList(data, callback) {\n      for (var key in data) {\n        var obj = data[key];\n        if (_typeof(obj) !== 'object') continue;\n        var $img = this.dom('<img>');\n        var url = obj.thumb ? obj.thumb : obj.url;\n        $img.addClass(this.prefix + '-popup-event');\n        $img.attr('src', url);\n        $img.attr('data-url', obj.url);\n        $img.attr('data-callback', callback);\n\n        if (obj.hasOwnProperty('id')) {\n          $img.attr('data-id', obj.id);\n        }\n\n        $img.on('click.' + this.prefix + '-popup-event-' + this.uuid, function (e) {\n          var $target = this.dom(e.target);\n          var callback = $target.attr('data-callback');\n          this.app.api(callback, e);\n        }.bind(this));\n        this.$selectbox.append($img);\n      }\n    }\n  });\n  ArticleEditor.add('module', 'table', {\n    add: function add() {\n      // add\n      var instance = this.app.block.add({\n        name: 'table',\n        source: this.opts.table.template,\n        caret: false\n      }); // focus\n\n      var cell = instance.getFirstCell();\n\n      if (cell) {\n        this.app.block.set(cell, 'start');\n      }\n    },\n    observe: function observe() {\n      if (!this.opts.table) return false;\n    },\n    popup: function popup(params, button) {\n      var instance = this.app.block.get();\n      var type = instance.getType();\n      var items = {};\n\n      if (type === 'table') {\n        items = {\n          addhead: {\n            title: '## table.add-head ##',\n            command: 'table.addHead'\n          },\n          removehead: {\n            title: '## table.remove-head ##',\n            command: 'table.removeHead'\n          }\n        };\n      } else if (type === 'row') {\n        items = {\n          addrowbelow: {\n            title: '## table.add-row-below ##',\n            command: 'table.addRowBelow'\n          },\n          addrowabove: {\n            title: '## table.add-row-above ##',\n            command: 'table.addRowAbove'\n          },\n          removerow: {\n            title: '## table.remove-row ##',\n            command: 'table.removeRow'\n          }\n        };\n      } else if (type === 'cell') {\n        items = {\n          addcolumnafter: {\n            title: '## table.add-column-after ##',\n            command: 'table.addColumnAfter'\n          },\n          addcolumnbefore: {\n            title: '## table.add-column-before ##',\n            command: 'table.addColumnBefore'\n          },\n          addrowbelow: {\n            title: '## table.add-row-below ##',\n            command: 'table.addRowBelow'\n          },\n          addrowabove: {\n            title: '## table.add-row-above ##',\n            command: 'table.addRowAbove'\n          },\n          removecolumn: {\n            title: '## table.remove-column ##',\n            command: 'table.removeColumn'\n          },\n          removerow: {\n            title: '## table.remove-row ##',\n            command: 'table.removeRow'\n          }\n        };\n      }\n\n      this.app.popup.create('table', {\n        items: items\n      }); // open\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    addHead: function addHead() {\n      this.removeHead();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var columns = $block.find('tr').first().children('td, th').length;\n      var $head = this.dom('<thead>');\n\n      var $row = this._buildRow(columns, '<th>');\n\n      $head.append($row);\n      $block.prepend($head); // set\n\n      this.app.block.set($row.children('td, th').first(), 'start');\n    },\n    addRowBelow: function addRowBelow() {\n      this._addRow('below');\n    },\n    addRowAbove: function addRowAbove() {\n      this._addRow('above');\n    },\n    addColumnBefore: function addColumnBefore() {\n      this._addColumn('before');\n    },\n    addColumnAfter: function addColumnAfter() {\n      this._addColumn('after');\n    },\n    removeHead: function removeHead() {\n      this.app.popup.close();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var $head = $block.find('thead');\n\n      if ($head.length !== 0) {\n        $head.remove();\n      }\n    },\n    removeRow: function removeRow() {\n      this.app.popup.close();\n      this.app.control.close();\n      var instance = this.app.block.get();\n\n      if (instance.getType() === 'cell') {\n        instance = instance.getParent(['row']);\n      }\n\n      instance.remove();\n    },\n    removeColumn: function removeColumn() {\n      this.app.popup.close();\n      this.app.control.close();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var $table = $block.closest('table');\n      var $row = $block.closest('tr');\n      var index = 0;\n      $row.find('td, th').each(function ($node, i) {\n        if ($node.get() === $block.get()) index = i;\n      });\n      $table.find('tr').each(function ($node) {\n        var cell = $node.find('td, th').get(index);\n        var $cell = this.dom(cell);\n        $cell.remove();\n      }.bind(this));\n    },\n    cellSetting: function cellSetting(params, button) {\n      var instance = this.app.block.get();\n      var stack = this.app.popup.create('cell', {\n        title: '## table.table-cell ##',\n        width: '300px',\n        form: {\n          width: {\n            type: 'input',\n            label: '## table.width ##'\n          },\n          nowrap: {\n            type: 'checkbox',\n            text: '## table.nowrap ##'\n          }\n        },\n        footer: {\n          insert: {\n            title: '## table.save ##',\n            command: 'table.save',\n            type: 'primary'\n          },\n          cancel: {\n            title: '## table.cancel ##',\n            command: 'popup.close'\n          }\n        }\n      }); // data\n\n      stack.setData({\n        width: instance.getWidth(),\n        nowrap: instance.getNowrap()\n      }); // open\n\n      this.app.popup.open({\n        button: button,\n        focus: 'width'\n      });\n    },\n    save: function save(stack) {\n      // popup close\n      this.app.popup.close(); // data\n\n      var data = stack.getData();\n      var instance = this.app.block.get();\n\n      if (data.width !== '') {\n        instance.setWidth(data.width);\n      }\n\n      instance.setNowrap(data.nowrap);\n    },\n    // private\n    _addColumn: function _addColumn(name) {\n      this.app.popup.close();\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var $table = $block.closest('table');\n      var $row = $block.closest('tr');\n      var index = 0;\n      $row.find('td, th').each(function ($node, i) {\n        if ($node.get() === $block.get()) index = i;\n      });\n      var rowIndex = 0;\n      $table.find('tr').each(function ($node, i) {\n        if ($node.get() === $row.get()) rowIndex = i;\n      });\n      var $newCell;\n      $table.find('tr').each(function ($node, i) {\n        var cell = $node.find('td, th').get(index);\n        var $cell = this.dom(cell);\n        var $td = $cell.clone();\n        $td.html(''); // create instance\n\n        this.app.create('block.cell', $td);\n\n        if (rowIndex === i) {\n          $newCell = $td;\n        } // after / before\n\n\n        $cell[name]($td);\n      }.bind(this)); // set focus\n\n      if ($newCell) {\n        this.app.block.set($newCell, 'start');\n      }\n    },\n    _addRow: function _addRow(name) {\n      this.app.popup.close();\n      var position = name === 'below' ? 'after' : 'before';\n      var instance = this.app.block.get();\n      var $block = instance.getBlock();\n      var $row = $block.closest('tr');\n      var $head = $block.closest('thead');\n      var columns = $row.children('td, th').length;\n\n      var $newRow = this._buildRow(columns, '<td>');\n\n      if ($head.length !== 0) {\n        $head.after($newRow);\n      } else {\n        $row[position]($newRow);\n      } // set focus\n\n\n      this.app.block.set($newRow.find('td, th').first(), 'start');\n    },\n    _buildRow: function _buildRow(columns, tag) {\n      var $row = this.dom('<tr>'); // create instance\n\n      this.app.create('block.row', $row);\n\n      for (var i = 0; i < columns; i++) {\n        var $cell = this.dom(tag); // create instance\n\n        this.app.create('block.cell', $cell); // append\n\n        $row.append($cell);\n      }\n\n      return $row;\n    }\n  });\n  ArticleEditor.add('module', 'snippet', {\n    init: function init() {\n      this.json = {};\n    },\n    observe: function observe() {\n      if (!this.opts.snippets) return false;\n    },\n    popup: function popup() {\n      var stack = this.app.popup.add('snippets', {\n        title: '## popup.snippets ##',\n        width: '100%'\n      }); // data\n\n      var $body = stack.getBody(); // json url\n\n      if (typeof this.opts.snippets === 'string') {\n        this.ajax.get({\n          url: this.opts.snippets,\n          data: {\n            d: new Date().getTime()\n          },\n          success: function (data) {\n            this._buildPopup(data, $body);\n          }.bind(this)\n        });\n      } // json object\n      else {\n          this._buildPopup(this.opts.snippets, $body);\n        } // open\n\n\n      stack.open();\n    },\n    insert: function insert(e) {\n      var $trigger = this.dom(e.target).closest('.' + this.prefix + '-snippet-container');\n      var key = $trigger.attr('data-snippet-key');\n\n      if (this.json.hasOwnProperty(key)) {\n        this.app.popup.close();\n        var html = this.json[key].html;\n        this.app.editor.insertContent({\n          html: html,\n          caret: 'start'\n        });\n      }\n    },\n    // private\n    _buildPopup: function _buildPopup(data, $body) {\n      this.json = data;\n\n      if (typeof data === 'string') {\n        this.json = JSON.parse(data);\n      }\n\n      for (var key in this.json) {\n        var $container = this._buildPreviewContainer($body, key); // preview\n\n\n        this._buildPreview($container, key);\n\n        this._buildPreviewName($container, key);\n      }\n    },\n    _buildPreviewContainer: function _buildPreviewContainer($body, key) {\n      var $div = this.dom('<div>').addClass(this.prefix + '-snippet-container');\n      $div.attr('data-snippet-key', key);\n      $div.one('click', this.insert.bind(this)); // append\n\n      $body.append($div);\n      return $div;\n    },\n    _buildPreview: function _buildPreview($container, key) {\n      var $div = this.dom('<div>');\n\n      if (this.json[key].hasOwnProperty('image')) {\n        $div.addClass(this.prefix + '-snippet-image');\n        var $img = this.dom('<img>').attr('src', this.json[key].image);\n        $div.html($img);\n      } else {\n        $div.addClass(this.prefix + '-snippet-preview');\n        $div.html(this.json[key].html);\n      }\n\n      $container.append($div);\n    },\n    _buildPreviewName: function _buildPreviewName($container, key) {\n      if (!this.json[key].hasOwnProperty('name')) return;\n      var $span = this.dom('<div>').addClass(this.prefix + '-snippet-name');\n      $span.text(this.json[key].name);\n      $container.append($span);\n    }\n  });\n  ArticleEditor.add('module', 'template', {\n    init: function init() {\n      this.json = {};\n    },\n    observe: function observe() {\n      if (!this.opts.templates) return false;\n    },\n    popup: function popup(params, button) {\n      // json url\n      if (typeof this.opts.templates === 'string') {\n        this.ajax.get({\n          url: this.opts.templates,\n          data: {\n            d: new Date().getTime()\n          },\n          success: function (data) {\n            this._buildPopup(button, data);\n          }.bind(this)\n        });\n      } // json object\n      else {\n          this._buildPopup(button, this.opts.templates);\n        }\n    },\n    insert: function insert(e) {\n      var $trigger = this.dom(e.target).closest('.' + this.prefix + '-template-container');\n      var key = $trigger.attr('data-template-key');\n\n      if (this.json.hasOwnProperty(key)) {\n        this.app.popup.close();\n        var html = this.json[key].html;\n        this.app.editor.setContent({\n          html: html,\n          caret: false\n        });\n      }\n    },\n    // private\n    _buildPopup: function _buildPopup(button, data) {\n      // popup\n      this.app.popup.create('templates', {\n        title: '## templates.templates ##',\n        width: '100%'\n      }); // stack\n\n      var stack = this.app.popup.getStack();\n      var $body = stack.getBody(); // json\n\n      this.json = typeof data === 'string' ? JSON.parse(data) : data; // items\n\n      for (var key in this.json) {\n        // container\n        var $container = this._buildPreviewContainer($body, key); // preview\n\n\n        this._buildPreview($container, key);\n\n        this._buildPreviewName($container, key);\n      } // open\n\n\n      this.app.popup.open({\n        button: button\n      });\n    },\n    _buildPreviewContainer: function _buildPreviewContainer($body, key) {\n      var $div = this.dom('<div>').addClass(this.prefix + '-template-container');\n      $div.attr('data-template-key', key);\n      $div.one('click', this.insert.bind(this)); // append\n\n      $body.append($div);\n      return $div;\n    },\n    _buildPreview: function _buildPreview($container, key) {\n      var $div = this.dom('<div>');\n\n      if (this.json[key].hasOwnProperty('image')) {\n        $div.addClass(this.prefix + '-template-image');\n        var $img = this.dom('<img>').attr('src', this.json[key].image);\n        $div.html($img);\n      } else {\n        $div.addClass(this.prefix + '-template-preview');\n        $div.html(this.json[key].html);\n      }\n\n      $container.append($div);\n    },\n    _buildPreviewName: function _buildPreviewName($container, key) {\n      if (!this.json[key].hasOwnProperty('name')) return;\n      var $span = this.dom('<div>').addClass(this.prefix + '-template-name');\n      $span.text(this.json[key].name);\n      $container.append($span);\n    }\n  });\n  ArticleEditor.add('class', 'tool.checkbox', {\n    mixins: ['tool'],\n    type: 'checkbox',\n    input: {\n      tag: 'input',\n      type: 'checkbox',\n      classname: '-form-checkbox'\n    },\n    getValue: function getValue() {\n      return this.$input.val();\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$box = this.dom('<label>').addClass(this.prefix + '-form-checkbox-item');\n      this.$box.append(this.$input); // checkbox text\n\n      if (this._has('text')) {\n        var $span = this.dom('<span>').html(this.lang.parse(this.obj.text));\n        this.$box.append($span);\n      }\n\n      this.$tool.append(this.$box);\n    }\n  });\n  ArticleEditor.add('class', 'tool.color', {\n    mixins: ['tool'],\n    type: 'color',\n    input: {\n      tag: 'input',\n      type: 'text',\n      classname: '-form-input'\n    },\n    setValue: function setValue(value) {\n      this.$input.val(value);\n      this.$select.css('background-color', value);\n\n      if (this.$picker) {\n        this.setColor(value);\n      }\n\n      if (value && this.$checkbox) {\n        this.$checkbox.attr('checked', true);\n      }\n    },\n    setColor: function setColor(color) {\n      this.$picker.attr('data-current-color', color);\n      this.$picker.find('.' + this.prefix + '-color').removeClass('active');\n      this.$picker.find('.' + this.prefix + '-color').each(function ($node) {\n        var value = $node.attr('data-value'); // active\n\n        if (value === color) {\n          $node.addClass('active');\n          $node.css('color', this.app.color.invert(color));\n        }\n      }.bind(this));\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$box = this.dom('<div>').addClass(this.prefix + '-form-container-flex ' + this.prefix + '-form-container-color');\n      this.$select = this.dom('<span>').addClass(this.prefix + '-form-color-select');\n      this.$checkbox = this.dom('<input>').addClass(this.prefix + '-form-checkbox').attr('type', 'checkbox');\n      this.$input.css('max-width', '90px');\n      this.$input.on('keydown blur', this._changeColorSelect.bind(this));\n\n      if (this._has('picker')) {\n        this.$picker = this._createPicker();\n        this.$tool.append(this.$picker);\n      } else {\n        this.$select.addClass(this.prefix + '-form-color-select-pointer');\n        this.$select.on('click', this._buildColorpicker.bind(this));\n      }\n\n      if (this.name === 'background-color') {\n        this.$box.append(this.$checkbox);\n        this.$checkbox.on('change', this._changeColorState.bind(this));\n      }\n\n      this.$box.append(this.$select);\n      this.$box.append(this.$input);\n      this.$tool.append(this.$box);\n\n      if (this._has('picker')) {\n        this._buildColors();\n      }\n    },\n    _buildColors: function _buildColors() {\n      this.$picker.html('');\n\n      for (var key in this.opts.colors) {\n        var $div = this.dom('<div class=\"' + this.prefix + '-form-colors\">');\n\n        for (var i = 0; i < this.opts.colors[key].length; i++) {\n          var color = this.opts.colors[key][i];\n\n          var $span = this._createColor(color, key, i);\n\n          if (color === '#fff' || color === '#ffffff') {\n            $span.addClass(this.prefix + '-form-color-contrast');\n          }\n\n          $div.append($span);\n        }\n\n        this.$picker.append($div);\n      }\n    },\n    _buildColorpicker: function _buildColorpicker(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      this.$picker = this._createPicker();\n      var stack = this.app.popup.add('colorpicker', {\n        title: '## popup.pick-color ##',\n        collapse: true\n      });\n      stack.getBody().append(this.$picker);\n\n      this._buildColors();\n\n      this.setColor(this.$input.val());\n      stack.open();\n    },\n    _createPicker: function _createPicker() {\n      return this.dom('<div>').addClass(this.prefix + '-form-colorpicker');\n    },\n    _createColor: function _createColor(color, key, i) {\n      var $span = this.dom('<span>').addClass(this.prefix + '-color').css('background-color', color);\n      $span.attr({\n        'title': key + '-' + i,\n        'data-value': color\n      });\n      $span.on('mouseover', this._inColor.bind(this));\n      $span.on('mouseout', this._outColor.bind(this));\n      $span.on('click', this._setColor.bind(this));\n      return $span;\n    },\n    _inColor: function _inColor(e) {\n      var $color = this.dom(e.target);\n      var value = $color.attr('data-value');\n\n      this._setColorToInput(value);\n    },\n    _outColor: function _outColor() {\n      this._setColorToInput(this.$picker.attr('data-current-color'));\n    },\n    _setColorToInput: function _setColorToInput(value) {\n      this.$input.val(value);\n      this.$select.css('background-color', value);\n    },\n    _setColor: function _setColor(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $color = this.dom(e.target);\n      var value = $color.attr('data-value');\n      this.$picker.attr('data-current-color', value);\n      this.$picker.find('.' + this.prefix + '-color').removeClass('active');\n      $color.addClass('active');\n      $color.css('color', this.app.color.invert(value));\n\n      this._setColorToInput(value);\n\n      if (this.setter) {\n        this.app.api(this.setter, this.stack);\n      }\n\n      if (this._has('picker')) {\n        this.app.popup.close();\n      } else {\n        var stack = this.app.popup.getStack();\n        stack.collapse();\n      }\n    },\n    _changeColorSelect: function _changeColorSelect(e) {\n      if (e.type === 'keydown' && e.which !== 13) return;\n      if (e.type === 'keydown') e.preventDefault();\n      var value = this.$input.val();\n      value = this.app.color.normalize(value);\n      this.$input.val(value);\n      this.$select.css('background-color', value);\n\n      if (this.picker) {\n        this.picker.setColor(value);\n      }\n\n      this.$checkbox.attr('checked', value !== '');\n    },\n    _changeColorState: function _changeColorState(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var state = this.$checkbox.attr('checked');\n      var value = state ? '#ffffff' : '';\n      this.setValue(value);\n      this.app.api(this.setter, this.stack);\n    }\n  });\n  ArticleEditor.add('class', 'tool.input', {\n    mixins: ['tool'],\n    type: 'input',\n    input: {\n      tag: 'input',\n      type: 'text',\n      classname: '-form-input'\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$tool.append(this.$input);\n    }\n  });\n  ArticleEditor.add('class', 'tool.number', {\n    mixins: ['tool'],\n    type: 'number',\n    input: {\n      tag: 'input',\n      type: 'number',\n      classname: '-form-input'\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$input.attr('min', 0).css('max-width', '65px');\n      this.$tool.append(this.$input);\n    }\n  });\n  ArticleEditor.add('class', 'tool.segment', {\n    mixins: ['tool'],\n    type: 'segment',\n    input: {\n      tag: 'input',\n      type: 'hidden',\n      classname: '-form-input'\n    },\n    setValue: function setValue(value) {\n      this.$segment.find('.' + this.prefix + '-form-segment-item').removeClass('active');\n      this.$segment.find('[data-segment=' + value + ']').addClass('active');\n      this.$input.val(value);\n    },\n    // private\n    _buildInput: function _buildInput() {\n      this.$segment = this.dom('<div>').addClass(this.prefix + '-form-segment').css('max-width', '200px');\n      var segments = this.obj.segments;\n\n      for (var name in segments) {\n        var $segment = this.dom('<span>').addClass(this.prefix + '-form-segment-item');\n        $segment.attr('data-segment', name).on('click', this._catchSegment.bind(this));\n\n        if (segments[name].hasOwnProperty('icon')) {\n          $segment.html(segments[name].icon);\n        } else {\n          $segment.addClass(this.prefix + '-icon-' + segments[name].prefix + '-' + name);\n        }\n\n        this.$segment.append($segment);\n      }\n\n      this.$segment.append(this.$input);\n      this.$tool.append(this.$segment);\n    },\n    _catchSegment: function _catchSegment(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var $item = this.dom(e.target).closest('.' + this.prefix + '-form-segment-item');\n      var value = $item.attr('data-segment');\n      this.$segment.find('.' + this.prefix + '-form-segment-item').removeClass('active');\n      $item.addClass('active');\n      this.$input.val(value); // call setter\n\n      this.app.api(this.setter, this.stack);\n    }\n  });\n  ArticleEditor.add('class', 'tool.select', {\n    mixins: ['tool'],\n    type: 'select',\n    input: {\n      tag: 'select',\n      classname: '-form-select'\n    },\n    // private\n    _buildInput: function _buildInput() {\n      for (var value in this.obj.options) {\n        var $option = this.dom('<option>');\n        $option.val(value);\n        $option.html(this.lang.parse(this.obj.options[value]));\n        this.$input.append($option);\n      }\n\n      this.$tool.append(this.$input);\n    }\n  });\n  ArticleEditor.add('class', 'tool.textarea', {\n    mixins: ['tool'],\n    type: 'textarea',\n    input: {\n      tag: 'textarea',\n      classname: '-form-textarea'\n    },\n    setFocus: function setFocus() {\n      this.$input.focus();\n      this.$input.get().setSelectionRange(0, 0);\n      this.$input.scrollTop(0);\n    },\n    // private\n    _buildInput: function _buildInput() {\n      if (this._has('rows')) {\n        this.$input.attr('rows', this._get('rows'));\n      }\n\n      this.$input.attr('data-gramm_editor', false);\n      this.$tool.append(this.$input);\n    }\n  });\n  ArticleEditor.add('block', 'block.paragraph', {\n    mixins: ['block'],\n    type: 'paragraph',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<p>');\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        var clone = this.app.block.create(); // clone paragraph styles\n\n        if (!this.opts.clean.enter) {\n          clone = this.duplicateEmpty();\n        }\n\n        if (!this.opts.clean.enterinline) {\n          // clone inline\n          var inline = this.app.selection.getInline();\n\n          if (inline) {\n            var cloned;\n            var inlines = this.app.element.getAllInlines(inline);\n\n            for (var i = 0; i < inlines.length; i++) {\n              if (i === 0) {\n                cloned = inlines[i].cloneNode();\n                cloned.innerHTML = '';\n              } else {\n                var clonedInline = inlines[i].cloneNode();\n                clonedInline.innerHTML = '';\n                cloned.appendChild(clonedInline);\n              }\n            }\n\n            clone = this.app.block.create(cloned.outerHTML);\n          }\n        }\n\n        this.insert({\n          instance: clone,\n          position: 'after',\n          caret: 'start'\n        });\n      } // start\n      else if (this.isCaretStart()) {\n          this.insert({\n            instance: this.duplicateEmpty(),\n            position: 'before'\n          });\n        } // middle\n        else {\n            var $block = this.getBlock();\n            var $part = this.app.element.split($block);\n            this.app.block.set($part, 'start');\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.text', {\n    mixins: ['block'],\n    type: 'text',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<div>').addClass(this.opts.text.classname);\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      this.app.insertion.insertBreakline();\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.address', {\n    mixins: ['block'],\n    type: 'address',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<address>');\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end  check address exit\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        var $block = this.getBlock();\n        var $nodes = $block.children();\n        var len = $nodes.length;\n        var $last = $nodes.eq(len - 1);\n        var $lastPrev = $nodes.eq(len - 2);\n        var html = $block.html().trim();\n        html = this.app.utils.removeInvisibleChars(html);\n\n        if (html.search(/<br\\s?\\/?><br\\s?\\/?>$/) !== -1) {\n          // remove empty\n          $lastPrev.remove();\n          $last.remove(); // insert\n\n          this.insertEmpty({\n            position: 'after',\n            caret: 'start'\n          });\n          return;\n        }\n      } // insert br\n\n\n      this.app.insertion.insertBreakline();\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.cell', {\n    mixins: ['block'],\n    type: 'cell',\n    editable: true,\n    toolbar: {\n      table: {\n        command: 'table.popup',\n        title: '## buttons.table ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      },\n      tune: {\n        command: 'table.cellSetting',\n        title: '## buttons.settings ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<td>');\n    },\n    getNextCell: function getNextCell() {\n      var cell = this.getNext();\n\n      if (!cell) {\n        var row = this.getParent('row');\n\n        if (row) {\n          var nextRow = row.getNextRow();\n\n          if (nextRow) {\n            cell = nextRow.getChildFirst('cell');\n          }\n        }\n      }\n\n      return cell;\n    },\n    getPrevCell: function getPrevCell() {\n      var cell = this.getPrev();\n\n      if (!cell) {\n        var row = this.getParent('row');\n\n        if (row) {\n          var prevRow = row.getPrevRow();\n\n          if (prevRow) {\n            cell = prevRow.getChildLast('cell');\n          }\n        }\n      }\n\n      return cell;\n    },\n    getWidth: function getWidth() {\n      var value = this.$block.attr('width');\n      return value ? value : '';\n    },\n    getNowrap: function getNowrap() {\n      var value = this.$block.css('white-space');\n      return value === 'nowrap';\n    },\n    setWidth: function setWidth(value) {\n      this._eachCell(function ($cell) {\n        if (value === '') {\n          $cell.removeAttr('width');\n        } else {\n          $cell.attr('width', value);\n        }\n      });\n    },\n    setNowrap: function setNowrap(value) {\n      this._eachCell(function ($cell) {\n        value = value ? 'nowrap' : '';\n        $cell.css('white-space', value);\n      });\n    },\n    // handle\n    handleArrow: function handleArrow(e, key, event) {\n      var parentInstance;\n\n      if (event.is('up-left') && this.isCaretStart()) {\n        e.preventDefault();\n        var prev = this.getPrevCell();\n\n        if (prev) {\n          this.app.block.set(prev, 'end');\n        } else {\n          parentInstance = this.getParent('table');\n          this.app.block.set(parentInstance);\n        }\n\n        return true;\n      } else if (event.is('down-right') && this.isCaretEnd()) {\n        e.preventDefault();\n        var next = this.getNextCell();\n\n        if (next) {\n          this.app.block.set(next, 'start');\n        } else {\n          parentInstance = this.getParent('table');\n          this.app.block.set(parentInstance);\n        }\n\n        return true;\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var next = this.getNextCell();\n\n      if (next) {\n        this.app.block.set(next, 'start');\n      } else {\n        var parentInstance = this.getParent('table');\n        this.app.block.set(parentInstance);\n      }\n\n      return true;\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      this.app.insertion.insertBreakline();\n      return true;\n    },\n    // private\n    _eachCell: function _eachCell(func) {\n      var index = 0;\n      var $table = this.$block.closest('table'); // index\n\n      this.$block.closest('tr').find('td, th').each(function ($node, i) {\n        if ($node.get() === this.$block.get()) index = i;\n      }.bind(this));\n      $table.find('tr').each(function ($node) {\n        var cell = $node.find('td, th').get(index);\n        var $cell = this.dom(cell);\n        func($cell); //content.cacheBlocksStyle($cell);\n      }.bind(this));\n    }\n  });\n  ArticleEditor.add('block', 'block.code', {\n    mixins: ['block'],\n    type: 'code',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.code.template);\n    },\n    build: function build() {\n      this._buildCaption();\n\n      this._buildItems('figcaption', 'figcaption');\n    },\n    // handle\n    handleArrow: function handleArrow(e, key, event) {\n      if (event.is('down-right') && this.isCaretEnd()) {\n        var next = this.getNext();\n\n        if (next) {\n          this.app.block.set(next, 'start');\n          return true;\n        } else {\n          this.app.insertion.insertEmptyBlock({\n            position: 'after',\n            caret: 'start'\n          });\n          return true;\n        }\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var num = this.opts.code.spaces;\n      var node = document.createTextNode(Array(num + 1).join(' '));\n      this.app.insertion.insertNode(node, 'end');\n      return true;\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      var last = this.$block.html().search(/\\n$/);\n\n      if (this.isCaretEnd() && last === -1) {\n        this.app.insertion.insertNewline('after', true);\n      } else {\n        this.app.insertion.insertNewline();\n      }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.column', {\n    mixins: ['block'],\n    type: 'column',\n    nested: true,\n    emptiable: true,\n    toolbar: {\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<div>');\n    }\n  });\n  ArticleEditor.add('block', 'block.dlist', {\n    mixins: ['block'],\n    type: 'dlist',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<dl>');\n    },\n    getPlainText: function getPlainText(keepbr) {\n      var html = '';\n      var $items = this.$block.find('dt, dd');\n      var len = $items.length;\n      $items.each(function ($node, i) {\n        var br = keepbr ? '<br>' : '';\n        if (i === len) br = '';\n        html += $node.html() + br;\n      });\n      return html;\n    },\n    setEmpty: function setEmpty() {\n      this.$block.html('');\n      var $item = this.dom('<dt>');\n      this.$block.append($item);\n      this.app.caret.set($item, 'start');\n    },\n    isEmpty: function isEmpty() {\n      var html = this.$block.html();\n      html = this._cleanEmpty(html);\n      var $items = this.$block.find('dt, dd');\n\n      if ($items.length === 0) {\n        html = html.trim();\n        return html === '';\n      } else if ($items.length === 1) {\n        html = $items.eq(0).html();\n        html = this._cleanEmpty(html);\n        return html === '';\n      }\n\n      return false;\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        var currentItem = this.app.selection.getBlock();\n        var $currentItem = this.dom(currentItem);\n        var tag = currentItem.tagName.toLowerCase();\n        var isItemEmpty = this.app.content.isEmptyHtml(currentItem.innerHTML);\n\n        if (tag === 'dt' && isItemEmpty) {\n          // remove empty\n          $currentItem.remove(); // insert\n\n          this.insertEmpty({\n            position: 'after',\n            caret: 'start'\n          });\n          return true;\n        } // insert dt or dd\n\n\n        var $newItem;\n\n        if (tag === 'dt') {\n          $newItem = this.dom('<dd>');\n        } else {\n          $newItem = this.dom('<dt>');\n        }\n\n        this.dom(currentItem).after($newItem);\n        this.app.caret.set($newItem, 'start');\n      } // start\n      else if (this.isCaretStart()) {\n          return true;\n        } // middle\n        else {\n            this.app.insertion.insertBreakline();\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.embed', {\n    mixins: ['block'],\n    type: 'embed',\n    parser: {\n      unparse: function unparse($node) {\n        var code = decodeURI($node.attr('data-embed-code'));\n        var $responsive = $node.find('.' + this.opts.embed.responsive);\n        var $el = $node.find('figcaption');\n        var $figcaption;\n\n        if ($el.length !== 0) {\n          $figcaption = $el.clone();\n          $el.remove();\n        }\n\n        if ($responsive.length === 0) {\n          $node.html(code);\n        } else {\n          $responsive.html(code);\n        }\n\n        if ($figcaption) {\n          $node.append($figcaption);\n        }\n\n        $node.removeAttr('data-embed-code');\n      }\n    },\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      outset: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.outset ##'\n      },\n      embed: {\n        command: 'embed.edit',\n        title: '## buttons.embed ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<figure>');\n    },\n    build: function build() {\n      this._buildCaption();\n\n      this._buildItems('figcaption', 'figcaption');\n\n      this._buildEmbedCode();\n    },\n    addResponsive: function addResponsive() {\n      var $responsive = this.dom('<div>').addClass(this.opts.embed.responsive);\n      var $figcaption = this.$block.find('figcaption');\n      var $cloneFigcaption = $figcaption.clone();\n      var html = this.getEmbedCode();\n      $figcaption.remove();\n      $responsive.html(html);\n      this.$block.html('').append($responsive);\n\n      if ($cloneFigcaption.length !== 0) {\n        this.app.create('block.figcaption', $cloneFigcaption);\n        this.$block.append($cloneFigcaption);\n      }\n    },\n    removeResponsive: function removeResponsive() {\n      this.$block.find('.' + this.opts.embed.responsive).unwrap();\n    },\n    getEmbedCode: function getEmbedCode() {\n      return decodeURI(this.$block.attr('data-embed-code'));\n    },\n    isResponsive: function isResponsive() {\n      return this.$block.find('.' + this.opts.embed.responsive).length !== 0;\n    },\n    // private\n    _buildEmbedCode: function _buildEmbedCode() {\n      var $clone = this.$block.clone();\n      $clone.find('.' + this.opts.embed.responsive).unwrap();\n      $clone.find('figcaption').remove();\n      var code = $clone.html().trim();\n      this.$block.attr('data-embed-code', encodeURI(code));\n    }\n  });\n  ArticleEditor.add('block', 'block.figcaption', {\n    mixins: ['block'],\n    type: 'figcaption',\n    editable: true,\n    toolbar: {\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<figcaption>');\n    },\n    getFigure: function getFigure() {\n      return this.$block.closest('figure').dataget('instance');\n    },\n    // handle\n    handleArrow: function handleArrow(e, key, event) {\n      if (event.is('up-left') && this.isCaretStart() || event.is('down-right') && this.isCaretEnd()) {\n        e.preventDefault();\n        var parentInstance = this.getFigure();\n        this.app.block.set(parentInstance);\n        return true;\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var parentInstance = this.getFigure();\n      this.app.block.set(parentInstance);\n      return true;\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd() || this.isCaretStart()) {\n        return true;\n      } // middle\n      else {\n          this.app.insertion.insertBreakline();\n        }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.grid', {\n    mixins: ['block'],\n    type: 'grid',\n    nested: true,\n    parser: {\n      unparse: function unparse($node) {\n        $node.removeClass(this.prefix + '-grid-overlay');\n      }\n    },\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      valign: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.valign ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      var $block = this.dom('<div>').addClass(this.opts.grid.classname);\n\n      if (this.opts.grid.classes !== '') {\n        $block.addClass(this.opts.grid.classes);\n      }\n\n      return $block;\n    },\n    build: function build() {\n      this._buildOverlay();\n    },\n    // privae\n    _buildOverlay: function _buildOverlay() {\n      if (this.opts.grid && this.opts.grid.overlay) {\n        this.$block.addClass(this.prefix + '-grid-overlay');\n      }\n    }\n  });\n  ArticleEditor.add('block', 'block.heading', {\n    mixins: ['block'],\n    type: 'heading',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<h2>');\n    },\n    getTitle: function getTitle() {\n      var titles = this.lang.get('headings');\n      var tag = this.getTag();\n      var title = this.$block.attr('data-title');\n      return typeof titles[tag] !== 'undefined' ? titles[tag] : title;\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        this.insertEmpty({\n          position: 'after',\n          caret: 'start'\n        });\n      } // start\n      else if (this.isCaretStart()) {\n          this.insert({\n            instance: this.duplicateEmpty(),\n            position: 'before'\n          });\n        } // middle\n        else {\n            var $block = this.getBlock();\n            var $part = this.app.element.split($block);\n            this.app.block.set($part, 'start');\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.image', {\n    mixins: ['block'],\n    type: 'image',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      outset: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.outset ##'\n      },\n      image: {\n        command: 'image.edit',\n        title: '## buttons.settings ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<' + this.opts.image.tag + '>');\n    },\n    build: function build() {\n      this._buildCaption();\n\n      this._buildItems('figcaption', 'figcaption');\n\n      this.data = {\n        'alt': {\n          getter: 'getAlt',\n          setter: 'setAlt'\n        },\n        'link': {\n          getter: 'getLinkUrl',\n          setter: 'setLinkUrl'\n        },\n        'target': {\n          getter: 'getTarget',\n          setter: 'setTarget'\n        },\n        'caption': {\n          getter: 'getCaption',\n          setter: 'setCaption'\n        }\n      };\n    },\n    getImage: function getImage() {\n      return this.$block.find('img').eq(0);\n    },\n    getSrc: function getSrc() {\n      var $img = this.getImage();\n      return $img.attr('src');\n    },\n    getLink: function getLink() {\n      var $link = this.getImage().parent();\n      $link = $link.get().tagName !== 'A' ? false : $link;\n      return $link;\n    },\n    getAlt: function getAlt() {\n      var $img = this.getImage();\n      var alt = $img.attr('alt');\n      return alt ? alt : '';\n    },\n    getLinkUrl: function getLinkUrl() {\n      var $link = this.getLink();\n      return $link ? $link.attr('href') : '';\n    },\n    getTarget: function getTarget() {\n      var $link = this.getLink();\n      return $link ? $link.attr('target') : this.opts.image.newtab;\n    },\n    setAlt: function setAlt(value) {\n      var $img = this.getImage();\n      $img.attr('alt', value);\n    },\n    setTarget: function setTarget(value) {\n      var $link = this.getLink();\n      if (!$link) return;\n      if (value) $link.attr('target', '_blank');else $link.removeAttr('target');\n    },\n    setLinkUrl: function setLinkUrl(value) {\n      var $link = this.getLink();\n\n      if (value === '' && $link) {\n        this.removeLink();\n        return;\n      } else if (!$link) {\n        var $img = this.getImage();\n        $link = this.dom('<a>');\n        $img.wrap($link);\n      }\n\n      $link.attr('href', value);\n    },\n    setImage: function setImage(data) {\n      var $img = this.getImage();\n      $img.attr('src', data.url);\n      if (data.hasOwnProperty('id')) $img.attr('data-image', data.id);\n      if (data.hasOwnProperty('2x')) $img.attr('srcset', data['2x'] + ' 2x');\n      $img.one('load', this.app.editor.adjustHeight.bind(this.app.editor));\n    },\n    removeLink: function removeLink() {\n      var $link = this.getLink();\n\n      if ($link) {\n        $link.unwrap();\n      }\n    }\n  });\n  ArticleEditor.add('block', 'block.layer', {\n    mixins: ['block'],\n    type: 'layer',\n    nested: true,\n    emptiable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.layer.template);\n    },\n    getTitle: function getTitle() {\n      var title = this.$block.attr('data-title');\n      return title || this._getNameByTag();\n    }\n  });\n  ArticleEditor.add('block', 'block.line', {\n    mixins: ['block'],\n    type: 'line',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<hr>');\n    }\n  });\n  ArticleEditor.add('block', 'block.list', {\n    mixins: ['block'],\n    type: 'list',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      format: {\n        command: 'format.popup',\n        title: '## buttons.format ##'\n      },\n      alignment: {\n        command: 'block.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      outdent: {\n        command: 'list.outdent',\n        title: '## buttons.outdent ##'\n      },\n      indent: {\n        command: 'list.indent',\n        title: '## buttons.indent ##'\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<ul>');\n    },\n    unparse: function unparse($el) {\n      this.app.content.unfixListMargin($el);\n    },\n    setEmpty: function setEmpty() {\n      this.$block.html('');\n      var $item = this.dom('<li>');\n      this.$block.append($item);\n      this.app.caret.set($item, 'start');\n    },\n    isEmpty: function isEmpty() {\n      var html = this.$block.html();\n      html = this._cleanEmpty(html);\n      var $items = this.$block.find('li');\n\n      if ($items.length === 0) {\n        html = html.trim();\n        return html === '';\n      } else if ($items.length === 1) {\n        html = $items.eq(0).html();\n        html = this._cleanEmpty(html);\n        return html === '';\n      }\n\n      return false;\n    },\n    // handle\n    handleTab: function handleTab(e, key, event) {\n      var currentItem = this.app.selection.getBlock();\n      var isItemStart = this.app.caret.is(currentItem, 'start');\n\n      if (this.isCaretStart() || this.isCaretEnd()) {\n        var next = this.getNext();\n\n        if (next) {\n          e.preventDefault();\n          this.app.block.set(next, 'start');\n          return true;\n        }\n      } else {\n        if (this.opts.tab.spaces && !isItemStart) {\n          return;\n        }\n\n        e.preventDefault();\n        this.app.list.indent();\n        return true;\n      }\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      var $newItem, $currentItem, currentItem, isItemEmpty; // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        currentItem = this.app.selection.getBlock();\n        $currentItem = this.dom(currentItem);\n        isItemEmpty = this.app.content.isEmptyHtml(currentItem.innerHTML); // list exit\n\n        if (isItemEmpty) {\n          // remove empty\n          $currentItem.remove(); // insert\n\n          this.insertEmpty({\n            position: 'after',\n            caret: 'start'\n          });\n          return true;\n        } // insert li\n\n\n        $newItem = this.dom('<li>');\n        this.app.element.cloneAttrs(currentItem, $newItem);\n        this.dom(currentItem).after($newItem);\n        this.app.caret.set($newItem, 'start');\n      } // start\n      else if (this.isCaretStart()) {\n          $newItem = this.dom('<li>');\n          currentItem = this.app.selection.getBlock();\n          this.app.element.cloneAttrs(currentItem, $newItem);\n          this.dom(currentItem).before($newItem);\n        } // middle\n        else {\n            currentItem = this.app.selection.getBlock();\n            $currentItem = this.dom(currentItem);\n            isItemEmpty = this.app.content.isEmptyHtml(currentItem.innerHTML);\n            var isItemStart = this.app.caret.is(currentItem, 'start');\n            var isItemEnd = this.app.caret.is(currentItem, 'end', ['ul', 'ol']);\n            $newItem = this.dom('<li>');\n            this.app.element.cloneAttrs(currentItem, $newItem); // empty\n\n            if (isItemEmpty) {\n              $currentItem.after($newItem);\n              this.app.caret.set($newItem, 'start');\n            } // start\n            else if (isItemStart) {\n                $currentItem.before($newItem);\n              } // end\n              else if (isItemEnd) {\n                  var $listInside = $currentItem.find('ul, ol').first();\n\n                  if ($listInside.length !== 0) {\n                    $newItem.append(this.app.utils.createInvisibleChar());\n                    $newItem.append($listInside);\n                    $currentItem.after($newItem);\n                  } else {\n                    $currentItem.after($newItem);\n                  }\n\n                  this.app.caret.set($newItem, 'start');\n                } // middle\n                else {\n                    var $part = this.app.element.split(currentItem);\n                    this.app.caret.set($part, 'start');\n                  }\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.noneditable', {\n    mixins: ['block'],\n    type: 'noneditable',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<div>').addClass(this.opts.noneditable.classname);\n    }\n  });\n  ArticleEditor.add('block', 'block.quote', {\n    mixins: ['block'],\n    type: 'quote',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.quote.template);\n    },\n    build: function build() {\n      this._buildCaption();\n\n      this._buildItems('p', 'quoteitem');\n\n      this._buildItems('figcaption', 'figcaption');\n    }\n  });\n  ArticleEditor.add('block', 'block.quoteitem', {\n    mixins: ['block'],\n    type: 'quoteitem',\n    editable: true,\n    toolbar: {\n      alignment: {\n        command: 'addbar.popup',\n        observer: 'block.observe',\n        title: '## buttons.align ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<p>');\n    },\n    getBlockquote: function getBlockquote() {\n      return this.$block.closest('blockquote');\n    },\n    // handle\n    handleArrow: function handleArrow(e, key, event) {\n      var $blockquote = this.getBlockquote();\n      if ($blockquote.length === 0) return;\n      var isStart = this.app.caret.is($blockquote, 'start');\n      var isEnd = this.app.caret.is($blockquote, 'end');\n\n      if (event.is('up-left') && isStart || event.is('down-right') && isEnd) {\n        e.preventDefault();\n        var parentInstance = this.getParent('quote');\n        this.app.block.set(parentInstance);\n        return true;\n      }\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var next = this.getNext();\n\n      if (next) {\n        this.app.block.set(next, 'start');\n        return true;\n      } else {\n        var quote = this.getParent('quote');\n        this.app.block.set(quote);\n        return true;\n      }\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault(); // prepare new instance\n\n      var newInstance = this.app.create('block.quoteitem'); // empty or end\n\n      if (this.isEmpty() || this.isCaretEnd()) {\n        this.insert({\n          instance: newInstance,\n          position: 'after',\n          caret: 'start'\n        });\n      } // start\n      else if (this.isCaretStart()) {\n          this.insert({\n            instance: newInstance,\n            position: 'before'\n          });\n        } // middle\n        else {\n            var $block = this.getBlock();\n            var $part = this.app.element.split($block);\n            this.app.block.set($part, 'start');\n          }\n\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.row', {\n    mixins: ['block'],\n    type: 'row',\n    toolbar: {\n      table: {\n        command: 'table.popup',\n        title: '## buttons.table ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<tr>');\n    },\n    getNextRow: function getNextRow() {\n      var row = this.getNext();\n      var $parent = this.$block.parent();\n\n      if (!row && $parent.get().tagName !== 'TABLE') {\n        row = $parent.nextElement().find('tr').first().dataget('instance');\n      }\n\n      return row;\n    },\n    getPrevRow: function getPrevRow() {\n      var row = this.getPrev();\n      var $parent = this.$block.parent();\n\n      if (!row && $parent.get().tagName !== 'TABLE') {\n        row = $parent.prevElement().find('tr').last().dataget('instance');\n      }\n\n      return row;\n    },\n    // handle\n    handleDelete: function handleDelete(e, key, event) {\n      e.preventDefault();\n      return true;\n    },\n    handleArrow: function handleArrow(e, key, event) {\n      e.preventDefault();\n\n      if (event.is('up-left')) {\n        var parentInstance = this.getParent('table');\n        this.app.block.set(parentInstance);\n      } else {\n        var cellInstance = this.getChildFirst('cell');\n        this.app.block.set(cellInstance, 'start');\n      }\n\n      return true;\n    },\n    handleTab: function handleTab(e, key, event) {\n      e.preventDefault();\n      var next = this.getNextRow();\n\n      if (next) {\n        this.app.block.set(next);\n      } else {\n        var parentInstance = this.getParent('table');\n        this.app.block.set(parentInstance);\n      }\n\n      return true;\n    },\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      return true;\n    }\n  });\n  ArticleEditor.add('block', 'block.table', {\n    mixins: ['block'],\n    type: 'table',\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      table: {\n        command: 'table.popup',\n        title: '## buttons.table ##'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.table.template);\n    },\n    build: function build() {\n      this._buildItems('tr', 'row');\n\n      this._buildItems('td, th', 'cell');\n    },\n    getFirstCell: function getFirstCell() {\n      var $cell = this.$block.find('th, td').first();\n\n      if ($cell.length !== 0) {\n        return $cell.dataget('instance');\n      }\n    }\n  });\n  ArticleEditor.add('block', 'block.variable', {\n    mixins: ['block'],\n    type: 'variable',\n    editable: false,\n    inline: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      }\n    },\n    create: function create() {\n      return this.dom('<span>').addClass(this.opts.variable.classname);\n    },\n    build: function build() {\n      this.$block.addClass(this.opts.variable.classname);\n    }\n  });\n  ArticleEditor.add('block', 'block.form', {\n    mixins: ['block'],\n    type: 'form',\n    create: function create() {\n      return this.dom('<form>');\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    }\n  });\n  ArticleEditor.add('block', 'block.card', {\n    mixins: ['block'],\n    type: 'card',\n    editable: true,\n    toolbar: {\n      add: {\n        command: 'addbar.popup',\n        title: '## buttons.add ##'\n      },\n      bold: {\n        command: 'inline.set',\n        title: '## buttons.bold ##',\n        params: {\n          tag: 'b'\n        }\n      },\n      italic: {\n        command: 'inline.set',\n        title: '## buttons.italic ##',\n        params: {\n          tag: 'i'\n        }\n      },\n      deleted: {\n        command: 'inline.set',\n        title: '## buttons.deleted ##',\n        params: {\n          tag: 'del'\n        }\n      },\n      link: {\n        command: 'link.popup',\n        title: '## buttons.link ##'\n      },\n      image: {\n        command: 'image.editCard',\n        title: '## buttons.settings ##',\n        observer: 'block.observeCard'\n      }\n    },\n    control: {\n      trash: {\n        command: 'block.remove',\n        title: '## buttons.delete ##'\n      },\n      duplicate: {\n        command: 'block.duplicate',\n        title: '## buttons.duplicate ##'\n      }\n    },\n    create: function create() {\n      return this.dom(this.opts.card.template);\n    },\n    build: function build() {\n      this.data = {\n        'alt': {\n          getter: 'getAlt',\n          setter: 'setAlt'\n        }\n      };\n    },\n    hasImage: function hasImage() {\n      return this.$block.find('img').length !== 0;\n    },\n    getImage: function getImage() {\n      return this.$block.find('img').eq(0);\n    },\n    getAlt: function getAlt() {\n      var $img = this.getImage();\n      var alt = $img.attr('alt');\n      return alt ? alt : '';\n    },\n    setAlt: function setAlt(value) {\n      var $img = this.getImage();\n      $img.attr('alt', value);\n    },\n    setImage: function setImage(data) {\n      var $img = this.getImage();\n      $img.attr('src', data.url);\n\n      if (data.hasOwnProperty('id')) {\n        $img.attr('data-image', data.id);\n      }\n\n      $img.one('load', this.app.editor.adjustHeight.bind(this.app.editor));\n    },\n    // handle\n    handleEnter: function handleEnter(e, key, event) {\n      e.preventDefault();\n      this.app.insertion.insertBreakline();\n      return true;\n    }\n  });\n  window.ArticleEditor = ArticleEditor; // Data attribute load\n\n  window.addEventListener('load', function () {\n    ArticleEditor('[data-article-editor]');\n  }); // Export for webpack\n\n  if (( false ? undefined : _typeof(module)) === 'object' && module.exports) {\n    module.exports = ArticleEditor;\n    module.exports.ArticleEditor = ArticleEditor;\n  }\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvcGx1Z2lucy9hcnRpY2xlLWVkaXRvci9hcnRpY2xlLWVkaXRvci5qcz84ZDJkIl0sIm5hbWVzIjpbIkNvZGVNaXJyb3IiLCJBamF4Iiwic2V0dGluZ3MiLCJwb3N0Iiwib3B0aW9ucyIsIkFqYXhSZXF1ZXN0IiwiZ2V0IiwibWV0aG9kIiwiZGVmYXVsdHMiLCJ1cmwiLCJiZWZvcmUiLCJzdWNjZXNzIiwiZXJyb3IiLCJkYXRhIiwiYXN5bmMiLCJoZWFkZXJzIiwicCIsImV4dGVuZCIsInRvVXBwZXJDYXNlIiwicHJlcGFyZURhdGEiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZXRIZWFkZXJzIiwic2VuZCIsInByb3RvdHlwZSIsIm9iajEiLCJvYmoyIiwibmFtZSIsImlzRm9ybURhdGEiLCJ0b1BhcmFtcyIsInNldFJlcXVlc3RIZWFkZXIiLCJ3aW5kb3ciLCJGb3JtRGF0YSIsImlzQ29tcGxldGUiLCJzdGF0dXMiLCJvbmxvYWQiLCJsb2FkZWQiLCJiaW5kIiwiY2FsbCIsInJlc3BvbnNlIiwianNvbiIsInBhcnNlSnNvbiIsInN0YXR1c1RleHQiLCJzdHIiLCJvIiwiSlNPTiIsInBhcnNlIiwiZSIsIm9iaiIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJrIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsIkRvbUNhY2hlIiwiRG9tRXhwYW5kbyIsIkRhdGUiLCJnZXRUaW1lIiwiRG9tIiwic2VsZWN0b3IiLCJjb250ZXh0IiwicmVhZHkiLCJmbiIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxlbmd0aCIsIm5vZGVzIiwicyIsImMiLCJuIiwicmVodG1sIiwidGVzdCIsImNyZWF0ZSIsIm5vZGVUeXBlIiwiY2hpbGROb2RlcyIsIl9pc1dpbmRvd05vZGUiLCJfcXVlcnkiLCJfc2xpY2UiLCJodG1sIiwiY3JlYXRlRWxlbWVudCIsIlJlZ0V4cCIsIiQxIiwiZWxtbnMiLCJpbm5lckhUTUwiLCJpIiwibCIsInB1c2giLCJkYXRhc2V0Iiwia2V5IiwidmFsdWUiLCJlYWNoIiwiJG5vZGUiLCJkYXRhaW5kZXgiLCJkYXRhZ2V0IiwiZWwiLCJpbmRleCIsIm5leHRJbmRleCIsImFkZCIsImNvbmNhdCIsIl9hcnJheSIsImdldEFsbCIsImVxIiwiZmlyc3QiLCJsYXN0IiwiY29udGVudHMiLCJsZW4iLCJpcyIsImZpbHRlciIsInVuZGVmaW5lZCIsIm5vZGUiLCJOb2RlIiwibWF0Y2hlcyIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibm90IiwiZmluZCIsIiRuIiwibnMiLCJjaGlsZHJlbiIsInBhcmVudCIsInBhcmVudE5vZGUiLCJwYXJlbnRzIiwiX2NvbnRleHQiLCJjbG9zZXN0IiwiaXNOb2RlIiwibmV4dCIsIl9zaWJsaW5nIiwibmV4dEVsZW1lbnQiLCJwcmV2IiwicHJldkVsZW1lbnQiLCJjc3MiLCJzdHlsZSIsIl9nZXRIZWlnaHRPcldpZHRoIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImF0dHIiLCJjaGVja2VkIiwiX2Jvb2xlYW4iLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJyZURhdGFBdHRyIiwiYXR0cnMiLCJhdHRyaWJ1dGVzIiwicmVwbGFjZXIiLCJnIiwibm9kZU5hbWUiLCJkYXRhTmFtZSIsIm1hdGNoIiwidmFsIiwicmVwbGFjZSIsInNlYXJjaCIsIl9vYmplY3QiLCJfbnVtYmVyIiwicGFyc2VGbG9hdCIsInR5cGUiLCJyZW1vdmVBdHRyIiwicmVtb3ZlQXR0cmlidXRlIiwic3BsaXQiLCJmb3JFYWNoIiwiYWRkQ2xhc3MiLCJfZWFjaENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImhhc0NsYXNzIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJlbXB0eSIsImFwcGVuZCIsInRleHQiLCJ0ZXh0Q29udGVudCIsImFmdGVyIiwiX2luamVjdCIsImZyYWciLCJpbnNlcnRBZGphY2VudEhUTUwiLCJyZXZlcnNlIiwiaW5zZXJ0QmVmb3JlIiwibmV4dFNpYmxpbmciLCJlbG1zIiwiYXBwZW5kQ2hpbGQiLCJwcmVwZW5kIiwiZmlyc3RDaGlsZCIsIndyYXAiLCJ3cmFwcGVyIiwidW53cmFwIiwiZG9jRnJhZyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjaGlsZCIsInJlbW92ZUNoaWxkIiwicmVwbGFjZUNoaWxkIiwicmVwbGFjZVdpdGgiLCJyZXN1bHQiLCJyZW1vdmUiLCJjbG9uZSIsImV2ZW50cyIsImNvcHkiLCJfY2xvbmUiLCJfY2xvbmVFdmVudHMiLCJzaG93IiwiX2hhc0Rpc3BsYXlOb25lIiwidGFyZ2V0IiwiZGlzcGxheSIsImhpZGUiLCJzY3JvbGxUb3AiLCJpc1dpbmRvdyIsImlzRG9jdW1lbnQiLCJzY3JvbGxpbmdFbGVtZW50IiwiYm9keSIsImRvY3VtZW50RWxlbWVudCIsInBhcnNlSW50Iiwic2Nyb2xsVG8iLCJwYWdlWU9mZnNldCIsIm9mZnNldCIsIl9nZXRQb3MiLCJwb3NpdGlvbiIsIndpZHRoIiwiX2dldFNpemUiLCJoZWlnaHQiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJjbGljayIsIl90cmlnZ2VyIiwiZm9jdXMiLCJibHVyIiwib24iLCJuYW1lcyIsImhhbmRsZXIiLCJvbmUiLCJldmVudCIsIl9nZXRFdmVudE5hbWUiLCJuYW1lc3BhY2UiLCJfZ2V0RXZlbnROYW1lc3BhY2UiLCJfZ2V0T25lSGFuZGxlciIsIl9lIiwib2ZmIiwidGVzdEV2ZW50IiwidGVzdE5hbWVzcGFjZSIsInRlc3RFdmVudE5hbWVzcGFjZSIsInRlc3RQb3NpdGl2ZSIsIl9vZmZFdmVudCIsInNlcmlhbGl6ZSIsImFzT2JqZWN0IiwiZWxlbWVudHMiLCJkaXNhYmxlZCIsInoiLCJvcHQiLCJzZWxlY3RlZCIsIl9wYXJhbXMiLCJzY3JvbGwiLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiZmFkZUluIiwic3BlZWQiLCJhbmltIiwiX2FuaW0iLCJmYWRlT3V0Iiwic2xpZGVVcCIsInNsaWRlRG93biIsIl9xdWVyeUNvbnRleHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZCIsImdldEVsZW1lbnRCeUlkIiwic2xpY2UiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yIiwic2libGluZyIsIk5vZGVMaXN0IiwiYXJyIiwiRnVuY3Rpb24iLCJwYXJhbXMiLCJfZW5jb2RlVXJpIiwiaXNOYU4iLCJyZXMiLCJkb20iLCJjbG9uZU5vZGUiLCJfZXZlbnRzIiwiY25hbWUiLCJfZ2V0RG9jU2l6ZSIsIk1hdGgiLCJyb3VuZCIsIm1heCIsImRpbSIsInRvcCIsImxlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRMZWZ0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJkb2NFbGVtIiwid2luIiwiZGVmYXVsdFZpZXciLCJjbGllbnRUb3AiLCJwYWdlWE9mZnNldCIsImNsaWVudExlZnQiLCJjaGFyQXQiLCJtb2RlIiwiJHRhcmdldHMiLCJmaXhTdHlsZSIsInRtcCIsInRoaXNTdHlsZSIsInNlbGYiLCJhcHBseSIsImFyZ3VtZW50cyIsImNvbmRpdGlvbiIsImhhbmRsZXJzIiwidG9TdHJpbmciLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3BsaWNlIiwiY3VycmVudFN0eWxlIiwic3BlZWREZWYiLCJhcnhfdXVpZCIsIkFydGljbGVFZGl0b3IiLCJBcnRpY2xlRWRpdG9ySW5pdCIsIiRlbG1zIiwiJEFSWCIsImluc3RhbmNlIiwiJGVsIiwiQXBwIiwiaW5zdGFuY2VzIiwiYWpheCIsInByZWZpeCIsInZlcnNpb24iLCJsYW5nIiwiX21peGlucyIsIl9yZXBvc2l0b3J5IiwiX3N1YnNjcmliZSIsImtleWNvZGVzIiwiQkFDS1NQQUNFIiwiREVMRVRFIiwiVVAiLCJET1dOIiwiRU5URVIiLCJTUEFDRSIsIkVTQyIsIlRBQiIsIkNUUkwiLCJNRVRBIiwiU0hJRlQiLCJBTFQiLCJSSUdIVCIsIkxFRlQiLCJ0cmFuc2xhdGlvbnMiLCJsb2NhbG9wdHMiLCJvcHRzIiwicGFyc2VyIiwibmVzdGVkIiwic3Vic2NyaWJlIiwidHJpbSIsIm1vZHVsZSIsImZ1bmMiLCJGIiwibWl4aW5zIiwiaW5oZXJpdCIsInByb3RvIiwiZXh0ZW5kZWQiLCJkZWVwIiwibWVyZ2UiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJleGNlcHRpb24iLCJjdXJyZW50IiwiZiIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2RlZmluZUdldHRlcl9fIiwiYWRkTGFuZyIsInBsdWdpbnMiLCJjb250ZW50IiwicGxhY2Vob2xkZXIiLCJjdXN0b20iLCJqcyIsImVkaXRvciIsImNsYXNzbmFtZSIsInN5bmMiLCJkcm9wIiwicGFkZGluZyIsIm1hcmt1cCIsIm1vYmlsZSIsInNjcm9sbFRhcmdldCIsImRpcmVjdGlvbiIsInNwZWxsY2hlY2siLCJncmFtbWFybHkiLCJub3RyYW5zbGF0ZSIsIm1pbkhlaWdodCIsIm1heEhlaWdodCIsImRvY3R5cGUiLCJzZWxlY3Rpb24iLCJtdWx0aXBsZSIsImNvbnRyb2wiLCJzb3VyY2UiLCJpbWFnZSIsInN0YXRlcyIsInVwbG9hZCIsInNlbGVjdCIsImNsaXBib2FyZCIsInR5cGVzIiwidGFnIiwibmV3dGFiIiwibGluayIsImNsYXNzZXMiLCJjb2RlbWlycm9yU3JjIiwiY29kZW1pcnJvciIsInN0YXRlIiwibGltaXQiLCJwYXRoIiwidGl0bGUiLCJzdGlja3kiLCJzdGlja3lNaW5IZWlnaHQiLCJzdGlja3lUb3BPZmZzZXQiLCJhdXRvc2F2ZSIsInBhc3RlIiwiY2xlYW4iLCJhdXRvbGluayIsInBhcmFncmFwaGl6ZSIsInBsYWludGV4dCIsImxpbmtUYXJnZXQiLCJpbWFnZXMiLCJsaW5rcyIsImtlZXBTdHlsZSIsImtlZXBDbGFzcyIsImtlZXBBdHRycyIsImZvcm1UYWdzIiwiYmxvY2tUYWdzIiwiaW5saW5lVGFncyIsImNvbW1lbnRzIiwiZW50ZXIiLCJlbnRlcmlubGluZSIsInRhYiIsInNwYWNlcyIsInRvcGJhciIsInVuZG9yZWRvIiwic2hvcnRjdXRzIiwidG9vbGJhciIsImJ1dHRvbnMiLCJjb21tYW5kIiwidGVtcGxhdGUiLCJvYnNlcnZlciIsInVuZG8iLCJyZWRvIiwic2hvcnRjdXQiLCJleGNlcHQiLCJ0YWdzIiwiaGlkZGVuIiwiY2FyZCIsIm5vbmVkaXRhYmxlIiwiZW1iZWQiLCJyZXNwb25zaXZlIiwiY29kZSIsImxpbmUiLCJsYXllciIsInRhYmxlIiwicXVvdGUiLCJzbmlwcGV0cyIsInRlbXBsYXRlcyIsImdyaWQiLCJvdmVybGF5IiwicmlnaHQiLCJjb2x1bW5zIiwiZ3V0dGVyIiwicGF0dGVybnMiLCJzaXplIiwibm9mb2xsb3ciLCJhZGRiYXIiLCJhZGRiYXJBZGQiLCJhZGRiYXJIaWRlIiwiZm9ybWF0Iiwib3V0c2V0Iiwibm9uZSIsImJvdGgiLCJhbGlnbiIsImNlbnRlciIsImp1c3RpZnkiLCJ2YWxpZ24iLCJtaWRkbGUiLCJib3R0b20iLCJzaG9ydGN1dHNCYXNlIiwibWFya2VyQ2hhciIsImRlbmllZCIsImluY29kZSIsImZvcm0iLCJpbmxpbmUiLCJibG9jayIsImJzbW9kYWwiLCJyZWdleCIsInlvdXR1YmUiLCJ2aW1lbyIsImltYWdldXJsIiwiYWRkYmFyRXh0ZW5kIiwiYWRkYmFyT2JqIiwicGFyYWdyYXBoIiwic25pcHBldCIsInBhcnNlclRhZ3MiLCJmb3JtYXRPYmoiLCJkaXYiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJ1bCIsIm9sIiwiZGwiLCJhZGRyZXNzIiwiJGVsZW1lbnQiLCJ1dWlkIiwibWFwcyIsIiR3aW4iLCIkZG9jIiwiJGJvZHkiLCJhcHAiLCJpbml0aWFsU2V0dGluZ3MiLCJfaW5pdGVyIiwiX3ByaW9yaXR5IiwiX3BsdWdpbnMiLCJzdGFydGVkIiwic3RhcnQiLCJpc1RleHRhcmVhIiwiaXNTdGFydGVkIiwiX2luaXRDb3JlIiwic2V0dGluZyIsImJyb2FkY2FzdCIsIl9pbml0TW9kdWxlcyIsIl9pbml0UGx1Z2lucyIsIl9zdGFydFByaW9yaXR5IiwiX3N0YXJ0TW9kdWxlcyIsIl9zdGFydFBsdWdpbnMiLCJfbG9hZE1vZHVsZXNBbmRQbHVnaW5zIiwidGFnTmFtZSIsInN0b3AiLCJpc1N0b3BwZWQiLCJfc3RvcFByaW9yaXR5IiwiX3N0b3BNb2R1bGVzIiwiX3N0b3BQbHVnaW5zIiwiRXZlbnQiLCJjYWxsYmFja3MiLCJoYXMiLCJicm9hZGNhc3RQYXJhbXMiLCJicm9hZGNhc3RIdG1sIiwiYXJncyIsIl9uYW1lIiwiaW5pdCIsImFwaSIsIm5hbWVzcGFjZXMiLCJwb3AiLCJkdW1wIiwiaW5kZXhPZiIsIl9jYWxsIiwiX2l0ZXJhdGUiLCJwcmlvcml0eSIsImlzSW4iLCJzdG9wcGVkIiwiQXJyYXkiLCJpc0FycmF5Iiwic2V0IiwiaWQiLCJnZXR0ZXIiLCJzZXR0ZXIiLCIkYmxvY2siLCJfYnVpbGQiLCJfYnVpbGREYXRhIiwiX3JlbmRlciIsImlzQmxvY2siLCJpc0FsbG93ZWRCdXR0b24iLCJnZXRUeXBlIiwiYmxvY2tzIiwiYWxsIiwiaXNFZGl0YWJsZSIsImlzRmlyc3RMZXZlbCIsImVkaXRhYmxlIiwiaXNJbmxpbmVCbG9jayIsImlzQWxsU2VsZWN0ZWQiLCJpc0FsbCIsImlzRW1wdHkiLCJpc0VtcHRpYWJsZSIsIl9jbGVhbkVtcHR5IiwiX2lzRW1wdHkiLCJlbXB0aWFibGUiLCJpc0NhcmV0U3RhcnQiLCJjYXJldCIsImlzQ2FyZXRFbmQiLCJnZXREYXRhIiwiZ2V0VGFnIiwidG9Mb3dlckNhc2UiLCJnZXRUaXRsZSIsInRpdGxlcyIsImdldE9mZnNldCIsImdldEZyYW1lIiwiZWxPZmZzZXQiLCJnZXRCbG9jayIsImdldEh0bWwiLCJnZXRQbGFpblRleHQiLCJnZXRUZXh0RnJvbUh0bWwiLCJubCIsImdldE91dGVySHRtbCIsIm91dGVySFRNTCIsImdldFBhcmVudHMiLCJkYXRhdHlwZSIsImdldFBhcmVudCIsImdldE5leHQiLCJnZXRQcmV2IiwiZ2V0Q2hpbGRGaXJzdCIsImdldENoaWxkTGFzdCIsImdldElkIiwiZ2V0QWxpZ24iLCJnZXRWYWxpZ24iLCJnZXRPdXRzZXQiLCJnZXRDYXB0aW9uIiwiJGNhcHRpb24iLCJzZXREYXRhIiwic2V0RW1wdHkiLCJhZGRFbXB0eUJ1dHRvbiIsInNldFNlbGVjdEFsbCIsInNldEh0bWwiLCJfYnVpbGRJbnN0YW5jZXNJbnNpZGUiLCJzZXRJZCIsInNldEFsaWduIiwiX3JlbW92ZU9iakNsYXNzZXMiLCJzZXRWYWxpZ24iLCJzZXRPdXRzZXQiLCJ1cGRhdGVQb3NpdGlvbiIsInNldENhcHRpb24iLCJkdXBsaWNhdGUiLCIkY2xvbmUiLCJkdXBsaWNhdGVFbXB0eSIsImluc2VydEVtcHR5IiwiaW5zZXJ0IiwiZGVmcyIsImRlbGV0ZUNvbnRlbnRzIiwiaW5zZXJ0aW9uIiwiaW5zZXJ0TGlzdFRvTGlzdCIsImluc2VydE5vZGUiLCJkZXRlY3RQb3NpdGlvbiIsImVsZW1lbnQiLCJidWlsZCIsIm9ic2VydmUiLCJhcHBlbmROZXh0IiwibmV4dFR5cGUiLCIkaXRlbXMiLCJfYXBwZW5kTGlzdEh0bWwiLCJnZXRUb3BJbmxpbmUiLCJpbnNlcnRIdG1sIiwiYXBwZW5kVG9QcmV2IiwicHJldlR5cGUiLCJtb3ZlVXAiLCJfbW92ZSIsIm1vdmVEb3duIiwiJHRhcmdldCIsIiRpdGVtIiwicmVtb3ZlVGFncyIsInNhdmUiLCIkdGFyZ2V0QmxvY2siLCJyZXN0b3JlIiwiX2J1aWxkSW5zdGFuY2VJbnNpZGUiLCJfYnVpbGRJdGVtcyIsIl9idWlsZENhcHRpb24iLCJfZ2V0TmFtZUJ5VGFnIiwidXRpbHMiLCJjYXBpdGFsaXplIiwiX3JlbmRlckVkaXQiLCJfcmVuZGVyRHJhZ2dhYmxlIiwiX3JlbmRlckVkaXRhYmxlIiwiZHJhZ2dhYmxlIiwicHJldmVudERlZmF1bHQiLCJyZW1vdmVJbnZpc2libGVDaGFycyIsIl9idWlsZE9iakNsYXNzZXMiLCJyZW1vdmVFbXB0eUF0dHJzIiwic3RhY2siLCJfb2JzZXJ2ZSIsImdldEVsZW1lbnQiLCIkdG9vbCIsImdldElucHV0IiwiJGlucHV0IiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInNldEZvY3VzIiwidHJpZ2dlciIsIl9idWlsZFRvb2wiLCJfYnVpbGRMYWJlbCIsIl9idWlsZElucHV0RWxlbWVudCIsIl9idWlsZElucHV0IiwiX2J1aWxkRXZlbnQiLCJfaGFzIiwiX2dldElucHV0UGFyYW0iLCJfY2F0Y2hTZXR0ZXIiLCIkbGFiZWwiLCJsYWJlbCIsImlucHV0IiwiX2dldCIsIndoaWNoIiwibGFuZ0tleSIsInZhcnMiLCJzZWN0aW9uIiwiY29udGFpbmVycyIsIm1haW4iLCJiYXJzIiwiX2J1aWxkTWFpbiIsIl9idWlsZENvbnRhaW5lcnMiLCIkbWFpbiIsIl9idWlsZEJTTW9kYWwiLCJlbE5hbWUiLCJfY3JlYXRlQ29udGFpbmVyIiwibW9iaWxlTW9kZSIsIl9idWlsZEZyYW1lIiwiX2J1aWxkQmx1ckNsYXNzIiwiX2J1aWxkT3B0aW9ucyIsIl9idWlsZFBhcnNlclRhZ3MiLCJfYnVpbGRTdGFydEh0bWwiLCJfYnVpbGRMYXlvdXQiLCJfYnVpbGRDb250ZW50IiwiJGVkaXRvciIsImxvYWQiLCJfc2V0Rm9jdXNPblN0YXJ0Iiwib2JzZXJ2ZVN0YXRlcyIsImluc2VydENvbnRlbnQiLCJzZXRDb250ZW50IiwiX3NldEZvY3VzQ2FyZXQiLCJfc2V0Rm9jdXNFdmVudCIsInNldEJsdXIiLCJpc0ZvY3VzIiwiX3Vuc2V0Rm9jdXNDb250YWluZXJDbGFzcyIsIl9lbmFibGVUb29sYmFyQnV0dG9ucyIsInVuc2V0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiaXNNb2JpbGVWaWV3IiwiY2xvc2UiLCJwb3B1cCIsInNlbGVjdEFsbCIsIl9zZXRTZWxlY3RBbGxDbGFzcyIsInNldEZpcnN0TGV2ZWwiLCJ1bnNlbGVjdEFsbCIsInVuc2V0U2VsZWN0QWxsQ2xhc3MiLCJhZGRCdXR0b24iLCJnZXRCdXR0b25zIiwiZ2V0Q29udGVudCIsInRpZHkiLCJfZ2V0Q29udGVudCIsImdldEZyYW1lUmVjdCIsImdldExheW91dCIsIiRsYXlvdXQiLCJnZXRIZWFkIiwiZ2V0RG9jIiwiZ2V0Qm9keSIsImdldERvY05vZGUiLCJjb250ZW50V2luZG93IiwiZ2V0V2luIiwiZ2V0V2luTm9kZSIsImFkanVzdEhlaWdodCIsInNldFRpbWVvdXQiLCJ0b2dnbGVWaWV3IiwiYnV0dG9uIiwiZW5hYmxlIiwidW5zZXRUb2dnbGVkIiwicnVuIiwicnVuRWRpdGFibGVCbG9ja3MiLCJkaXNhYmxlIiwic2V0VG9nZ2xlZCIsInBhdXNlIiwicGF1c2VFZGl0YWJsZUJsb2NrcyIsImlzTGF5b3V0IiwiY29udGFpbmVyIiwiZW1wdHlwYXJhZ3JhcGgiLCJpc0VtcHR5SHRtbCIsIiRlIiwiX2NyZWF0ZURvY3R5cGUiLCJzY3JpcHRzIiwiX2NyZWF0ZVNjcmlwdHMiLCJsYXlvdXQiLCJfd3JpdGVDb2RlIiwiX2dldENvbnRlbnRWYWx1ZSIsIiRwYXJzZWQiLCJ1bnBhcnNlZCIsInVucGFyc2UiLCJfbG9hZCIsIl9idWlsZFZpc2liaWxpdHkiLCJfYnVpbGRFZGl0b3JDc3MiLCJfYnVpbGRDc3NMaW5rIiwiX2J1aWxkQ3VzdG9tQ3NzIiwiaHJlZiIsIiRjc3MiLCJfYnVpbGRHcmlkQ3NzVmFyIiwic2V0UHJvcGVydHkiLCJfYnVpbGREcmFnZ2FibGUiLCJkYXRhVHJhbnNmZXIiLCJfbG9hZEltYWdlcyIsIl9sb2FkZWQiLCJfbG9hZGVkSW1hZ2UiLCJpbWFnZXNsZW4iLCIkaW1hZ2VzIiwiX2xvYWRJbWFnZSIsInRpbWVySW1nIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiJGltZyIsImltZyIsInNyYyIsIl9nZXRDYXJldFBvc2l0aW9uIiwiX2dldEZvY3VzVGFyZ2V0IiwiX3NldEZvY3VzQ29udGFpbmVyQ2xhc3MiLCJnZXRGaXJzdCIsImdldExhc3QiLCJ3cml0ZSIsImV2ZW50bmFtZSIsInRvZ2dsZSIsIiRzb3VyY2UiLCJfaGFuZGxlQ2hhbmdlcyIsImhhbmRsZVRleHRhcmVhVGFiIiwiZGlzYWJsZVN0aWNreSIsImRlc3Ryb3kiLCJlbmFibGVTdGlja3kiLCJ1cGRhdGUiLCJoYW5kbGVDbGljayIsIl9idWlsZFJvbGUiLCJfY3JlYXRlTGFiZWwiLCJNdXRhdGlvbk9ic2VydmVyIiwic3VidHJlZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJjaGFyYWN0ZXJEYXRhT2xkVmFsdWUiLCJkaXNjb25uZWN0IiwibXV0YXRpb25zIiwibXV0YXRpb24iLCJjcmVhdGVJbnZpc2libGVDaGFyIiwiY3JlYXRlVGV4dE5vZGUiLCJzZWFyY2hJbnZpc2libGVDaGFycyIsIiR3IiwiZXh0ZW5kQXJyYXkiLCJyZW1vdmVGcm9tQXJyYXlCeVZhbHVlIiwic3VtT2ZBcnJheSIsInJlZHVjZSIsImEiLCJiIiwiZ2V0T2JqZWN0SW5kZXgiLCJpbnNlcnRUb09iamVjdCIsInBvcyIsImFjIiwiZ2V0UmFuZG9tSWQiLCJwb3NzaWJsZSIsImZsb29yIiwicmFuZG9tIiwiZXNjYXBlUmVnRXhwIiwiZXh0ZW5kRGF0YSIsIl9leHRlbmREYXRhRWxlbWVudHMiLCJfc2V0RGF0YSIsInNlcmlhbGl6ZWREYXRhIiwiX3NlbGVjdG9ycyIsInBhcmFncmFwaGl6ZXIiLCJlbmNvZGVFbnRpdGllcyIsImRlY29kZUVudGl0aWVzIiwiZW5jb2RlQ29kZSIsIl9lbmNvZGVDb2RlIiwiU3RyaW5nIiwic2FuaXRpemUiLCJfc2FuaXRpemVTcmMiLCJfc2FuaXRpemVIcmVmIiwiX3Nhbml0aXplRXZlbnRzIiwiZXNjYXBlSHRtbCIsInN0b3JlIiwic3RvcmVkIiwic3RvcmVkSW5kZXgiLCJzZWxlY3RvcnMiLCJtYXRjaGVkIiwiX2dldEVsZW1lbnRzRnJvbUh0bWwiLCJfc3RvcmUiLCJzdG9yZUNvbW1lbnRzIiwic3RvcmVkQ29tbWVudHMiLCJyZXN0b3JlQ29tbWVudHMiLCJjYWNoZVN0eWxlIiwiX2NhY2hlU3R5bGUiLCJyZWNhY2hlU3R5bGUiLCJfcmVjYWNoZVN0eWxlIiwiYWRkTm9mb2xsb3ciLCJhZGRIdHRwcyIsImh0dHBzIiwiYWRkU3BhY2VUb0Jsb2NrcyIsImFkZEJyVG9CbG9ja3MiLCIkcGx1cyIsImZpeExpc3RNYXJnaW4iLCJtbCIsInBsIiwidW5maXhMaXN0TWFyZ2luIiwiZ2V0VGV4dCIsInJ2Iiwibm9kZVZhbHVlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImJyIiwidHJpbWxpbmVzIiwiJHRtcCIsImV4dHJhY3RIdG1sRnJvbUNhcmV0IiwicmFuZ2UiLCJnZXRSYW5nZSIsImNsb25lZCIsImNsb25lUmFuZ2UiLCJzZWxlY3ROb2RlQ29udGVudHMiLCJzZXRTdGFydCIsImVuZENvbnRhaW5lciIsImVuZE9mZnNldCIsImV4dHJhY3RDb250ZW50cyIsInJlbW92ZUNvbW1lbnRzIiwiaXNMaW5lIiwiY2xlYW5Ecm9wIiwiZ2V0RGF0YUJsb2NrIiwiaW5zZXJ0UG9pbnQiLCJjbGlwYm9hcmREYXRhIiwiaW5zZXJ0RnJvbUNsaXBib2FyZCIsImluc2VydGVkIiwiX2NvcHkiLCJjdXQiLCJyZW1vdmVEb2N0eXBlIiwicmUiLCIkMCIsInJlbW92ZVRhZ3NFeGNlcHQiLCJyZW1vdmVUYWdzV2l0aENvbnRlbnQiLCJyZW1vdmVNYXJrZXJzIiwicmVtb3ZlRW1wdHlTcGFucyIsIl9yZW1vdmVFbXB0eVNwYW4iLCJyZW1vdmVFbXB0eUlubGluZXMiLCJfcmVtb3ZlRW1wdHlUYWciLCJyZW1vdmVCbG9ja1RhZ3MiLCJyZW1vdmVCbG9ja1RhZ3NJbnNpZGUiLCJibG9ja0xpc3RUYWdzIiwiX3JlbW92ZUJsb2NrVGFnc0luc2lkZSIsInJlbW92ZUlubGluZVN0eWxlcyIsImlubGluZXMiLCJyZW1vdmVTdHlsZUF0dHIiLCJfY29weUZyb21BbGxTZWxlY3RlZCIsIl9jb3B5RnJvbU11bHRpcGxlIiwiJGJsb2NrcyIsImdldFNlbGVjdGVkIiwicmVtb3ZlU2VsZWN0ZWQiLCJfY29weUZyb21FZGl0YWJsZSIsIl9jb3B5RnJvbU5vbkVkaXRhYmxlIiwicGFyZW50SW5zdGFuY2UiLCJpc011bHRpcGxlIiwiaXNDb2xsYXBzZWQiLCIkZGl2IiwiX2VuY29kZU5vZGUiLCJlbmNvZGVkIiwiX2VuY29kZU5vZGVIdG1sIiwicmVtU3RhcnQiLCJyZW1FbmQiLCJleHRlbmRUYWdzIiwiX3N0b3JlVGFncyIsIl90cmltTGlua3MiLCJfcmVzdG9yZVRhZ3MiLCJfcmVwbGFjZVRhZyIsInJlcGxhY2VtZW50IiwiX3RyaW1MaW5rIiwiYnVpbGRFbGVtZW50IiwiY3JlYXRlSHRtbCIsIl9jbGVhbiIsIl9wYXJzZSIsInBhcnNlTGluZSIsIl9yZXZlcnRGb3JtcyIsIl9yZXZlcnRGcmFtZXMiLCJfdW5wYXJzZUFsbFRhZ3MiLCJfdW5wYXJzZURhdGFUeXBlIiwiX2NvbnZlcnRGcmFtZXMiLCJfY29udmVydEZvcm1zIiwiZ2V0QmxvY2tzIiwiX3BhcnNlSHRtbCIsIl9nZXRQcmVkZWZpbmVkVGFncyIsIl9hZGRQcmVkZWZpbmVkQ2xhc3MiLCJfcGFyc2VUeXBlIiwiX3BhcnNlTmVzdGVkIiwiX2lzTm9uZWRpdGFibGUiLCJfcGFyc2VUeXBlQnlUYWciLCJfaXNJbWFnZUJsb2NrIiwiX2hhc0NoaWxkIiwiX2lzR3JpZEJsb2NrIiwiX2lzQ29sdW1uQmxvY2siLCJfaXNUZXh0QmxvY2siLCJfaXNDYXJkQmxvY2siLCIkcGFyZW50IiwicGFyZW50VGFnIiwiJHByZSIsIiRxdW90ZSIsIiRzY3JpcHQiLCJfdW5wYXJzZUJ5VHlwZSIsIl9jb252ZXJ0RnJhbWUiLCJfY29udmVydEZvcm0iLCJyZXBsYWNlVG9UYWciLCJfcmV2ZXJ0RnJhbWUiLCJfcmV2ZXJ0Rm9ybSIsIiRmaWdjYXB0aW9uIiwiX2dldE5vZGUiLCJfaXNFbGVtZW50IiwiX2lzSW5saW5lVGFnIiwiX2lzQmxvY2tUYWciLCJpc1RleHROb2RlIiwiaXNFbXB0eU9ySW1hZ2VJbmxpbmUiLCJub2VkaXRhdHRyIiwiaXNJbmxpbmUiLCJpc1RhZyIsImlzVmlzaWJsZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwiZ2V0Q2xpZW50UmVjdHMiLCJpc1Njcm9sbFZpc2libGUiLCJ0b2xlcmFuY2UiLCIkc2Nyb2xsVGFyZ2V0IiwiZ2V0VGFyZ2V0IiwiZG9jVmlld1RvcCIsImRvY1ZpZXdCb3R0b20iLCJlbGVtVG9wIiwiZ2V0QWxsSW5saW5lcyIsImZyYWdtZW50IiwiJHNlY29uZFBhcnQiLCJjbG9uZUF0dHJzIiwiJGxhc3QiLCJjbG9uZUVtcHR5IiwiZWxGcm9tIiwiZWxUbyIsIiRlbFRvIiwiZ2V0QXR0cnMiLCJfaXNOdW1iZXIiLCJfZ2V0Qm9vbGVhbkZyb21TdHIiLCJwYXJzZXJ0YWdzIiwiZXh0ZW5kdGFncyIsImZpbmFsTm9kZXMiLCJoYXNCbG9ja3MiLCJoYXNUZXh0U2libGluZ3MiLCJoYXNQcmV2IiwicHJldmlvdXNTaWJsaW5nIiwiaGFzTmV4dCIsIl9pc1RhZyIsIl9idWlsZEZpcnN0TGV2ZWwiLCJ1bnNldE5vdEZpcnN0TGV2ZWwiLCJfc2V0Rm9jdXMiLCJfY2hlY2tTZWxlY3RlZCIsImdldEZpcnN0TGV2ZWwiLCJ1bnNldEhvdmVyIiwiZ2V0RWRpdGFibGVCbG9ja3MiLCJnZXRGaXJzdFNlbGVjdGVkIiwiZ2V0TGFzdFNlbGVjdGVkIiwidHJhdmVyc2UiLCJfcmVtb3ZlU2VsZWN0ZWRCbG9jayIsIiRhbGwiLCIkc2VsZWN0ZWQiLCJfaXNCbG9ja0FjdGl2ZSIsImZvcmNlIiwiX2dldEluc3RhbmNlIiwiX3NldENhcmV0IiwiX2lzQWN0aW9uIiwibmV3SW5zdGFuY2UiLCJjaGFuZ2UiLCIkbmV3QmxvY2siLCJpbWFnZVVybCIsImdldFNyYyIsImlzVHJhdmVyc2UiLCJ0YXJ2ZXJzZSIsIm9ic2VydmVDYXJkIiwiaGFzSW1hZ2UiLCJfYnVpbGRTZWdtZW50cyIsInNlZ21lbnRzIiwiX2FwcGVuZFRvRW1wdHlCbG9jayIsImVtcHR5QmxvY2siLCJkcmFnb3ZlckV2ZW50IiwicHJlc3NlZENtZCIsImlzUG9wdXBNb3VzZVVwIiwiZnJhbWUiLCJfcnVuRXZlbnRzIiwiX3BhdXNlRXZlbnRzIiwiX2J1aWxkVGFyZ2V0cyIsIl9idWlsZFByZXZlbnRMaW5rcyIsIl9idWlsZEV2ZW50cyIsIm9ubW91c2VvdmVyIiwiX2J1aWxkSG92ZXIiLCJvbmNvbnRleHRtZW51IiwiX2dldEJsb2NrIiwib25jbGljayIsIm9ubW91c2V1cCIsIm9ubW91c2Vkb3duIiwiaXNPcGVuIiwiX3NldEJsb2NrIiwiX3NldENhcmV0SW5saW5lIiwib250b3VjaHN0YXJ0Iiwib25rZXlkb3duIiwiX2J1aWxkRXZlbnRLZXlzT2JqIiwibGlzdGVuIiwiX2lzQ21kUHJlc3NlZCIsIl9pc0VzYyIsImhhbmRsZSIsIm9ua2V5dXAiLCIkZmlyc3QiLCJvbnBhc3RlIiwib25jb3B5Iiwib25jdXQiLCJvbmRyb3AiLCJkdCIsIml0ZW0iLCIkb3ZlciIsImZpbGVzIiwiX3JlbW92ZURyYWdQbGFjZWhvbGRlciIsIm9uZHJhZ3N0YXJ0Iiwib25kcmFnb3ZlciIsIiRwbCIsIm9uZHJhZ2xlYXZlIiwib253aW5mb2N1cyIsIl9pc1JlbW92ZVJhbmdlcyIsIm9uZG9ja2V5ZG93biIsIm9uZG9jbW91c2Vkb3duIiwib25kb2NjbGljayIsIl9pc091dHNpZGVFZGl0b3IiLCJfcHJldmVudExpbmtzIiwiYXJyb3dLZXlzIiwiaXNBbHBoYUtleXMiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiX2J1aWxkVGFyZ2V0RXZlbnRzIiwidGFyZ2V0cyIsIl9pc0xpbmtDbGljayIsInNhdmVkU2VsZWN0aW9uIiwic2F2ZWRNYXJrZXIiLCJzZWwiLCJfZ2V0U2VsZWN0aW9uIiwiX2dldFJhbmdlIiwiX2dldEN1cnJlbnQiLCJjb2xsYXBzZWQiLCJfZ2V0Q29sbGFwc2VkIiwiX2dldFBhcmVudCIsImdldE5vZGVzIiwiX2ZpbHRlck5vZGVzIiwiZ2V0Q3VycmVudCIsIl9nZXRFbGVtZW50IiwiZ2V0SW5saW5lIiwibnVtIiwiY29sbGFwc2UiLCJjbG9uZUNvbnRlbnRzIiwiZ2V0UG9zaXRpb24iLCJnZXRTZWxlY3Rpb24iLCJzdGFydE9mZnNldCIsInN0YXJ0Q29udGFpbmVyIiwiYWRkUmFuZ2UiLCJzZXRSYW5nZSIsImNyZWF0ZVJhbmdlIiwiY29sbGFwc2VUb1N0YXJ0IiwiY29sbGFwc2VUb0VuZCIsInNhdmVNYXJrZXIiLCJtYXJrZXIiLCJyZXN0b3JlTWFya2VyIiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJhbmNob3JOb2RlIiwiX2dldE5leHROb2RlIiwiX2dldFJhbmdlTm9kZXMiLCJlbmQiLCJjb21tb25BbmNlc3RvciIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwiX2dldEFsbFJhbmdlTm9kZXMiLCJfZmlsdGVyQnlUeXBlcyIsIl9maWx0ZXJCeVNlbGVjdGVkIiwiX2ZpbHRlckJ5VHlwZSIsIl9maWx0ZXJCeVRhZ3MiLCJpc1RhZ05hbWUiLCJfY29udGFpbnNOb2RlVGV4dCIsIl9pc1RleHRTZWxlY3RlZCIsInRyZWVXYWxrZXIiLCJjcmVhdGVUcmVlV2Fsa2VyIiwiTm9kZUZpbHRlciIsIlNIT1dfVEVYVCIsImFjY2VwdE5vZGUiLCJGSUxURVJfQUNDRVBUIiwidGV4dE5vZGUiLCJuZXh0Tm9kZSIsIm5vZGVSYW5nZSIsInNldEVuZCIsImNvbXBhcmVCb3VuZGFyeVBvaW50cyIsIlJhbmdlIiwiU1RBUlRfVE9fU1RBUlQiLCJFTkRfVE9fRU5EIiwiX2FwcGx5IiwicmVtb3ZlYmxvY2tzIiwidHJpbW1lZCIsIl9wb3NpdGlvbiIsIl9zaXplIiwiX2lzSW5QYWdlIiwiX2lzTm9uIiwiX2dldElubGluZUluc2lkZSIsIl9pbnNlcnRJbnZpc2libGVOb2RlIiwibGFzdENoaWxkIiwibGFzdElubGluZSIsInNldFN0YXJ0QWZ0ZXIiLCJzZXRTdGFydEJlZm9yZSIsImlubGluZUluc2lkZSIsIiRjbG9uZWQiLCJfdHJpbW1lZCIsImNhcmV0UmFuZ2UiLCJickVuZCIsInNjcm9sbHRvcCIsImlzVGFyZ2V0IiwiX2dldEVsIiwiY2hhckluZGV4Iiwibm9kZVN0YWNrIiwiZm91bmRTdGFydCIsIm5leHRDaGFySW5kZXgiLCJfZG9TZWxlY3RBbGwiLCJoYW5kbGVTaGlmdEVudGVyIiwiaGFuZGxlRW50ZXIiLCJoYW5kbGVTaGlmdFNwYWNlIiwiaGFuZGxlU3BhY2UiLCJoYW5kbGVUYWIiLCJoYW5kbGVBcnJvdyIsImhhbmRsZURlbGV0ZSIsImlzQmFja3NwYWNlIiwiaXNEZWxldGUiLCJfdHJpbUludmlzaWJsZUNoYXIiLCJjYXJldFN0YXJ0IiwiX2NhdGNoSW5saW5lQmxvY2siLCJpbnNlcnRCcmVha2xpbmUiLCJpbnNlcnROZXdsaW5lIiwia2V5Q29kZSIsInNlbGVjdGlvblN0YXJ0Iiwic3Vic3RyaW5nIiwic2VsZWN0aW9uRW5kIiwiX2lzTmV4dEJsb2NrIiwiX2lzUHJldkJsb2NrIiwiX2lzU2libGluZ0lubGluZUJsb2NrIiwiX2lzSW52aXNpYmxlQ2hhciIsImlzQ2hhciIsImNoYXJub2RlIiwicG9pbnRlciIsIl9pc0FsbFNlbGVjdGVkIiwiX3NldEVkaXRvckVtcHR5IiwiaG90a2V5cyIsImhvdGtleXNTaGlmdE51bXMiLCJfcmVtb3ZlIiwidHJpZ2dlcmVkIiwic2hvZnRLZXkiLCJtZXRhIiwibmF2aWdhdG9yIiwicGxhdGZvcm0iLCJpdGVtcyIsIl9idWlsZFBvcHVwSXRlbXMiLCIkdGl0bGUiLCIka2JkIiwiX2hhbmRsZXIiLCJzcGVjaWFsIiwiY2hhcmFjdGVyIiwiZnJvbUNoYXJDb2RlIiwibW9kaWYiLCJjbWRLZXlzIiwic3BlY2lhbEtleSIsIm9iamVjdCIsImFjdGl2ZUNsYXNzIiwidG9nZ2xlZENsYXNzIiwiZGlzYWJsZUNsYXNzIiwiY3VzdG9tQnV0dG9ucyIsImFUYWdzIiwiYVR5cGVzIiwiX2lzVG9vbGJhciIsIiRjb250YWluZXIiLCJfYnVpbGRTdGlja3kiLCJfYnVpbGRBY3RpdmVCdXR0b25zIiwiJHRvb2xiYXIiLCJfYnVpbGRCdXR0b25zIiwiZWRpdG9yQnV0dG9ucyIsInVuc2V0QWN0aXZlIiwiX2lzT2JzZXJ2ZUJ1dHRvbnMiLCJfZ2V0T2JzZXJ2ZWRUYWdzIiwiX3NldEFjdGl2ZUtleXMiLCJfZmluZEJ1dHRvbiIsInNldEFjdGl2ZSIsIl9maW5kQnV0dG9ucyIsImlzU3RpY2t5IiwibWFpblRvcCIsImNvbnRhaW5lclRvcCIsIl9vYnNlcnZlU3RpY2t5IiwiYnRucyIsImFjdGl2ZSIsIl9idWlsZEFjdGl2ZUJ1dHRvbiIsIl9nZXRDdXJyZW50SW5zdGFuY2UiLCJfY3JlYXRlQnV0dG9ucyIsInBhZGRpbmdUb3AiLCJfYnVpbGRGcm9tRWxlbWVudCIsInNldENvbG9yIiwiZ2V0TmFtZSIsInNldEJhY2tncm91bmQiLCJpc0J1dHRvbiIsImdldFBhcmFtcyIsIiRidXR0b24iLCJnZXREaW1lbnNpb24iLCJjb2xvciIsIl9iYWNrZ3JvdW5kIiwicmVzZXRCYWNrZ3JvdW5kIiwiJGljb24iLCJpbnZlcnQiLCJfYnVpbGRUaXRsZSIsIl9idWlsZEVsZW1lbnQiLCJfYnVpbGRJY29uIiwiX2J1aWxkVG9vbHRpcCIsIl9idWlsZEJhY2tncm91bmQiLCJfYnVpbGRQb3NpdGlvbiIsImlzSWNvbiIsInNwYW4iLCJfYnVpbGRJY29uRWxlbWVudCIsImljb24iLCJ0b29sdGlwIiwiYmFja2dyb3VuZCIsIl9zdG9wIiwic3RvcFByb3BhZ2F0aW9uIiwiX2NhdGNoIiwiJGJ0biIsIiR0b29sdGlwIiwicGF0aEl0ZW1DbGFzcyIsIl9idWlsZFJvb3QiLCJfYnVpbGRBY3RpdmUiLCJfY2xlYXIiLCJfYnVpbGRNdWx0aXBsZUl0ZW0iLCJfZ2V0QWxsIiwiJHBhdGgiLCJfc2VsZWN0SXRlbSIsIl9jcmVhdGVJdGVtIiwiX2J1aWxkSXRlbSIsIiRwYXJlbnRzIiwiX2J1aWxkUGFyZW50SXRlbSIsInJvb3QiLCJfaXNUb3BiYXIiLCIkdG9wYmFyIiwiZXZlbnROYW1lIiwiJGNvbnRyb2wiLCJ0b3BPdXRsaW5lRml4IiwibGVmdE91dGxpbmVGaXgiLCJ0b29sYmFyQm90dG9tIiwiZnJhbWVSZWN0IiwidGFyZ2V0Qm90dG9tIiwiY291bnQiLCJjbGVhbkh0bWwiLCJleGNlcHRlZFRhZ3MiLCJmaWx0ZXJTdHlsZSIsImlzUGFnZXMiLCJfaXNQYWdlcyIsImlzTXNXb3JkIiwiX2lzSHRtbE1zV29yZCIsIl9jbGVhblBhZ2VzIiwiX2NsZWFuR0RvY3MiLCJfZW5jb2RlUGhwIiwiX2NsZWFuTXNXb3JkIiwiX3BsYWNlTGlzdFRvSXRlbSIsIiRsaSIsImV4ZWMiLCJfcGFyc2VXb3JkTGlzdHMiLCJsaW5lcyIsInNwYWNlIiwibGFzdExldmVsIiwiJGxpc3QiLCIkbGlzdENoaWxkIiwibGV2ZWwiLCJ0eHQiLCJsaXN0VGFnIiwiZ2V0Rmlyc3RJbnNlcnRlZCIsImdldExhc3RJbnNlcnRlZCIsImdldEluc2VydGVkIiwiX2luc2VydCIsImluc2VydEVtcHR5QmxvY2siLCJkb3VibGVub2RlIiwiX2luc2VydEZyYWdtZW50IiwieCIsImNsaWVudFgiLCJ5IiwiY2xpZW50WSIsImNhcmV0UG9zaXRpb25Gcm9tUG9pbnQiLCJvZmZzZXROb2RlIiwiY2FyZXRSYW5nZUZyb21Qb2ludCIsIl9zcGxpdElubGluZSIsInNwbGl0aW5saW5lIiwiaW5zZXJ0VGV4dCIsIiRub2RlcyIsImlzU3RhcnQiLCJpc0VuZCIsImlzU3RhcnRJdGVtIiwiaXNFbmRJdGVtIiwiJGNoaWxkTGlzdCIsInBhc3RlbWFya2VyIiwicGFzdGVpdGVtcyIsImlzUGFyc2UiLCJpc0NsZWFuIiwiaXNDYXJldCIsImlzUG9zaXRpb24iLCJfc2V0Q29udGVudCIsIl9pbnNlcnRDb250ZW50IiwiX2NoZWNrRW1wdHkiLCJfY2hlY2tMaW5lIiwiX3BhcnNlQnVpbGQiLCJfYnVpbGRQYXJzZWROb2RlcyIsInBvc2l0aW9ucyIsImVtcHR5TGF5ZXIiLCJfaXNMaXN0VG9MaXN0IiwiX2NsZWFuU3BlY2lhbCIsIl9wYXJzZUxpbmUiLCJfaW5zZXJ0VG9FZGl0YWJsZSIsIl9idWlsZEluc2VydGVkIiwiX2J1aWxkQ2FyZXQiLCJfYnVpbGRFZGl0b3IiLCIkcGFydCIsIl9idWlsZEluc3RhbmNlIiwiaXNTcGxpdCIsImNsZWFuZXIiLCJjcmVhdGVDb250YWluZXIiLCJmaXJzdE5vZGUiLCJsYXN0Tm9kZSIsImlzUGxhaW5UZXh0IiwiYnVpbGRJdGVtcyIsInRpbiIsInBpbiIsInRvIiwiY3VzdG9tSXRlbXMiLCIkbWFya2VyIiwic2V0RW5kQmVmb3JlIiwiX3Jlc3RvcmVJbmplY3QiLCJmaXgiLCJfaXNTYW1lVGFnIiwiX2NoZWNrU2FtZUZvcm1hdCIsIl9pc0xpc3RUb1RleHQiLCJfZm9ybWF0TGlzdFRvVGV4dCIsIl9pc1RleHRUb0xpc3QiLCJfZm9ybWF0VGV4dFRvTGlzdCIsIl9yZXBsYWNlVG8iLCJfYnVpbGREZWZhdWx0Rm9ybWF0IiwiZGxpc3QiLCJfZ2V0RGxpc3RJdGVtcyIsIl9nZXRMaXN0SXRlbXMiLCJfY3JlYXRlSXRlbXMiLCJjaGVja1R5cGUiLCJyZW1vdmVGb3JtYXQiLCJmb3JtYXRDb2xsYXBzZWQiLCJmb3JtYXRVbmNvbGxhcHNlZCIsIiRpbmxpbmUiLCJfZ2V0UGFyYW1zVGFncyIsImhhc1NhbWVUYWciLCJfaW5zZXJ0SW5saW5lIiwiZXh0cmFjdGVkQ29udGVudCIsIl9jb252ZXJ0VGFncyIsIl9jb252ZXJ0VG9TdHJpa2UiLCJleGVjQ29tbWFuZCIsIl9yZXZlcnRUb0lubGluZXMiLCJfaXNJblNlbGVjdGlvbiIsIl9jbGVhckVtcHR5U3R5bGUiLCJub3JtYWxpemUiLCJfcmV2ZXJ0VGFncyIsIl9jbGVhckVtcHR5U3R5bGVBdHRyIiwiX3JlcGxhY2VUb1N0cmlrZSIsImNtIiwiZnJvbVRleHRBcmVhIiwic2V0U2l6ZSIsInRvVGV4dEFyZWEiLCJib3giLCJjb3ZlciIsIl9idWlsZFBhcmFtcyIsIl9zZW5kIiwiY29tcGxldGUiLCJfY29tcGxldGUiLCJfYnVpbGRCeUlucHV0IiwiX2J1aWxkQnlCb3giLCJfYnVpbGRCb3giLCJfYnVpbGRQbGFjZWhvbGRlciIsIl9idWlsZEFjY2VwdCIsIl9idWlsZE11bHRpcGxlIiwiJGJveCIsIiRwbGFjZWhvbGRlciIsIl9nZXRVcGxvYWRQYXJhbSIsIl9jaGFuZ2UiLCJfY2xpY2siLCJfZHJvcCIsIl9kcmFnb3ZlciIsIl9kcmFnbGVhdmUiLCJfc2V0U3RhdHVzIiwiX3JlbW92ZVN0YXR1cyIsIl9zZW5kRGF0YSIsInByb2dyZXNzIiwiJHByb2dyZXNzIiwiJHByb2dyZXNzQmFyIiwic3luY2VkSHRtbCIsIl9nZXRIdG1sIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsIl9zeW5jIiwiaW52b2tlIiwiX3NlbmRpbmciLCJfZ2V0TmFtZSIsImNhbGxiYWNrIiwib3duTGluZSIsImNvbnRPd25MaW5lIiwibmV3TGV2ZWwiLCJsaW5lQmVmb3JlIiwibGluZUFmdGVyIiwiY29kZUxlbmd0aCIsInBvaW50Iiwib3V0IiwiY29udCIsImNsZWFubGV2ZWwiLCJzdWJzdHIiLCJmaW5pc2giLCJnZXRUYWJzIiwidCIsInBsYWNlVGFnIiwiY2xlYW5UYWciLCJqIiwidGFnb3V0Iiwic3VmZml4IiwibSIsInJlVGFncyIsIl9mb3JtYXRMaW5rcyIsIl9yZXN0b3JlUmVwbGFjZWQiLCJsaW5rUHJvdG9jb2wiLCJyZWdleEIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZWdleHAiLCJzdG9yYWdlIiwicGFzc2VkIiwidW5kb1N0b3JhZ2UiLCJyZWRvU3RvcmFnZSIsImNsZWFyIiwiX2lzVW5kbyIsIl9pc1JlZG8iLCJfY3JlYXRlU3RhdGUiLCJfc2V0U3RhdGUiLCJfYWRkU3RhdGUiLCJfaGFzVW5kbyIsIl9nZXRVbmRvIiwiX3NldFJlZG8iLCJfcmVidWlsZCIsIl9oYXNSZWRvIiwiY3RybCIsIl9yZW1vdmVPdmVyU3RvcmFnZSIsIiRzdGF0dXNiYXIiLCJfYnVpbGREZXB0aCIsIl9zdG9wRXZlbnRzIiwiJHBvcHVwIiwib3BlbmVkIiwiX3Jlc2V0IiwiX2NyZWF0ZVN0YWNrIiwiX29wZW4iLCJfaXNQb3B1cFRhcmdldCIsIl9yZXNldFRvb2xiYXJUb2dnbGVkQnV0dG9uIiwiX2Nsb3NlZCIsImdldEJ1dHRvbiIsImdldFN0YWNrIiwiX2ZpbmRTdGFjayIsIl9maW5kU3RhY2tBY3RpdmUiLCJyZW5kZXJIZWFkZXJCYWNrIiwiX2J1aWxkSGVhZGVyQmFjayIsImNsb3NlU3RhY2tzIiwiX2ZpbmRTdGFja3MiLCJfY3JvcEhlaWdodCIsImFuaW1hdGlvbiIsIl9idWlsZEJ1dHRvbiIsIl9idWlsZE5hbWUiLCJfc2V0VG9vbGJhclRvZ2dsZWRCdXR0b24iLCJfc3RhcnRFdmVudHMiLCJyZW5kZXIiLCJfYnVpbGRIZWFkZXIiLCJfb3BlbmVkIiwiJGhlYWRlciIsIiRzdGFja3MiLCJfYnVpbGRGb2N1cyIsInRvcEZpeCIsIl9pc0J1dHRvbiIsIl9idWlsZFBvc2l0aW9uQnV0dG9uIiwiX2J1aWxkUG9zaXRpb25Nb2RhbCIsImVkaXRvclJlY3QiLCJwb3B1cFdpZHRoIiwiX2lzVG9vbGJhckJ1dHRvbiIsInN0YWNrcyIsIl9idWlsZFBhdGgiLCJfYnVpbGRDbG9zZSIsIl9idWlsZFBhdGhJdGVtIiwiX2J1aWxkQmFjayIsIl9idWlsZEJhY2tJdGVtIiwiX2NhdGNoT3BlbiIsImlzQWN0aXZlIiwiJGJhY2siLCJfY2F0Y2hCYWNrIiwiJGNsb3NlIiwiX2NhdGNoQ2xvc2UiLCJ0YXJnZXRTdGFjayIsInJlYnVpbGQiLCJ0YXJnZXRIZWlnaHQiLCJjcm9wSGVpZ2h0IiwidGFyZ2V0T2Zmc2V0Iiwid2luSGVpZ2h0Iiwid2luQ3JvcEhlaWdodCIsImRpdmlkZXIiLCJyZW1vdmVyIiwiX2J1aWxkQ29udGFpbmVyIiwiX2J1aWxkSW1hZ2UiLCJfYnVpbGRTaG9ydGN1dCIsIl9idWlsZEhpZGRlbiIsIl9idWlsZERpdmlkZXIiLCJfYnVpbGRDb21tYW5kIiwiX2J1aWxkUmVtb3ZlciIsImdldEluc3RhbmNlIiwiJGltYWdlIiwiJHNob3J0Y3V0IiwiJHRyYXNoIiwiX2NhdGNoUmVtb3ZlciIsImJ1aWxkZXIiLCJmb290ZXIiLCJkZWZhdWx0V2lkdGgiLCJ0b29scyIsIl9yZW5kZXJJdGVtcyIsIiRzdGFjayIsIl9yZW5kZXJXaWR0aCIsIl9yZW5kZXJUeXBlIiwiX3JlbmRlckZvcm0iLCJfcmVuZGVyRm9vdGVyIiwic2V0Rm9ybSIsInNldEZvb3RlciIsInNldFdpZHRoIiwiX3Jlc2l6ZSIsInNldEl0ZW1zIiwic2V0VHlwZSIsImdldEl0ZW1zIiwiZ2V0VG9vbCIsInRvb2wiLCJnZXRGb3JtSXRlbSIsImdldEZvcm1FbGVtZW50IiwiJGZvcm0iLCJnZXRGb3JtIiwiZ2V0Rm9vdGVyIiwiX2J1aWxkQm9keSIsIl9idWlsZFJlbmRlciIsImZvcm1pdGVtcyIsIl9yZW5kZXJUb29scyIsIl9yZW5kZXJEYXRhIiwiX3JlbmRlclRvb2wiLCIkZm9vdGVyIiwidyIsInBvcHVwcyIsInVubGluayIsImVkaXQiLCJjYW5jZWwiLCIkbGluayIsImdldExpbmsiLCJfZW5jb2RlVXJsIiwiX3NhdmUiLCJfY2xlYW5VcmwiLCJfc2V0VXJsIiwiX3NldFRleHQiLCJfc2V0VGFyZ2V0Iiwicm93cyIsImNhcHRpb24iLCJfY2FsbFNjcmlwdHMiLCJfZmluZFNjcmlwdHMiLCJfYnVpbGRDb2RlbWlycm9yIiwiZ2V0RW1iZWRDb2RlIiwiaXNSZXNwb25zaXZlIiwiX2dldEVtYmVkQ29kZSIsIl9jcmVhdGVJbnN0YW5jZSIsIl9pc05lZWRUb0NoYW5nZSIsImluc3Rncm0iLCJFbWJlZHMiLCJwcm9jZXNzIiwiaGVhZCIsImV2YWwiLCJfaXNIdG1sU3RyaW5nIiwiX3BhcnNlVXJsIiwiJGZpZ3VyZSIsImZpZ3VyZSIsIl9pc0ZpZ3VyZSIsImFkZFJlc3BvbnNpdmUiLCJpZnJhbWVTdGFydCIsImlmcmFtZUVuZCIsInBhcnNlZCIsImluZGVudCIsIml0ZW1JbnN0YW5jZSIsIiRwcmV2IiwiaXNJbmRlbnQiLCIkcHJldkNoaWxkIiwiJG5ld0xpc3QiLCJvdXRkZW50IiwiJGxpc3RJdGVtIiwiJGxpSXRlbSIsIiRuZXh0IiwibmV4dEl0ZW1zIiwiaXNUb3AiLCJpc01pZGRsZSIsIl9nZXRBbGxOZXh0IiwicGF0dGVybiIsIl9jcmVhdGVQYXR0ZXJuIiwiJGdyaWQiLCJjb2x1bW4iLCIkY29sdW1uIiwic3VtIiwidW5pdCIsImRhdGFTdGF0ZXMiLCJfY3JlYXRlSW1hZ2VCeVVybCIsIl9jcmVhdGVPclNlY3Rpb24iLCIkdXBsb2FkIiwiY3JlYXRlVXBsb2FkQm94IiwiY3JlYXRlU2VsZWN0Qm94IiwiX2J1aWxkVXBsb2FkIiwiYWx0IiwiX2J1aWxkRWRpdFVwbG9hZCIsImVkaXRDYXJkIiwiX2ZpbmRJbWFnZXMiLCJfYWRkSW1hZ2VTdGF0ZSIsIm9ic2VydmVJbWFnZUxpbmsiLCJvYnNlcnZlSW1hZ2VDYXB0aW9uIiwiYmxvYiIsImZpbGUiLCJnZXRBc0ZpbGUiLCJpbnNlcnRGcm9tQmxvYiIsImluc2VydEJ5RHJvcCIsImlzQ2hhbmdlIiwiaW5zZXJ0QnlVcGxvYWQiLCJpbnNlcnRCeVVybCIsIiR1cmxpbnB1dCIsImluc2VydEZyb21TZWxlY3QiLCJjaGFuZ2VDbG9uZSIsIiRpbWFnZWNsb25lIiwiY2xvc2Vwb3B1cCIsInNldEltYWdlIiwiaW1hZ2VzY291bnQiLCJfY3JlYXRlSW1hZ2VGcm9tUmVzcG9uc2VJdGVtIiwiZ2V0U3RhdGVzIiwiX3NldEltYWdlU3RhdGUiLCIkc2VsZWN0Ym94IiwiX2NyZWF0ZUltYWdlc0JveCIsIl9wYXJzZUxpc3QiLCJfY2hlY2tJbWFnZUxvYWQiLCJfY3JlYXRlRm9ybUl0ZW0iLCJnZXRJbWFnZSIsIiRpbWFnZWl0ZW0iLCIkc2VjdGlvbiIsIl9jcmVhdGVVcmxJbnB1dCIsIiR1cmxidXR0b24iLCJfY3JlYXRlVXJsQnV0dG9uIiwidGh1bWIiLCJjZWxsIiwiZ2V0Rmlyc3RDZWxsIiwiYWRkaGVhZCIsInJlbW92ZWhlYWQiLCJhZGRyb3diZWxvdyIsImFkZHJvd2Fib3ZlIiwicmVtb3Zlcm93IiwiYWRkY29sdW1uYWZ0ZXIiLCJhZGRjb2x1bW5iZWZvcmUiLCJyZW1vdmVjb2x1bW4iLCJhZGRIZWFkIiwicmVtb3ZlSGVhZCIsIiRoZWFkIiwiJHJvdyIsIl9idWlsZFJvdyIsImFkZFJvd0JlbG93IiwiX2FkZFJvdyIsImFkZFJvd0Fib3ZlIiwiYWRkQ29sdW1uQmVmb3JlIiwiX2FkZENvbHVtbiIsImFkZENvbHVtbkFmdGVyIiwicmVtb3ZlUm93IiwicmVtb3ZlQ29sdW1uIiwiJHRhYmxlIiwiJGNlbGwiLCJjZWxsU2V0dGluZyIsIm5vd3JhcCIsImdldFdpZHRoIiwiZ2V0Tm93cmFwIiwic2V0Tm93cmFwIiwicm93SW5kZXgiLCIkbmV3Q2VsbCIsIiR0ZCIsIiRuZXdSb3ciLCJfYnVpbGRQb3B1cCIsIiR0cmlnZ2VyIiwiX2J1aWxkUHJldmlld0NvbnRhaW5lciIsIl9idWlsZFByZXZpZXciLCJfYnVpbGRQcmV2aWV3TmFtZSIsIiRzcGFuIiwiJHNlbGVjdCIsIiRwaWNrZXIiLCIkY2hlY2tib3giLCJfY2hhbmdlQ29sb3JTZWxlY3QiLCJfY3JlYXRlUGlja2VyIiwiX2J1aWxkQ29sb3JwaWNrZXIiLCJfY2hhbmdlQ29sb3JTdGF0ZSIsIl9idWlsZENvbG9ycyIsImNvbG9ycyIsIl9jcmVhdGVDb2xvciIsIl9pbkNvbG9yIiwiX291dENvbG9yIiwiX3NldENvbG9yIiwiJGNvbG9yIiwiX3NldENvbG9yVG9JbnB1dCIsInBpY2tlciIsIiRzZWdtZW50IiwiX2NhdGNoU2VnbWVudCIsIiRvcHRpb24iLCJzZXRTZWxlY3Rpb25SYW5nZSIsImFsaWdubWVudCIsImJvbGQiLCJpdGFsaWMiLCJkZWxldGVkIiwidHJhc2giLCJjbG9uZWRJbmxpbmUiLCIkbGFzdFByZXYiLCJ0dW5lIiwiZ2V0TmV4dENlbGwiLCJyb3ciLCJuZXh0Um93IiwiZ2V0TmV4dFJvdyIsImdldFByZXZDZWxsIiwicHJldlJvdyIsImdldFByZXZSb3ciLCJfZWFjaENlbGwiLCJrZWVwYnIiLCJjdXJyZW50SXRlbSIsIiRjdXJyZW50SXRlbSIsImlzSXRlbUVtcHR5IiwiJG5ld0l0ZW0iLCJkZWNvZGVVUkkiLCIkcmVzcG9uc2l2ZSIsIl9idWlsZEVtYmVkQ29kZSIsIiRjbG9uZUZpZ2NhcHRpb24iLCJyZW1vdmVSZXNwb25zaXZlIiwiZW5jb2RlVVJJIiwiZ2V0RmlndXJlIiwiX2J1aWxkT3ZlcmxheSIsImdldEFsdCIsImdldExpbmtVcmwiLCJzZXRBbHQiLCJzZXRUYXJnZXQiLCJzZXRMaW5rVXJsIiwicmVtb3ZlTGluayIsImlzSXRlbVN0YXJ0IiwibGlzdCIsImlzSXRlbUVuZCIsIiRsaXN0SW5zaWRlIiwiZ2V0QmxvY2txdW90ZSIsIiRibG9ja3F1b3RlIiwiY2VsbEluc3RhbmNlIiwidmFyaWFibGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7O0FBVUEsSUFBSSxPQUFPQSxVQUFQLEtBQXNCLFdBQTFCLEVBQXVDO0FBQUUsTUFBSUEsVUFBVSxHQUFHLElBQWpCO0FBQXdCOztBQUNoRSxhQUFXO0FBQ1osTUFBSUMsSUFBSSxHQUFHLEVBQVg7QUFFQUEsTUFBSSxDQUFDQyxRQUFMLEdBQWdCLEVBQWhCOztBQUNBRCxNQUFJLENBQUNFLElBQUwsR0FBWSxVQUFTQyxPQUFULEVBQWtCO0FBQUUsV0FBTyxJQUFJQyxXQUFKLENBQWdCLE1BQWhCLEVBQXdCRCxPQUF4QixDQUFQO0FBQTBDLEdBQTFFOztBQUNBSCxNQUFJLENBQUNLLEdBQUwsR0FBVyxVQUFTRixPQUFULEVBQWtCO0FBQUUsV0FBTyxJQUFJQyxXQUFKLENBQWdCLEtBQWhCLEVBQXVCRCxPQUF2QixDQUFQO0FBQXlDLEdBQXhFOztBQUVBLE1BQUlDLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQVNFLE1BQVQsRUFBaUJILE9BQWpCLEVBQTBCO0FBQ3hDLFFBQUlJLFFBQVEsR0FBRztBQUNYRCxZQUFNLEVBQUVBLE1BREc7QUFFWEUsU0FBRyxFQUFFLEVBRk07QUFHWEMsWUFBTSxFQUFFLGtCQUFXLENBQUUsQ0FIVjtBQUlYQyxhQUFPLEVBQUUsbUJBQVcsQ0FBRSxDQUpYO0FBS1hDLFdBQUssRUFBRSxpQkFBVyxDQUFFLENBTFQ7QUFNWEMsVUFBSSxFQUFFLEtBTks7QUFPWEMsV0FBSyxFQUFFLElBUEk7QUFRWEMsYUFBTyxFQUFFO0FBUkUsS0FBZjtBQVdBLFNBQUtDLENBQUwsR0FBUyxLQUFLQyxNQUFMLENBQVlULFFBQVosRUFBc0JKLE9BQXRCLENBQVQ7QUFDQSxTQUFLWSxDQUFMLEdBQVMsS0FBS0MsTUFBTCxDQUFZLEtBQUtELENBQWpCLEVBQW9CZixJQUFJLENBQUNDLFFB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RUFBd0I7QUFDakN0TCxPQUFDLENBQUMybUIsY0FBRjtBQUNBLFdBQUt6SixHQUFMLENBQVN1SCxTQUFULENBQW1Cc2tCLGVBQW5CO0FBQ0EsYUFBTyxJQUFQO0FBQ0g7QUF2RG9DLEdBQXpDO0FBMERJL3BDLFFBQU0sQ0FBQzRSLGFBQVAsR0FBdUJBLGFBQXZCLENBeGtlUSxDQTBrZVI7O0FBQ0E1UixRQUFNLENBQUNrQyxnQkFBUCxDQUF3QixNQUF4QixFQUFnQyxZQUFXO0FBQ3ZDMFAsaUJBQWEsQ0FBQyx1QkFBRCxDQUFiO0FBQ0gsR0FGRCxFQTNrZVEsQ0Era2VSOztBQUNBLE1BQUksOEJBQU9xQyxNQUFQLE9BQWtCLFFBQWxCLElBQThCQSxNQUFNLENBQUM2OEMsT0FBekMsRUFBa0Q7QUFDOUM3OEMsVUFBTSxDQUFDNjhDLE9BQVAsR0FBaUJsL0MsYUFBakI7QUFDQXFDLFVBQU0sQ0FBQzY4QyxPQUFQLENBQWVsL0MsYUFBZixHQUErQkEsYUFBL0I7QUFDSDtBQUNKLENBcGxlQSxHQUFELEMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvcGx1Z2lucy9hcnRpY2xlLWVkaXRvci9hcnRpY2xlLWVkaXRvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgICBBcnRpY2xlIEVkaXRvciBKU1xyXG4gICAgVmVyc2lvbiAyLjEuM1xyXG4gICAgVXBkYXRlZDogT2N0b2JlciA2LCAyMDIwXHJcblxyXG4gICAgaHR0cDovL2ltcGVyYXZpLmNvbS9hcnRpY2xlL1xyXG5cclxuICAgIENvcHlyaWdodCAoYykgMjAwOS0yMDIwLCBJbXBlcmF2aSBMdGQuXHJcbiAgICBMaWNlbnNlOiBodHRwOi8vaW1wZXJhdmkuY29tL2FydGljbGUvbGljZW5zZS9cclxuKi9cclxuaWYgKHR5cGVvZiBDb2RlTWlycm9yID09PSAndW5kZWZpbmVkJykgeyB2YXIgQ29kZU1pcnJvciA9IG51bGw7IH1cclxuKGZ1bmN0aW9uKCkge1xyXG52YXIgQWpheCA9IHt9O1xyXG5cclxuQWpheC5zZXR0aW5ncyA9IHt9O1xyXG5BamF4LnBvc3QgPSBmdW5jdGlvbihvcHRpb25zKSB7IHJldHVybiBuZXcgQWpheFJlcXVlc3QoJ3Bvc3QnLCBvcHRpb25zKTsgfTtcclxuQWpheC5nZXQgPSBmdW5jdGlvbihvcHRpb25zKSB7IHJldHVybiBuZXcgQWpheFJlcXVlc3QoJ2dldCcsIG9wdGlvbnMpOyB9O1xyXG5cclxudmFyIEFqYXhSZXF1ZXN0ID0gZnVuY3Rpb24obWV0aG9kLCBvcHRpb25zKSB7XHJcbiAgICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXHJcbiAgICAgICAgdXJsOiAnJyxcclxuICAgICAgICBiZWZvcmU6IGZ1bmN0aW9uKCkge30sXHJcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7fSxcclxuICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7fSxcclxuICAgICAgICBkYXRhOiBmYWxzZSxcclxuICAgICAgICBhc3luYzogdHJ1ZSxcclxuICAgICAgICBoZWFkZXJzOiB7fVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnAgPSB0aGlzLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnAgPSB0aGlzLmV4dGVuZCh0aGlzLnAsIEFqYXguc2V0dGluZ3MpO1xyXG4gICAgdGhpcy5wLm1ldGhvZCA9IHRoaXMucC5tZXRob2QudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgICB0aGlzLnByZXBhcmVEYXRhKCk7XHJcblxyXG4gICAgdGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHRoaXMueGhyLm9wZW4odGhpcy5wLm1ldGhvZCwgdGhpcy5wLnVybCwgdGhpcy5wLmFzeW5jKTtcclxuXHJcbiAgICB0aGlzLnNldEhlYWRlcnMoKTtcclxuXHJcbiAgICB2YXIgYmVmb3JlID0gKHR5cGVvZiB0aGlzLnAuYmVmb3JlID09PSAnZnVuY3Rpb24nKSA/IHRoaXMucC5iZWZvcmUodGhpcy54aHIpIDogdHJ1ZTtcclxuICAgIGlmIChiZWZvcmUgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kKCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5BamF4UmVxdWVzdC5wcm90b3R5cGUgPSB7XHJcbiAgICBleHRlbmQ6IGZ1bmN0aW9uKG9iajEsIG9iajIpIHtcclxuICAgICAgICBpZiAob2JqMikgZm9yICh2YXIgbmFtZSBpbiBvYmoyKSB7IG9iajFbbmFtZV0gPSBvYmoyW25hbWVdOyB9XHJcbiAgICAgICAgcmV0dXJuIG9iajE7XHJcbiAgICB9LFxyXG4gICAgcHJlcGFyZURhdGE6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnAubWV0aG9kID09PSAnUE9TVCcgJiYgIXRoaXMuaXNGb3JtRGF0YSgpKSB0aGlzLnAuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJztcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMucC5kYXRhID09PSAnb2JqZWN0JyAmJiAhdGhpcy5pc0Zvcm1EYXRhKCkpIHRoaXMucC5kYXRhID0gdGhpcy50b1BhcmFtcyh0aGlzLnAuZGF0YSk7XHJcbiAgICAgICAgaWYgKHRoaXMucC5tZXRob2QgPT09ICdHRVQnKSB0aGlzLnAudXJsID0gKHRoaXMucC5kYXRhKSA/IHRoaXMucC51cmwgKyAnPycgKyB0aGlzLnAuZGF0YSA6IHRoaXMucC51cmw7XHJcbiAgICB9LFxyXG4gICAgc2V0SGVhZGVyczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy54aHIuc2V0UmVxdWVzdEhlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsIHRoaXMucC5oZWFkZXJzWydYLVJlcXVlc3RlZC1XaXRoJ10gfHwgJ1hNTEh0dHBSZXF1ZXN0Jyk7XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLnAuaGVhZGVycykge1xyXG4gICAgICAgICAgICB0aGlzLnhoci5zZXRSZXF1ZXN0SGVhZGVyKG5hbWUsIHRoaXMucC5oZWFkZXJzW25hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaXNGb3JtRGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICh0eXBlb2Ygd2luZG93LkZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLnAuZGF0YSBpbnN0YW5jZW9mIHdpbmRvdy5Gb3JtRGF0YSk7XHJcbiAgICB9LFxyXG4gICAgaXNDb21wbGV0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICEodGhpcy54aHIuc3RhdHVzIDwgMjAwIHx8ICh0aGlzLnhoci5zdGF0dXMgPj0gMzAwICYmIHRoaXMueGhyLnN0YXR1cyAhPT0gMzA0KSk7XHJcbiAgICB9LFxyXG4gICAgc2VuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucC5hc3luYykge1xyXG4gICAgICAgICAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLmxvYWRlZC5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnhoci5zZW5kKHRoaXMucC5kYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMueGhyLnNlbmQodGhpcy5wLmRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZC5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBsb2FkZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ29tcGxldGUoKSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSB0aGlzLnhoci5yZXNwb25zZTtcclxuICAgICAgICAgICAgdmFyIGpzb24gPSB0aGlzLnBhcnNlSnNvbihyZXNwb25zZSk7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlID0gKGpzb24pID8ganNvbiA6IHJlc3BvbnNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnAuc3VjY2VzcyA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5wLnN1Y2Nlc3MocmVzcG9uc2UsIHRoaXMueGhyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5wLmVycm9yID09PSAnZnVuY3Rpb24nKSB0aGlzLnAuZXJyb3IodGhpcy54aHIuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHBhcnNlSnNvbjogZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIG8gPSBKU09OLnBhcnNlKHN0cik7XHJcbiAgICAgICAgICAgIGlmIChvICYmIHR5cGVvZiBvID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG87XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge31cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIHRvUGFyYW1zOiBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKFxyXG4gICAgICAgICAgICBmdW5jdGlvbihrKXsgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChrKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpba10pOyB9XHJcbiAgICAgICAgKS5qb2luKCcmJyk7XHJcbiAgICB9XHJcbn07XHJcbi8vIHZlcnNpb24gMlxyXG52YXIgRG9tQ2FjaGUgPSBbMF07XHJcbnZhciBEb21FeHBhbmRvID0gJ2RhdGEnICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG52YXIgRG9tID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNvbnRleHQpIHtcclxuICAgIHJldHVybiB0aGlzLnBhcnNlKHNlbGVjdG9yLCBjb250ZXh0KTtcclxufTtcclxuXHJcbkRvbS5yZWFkeSA9IGZ1bmN0aW9uKGZuKSB7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZm4pO1xyXG59O1xyXG5cclxuRG9tLnByb3RvdHlwZSA9IHtcclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXMubGVuZ3RoO1xyXG4gICAgfSxcclxuICAgIHBhcnNlOiBmdW5jdGlvbihzLCBjKSB7XHJcbiAgICAgICAgdmFyIG47XHJcbiAgICAgICAgdmFyIHJlaHRtbCA9IC9eXFxzKjwoXFx3K3whKVtePl0qPi87XHJcblxyXG4gICAgICAgIGlmICghcykge1xyXG4gICAgICAgICAgICBuID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHMgaW5zdGFuY2VvZiBEb20pIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlcyA9IHMubm9kZXM7XHJcbiAgICAgICAgICAgIHJldHVybiBzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChyZWh0bWwudGVzdChzKSkge1xyXG4gICAgICAgICAgICBuID0gdGhpcy5jcmVhdGUocyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBzICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBpZiAocy5ub2RlVHlwZSAmJiBzLm5vZGVUeXBlID09PSAxMSkgbiA9IHMuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgZWxzZSBuID0gKHMubm9kZVR5cGUgfHwgdGhpcy5faXNXaW5kb3dOb2RlKHMpKSA/IFtzXSA6IHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBuID0gdGhpcy5fcXVlcnkocywgYyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLm5vZGVzID0gdGhpcy5fc2xpY2Uobik7XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgaWYgKC9ePChcXHcrKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLy50ZXN0KGh0bWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbZG9jdW1lbnQuY3JlYXRlRWxlbWVudChSZWdFeHAuJDEpXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBlbG1ucyA9IFtdO1xyXG4gICAgICAgIHZhciBjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgYy5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYy5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBlbG1ucy5wdXNoKGMuY2hpbGROb2Rlc1tpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZWxtbnM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGRhdGFzZXQvZGF0YWdldFxyXG4gICAgZGF0YXNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICAgICAgRG9tQ2FjaGVbdGhpcy5kYXRhaW5kZXgoJG5vZGUuZ2V0KCkpXVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgZGF0YWdldDogZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIERvbUNhY2hlW3RoaXMuZGF0YWluZGV4KHRoaXMuZ2V0KCkpXVtrZXldO1xyXG4gICAgfSxcclxuICAgIGRhdGFpbmRleDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSBlbFtEb21FeHBhbmRvXTtcclxuICAgICAgICB2YXIgbmV4dEluZGV4ID0gRG9tQ2FjaGUubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAoIWluZGV4KSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gbmV4dEluZGV4O1xyXG4gICAgICAgICAgICBpZiAoZWwpIGVsW0RvbUV4cGFuZG9dID0gbmV4dEluZGV4O1xyXG4gICAgICAgICAgICBEb21DYWNoZVtpbmRleF0gPSB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbmRleDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gYWRkXHJcbiAgICBhZGQ6IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICB0aGlzLm5vZGVzID0gdGhpcy5ub2Rlcy5jb25jYXQodGhpcy5fYXJyYXkobikpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBnZXRcclxuICAgIGdldDogZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlc1soaW5kZXggfHwgMCldIHx8IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGdldEFsbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9kZXM7XHJcbiAgICB9LFxyXG4gICAgZXE6IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb20odGhpcy5ub2Rlc1tpbmRleF0pO1xyXG4gICAgfSxcclxuICAgIGZpcnN0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERvbSh0aGlzLm5vZGVzWzBdKTtcclxuICAgIH0sXHJcbiAgICBsYXN0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gbmV3IERvbSh0aGlzLm5vZGVzW3RoaXMubm9kZXMubGVuZ3RoIC0gMV0pO1xyXG4gICAgfSxcclxuICAgIGNvbnRlbnRzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoKS5jaGlsZE5vZGVzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBsb29wXHJcbiAgICBlYWNoOiBmdW5jdGlvbihmbikge1xyXG4gICAgICAgIHZhciBsZW4gPSB0aGlzLm5vZGVzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgbmV3IERvbSh0aGlzLm5vZGVzW2ldKSwgaSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdHJhdmVyc2luZ1xyXG4gICAgaXM6IGZ1bmN0aW9uKHMpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZmlsdGVyKHMpLmxlbmd0aCA+IDApO1xyXG4gICAgfSxcclxuICAgIGZpbHRlcjogZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICB2YXIgZm47XHJcbiAgICAgICAgaWYgKHMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgZm4gPSBmdW5jdGlvbihub2RlKSB7IHJldHVybiBzKG5ldyBEb20obm9kZSkpOyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm4gPSBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHMgJiYgcy5ub2RlVHlwZSkgfHwgcyBpbnN0YW5jZW9mIE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHMgPT09IG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5tYXRjaGVzID0gbm9kZS5tYXRjaGVzIHx8IG5vZGUubXNNYXRjaGVzU2VsZWN0b3IgfHwgbm9kZS53ZWJraXRNYXRjaGVzU2VsZWN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChub2RlLm5vZGVUeXBlID09PSAxKSA/IG5vZGUubWF0Y2hlcyhzIHx8ICcqJykgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRG9tKHRoaXMubm9kZXMuZmlsdGVyLmNhbGwodGhpcy5ub2RlcywgZm4pKTtcclxuICAgIH0sXHJcbiAgICBub3Q6IGZ1bmN0aW9uKGZpbHRlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbihub2RlKSB7IHJldHVybiAhbmV3IERvbShub2RlKS5pcyhmaWx0ZXIgfHwgdHJ1ZSk7IH0pO1xyXG4gICAgfSxcclxuICAgIGZpbmQ6IGZ1bmN0aW9uKHMpIHtcclxuICAgICAgICB2YXIgbiA9IFtdO1xyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9ICRuLmdldCgpO1xyXG4gICAgICAgICAgICB2YXIgbnMgPSB0aGlzLl9xdWVyeShzLCBub2RlKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbi5wdXNoKG5zW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IERvbShuKTtcclxuICAgIH0sXHJcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24ocykge1xyXG4gICAgICAgIHZhciBuID0gW107XHJcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCRuKSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gJG4uZ2V0KCk7XHJcbiAgICAgICAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbnMgPSBub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG4ucHVzaChuc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb20obikuZmlsdGVyKHMpO1xyXG4gICAgfSxcclxuICAgIHBhcmVudDogZnVuY3Rpb24ocykge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5nZXQoKTtcclxuICAgICAgICB2YXIgcCA9IChub2RlLnBhcmVudE5vZGUpID8gbm9kZS5wYXJlbnROb2RlIDogZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIChwKSA/IG5ldyBEb20ocCkuZmlsdGVyKHMpIDogbmV3IERvbSgpO1xyXG4gICAgfSxcclxuICAgIHBhcmVudHM6IGZ1bmN0aW9uKHMsIGMpIHtcclxuICAgICAgICBjID0gdGhpcy5fY29udGV4dChjKTtcclxuXHJcbiAgICAgICAgdmFyIG4gPSBbXTtcclxuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oJG4pIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSAkbi5nZXQoKTtcclxuICAgICAgICAgICAgdmFyIHAgPSBub2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlIChwICYmIHAgIT09IGMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBEb20ocCkuaXMocykpIHsgbi5wdXNoKHApOyB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuLnB1c2gocCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcCA9IHAucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IERvbShuKTtcclxuICAgIH0sXHJcbiAgICBjbG9zZXN0OiBmdW5jdGlvbihzLCBjKSB7XHJcbiAgICAgICAgYyA9IHRoaXMuX2NvbnRleHQoYyk7XHJcblxyXG4gICAgICAgIHZhciBuID0gW107XHJcbiAgICAgICAgdmFyIGlzTm9kZSA9IChzICYmIHMubm9kZVR5cGUpO1xyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9ICRuLmdldCgpO1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKGlzTm9kZSAmJiBub2RlID09PSBzKSB8fCBuZXcgRG9tKG5vZGUpLmlzKHMpKSByZXR1cm4gbi5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgICB9IHdoaWxlICgobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkgJiYgbm9kZSAhPT0gYyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRG9tKG4pO1xyXG4gICAgfSxcclxuICAgIG5leHQ6IGZ1bmN0aW9uKHMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2libGluZyhzLCAnbmV4dFNpYmxpbmcnKTtcclxuICAgIH0sXHJcbiAgICBuZXh0RWxlbWVudDogZnVuY3Rpb24ocykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWJsaW5nKHMsICduZXh0RWxlbWVudFNpYmxpbmcnKTtcclxuICAgIH0sXHJcbiAgICBwcmV2OiBmdW5jdGlvbihzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpYmxpbmcocywgJ3ByZXZpb3VzU2libGluZycpO1xyXG4gICAgfSxcclxuICAgIHByZXZFbGVtZW50OiBmdW5jdGlvbihzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpYmxpbmcocywgJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY3NzXHJcbiAgICBjc3M6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgKHR5cGVvZiBuYW1lICE9PSAnb2JqZWN0JykpIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3dpZHRoJyB8fCBuYW1lID09PSAnaGVpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChub2RlLnN0eWxlKSA/IHRoaXMuX2dldEhlaWdodE9yV2lkdGgobmFtZSkgKyAncHgnIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChub2RlLnN0eWxlKSA/IGdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbClbbmFtZV0gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNldFxyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oJG4pIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSAkbi5nZXQoKTtcclxuICAgICAgICAgICAgdmFyIG8gPSB7fTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgbyA9IG5hbWU7XHJcbiAgICAgICAgICAgIGVsc2Ugb1tuYW1lXSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG8pIHtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLnN0eWxlKSBub2RlLnN0eWxlW2tleV0gPSBvW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gYXR0clxyXG4gICAgYXR0cjogZnVuY3Rpb24obmFtZSwgdmFsdWUsIGRhdGEpIHtcclxuICAgICAgICBkYXRhID0gKGRhdGEpID8gJ2RhdGEtJyA6ICcnO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIG5hbWUgIT09ICdvYmplY3QnKSkge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0KCk7XHJcbiAgICAgICAgICAgIGlmIChub2RlICYmIG5vZGUubm9kZVR5cGUgIT09IDMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAobmFtZSA9PT0gJ2NoZWNrZWQnKSA/IG5vZGUuY2hlY2tlZCA6IHRoaXMuX2Jvb2xlYW4obm9kZS5nZXRBdHRyaWJ1dGUoZGF0YSArIG5hbWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2V0XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9ICRuLmdldCgpO1xyXG4gICAgICAgICAgICB2YXIgbyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSBvID0gbmFtZTtcclxuICAgICAgICAgICAgZWxzZSBvW25hbWVdID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnY2hlY2tlZCcpIG5vZGUuY2hlY2tlZCA9IG9ba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIG5vZGUuc2V0QXR0cmlidXRlKGRhdGEgKyBrZXksIG9ba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBkYXRhOiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChuYW1lID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdmFyIHJlRGF0YUF0dHIgPSAvXmRhdGEtKC4rKSQvO1xyXG4gICAgICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLmdldCgpLmF0dHJpYnV0ZXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICB2YXIgcmVwbGFjZXIgPSBmdW5jdGlvbiAoZykgeyByZXR1cm4gZ1sxXS50b1VwcGVyQ2FzZSgpOyB9O1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0cnNba2V5XSAmJiByZURhdGFBdHRyLnRlc3QoYXR0cnNba2V5XS5ub2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YU5hbWUgPSBhdHRyc1trZXldLm5vZGVOYW1lLm1hdGNoKHJlRGF0YUF0dHIpWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBhdHRyc1trZXldLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFOYW1lID0gZGF0YU5hbWUucmVwbGFjZSgvLShbYS16XSkvZywgcmVwbGFjZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsLnNlYXJjaCgvXnsvKSAhPT0gLTEpIHZhbCA9IHRoaXMuX29iamVjdCh2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgdmFsID0gKHRoaXMuX251bWJlcih2YWwpKSA/IHBhcnNlRmxvYXQodmFsKSA6IHRoaXMuX2Jvb2xlYW4odmFsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtkYXRhTmFtZV0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cihuYW1lLCB2YWx1ZSwgdHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgdmFsOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHZhciBlbCA9IHRoaXMuZ2V0KCk7XHJcbiAgICAgICAgICAgIGlmIChlbC50eXBlICYmIGVsLnR5cGUgPT09ICdjaGVja2JveCcpIHJldHVybiBlbC5jaGVja2VkO1xyXG4gICAgICAgICAgICBlbHNlIHJldHVybiBlbC52YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oJG4pIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gJG4uZ2V0KCk7XHJcbiAgICAgICAgICAgIGlmIChlbC50eXBlICYmIGVsLnR5cGUgPT09ICdjaGVja2JveCcpIGVsLmNoZWNrZWQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgZWxzZSBlbC52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZUF0dHI6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9ICRuLmdldCgpO1xyXG4gICAgICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbihuYW1lKSB7IGlmIChub2RlLm5vZGVUeXBlICE9PSAzKSBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsgfTtcclxuICAgICAgICAgICAgdmFsdWUuc3BsaXQoJyAnKS5mb3JFYWNoKGZuKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2xhc3NcclxuICAgIGFkZENsYXNzOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lYWNoQ2xhc3ModmFsdWUsICdhZGQnKTtcclxuICAgIH0sXHJcbiAgICByZW1vdmVDbGFzczogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZWFjaENsYXNzKHZhbHVlLCAncmVtb3ZlJyk7XHJcbiAgICB9LFxyXG4gICAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VhY2hDbGFzcyh2YWx1ZSwgJ3RvZ2dsZScpO1xyXG4gICAgfSxcclxuICAgIGhhc0NsYXNzOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5nZXQoKTtcclxuICAgICAgICByZXR1cm4gKG5vZGUuY2xhc3NMaXN0KSA/IG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHZhbHVlKSA6IGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBodG1sICYgdGV4dFxyXG4gICAgZW1wdHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oJG4pIHsgJG4uZ2V0KCkuaW5uZXJIVE1MID0gJyc7IH0pO1xyXG4gICAgfSxcclxuICAgIGh0bWw6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gKGh0bWwgPT09IHVuZGVmaW5lZCkgPyAodGhpcy5nZXQoKS5pbm5lckhUTUwgfHwgJycpIDogdGhpcy5lbXB0eSgpLmFwcGVuZChodG1sKTtcclxuICAgIH0sXHJcbiAgICB0ZXh0OiBmdW5jdGlvbih0ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuICh0ZXh0ID09PSB1bmRlZmluZWQpID8gKHRoaXMuZ2V0KCkudGV4dENvbnRlbnQgfHwgJycpIDogdGhpcy5lYWNoKGZ1bmN0aW9uKCRuKSB7ICRuLmdldCgpLnRleHRDb250ZW50ID0gdGV4dDsgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIG1hbmlwdWxhdGlvblxyXG4gICAgYWZ0ZXI6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5qZWN0KGh0bWwsIGZ1bmN0aW9uKGZyYWcsIG5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmcmFnID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJywgZnJhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZyYWcgaW5zdGFuY2VvZiBOb2RlID8gW2ZyYWddIDogdGhpcy5fYXJyYXkoZnJhZykucmV2ZXJzZSgpLCBzID0gMDsgcyA8IGkubGVuZ3RoOyBzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShpW3NdLCBub2RlLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZTogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbmplY3QoaHRtbCwgZnVuY3Rpb24oZnJhZywgbm9kZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZyYWcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlYmVnaW4nLCBmcmFnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbG1zID0gKGZyYWcgaW5zdGFuY2VvZiBOb2RlKSA/IFtmcmFnXSA6IHRoaXMuX2FycmF5KGZyYWcpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbG1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbG1zW2ldLCBub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYXBwZW5kOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luamVjdChodG1sLCBmdW5jdGlvbihmcmFnLCBub2RlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnJhZyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGZyYWcgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgZnJhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxtcyA9IChmcmFnIGluc3RhbmNlb2YgTm9kZSkgPyBbZnJhZ10gOiB0aGlzLl9hcnJheShmcmFnKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZWxtc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHByZXBlbmQ6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5qZWN0KGh0bWwsIGZ1bmN0aW9uKGZyYWcsIG5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmcmFnID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZnJhZyA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIG5vZGUuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgZnJhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxtcyA9IChmcmFnIGluc3RhbmNlb2YgTm9kZSkgPyBbZnJhZ10gOiB0aGlzLl9hcnJheShmcmFnKS5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLmluc2VydEJlZm9yZShlbG1zW2ldLCBub2RlLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICB3cmFwOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luamVjdChodG1sLCBmdW5jdGlvbihmcmFnLCBub2RlKSB7XHJcbiAgICAgICAgICAgIHZhciB3cmFwcGVyID0gKHR5cGVvZiBmcmFnID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgZnJhZyA9PT0gJ251bWJlcicpID8gdGhpcy5jcmVhdGUoZnJhZylbMF0gOiAoZnJhZyBpbnN0YW5jZW9mIE5vZGUpID8gZnJhZyA6IHRoaXMuX2FycmF5KGZyYWcpWzBdO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLCBub2RlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZChub2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXI7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgdW53cmFwOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCRuKSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gJG4uZ2V0KCk7XHJcbiAgICAgICAgICAgIHZhciBkb2NGcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgICAgICB3aGlsZSAobm9kZS5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICBkb2NGcmFnLmFwcGVuZENoaWxkKGNoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChkb2NGcmFnLCBub2RlKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICByZXBsYWNlV2l0aDogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbmplY3QoaHRtbCwgZnVuY3Rpb24oZnJhZywgbm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgZG9jRnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgICAgICAgICAgdmFyIGVsbXMgPSAodHlwZW9mIGZyYWcgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBmcmFnID09PSAnbnVtYmVyJykgPyB0aGlzLmNyZWF0ZShmcmFnKSA6IChmcmFnIGluc3RhbmNlb2YgTm9kZSkgPyBbZnJhZ10gOiB0aGlzLl9hcnJheShmcmFnKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZG9jRnJhZy5hcHBlbmRDaGlsZChlbG1zW2ldKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGRvY0ZyYWcuY2hpbGROb2Rlc1swXTtcclxuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChkb2NGcmFnLCBub2RlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oJG4pIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSAkbi5nZXQoKTtcclxuICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGNsb25lOiBmdW5jdGlvbihldmVudHMpIHtcclxuICAgICAgICB2YXIgbiA9IFtdO1xyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9ICRuLmdldCgpO1xyXG4gICAgICAgICAgICB2YXIgY29weSA9IHRoaXMuX2Nsb25lKG5vZGUpO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnRzKSBjb3B5ID0gdGhpcy5fY2xvbmVFdmVudHMobm9kZSwgY29weSk7XHJcbiAgICAgICAgICAgIG4ucHVzaChjb3B5KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb20obik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHNob3cvaGlkZVxyXG4gICAgc2hvdzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9ICRuLmdldCgpO1xyXG4gICAgICAgICAgICBpZiAoIW5vZGUuc3R5bGUgfHwgIXRoaXMuX2hhc0Rpc3BsYXlOb25lKG5vZGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RvbVRhcmdldFNob3cnKTtcclxuICAgICAgICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gKHRhcmdldCkgPyB0YXJnZXQgOiAnYmxvY2snO1xyXG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZSgnZG9tVGFyZ2V0U2hvdycpO1xyXG5cclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuICAgIGhpZGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oJG4pIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSAkbi5nZXQoKTtcclxuICAgICAgICAgICAgaWYgKCFub2RlLnN0eWxlIHx8IHRoaXMuX2hhc0Rpc3BsYXlOb25lKG5vZGUpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgZGlzcGxheSA9IG5vZGUuc3R5bGUuZGlzcGxheTtcclxuICAgICAgICAgICAgaWYgKGRpc3BsYXkgIT09ICdibG9jaycpIG5vZGUuc2V0QXR0cmlidXRlKCdkb21UYXJnZXRTaG93JywgZGlzcGxheSk7XHJcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZGltZW5zaW9uc1xyXG4gICAgc2Nyb2xsVG9wOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5nZXQoKTtcclxuICAgICAgICB2YXIgaXNXaW5kb3cgPSB0aGlzLl9pc1dpbmRvd05vZGUobm9kZSk7XHJcbiAgICAgICAgdmFyIGlzRG9jdW1lbnQgPSAobm9kZS5ub2RlVHlwZSA9PT0gOSk7XHJcbiAgICAgICAgdmFyIGVsID0gKGlzRG9jdW1lbnQpID8gKG5vZGUuc2Nyb2xsaW5nRWxlbWVudCB8fCBub2RlLmJvZHkucGFyZW50Tm9kZSB8fCBub2RlLmJvZHkgfHwgbm9kZS5kb2N1bWVudEVsZW1lbnQpIDogbm9kZTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChpc1dpbmRvdykgbm9kZS5zY3JvbGxUbygwLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIGVsc2UgZWwuc2Nyb2xsVG9wID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoaXNXaW5kb3cpID8gbm9kZS5wYWdlWU9mZnNldCA6IGVsLnNjcm9sbFRvcDtcclxuICAgIH0sXHJcbiAgICBvZmZzZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRQb3MoJ29mZnNldCcpO1xyXG4gICAgfSxcclxuICAgIHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UG9zKCdwb3NpdGlvbicpO1xyXG4gICAgfSxcclxuICAgIHdpZHRoOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiAodmFsdWUgIT09IHVuZGVmaW5lZCkgPyB0aGlzLmNzcygnd2lkdGgnLCBwYXJzZUludCh2YWx1ZSkgKyAncHgnKSA6IHRoaXMuX2dldFNpemUoJ3dpZHRoJywgJ1dpZHRoJyk7XHJcbiAgICB9LFxyXG4gICAgaGVpZ2h0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiAodmFsdWUgIT09IHVuZGVmaW5lZCkgPyB0aGlzLmNzcygnaGVpZ2h0JywgcGFyc2VJbnQodmFsdWUpICsgJ3B4JykgOiB0aGlzLl9nZXRTaXplKCdoZWlnaHQnLCAnSGVpZ2h0Jyk7XHJcbiAgICB9LFxyXG4gICAgb3V0ZXJXaWR0aDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFNpemUoJ3dpZHRoJywgJ1dpZHRoJywgJ291dGVyJyk7XHJcbiAgICB9LFxyXG4gICAgb3V0ZXJIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRTaXplKCdoZWlnaHQnLCAnSGVpZ2h0JywgJ291dGVyJyk7XHJcbiAgICB9LFxyXG4gICAgaW5uZXJXaWR0aDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFNpemUoJ3dpZHRoJywgJ1dpZHRoJywgJ2lubmVyJyk7XHJcbiAgICB9LFxyXG4gICAgaW5uZXJIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRTaXplKCdoZWlnaHQnLCAnSGVpZ2h0JywgJ2lubmVyJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGV2ZW50c1xyXG4gICAgY2xpY2s6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90cmlnZ2VyKCdjbGljaycpO1xyXG4gICAgfSxcclxuICAgIGZvY3VzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHJpZ2dlcignZm9jdXMnKTtcclxuICAgIH0sXHJcbiAgICBibHVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdHJpZ2dlcignYmx1cicpO1xyXG4gICAgfSxcclxuICAgIG9uOiBmdW5jdGlvbihuYW1lcywgaGFuZGxlciwgb25lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9ICRuLmdldCgpO1xyXG4gICAgICAgICAgICB2YXIgZXZlbnRzID0gbmFtZXMuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IHRoaXMuX2dldEV2ZW50TmFtZShldmVudHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHRoaXMuX2dldEV2ZW50TmFtZXNwYWNlKGV2ZW50c1tpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGFuZGxlciA9IChvbmUpID8gdGhpcy5fZ2V0T25lSGFuZGxlcihoYW5kbGVyLCBuYW1lcykgOiBoYW5kbGVyO1xyXG4gICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICBub2RlLl9lID0gbm9kZS5fZSB8fCB7fTtcclxuICAgICAgICAgICAgICAgIG5vZGUuX2VbbmFtZXNwYWNlXSA9IG5vZGUuX2VbbmFtZXNwYWNlXSB8fCB7fTtcclxuICAgICAgICAgICAgICAgIG5vZGUuX2VbbmFtZXNwYWNlXVtldmVudF0gPSBub2RlLl9lW25hbWVzcGFjZV1bZXZlbnRdIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgbm9kZS5fZVtuYW1lc3BhY2VdW2V2ZW50XS5wdXNoKGhhbmRsZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIG9uZTogZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub24oZXZlbnRzLCBoYW5kbGVyLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBvZmY6IGZ1bmN0aW9uKG5hbWVzLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgdmFyIHRlc3RFdmVudCA9IGZ1bmN0aW9uKG5hbWUsIGtleSwgZXZlbnQpIHsgcmV0dXJuIChuYW1lID09PSBldmVudCk7IH07XHJcbiAgICAgICAgdmFyIHRlc3ROYW1lc3BhY2UgPSBmdW5jdGlvbihuYW1lLCBrZXksIGV2ZW50LCBuYW1lc3BhY2UpIHsgcmV0dXJuIChrZXkgPT09IG5hbWVzcGFjZSk7IH07XHJcbiAgICAgICAgdmFyIHRlc3RFdmVudE5hbWVzcGFjZSA9IGZ1bmN0aW9uKG5hbWUsIGtleSwgZXZlbnQsIG5hbWVzcGFjZSkgeyByZXR1cm4gKG5hbWUgPT09IGV2ZW50ICYmIGtleSA9PT0gbmFtZXNwYWNlKTsgfTtcclxuICAgICAgICB2YXIgdGVzdFBvc2l0aXZlID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9O1xyXG5cclxuICAgICAgICBpZiAobmFtZXMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAvLyBhbGxcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2ZmRXZlbnQoJG4uZ2V0KCksIGZhbHNlLCBmYWxzZSwgaGFuZGxlciwgdGVzdFBvc2l0aXZlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCRuKSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gJG4uZ2V0KCk7XHJcbiAgICAgICAgICAgIHZhciBldmVudHMgPSBuYW1lcy5zcGxpdCgnICcpO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IHRoaXMuX2dldEV2ZW50TmFtZShldmVudHNbaV0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHRoaXMuX2dldEV2ZW50TmFtZXNwYWNlKGV2ZW50c1tpXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gMSkgZXZlbnQgd2l0aG91dCBuYW1lc3BhY2VcclxuICAgICAgICAgICAgICAgIGlmIChuYW1lc3BhY2UgPT09ICdfZXZlbnRzJykgdGhpcy5fb2ZmRXZlbnQobm9kZSwgZXZlbnQsIG5hbWVzcGFjZSwgaGFuZGxlciwgdGVzdEV2ZW50KTtcclxuICAgICAgICAgICAgICAgIC8vIDIpIG9ubHkgbmFtZXNwYWNlXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghZXZlbnQgJiYgbmFtZXNwYWNlICE9PSAnX2V2ZW50cycpIHRoaXMuX29mZkV2ZW50KG5vZGUsIGV2ZW50LCBuYW1lc3BhY2UsIGhhbmRsZXIsIHRlc3ROYW1lc3BhY2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gMykgZXZlbnQgKyBuYW1lc3BhY2VcclxuICAgICAgICAgICAgICAgIGVsc2UgdGhpcy5fb2ZmRXZlbnQobm9kZSwgZXZlbnQsIG5hbWVzcGFjZSwgaGFuZGxlciwgdGVzdEV2ZW50TmFtZXNwYWNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBmb3JtXHJcbiAgICBzZXJpYWxpemU6IGZ1bmN0aW9uKGFzT2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgICAgIHZhciBlbG1zID0gdGhpcy5nZXQoKS5lbGVtZW50cztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGVsID0gZWxtc1tpXTtcclxuICAgICAgICAgICAgaWYgKC8oY2hlY2tib3h8cmFkaW8pLy50ZXN0KGVsLnR5cGUpICYmICFlbC5jaGVja2VkKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKCFlbC5uYW1lIHx8IGVsLmRpc2FibGVkIHx8IGVsLnR5cGUgPT09ICdmaWxlJykgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoZWwudHlwZSA9PT0gJ3NlbGVjdC1tdWx0aXBsZScpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgZWwub3B0aW9ucy5sZW5ndGg7IHorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHQgPSBlbC5vcHRpb25zW3pdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHQuc2VsZWN0ZWQpIG9ialtlbC5uYW1lXSA9IG9wdC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb2JqW2VsLm5hbWVdID0gKHRoaXMuX251bWJlcihlbC52YWx1ZSkpID8gcGFyc2VGbG9hdChlbC52YWx1ZSkgOiB0aGlzLl9ib29sZWFuKGVsLnZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoYXNPYmplY3QpID8gb2JqIDogdGhpcy5fcGFyYW1zKG9iaik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGFuaW1hdGlvblxyXG4gICAgc2Nyb2xsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmdldCgpLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xyXG4gICAgfSxcclxuICAgIGZhZGVJbjogZnVuY3Rpb24oc3BlZWQsIGZuKSB7XHJcbiAgICAgICAgdmFyIGFuaW0gPSB0aGlzLl9hbmltKHNwZWVkLCBmbiwgNTAwKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICAkbi5jc3MoeyAnZGlzcGxheSc6ICdibG9jaycsICdvcGFjaXR5JzogMCwgJ2FuaW1hdGlvbic6ICdmYWRlSW4gJyArIGFuaW0uc3BlZWQgKyAncyBlYXNlLWluLW91dCcgfSk7XHJcbiAgICAgICAgICAgICRuLm9uZSgnYW5pbWF0aW9uZW5kJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgJG4uY3NzKHsgJ29wYWNpdHknOiAnJywgJ2FuaW1hdGlvbic6ICcnIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFuaW0uZm4pIGFuaW0uZm4oJG4pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBmYWRlT3V0OiBmdW5jdGlvbihzcGVlZCwgZm4pIHtcclxuICAgICAgICB2YXIgYW5pbSA9IHRoaXMuX2FuaW0oc3BlZWQsIGZuLCAzMDApO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCRuKSB7XHJcbiAgICAgICAgICAgICRuLmNzcyh7ICdvcGFjaXR5JzogMSwgJ2FuaW1hdGlvbic6ICdmYWRlT3V0ICcgKyBhbmltLnNwZWVkICsgJ3MgZWFzZS1pbi1vdXQnIH0pO1xyXG4gICAgICAgICAgICAkbi5vbmUoJ2FuaW1hdGlvbmVuZCcsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICRuLmNzcyh7ICdkaXNwbGF5JzogJ25vbmUnLCAnb3BhY2l0eSc6ICcnLCAnYW5pbWF0aW9uJzogJycgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5pbS5mbikgYW5pbS5mbigkbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHNsaWRlVXA6IGZ1bmN0aW9uKHNwZWVkLCBmbikge1xyXG4gICAgICAgIHZhciBhbmltID0gdGhpcy5fYW5pbShzcGVlZCwgZm4sIDMwMCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oJG4pIHtcclxuICAgICAgICAgICAgJG4uaGVpZ2h0KCRuLmhlaWdodCgpKTtcclxuICAgICAgICAgICAgJG4uY3NzKHsgJ292ZXJmbG93JzogJ2hpZGRlbicsICdhbmltYXRpb24nOiAnc2xpZGVVcCAnICsgYW5pbS5zcGVlZCArICdzIGVhc2Utb3V0JyB9KTtcclxuICAgICAgICAgICAgJG4ub25lKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAkbi5jc3MoeyAnZGlzcGxheSc6ICdub25lJywgJ2hlaWdodCc6ICcnLCAnYW5pbWF0aW9uJzogJycgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5pbS5mbikgYW5pbS5mbigkbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHNsaWRlRG93bjogZnVuY3Rpb24oc3BlZWQsIGZuKSB7XHJcbiAgICAgICAgdmFyIGFuaW0gPSB0aGlzLl9hbmltKHNwZWVkLCBmbiwgNDAwKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICAkbi5oZWlnaHQoJG4uaGVpZ2h0KCkpO1xyXG4gICAgICAgICAgICAkbi5jc3MoeyAnZGlzcGxheSc6ICdibG9jaycsICdvdmVyZmxvdyc6ICdoaWRkZW4nLCAnYW5pbWF0aW9uJzogJ3NsaWRlRG93biAnICsgYW5pbS5zcGVlZCArICdzIGVhc2UtaW4tb3V0JyB9KTtcclxuICAgICAgICAgICAgJG4ub25lKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAkbi5jc3MoeyAnb3ZlcmZsb3cnOiAnJywgJ2hlaWdodCc6ICcnLCAnYW5pbWF0aW9uJzogJycgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYW5pbS5mbikgYW5pbS5mbigkbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfcXVlcnlDb250ZXh0OiBmdW5jdGlvbihzLCBjKSB7XHJcbiAgICAgICAgYyA9IHRoaXMuX2NvbnRleHQoYyk7XHJcbiAgICAgICAgcmV0dXJuIChjLm5vZGVUeXBlICE9PSAzICYmIHR5cGVvZiBjLnF1ZXJ5U2VsZWN0b3JBbGwgPT09ICdmdW5jdGlvbicpID8gYy5xdWVyeVNlbGVjdG9yQWxsKHMpIDogW107XHJcbiAgICB9LFxyXG4gICAgX3F1ZXJ5OiBmdW5jdGlvbihzLCBjKSB7XHJcbiAgICAgICAgdmFyIGQgPSBkb2N1bWVudDtcclxuICAgICAgICBpZiAoYykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcXVlcnlDb250ZXh0KHMsIGMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgvXlsuI10/W1xcdy1dKiQvLnRlc3QocykpIHtcclxuICAgICAgICAgICAgaWYgKHNbMF0gPT09ICcjJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsID0gZC5nZXRFbGVtZW50QnlJZChzLnNsaWNlKDEpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbCA/IFtlbF0gOiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc1swXSA9PT0gJy4nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHMuc2xpY2UoMSkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkLnF1ZXJ5U2VsZWN0b3JBbGwocyk7XHJcbiAgICB9LFxyXG4gICAgX2NvbnRleHQ6IGZ1bmN0aW9uKGMpIHtcclxuICAgICAgICByZXR1cm4gKCFjKSA/IGRvY3VtZW50IDogKCh0eXBlb2YgYyA9PT0gJ3N0cmluZycpID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihjKSA6IGMpO1xyXG4gICAgfSxcclxuICAgIF9zaWJsaW5nOiBmdW5jdGlvbihzLCBtZXRob2QpIHtcclxuICAgICAgICB2YXIgaXNOb2RlID0gKHMgJiYgcy5ub2RlVHlwZSk7XHJcbiAgICAgICAgdmFyIHNpYmxpbmc7XHJcblxyXG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9ICRuLmdldCgpO1xyXG4gICAgICAgICAgICB3aGlsZSAobm9kZSA9IG5vZGVbbWV0aG9kXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChpc05vZGUgJiYgbm9kZSA9PT0gcykgfHwgbmV3IERvbShub2RlKS5pcyhzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpYmxpbmcgPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IERvbShzaWJsaW5nKTtcclxuICAgIH0sXHJcbiAgICBfc2xpY2U6IGZ1bmN0aW9uKG8pIHtcclxuICAgICAgICByZXR1cm4gKCFvIHx8IG8ubGVuZ3RoID09PSAwKSA/IFtdIDogKG8ubGVuZ3RoKSA/IFtdLnNsaWNlLmNhbGwoby5ub2RlcyB8fCBvKSA6IFtvXTtcclxuICAgIH0sXHJcbiAgICBfYXJyYXk6IGZ1bmN0aW9uKG8pIHtcclxuICAgICAgICBpZiAobyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gW107XHJcbiAgICAgICAgZWxzZSBpZiAobyBpbnN0YW5jZW9mIE5vZGVMaXN0KSB7XHJcbiAgICAgICAgICAgIHZhciBhcnIgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBhcnJbaV0gPSBvW2ldO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChvIGluc3RhbmNlb2YgRG9tKSA/IG8ubm9kZXMgOiBvO1xyXG4gICAgfSxcclxuICAgIF9vYmplY3Q6IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiAobmV3IEZ1bmN0aW9uKFwicmV0dXJuIFwiICsgc3RyKSkoKTtcclxuICAgIH0sXHJcbiAgICBfcGFyYW1zOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICB2YXIgcGFyYW1zID0gJyc7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICBwYXJhbXMgKz0gJyYnICsgdGhpcy5fZW5jb2RlVXJpKGtleSkgKyAnPScgKyB0aGlzLl9lbmNvZGVVcmkob2JqW2tleV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBhcmFtcy5yZXBsYWNlKC9eJi8sICcnKTtcclxuICAgIH0sXHJcbiAgICBfYm9vbGVhbjogZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgaWYgKHN0ciA9PT0gJ3RydWUnKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBlbHNlIGlmIChzdHIgPT09ICdmYWxzZScpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH0sXHJcbiAgICBfbnVtYmVyOiBmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICByZXR1cm4gIWlzTmFOKHN0cikgJiYgIWlzTmFOKHBhcnNlRmxvYXQoc3RyKSk7XHJcbiAgICB9LFxyXG4gICAgX2luamVjdDogZnVuY3Rpb24oaHRtbCwgZm4pIHtcclxuICAgICAgICB2YXIgbGVuID0gdGhpcy5ub2Rlcy5sZW5ndGg7XHJcbiAgICAgICAgdmFyIG5vZGVzID0gW107XHJcbiAgICAgICAgd2hpbGUgKGxlbi0tKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMgPSAodHlwZW9mIGh0bWwgPT09ICdmdW5jdGlvbicpID8gaHRtbC5jYWxsKHRoaXMsIHRoaXMubm9kZXNbbGVuXSkgOiBodG1sO1xyXG4gICAgICAgICAgICB2YXIgZWwgPSAobGVuID09PSAwKSA/IHJlcyA6IHRoaXMuX2Nsb25lKHJlcyk7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gZm4uY2FsbCh0aGlzLCBlbCwgdGhpcy5ub2Rlc1tsZW5dKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5kb20pIG5vZGVzLnB1c2gobm9kZS5nZXQoKSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIG5vZGVzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRG9tKG5vZGVzKTtcclxuICAgIH0sXHJcbiAgICBfY2xvbmU6IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG5vZGUgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJykgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIE5vZGUgfHwgbm9kZS5ub2RlVHlwZSkgcmV0dXJuIG5vZGUuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgIGVsc2UgaWYgKCdsZW5ndGgnIGluIG5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdLm1hcC5jYWxsKHRoaXMuX2FycmF5KG5vZGUpLCBmdW5jdGlvbihlbCkgeyByZXR1cm4gZWwuY2xvbmVOb2RlKHRydWUpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2Nsb25lRXZlbnRzOiBmdW5jdGlvbihub2RlLCBjb3B5KSB7XHJcbiAgICAgICAgdmFyIGV2ZW50cyA9IG5vZGUuX2U7XHJcbiAgICAgICAgaWYgKGV2ZW50cykge1xyXG4gICAgICAgICAgICBjb3B5Ll9lID0gZXZlbnRzO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIGV2ZW50cy5fZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5fZXZlbnRzW25hbWVdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29weS5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGV2ZW50cy5fZXZlbnRzW25hbWVdW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvcHk7XHJcbiAgICB9LFxyXG4gICAgX3RyaWdnZXI6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuZ2V0KCk7XHJcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5ub2RlVHlwZSAhPT0gMykgbm9kZVtuYW1lXSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIF9lbmNvZGVVcmk6IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC8hL2csICclMjEnKS5yZXBsYWNlKC8nL2csICclMjcnKS5yZXBsYWNlKC9cXCgvZywgJyUyOCcpLnJlcGxhY2UoL1xcKS9nLCAnJTI5JykucmVwbGFjZSgvXFwqL2csICclMkEnKS5yZXBsYWNlKC8lMjAvZywgJysnKTtcclxuICAgIH0sXHJcbiAgICBfZ2V0U2l6ZTogZnVuY3Rpb24obmFtZSwgY25hbWUsIHR5cGUpIHtcclxuICAgICAgICB2YXIgZWwgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IDA7XHJcbiAgICAgICAgaWYgKGVsLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZWwubm9kZVR5cGUgPT09IDkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9nZXREb2NTaXplKGVsLCBjbmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2lzV2luZG93Tm9kZShlbCkpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB3aW5kb3dbJ2lubmVyJyArIGNuYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fZ2V0SGVpZ2h0T3JXaWR0aChuYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlKTtcclxuICAgIH0sXHJcbiAgICBfZ2V0RG9jU2l6ZTogZnVuY3Rpb24obm9kZSwgdHlwZSkge1xyXG4gICAgICAgIHZhciBib2R5ID0gbm9kZS5ib2R5LCBodG1sID0gbm9kZS5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ3Njcm9sbCcgKyB0eXBlXSwgYm9keVsnb2Zmc2V0JyArIHR5cGVdLCBodG1sWydjbGllbnQnICsgdHlwZV0sIGh0bWxbJ3Njcm9sbCcgKyB0eXBlXSwgaHRtbFsnb2Zmc2V0JyArIHR5cGVdKTtcclxuICAgIH0sXHJcbiAgICBfZ2V0UG9zOiBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIHZhciBkaW0gPSB7IHRvcDogMCwgbGVmdDogMCB9O1xyXG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzIHx8IHRoaXMuX2lzV2luZG93Tm9kZShub2RlKSB8fCBub2RlLm5vZGVUeXBlID09PSA5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkaW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdwb3NpdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdG9wOiBub2RlLm9mZnNldFRvcCwgbGVmdDogbm9kZS5vZmZzZXRMZWZ0IH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdvZmZzZXQnKSB7XHJcbiAgICAgICAgICAgIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgdmFyIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcclxuICAgIFx0XHR2YXIgZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XHJcbiAgICBcdFx0dmFyIHdpbiA9IGRvYy5kZWZhdWx0VmlldztcclxuXHJcbiAgICBcdFx0cmV0dXJuIHtcclxuICAgIFx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQgLSBkb2NFbGVtLmNsaWVudFRvcCxcclxuICAgIFx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldCAtIGRvY0VsZW0uY2xpZW50TGVmdFxyXG4gICAgXHRcdH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGltO1xyXG4gICAgfSxcclxuICAgIF9nZXRIZWlnaHRPcldpZHRoOiBmdW5jdGlvbihuYW1lLCB0eXBlKSB7XHJcbiAgICAgICAgdmFyIGNuYW1lID0gbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XHJcbiAgICAgICAgdmFyIG1vZGUgPSAodHlwZSkgPyB0eXBlIDogJ29mZnNldCc7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IDA7XHJcbiAgICAgICAgdmFyIGVsID0gdGhpcy5nZXQoKTtcclxuICAgICAgICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcclxuICAgICAgICB2YXIgJHRhcmdldHMgPSB0aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oJG4pIHtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSAkbi5nZXQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIChub2RlLm5vZGVUeXBlID09PSAxICYmIGdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkuZGlzcGxheSA9PT0gJ25vbmUnKSA/IG5vZGUgOiBmYWxzZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHN0eWxlLmRpc3BsYXkgPT09ICdub25lJykgJHRhcmdldHMuYWRkKGVsKTtcclxuICAgICAgICBpZiAoJHRhcmdldHMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHZhciBmaXhTdHlsZSA9ICd2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudDsgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsnO1xyXG4gICAgICAgICAgICB2YXIgdG1wID0gW107XHJcblxyXG4gICAgICAgICAgICAkdGFyZ2V0cy5lYWNoKGZ1bmN0aW9uKCRuKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1N0eWxlID0gJG4uYXR0cignc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzU3R5bGUgIT09IG51bGwpIHRtcC5wdXNoKHRoaXNTdHlsZSk7XHJcbiAgICAgICAgICAgICAgICAkbi5hdHRyKCdzdHlsZScsICh0aGlzU3R5bGUgIT09IG51bGwpID8gdGhpc1N0eWxlICsgJzsnICsgZml4U3R5bGUgOiBmaXhTdHlsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgcmVzdWx0ID0gZWxbbW9kZSArIGNuYW1lXTtcclxuXHJcbiAgICAgICAgICAgICR0YXJnZXRzLmVhY2goZnVuY3Rpb24oJG4sIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0bXBbaV0gPT09IHVuZGVmaW5lZCkgJG4ucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgJG4uYXR0cignc3R5bGUnLCB0bXBbaV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGVsW21vZGUgKyBjbmFtZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuICAgIF9lYWNoQ2xhc3M6IGZ1bmN0aW9uKHZhbHVlLCB0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigkbikge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gJG4uZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbihuYW1lKSB7IGlmIChub2RlLmNsYXNzTGlzdCkgbm9kZS5jbGFzc0xpc3RbdHlwZV0obmFtZSk7IH07XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5zcGxpdCgnICcpLmZvckVhY2goZm4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgX2dldE9uZUhhbmRsZXI6IGZ1bmN0aW9uKGhhbmRsZXIsIGV2ZW50cykge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgc2VsZi5vZmYoZXZlbnRzKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIF9nZXRFdmVudE5hbWVzcGFjZTogZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICB2YXIgYXJyID0gZXZlbnQuc3BsaXQoJy4nKTtcclxuICAgICAgICB2YXIgbmFtZXNwYWNlID0gKGFyclsxXSkgPyBhcnJbMV0gOiAnX2V2ZW50cyc7XHJcbiAgICAgICAgcmV0dXJuIChhcnJbMl0pID8gbmFtZXNwYWNlICsgYXJyWzJdIDogbmFtZXNwYWNlO1xyXG4gICAgfSxcclxuICAgIF9nZXRFdmVudE5hbWU6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50LnNwbGl0KCcuJylbMF07XHJcbiAgICB9LFxyXG4gICAgX29mZkV2ZW50OiBmdW5jdGlvbihub2RlLCBldmVudCwgbmFtZXNwYWNlLCBoYW5kbGVyLCBjb25kaXRpb24pIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbm9kZS5fZSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIG5vZGUuX2Vba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbihuYW1lLCBrZXksIGV2ZW50LCBuYW1lc3BhY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gbm9kZS5fZVtrZXldW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAndW5kZWZpbmVkJyAmJiBoYW5kbGVyc1tpXS50b1N0cmluZygpICE9PSBoYW5kbGVyLnRvU3RyaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgaGFuZGxlcnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLl9lW2tleV1bbmFtZV0uc3BsaWNlKGksIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuX2Vba2V5XVtuYW1lXS5sZW5ndGggPT09IDApIGRlbGV0ZSBub2RlLl9lW2tleV1bbmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhub2RlLl9lW2tleV0pLmxlbmd0aCA9PT0gMCkgZGVsZXRlIG5vZGUuX2Vba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2hhc0Rpc3BsYXlOb25lOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHJldHVybiAoZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB8fCAoKGVsLmN1cnJlbnRTdHlsZSkgPyBlbC5jdXJyZW50U3R5bGUuZGlzcGxheSA6IGdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmRpc3BsYXkpID09PSAnbm9uZSc7XHJcbiAgICB9LFxyXG4gICAgX2FuaW06IGZ1bmN0aW9uKHNwZWVkLCBmbiwgc3BlZWREZWYpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHNwZWVkID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGZuID0gc3BlZWQ7XHJcbiAgICAgICAgICAgIHNwZWVkID0gc3BlZWREZWY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzcGVlZCA9IHNwZWVkIHx8IHNwZWVkRGVmO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZm46IGZuLFxyXG4gICAgICAgICAgICBzcGVlZDogc3BlZWQvMTAwMFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgX2lzV2luZG93Tm9kZTogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHJldHVybiAobm9kZSA9PT0gd2luZG93IHx8IChub2RlLnBhcmVudCAmJiBub2RlLnBhcmVudCA9PT0gd2luZG93KSk7XHJcbiAgICB9XHJcbn07XHJcbi8vIFVuaXF1ZSBJRFxyXG52YXIgYXJ4X3V1aWQgPSAwO1xyXG5cclxuLy8gSW5pdFxyXG52YXIgQXJ0aWNsZUVkaXRvciA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBzZXR0aW5ncykge1xyXG4gICAgcmV0dXJuIEFydGljbGVFZGl0b3JJbml0KHNlbGVjdG9yLCBzZXR0aW5ncyk7XHJcbn07XHJcblxyXG4vLyBDbGFzc1xyXG52YXIgQXJ0aWNsZUVkaXRvckluaXQgPSBmdW5jdGlvbihzZWxlY3Rvciwgc2V0dGluZ3MpIHtcclxuICAgIHZhciAkZWxtcyA9ICRBUlguZG9tKHNlbGVjdG9yKTtcclxuICAgIHZhciBpbnN0YW5jZTtcclxuICAgICRlbG1zLmVhY2goZnVuY3Rpb24oJGVsKSB7XHJcbiAgICAgICAgaW5zdGFuY2UgPSAkZWwuZGF0YWdldCgkQVJYLm5hbWVzcGFjZSk7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXphdGlvblxyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBBcHAoJGVsLCBzZXR0aW5ncywgYXJ4X3V1aWQpO1xyXG4gICAgICAgICAgICAkZWwuZGF0YXNldCgkQVJYLm5hbWVzcGFjZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAkQVJYLmluc3RhbmNlc1thcnhfdXVpZF0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgYXJ4X3V1aWQrKztcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gaW5zdGFuY2U7XHJcbn07XHJcblxyXG52YXIgJEFSWCA9IEFydGljbGVFZGl0b3I7XHJcblxyXG4vLyBEb20gJiBBamF4XHJcbiRBUlguZG9tID0gZnVuY3Rpb24oc2VsZWN0b3IsIGNvbnRleHQpIHsgcmV0dXJuIG5ldyBEb20oc2VsZWN0b3IsIGNvbnRleHQpOyB9O1xyXG4kQVJYLmFqYXggPSBBamF4O1xyXG5cclxuLy8gR2xvYmFsc1xyXG4kQVJYLmluc3RhbmNlcyA9IFtdO1xyXG4kQVJYLm5hbWVzcGFjZSA9ICdhcnRpY2xlLWVkaXRvcic7XHJcbiRBUlgucHJlZml4ID0gJ2FyeCc7XHJcbiRBUlgudmVyc2lvbiA9ICcyLjEuMyc7XHJcbiRBUlguc2V0dGluZ3MgPSB7fTtcclxuJEFSWC5sYW5nID0ge307XHJcbiRBUlguX21peGlucyA9IHt9O1xyXG4kQVJYLl9yZXBvc2l0b3J5ID0ge307XHJcbiRBUlguX3N1YnNjcmliZSA9IHt9O1xyXG4kQVJYLmtleWNvZGVzID0ge1xyXG5cdEJBQ0tTUEFDRTogOCxcclxuXHRERUxFVEU6IDQ2LFxyXG5cdFVQOiAzOCxcclxuXHRET1dOOiA0MCxcclxuXHRFTlRFUjogMTMsXHJcblx0U1BBQ0U6IDMyLFxyXG5cdEVTQzogMjcsXHJcblx0VEFCOiA5LFxyXG5cdENUUkw6IDE3LFxyXG5cdE1FVEE6IDkxLFxyXG5cdFNISUZUOiAxNixcclxuXHRBTFQ6IDE4LFxyXG5cdFJJR0hUOiAzOSxcclxuXHRMRUZUOiAzN1xyXG59O1xyXG5cclxuLy8gQWRkXHJcbiRBUlguYWRkID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgb2JqKSB7XHJcbiAgICAvLyB0cmFuc2xhdGlvbnNcclxuICAgIGlmIChvYmoudHJhbnNsYXRpb25zKSB7XHJcbiAgICAgICAgJEFSWC5sYW5nID0gJEFSWC5leHRlbmQodHJ1ZSwgJEFSWC5sYW5nLCBvYmoudHJhbnNsYXRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBkZWZhdWx0c1xyXG4gICAgaWYgKG9iai5kZWZhdWx0cykge1xyXG4gICAgICAgIHZhciBsb2NhbG9wdHMgPSB7fTtcclxuICAgICAgICBsb2NhbG9wdHNbbmFtZV0gPSBvYmouZGVmYXVsdHM7XHJcbiAgICAgICAgJEFSWC5vcHRzID0gJEFSWC5leHRlbmQodHJ1ZSwgJEFSWC5vcHRzLCBsb2NhbG9wdHMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGV4dGVuZCBwYXJzZXJcclxuICAgIGlmIChvYmoucGFyc2VyKSB7XHJcbiAgICAgICAgdmFyIG9wdCA9IHt9O1xyXG4gICAgICAgIG9wdFtvYmoudHlwZV0gPSBvYmoucGFyc2VyO1xyXG4gICAgICAgICRBUlgub3B0cy5wYXJzZXIgPSAkQVJYLmV4dGVuZCh7fSwgdHJ1ZSwgJEFSWC5vcHRzLnBhcnNlciwgb3B0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBleHRlbmQgbmVzdGVkXHJcbiAgICBpZiAob2JqLm5lc3RlZCkge1xyXG4gICAgICAgICRBUlgub3B0cy5uZXN0ZWQucHVzaChvYmoudHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGUgPT09ICdtaXhpbicpIHtcclxuICAgICAgICAkQVJYLl9taXhpbnNbbmFtZV0gPSBvYmo7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBzdWJzY3JpYmVcclxuICAgICAgICBpZiAob2JqLnN1YnNjcmliZSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqLnN1YnNjcmliZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyciA9IGtleS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbnMgPSBhcnJbaV0udHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgJEFSWC5fc3Vic2NyaWJlW25zXSA9PT0gJ3VuZGVmaW5lZCcpICRBUlguX3N1YnNjcmliZVtuc10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAkQVJYLl9zdWJzY3JpYmVbbnNdLnB1c2goeyBtb2R1bGU6IG5hbWUsIGZ1bmM6IG9iai5zdWJzY3JpYmVba2V5XSB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHJvdG90eXBlXHJcbiAgICAgICAgdmFyIEYgPSBmdW5jdGlvbigpIHt9O1xyXG4gICAgICAgIEYucHJvdG90eXBlID0gb2JqO1xyXG5cclxuICAgICAgICAvLyBtaXhpbnNcclxuICAgICAgICBpZiAob2JqLm1peGlucykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciB6ID0gMDsgeiA8IG9iai5taXhpbnMubGVuZ3RoOyB6KyspIHtcclxuICAgICAgICAgICAgICAgICRBUlguaW5oZXJpdChGLCAkQVJYLl9taXhpbnNbb2JqLm1peGluc1t6XV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkQVJYLl9yZXBvc2l0b3J5W25hbWVdID0geyB0eXBlOiB0eXBlLCBwcm90bzogRiwgb2JqOiBvYmogfTtcclxuICAgIH1cclxufTtcclxuXHJcbi8vIEV4dGVuZFxyXG4kQVJYLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGV4dGVuZGVkID0ge307XHJcbiAgICB2YXIgZGVlcCA9IGZhbHNlO1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcblxyXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudHNbMF0pID09PSAnW29iamVjdCBCb29sZWFuXScpIHtcclxuICAgICAgICBkZWVwID0gYXJndW1lbnRzWzBdO1xyXG4gICAgICAgIGkrKztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbWVyZ2UgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xyXG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWVwICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmpbcHJvcF0pID09PSAnW29iamVjdCBPYmplY3RdJykgZXh0ZW5kZWRbcHJvcF0gPSAkQVJYLmV4dGVuZCh0cnVlLCBleHRlbmRlZFtwcm9wXSwgb2JqW3Byb3BdKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgZXh0ZW5kZWRbcHJvcF0gPSBvYmpbcHJvcF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgb2JqID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIG1lcmdlKG9iaik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGV4dGVuZGVkO1xyXG59O1xyXG5cclxuLy8gRXJyb3JcclxuJEFSWC5lcnJvciA9IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xyXG4gICAgdGhyb3cgZXhjZXB0aW9uO1xyXG59O1xyXG5cclxuLy8gSW5oZXJpdFxyXG4kQVJYLmluaGVyaXQgPSBmdW5jdGlvbihjdXJyZW50LCBwYXJlbnQpIHtcclxuICAgIHZhciBGID0gZnVuY3Rpb24oKSB7fTtcclxuICAgIEYucHJvdG90eXBlID0gcGFyZW50O1xyXG4gICAgdmFyIGYgPSBuZXcgRigpO1xyXG5cclxuICAgIGZvciAodmFyIHByb3AgaW4gY3VycmVudC5wcm90b3R5cGUpIHtcclxuICAgICAgICBpZiAoY3VycmVudC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhwcm9wKSkgZi5fX2RlZmluZUdldHRlcl9fKHByb3AsIGN1cnJlbnQucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18ocHJvcCkpO1xyXG4gICAgICAgIGVsc2UgZltwcm9wXSA9IGN1cnJlbnQucHJvdG90eXBlW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIGN1cnJlbnQucHJvdG90eXBlID0gZjtcclxuICAgIGN1cnJlbnQucHJvdG90eXBlLnN1cGVyID0gcGFyZW50O1xyXG5cclxuICAgIHJldHVybiBjdXJyZW50O1xyXG59O1xyXG5cclxuLy8gTGFuZ1xyXG4kQVJYLmFkZExhbmcgPSBmdW5jdGlvbihsYW5nLCBvYmopIHtcclxuICAgIGlmICh0eXBlb2YgJEFSWC5sYW5nW2xhbmddID09PSAndW5kZWZpbmVkJykgJEFSWC5sYW5nW2xhbmddID0ge307XHJcbiAgICAkQVJYLmxhbmdbbGFuZ10gPSAkQVJYLmV4dGVuZCh0cnVlLCAkQVJYLmxhbmdbbGFuZ10sIG9iaik7XHJcbn07XHJcblxyXG5BcnRpY2xlRWRpdG9yLm9wdHMgPSB7XHJcbiAgICBwbHVnaW5zOiBbXSxcclxuICAgIGNvbnRlbnQ6IGZhbHNlLFxyXG4gICAgcGxhY2Vob2xkZXI6IGZhbHNlLFxyXG4gICAgY3NzOiBmYWxzZSxcclxuICAgIGN1c3RvbToge1xyXG4gICAgICAgIGNzczogZmFsc2UsXHJcbiAgICAgICAganM6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgZWRpdG9yOiB7XHJcbiAgICAgICAgY2xhc3NuYW1lOiAnZW50cnknLFxyXG4gICAgICAgIGZvY3VzOiBmYWxzZSxcclxuICAgICAgICBzeW5jOiB0cnVlLFxyXG4gICAgICAgIGRyb3A6IHRydWUsXHJcbiAgICAgICAgbGFuZzogJ2VuJyxcclxuICAgICAgICBhZGQ6ICd0b3AnLFxyXG4gICAgICAgIHBhZGRpbmc6IHRydWUsXHJcbiAgICAgICAgbWFya3VwOiAncGFyYWdyYXBoJyxcclxuICAgICAgICBtb2JpbGU6IDQwMCxcclxuICAgICAgICBzY3JvbGxUYXJnZXQ6IHdpbmRvdyxcclxuICAgICAgICBkaXJlY3Rpb246ICdsdHInLFxyXG4gICAgICAgIHNwZWxsY2hlY2s6IHRydWUsXHJcbiAgICAgICAgZ3JhbW1hcmx5OiBmYWxzZSxcclxuICAgICAgICBub3RyYW5zbGF0ZTogZmFsc2UsXHJcbiAgICAgICAgbWluSGVpZ2h0OiAnMTAwcHgnLCAvLyBzdHJpbmcsICc1MDBweCdcclxuICAgICAgICBtYXhIZWlnaHQ6IGZhbHNlLCAvLyBzdHJpbmcsICc1MDBweCdcclxuICAgICAgICBkb2N0eXBlOiAnPCFkb2N0eXBlIGh0bWw+J1xyXG4gICAgfSxcclxuICAgIHNlbGVjdGlvbjoge1xyXG4gICAgICAgIG11bHRpcGxlOiB0cnVlLFxyXG4gICAgfSxcclxuICAgIGNvbnRyb2w6IHRydWUsXHJcbiAgICBzb3VyY2U6IHRydWUsXHJcbiAgICBpbWFnZToge1xyXG4gICAgICAgIHN0YXRlczogdHJ1ZSxcclxuICAgICAgICB1cGxvYWQ6IGZhbHNlLFxyXG4gICAgICAgIHVybDogdHJ1ZSxcclxuICAgICAgICBzZWxlY3Q6IGZhbHNlLFxyXG4gICAgICAgIG5hbWU6ICdmaWxlJyxcclxuICAgICAgICBkYXRhOiBmYWxzZSxcclxuICAgICAgICBkcm9wOiB0cnVlLFxyXG4gICAgICAgIG11bHRpcGxlOiB0cnVlLFxyXG4gICAgICAgIGNsaXBib2FyZDogdHJ1ZSxcclxuICAgICAgICB0eXBlczogWydpbWFnZS8qJ10sXHJcbiAgICAgICAgdGFnOiAnZmlndXJlJywgLy8gcCwgZGl2LCBmaWd1cmVcclxuICAgICAgICBuZXd0YWI6IGZhbHNlLFxyXG4gICAgICAgIGxpbms6IHRydWVcclxuICAgIH0sXHJcbiAgICBjbGFzc2VzOiBmYWxzZSxcclxuICAgIGNvZGVtaXJyb3JTcmM6IGZhbHNlLFxyXG4gICAgY29kZW1pcnJvcjogZmFsc2UsXHJcbiAgICBzdGF0ZToge1xyXG4gICAgICAgIGxpbWl0OiAxMDBcclxuICAgIH0sXHJcbiAgICBwYXRoOiB7XHJcbiAgICAgICAgdGl0bGU6ICcjIyBlZGl0b3IudGl0bGUgIyMnLFxyXG4gICAgICAgIHN0aWNreTogdHJ1ZSxcclxuICAgICAgICBzdGlja3lNaW5IZWlnaHQ6IDIwMCwgLy8gcGl4ZWxzXHJcbiAgICAgICAgc3RpY2t5VG9wT2Zmc2V0OiAwIC8vIG51bWJlclxyXG4gICAgfSxcclxuICAgIGF1dG9zYXZlOiB7XHJcbiAgICAgICAgdXJsOiBmYWxzZSxcclxuICAgICAgICBuYW1lOiBmYWxzZSxcclxuICAgICAgICBkYXRhOiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHBhc3RlOiB7XHJcbiAgICAgICAgY2xlYW46IHRydWUsXHJcbiAgICAgICAgYXV0b2xpbms6IHRydWUsXHJcbiAgICAgICAgcGFyYWdyYXBoaXplOiB0cnVlLFxyXG4gICAgICAgIHBsYWludGV4dDogZmFsc2UsXHJcbiAgICAgICAgbGlua1RhcmdldDogZmFsc2UsXHJcbiAgICAgICAgaW1hZ2VzOiB0cnVlLFxyXG4gICAgICAgIGxpbmtzOiB0cnVlLFxyXG4gICAgICAgIGtlZXBTdHlsZTogW10sXHJcbiAgICAgICAga2VlcENsYXNzOiBbXSxcclxuICAgICAgICBrZWVwQXR0cnM6IFsndGQnLCAndGgnXSxcclxuICAgICAgICBmb3JtVGFnczogWydmb3JtJywgJ2lucHV0JywgJ2J1dHRvbicsICdzZWxlY3QnLCAndGV4dGFyZWEnLCAnbGVnZW5kJywgJ2ZpZWxkc2V0J10sXHJcbiAgICAgICAgYmxvY2tUYWdzOiBbJ3ByZScsICdkaXYnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAndGFibGUnLCAndGJvZHknLCAndGhlYWQnLCAndGZvb3QnLCAndGgnLCAndHInLCAndGQnLCAndWwnLCAnb2wnLCAnbGknLCAnYmxvY2txdW90ZScsICdwJywgJ2hyJywgJ2ZpZ3VyZScsICdpZnJhbWUnLCAnZmlnY2FwdGlvbicsICdhZGRyZXNzJywgJ3NlY3Rpb24nLCAnaGVhZGVyJywgJ2Zvb3RlcicsICdhc2lkZScsICdhcnRpY2xlJ10sXHJcbiAgICAgICAgaW5saW5lVGFnczogWydhJywgJ3N2ZycsICdpbWcnLCAnYnInLCAnc3Ryb25nJywgJ2lucycsICdjb2RlJywgJ2RlbCcsICdzcGFuJywgJ3NhbXAnLCAna2JkJywgJ3N1cCcsICdzdWInLCAnbWFyaycsICd2YXInLCAnY2l0ZScsICdzbWFsbCcsICdiJywgJ3UnLCAnZW0nLCAnaScsICdhYmJyJ11cclxuICAgIH0sXHJcbiAgICBjbGVhbjoge1xyXG4gICAgICAgIGNvbW1lbnRzOiBmYWxzZSxcclxuICAgICAgICBlbnRlcjogdHJ1ZSxcclxuICAgICAgICBlbnRlcmlubGluZTogZmFsc2VcclxuICAgIH0sXHJcbiAgICB0YWI6IHtcclxuICAgICAgICBrZXk6IHRydWUsXHJcbiAgICAgICAgc3BhY2VzOiBmYWxzZSAvLyB0cnVlIG9yIG51bWJlciBvZiBzcGFjZXNcclxuICAgIH0sXHJcbiAgICB0b3BiYXI6IHtcclxuICAgICAgICB1bmRvcmVkbzogZmFsc2UsXHJcbiAgICAgICAgc2hvcnRjdXRzOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgdG9vbGJhcjoge1xyXG4gICAgICAgIHN0aWNreTogdHJ1ZSxcclxuICAgICAgICBzdGlja3lNaW5IZWlnaHQ6IDIwMCwgLy8gcGl4ZWxzXHJcbiAgICAgICAgc3RpY2t5VG9wT2Zmc2V0OiAwIC8vIG51bWJlclxyXG4gICAgfSxcclxuICAgIGJ1dHRvbnM6IHtcclxuICAgICAgICBlZGl0b3I6IHtcclxuICAgICAgICAgICAgYWRkOiB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWRkICMjJyB9LFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogeyB0aXRsZTogJyMjIGJ1dHRvbnMudGVtcGxhdGVzICMjJywgY29tbWFuZDogJ3RlbXBsYXRlLnBvcHVwJywgb2JzZXJ2ZXI6ICd0ZW1wbGF0ZS5vYnNlcnZlJyB9LFxyXG4gICAgICAgICAgICBtb2JpbGU6IHsgdGl0bGU6ICcjIyBidXR0b25zLm1vYmlsZS12aWV3ICMjJywgY29tbWFuZDogJ2VkaXRvci50b2dnbGVWaWV3JyB9LFxyXG4gICAgICAgICAgICBodG1sOiB7IHRpdGxlOiAnIyMgYnV0dG9ucy5odG1sICMjJywgIGNvbW1hbmQ6ICdzb3VyY2UudG9nZ2xlJyB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b3BiYXI6IHtcclxuICAgICAgICAgICAgdW5kbzogeyB0aXRsZTogJyMjIGJ1dHRvbnMudW5kbyAjIycsIGNvbW1hbmQ6ICdidWZmZXIudW5kbycgfSxcclxuICAgICAgICAgICAgcmVkbzogeyB0aXRsZTogJyMjIGJ1dHRvbnMucmVkbyAjIycsIGNvbW1hbmQ6ICdidWZmZXIucmVkbycgfSxcclxuICAgICAgICAgICAgc2hvcnRjdXQ6IHsgdGl0bGU6ICcjIyBidXR0b25zLnNob3J0Y3V0cyAjIycsIG9ic2VydmVyOiAnc2hvcnRjdXQub2JzZXJ2ZScsIGNvbW1hbmQ6ICdzaG9ydGN1dC5wb3B1cCcgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXhjZXB0OiBmYWxzZSxcclxuICAgICAgICBhZGQ6IGZhbHNlLFxyXG4gICAgICAgIHRhZ3M6IHtcclxuICAgICAgICAgICAgJ2InOiBbJ2JvbGQnXSxcclxuICAgICAgICAgICAgJ3N0cm9uZyc6IFsnYm9sZCddLFxyXG4gICAgICAgICAgICAnaSc6IFsnaXRhbGljJ10sXHJcbiAgICAgICAgICAgICdlbSc6IFsnaXRhbGljJ10sXHJcbiAgICAgICAgICAgICdkZWwnOiBbJ2RlbGV0ZWQnXSxcclxuICAgICAgICAgICAgJ2EnOiBbJ2xpbmsnXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdHlwZXM6IGZhbHNlLFxyXG4gICAgICAgIGhpZGRlbjoge31cclxuICAgIH0sXHJcbiAgICBjYXJkOiB7XHJcbiAgICAgICAgY2xhc3NuYW1lOiAnY2FyZCcsXHJcbiAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwiY2FyZFwiPjxkaXYgY2xhc3M9XCJjYXJkLWhlYWRcIj48aDM+Q2FyZCB0aXRsZTwvaDM+PC9kaXY+PGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPjxwPkNhcmQgYm9keTwvcD48L2Rpdj48L2Rpdj4nXHJcbiAgICB9LFxyXG4gICAgdGV4dDoge1xyXG4gICAgICAgIGNsYXNzbmFtZTogJ2FyeC10ZXh0J1xyXG4gICAgfSxcclxuICAgIG5vbmVkaXRhYmxlOiB7XHJcbiAgICAgICAgY2xhc3NuYW1lOiAnbm9uZWRpdGFibGUnXHJcbiAgICB9LFxyXG4gICAgZW1iZWQ6IHtcclxuICAgICAgICByZXNwb25zaXZlOiAnZW1iZWQtcmVzcG9uc2l2ZSdcclxuICAgIH0sXHJcbiAgICBjb2RlOiB7XHJcbiAgICAgICAgdGVtcGxhdGU6ICc8cHJlPjwvcHJlPicsXHJcbiAgICAgICAgc3BhY2VzOiA0IC8vIG9yIGZhbHNlXHJcbiAgICB9LFxyXG4gICAgbGluZTogdHJ1ZSxcclxuICAgIGxheWVyOiB7XHJcbiAgICAgICAgdGVtcGxhdGU6ICc8ZGl2PjwvZGl2PidcclxuICAgIH0sXHJcbiAgICB0YWJsZToge1xyXG4gICAgICAgIHRlbXBsYXRlOiAnPHRhYmxlPjx0cj48dGQ+PC90ZD48dGQ+PC90ZD48L3RyPjx0cj48dGQ+PC90ZD48dGQ+PC90ZD48L3RyPjwvdGFibGU+J1xyXG4gICAgfSxcclxuICAgIHF1b3RlOiB7XHJcbiAgICAgICAgdGVtcGxhdGU6ICc8YmxvY2txdW90ZT48cD5RdW90ZS4uLjwvcD48cD48Y2l0ZT5BdXRob3IgQXR0cmlidXRpb248L2NpdGU+PC9wPjwvYmxvY2txdW90ZT4nXHJcbiAgICB9LFxyXG4gICAgc25pcHBldHM6IGZhbHNlLFxyXG4gICAgdGVtcGxhdGVzOiBmYWxzZSxcclxuICAgIGdyaWQ6IHtcclxuICAgICAgICBjbGFzc25hbWU6ICdncmlkJyxcclxuICAgICAgICBjbGFzc2VzOiAnJyxcclxuICAgICAgICBvdmVybGF5OiB0cnVlLFxyXG4gICAgICAgIG9mZnNldDoge1xyXG4gICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICByaWdodDogMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29sdW1uczogMTIsXHJcbiAgICAgICAgZ3V0dGVyOiAnMS4yNXJlbScsXHJcbiAgICAgICAgcGF0dGVybnM6ICB7XHJcbiAgICAgICAgICAgICc2fDYnOiAnY29sdW1uIGNvbHVtbi02fGNvbHVtbiBjb2x1bW4tNicsXHJcbiAgICAgICAgICAgICc0fDR8NCc6ICdjb2x1bW4gY29sdW1uLTR8Y29sdW1uIGNvbHVtbi00fGNvbHVtbiBjb2x1bW4tNCcsXHJcbiAgICAgICAgICAgICczfDN8M3wzJzogJ2NvbHVtbiBjb2x1bW4tM3xjb2x1bW4gY29sdW1uLTN8Y29sdW1uIGNvbHVtbi0zfGNvbHVtbiBjb2x1bW4tMycsXHJcbiAgICAgICAgICAgICcyfDJ8MnwyfDJ8Mic6ICdjb2x1bW4gY29sdW1uLTJ8Y29sdW1uIGNvbHVtbi0yfGNvbHVtbiBjb2x1bW4tMnxjb2x1bW4gY29sdW1uLTJ8Y29sdW1uIGNvbHVtbi0yfGNvbHVtbiBjb2x1bW4tMicsXHJcbiAgICAgICAgICAgICczfDZ8Myc6ICdjb2x1bW4gY29sdW1uLTN8Y29sdW1uIGNvbHVtbi02fGNvbHVtbiBjb2x1bW4tMycsXHJcbiAgICAgICAgICAgICcyfDh8Mic6ICdjb2x1bW4gY29sdW1uLTJ8Y29sdW1uIGNvbHVtbi04fGNvbHVtbiBjb2x1bW4tMicsXHJcbiAgICAgICAgICAgICc1fDcnOiAnY29sdW1uIGNvbHVtbi01fGNvbHVtbiBjb2x1bW4tNycsXHJcbiAgICAgICAgICAgICc3fDUnOiAnY29sdW1uIGNvbHVtbi03fGNvbHVtbiBjb2x1bW4tNScsXHJcbiAgICAgICAgICAgICc0fDgnOiAnY29sdW1uIGNvbHVtbi00fGNvbHVtbiBjb2x1bW4tOCcsXHJcbiAgICAgICAgICAgICc4fDQnOiAnY29sdW1uIGNvbHVtbi04fGNvbHVtbiBjb2x1bW4tNCcsXHJcbiAgICAgICAgICAgICczfDknOiAnY29sdW1uIGNvbHVtbi0zfGNvbHVtbiBjb2x1bW4tOScsXHJcbiAgICAgICAgICAgICc5fDMnOiAnY29sdW1uIGNvbHVtbi05fGNvbHVtbiBjb2x1bW4tMycsXHJcbiAgICAgICAgICAgICcyfDEwJzogJ2NvbHVtbiBjb2x1bW4tMnxjb2x1bW4gY29sdW1uLTEwJyxcclxuICAgICAgICAgICAgJzEwfDInOiAnY29sdW1uIGNvbHVtbi0xMHxjb2x1bW4gY29sdW1uLTInLFxyXG4gICAgICAgICAgICAnMTInOiAnY29sdW1uIGNvbHVtbi0xMidcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbGluazoge1xyXG4gICAgICAgIHNpemU6IDMwLFxyXG4gICAgICAgIG5vZm9sbG93OiBmYWxzZSxcclxuICAgICAgICB0YXJnZXQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgYWRkYmFyOiBbJ3BhcmFncmFwaCcsICdpbWFnZScsICdlbWJlZCcsICdsaW5lJywgJ3RhYmxlJywgJ3NuaXBwZXQnLCAncXVvdGUnLCAnY29kZScsICdncmlkJywgJ2xheWVyJ10sIC8vIHRleHQsIGNhcmRcclxuICAgIGFkZGJhckFkZDogW10sXHJcbiAgICBhZGRiYXJIaWRlOiBbXSxcclxuICAgIGZvcm1hdDogWydwJywgJ2gxJywgJ2gyJywgJ2gzJywgJ3VsJywgJ29sJ10sIC8vIGg0LCBoNSwgaDYsICBkbCwgYWRkcmVzcywgZGl2ICh0ZXh0KVxyXG4gICAgb3V0c2V0OiB7XHJcbiAgICAgICAgbm9uZTogJ25vbmUnLFxyXG4gICAgICAgIGxlZnQ6ICdvdXRzZXQtbGVmdCcsXHJcbiAgICAgICAgYm90aDogJ291dHNldC1ib3RoJyxcclxuICAgICAgICByaWdodDogJ291dHNldC1yaWdodCdcclxuICAgIH0sXHJcbiAgICBhbGlnbjoge1xyXG4gICAgICAgIGxlZnQ6ICdhbGlnbi1sZWZ0JyxcclxuICAgICAgICBjZW50ZXI6ICdhbGlnbi1jZW50ZXInLFxyXG4gICAgICAgIHJpZ2h0OiAnYWxpZ24tcmlnaHQnLFxyXG4gICAgICAgIGp1c3RpZnk6ICdhbGlnbi1qdXN0aWZ5J1xyXG4gICAgfSxcclxuICAgIHZhbGlnbjoge1xyXG4gICAgICAgIG5vbmU6ICdub25lJyxcclxuICAgICAgICB0b3A6ICd2YWxpZ24tdG9wJyxcclxuICAgICAgICBtaWRkbGU6ICd2YWxpZ24tbWlkZGxlJyxcclxuICAgICAgICBib3R0b206ICd2YWxpZ24tYm90dG9tJ1xyXG4gICAgfSxcclxuICAgIHNob3J0Y3V0c0Jhc2U6IHtcclxuICAgICAgICAnbWV0YSt6JzogJyMjIHNob3J0Y3V0cy5tZXRhLXogIyMnLFxyXG4gICAgICAgICdtZXRhK3NoaWZ0K3onOiAnIyMgc2hvcnRjdXRzLm1ldGEtc2hpZnQteiAjIycsXHJcbiAgICAgICAgJ21ldGErYSc6ICcjIyBzaG9ydGN1dHMubWV0YS1hICMjJyxcclxuICAgICAgICAnbWV0YStzaGlmdCthJzogJyMjIHNob3J0Y3V0cy5tZXRhLXNoaWZ0LWEgIyMnLFxyXG4gICAgICAgICdtZXRhK2NsaWNrJzogJyMjIHNob3J0Y3V0cy5tZXRhLWNsaWNrICMjJ1xyXG4gICAgfSxcclxuICAgIHNob3J0Y3V0czoge1xyXG4gICAgICAgICdjdHJsK3NoaWZ0K2QsIG1ldGErc2hpZnQrZCc6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBzaG9ydGN1dHMubWV0YS1zaGlmdC1kICMjJyxcclxuICAgICAgICAgICAgbmFtZTogJ21ldGErc2hpZnQrZCcsXHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdibG9jay5kdXBsaWNhdGUnXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY3RybCtzaGlmdCt1cCwgbWV0YStzaGlmdCt1cCc6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBzaG9ydGN1dHMubWV0YS1zaGlmdC11cCAjIycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdtZXRhK3NoaWZ0KyZ1YXJyOycsXHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdibG9jay5tb3ZlVXAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY3RybCtzaGlmdCtkb3duLCBtZXRhK3NoaWZ0K2Rvd24nOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgc2hvcnRjdXRzLm1ldGEtc2hpZnQtZG93biAjIycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdtZXRhK3NoaWZ0KyZkYXJyOycsXHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdibG9jay5tb3ZlRG93bidcclxuICAgICAgICB9LFxyXG4gICAgICAgICdjdHJsK3NoaWZ0K20sIG1ldGErc2hpZnQrbSc6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBzaG9ydGN1dHMubWV0YS1zaGlmdC1tICMjJyxcclxuICAgICAgICAgICAgbmFtZTogJ21ldGErc2hpZnQrbScsXHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdpbmxpbmUucmVtb3ZlRm9ybWF0J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2N0cmwrYiwgbWV0YStiJzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLWIgIyMnLFxyXG4gICAgICAgICAgICBuYW1lOiAnbWV0YStiJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2lubGluZS5zZXQnLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgdGFnOiAnYicgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2N0cmwraSwgbWV0YStpJzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLWkgIyMnLFxyXG4gICAgICAgICAgICBuYW1lOiAnbWV0YStpJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2lubGluZS5zZXQnLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgdGFnOiAnaScgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2N0cmwrdSwgbWV0YSt1Jzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLXUgIyMnLFxyXG4gICAgICAgICAgICBuYW1lOiAnbWV0YSt1JyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2lubGluZS5zZXQnLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgdGFnOiAndScgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2N0cmwraCwgbWV0YStoJzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLWggIyMnLFxyXG4gICAgICAgICAgICBuYW1lOiAnbWV0YStoJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2lubGluZS5zZXQnLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgdGFnOiAnc3VwJyB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY3RybCtsLCBtZXRhK2wnOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgc2hvcnRjdXRzLm1ldGEtbCAjIycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdtZXRhK2wnLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAnaW5saW5lLnNldCcsXHJcbiAgICAgICAgICAgIHBhcmFtczogeyB0YWc6ICdzdWInIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgICdjdHJsK2FsdCswLCBtZXRhK2FsdCswJzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLWFsdC0wICMjJyxcclxuICAgICAgICAgICAgbmFtZTogJ21ldGErYWx0KzAnLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAnYmxvY2suZm9ybWF0JyxcclxuICAgICAgICAgICAgcGFyYW1zOiB7IHRhZzogJ3AnIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgICdjdHJsK2FsdCsxLCBtZXRhK2FsdCsxJzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLWFsdC0xICMjJyxcclxuICAgICAgICAgICAgbmFtZTogJ21ldGErYWx0KzEnLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAnYmxvY2suZm9ybWF0JyxcclxuICAgICAgICAgICAgcGFyYW1zOiB7IHRhZzogJ2gxJyB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY3RybCthbHQrMiwgbWV0YSthbHQrMic6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBzaG9ydGN1dHMubWV0YS1hbHQtMiAjIycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdtZXRhK2FsdCsyJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2Jsb2NrLmZvcm1hdCcsXHJcbiAgICAgICAgICAgIHBhcmFtczogeyB0YWc6ICdoMicgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2N0cmwrYWx0KzMsIG1ldGErYWx0KzMnOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgc2hvcnRjdXRzLm1ldGEtYWx0LTMgIyMnLFxyXG4gICAgICAgICAgICBuYW1lOiAnbWV0YSthbHQrMycsXHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdibG9jay5mb3JtYXQnLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgdGFnOiAnaDMnIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgICdjdHJsK2FsdCs0LCBtZXRhK2FsdCs0Jzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLWFsdC00ICMjJyxcclxuICAgICAgICAgICAgbmFtZTogJ21ldGErYWx0KzQnLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAnYmxvY2suZm9ybWF0JyxcclxuICAgICAgICAgICAgcGFyYW1zOiB7IHRhZzogJ2g0JyB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY3RybCthbHQrNSwgbWV0YSthbHQrNSc6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBzaG9ydGN1dHMubWV0YS1hbHQtNSAjIycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdtZXRhK2FsdCs1JyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2Jsb2NrLmZvcm1hdCcsXHJcbiAgICAgICAgICAgIHBhcmFtczogeyB0YWc6ICdoNScgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2N0cmwrYWx0KzYsIG1ldGErYWx0KzYnOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgc2hvcnRjdXRzLm1ldGEtYWx0LTYgIyMnLFxyXG4gICAgICAgICAgICBuYW1lOiAnbWV0YSthbHQrNicsXHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdibG9jay5mb3JtYXQnLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgdGFnOiAnaDYnIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgICdjdHJsK3NoaWZ0KzcsIG1ldGErc2hpZnQrNyc6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBzaG9ydGN1dHMubWV0YS1zaGlmdC03ICMjJyxcclxuICAgICAgICAgICAgbmFtZTogJ21ldGErc2hpZnQrNycsXHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdibG9jay5mb3JtYXQnLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgdGFnOiAnb2wnfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2N0cmwrc2hpZnQrOCwgbWV0YStzaGlmdCs4Jzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLXNoaWZ0LTggIyMnLFxyXG4gICAgICAgICAgICBuYW1lOiAnbWV0YStzaGlmdCs4JyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2Jsb2NrLmZvcm1hdCcsXHJcbiAgICAgICAgICAgIHBhcmFtczogeyB0YWc6ICd1bCcgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2N0cmwrXSwgbWV0YStdJzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLWluZGVudCAjIycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdtZXRhK10nLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAnbGlzdC5pbmRlbnQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICAnY3RybCtbLCBtZXRhK1snOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgc2hvcnRjdXRzLm1ldGEtb3V0ZGVudCAjIycsXHJcbiAgICAgICAgICAgIG5hbWU6ICdtZXRhK1snLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAnbGlzdC5vdXRkZW50J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgJ2N0cmwraywgbWV0YStrJzoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHNob3J0Y3V0cy5tZXRhLWsgIyMnLFxyXG4gICAgICAgICAgICBuYW1lOiAnbWV0YStrJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2xpbmsuZm9ybWF0J1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgbWFya2VyQ2hhcjogJ1xcdWZlZmYnLFxyXG4gICAgdGFnczoge1xyXG4gICAgICAgIGRlbmllZDogWydmb250JywgJ2h0bWwnLCAnaGVhZCcsICdsaW5rJywgJ3RpdGxlJywgJ2JvZHknLCAnbWV0YScsICdhcHBsZXQnLCAnbWFycXVlZSddLFxyXG4gICAgICAgIGluY29kZTogWychRE9DVFlQRScsICchZG9jdHlwZScsICdodG1sJywgJ2hlYWQnLCAnbGluaycsICd0aXRsZScsICdib2R5JywgJ21ldGEnLCAndGV4dGFyZWEnLCAnc3R5bGUnXSxcclxuICAgICAgICBmb3JtOiBbJ2Zvcm0nLCAnaW5wdXQnLCAnYnV0dG9uJywgJ3NlbGVjdCcsICd0ZXh0YXJlYScsICdsZWdlbmQnLCAnZmllbGRzZXQnXSxcclxuICAgICAgICBpbmxpbmU6IFsnYScsICdzdmcnLCAnc3BhbicsICdzdHJvbmcnLCAnc3RyaWtlJywgJ2InLCAndScsICdlbScsICdpJywgJ2NvZGUnLCAnZGVsJywgJ2lucycsICdzYW1wJywgJ2tiZCcsICdzdXAnLCAnc3ViJywgJ21hcmsnLCAndmFyJywgJ2NpdGUnLCAnc21hbGwnLCAnYWJiciddLFxyXG4gICAgICAgIGJsb2NrOiBbJ3ByZScsICdocicsICd1bCcsICdvbCcsICdsaScsICdwJywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgICdkbCcsICdkdCcsICdkZCcsICdkaXYnLCAndGFibGUnLCAndGJvZHknLCAndGhlYWQnLCAndGZvb3QnLCAndHInLCAndGgnLCAndGQnLCAnYmxvY2txdW90ZScsICdvdXRwdXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnYWRkcmVzcycsICdtYWluJywgJ3NlY3Rpb24nLCAnaGVhZGVyJywgJ2Zvb3RlcicsICdhc2lkZScsICdhcnRpY2xlJywgJ2lmcmFtZSddLFxyXG4gICAgICAgIHBhcnNlcjogWydwcmUnLCAnaHInLCAndWwnLCAnb2wnLCAnZGwnLCAncCcsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdkaXYnLCAndGFibGUnLCAnYWRkcmVzcycsICdibG9ja3F1b3RlJywgJ2ZpZ3VyZScsICdtYWluJywgJ3NlY3Rpb24nLCAnaGVhZGVyJywgJ2Zvb3RlcicsICdhc2lkZScsICdhcnRpY2xlJywgJ2lmcmFtZSddXHJcbiAgICB9LFxyXG4gICAgYnNtb2RhbDogZmFsc2UsXHJcbiAgICByZWdleDoge1xyXG4gICAgICAgIHlvdXR1YmU6IC9odHRwcz86XFwvXFwvKD86WzAtOUEtWi1dK1xcLik/KD86eW91dHVcXC5iZVxcL3x5b3V0dWJlXFwuY29tXFxTKlteXFx3LVxcc10pKFtcXHctXXsxMX0pKD89W15cXHctXXwkKSg/IVs/PSYrJVxcdy4tXSooPzpbJ1wiXVtePD5dKj58PFxcL2E+KSlbPz0mKyVcXHcuLV0qL2dpLFxyXG4gICAgICAgIHZpbWVvOiAvKGh0dHB8aHR0cHMpPzpcXC9cXC8oPzp3d3cufHBsYXllci4pP3ZpbWVvLmNvbVxcLyg/OmNoYW5uZWxzXFwvKD86XFx3K1xcLyk/fGdyb3Vwc1xcLyg/OlteL10qKVxcL3ZpZGVvc1xcL3xhbGJ1bVxcLyg/OlxcZCspXFwvdmlkZW9cXC98dmlkZW9cXC98KShcXGQrKSg/OlxcL1thLXpBLVowLTlfLV0rKT8vZ2ksXHJcbiAgICAgICAgaW1hZ2V1cmw6IC8oKGh0dHBzP3x3d3cpW15cXHNdK1xcLikoanBlP2d8cG5nfGdpZikoXFw/W15cXHMtXSspPy9naSxcclxuICAgICAgICB1cmw6IC9odHRwcz86XFwvXFwvKHd3d1xcLik/Wy1hLXpBLVowLTlAOiUuXyt+Iz1dezEsMjU2fVxcLlthLXpBLVowLTkoKV17MSw2fVxcYihbLWEtekEtWjAtOSgpQDolXysufiM/Ji8vPV0qKS9naVxyXG4gICAgfSxcclxuICAgIGFkZGJhckV4dGVuZDoge30sXHJcbiAgICBhZGRiYXJPYmo6IHtcclxuICAgICAgICBwYXJhZ3JhcGg6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBibG9ja3MucGFyYWdyYXBoICMjJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2Jsb2NrLmFkZCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgYmxvY2tzLmltYWdlICMjJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2ltYWdlLnBvcHVwJyxcclxuICAgICAgICAgICAgb2JzZXJ2ZXI6ICdpbWFnZS5vYnNlcnZlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW1iZWQ6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBibG9ja3MuZW1iZWQgIyMnLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAnZW1iZWQucG9wdXAnLFxyXG4gICAgICAgICAgICBvYnNlcnZlcjogJ2VtYmVkLm9ic2VydmUnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaW5lOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgYmxvY2tzLmxpbmUgIyMnLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAnYmxvY2suYWRkJyxcclxuICAgICAgICAgICAgb2JzZXJ2ZXI6ICdibG9jay5vYnNlcnZlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGFibGU6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBibG9ja3MudGFibGUgIyMnLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAndGFibGUuYWRkJyxcclxuICAgICAgICAgICAgb2JzZXJ2ZXI6ICd0YWJsZS5vYnNlcnZlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc25pcHBldDoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIGJsb2Nrcy5zbmlwcGV0ICMjJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ3NuaXBwZXQucG9wdXAnLFxyXG4gICAgICAgICAgICBvYnNlcnZlcjogJ3NuaXBwZXQub2JzZXJ2ZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHF1b3RlOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgYmxvY2tzLnF1b3RlICMjJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2Jsb2NrLmFkZCcsXHJcbiAgICAgICAgICAgIG9ic2VydmVyOiAnYmxvY2sub2JzZXJ2ZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBibG9ja3MudGV4dCAjIycsXHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdibG9jay5hZGQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb2RlOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgYmxvY2tzLmNvZGUgIyMnLFxyXG4gICAgICAgICAgICBjb21tYW5kOiAnYmxvY2suYWRkJyxcclxuICAgICAgICAgICAgb2JzZXJ2ZXI6ICdibG9jay5vYnNlcnZlJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIGJsb2Nrcy5ncmlkICMjJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2dyaWQucG9wdXAnLFxyXG4gICAgICAgICAgICBvYnNlcnZlcjogJ2dyaWQub2JzZXJ2ZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxheWVyOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgYmxvY2tzLmxheWVyICMjJyxcclxuICAgICAgICAgICAgY29tbWFuZDogJ2Jsb2NrLmFkZCcsXHJcbiAgICAgICAgICAgIG9ic2VydmVyOiAnYmxvY2sub2JzZXJ2ZSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNhcmQ6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBibG9ja3MuY2FyZCAjIycsXHJcbiAgICAgICAgICAgIGNvbW1hbmQ6ICdibG9jay5hZGQnXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG5lc3RlZDogW10sXHJcbiAgICBwYXJzZXI6IHt9LFxyXG4gICAgcGFyc2VyVGFnczogW10sXHJcbiAgICBmb3JtYXRPYmo6IHtcclxuICAgICAgICBwOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgYmxvY2tzLnBhcmFncmFwaCAjIycsXHJcbiAgICAgICAgICAgIHR5cGU6ICdwYXJhZ3JhcGgnLFxyXG4gICAgICAgICAgICBzaG9ydGN1dDogJ0N0cmwrQWx0KzAnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXY6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBibG9ja3MudGV4dCAjIycsXHJcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaDE6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICc8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogMjBweDsgZm9udC13ZWlnaHQ6IGJvbGQ7XCI+IyMgaGVhZGluZ3MuaDEgIyM8L3NwYW4+JyxcclxuICAgICAgICAgICAgdHlwZTogJ2hlYWRpbmcnLFxyXG4gICAgICAgICAgICBzaG9ydGN1dDogJ0N0cmwrQWx0KzEnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoMjoge1xyXG4gICAgICAgICAgICB0aXRsZTogJzxzcGFuIHN0eWxlPVwiZm9udC1zaXplOiAxNnB4OyBmb250LXdlaWdodDogYm9sZDtcIj4jIyBoZWFkaW5ncy5oMiAjIzwvc3Bhbj4nLFxyXG4gICAgICAgICAgICB0eXBlOiAnaGVhZGluZycsXHJcbiAgICAgICAgICAgIHNob3J0Y3V0OiAnQ3RybCtBbHQrMidcclxuICAgICAgICB9LFxyXG4gICAgICAgIGgzOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnPHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogYm9sZDtcIj4jIyBoZWFkaW5ncy5oMyAjIzwvc3Bhbj4nLFxyXG4gICAgICAgICAgICB0eXBlOiAnaGVhZGluZycsXHJcbiAgICAgICAgICAgIHNob3J0Y3V0OiAnQ3RybCtBbHQrMydcclxuICAgICAgICB9LFxyXG4gICAgICAgIGg0OiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnPHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogYm9sZDtcIj4jIyBoZWFkaW5ncy5oNCAjIzwvc3Bhbj4nLFxyXG4gICAgICAgICAgICB0eXBlOiAnaGVhZGluZycsXHJcbiAgICAgICAgICAgIHNob3J0Y3V0OiAnQ3RybCtBbHQrNCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGg1OiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnPHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogYm9sZDtcIj4jIyBoZWFkaW5ncy5oNSAjIzwvc3Bhbj4nLFxyXG4gICAgICAgICAgICB0eXBlOiAnaGVhZGluZycsXHJcbiAgICAgICAgICAgIHNob3J0Y3V0OiAnQ3RybCtBbHQrNSdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGg2OiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnPHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogYm9sZDtcIj4jIyBoZWFkaW5ncy5oNiAjIzwvc3Bhbj4nLFxyXG4gICAgICAgICAgICB0eXBlOiAnaGVhZGluZycsXHJcbiAgICAgICAgICAgIHNob3J0Y3V0OiAnQ3RybCtBbHQrNidcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVsOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnJmJ1bGw7ICMjIGxpc3QudW5vcmRlcmVkLWxpc3QgIyMnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbGlzdCcsXHJcbiAgICAgICAgICAgIHNob3J0Y3V0OiAnQ3RybCtTaGlmdCs3J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb2w6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICcxLiAjIyBsaXN0Lm9yZGVyZWQtbGlzdCAjIycsXHJcbiAgICAgICAgICAgIHR5cGU6ICdsaXN0JyxcclxuICAgICAgICAgICAgc2hvcnRjdXQ6ICdDdHJsK1NoaWZ0KzgnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkbDoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIGJsb2Nrcy5kbGlzdCAjIycsXHJcbiAgICAgICAgICAgIHR5cGU6ICdkbGlzdCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZHJlc3M6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICc8ZW0+IyMgYmxvY2tzLmFkZHJlc3MgIyM8L2VtPicsXHJcbiAgICAgICAgICAgIHR5cGU6ICdhZGRyZXNzJ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuQXJ0aWNsZUVkaXRvci5sYW5nWydlbiddID0ge1xyXG4gICAgXCJhY2Nlc3NpYmlsaXR5XCI6IHtcclxuICAgICAgICBcImhlbHAtbGFiZWxcIjogXCJSaWNoIHRleHQgZWRpdG9yXCJcclxuICAgIH0sXHJcbiAgICBcImVkaXRvclwiOiB7XHJcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkFydGljbGVcIixcclxuICAgICAgICBcIm11bHRpcGxlXCI6IFwiTXVsdGlwbGVcIixcclxuICAgIH0sXHJcbiAgICBcInBsYWNlaG9sZGVyc1wiOiB7XHJcbiAgICAgICAgXCJmaWdjYXB0aW9uXCI6IFwiVHlwZSBjYXB0aW9uIChvcHRpb25hbClcIixcclxuICAgICAgICBcInRleHRcIjogXCJUeXBlIHNvbWV0aGluZy4uLlwiLFxyXG4gICAgICAgIFwiY29kZVwiOiBcIkVkaXQgdG8gYWRkIGNvZGUuLi5cIixcclxuICAgICAgICBcImxheWVyXCI6IFwiUHJlc3MgZW50ZXIgdG8gYWRkIGEgbmV3IHRleHQuLi5cIlxyXG4gICAgfSxcclxuICAgIFwicG9wdXBcIjoge1xyXG4gICAgICAgIFwibGlua1wiOiBcIkxpbmtcIixcclxuICAgICAgICBcImFkZFwiOiBcIkFkZFwiLFxyXG4gICAgICAgIFwiZ3JpZFwiOiBcIkdyaWRcIixcclxuICAgICAgICBcImJhY2tcIjogXCJCYWNrXCIsXHJcbiAgICAgICAgXCJpbWFnZVwiOiBcIkltYWdlXCIsXHJcbiAgICAgICAgXCJzbmlwcGV0c1wiOiBcIlNuaXBwZXRzXCIsXHJcbiAgICAgICAgXCJhZGQtaW1hZ2VcIjogXCJBZGQgSW1hZ2VcIlxyXG4gICAgfSxcclxuICAgIFwic2hvcnRjdXRzXCI6IHtcclxuICAgICAgICBcIm1ldGEtYVwiOiBcIlNlbGVjdCB0ZXh0IGluIHRoZSBibG9ja1wiLFxyXG4gICAgICAgIFwibWV0YS1zaGlmdC1hXCI6IFwiU2VsZWN0IGFsbCBibG9ja3NcIixcclxuICAgICAgICBcIm1ldGEtY2xpY2tcIjogXCJTZWxlY3QgbXVsdGlwbGUgYmxvY2tzXCIsXHJcbiAgICAgICAgXCJtZXRhLXpcIjogXCJVbmRvXCIsXHJcbiAgICAgICAgXCJtZXRhLXNoaWZ0LXpcIjogXCJSZWRvXCIsXHJcbiAgICAgICAgXCJtZXRhLXNoaWZ0LW1cIjogXCJSZW1vdmUgaW5saW5lIGZvcm1hdFwiLFxyXG4gICAgICAgIFwibWV0YS1iXCI6IFwiQm9sZFwiLFxyXG4gICAgICAgIFwibWV0YS1pXCI6IFwiSXRhbGljXCIsXHJcbiAgICAgICAgXCJtZXRhLXVcIjogXCJVbmRlcmxpbmVcIixcclxuICAgICAgICBcIm1ldGEtaFwiOiBcIlN1cGVyc2NyaXB0XCIsXHJcbiAgICAgICAgXCJtZXRhLWxcIjogXCJTdWJzY3JpcHRcIixcclxuICAgICAgICBcIm1ldGEta1wiOiBcIkxpbmtcIixcclxuICAgICAgICBcIm1ldGEtYWx0LTBcIjogXCJOb3JtYWwgdGV4dFwiLFxyXG4gICAgICAgIFwibWV0YS1hbHQtMVwiOiBcIkhlYWRpbmcgMVwiLFxyXG4gICAgICAgIFwibWV0YS1hbHQtMlwiOiBcIkhlYWRpbmcgMlwiLFxyXG4gICAgICAgIFwibWV0YS1hbHQtM1wiOiBcIkhlYWRpbmcgM1wiLFxyXG4gICAgICAgIFwibWV0YS1hbHQtNFwiOiBcIkhlYWRpbmcgNFwiLFxyXG4gICAgICAgIFwibWV0YS1hbHQtNVwiOiBcIkhlYWRpbmcgNVwiLFxyXG4gICAgICAgIFwibWV0YS1hbHQtNlwiOiBcIkhlYWRpbmcgNlwiLFxyXG4gICAgICAgIFwibWV0YS1zaGlmdC03XCI6IFwiT3JkZXJlZCBMaXN0XCIsXHJcbiAgICAgICAgXCJtZXRhLXNoaWZ0LThcIjogXCJVbm9yZGVyZWQgTGlzdFwiLFxyXG4gICAgICAgIFwibWV0YS1pbmRlbnRcIjogXCJJbmRlbnRcIixcclxuICAgICAgICBcIm1ldGEtb3V0ZGVudFwiOiBcIk91dGRlbnRcIixcclxuICAgICAgICBcIm1ldGEtc2hpZnQtYmFja3NwYWNlXCI6IFwiRGVsZXRlIGJsb2NrXCIsXHJcbiAgICAgICAgXCJtZXRhLXNoaWZ0LWRcIjogXCJEdXBsaWNhdGUgYmxvY2tcIixcclxuICAgICAgICBcIm1ldGEtc2hpZnQtdXBcIjogXCJNb3ZlIGxpbmUgdXBcIixcclxuICAgICAgICBcIm1ldGEtc2hpZnQtZG93blwiOiBcIk1vdmUgbGluZSBkb3duXCJcclxuICAgIH0sXHJcbiAgICBcImhlYWRpbmdzXCI6IHtcclxuICAgICAgICBcImgxXCI6IFwiTGFyZ2UgSGVhZGluZ1wiLFxyXG4gICAgICAgIFwiaDJcIjogXCJNZWRpdW0gSGVhZGluZ1wiLFxyXG4gICAgICAgIFwiaDNcIjogXCJTbWFsbCBIZWFkaW5nXCIsXHJcbiAgICAgICAgXCJoNFwiOiBcIkhlYWRpbmcgNFwiLFxyXG4gICAgICAgIFwiaDVcIjogXCJIZWFkaW5nIDVcIixcclxuICAgICAgICBcImg2XCI6IFwiSGVhZGluZyA2XCJcclxuICAgIH0sXHJcbiAgICBcImlubGluZVwiOiB7XHJcbiAgICAgICAgXCJib2xkXCI6IFwiQm9sZFwiLFxyXG4gICAgICAgIFwiaXRhbGljXCI6IFwiSXRhbGljXCIsXHJcbiAgICAgICAgXCJkZWxldGVkXCI6IFwiRGVsZXRlZFwiXHJcbiAgICB9LFxyXG4gICAgXCJsaXN0XCI6IHtcclxuICAgICAgICBcInVub3JkZXJlZC1saXN0XCI6IFwiVW5vcmRlcmVkIExpc3RcIixcclxuICAgICAgICBcIm9yZGVyZWQtbGlzdFwiOiBcIk9yZGVyZWQgTGlzdFwiLFxyXG4gICAgICAgIFwiaW5kZW50XCI6IFwiSW5kZW50XCIsXHJcbiAgICAgICAgXCJvdXRkZW50XCI6IFwiT3V0ZGVudFwiXHJcbiAgICB9LFxyXG4gICAgXCJsaW5rXCI6IHtcclxuICAgICAgICBcImxpbmtcIjogXCJMaW5rXCIsXHJcbiAgICAgICAgXCJlZGl0LWxpbmtcIjogXCJFZGl0IGxpbmtcIixcclxuICAgICAgICBcInVubGlua1wiOiBcIlVubGlua1wiLFxyXG4gICAgICAgIFwibGluay1pbi1uZXctdGFiXCI6IFwiT3BlbiBsaW5rIGluIG5ldyB0YWJcIixcclxuICAgICAgICBcInNhdmVcIjogXCJTYXZlXCIsXHJcbiAgICAgICAgXCJpbnNlcnRcIjogXCJJbnNlcnRcIixcclxuICAgICAgICBcImNhbmNlbFwiOiBcIkNhbmNlbFwiLFxyXG4gICAgICAgIFwidGV4dFwiOiBcIlRleHRcIixcclxuICAgICAgICBcInVybFwiOiBcIlVSTFwiXHJcbiAgICB9LFxyXG4gICAgXCJ0YWJsZVwiOiB7XHJcbiAgICAgICAgXCJ3aWR0aFwiOiBcIldpZHRoXCIsXHJcbiAgICAgICAgXCJub3dyYXBcIjogXCJOb3dyYXBcIixcclxuICAgICAgICBcInNhdmVcIjogXCJTYXZlXCIsXHJcbiAgICAgICAgXCJjYW5jZWxcIjogXCJDYW5jZWxcIixcclxuICAgICAgICBcInRhYmxlLWNlbGxcIjogXCJUYWJsZSBDZWxsXCIsXHJcbiAgICAgICAgXCJhZGQtaGVhZFwiOiBcIkFkZCBoZWFkXCIsXHJcbiAgICAgICAgXCJyZW1vdmUtaGVhZFwiOiBcIlJlbW92ZSBoZWFkXCIsXHJcbiAgICAgICAgXCJhZGQtcm93LWJlbG93XCI6IFwiQWRkIHJvdyBiZWxvd1wiLFxyXG4gICAgICAgIFwiYWRkLXJvdy1hYm92ZVwiOiBcIkFkZCByb3cgYWJvdmVcIixcclxuICAgICAgICBcInJlbW92ZS1yb3dcIjogXCJSZW1vdmUgcm93XCIsXHJcbiAgICAgICAgXCJhZGQtY29sdW1uLWFmdGVyXCI6IFwiQWRkIGNvbHVtbiBhZnRlclwiLFxyXG4gICAgICAgIFwiYWRkLWNvbHVtbi1iZWZvcmVcIjogXCJBZGQgY29sdW1uIGJlZm9yZVwiLFxyXG4gICAgICAgIFwicmVtb3ZlLWNvbHVtblwiOiBcIlJlbW92ZSBjb2x1bW5cIlxyXG4gICAgfSxcclxuICAgIFwiaW1hZ2VcIjoge1xyXG4gICAgICAgIFwib3JcIjogXCJvclwiLFxyXG4gICAgICAgIFwiYWx0LXRleHRcIjogXCJBbHQgVGV4dFwiLFxyXG4gICAgICAgIFwic2F2ZVwiOiBcIlNhdmVcIixcclxuICAgICAgICBcImxpbmtcIjogXCJMaW5rXCIsXHJcbiAgICAgICAgXCJkZWxldGVcIjogXCJEZWxldGVcIixcclxuICAgICAgICBcImNhbmNlbFwiOiBcIkNhbmNlbFwiLFxyXG4gICAgICAgIFwiaW5zZXJ0XCI6IFwiSW5zZXJ0XCIsXHJcbiAgICAgICAgXCJjYXB0aW9uXCI6IFwiQ2FwdGlvblwiLFxyXG4gICAgICAgIFwibGluay1pbi1uZXctdGFiXCI6IFwiT3BlbiBsaW5rIGluIG5ldyB0YWJcIixcclxuICAgICAgICBcInVybC1wbGFjZWhvbGRlclwiOiBcIlBhc3RlIHVybCBvZiBpbWFnZS4uLlwiLFxyXG4gICAgICAgIFwidXBsb2FkLW5ldy1wbGFjZWhvbGRlclwiOiBcIkRyYWcgdG8gdXBsb2FkIGEgbmV3IGltYWdlPGJyPm9yIGNsaWNrIHRvIHNlbGVjdFwiXHJcbiAgICB9LFxyXG4gICAgXCJjb2RlXCI6IHtcclxuICAgICAgICBcImNvZGVcIjogXCJDb2RlXCIsXHJcbiAgICAgICAgXCJpbnNlcnRcIjogXCJJbnNlcnRcIixcclxuICAgICAgICBcInNhdmVcIjogXCJTYXZlXCIsXHJcbiAgICAgICAgXCJjYW5jZWxcIjogXCJDYW5jZWxcIlxyXG4gICAgfSxcclxuICAgIFwiZW1iZWRcIjoge1xyXG4gICAgICAgIFwiZW1iZWRcIjogXCJFbWJlZFwiLFxyXG4gICAgICAgIFwiY2FwdGlvblwiOiBcIkNhcHRpb25cIixcclxuICAgICAgICBcImluc2VydFwiOiBcIkluc2VydFwiLFxyXG4gICAgICAgIFwic2F2ZVwiOiBcIlNhdmVcIixcclxuICAgICAgICBcImNhbmNlbFwiOiBcIkNhbmNlbFwiLFxyXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQYXN0ZSBhbnkgZW1iZWQvaHRtbCBjb2RlIG9yIGVudGVyIHRoZSB1cmwgKHZpbWVvIG9yIHlvdXR1YmUgdmlkZW8gb25seSlcIixcclxuICAgICAgICBcInJlc3BvbnNpdmUtdmlkZW9cIjogXCJSZXNwb25zaXZlIHZpZGVvXCJcclxuICAgIH0sXHJcbiAgICBcInVwbG9hZFwiOiB7XHJcbiAgICAgICAgXCJwbGFjZWhvbGRlclwiOiBcIkRyYWcgdG8gdXBsb2FkIDxicj5vciBjbGljayB0byBzZWxlY3RcIlxyXG4gICAgfSxcclxuICAgIFwidGVtcGxhdGVzXCI6IHtcclxuICAgICAgICBcInRlbXBsYXRlc1wiOiBcIlRlbXBsYXRlc1wiXHJcbiAgICB9LFxyXG4gICAgXCJzbmlwcGV0c1wiOiB7XHJcbiAgICAgICAgXCJzbmlwcGV0c1wiOiBcIlNuaXBwZXRzXCJcclxuICAgIH0sXHJcbiAgICBcImZvcm1cIjoge1xyXG4gICAgICAgIFwibGlua1wiOiBcIkxpbmtcIixcclxuICAgICAgICBcInVybFwiOiBcIlVybFwiLFxyXG4gICAgICAgIFwidGV4dFwiOiBcIlRleHRcIixcclxuICAgICAgICBcIm5hbWVcIjogXCJOYW1lXCIsXHJcbiAgICAgICAgXCJhbHQtdGV4dFwiOiBcIkFsdCBUZXh0XCIsXHJcbiAgICAgICAgXCJpbWFnZVwiOiBcIkltYWdlXCIsXHJcbiAgICAgICAgXCJ1cGxvYWRcIjogXCJVcGxvYWRcIixcclxuICAgICAgICBcImFsaWdubWVudFwiOiBcIkFsaWdubWVudFwiLFxyXG4gICAgICAgIFwib3V0c2V0XCI6IFwiT3V0c2V0XCIsXHJcbiAgICAgICAgXCJ2YWxpZ25cIjogXCJWYWxpZ25cIlxyXG4gICAgfSxcclxuICAgIFwiYnV0dG9uc1wiOiB7XHJcbiAgICAgICAgXCJtb2JpbGUtdmlld1wiOiBcIk1vYmlsZSBWaWV3XCIsXHJcbiAgICAgICAgXCJjYW5jZWxcIjogXCJDYW5jZWxcIixcclxuICAgICAgICBcImluc2VydFwiOiBcIkluc2VydFwiLFxyXG4gICAgICAgIFwidW5saW5rXCI6IFwiVW5saW5rXCIsXHJcbiAgICAgICAgXCJzYXZlXCI6IFwiU2F2ZVwiLFxyXG4gICAgICAgIFwiYWRkXCI6IFwiQWRkXCIsXHJcbiAgICAgICAgXCJ0cmFuc2Zvcm0tdG8tdGV4dFwiOiBcIlRyYW5zZm9ybSB0byB0ZXh0XCIsXHJcbiAgICAgICAgXCJhbGlnblwiOiBcIkFsaWdubWVudFwiLFxyXG4gICAgICAgIFwidmFsaWduXCI6IFwiVmFsaWduXCIsXHJcbiAgICAgICAgXCJvdXRzZXRcIjogXCJPdXRzZXRcIixcclxuICAgICAgICBcImluZGVudFwiOiBcIkluZGVudFwiLFxyXG4gICAgICAgIFwib3V0ZGVudFwiOiBcIk91dGRlbnRcIixcclxuICAgICAgICBcImhlYWRcIjogXCJIZWFkXCIsXHJcbiAgICAgICAgXCJyb3dcIjogXCJSb3dcIixcclxuICAgICAgICBcImNlbGxcIjogXCJDZWxsXCIsXHJcbiAgICAgICAgXCJodG1sXCI6IFwiSFRNTFwiLFxyXG4gICAgICAgIFwidGVtcGxhdGVzXCI6IFwiVGVtcGxhdGVzXCIsXHJcbiAgICAgICAgXCJzaG9ydGN1dHNcIjogXCJLZXlib2FyZCBTaG9ydGN1dHNcIixcclxuICAgICAgICBcImZvcm1hdFwiOiBcIkZvcm1hdFwiLFxyXG4gICAgICAgIFwiYm9sZFwiOiBcIkJvbGRcIixcclxuICAgICAgICBcIml0YWxpY1wiOiBcIkl0YWxpY1wiLFxyXG4gICAgICAgIFwiZGVsZXRlZFwiOiBcIkRlbGV0ZWRcIixcclxuICAgICAgICBcInVuZGVybGluZVwiOiBcIlVuZGVybGluZVwiLFxyXG4gICAgICAgIFwidGFibGVcIjogXCJUYWJsZVwiLFxyXG4gICAgICAgIFwibGlua1wiOiBcIkxpbmtcIixcclxuICAgICAgICBcInVuZG9cIjogXCJVbmRvXCIsXHJcbiAgICAgICAgXCJyZWRvXCI6IFwiUmVkb1wiLFxyXG4gICAgICAgIFwic3R5bGVcIjogXCJTdHlsZVwiLFxyXG4gICAgICAgIFwiY29uZmlnXCI6IFwiQ29uZmlnXCIsXHJcbiAgICAgICAgXCJzZXR0aW5nc1wiOiBcIlNldHRpbmdzXCIsXHJcbiAgICAgICAgXCJ0ZXh0XCI6IFwiVGV4dFwiLFxyXG4gICAgICAgIFwiZW1iZWRcIjogXCJFbWJlZFwiLFxyXG4gICAgICAgIFwiZ3JpZFwiOiBcIkdyaWRcIixcclxuICAgICAgICBcImltYWdlXCI6IFwiSW1hZ2VcIixcclxuICAgICAgICBcImxpc3RcIjogXCJMaXN0XCIsXHJcbiAgICAgICAgXCJkZWxldGVcIjogXCJEZWxldGVcIixcclxuICAgICAgICBcImR1cGxpY2F0ZVwiOiBcIkR1cGxpY2F0ZVwiLFxyXG4gICAgICAgIFwic29ydFwiOiBcIlNvcnRcIixcclxuICAgICAgICBcImVkaXRcIjogXCJFZGl0XCIsXHJcbiAgICAgICAgXCJpbmxpbmVcIjogXCJJbmxpbmVcIlxyXG4gICAgfSxcclxuICAgIFwiYmxvY2tzXCI6IHtcclxuICAgICAgICBcIm5vbmVkaXRhYmxlXCI6IFwiTm9uZWRpdGFibGVcIixcclxuICAgICAgICBcInBhcmFncmFwaFwiOiBcIlBhcmFncmFwaFwiLFxyXG4gICAgICAgIFwiaGVhZGluZ1wiOiBcIkhlYWRpbmdcIixcclxuICAgICAgICBcImltYWdlXCI6IFwiSW1hZ2VcIixcclxuICAgICAgICBcImZpZ2NhcHRpb25cIjogXCJGaWdjYXB0aW9uXCIsXHJcbiAgICAgICAgXCJlbWJlZFwiOiBcIkVtYmVkXCIsXHJcbiAgICAgICAgXCJsaW5lXCI6IFwiTGluZVwiLFxyXG4gICAgICAgIFwiY29kZVwiOiBcIkNvZGVcIixcclxuICAgICAgICBcInF1b3RlXCI6IFwiUXVvdGVcIixcclxuICAgICAgICBcInF1b3RlaXRlbVwiOiBcIlBhcmFncmFwaFwiLFxyXG4gICAgICAgIFwic25pcHBldFwiOiBcIlNuaXBwZXRcIixcclxuICAgICAgICBcImNvbHVtblwiOiBcIkNvbHVtblwiLFxyXG4gICAgICAgIFwiZ3JpZFwiOiBcIkdyaWRcIixcclxuICAgICAgICBcImxpc3RcIjogXCJMaXN0XCIsXHJcbiAgICAgICAgXCJ0YWJsZVwiOiBcIlRhYmxlXCIsXHJcbiAgICAgICAgXCJsYXllclwiOiBcIkxheWVyXCIsXHJcbiAgICAgICAgXCJyb3dcIjogXCJSb3dcIixcclxuICAgICAgICBcInRleHRcIjogXCJUZXh0XCIsXHJcbiAgICAgICAgXCJjZWxsXCI6IFwiQ2VsbFwiLFxyXG4gICAgICAgIFwiZGxpc3RcIjogXCJEZWZpbml0aW9uIExpc3RcIixcclxuICAgICAgICBcImFkZHJlc3NcIjogXCJBZGRyZXNzXCIsXHJcbiAgICAgICAgXCJmb3JtXCI6IFwiRm9ybVwiLFxyXG4gICAgICAgIFwiY2FyZFwiOiBcIkNhcmRcIlxyXG4gICAgfVxyXG59O1xyXG52YXIgQXBwID0gZnVuY3Rpb24oJGVsZW1lbnQsIHNldHRpbmdzLCB1dWlkKSB7XHJcbiAgICAvLyBlbnZpcm9ubWVudFxyXG4gICAgdmFyIG1hcHMgPSBbJ2tleWNvZGVzJywgJ3ByZWZpeCcsICdkb20nLCAnYWpheCcsICdfcmVwb3NpdG9yeScsICdfc3Vic2NyaWJlJ107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0aGlzW21hcHNbaV1dID0gJEFSWFttYXBzW2ldXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnV1aWQgPSB1dWlkO1xyXG4gICAgdGhpcy4kd2luID0gdGhpcy5kb20od2luZG93KTtcclxuICAgIHRoaXMuJGRvYyA9IHRoaXMuZG9tKGRvY3VtZW50KTtcclxuICAgIHRoaXMuJGJvZHkgPSB0aGlzLmRvbSgnYm9keScpO1xyXG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xyXG4gICAgdGhpcy5hcHAgPSB0aGlzO1xyXG5cclxuICAgIC8vIGluaXRpYWxcclxuICAgIHRoaXMuaW5pdGlhbFNldHRpbmdzID0gc2V0dGluZ3M7XHJcblxyXG4gICAgLy8gc3RhcnRlclxyXG4gICAgdGhpcy5faW5pdGVyID0gWydzZXR0aW5nJywgJ2xhbmcnXTtcclxuICAgIHRoaXMuX3ByaW9yaXR5ID0gWydjb250YWluZXInLCAnZWRpdG9yJywgJ2FjY2Vzc2liaWxpdHknLCAnc3RhdGUnXTtcclxuICAgIHRoaXMuX3BsdWdpbnMgPSBbXTtcclxuXHJcbiAgICAvLyBzdGFydGVkXHJcbiAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBzdGFydFxyXG4gICAgdGhpcy5zdGFydCgpO1xyXG59O1xyXG5cclxuQXBwLnByb3RvdHlwZSA9IHtcclxuICAgIC8vIHN0YXJ0XHJcbiAgICBzdGFydDogZnVuY3Rpb24oc2V0dGluZ3MpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNUZXh0YXJlYSgpKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMuaXNTdGFydGVkKCkpIHJldHVybjtcclxuICAgICAgICBpZiAoc2V0dGluZ3MpIHRoaXMuaW5pdGlhbFNldHRpbmdzID0gc2V0dGluZ3M7XHJcblxyXG4gICAgICAgIC8vIGNvcmVcclxuICAgICAgICB0aGlzLl9pbml0Q29yZSgpO1xyXG4gICAgICAgIHRoaXMuX3BsdWdpbnMgPSB0aGlzLnNldHRpbmcuZ2V0KCdwbHVnaW5zJyk7XHJcblxyXG4gICAgICAgIC8vIHN0YXJ0aW5nXHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3QoJ2FwcC5iZWZvcmUuc3RhcnQnKTtcclxuXHJcbiAgICAgICAgLy8gaW5pdFxyXG4gICAgICAgIHRoaXMuX2luaXRNb2R1bGVzKCk7XHJcbiAgICAgICAgdGhpcy5faW5pdFBsdWdpbnMoKTtcclxuXHJcbiAgICAgICAgLy8gc3RhcnRcclxuICAgICAgICB0aGlzLl9zdGFydFByaW9yaXR5KCk7XHJcbiAgICAgICAgdGhpcy5fc3RhcnRNb2R1bGVzKCk7XHJcbiAgICAgICAgdGhpcy5fc3RhcnRQbHVnaW5zKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIHN0YXJ0ZWRcclxuICAgICAgICB0aGlzLmJyb2FkY2FzdCgnYXBwLnN0YXJ0Jyk7XHJcblxyXG4gICAgICAgIC8vIGNhbGwgbG9hZCBtZXRob2RzXHJcbiAgICAgICAgdGhpcy5fbG9hZE1vZHVsZXNBbmRQbHVnaW5zKCk7XHJcbiAgICB9LFxyXG4gICAgaXNTdGFydGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGFydGVkO1xyXG4gICAgfSxcclxuICAgIGlzVGV4dGFyZWE6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy4kZWxlbWVudC5nZXQoKS50YWdOYW1lID09PSAnVEVYVEFSRUEnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gc3RvcFxyXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gc3RvcHBpbmdcclxuICAgICAgICB0aGlzLmJyb2FkY2FzdCgnYXBwLmJlZm9yZS5zdG9wJyk7XHJcblxyXG4gICAgICAgIHRoaXMuX3N0b3BQcmlvcml0eSgpO1xyXG4gICAgICAgIHRoaXMuX3N0b3BNb2R1bGVzKCk7XHJcbiAgICAgICAgdGhpcy5fc3RvcFBsdWdpbnMoKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIHN0b3BwZWRcclxuICAgICAgICB0aGlzLmJyb2FkY2FzdCgnYXBwLnN0b3AnKTtcclxuICAgIH0sXHJcbiAgICBpc1N0b3BwZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5zdGFydGVkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyB0ZXh0YXJlYVxyXG5cclxuICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgYnJvYWRjYXN0OiBmdW5jdGlvbihuYW1lLCBwYXJhbXMpIHtcclxuICAgICAgICB2YXIgZXZlbnQgPSAocGFyYW1zIGluc3RhbmNlb2YgQXBwLkV2ZW50KSA/IHBhcmFtcyA6IG5ldyBBcHAuRXZlbnQobmFtZSwgcGFyYW1zKTtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3N1YnNjcmliZVtuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX3N1YnNjcmliZVtuYW1lXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXNbZXZlbnRzW2ldLm1vZHVsZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudHNbaV0uZnVuYy5jYWxsKGluc3RhbmNlLCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNhbGxiYWNrc1xyXG4gICAgICAgIHZhciBjYWxsYmFja3MgPSAodGhpcy5zZXR0aW5nLmhhcygnc3Vic2NyaWJlJykpID8gdGhpcy5zZXR0aW5nLmdldCgnc3Vic2NyaWJlJykgOiB7fTtcclxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrc1tuYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBjYWxsYmFja3NbbmFtZV0uY2FsbCh0aGlzLCBldmVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZXZlbnQ7XHJcbiAgICB9LFxyXG4gICAgYnJvYWRjYXN0UGFyYW1zOiBmdW5jdGlvbihuYW1lLCBwYXJhbXMpIHtcclxuICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLmJyb2FkY2FzdChuYW1lLCBwYXJhbXMpO1xyXG4gICAgICAgIHJldHVybiBldmVudC5nZXRBbGwoKTtcclxuICAgIH0sXHJcbiAgICBicm9hZGNhc3RIdG1sOiBmdW5jdGlvbihuYW1lLCBodG1sKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5icm9hZGNhc3QobmFtZSwgeyBodG1sOiBodG1sIH0pO1xyXG4gICAgICAgIHJldHVybiBldmVudC5nZXQoJ2h0bWwnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY3JlYXRlXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX3JlcG9zaXRvcnlbbmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICRBUlguZXJyb3IoJ1RoZSBjbGFzcyBcIicgKyBuYW1lICsgJ1wiIGRvZXMgbm90IGV4aXN0LicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gbmV3IHRoaXMuX3JlcG9zaXRvcnlbbmFtZV0ucHJvdG8oKTtcclxuXHJcbiAgICAgICAgLy8gZXh0ZW5kXHJcbiAgICAgICAgaW5zdGFuY2UuX25hbWUgPSBuYW1lO1xyXG4gICAgICAgIGluc3RhbmNlLmFwcCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZhciBtYXBzID0gWyd1dWlkJywgJ3ByZWZpeCcsICdkb20nLCAnYWpheCddXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgaW5zdGFuY2VbbWFwc1tpXV0gPSB0aGlzW21hcHNbaV1dO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGFuZyAmIHNldHRpbmdzXHJcbiAgICAgICAgaWYgKHRoaXMubGFuZykgaW5zdGFuY2UubGFuZyA9IHRoaXMubGFuZztcclxuICAgICAgICBpZiAodGhpcy5vcHRzKSBpbnN0YW5jZS5vcHRzID0gdGhpcy5vcHRzO1xyXG5cclxuICAgICAgICAvLyBpbml0XHJcbiAgICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgICBpZiAoaW5zdGFuY2UuaW5pdCkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSBpbnN0YW5jZS5pbml0LmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBhcGlcclxuICAgIGFwaTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIHZhciBuYW1lc3BhY2VzID0gbmFtZS5zcGxpdChcIi5cIik7XHJcbiAgICAgICAgdmFyIGZ1bmMgPSBuYW1lc3BhY2VzLnBvcCgpO1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzcGFjZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29udGV4dCA9IGNvbnRleHRbbmFtZXNwYWNlc1tpXV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGV4dCAmJiB0eXBlb2YgY29udGV4dFtmdW5jXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dFtmdW5jXS5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGluaXRcclxuICAgIF9pbml0Q29yZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9pbml0ZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpc1t0aGlzLl9pbml0ZXJbaV1dID0gdGhpcy5jcmVhdGUodGhpcy5faW5pdGVyW2ldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG9wdHNcclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0cyA9IHRoaXMuc2V0dGluZy5kdW1wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9pbml0TW9kdWxlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuX3JlcG9zaXRvcnkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3JlcG9zaXRvcnlba2V5XS50eXBlID09PSAnbW9kdWxlJyAmJiB0aGlzLl9pbml0ZXIuaW5kZXhPZihrZXkpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gdGhpcy5jcmVhdGUoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfaW5pdFBsdWdpbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBwbHVnaW5zID0gdGhpcy5zZXR0aW5nLmdldCgncGx1Z2lucycpO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl9yZXBvc2l0b3J5KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9yZXBvc2l0b3J5W2tleV0udHlwZSA9PT0gJ3BsdWdpbicgJiYgcGx1Z2lucy5pbmRleE9mKGtleSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSB0aGlzLmNyZWF0ZShrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzdGFydFxyXG4gICAgX3N0YXJ0UHJpb3JpdHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fcHJpb3JpdHkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fY2FsbCh0aGlzW3RoaXMuX3ByaW9yaXR5W2ldXSwgJ3N0YXJ0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9zdGFydE1vZHVsZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2l0ZXJhdGUoJ21vZHVsZScsICdzdGFydCcpO1xyXG4gICAgfSxcclxuICAgIF9zdGFydFBsdWdpbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2l0ZXJhdGUoJ3BsdWdpbicsICdzdGFydCcpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzdG9wXHJcbiAgICBfc3RvcFByaW9yaXR5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcHJpb3JpdHkgPSB0aGlzLl9wcmlvcml0eS5zbGljZSgpLnJldmVyc2UoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXR5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbGwodGhpc1twcmlvcml0eVtpXV0sICdzdG9wJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9zdG9wTW9kdWxlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5faXRlcmF0ZSgnbW9kdWxlJywgJ3N0b3AnKTtcclxuICAgIH0sXHJcbiAgICBfc3RvcFBsdWdpbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2l0ZXJhdGUoJ3BsdWdpbicsICdzdG9wJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGxvYWRcclxuICAgIF9sb2FkTW9kdWxlc0FuZFBsdWdpbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2l0ZXJhdGUoJ21vZHVsZScsICdsb2FkJyk7XHJcbiAgICAgICAgdGhpcy5faXRlcmF0ZSgncGx1Z2luJywgJ2xvYWQnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gaXRlcmF0ZVxyXG4gICAgX2l0ZXJhdGU6IGZ1bmN0aW9uKHR5cGUsIG1ldGhvZCkge1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLl9yZXBvc2l0b3J5KSB7XHJcbiAgICAgICAgICAgIHZhciBpc0luID0gKHR5cGUgPT09ICdtb2R1bGUnKSA/IChtZXRob2QgPT09ICdsb2FkJyB8fCB0aGlzLl9wcmlvcml0eS5pbmRleE9mKGtleSkgPT09IC0xKSA6ICh0aGlzLl9wbHVnaW5zLmluZGV4T2Yoa2V5KSAhPT0gLTEpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVwb3NpdG9yeVtrZXldLnR5cGUgPT09IHR5cGUgJiYgaXNJbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbCh0aGlzW2tleV0sIG1ldGhvZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNhbGxcclxuICAgIF9jYWxsOiBmdW5jdGlvbihpbnN0YW5jZSwgbWV0aG9kKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZVttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlW21ldGhvZF0uYXBwbHkoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuQXBwLkV2ZW50ID0gZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XHJcbiAgICAvLyBsb2NhbFxyXG4gICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgIHRoaXMucGFyYW1zID0gKHR5cGVvZiBwYXJhbXMgPT09ICd1bmRlZmluZWQnKSA/IHt9IDogcGFyYW1zO1xyXG4gICAgdGhpcy5zdG9wcGVkID0gZmFsc2U7XHJcbn07XHJcblxyXG5BcHAuRXZlbnQucHJvdG90eXBlID0ge1xyXG4gICAgaXM6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtc1tuYW1lW2ldXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGhhczogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHJldHVybiAodHlwZW9mIHRoaXMucGFyYW1zW25hbWVdICE9PSAndW5kZWZpbmVkJyk7XHJcbiAgICB9LFxyXG4gICAgZ2V0QWxsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXM7XHJcbiAgICB9LFxyXG4gICAgZ2V0OiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zW25hbWVdO1xyXG4gICAgfSxcclxuICAgIHNldDogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLnBhcmFtc1tuYW1lXSA9IHZhbHVlO1xyXG4gICAgfSxcclxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XHJcbiAgICB9LFxyXG4gICAgaXNTdG9wcGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdG9wcGVkO1xyXG4gICAgfVxyXG59O1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbWl4aW4nLCAnYmxvY2snLCB7XHJcbiAgICBkZWZhdWx0czoge1xyXG4gICAgICAgIGlkOiB7IGdldHRlcjogJ2dldElkJywgc2V0dGVyOiAnc2V0SWQnIH0sXHJcbiAgICAgICAgaHRtbDogeyBnZXR0ZXI6ICdnZXRIdG1sJywgc2V0dGVyOiAnc2V0SHRtbCcgfSxcclxuICAgICAgICBhbGlnbjogeyBnZXR0ZXI6ICdnZXRBbGlnbicsIHNldHRlcjogJ3NldEFsaWduJyB9LFxyXG4gICAgICAgIHZhbGlnbjogeyBnZXR0ZXI6ICdnZXRWYWxpZ24nLCBzZXR0ZXI6ICdzZXRWYWxpZ24nIH0sXHJcbiAgICAgICAgb3V0c2V0OiB7IGdldHRlcjogJ2dldE91dHNldCcsIHNldHRlcjogJ3NldE91dHNldCcgfSxcclxuICAgIH0sXHJcbiAgICBpbml0OiBmdW5jdGlvbihzb3VyY2UpIHtcclxuXHJcbiAgICAgICAgdGhpcy4kYmxvY2sgPSAoc291cmNlKSA/IHRoaXMuZG9tKHNvdXJjZSkgOiB0aGlzLmNyZWF0ZSgpO1xyXG5cclxuICAgICAgICAvLyBidWlsZCAmIHJlbmRlclxyXG4gICAgICAgIHRoaXMuX2J1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGlzXHJcbiAgICBpc0Jsb2NrOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBpc0FsbG93ZWRCdXR0b246IGZ1bmN0aW9uKG5hbWUsIG9iaikge1xyXG4gICAgICAgIC8vIHR5cGVcclxuICAgICAgICB2YXIgdHlwZSA9IHRoaXMuZ2V0VHlwZSgpO1xyXG5cclxuICAgICAgICAvLyBoaWRkZW5cclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0cy5idXR0b25zLmhpZGRlbltuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMub3B0cy5idXR0b25zLmhpZGRlbltuYW1lXTtcclxuICAgICAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsKSAmJiB2YWwuaW5kZXhPZih0eXBlKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIC8vIGFsbFxyXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqLmJsb2NrcyA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgYmxvY2tzID0gb2JqLmJsb2NrcztcclxuXHJcbiAgICAgICAgLy8gZXhjZXB0XHJcbiAgICAgICAgaWYgKGJsb2Nrcy5leGNlcHQgJiYgYmxvY2tzLmV4Y2VwdC5pbmRleE9mKHR5cGUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhcnJheSBvZiBlbGVtZW50c1xyXG4gICAgICAgIGlmICgoQXJyYXkuaXNBcnJheShibG9ja3MudHlwZXMpICYmIGJsb2Nrcy50eXBlcy5pbmRleE9mKHR5cGUpICE9PSAtMSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYmxvY2tzLmFsbCkge1xyXG4gICAgICAgICAgICAvLyBlZGl0YWJsZVxyXG4gICAgICAgICAgICBpZiAoYmxvY2tzLmFsbCA9PT0gdHJ1ZSB8fCBibG9ja3MuYWxsID09PSAnYWxsJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYmxvY2tzLmFsbCA9PT0gJ2VkaXRhYmxlJyAmJiB0aGlzLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYmxvY2tzLmFsbCA9PT0gJ2ZpcnN0LWxldmVsJyAmJiB0aGlzLmlzRmlyc3RMZXZlbCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChibG9ja3MuYWxsID09PSAnbm9uZWRpdGFibGUnICYmICF0aGlzLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBpc0ZpcnN0TGV2ZWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRibG9jay5hdHRyKCdkYXRhLScgKyB0aGlzLnByZWZpeCArICctZmlyc3QtbGV2ZWwnKTtcclxuICAgIH0sXHJcbiAgICBpc0VkaXRhYmxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKHR5cGVvZiB0aGlzLmVkaXRhYmxlICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmVkaXRhYmxlID09PSB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBpc0lubGluZUJsb2NrOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKHR5cGVvZiB0aGlzLmlubGluZSAhPT0gJ3VuZGVmaW5lZCcpO1xyXG4gICAgfSxcclxuICAgIGlzQWxsU2VsZWN0ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcHAuc2VsZWN0aW9uLmlzQWxsKHRoaXMuJGJsb2NrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpc0VtcHR5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0VtcHRpYWJsZSgpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLiRibG9jay5oYXNDbGFzcyh0aGlzLnByZWZpeCArICctZW1wdHktbGF5ZXInKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IHRoaXMuJGJsb2NrLmh0bWwoKTtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSB0aGlzLl9jbGVhbkVtcHR5KGh0bWwpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiAoaHRtbCA9PT0gJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNFZGl0YWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0VtcHR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGlzRW1wdGlhYmxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKHR5cGVvZiB0aGlzLmVtcHRpYWJsZSAhPT0gJ3VuZGVmaW5lZCcpO1xyXG4gICAgfSxcclxuICAgIGlzQ2FyZXRTdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0VHlwZSgpID09PSAnY29kZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwLmNhcmV0LmlzKHRoaXMuJGJsb2NrLCAnc3RhcnQnLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcHAuY2FyZXQuaXModGhpcy4kYmxvY2ssICdzdGFydCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgaXNDYXJldEVuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0VHlwZSgpID09PSAnY29kZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwLmNhcmV0LmlzKHRoaXMuJGJsb2NrLCAnZW5kJywgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5pc0VkaXRhYmxlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwLmNhcmV0LmlzKHRoaXMuJGJsb2NrLCAnZW5kJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8vIGdldFxyXG4gICAgZ2V0RGF0YTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHZhciBkYXRhID0ge307XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgICBkYXRhW2tleV0gPSB0aGlzW3RoaXMuZGF0YVtrZXldLmdldHRlcl0uYXBwbHkodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKG5hbWUpID8gZGF0YVtuYW1lXSA6IGRhdGE7XHJcbiAgICB9LFxyXG4gICAgZ2V0VHlwZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcclxuICAgIH0sXHJcbiAgICBnZXRUYWc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy4kYmxvY2spID8gdGhpcy4kYmxvY2suZ2V0KCkudGFnTmFtZS50b0xvd2VyQ2FzZSgpIDogZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgZ2V0VGl0bGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0eXBlID0gdGhpcy5nZXRUeXBlKCk7XHJcbiAgICAgICAgdmFyIHRpdGxlcyA9IHRoaXMubGFuZy5nZXQoJ2Jsb2NrcycpO1xyXG4gICAgICAgIHZhciB0aXRsZSA9IHRoaXMuJGJsb2NrLmF0dHIoJ2RhdGEtdGl0bGUnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgdGl0bGVzW3R5cGVdICE9PSAndW5kZWZpbmVkJykgPyB0aXRsZXNbdHlwZV0gOiB0aXRsZTtcclxuICAgIH0sXHJcbiAgICBnZXRPZmZzZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0RnJhbWUoKS5vZmZzZXQoKTtcclxuICAgICAgICB2YXIgZWxPZmZzZXQgPSB0aGlzLiRibG9jay5vZmZzZXQoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgdG9wOiBvZmZzZXQudG9wICsgZWxPZmZzZXQudG9wLCBsZWZ0OiBvZmZzZXQubGVmdCArIGVsT2Zmc2V0LmxlZnQgfVxyXG4gICAgfSxcclxuICAgIGdldEJsb2NrOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kYmxvY2s7XHJcbiAgICB9LFxyXG4gICAgZ2V0SHRtbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGJsb2NrLmh0bWwoKTtcclxuICAgIH0sXHJcbiAgICBnZXRQbGFpblRleHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBodG1sID0gdGhpcy4kYmxvY2suaHRtbCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5hcHAuY29udGVudC5nZXRUZXh0RnJvbUh0bWwoaHRtbCwgeyBubDogdHJ1ZSB9KTtcclxuICAgIH0sXHJcbiAgICBnZXRPdXRlckh0bWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRibG9jay5nZXQoKS5vdXRlckhUTUw7XHJcbiAgICB9LFxyXG4gICAgZ2V0UGFyZW50czogZnVuY3Rpb24odHlwZXMpIHtcclxuICAgICAgICB2YXIgc2VsZWN0b3IgPSAoJ1snICsgdGhpcy5vcHRzLm5hbWVzLmRhdGF0eXBlICsgJz0nICsgdHlwZXMuam9pbignXSxbJyArIHRoaXMub3B0cy5uYW1lcy5kYXRhdHlwZSArICc9JykgKyAnXScpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy4kYmxvY2sucGFyZW50cyhzZWxlY3Rvcik7XHJcbiAgICB9LFxyXG4gICAgZ2V0UGFyZW50OiBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgdHlwZSA9ICh0eXBlKSA/ICc9JyArIHR5cGUgOiAnJztcclxuXHJcbiAgICAgICAgdmFyICRlbCA9IHRoaXMuJGJsb2NrLnBhcmVudCgpLmNsb3Nlc3QoJ1tkYXRhLScgKyB0aGlzLnByZWZpeCArICctdHlwZScgKyB0eXBlICsgJ10nKTtcclxuICAgICAgICBpZiAoJGVsLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGVsLmRhdGFnZXQoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgZ2V0TmV4dDogZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgIHR5cGUgPSAodHlwZSkgPyAnPScgKyB0eXBlIDogJyc7XHJcblxyXG4gICAgICAgIHZhciAkZWwgPSB0aGlzLiRibG9jay5uZXh0RWxlbWVudCgpO1xyXG4gICAgICAgIGlmICgkZWwubGVuZ3RoICE9PSAwICYmICRlbC5pcygnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlJyArIHR5cGUgKyAnXScpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkZWwuZGF0YWdldCgnaW5zdGFuY2UnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBnZXRQcmV2OiBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgdHlwZSA9ICh0eXBlKSA/ICc9JyArIHR5cGUgOiAnJztcclxuXHJcbiAgICAgICAgdmFyICRlbCA9IHRoaXMuJGJsb2NrLnByZXZFbGVtZW50KCk7XHJcbiAgICAgICAgaWYgKCRlbC5sZW5ndGggIT09IDAgJiYgJGVsLmlzKCdbZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGUnICsgdHlwZSArICddJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRlbC5kYXRhZ2V0KCdpbnN0YW5jZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGdldENoaWxkRmlyc3Q6IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICB0eXBlID0gKHR5cGUpID8gJz0nICsgdHlwZSA6ICcnO1xyXG5cclxuICAgICAgICB2YXIgJGVsID0gdGhpcy4kYmxvY2suZmluZCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlJyArIHR5cGUgKyAnXScpLmZpcnN0KCk7XHJcbiAgICAgICAgaWYgKCRlbC5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICRlbC5kYXRhZ2V0KCdpbnN0YW5jZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGdldENoaWxkTGFzdDogZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgIHR5cGUgPSAodHlwZSkgPyAnPScgKyB0eXBlIDogJyc7XHJcblxyXG4gICAgICAgIHZhciAkZWwgPSB0aGlzLiRibG9jay5maW5kKCdbZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGUnICsgdHlwZSArICddJykubGFzdCgpO1xyXG4gICAgICAgIGlmICgkZWwubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkZWwuZGF0YWdldCgnaW5zdGFuY2UnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBnZXRJZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGJsb2NrLmF0dHIoJ2lkJyk7XHJcbiAgICB9LFxyXG4gICAgZ2V0QWxpZ246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBvYmogPSB0aGlzLm9wdHMuYWxpZ247XHJcbiAgICAgICAgaWYgKCFvYmopIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgdmFyIHZhbHVlID0gJ2xlZnQnO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuJGJsb2NrLmhhc0NsYXNzKG9ialtrZXldKSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBrZXk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBnZXRWYWxpZ246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBvYmogPSB0aGlzLm9wdHMudmFsaWduO1xyXG4gICAgICAgIGlmICghb2JqKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciB2YWx1ZSA9ICdub25lJztcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLiRibG9jay5oYXNDbGFzcyhvYmpba2V5XSkpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0ga2V5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9LFxyXG4gICAgZ2V0T3V0c2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgb2JqID0gdGhpcy5vcHRzLm91dHNldDtcclxuICAgICAgICBpZiAoIW9iaikgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICB2YXIgdmFsdWUgPSAnbm9uZSc7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy4kYmxvY2suaGFzQ2xhc3Mob2JqW2tleV0pKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGtleTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfSxcclxuICAgIGdldENhcHRpb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkY2FwdGlvbiA9IHRoaXMuJGJsb2NrLmZpbmQoJ2ZpZ2NhcHRpb24nKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICgkY2FwdGlvbi5sZW5ndGggIT09IDApID8gJGNhcHRpb24uaHRtbCgpIDogJyc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHNldFxyXG4gICAgc2V0RGF0YTogZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5kYXRhW2tleV0pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB0aGlzW3RoaXMuZGF0YVtrZXldLnNldHRlcl0uY2FsbCh0aGlzLCBkYXRhW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXRFbXB0eTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kYmxvY2suaHRtbCgnJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRW1wdGlhYmxlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuY29udGVudC5hZGRFbXB0eUJ1dHRvbih0aGlzLiRibG9jayk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHNldFNlbGVjdEFsbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFZGl0YWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnNlbGVjdGlvbi5zZWxlY3QodGhpcy4kYmxvY2spO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXRIdG1sOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgdGhpcy4kYmxvY2suaHRtbChodG1sKTtcclxuXHJcbiAgICAgICAgaWYgKGh0bWwgIT09ICcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkSW5zdGFuY2VzSW5zaWRlKHRoaXMuJGJsb2NrKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2V0SWQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xyXG4gICAgICAgICAgICB0aGlzLiRibG9jay5yZW1vdmVBdHRyKCdpZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4kYmxvY2suYXR0cignaWQnLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHNldEFsaWduOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX3JlbW92ZU9iakNsYXNzZXModGhpcy5vcHRzLmFsaWduKTtcclxuICAgICAgICB0aGlzLiRibG9jay5hZGRDbGFzcyh0aGlzLm9wdHMuYWxpZ25bdmFsdWVdKTtcclxuICAgIH0sXHJcbiAgICBzZXRWYWxpZ246IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlT2JqQ2xhc3Nlcyh0aGlzLm9wdHMudmFsaWduKTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgdGhpcy4kYmxvY2suYWRkQ2xhc3ModGhpcy5vcHRzLnZhbGlnblt2YWx1ZV0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXRPdXRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlT2JqQ2xhc3Nlcyh0aGlzLm9wdHMub3V0c2V0KTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgdGhpcy4kYmxvY2suYWRkQ2xhc3ModGhpcy5vcHRzLm91dHNldFt2YWx1ZV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdWlcclxuICAgICAgICB0aGlzLmFwcC5jb250cm9sLnVwZGF0ZVBvc2l0aW9uKCk7XHJcbiAgICB9LFxyXG4gICAgc2V0Q2FwdGlvbjogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICBpZiAodmFsdWUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGJsb2NrLmZpbmQoJ2ZpZ2NhcHRpb24nKS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciAkY2FwdGlvbiA9IHRoaXMuJGJsb2NrLmZpbmQoJ2ZpZ2NhcHRpb24nKTtcclxuICAgICAgICAgICAgaWYgKCRjYXB0aW9uLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgJGNhcHRpb24gPSB0aGlzLmRvbSgnPGZpZ2NhcHRpb24+Jyk7XHJcbiAgICAgICAgICAgICAgICAkY2FwdGlvbi5hdHRyKCdkYXRhLXBsYWNlaG9sZGVyJywgdGhpcy5sYW5nLmdldCgncGxhY2Vob2xkZXJzLmZpZ2NhcHRpb24nKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRibG9jay5hcHBlbmQoJGNhcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5jcmVhdGUoJ2Jsb2NrLmZpZ2NhcHRpb24nLCAkY2FwdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRjYXB0aW9uLmh0bWwodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gaGFzXHJcbiAgICBoYXNDbGFzczogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB2YWx1ZSA9ICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSA/IFt2YWx1ZV0gOiB2YWx1ZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLiRibG9jay5oYXNDbGFzcyh2YWx1ZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyByZW1vdmVcclxuICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KCk7XHJcblxyXG4gICAgICAgIHRoaXMuJGJsb2NrLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAvLyBlbXB0aWFibGVcclxuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC5pc0VtcHRpYWJsZSgpICYmIHBhcmVudC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgcGFyZW50LnNldEVtcHR5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBkdXBsaWNhdGVcclxuICAgIGR1cGxpY2F0ZTogZnVuY3Rpb24oZW1wdHkpIHtcclxuICAgICAgICB2YXIgdHlwZSA9IHRoaXMuZ2V0VHlwZSgpO1xyXG4gICAgICAgIHZhciAkY2xvbmUgPSB0aGlzLiRibG9jay5jbG9uZSgpO1xyXG4gICAgICAgICRjbG9uZS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctYmxvY2stZm9jdXMgJyArIHRoaXMucHJlZml4ICsgJy1ibG9jay1tdWx0aXBsZS1ob3ZlcicpO1xyXG5cclxuICAgICAgICBpZiAoZW1wdHkpIHtcclxuICAgICAgICAgICAgJGNsb25lLmh0bWwoJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLmNyZWF0ZSgnYmxvY2suJyArIHR5cGUsICRjbG9uZSk7XHJcbiAgICB9LFxyXG4gICAgZHVwbGljYXRlRW1wdHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmR1cGxpY2F0ZSh0cnVlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gaW5zZXJ0XHJcbiAgICBpbnNlcnRFbXB0eTogZnVuY3Rpb24ocGFyYW1zKSB7XHJcbiAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHt9O1xyXG4gICAgICAgIHBhcmFtcy5pbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmNyZWF0ZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnQocGFyYW1zKTtcclxuICAgIH0sXHJcbiAgICBpbnNlcnQ6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHZhciBkZWZzID0ge1xyXG4gICAgICAgICAgICBpbnN0YW5jZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgY2FyZXQ6IGZhbHNlXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gcGFyYW1zXHJcbiAgICAgICAgdmFyIHAgPSAkQVJYLmV4dGVuZCh7fSwgZGVmcywgcGFyYW1zKTtcclxuICAgICAgICB2YXIgJGJsb2NrID0gcC5pbnN0YW5jZS5nZXRCbG9jaygpO1xyXG5cclxuXHJcbiAgICAgICAgLy8gZGVsZXRlIHNlbGVjdGlvblxyXG4gICAgICAgIGlmICh0aGlzLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5zZWxlY3Rpb24uZGVsZXRlQ29udGVudHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxpc3QgdG8gbGlzdFxyXG4gICAgICAgIGlmIChwLmluc3RhbmNlLmdldFR5cGUoKSA9PT0gJ2xpc3QnICYmIHRoaXMuZ2V0VHlwZSgpID09PSAnbGlzdCcpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLmluc2VydExpc3RUb0xpc3QoJGJsb2NrLCB0aGlzLiRibG9jaywgcC5jYXJldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gdmFyaWFibGUgdG8gdmFyaWFibGVcclxuICAgICAgICAgICAgaWYgKHAuaW5zdGFuY2UuaXNJbmxpbmVCbG9jaygpICYmIHRoaXMuaXNJbmxpbmVCbG9jaygpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRibG9jay5hZnRlcigkYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kYmxvY2sucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbGlrZSB2YXJpYWJsZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwLmluc3RhbmNlLmlzSW5saW5lQmxvY2soKSAmJiB0aGlzLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLmluc2VydE5vZGUocC5pbnN0YW5jZS5nZXRCbG9jaygpLCAnZW5kJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZWRpdGFibGVcclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0VkaXRhYmxlKCkgJiYgdGhpcy5nZXRUeXBlKCkgIT09ICdjYXJkJykge1xyXG4gICAgICAgICAgICAgICAgLy8gZGV0ZWN0IHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICBwLnBvc2l0aW9uID0gdGhpcy5hcHAuaW5zZXJ0aW9uLmRldGVjdFBvc2l0aW9uKHRoaXMuJGJsb2NrLCBwLnBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnRcclxuICAgICAgICAgICAgICAgIGlmIChwLnBvc2l0aW9uID09PSAnc3BsaXQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuZWxlbWVudC5zcGxpdCh0aGlzLiRibG9jaykuYmVmb3JlKCRibG9jayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRibG9ja1twLnBvc2l0aW9uXSgkYmxvY2spO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kYmxvY2sucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIG5vbiBlZGl0YWJsZVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHAucG9zaXRpb24gPSBwLnBvc2l0aW9uIHx8ICdhZnRlcic7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRibG9ja1twLnBvc2l0aW9uXSgkYmxvY2spO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgY2FyZXRcclxuICAgICAgICAgICAgaWYgKHAuY2FyZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwLmluc3RhbmNlLCBwLmNhcmV0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gcmVidWlsZFxyXG4gICAgICAgICAgICB0aGlzLmFwcC5lZGl0b3IuYnVpbGQoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAudG9vbGJhci5vYnNlcnZlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdibG9jay5hZGQnLCB7IGluc3RhbmNlOiBwLmluc3RhbmNlIH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHAuaW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBhcHBlbmRcclxuICAgIGFwcGVuZE5leHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5nZXROZXh0KCk7XHJcblxyXG4gICAgICAgIC8vIG5leHQgZW1wdHlcclxuICAgICAgICBpZiAobmV4dC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgbmV4dC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjdXJyZW50IGVtcHR5XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KG5leHQsICdzdGFydCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBub3QgZW1wdHlcclxuICAgICAgICB2YXIgaHRtbCA9IG5leHQuZ2V0SHRtbCgpO1xyXG4gICAgICAgIHZhciB0eXBlID0gdGhpcy5nZXRUeXBlKCk7XHJcbiAgICAgICAgdmFyIG5leHRUeXBlID0gbmV4dC5nZXRUeXBlKCk7XHJcbiAgICAgICAgdmFyIGluc2VydCA9IHRydWU7XHJcbiAgICAgICAgdmFyIHJlbW92ZSA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIGNvZGVcclxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvZGUnICYmIG5leHRUeXBlICE9PSAnY29kZScpIHtcclxuICAgICAgICAgICAgaHRtbCA9IG5leHQuZ2V0UGxhaW5UZXh0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBuZXh0IHR5cGVcclxuICAgICAgICBpZiAobmV4dFR5cGUgPT09ICdkbGlzdCcpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnZGxpc3QnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhcHBlbmQgYXMgbm9kZXNcclxuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IG5leHQuZ2V0QmxvY2soKS5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kYmxvY2suYXBwZW5kKG5vZGVzKTtcclxuICAgICAgICAgICAgICAgIGluc2VydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaW5zZXJ0IHdpdGggYnJcclxuICAgICAgICAgICAgICAgIGh0bWwgPSBuZXh0LmdldFBsYWluVGV4dCh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChuZXh0VHlwZSA9PT0gJ2xpc3QnKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnbGlzdCcpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkaXRlbXMgPSBuZXh0LmdldEJsb2NrKCkuY2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGJsb2NrLmFwcGVuZCgkaXRlbXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGluc2VydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSB0aGlzLl9hcHBlbmRMaXN0SHRtbChuZXh0LmdldEJsb2NrKCksIGh0bWwpO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlID0gbmV4dC5pc0VtcHR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFwcGVuZFxyXG4gICAgICAgIGlmIChpbnNlcnQpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCBjYXJldCBhZnRlciBpbmxpbmVcclxuICAgICAgICAgICAgdmFyIGlubGluZSA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRUb3BJbmxpbmUoKTtcclxuICAgICAgICAgICAgaWYgKGlubGluZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KGlubGluZSwgJ2FmdGVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGluc2VydFxyXG4gICAgICAgICAgICB0aGlzLmFwcC5pbnNlcnRpb24uaW5zZXJ0SHRtbChodG1sLCAnc3RhcnQnKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRJbnN0YW5jZXNJbnNpZGUodGhpcy4kYmxvY2spO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlXHJcbiAgICAgICAgaWYgKHJlbW92ZSkge1xyXG4gICAgICAgICAgICBuZXh0LnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LFxyXG4gICAgYXBwZW5kVG9QcmV2OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcHJldiA9IHRoaXMuZ2V0UHJldigpO1xyXG5cclxuICAgICAgICAvLyBjdXJyZW50IGVtcHR5XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwcmV2LCAnZW5kJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcHJldiBlbXB0eVxyXG4gICAgICAgIGVsc2UgaWYgKHByZXYuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIHByZXYucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmNvbnRyb2wudXBkYXRlUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbm90IGVtcHR5XHJcbiAgICAgICAgdmFyIHByZXZUeXBlID0gcHJldi5nZXRUeXBlKCk7XHJcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLmdldEh0bWwoKTtcclxuICAgICAgICB2YXIgdHlwZSA9IHRoaXMuZ2V0VHlwZSgpO1xyXG4gICAgICAgIHZhciBpbnNlcnQgPSB0cnVlO1xyXG4gICAgICAgIHZhciByZW1vdmUgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBjb2RlXHJcbiAgICAgICAgaWYgKHR5cGUgIT09ICdjb2RlJyAmJiBwcmV2VHlwZSA9PT0gJ2NvZGUnKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLmdldFBsYWluVGV4dCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY3VycmVudCB0eXBlXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdkbGlzdCcpIHtcclxuICAgICAgICAgICAgaWYgKHByZXZUeXBlID09PSAnZGxpc3QnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhcHBlbmQgYXMgbm9kZXNcclxuICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXMuZ2V0QmxvY2soKS5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHByZXYsICdlbmQnKTtcclxuICAgICAgICAgICAgICAgIHByZXYuZ2V0QmxvY2soKS5hcHBlbmQobm9kZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGluc2VydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaW5zZXJ0IHdpdGggYnJcclxuICAgICAgICAgICAgICAgIGh0bWwgPSB0aGlzLmdldFBsYWluVGV4dCh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnbGlzdCcpIHtcclxuICAgICAgICAgICAgaWYgKHByZXZUeXBlID09PSAnbGlzdCcpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkaXRlbXMgPSB0aGlzLmdldEJsb2NrKCkuY2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwcmV2LCAnZW5kJyk7XHJcbiAgICAgICAgICAgICAgICBwcmV2LmdldEJsb2NrKCkuYXBwZW5kKCRpdGVtcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaW5zZXJ0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZW1vdmUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaHRtbCA9IHRoaXMuX2FwcGVuZExpc3RIdG1sKHRoaXMuZ2V0QmxvY2soKSwgaHRtbCk7XHJcbiAgICAgICAgICAgICAgICByZW1vdmUgPSB0aGlzLmlzRW1wdHkoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYXBwZW5kXHJcbiAgICAgICAgaWYgKGluc2VydCkge1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwcmV2LCAnZW5kJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgY2FyZXQgYWZ0ZXIgaW5saW5lXHJcbiAgICAgICAgICAgIHZhciBpbmxpbmUgPSB0aGlzLmFwcC5zZWxlY3Rpb24uZ2V0VG9wSW5saW5lKCk7XHJcbiAgICAgICAgICAgIGlmIChpbmxpbmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNhcmV0LnNldChpbmxpbmUsICdhZnRlcicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpbnNlcnRcclxuICAgICAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLmluc2VydEh0bWwoaHRtbCwgJ3N0YXJ0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkSW5zdGFuY2VzSW5zaWRlKHByZXYuZ2V0QmxvY2soKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZW1vdmVcclxuICAgICAgICBpZiAocmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGFwcGVuZDogZnVuY3Rpb24oaW5zdGFuY2UsIHNldCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRW1wdGlhYmxlKCkgJiYgdGhpcy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdGhpcy4kYmxvY2suaHRtbCgnJyk7XHJcbiAgICAgICAgICAgIHRoaXMuJGJsb2NrLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1lbXB0eS1sYXllcicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy4kYmxvY2suYXBwZW5kKGluc3RhbmNlLmdldEJsb2NrKCkpO1xyXG5cclxuICAgICAgICBpZiAoc2V0ICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdibG9jay5hZGQnLCB7IGluc3RhbmNlOiBpbnN0YW5jZSB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gbW92ZVxyXG4gICAgbW92ZVVwOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5nZXRQcmV2KCk7XHJcbiAgICAgICAgaWYgKCF0YXJnZXQpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5fbW92ZSh0YXJnZXQsICdiZWZvcmUnKTtcclxuICAgIH0sXHJcbiAgICBtb3ZlRG93bjogZnVuY3Rpb24oZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuZ2V0TmV4dCgpO1xyXG4gICAgICAgIGlmICghdGFyZ2V0KSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuX21vdmUodGFyZ2V0LCAnYWZ0ZXInKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2FwcGVuZExpc3RIdG1sOiBmdW5jdGlvbigkdGFyZ2V0LCBodG1sKSB7XHJcbiAgICAgICAgdmFyICRpdGVtID0gJHRhcmdldC5maW5kKCdsaScpLmZpcnN0KCk7XHJcbiAgICAgICAgaHRtbCA9ICRpdGVtLmh0bWwoKS50cmltKCk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPFxcL2xpPi9naSwgJzwvbGk+PGJyPicpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzwodWx8b2wpL2dpLCAnPGJyPjwkMScpO1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlbW92ZVRhZ3MoaHRtbCwgWyd1bCcsICdvbCcsICdsaSddKTtcclxuICAgICAgICBodG1sID0gaHRtbC50cmltKCk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPGJyXFxzP1xcLz8+JC9naSwgJycpO1xyXG5cclxuICAgICAgICAkaXRlbS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9LFxyXG4gICAgX21vdmU6IGZ1bmN0aW9uKHRhcmdldCwgZnVuYykge1xyXG4gICAgICAgIC8vIHNhdmUgc2VsZWN0aW9uXHJcbiAgICAgICAgaWYgKHRoaXMuaXNFZGl0YWJsZSgpKSB0aGlzLmFwcC5zZWxlY3Rpb24uc2F2ZSh0aGlzLiRibG9jayk7XHJcblxyXG4gICAgICAgIC8vIG1vdmVcclxuICAgICAgICB2YXIgJHRhcmdldEJsb2NrID0gdGFyZ2V0LmdldEJsb2NrKCk7XHJcbiAgICAgICAgJHRhcmdldEJsb2NrW2Z1bmNdKHRoaXMuJGJsb2NrLCB0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gc2V0IGZvcmNlXHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHRoaXMuJGJsb2NrLCBmYWxzZSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIHJlc3RvcmUgc2VsZWN0aW9uXHJcbiAgICAgICAgaWYgKHRoaXMuaXNFZGl0YWJsZSgpKSB0aGlzLmFwcC5zZWxlY3Rpb24ucmVzdG9yZSh0aGlzLiRibG9jayk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBidWlsZCBlbXB0eVxyXG4gICAgICAgIGlmICh0aGlzLmlzRW1wdGlhYmxlKCkgJiYgdGhpcy5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuY29udGVudC5hZGRFbXB0eUJ1dHRvbih0aGlzLiRibG9jayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBidWlsZFxyXG4gICAgICAgIGlmICh0aGlzLmJ1aWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVpbGQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGluc3RhbmNlcyBpbnNpZGVcclxuICAgICAgICB0aGlzLl9idWlsZEluc3RhbmNlc0luc2lkZSh0aGlzLiRibG9jayk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkRGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEpIHRoaXMuZGF0YSA9IHt9O1xyXG4gICAgICAgIHRoaXMuZGF0YSA9ICRBUlguZXh0ZW5kKHt9LCB0cnVlLCB0aGlzLmRlZmF1bHRzLCB0aGlzLmRhdGEpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEluc3RhbmNlc0luc2lkZTogZnVuY3Rpb24oJGJsb2NrKSB7XHJcbiAgICAgICAgJGJsb2NrLmZpbmQoJ1tkYXRhLScgKyB0aGlzLnByZWZpeCArICctdHlwZV0nKS5lYWNoKHRoaXMuX2J1aWxkSW5zdGFuY2VJbnNpZGUuYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkSW5zdGFuY2VJbnNpZGU6IGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gJG5vZGUuZGF0YWdldCgnaW5zdGFuY2UnKTtcclxuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gJG5vZGUuYXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGUnKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuY3JlYXRlKCdibG9jay4nICsgdHlwZSwgJG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRJdGVtczogZnVuY3Rpb24oc2VsZWN0b3IsIHR5cGUpIHtcclxuICAgICAgICB2YXIgJGl0ZW1zID0gdGhpcy4kYmxvY2suZmluZChzZWxlY3Rvcik7XHJcbiAgICAgICAgaWYgKCRpdGVtcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgJGl0ZW1zLmVhY2goZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNyZWF0ZSgnYmxvY2suJyArIHR5cGUsICRub2RlKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQ2FwdGlvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZ2V0VGFnKCkgIT09ICdmaWd1cmUnKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuJGJsb2NrLmZpbmQoJ2ZpZ2NhcHRpb24nKS5hdHRyKCdkYXRhLXBsYWNlaG9sZGVyJywgdGhpcy5sYW5nLmdldCgncGxhY2Vob2xkZXJzLmZpZ2NhcHRpb24nKSk7XHJcbiAgICB9LFxyXG4gICAgX2lzRW1wdHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBodG1sID0gdGhpcy4kYmxvY2sudGV4dCgpO1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLl9jbGVhbkVtcHR5KGh0bWwpO1xyXG5cclxuICAgICAgICByZXR1cm4gKGh0bWwgPT09ICcnKTtcclxuICAgIH0sXHJcbiAgICBfZ2V0TmFtZUJ5VGFnOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdGFnID0gdGhpcy5nZXRUYWcoKTtcclxuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuYXBwLnV0aWxzLmNhcGl0YWxpemUodGFnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICB9LFxyXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyRWRpdCgpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlckRyYWdnYWJsZSgpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlckVkaXRhYmxlKCk7XHJcbiAgICB9LFxyXG4gICAgX3JlbmRlckRyYWdnYWJsZTogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kcmFnZ2FibGUgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuZHJhZ2dhYmxlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLiRibG9jay5vbignZHJhZ3N0YXJ0JywgZnVuY3Rpb24oZSkgeyBlLnByZXZlbnREZWZhdWx0KCk7IHJldHVybiBmYWxzZTsgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGJsb2NrLmZpbmQoJ2ltZycpLm9uKCdkcmFnc3RhcnQnLCBmdW5jdGlvbihlKSB7IGUucHJldmVudERlZmF1bHQoKTsgcmV0dXJuIGZhbHNlOyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3JlbmRlckVkaXRhYmxlOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNFZGl0YWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGJsb2NrLmF0dHIoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy5lZGl0YWJsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5lZGl0YWJsZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy4kYmxvY2suYXR0cignY29udGVudGVkaXRhYmxlJywgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNFZGl0YWJsZSgpICYmICF0aGlzLm9wdHMuZWRpdG9yLmdyYW1tYXJseSkgdGhpcy4kYmxvY2suYXR0cignZGF0YS1ncmFtbV9lZGl0b3InLCBmYWxzZSk7XHJcbiAgICB9LFxyXG4gICAgX3JlbmRlckVkaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGJsb2NrLmRhdGFzZXQoJ2luc3RhbmNlJywgdGhpcyk7XHJcbiAgICAgICAgdGhpcy4kYmxvY2suYXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGUnLCB0aGlzLmdldFR5cGUoKSk7XHJcbiAgICB9LFxyXG4gICAgX2NsZWFuRW1wdHk6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAudXRpbHMucmVtb3ZlSW52aXNpYmxlQ2hhcnMoaHRtbCk7XHJcbiAgICAgICAgaHRtbCA9IChodG1sLnNlYXJjaCgvXjxiclxccz9cXC8/PiQvKSAhPT0gLTEpID8gJycgOiBodG1sO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL1xcbi9nLCAnJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfSxcclxuICAgIF9yZW1vdmVPYmpDbGFzc2VzOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICB2YXIgY2xhc3NlcyA9IHRoaXMuX2J1aWxkT2JqQ2xhc3NlcyhvYmopO1xyXG4gICAgICAgIHRoaXMuJGJsb2NrLnJlbW92ZUNsYXNzKGNsYXNzZXMuam9pbignICcpKTtcclxuICAgICAgICB0aGlzLmFwcC5lbGVtZW50LnJlbW92ZUVtcHR5QXR0cnModGhpcy4kYmxvY2ssIFsnY2xhc3MnXSk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkT2JqQ2xhc3NlczogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgdmFyIGNsYXNzZXMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmpba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKG9ialtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNsYXNzZXM7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbWl4aW4nLCAndG9vbCcsIHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uKG5hbWUsIG9iaiwgc3RhY2ssIGRhdGEsIGluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnNldHRlciA9IHN0YWNrLnNldHRlcjtcclxuICAgICAgICB0aGlzLnN0YWNrID0gc3RhY2s7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgdGhpcy5vYmogPSB0aGlzLl9vYnNlcnZlKG9iaik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9iaikge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kdG9vbDtcclxuICAgIH0sXHJcbiAgICBnZXRJbnB1dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGlucHV0O1xyXG4gICAgfSxcclxuICAgIGdldFZhbHVlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLiRpbnB1dC52YWwoKTtcclxuICAgICAgICByZXR1cm4gdmFsdWUudHJpbSgpO1xyXG4gICAgfSxcclxuICAgIHNldFZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuJGlucHV0LnZhbCh2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgc2V0Rm9jdXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGlucHV0LmZvY3VzKCk7XHJcbiAgICB9LFxyXG4gICAgdHJpZ2dlcjogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB0aGlzLnNldFZhbHVlKHZhbHVlKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmFwaSh0aGlzLnNldHRlciwgdGhpcy5zdGFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2J1aWxkVG9vbCgpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkTGFiZWwoKTtcclxuICAgICAgICB0aGlzLl9idWlsZElucHV0RWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkSW5wdXQoKTtcclxuICAgICAgICB0aGlzLl9idWlsZEV2ZW50KCk7XHJcblxyXG4gICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgaWYgKHRoaXMuX2hhcygncGxhY2Vob2xkZXInKSkgdGhpcy4kaW5wdXQuYXR0cigncGxhY2Vob2xkZXInLCB0aGlzLmxhbmcucGFyc2UodGhpcy5vYmoucGxhY2Vob2xkZXIpKTtcclxuICAgICAgICBpZiAodGhpcy5faGFzKCd3aWR0aCcpKSB0aGlzLiRpbnB1dC5jc3MoJ3dpZHRoJywgdGhpcy5vYmoud2lkdGgpO1xyXG4gICAgICAgIGlmICh0aGlzLl9oYXMoJ2NsYXNzbmFtZScpKSB0aGlzLiRpbnB1dC5hZGRDbGFzcyh0aGlzLm9iai5jbGFzc25hbWUpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZElucHV0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kaW5wdXQgPSB0aGlzLmRvbSgnPCcgKyB0aGlzLl9nZXRJbnB1dFBhcmFtKCd0YWcnKSArICc+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyB0aGlzLl9nZXRJbnB1dFBhcmFtKCdjbGFzc25hbWUnKSk7XHJcbiAgICAgICAgdGhpcy4kaW5wdXQuYXR0cih7ICduYW1lJzogdGhpcy5uYW1lLCAndHlwZSc6IHRoaXMuX2dldElucHV0UGFyYW0oJ3R5cGUnKSwgJ2RhdGEtdHlwZSc6IHRoaXMudHlwZSB9KTtcclxuICAgICAgICB0aGlzLiRpbnB1dC5kYXRhc2V0KCdpbnN0YW5jZScsIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZElucHV0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkRXZlbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0eXBlcyA9IFsnc2VnbWVudCddO1xyXG4gICAgICAgIGlmICh0eXBlcy5pbmRleE9mKHRoaXMudHlwZSkgPT09IC0xICYmIHRoaXMuc2V0dGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBldmVudHMgPSAodGhpcy50eXBlID09PSAnY2hlY2tib3gnIHx8IHRoaXMudHlwZSA9PT0gJ3NlbGVjdCcpID8gJ2NoYW5nZScgOiAna2V5ZG93biBibHVyJztcclxuICAgICAgICAgICAgdGhpcy4kaW5wdXQub24oZXZlbnRzLCB0aGlzLl9jYXRjaFNldHRlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkVG9vbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kdG9vbCA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1mb3JtLWl0ZW0nKS5kYXRhc2V0KCdpbnN0YW5jZScsIHRoaXMpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZExhYmVsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy50eXBlICE9PSAnY2hlY2tib3gnICYmIHRoaXMuX2hhcygnbGFiZWwnKSkge1xyXG4gICAgICAgICAgICB0aGlzLiRsYWJlbCA9IHRoaXMuZG9tKCc8bGFiZWw+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZvcm0tbGFiZWwnKS5odG1sKHRoaXMubGFuZy5wYXJzZSh0aGlzLm9iai5sYWJlbCkpO1xyXG4gICAgICAgICAgICB0aGlzLiR0b29sLmFwcGVuZCh0aGlzLiRsYWJlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9nZXRJbnB1dFBhcmFtOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmlucHV0ICYmIHR5cGVvZiB0aGlzLmlucHV0W25hbWVdICE9PSAndW5kZWZpbmVkJykgPyB0aGlzLmlucHV0W25hbWVdIDogJyc7XHJcbiAgICB9LFxyXG4gICAgX2dldDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9ialtuYW1lXTtcclxuICAgIH0sXHJcbiAgICBfaGFzOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub2JqLmhhc093blByb3BlcnR5KG5hbWUpO1xyXG4gICAgfSxcclxuICAgIF9vYnNlcnZlOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KCdvYnNlcnZlcicpKSB7XHJcbiAgICAgICAgICAgIG9iaiA9IHRoaXMuYXBwLmFwaShvYmoub2JzZXJ2ZXIsIG9iaiwgdGhpcy5uYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9LFxyXG4gICAgX2NhdGNoU2V0dGVyOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nICYmIGUud2hpY2ggIT09IDEzKSByZXR1cm47XHJcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2tleWRvd24nKSBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIGNhbGwgc2V0dGVyXHJcbiAgICAgICAgdGhpcy5hcHAuYXBpKHRoaXMuc2V0dGVyLCB0aGlzLnN0YWNrKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnbGFuZycsIHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMubGFuZ0tleSA9IHRoaXMuYXBwLnNldHRpbmcuZ2V0KCdlZGl0b3IubGFuZycpO1xyXG4gICAgICAgIHRoaXMudmFycyA9IHRoaXMuX2J1aWxkKCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0OiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fZ2V0KG5hbWUsIHRoaXMudmFycyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5sYW5nS2V5ICE9PSAnZW4nKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fZ2V0KG5hbWUsICRBUlgubGFuZ1snZW4nXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpID8gJycgOiB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBwYXJzZTogZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSByZXR1cm4gc3RyO1xyXG5cclxuICAgICAgICB2YXIgbWF0Y2hlcyA9IHN0ci5tYXRjaCgvIyMgKC4qPykgIyMvZyk7XHJcbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gbWF0Y2hlc1tpXS5yZXBsYWNlKC9eIyNcXHMvZywgJycpLnJlcGxhY2UoL1xccyMjJC9nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZShtYXRjaGVzW2ldLCB0aGlzLmdldChrZXkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2dldDogZnVuY3Rpb24obmFtZSwgdmFycykge1xyXG4gICAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgICB2YXIgYXJyID0gbmFtZS5zcGxpdCgnLicpO1xyXG5cclxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSkgdmFsdWUgPSB2YXJzW25hbWVdO1xyXG4gICAgICAgIGVsc2UgdmFsdWUgPSAodHlwZW9mIHZhcnNbYXJyWzBdXSAhPT0gJ3VuZGVmaW5lZCcpID8gdmFyc1thcnJbMF1dW2FyclsxXV0gOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB2YXJzID0gJEFSWC5sYW5nWydlbiddO1xyXG4gICAgICAgIGlmICh0aGlzLmxhbmdLZXkgIT09ICdlbicpIHtcclxuICAgICAgICAgICAgdmFycyA9ICgkQVJYLmxhbmdbdGhpcy5sYW5nS2V5XSAhPT0gJ3VuZGVmaW5lZCcpID8gJEFSWC5sYW5nW3RoaXMubGFuZ0tleV0gOiB2YXJzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhcnM7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ3NldHRpbmcnLCB7XHJcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLm9wdHMgPSB0aGlzLl9idWlsZCgpO1xyXG4gICAgfSxcclxuICAgIGR1bXA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdHM7XHJcbiAgICB9LFxyXG4gICAgaGFzOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgIHZhciBhcnIgPSBuYW1lLnNwbGl0KCcuJyk7XHJcblxyXG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAxKSB2YWx1ZSA9ICh0eXBlb2YgdGhpcy5vcHRzW25hbWVdICE9PSAndW5kZWZpbmVkJyk7XHJcbiAgICAgICAgZWxzZSB2YWx1ZSA9ICh0eXBlb2YgdGhpcy5vcHRzW2FyclswXV0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzLm9wdHNbYXJyWzFdXSAhPT0gJ3VuZGVmaW5lZCcpO1xyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9LFxyXG4gICAgc2V0OiBmdW5jdGlvbihzZWN0aW9uLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRzW3NlY3Rpb25dID09PSAndW5kZWZpbmVkJykgdGhpcy5vcHRzW3NlY3Rpb25dID0ge307XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB0aGlzLm9wdHNbc2VjdGlvbl0gPSBuYW1lO1xyXG4gICAgICAgIGVsc2UgdGhpcy5vcHRzW3NlY3Rpb25dW25hbWVdID0gdmFsdWU7XHJcbiAgICB9LFxyXG4gICAgZ2V0OiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlO1xyXG4gICAgICAgIHZhciBhcnIgPSBuYW1lLnNwbGl0KCcuJyk7XHJcblxyXG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAxKSB2YWx1ZSA9IHRoaXMub3B0c1tuYW1lXTtcclxuICAgICAgICBlbHNlIHZhbHVlID0gKHR5cGVvZiB0aGlzLm9wdHNbYXJyWzBdXSAhPT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5vcHRzW2FyclswXV1bYXJyWzFdXSA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBvcHRzID0gJEFSWC5leHRlbmQodHJ1ZSwge30sICRBUlgub3B0cywgdGhpcy5hcHAuaW5pdGlhbFNldHRpbmdzKTtcclxuICAgICAgICBvcHRzID0gJEFSWC5leHRlbmQodHJ1ZSwgb3B0cywgJEFSWC5zZXR0aW5ncyk7XHJcblxyXG4gICAgICAgIHJldHVybiBvcHRzO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdjb250YWluZXInLCB7XHJcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lcnMgPSB7XHJcbiAgICAgICAgICAgIG1haW46IFsnYmFycycsICdlZGl0b3InLCAnc291cmNlJywgJ3N0YXR1c2JhciddLFxyXG4gICAgICAgICAgICBiYXJzOiBbJ3BhdGhiYXInLCAndG9vbGJhciddXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRNYWluKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRDb250YWluZXJzKHRoaXMuJG1haW4sIHRoaXMuY29udGFpbmVycy5tYWluKTtcclxuICAgICAgICB0aGlzLl9idWlsZEJTTW9kYWwoKTtcclxuICAgIH0sXHJcbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRtYWluLnJlbW92ZSgpO1xyXG4gICAgfSxcclxuICAgIGdldDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzWyckJyArIG5hbWVdO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRNYWluOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRtYWluID0gdGhpcy5kb20oJzxkaXY+Jyk7XHJcbiAgICAgICAgdGhpcy4kbWFpbi5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctY29udGFpbmVyICcgKyB0aGlzLnByZWZpeCArICctY29udGFpbmVyLScgKyB0aGlzLnV1aWQpO1xyXG4gICAgICAgIHRoaXMuJG1haW4uYXR0cih0aGlzLnByZWZpeCArICctdXVpZCcsIHRoaXMudXVpZCk7XHJcblxyXG4gICAgICAgIC8vIHBsYWNlXHJcbiAgICAgICAgdGhpcy5hcHAuJGVsZW1lbnQuYWZ0ZXIodGhpcy4kbWFpbik7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQ29udGFpbmVyczogZnVuY3Rpb24oJHRhcmdldCwgY29udGFpbmVycykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFpbmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGNvbnRhaW5lcnNbaV07XHJcbiAgICAgICAgICAgIHZhciBlbE5hbWUgPSAnJCcgKyBuYW1lO1xyXG5cclxuICAgICAgICAgICAgLy8gY3JlYXRlXHJcbiAgICAgICAgICAgIHRoaXNbZWxOYW1lXSA9IHRoaXMuX2NyZWF0ZUNvbnRhaW5lcihuYW1lKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5lc3RlZFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29udGFpbmVyc1tuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkQ29udGFpbmVycyh0aGlzW2VsTmFtZV0sIHRoaXMuY29udGFpbmVyc1tuYW1lXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFwcGVuZFxyXG4gICAgICAgICAgICAkdGFyZ2V0LmFwcGVuZCh0aGlzW2VsTmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRCU01vZGFsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLm9wdHMuYnNtb2RhbCA9ICh0aGlzLiRtYWluLmNsb3Nlc3QoJy5tb2RhbC1kaWFsb2cnKS5sZW5ndGggIT09IDApO1xyXG4gICAgfSxcclxuICAgIF9jcmVhdGVDb250YWluZXI6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20oJzxkaXY+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLScgKyBuYW1lICsgJy1jb250YWluZXInKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnZWRpdG9yJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5tb2JpbGVNb2RlID0gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2J1aWxkRnJhbWUoKTtcclxuICAgICAgICB0aGlzLl9idWlsZEJsdXJDbGFzcygpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkT3B0aW9ucygpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkUGFyc2VyVGFncygpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkU3RhcnRIdG1sKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRMYXlvdXQoKTtcclxuICAgICAgICB0aGlzLl9idWlsZENvbnRlbnQoKTtcclxuICAgIH0sXHJcbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRlZGl0b3IgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmFwcC4kZWxlbWVudC5zaG93KCk7XHJcbiAgICB9LFxyXG4gICAgbG9hZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0Rm9jdXNPblN0YXJ0KCk7XHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuYXBwLmVtYmVkLmJ1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2tzLmJ1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5hcHAuaW1hZ2Uub2JzZXJ2ZVN0YXRlcygpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBpbnNlcnRcclxuICAgIGluc2VydENvbnRlbnQ6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnRDb250ZW50KHBhcmFtcyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHNldFxyXG4gICAgc2V0Q29udGVudDogZnVuY3Rpb24ocGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLnNldENvbnRlbnQocGFyYW1zKTtcclxuICAgIH0sXHJcblx0c2V0RW1wdHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5zZXRDb250ZW50KHsgaHRtbDogJycgfSk7XHJcblx0fSxcclxuICAgIHNldEZvY3VzOiBmdW5jdGlvbihjYXJldCkge1xyXG4gICAgICAgIGlmIChjYXJldCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRGb2N1c0NhcmV0KGNhcmV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldEZvY3VzRXZlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2V0Qmx1cjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRm9jdXMoKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLl91bnNldEZvY3VzQ29udGFpbmVyQ2xhc3MoKTtcclxuICAgICAgICB0aGlzLl9lbmFibGVUb29sYmFyQnV0dG9ucygpO1xyXG5cclxuICAgICAgICB0aGlzLmFwcC5ibG9jay51bnNldCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmJsb2Nrcy51bnNldCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLnNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcclxuXHJcbiAgICAgICAgLy8gdWlcclxuICAgICAgICBpZiAoIXRoaXMuaXNNb2JpbGVWaWV3KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAucGF0aC5idWlsZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC50b29sYmFyLmJ1aWxkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmNvbnRyb2wuY2xvc2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKGZhbHNlKTtcclxuXHJcbiAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdlZGl0b3IuYmx1cicpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzZWxlY3RcclxuICAgIHNlbGVjdEFsbDogZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQWxsU2VsZWN0ZWQoKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLl9zZXRTZWxlY3RBbGxDbGFzcygpO1xyXG5cclxuICAgICAgICB0aGlzLmFwcC5ibG9ja3MudW5zZXQoKTtcclxuICAgICAgICB0aGlzLmFwcC5ibG9ja3Muc2V0Rmlyc3RMZXZlbCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLnNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcclxuXHJcbiAgICAgICAgLy8gdWlcclxuICAgICAgICB0aGlzLmFwcC5wYXRoLmJ1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5hcHAudG9vbGJhci5idWlsZCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRyb2wuY2xvc2UoKTtcclxuXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHVuc2VsZWN0XHJcbiAgICB1bnNlbGVjdEFsbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWxsU2VsZWN0ZWQoKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLnVuc2V0U2VsZWN0QWxsQ2xhc3MoKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2sudW5zZXQoKTtcclxuICAgICAgICB0aGlzLmFwcC5ibG9ja3MudW5zZXQoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdW5zZXRcclxuICAgIHVuc2V0U2VsZWN0QWxsQ2xhc3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGVkaXRvci5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctc2VsZWN0LWFsbCcpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBhZGRcclxuICAgIGFkZEJ1dHRvbjogZnVuY3Rpb24obmFtZSwgb2JqKSB7XHJcbiAgICAgICAgdGhpcy5vcHRzLmJ1dHRvbnMuZWRpdG9yW25hbWVdID0gb2JqO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBnZXRcclxuICAgIGdldEJ1dHRvbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBidXR0b25zID0gdGhpcy5vcHRzLmJ1dHRvbnMuZWRpdG9yO1xyXG4gICAgICAgIHZhciByZXMgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIGJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdodG1sJyAmJiAhdGhpcy5vcHRzLnNvdXJjZSkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAndGVtcGxhdGVzJyAmJiAhdGhpcy5vcHRzLnRlbXBsYXRlcy5qc29uKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIHJlc1tuYW1lXSA9IGJ1dHRvbnNbbmFtZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfSxcclxuICAgIGdldENvbnRlbnQ6IGZ1bmN0aW9uKHRpZHkpIHtcclxuICAgICAgICB2YXIgaHRtbCA9ICcnO1xyXG4gICAgICAgIGlmICh0aGlzLmFwcC5zb3VyY2UuaXMoKSkge1xyXG4gICAgICAgICAgICBodG1sID0gdGhpcy5hcHAuc291cmNlLmdldENvbnRlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLl9nZXRDb250ZW50KCk7XHJcbiAgICAgICAgICAgIGh0bWwgPSAodGlkeSkgPyB0aGlzLmFwcC50aWR5LnBhcnNlKGh0bWwpIDogaHRtbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfSxcclxuICAgIGdldEZyYW1lUmVjdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuJGVkaXRvci5vZmZzZXQoKTtcclxuICAgICAgICB2YXIgd2lkdGggPSB0aGlzLiRlZGl0b3Iud2lkdGgoKTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy4kZWRpdG9yLmhlaWdodCgpO1xyXG4gICAgICAgIHZhciB0b3AgPSBNYXRoLnJvdW5kKG9mZnNldC50b3ApO1xyXG4gICAgICAgIHZhciBsZWZ0ID0gTWF0aC5yb3VuZChvZmZzZXQubGVmdCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRvcDogdG9wLFxyXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0LFxyXG4gICAgICAgICAgICBib3R0b206IHRvcCArIGhlaWdodCxcclxuICAgICAgICAgICAgcmlnaHQ6IGxlZnQgKyB3aWR0aCxcclxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZ2V0RnJhbWU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy4kZWRpdG9yKSA/IHRoaXMuJGVkaXRvciA6IHRoaXMuZG9tKCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0TGF5b3V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kbGF5b3V0O1xyXG4gICAgfSxcclxuICAgIGdldEhlYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldERvYygpLmZpbmQoJ2hlYWQnKTtcclxuICAgIH0sXHJcbiAgICBnZXRCb2R5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuJGVkaXRvcikgPyB0aGlzLmdldERvYygpLmZpbmQoJ2JvZHknKSA6IHRoaXMuZG9tKCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0RG9jOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20odGhpcy5nZXREb2NOb2RlKCkpO1xyXG4gICAgfSxcclxuICAgIGdldERvY05vZGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRlZGl0b3IuZ2V0KCkuY29udGVudFdpbmRvdy5kb2N1bWVudDtcclxuICAgIH0sXHJcbiAgICBnZXRXaW46IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSh0aGlzLmdldFdpbk5vZGUoKSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0V2luTm9kZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGVkaXRvci5nZXQoKS5jb250ZW50V2luZG93O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBhZGp1c3RcclxuICAgIGFkanVzdEhlaWdodDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLiRlZGl0b3IpIHJldHVybjtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlZGl0b3IuaGVpZ2h0KHRoaXMuZ2V0Qm9keSgpLmhlaWdodCgpKTtcclxuICAgICAgICB9LmJpbmQodGhpcyksIDEpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyB0b2dnbGVcclxuICAgIHRvZ2dsZVZpZXc6IGZ1bmN0aW9uKGJ1dHRvbikge1xyXG4gICAgICAgIGlmICh0aGlzLm1vYmlsZU1vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy4kZWRpdG9yLmNzcygnd2lkdGgnLCAnJyk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnBhdGguZW5hYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnRvcGJhci5lbmFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAudG9vbGJhci5lbmFibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAudG9vbGJhci51bnNldFRvZ2dsZWQoJ21vYmlsZScpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ldmVudC5ydW4oKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2tzLnJ1bkVkaXRhYmxlQmxvY2tzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLm9ic2VydmVyLmJ1aWxkKCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9iaWxlTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4kZWRpdG9yLmNzcygnd2lkdGgnLCB0aGlzLm9wdHMuZWRpdG9yLm1vYmlsZSArICdweCcpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5wYXRoLmRpc2FibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAudG9wYmFyLmRpc2FibGUoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAudG9vbGJhci5kaXNhYmxlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnRvb2xiYXIuc2V0VG9nZ2xlZCgnbW9iaWxlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmNvbnRyb2wuY2xvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuZXZlbnQucGF1c2UoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2tzLnBhdXNlRWRpdGFibGVCbG9ja3MoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAub2JzZXJ2ZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICB0aGlzLm1vYmlsZU1vZGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hZGp1c3RIZWlnaHQoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gaXNcclxuICAgIGlzTGF5b3V0OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5kb20oZWwpLmdldCgpID09PSB0aGlzLiRsYXlvdXQuZ2V0KCkpO1xyXG4gICAgfSxcclxuICAgIGlzVGV4dGFyZWE6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5vcHRzLmNvbnRlbnQgPT09IGZhbHNlKTtcclxuICAgIH0sXHJcbiAgICBpc0FsbFNlbGVjdGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kZWRpdG9yLmhhc0NsYXNzKHRoaXMucHJlZml4ICsgJy1zZWxlY3QtYWxsJyk7XHJcbiAgICB9LFxyXG4gICAgaXNGb2N1czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ21haW4nKS5oYXNDbGFzcyh0aGlzLnByZWZpeCArICctaW4tZm9jdXMnKTtcclxuICAgIH0sXHJcbiAgICBpc0VtcHR5OiBmdW5jdGlvbihlbXB0eXBhcmFncmFwaCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC5jb250ZW50LmlzRW1wdHlIdG1sKHRoaXMuJGxheW91dC5odG1sKCksIGVtcHR5cGFyYWdyYXBoKTtcclxuICAgIH0sXHJcbiAgICBpc01vYmlsZVZpZXc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1vYmlsZU1vZGU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGJ1aWxkXHJcbiAgICBfYnVpbGRGcmFtZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hcHAuJGVsZW1lbnQuaGlkZSgpO1xyXG4gICAgICAgIHRoaXMuJGVkaXRvciA9IHRoaXMuZG9tKCc8aWZyYW1lPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1lZGl0b3ItZnJhbWUnKTtcclxuXHJcbiAgICAgICAgLy8gYXBwZW5kXHJcbiAgICAgICAgdGhpcy5hcHAuY29udGFpbmVyLmdldCgnZWRpdG9yJykuYXBwZW5kKHRoaXMuJGVkaXRvcik7XHJcblxyXG4gICAgfSxcclxuICAgIF9idWlsZEJsdXJDbGFzczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hcHAuY29udGFpbmVyLmdldCgnbWFpbicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1pbi1ibHVyJyk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkT3B0aW9uczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRlID0gdGhpcy4kZWRpdG9yO1xyXG4gICAgICAgIHZhciBvID0gdGhpcy5vcHRzLmVkaXRvcjtcclxuXHJcbiAgICAgICAgJGUuYXR0cignZGlyJywgby5kaXJlY3Rpb24pO1xyXG4gICAgICAgICRlLmF0dHIoJ3Njcm9sbGluZycsICdubycpO1xyXG4gICAgICAgICRlLmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcclxuXHJcbiAgICAgICAgaWYgKG8ubWluSGVpZ2h0KSAkZS5jc3MoJ21pbi1oZWlnaHQnLCBvLm1pbkhlaWdodCk7XHJcbiAgICAgICAgaWYgKG8ubWF4SGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICRlLmNzcygnbWF4LWhlaWdodCcsIG8ubWF4SGVpZ2h0KTtcclxuICAgICAgICAgICAgJGUuYXR0cignc2Nyb2xsaW5nJywgJ3llcycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoby5ub3RyYW5zbGF0ZSkgJGUuYWRkQ2xhc3MoJ25vdHJhbnNsYXRlJyk7XHJcbiAgICAgICAgaWYgKCFvLnNwZWxsY2hlY2spICRlLmF0dHIoJ3NwZWxsY2hlY2snLCBmYWxzZSk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkU3RhcnRIdG1sOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZG9jdHlwZSA9IHRoaXMuX2NyZWF0ZURvY3R5cGUoKTtcclxuICAgICAgICB2YXIgc2NyaXB0cyA9IHRoaXMuX2NyZWF0ZVNjcmlwdHMoKTtcclxuICAgICAgICB2YXIgbGF5b3V0ID0gJzxkaXYgY2xhc3M9XCInICsgdGhpcy5vcHRzLmVkaXRvci5jbGFzc25hbWUgKyAnXCI+PC9kaXY+JztcclxuICAgICAgICB2YXIgY29kZSA9IGRvY3R5cGUgKyAnPGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PicgKyBsYXlvdXQgKyBzY3JpcHRzICsgJzwvYm9keT48L2h0bWw+JztcclxuXHJcbiAgICAgICAgLy8gd3JpdGUgY29kZVxyXG4gICAgICAgIHRoaXMuX3dyaXRlQ29kZShjb2RlKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRMYXlvdXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkYm9keSA9IHRoaXMuZ2V0Qm9keSgpO1xyXG5cclxuICAgICAgICB0aGlzLiRsYXlvdXQgPSAkYm9keS5maW5kKCcuJyArIHRoaXMub3B0cy5lZGl0b3IuY2xhc3NuYW1lKS5maXJzdCgpO1xyXG4gICAgICAgIHRoaXMuJGxheW91dC5hdHRyKCdkaXInLCB0aGlzLm9wdHMuZWRpdG9yLmRpcmVjdGlvbik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuZWRpdG9yLnBhZGRpbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGxheW91dC5jc3MoJ3BhZGRpbmcnLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGJvZHkgaGVpZ2h0XHJcbiAgICAgICAgJGJvZHkuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZENvbnRlbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBjb250ZW50ID0gdGhpcy5fZ2V0Q29udGVudFZhbHVlKCk7XHJcblxyXG4gICAgICAgIGNvbnRlbnQgPSB0aGlzLmFwcC5icm9hZGNhc3RIdG1sKCdlZGl0b3IuYmVmb3JlLmxvYWQnLCBjb250ZW50KTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHBhcnNlZFxyXG4gICAgICAgIHZhciAkcGFyc2VkID0gdGhpcy5hcHAucGFyc2VyLnBhcnNlKGNvbnRlbnQpO1xyXG4gICAgICAgIHRoaXMuJGxheW91dC5odG1sKCRwYXJzZWQuY2hpbGRyZW4oKSk7XHJcblxyXG4gICAgICAgIC8vIHNldCB1bnBhcnNlZFxyXG4gICAgICAgIHZhciB1bnBhcnNlZCA9IHRoaXMuYXBwLnBhcnNlci51bnBhcnNlKHRoaXMuJGxheW91dC5odG1sKCkpO1xyXG4gICAgICAgIHRoaXMuYXBwLiRlbGVtZW50LnZhbCh1bnBhcnNlZCk7XHJcblxyXG4gICAgICAgIC8vIGxvYWRcclxuICAgICAgICB0aGlzLl9sb2FkKCk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkVmlzaWJpbGl0eTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kZWRpdG9yLmNzcygndmlzaWJpbGl0eScsICd2aXNpYmxlJyk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkRWRpdG9yQ3NzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5jc3MpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIGNzcztcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLm9wdHMuY3NzKSkge1xyXG4gICAgICAgICAgICBjc3MgPSB0aGlzLm9wdHMuY3NzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY3NzID0gW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRzLmNzcyArICdhcngtZnJhbWUubWluLmNzcycsXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdHMuY3NzICsgJ2FyeC1jb250ZW50Lm1pbi5jc3MnXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNzcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZENzc0xpbmsoY3NzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQ3VzdG9tQ3NzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5jdXN0b20uY3NzKSByZXR1cm47XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vcHRzLmN1c3RvbS5jc3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRDc3NMaW5rKHRoaXMub3B0cy5jdXN0b20uY3NzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQ3NzTGluazogZnVuY3Rpb24oaHJlZikge1xyXG4gICAgICAgIHZhciBvYmogPSAodHlwZW9mIGhyZWYgPT09ICdvYmplY3QnKSA/IGhyZWYgOiB7IGhyZWY6IGhyZWYgfTtcclxuICAgICAgICBvYmouaHJlZiA9IG9iai5ocmVmICsgJz8nICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICAgIC8vIGxpbmsgdGFnXHJcbiAgICAgICAgdmFyICRjc3MgPSB0aGlzLmRvbSgnPGxpbms+JykuYXR0cih7ICdjbGFzcyc6IHRoaXMucHJlZml4ICsgJy1jc3MnLCAncmVsJzogJ3N0eWxlc2hlZXQnIH0pO1xyXG5cclxuICAgICAgICAkY3NzLmF0dHIob2JqKTtcclxuXHJcbiAgICAgICAgLy8gYXBwZW5kXHJcbiAgICAgICAgdGhpcy5nZXRIZWFkKCkuYXBwZW5kKCRjc3MpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEdyaWRDc3NWYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmdyaWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIHN0eWxlID0gdGhpcy5nZXREb2NOb2RlKCkuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xyXG4gICAgICAgIHN0eWxlLnNldFByb3BlcnR5KCctLScgKyB0aGlzLnByZWZpeCArICctZ3JpZC1jb2x1bW5zJywgdGhpcy5vcHRzLmdyaWQuY29sdW1ucyk7XHJcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoJy0tJyArIHRoaXMucHJlZml4ICsgJy1ncmlkLWd1dHRlcicsIHRoaXMub3B0cy5ncmlkLmd1dHRlcik7XHJcbiAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoJy0tJyArIHRoaXMucHJlZml4ICsgJy1ncmlkLW9mZnNldC1sZWZ0JywgdGhpcy5vcHRzLmdyaWQub2Zmc2V0LmxlZnQpO1xyXG4gICAgICAgIHN0eWxlLnNldFByb3BlcnR5KCctLScgKyB0aGlzLnByZWZpeCArICctZ3JpZC1vZmZzZXQtcmlnaHQnLCB0aGlzLm9wdHMuZ3JpZC5vZmZzZXQucmlnaHQpO1xyXG5cclxuICAgICAgICAvLyBwYXR0ZXJucyBvcHRzXHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLmluaXRpYWxTZXR0aW5ncy5ncmlkICYmIHRoaXMuYXBwLmluaXRpYWxTZXR0aW5ncy5ncmlkLnBhdHRlcm5zKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0cy5ncmlkLnBhdHRlcm5zID0gdGhpcy5hcHAuaW5pdGlhbFNldHRpbmdzLmdyaWQucGF0dGVybnM7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZFBhcnNlclRhZ3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBwYXJzZXIgPSB0aGlzLm9wdHMucGFyc2VyO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwYXJzZXIpIHtcclxuICAgICAgICAgICAgLy8gYWRkIHRhZ1xyXG4gICAgICAgICAgICBpZiAocGFyc2VyW2tleV0ucGFyc2UgJiYgcGFyc2VyW2tleV0udGFnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGFnID0gcGFyc2VyW2tleV0udGFnO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdHMucGFyc2VyVGFnc1t0YWddID09PSAndW5kZWZpbmVkJykgdGhpcy5vcHRzLnBhcnNlclRhZ3NbdGFnXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRzLnBhcnNlclRhZ3NbdGFnXS5wdXNoKHBhcnNlcltrZXldLnBhcnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGREcmFnZ2FibGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkaXRlbXMgPSB0aGlzLmFwcC4kYm9keS5maW5kKCdbZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLWRyb3AtaWRdJyk7XHJcbiAgICAgICAgJGl0ZW1zLmVhY2goZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICAgICAgJG5vZGUuYXR0cignZHJhZ2dhYmxlJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICRub2RlLm9uKCdkcmFnc3RhcnQnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJHRhcmdldCA9IHRoaXMuZG9tKGUudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIHZhciBpZCA9ICR0YXJnZXQuYXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLWRyb3AtaWQnKTtcclxuICAgICAgICAgICAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERhdGEoJ2l0ZW0nLCBpZCk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGxvYWRcclxuICAgIF9sb2FkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLl9sb2FkSW1hZ2VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICRBUlguZXJyb3IoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9sb2FkZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuYXBwLnN5bmMuYnVpbGQoKTtcclxuICAgICAgICB0aGlzLmFwcC5vYnNlcnZlci5idWlsZCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmV2ZW50LmJ1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5hcHAuZW1iZWQuYnVpbGQoKTtcclxuICAgICAgICB0aGlzLmFwcC5ibG9ja3MuYnVpbGQoKTtcclxuICAgICAgICB0aGlzLmFwcC5pbWFnZS5vYnNlcnZlU3RhdGVzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2J1aWxkVmlzaWJpbGl0eSgpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkRWRpdG9yQ3NzKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRDdXN0b21Dc3MoKTtcclxuICAgICAgICB0aGlzLl9idWlsZEdyaWRDc3NWYXIoKTtcclxuICAgICAgICB0aGlzLl9idWlsZERyYWdnYWJsZSgpO1xyXG5cclxuICAgICAgICAvLyBhZGp1c3Qgb24gcmVzaXplXHJcbiAgICAgICAgdGhpcy5nZXRXaW4oKS5vbigncmVzaXplLicgKyB0aGlzLnByZWZpeCArICctZWRpdG9yLWZyYW1lJywgdGhpcy5hZGp1c3RIZWlnaHQuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnZWRpdG9yLmxvYWQnKTtcclxuXHJcbiAgICAgICAgLy8gYWRqdXN0IGhlaWdodFxyXG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5hZGp1c3RIZWlnaHQuYmluZCh0aGlzKSwgMTAwMCk7XHJcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLmFkanVzdEhlaWdodC5iaW5kKHRoaXMpLCAzMDAwKTtcclxuICAgIH0sXHJcbiAgICBfbG9hZGVkSW1hZ2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzbGVuLS07XHJcbiAgICB9LFxyXG4gICAgX2xvYWRJbWFnZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkZG9jID0gdGhpcy5nZXREb2MoKTtcclxuICAgICAgICB2YXIgJGltYWdlcyA9ICRkb2MuZmluZCgnaW1nJyk7XHJcbiAgICAgICAgdGhpcy5pbWFnZXNsZW4gPSAkaW1hZ2VzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgJGltYWdlcy5lYWNoKHRoaXMuX2xvYWRJbWFnZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB2YXIgdGltZXJJbWcgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW1hZ2VzbGVuID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkanVzdEhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lckltZyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LmJpbmQodGhpcyksIDUwKTtcclxuICAgIH0sXHJcbiAgICBfbG9hZEltYWdlOiBmdW5jdGlvbigkaW1nKSB7XHJcbiAgICAgICAgdmFyIGltZyA9ICRpbWcuZ2V0KCk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0cy5lZGl0b3IuaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgIHZhciBhcnIgPSBpbWcuc3JjLnNwbGl0KCcvJyk7XHJcbiAgICAgICAgICAgIHZhciBsYXN0ID0gYXJyW2Fyci5sZW5ndGgtMV07XHJcbiAgICAgICAgICAgIGltZy5zcmMgPSB0aGlzLm9wdHMuZWRpdG9yLmltYWdlcyArIGxhc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkaW1nLm9uZSgnbG9hZCcsIHRoaXMuX2xvYWRlZEltYWdlLmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzZXRcclxuICAgIF9zZXRGb2N1c09uU3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmVkaXRvci5mb2N1cykgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLnNldEZvY3VzKCk7XHJcbiAgICAgICAgdGhpcy5zZXRGb2N1cyh0aGlzLm9wdHMuZWRpdG9yLmZvY3VzKTtcclxuICAgIH0sXHJcbiAgICBfc2V0U2VsZWN0QWxsQ2xhc3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGVkaXRvci5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctc2VsZWN0LWFsbCcpO1xyXG4gICAgfSxcclxuICAgIF9zZXRGb2N1c0NhcmV0OiBmdW5jdGlvbihjYXJldCkge1xyXG4gICAgICAgIGNhcmV0ID0gdGhpcy5fZ2V0Q2FyZXRQb3NpdGlvbihjYXJldCk7XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX2dldEZvY3VzVGFyZ2V0KGNhcmV0KTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHRhcmdldCwgY2FyZXQpO1xyXG4gICAgfSxcclxuICAgIF9zZXRGb2N1c0V2ZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0ZvY3VzKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkQVJYLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoJEFSWC5pbnN0YW5jZXNbaV0gIT09IHRoaXMuYXBwKSB7XHJcbiAgICAgICAgICAgICAgICAkQVJYLmluc3RhbmNlc1tpXS5lZGl0b3Iuc2V0Qmx1cigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zZXRGb2N1c0NvbnRhaW5lckNsYXNzKCk7XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnZWRpdG9yLmZvY3VzJyk7XHJcbiAgICB9LFxyXG4gICAgX3NldEZvY3VzQ29udGFpbmVyQ2xhc3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ21haW4nKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctaW4tYmx1cicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1pbi1mb2N1cycpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyB1bnNldFxyXG4gICAgX3Vuc2V0Rm9jdXNDb250YWluZXJDbGFzczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hcHAuY29udGFpbmVyLmdldCgnbWFpbicpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1pbi1mb2N1cycpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1pbi1ibHVyJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGdldFxyXG4gICAgX2dldENhcmV0UG9zaXRpb246IGZ1bmN0aW9uKGNhcmV0KSB7XHJcbiAgICAgICAgcmV0dXJuIChjYXJldCA9PT0gdHJ1ZSkgPyAnc3RhcnQnIDogY2FyZXQ7XHJcbiAgICB9LFxyXG4gICAgX2dldEZvY3VzVGFyZ2V0OiBmdW5jdGlvbihjYXJldCkge1xyXG4gICAgICAgIHJldHVybiAoY2FyZXQgPT09ICdzdGFydCcpID8gdGhpcy5hcHAuYmxvY2tzLmdldEZpcnN0KCkgOiB0aGlzLmFwcC5ibG9ja3MuZ2V0TGFzdCgpO1xyXG4gICAgfSxcclxuICAgIF9nZXRDb250ZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaHRtbCA9IHRoaXMuJGxheW91dC5odG1sKCk7XHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnBhcnNlci51bnBhcnNlKGh0bWwpO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcbiAgICBfZ2V0Q29udGVudFZhbHVlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMub3B0cy5jb250ZW50KSA/IHRoaXMub3B0cy5jb250ZW50IDogdGhpcy5hcHAuJGVsZW1lbnQudmFsKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGVuYWJsZVxyXG4gICAgX2VuYWJsZVRvb2xiYXJCdXR0b25zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5hcHAuc291cmNlLmlzKCkgfHwgdGhpcy5pc01vYmlsZVZpZXcoKSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIuZW5hYmxlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHdyaXRlXHJcbiAgICBfd3JpdGVDb2RlOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgdmFyIGRvYyA9IHRoaXMuZ2V0RG9jTm9kZSgpO1xyXG4gICAgXHRkb2Mub3BlbigpO1xyXG5cdFx0ZG9jLndyaXRlKGh0bWwpO1xyXG5cdFx0ZG9jLmNsb3NlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNyZWF0ZVxyXG4gICAgX2NyZWF0ZURvY3R5cGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdHMuZWRpdG9yLmRvY3R5cGUgKyAnXFxuJztcclxuICAgIH0sXHJcbiAgICBfY3JlYXRlU2NyaXB0czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMuY3VzdG9tLmpzKSByZXR1cm4gJyc7XHJcblxyXG4gICAgICAgIHZhciBzdHIgPSAnJztcclxuICAgICAgICB2YXIgc2NyaXB0cyA9IHRoaXMub3B0cy5jdXN0b20uanM7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmogPSAodHlwZW9mIHNjcmlwdHNbaV0gPT09ICdvYmplY3QnKSA/IHNjcmlwdHNbaV0gOiB7IHNyYzogc2NyaXB0c1tpXSB9O1xyXG4gICAgICAgICAgICBvYmouc3JjID0gb2JqLnNyYyArICc/JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gc2NyaXB0IHRhZ1xyXG4gICAgICAgICAgICB2YXIgJGVsID0gdGhpcy5kb20oJzxzY3JpcHQ+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWpzJykuYXR0cihvYmopO1xyXG5cclxuICAgICAgICAgICAgLy8gYWxsIHNjcmlwdHMgc3RyXHJcbiAgICAgICAgICAgIHN0ciA9IHN0ciArICRlbC5nZXQoKS5vdXRlckhUTUw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdzb3VyY2UnLCB7XHJcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudG5hbWUgPSB0aGlzLnByZWZpeCArICctc291cmNlLWV2ZW50cyc7XHJcbiAgICAgICAgdGhpcy5fYnVpbGQoKTtcclxuICAgIH0sXHJcbiAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzKCkpIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICBlbHNlIHRoaXMub3BlbigpO1xyXG4gICAgfSxcclxuICAgIGlzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ3NvdXJjZScpLmNzcygnZGlzcGxheScpICE9PSAnbm9uZScpO1xyXG4gICAgfSxcclxuICAgIG9wZW46IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnc291cmNlLmJlZm9yZS5vcGVuJyk7XHJcblxyXG4gICAgICAgIHZhciBodG1sID0gdGhpcy5hcHAuZWRpdG9yLmdldENvbnRlbnQoKTtcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAudGlkeS5wYXJzZShodG1sKTtcclxuXHJcbiAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ2VkaXRvcicpLmhlaWdodCgpO1xyXG5cclxuICAgICAgICB0aGlzLiRzb3VyY2UuaGVpZ2h0KGhlaWdodCk7XHJcbiAgICAgICAgdGhpcy4kc291cmNlLnZhbChodG1sKTtcclxuICAgICAgICB0aGlzLiRzb3VyY2Uub24oJ2lucHV0LicgKyB0aGlzLmV2ZW50bmFtZSwgdGhpcy5faGFuZGxlQ2hhbmdlcy5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLiRzb3VyY2Uub24oJ2tleWRvd24uJyArIHRoaXMuZXZlbnRuYW1lLCB0aGlzLmFwcC5pbnB1dC5oYW5kbGVUZXh0YXJlYVRhYi5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuZWRpdG9yLnVuc2VsZWN0QWxsKCk7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ2VkaXRvcicpLmhpZGUoKTtcclxuICAgICAgICB0aGlzLmFwcC5jb250YWluZXIuZ2V0KCdzb3VyY2UnKS5zaG93KCk7XHJcblxyXG4gICAgICAgIC8vIGNvZGVtaXJyb3JcclxuICAgICAgICB2YXIgY29kZW1pcnJvciA9IHRoaXMuYXBwLmNvZGVtaXJyb3IuY3JlYXRlKHsgZWw6IHRoaXMuJHNvdXJjZSwgaGVpZ2h0OiBoZWlnaHQsIGZvY3VzOiB0cnVlIH0pO1xyXG4gICAgICAgIGlmIChjb2RlbWlycm9yKSB7XHJcbiAgICAgICAgICAgIGNvZGVtaXJyb3Iub24oJ2NoYW5nZScsIHRoaXMuX2hhbmRsZUNoYW5nZXMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB1aVxyXG4gICAgICAgIHRoaXMuYXBwLnBhdGguZGlzYWJsZSgpO1xyXG4gICAgICAgIHRoaXMuYXBwLnRvcGJhci5kaXNhYmxlKCk7XHJcbiAgICAgICAgdGhpcy5hcHAudG9vbGJhci5kaXNhYmxlKCk7XHJcbiAgICAgICAgdGhpcy5hcHAudG9vbGJhci5kaXNhYmxlU3RpY2t5KCk7XHJcbiAgICAgICAgdGhpcy5hcHAudG9vbGJhci5zZXRUb2dnbGVkKCdodG1sJyk7XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnc291cmNlLm9wZW4nKTtcclxuICAgIH0sXHJcbiAgICBjbG9zZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdzb3VyY2UuYmVmb3JlLmNsb3NlJyk7XHJcblxyXG4gICAgICAgIHZhciBodG1sID0gdGhpcy5nZXRDb250ZW50KCk7XHJcbiAgICAgICAgdGhpcy5hcHAuY29kZW1pcnJvci5kZXN0cm95KCk7XHJcblxyXG4gICAgICAgIHRoaXMuJHNvdXJjZS5vZmYoJy4nICsgdGhpcy5ldmVudG5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLmFwcC5jb250YWluZXIuZ2V0KCdzb3VyY2UnKS5oaWRlKCk7XHJcbiAgICAgICAgdGhpcy5hcHAuY29udGFpbmVyLmdldCgnZWRpdG9yJykuc2hvdygpO1xyXG5cclxuICAgICAgICAvLyBzZXQgY29kZVxyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci5zZXRDb250ZW50KHsgaHRtbDogaHRtbCwgY2FyZXQ6IGZhbHNlIH0pO1xyXG5cclxuICAgICAgICAvLyB1aVxyXG4gICAgICAgIHRoaXMuYXBwLnBhdGguZW5hYmxlKCk7XHJcbiAgICAgICAgdGhpcy5hcHAudG9wYmFyLmVuYWJsZSgpO1xyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIuZW5hYmxlKCk7XHJcbiAgICAgICAgdGhpcy5hcHAudG9vbGJhci5lbmFibGVTdGlja3koKTtcclxuICAgICAgICB0aGlzLmFwcC50b29sYmFyLnVuc2V0VG9nZ2xlZCgnaHRtbCcpO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ3NvdXJjZS5jbG9zZScpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZTogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHZhciBmdW5jID0gKHRoaXMuYXBwLmVkaXRvci5pc1RleHRhcmVhKCkpID8gJ3ZhbCcgOiAnaHRtbCc7XHJcbiAgICAgICAgdGhpcy5hcHAuJGVsZW1lbnRbZnVuY10oaHRtbCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0Q29udGVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLiRzb3VyY2UudmFsKCk7XHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvZGVtaXJyb3IudmFsKGh0bWwpO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2J1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRzb3VyY2UgPSB0aGlzLmRvbSgnPHRleHRhcmVhPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1zb3VyY2UnKTtcclxuICAgICAgICB0aGlzLiRzb3VyY2UuYXR0cignZGF0YS1ncmFtbV9lZGl0b3InLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ3NvdXJjZScpLmFwcGVuZCh0aGlzLiRzb3VyY2UpO1xyXG4gICAgfSxcclxuICAgIF9oYW5kbGVDaGFuZ2VzOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLmdldENvbnRlbnQoKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGUoaHRtbCk7XHJcbiAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdzb3VyY2UuY2hhbmdlJywgeyBlOiBlIH0pO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdwbGFjZWhvbGRlcicsIHtcclxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy4kbGF5b3V0ID0gdGhpcy5hcHAuZWRpdG9yLmdldExheW91dCgpO1xyXG5cclxuICAgICAgICAvLyBidWlsZFxyXG4gICAgICAgIHRoaXMuX2J1aWxkKCk7XHJcbiAgICB9LFxyXG4gICAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAodGhpcy5kb20oZS50YXJnZXQpLmhhc0NsYXNzKHRoaXMucHJlZml4ICsgJy1wbGFjZWhvbGRlcicpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmVkaXRvci5zZXRGb2N1cygnc3RhcnQnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5wbGFjZWhvbGRlciAmJiB0aGlzLmFwcC5lZGl0b3IuaXNFbXB0eSh0cnVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzaG93OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRsYXlvdXQuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBsYWNlaG9sZGVyJyk7XHJcbiAgICB9LFxyXG4gICAgaGlkZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kbGF5b3V0LnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1wbGFjZWhvbGRlcicpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpcyA9ICh0aGlzLm9wdHMucGxhY2Vob2xkZXIgIT09IGZhbHNlIHx8IHRoaXMuYXBwLiRlbGVtZW50LmF0dHIoJ3BsYWNlaG9sZGVyJykpO1xyXG4gICAgICAgIGlmICghaXMpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIHRleHQgPSAodGhpcy5vcHRzLnBsYWNlaG9sZGVyICE9PSBmYWxzZSkgPyB0aGlzLm9wdHMucGxhY2Vob2xkZXIgOiB0aGlzLmFwcC4kZWxlbWVudC5hdHRyKCdwbGFjZWhvbGRlcicpO1xyXG4gICAgICAgIHRoaXMuJGxheW91dC5hdHRyKCdwbGFjZWhvbGRlcicsIHRleHQpO1xyXG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ2FjY2Vzc2liaWxpdHknLCB7XHJcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRSb2xlKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRMYWJlbCgpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZFJvbGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci5nZXRGcmFtZSgpLmF0dHIoeyAnYXJpYS1sYWJlbGxlZGJ5JzogdGhpcy5wcmVmaXggKyAnLXZvaWNlJywgJ3JvbGUnOiAncHJlc2VudGF0aW9uJyB9KTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRMYWJlbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLmxhbmcuZ2V0KCdhY2Nlc3NpYmlsaXR5LmhlbHAtbGFiZWwnKTtcclxuICAgICAgICB2YXIgJGxhYmVsID0gdGhpcy5fY3JlYXRlTGFiZWwoaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIGFwcGVuZFxyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ21haW4nKS5wcmVwZW5kKCRsYWJlbCk7XHJcbiAgICB9LFxyXG4gICAgX2NyZWF0ZUxhYmVsOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKCc8c3BhbiAvPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy12b2ljZS1sYWJlbCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cih7ICdpZCc6IHRoaXMucHJlZml4ICsgJy12b2ljZS0nICsgdGhpcy51dWlkLCAnYXJpYS1oaWRkZW4nOiBmYWxzZSB9KVxyXG4gICAgICAgICAgICAgICAgLmh0bWwoaHRtbCk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ29ic2VydmVyJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudHJpZ2dlciA9IHRydWU7XHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh3aW5kb3cuTXV0YXRpb25PYnNlcnZlcikge1xyXG4gICAgICAgICAgICB2YXIgZWwgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCkuZ2V0KCk7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSB0aGlzLl9idWlsZChlbCk7XHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZShlbCwge1xyXG4gICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9ic2VydmVyKSB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICB0aGlzLnRyaWdnZXIgPSB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbihtdXRhdGlvbnMpIHtcclxuICAgICAgICAgICAgc2VsZi5fb2JzZXJ2ZShtdXRhdGlvbnNbbXV0YXRpb25zLmxlbmd0aC0xXSwgZWwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIF9vYnNlcnZlOiBmdW5jdGlvbihtdXRhdGlvbiwgZWwpIHtcclxuICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2F0dHJpYnV0ZXMnICYmIG11dGF0aW9uLnRhcmdldCA9PT0gZWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc3luY1xyXG4gICAgICAgIGlmICh0aGlzLnRyaWdnZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmFkanVzdEhlaWdodCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ29ic2VydmVyLmNoYW5nZScpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5wbGFjZWhvbGRlci50b2dnbGUoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuc3luYy50cmlnZ2VyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICd1dGlscycsIHtcclxuXHJcbiAgICAvLyBpbnZpc2libGUgY2hhcnNcclxuICAgIGNyZWF0ZUludmlzaWJsZUNoYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLm9wdHMubWFya2VyQ2hhcik7XHJcbiAgICB9LFxyXG4gICAgc2VhcmNoSW52aXNpYmxlQ2hhcnM6IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiBzdHIuc2VhcmNoKC9eXFx1RkVGRiQvZyk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlSW52aXNpYmxlQ2hhcnM6IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvXFx1RkVGRi9nLCAnJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHdyYXBwZXJcclxuICAgIHdyYXA6IGZ1bmN0aW9uKGh0bWwsIGZ1bmMpIHtcclxuICAgICAgICB2YXIgJHcgPSB0aGlzLmRvbSgnPGRpdj4nKS5odG1sKGh0bWwpO1xyXG4gICAgICAgIGZ1bmMoJHcpO1xyXG5cclxuICAgICAgICBodG1sID0gJHcuaHRtbCgpO1xyXG4gICAgICAgICR3LnJlbW92ZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gYXJyYXlzXHJcbiAgICBleHRlbmRBcnJheTogZnVuY3Rpb24oYXJyLCBleHRlbmQpIHtcclxuICAgICAgICBhcnIgPSBhcnIuY29uY2F0KGFycik7XHJcbiAgICAgICAgaWYgKGV4dGVuZCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCA7IGkgPCBleHRlbmQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGFyci5wdXNoKGV4dGVuZFtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlRnJvbUFycmF5QnlWYWx1ZTogZnVuY3Rpb24oYXJyLCB2YWwpIHtcclxuICAgICAgICB2YWwgPSAoQXJyYXkuaXNBcnJheSh2YWwpKSA/IHZhbCA6IFt2YWxdO1xyXG4gICAgICAgIHZhciBpbmRleDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpbmRleCA9IGFyci5pbmRleE9mKHZhbFtpXSk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSBhcnIuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH0sXHJcbiAgICBzdW1PZkFycmF5OiBmdW5jdGlvbihhcnIpIHtcclxuICAgICAgICByZXR1cm4gYXJyLnJlZHVjZShmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChhKSArIHBhcnNlSW50KGIpO1xyXG4gICAgICAgIH0sIDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBvYmplY3RcclxuICAgIGdldE9iamVjdEluZGV4OiBmdW5jdGlvbihvYmosIGtleSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmluZGV4T2Yoa2V5KTtcclxuICAgIH0sXHJcbiAgICBpbnNlcnRUb09iamVjdDogZnVuY3Rpb24gKGtleSwgdmFsdWUsIG9iaiwgcG9zKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uKGFjLCBhLCBpKSB7XHJcbiAgICAgICAgICAgIGlmIChpID09PSBwb3MpIGFjW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgYWNbYV0gPSBvYmpbYV07XHJcbiAgICAgICAgICAgIHJldHVybiBhYztcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHJhbmRvbVxyXG4gICAgZ2V0UmFuZG9tSWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpZCA9ICcnO1xyXG4gICAgICAgIHZhciBwb3NzaWJsZSA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEyOyBpKyspIHtcclxuICAgICAgICAgICAgaWQgKz0gcG9zc2libGUuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlLmxlbmd0aCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBlc2NhcGVcclxuICAgIGVzY2FwZVJlZ0V4cDogZnVuY3Rpb24ocykge1xyXG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1stL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gc3RyaW5nXHJcbiAgICBjYXBpdGFsaXplOiBmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZGF0YVxyXG4gICAgZXh0ZW5kRGF0YTogZnVuY3Rpb24oZGF0YSwgb2JqKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnZWxlbWVudHMnKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5fZXh0ZW5kRGF0YUVsZW1lbnRzKGRhdGEsIG9ialtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9zZXREYXRhKGRhdGEsIGtleSwgb2JqW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH0sXHJcbiAgICBfZXh0ZW5kRGF0YUVsZW1lbnRzOiBmdW5jdGlvbihkYXRhLCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuZG9tKHZhbHVlKS5lYWNoKGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgICAgIGlmICgkbm9kZS5nZXQoKS50YWdOYW1lID09PSAnRk9STScpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZXJpYWxpemVkRGF0YSA9ICRub2RlLnNlcmlhbGl6ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHogaW4gc2VyaWFsaXplZERhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5fc2V0RGF0YShkYXRhLCB6LCBzZXJpYWxpemVkRGF0YVt6XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9ICgkbm9kZS5hdHRyKCduYW1lJykpID8gJG5vZGUuYXR0cignbmFtZScpIDogJG5vZGUuYXR0cignaWQnKTtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9zZXREYXRhKGRhdGEsIG5hbWUsICRub2RlLnZhbCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSxcclxuICAgIF9zZXREYXRhOiBmdW5jdGlvbihkYXRhLCBuYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRm9ybURhdGEpIGRhdGEuYXBwZW5kKG5hbWUsIHZhbHVlKTtcclxuICAgICAgICBlbHNlIGRhdGFbbmFtZV0gPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ2NvbnRlbnQnLCB7XHJcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9zZWxlY3RvcnMgPSB7XHJcbiAgICAgICAgICAgIGNvZGU6IFsncHJlJywgJ2NvZGUnXSxcclxuICAgICAgICAgICAgZW1iZWQ6IFsnZmlndXJlJ10sXHJcbiAgICAgICAgICAgIG5vbmVkaXRhYmxlOiBbJy4nICsgdGhpcy5vcHRzLm5vbmVkaXRhYmxlLmNsYXNzbmFtZV0sXHJcbiAgICAgICAgICAgIGltYWdlczogWydpbWcnXSxcclxuICAgICAgICAgICAgbGlua3M6IFsnYSddXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcGFyYWdyYXBoaXplXHJcbiAgICBwYXJhZ3JhcGhpemU6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHAucGFyYWdyYXBoaXplci5wYXJhZ3JhcGhpemUoaHRtbCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGVuY29kZVxyXG4gICAgZW5jb2RlRW50aXRpZXM6IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlY29kZUVudGl0aWVzKHN0cikucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKTtcclxuICAgIH0sXHJcbiAgICBlbmNvZGVDb2RlOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgLy8gcmVwbGFjZSBhbGwgdGFnc1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzwoLio/KT4vZ2ksICd4dGFnc3RhcnR6JDF4dGFnZW5keicpO1xyXG5cclxuICAgICAgICAvLyByZXZlcnQgcHJlIC8gY29kZVxyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL3h0YWdzdGFydHpwcmUoLio/KXh0YWdlbmR6L2csICc8cHJlJDE+Jyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgveHRhZ3N0YXJ0emNvZGUoLio/KXh0YWdlbmR6L2csICc8Y29kZSQxPicpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL3h0YWdzdGFydHpcXC9jb2RleHRhZ2VuZHovZywgJzwvY29kZT4nKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC94dGFnc3RhcnR6XFwvcHJleHRhZ2VuZHovZywgJzwvcHJlPicpO1xyXG5cclxuICAgICAgICAvLyBlbmNvZGVcclxuICAgICAgICBodG1sID0gdGhpcy5fZW5jb2RlQ29kZShodG1sKTtcclxuXHJcbiAgICAgICAgLy8gcmV2ZXJ0IGFsbCB0YWdzXHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgveHRhZ3N0YXJ0eiguKj8peHRhZ2VuZHovZywgJzwkMT4nKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC94dGFnc3RhcnR6XFwvKC4qPyl4dGFnZW5kei9nLCAnPC8kMT4nKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGRlY29kZVxyXG4gICAgZGVjb2RlRW50aXRpZXM6IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmcoc3RyKS5yZXBsYWNlKC8mbHQ7L2csICc8JykucmVwbGFjZSgvJmd0Oy9nLCAnPicpLnJlcGxhY2UoLyZxdW90Oy9nLCAnXCInKS5yZXBsYWNlKC8mYW1wOy9nLCAnJicpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzYW5pdGl6ZVxyXG4gICAgc2FuaXRpemU6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAudXRpbHMud3JhcChodG1sLCBmdW5jdGlvbigkdykge1xyXG4gICAgICAgICAgICAkdy5maW5kKCdbc3JjXScpLmVhY2godGhpcy5fc2FuaXRpemVTcmMpO1xyXG4gICAgICAgICAgICAkdy5maW5kKCdhJykuZWFjaCh0aGlzLl9zYW5pdGl6ZUhyZWYpO1xyXG4gICAgICAgICAgICAkdy5maW5kKCdhLGIsaSxzdmcsaW1nLGRldGFpbHMnKS5lYWNoKHRoaXMuX3Nhbml0aXplRXZlbnRzKTtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZXNjYXBlXHJcbiAgICBlc2NhcGVIdG1sOiBmdW5jdGlvbihzdHIpIHtcclxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKS5yZXBsYWNlKC88L2csIFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKS5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKS5yZXBsYWNlKC8nL2csIFwiJiMwMzk7XCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzdG9yZSAvIHJlc3RvcmVcclxuICAgIHN0b3JlOiBmdW5jdGlvbihodG1sLCBuYW1lLCBzdG9yZWQsIHN0b3JlZEluZGV4KSB7XHJcbiAgICAgICAgdmFyIHNlbGVjdG9ycyA9IHRoaXMuX3NlbGVjdG9yc1tuYW1lXTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgbWF0Y2hlZCA9IHRoaXMuX2dldEVsZW1lbnRzRnJvbUh0bWwoaHRtbCwgc2VsZWN0b3JzW2ldKTtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuX3N0b3JlKGh0bWwsIG5hbWUsIG1hdGNoZWQsIHN0b3JlZCwgc3RvcmVkSW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9LFxyXG4gICAgcmVzdG9yZTogZnVuY3Rpb24oaHRtbCwgbmFtZSwgc3RvcmVkKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdG9yZWRbbmFtZV0gPT09ICd1bmRlZmluZWQnKSByZXR1cm4gaHRtbDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0b3JlZFtuYW1lXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCcjIyMjXycgKyBuYW1lICsgaSArICdfIyMjIycsIHN0b3JlZFtuYW1lXVtpXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcbiAgICBzdG9yZUNvbW1lbnRzOiBmdW5jdGlvbihodG1sLCBzdG9yZWRDb21tZW50cykge1xyXG4gICAgICAgIHZhciBjb21tZW50cyA9IGh0bWwubWF0Y2gobmV3IFJlZ0V4cCgnPCEtLShbXFxcXHdcXFxcV10qPyktLT4nLCAnZ2knKSk7XHJcbiAgICAgICAgaWYgKGNvbW1lbnRzID09PSBudWxsKSByZXR1cm4gaHRtbDtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21tZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKGNvbW1lbnRzW2ldLCAnIyMjIyN4c3RhcnRodG1sY29tbWVudHp6JyArIGkgKyAneGVuZGh0bWxjb21tZW50enojIyMjIycpO1xyXG4gICAgICAgICAgICBzdG9yZWRDb21tZW50cy5wdXNoKGNvbW1lbnRzW2ldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfSxcclxuICAgIHJlc3RvcmVDb21tZW50czogZnVuY3Rpb24oaHRtbCwgc3RvcmVkQ29tbWVudHMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0b3JlZENvbW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBzdHIgPSBzdG9yZWRDb21tZW50c1tpXS5yZXBsYWNlKC9cXCQvZ2ksICcmIzM2OycpO1xyXG4gICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCcjIyMjI3hzdGFydGh0bWxjb21tZW50enonICsgaSArICd4ZW5kaHRtbGNvbW1lbnR6eiMjIyMjJywgc3RyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjYWNoZSAvIHJlY2FjaGVcclxuICAgIGNhY2hlU3R5bGU6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLm9wdHMudGFncy5ibG9jay5qb2luKCcsJykgKyAnLGltZywnICsgdGhpcy5vcHRzLnRhZ3MuaW5saW5lLmpvaW4oJywnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgJHcuZmluZChzZWxlY3RvcikuZWFjaCh0aGlzLl9jYWNoZVN0eWxlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgcmVjYWNoZVN0eWxlOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgJHcuZmluZCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy1zdHlsZS1jYWNoZV0nKS5lYWNoKHRoaXMuX3JlY2FjaGVTdHlsZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBhZGRcclxuICAgIGFkZE5vZm9sbG93OiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMubGluay5ub2ZvbGxvdykgcmV0dXJuIGh0bWw7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJ2EnKS5hdHRyKCdyZWwnLCAnbm9mb2xsb3cnKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBhZGRIdHRwczogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmVkaXRvci5odHRwcykge1xyXG4gICAgICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoJ2hyZWY9XCJodHRwOi8vJywgJ2hyZWY9XCJodHRwczovLycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoJ3NyYz1cImh0dHA6Ly8nLCAnc3JjPVwiaHR0cHM6Ly8nKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCdzcmNzZXQ9XCJodHRwOi8vJywgJ3NyY3NldD1cImh0dHBzOi8vJyk7XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfSxcclxuICAgIGFkZFNwYWNlVG9CbG9ja3M6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC88XFwvKGRpdnxsaXxkdHxkZHx0ZHxwfEhbMS02XSk+XFxuPy9naSwgJzwvJDE+ICcpO1xyXG4gICAgfSxcclxuICAgIGFkZEJyVG9CbG9ja3M6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC88XFwvKGRpdnxsaXxkdHxkZHx0ZHxwfEhbMS02XSk+XFxuPy9naSwgJzwvJDE+PGJyPicpO1xyXG4gICAgfSxcclxuICAgIGFkZEVtcHR5QnV0dG9uOiBmdW5jdGlvbigkZWwpIHtcclxuICAgICAgICBpZiAoJGVsLmhhc0NsYXNzKHRoaXMucHJlZml4ICsgJy1lbXB0eS1sYXllcicpKSByZXR1cm47XHJcblxyXG4gICAgICAgICRlbC5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctZW1wdHktbGF5ZXInKTtcclxuXHJcbiAgICAgICAgdmFyICRwbHVzID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wbHVzLWJ1dHRvbicpO1xyXG5cclxuICAgICAgICAvLyBidXR0b25cclxuICAgICAgICB0aGlzLmFwcC5jcmVhdGUoJ2J1dHRvbicsIHsgbmFtZTogJ3BsdXMnLCBlbGVtZW50OiAkcGx1cyB9LCB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnIH0pO1xyXG5cclxuICAgICAgICAvLyBhcHBlbmRcclxuICAgICAgICAkZWwuYXBwZW5kKCRwbHVzKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZml4XHJcbiAgICBmaXhMaXN0TWFyZ2luOiBmdW5jdGlvbigkYmxvY2spIHtcclxuICAgICAgICB2YXIgbWwgPSBwYXJzZUludCgkYmxvY2suY3NzKCdtYXJnaW4tbGVmdCcpKTtcclxuICAgICAgICBpZiAobWwgIT09IDApIHtcclxuICAgICAgICAgICAgdmFyIHBsID0gcGFyc2VJbnQoJGJsb2NrLmNzcygncGFkZGluZy1sZWZ0JykpO1xyXG4gICAgICAgICAgICAkYmxvY2suY3NzKHsgJ21hcmdpbi1sZWZ0JzogMCwgJ3BhZGRpbmctbGVmdCc6IChwbCArIG1sKSArICdweCcgfSk7XHJcbiAgICAgICAgICAgICRibG9jay5hdHRyKHRoaXMucHJlZml4ICsgJy1saXN0LWxlZnQnLCBtbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHVuZml4TGlzdE1hcmdpbjogZnVuY3Rpb24oJGJsb2NrKSB7XHJcbiAgICAgICAgaWYgKCRibG9jay5hdHRyKHRoaXMucHJlZml4ICsgJy1saXN0LWxlZnQnKSkge1xyXG4gICAgICAgICAgICAkYmxvY2suY3NzKHsgJ3BhZGRpbmctbGVmdCc6ICcnLCAnbWFyZ2luLWxlZnQnOiAnJyB9KTtcclxuICAgICAgICAgICAgJGJsb2NrLnJlbW92ZUF0dHIodGhpcy5wcmVmaXggKyAnLWxpc3QtbGVmdCcpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gZ2V0XHJcbiAgICBnZXRUZXh0OiBmdW5jdGlvbiAobikge1xyXG4gICAgICAgIHZhciBydiA9ICcnO1xyXG5cclxuICAgICAgICBpZiAobi5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICBydiA9IG4ubm9kZVZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHJ2ICs9IHRoaXMuZ2V0VGV4dChuLmNoaWxkTm9kZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZCA9IChuLm5vZGVUeXBlID09PSAxKSA/IGdldENvbXB1dGVkU3R5bGUobikuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpIDogJyc7XHJcbiAgICAgICAgICAgIGlmIChkLm1hdGNoKC9eYmxvY2svKSB8fCBkLm1hdGNoKC9saXN0LykgfHwgbi50YWdOYW1lID09PSAnQlInIHx8IG4udGFnTmFtZSA9PT0gJ0hSJykge1xyXG4gICAgICAgICAgICAgICAgcnYgKz0gXCJcXG5cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJ2O1xyXG4gICAgfSxcclxuICAgIGdldFRleHRGcm9tSHRtbDogZnVuY3Rpb24oaHRtbCwgcGFyYW1zKSB7XHJcbiAgICAgICAgdmFyIHN0b3JlZCA9IHt9O1xyXG4gICAgICAgIHZhciBzdG9yZWRJbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICBicjogZmFsc2UsXHJcbiAgICAgICAgICAgIG5sOiBmYWxzZSxcclxuICAgICAgICAgICAgdHJpbWxpbmVzOiB0cnVlLFxyXG4gICAgICAgICAgICBpbWFnZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICBsaW5rczogZmFsc2VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBwYXJhbXMgPSAkQVJYLmV4dGVuZCh7fSwgZGVmYXVsdHMsIHBhcmFtcyk7XHJcblxyXG4gICAgICAgIGh0bWwgPSB0aGlzLnN0b3JlKGh0bWwsICdjb2RlJywgc3RvcmVkLCBzdG9yZWRJbmRleCk7XHJcbiAgICAgICAgaHRtbCA9IChwYXJhbXMubGlua3MpID8gdGhpcy5zdG9yZShodG1sLCAnbGlua3MnLCBzdG9yZWQsIHN0b3JlZEluZGV4KSA6IGh0bWw7XHJcbiAgICAgICAgaHRtbCA9IChwYXJhbXMuaW1hZ2VzKSA/IHRoaXMuc3RvcmUoaHRtbCwgJ2ltYWdlcycsIHN0b3JlZCwgc3RvcmVkSW5kZXgpIDogaHRtbDtcclxuXHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPCh1bHxvbCk+XFxzKzxsaT4vZ2ksICc8JDE+PGxpPicpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxsaVtePl0qPlxcbi9naSwgJzxsaSQxPicpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxwW14+XSo+KFxccyt8KTxcXC9wPi9naSwgJ3hlbXB0eXonKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88IS0tW1xcc1xcU10qPy0tPi9naSwgJycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxzdHlsZVtcXHNcXFNdKj9zdHlsZT4vZ2ksICcnKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88c2NyaXB0W1xcc1xcU10qP3NjcmlwdD4vZ2ksICcnKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88XFwvKGRpdnxsaXxkdHxkZHx0ZHxwfEhbMS02XSk+XFxuPy9naSwgJzwvJDE+XFxuJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvJihsdHxndCk7L2dpLCAneCQxeicpO1xyXG5cclxuICAgICAgICB2YXIgJHRtcCA9IHRoaXMuZG9tKCc8ZGl2PicpLmh0bWwoaHRtbCk7XHJcblxyXG4gICAgICAgIGh0bWwgPSB0aGlzLmdldFRleHQoJHRtcC5nZXQoKSk7XHJcblxyXG4gICAgICAgIC8vIHRyaW0gbGluZXNcclxuICAgICAgICBpZiAocGFyYW1zLnRyaW1saW5lcykge1xyXG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XHJcbiAgICAgICAgICAgIHZhciBhcnIgPSBodG1sLnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc3RyICs9IGFycltpXS50cmltKCkgKyAnXFxuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBodG1sID0gc3RyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvW1xcbl0rL2csIFwiXFxuXCIpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoJ3hlbXB0eXonLCBcIlxcblwiKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC94KGx0fGd0KXovZ2ksICcmJDE7Jyk7XHJcblxyXG4gICAgICAgIC8vIGtlZXAgbmV3bGluZXNcclxuICAgICAgICBpZiAocGFyYW1zLmJyKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL1xcbi9nLCBcIjxicj5cXG5cIik7XHJcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxiclxccz9cXC8/Plxcbj8kL2dpLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBodG1sID0gKHBhcmFtcy5ubCkgPyBodG1sIDogaHRtbC5yZXBsYWNlKC9cXG4vZ2ksICcgJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBodG1sID0gdGhpcy5yZXN0b3JlKGh0bWwsICdjb2RlJywgc3RvcmVkKTtcclxuICAgICAgICBodG1sID0gKHBhcmFtcy5saW5rcykgPyB0aGlzLnJlc3RvcmUoaHRtbCwgJ2xpbmtzJywgc3RvcmVkKSA6IGh0bWw7XHJcbiAgICAgICAgaHRtbCA9IChwYXJhbXMuaW1hZ2VzKSA/IHRoaXMucmVzdG9yZShodG1sLCAnaW1hZ2VzJywgc3RvcmVkKSA6IGh0bWw7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPHByZVtePl0qPi9nLCAnJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPGNvZGVbXj5dKj4vZywgJycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxcXC9wcmU+XFxuPy9nLCAnJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPFxcL2NvZGU+L2csICcnKTtcclxuXHJcbiAgICAgICAgaWYgKCFwYXJhbXMuaW1hZ2VzKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxpbWdbXFxzXFxTXSo/Pi9naSwgJycpO1xyXG4gICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88YVtePl0qPihcXHMrfCk8XFwvYT4vZ2ksICcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sLnRyaW0oKTtcclxuXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGV4dHJhY3RcclxuICAgIGV4dHJhY3RIdG1sRnJvbUNhcmV0OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5kb20oZWwpLmdldCgpO1xyXG4gICAgICAgIHZhciByYW5nZSA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG4gICAgICAgIGlmIChyYW5nZSkge1xyXG4gICAgICAgICAgICB2YXIgY2xvbmVkID0gcmFuZ2UuY2xvbmVSYW5nZSgpO1xyXG4gICAgICAgICAgICBjbG9uZWQuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xyXG4gICAgICAgICAgICBjbG9uZWQuc2V0U3RhcnQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNsb25lZC5leHRyYWN0Q29udGVudHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGlzXHJcbiAgICBpc0VtcHR5SHRtbDogZnVuY3Rpb24oaHRtbCwgZW1wdHlwYXJhZ3JhcGgpIHtcclxuICAgICAgICBodG1sID0gaHRtbC50cmltKCk7XHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnV0aWxzLnJlbW92ZUludmlzaWJsZUNoYXJzKGh0bWwpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL14mbmJzcDskL2dpLCAnMScpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLyZuYnNwOy9naSwgJycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxcXC8/YnJcXHM/XFwvPz4vZywgJycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL1xccy9nLCAnJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvXjxwPlxcc1xcUzxcXC9wPiQvaSwgJycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxociguKj9bXj5dKT4kL2ksICdocicpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxpZnJhbWUoLio/W14+XSk+JC9pLCAnaWZyYW1lJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPHNvdXJjZSguKj9bXj5dKT4kL2ksICdzb3VyY2UnKTtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIGNvbW1lbnRzXHJcbiAgICAgICAgaHRtbCA9IHRoaXMucmVtb3ZlQ29tbWVudHMoaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBlbXB0eSB0YWdzXHJcbiAgICAgICAgaHRtbCA9IChlbXB0eXBhcmFncmFwaCkgPyBodG1sLnJlcGxhY2UoLzxwW14+XSo+PFxcL3A+L2dpLCAnJykgOiBodG1sO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxbXi8+XT48XFwvW14+XSs+L2dpLCAnJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPFteLz5dPjxcXC9bXj5dKz4vZ2ksICcnKTtcclxuXHJcbiAgICAgICAgLy8gdHJpbVxyXG4gICAgICAgIGh0bWwgPSBodG1sLnRyaW0oKTtcclxuXHJcblxyXG4gICAgICAgIHJldHVybiAoaHRtbCA9PT0gJycpO1xyXG4gICAgfSxcclxuICAgIGlzTGluZTogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9IGh0bWw7XHJcblxyXG4gICAgICAgIHJldHVybiAodGhpcy5kb20oZWxlbWVudCkuZmluZCh0aGlzLm9wdHMudGFncy5ibG9jay5qb2luKCcsJykgKyAnLGltZycpLmxlbmd0aCA9PT0gMCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGRyb3BcclxuICAgIGRyb3A6IGZ1bmN0aW9uKGUsIGh0bWwsIHBvc2l0aW9uLCBjbGVhbkRyb3ApIHtcclxuICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5hcHAuZWxlbWVudC5nZXREYXRhQmxvY2soZS50YXJnZXQpO1xyXG4gICAgICAgIHRhcmdldCA9ICh0YXJnZXQubGVuZ3RoID09PSAwKSA/IHRoaXMuYXBwLmJsb2Nrcy5nZXRGaXJzdCgpIDogdGFyZ2V0O1xyXG5cclxuICAgICAgICAvLyBzZXQgdGFyZ2V0XHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHRhcmdldCk7XHJcblxyXG4gICAgICAgIC8vIGRyb3AgcG9pbnRcclxuICAgICAgICBpZiAoIXBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnRQb2ludChlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBjbGVhbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHBhcnNlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcbiAgICAgICAgdmFyIGlzQWxsID0gdGhpcy5hcHAuZWRpdG9yLmlzQWxsU2VsZWN0ZWQoKTtcclxuICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuZ2V0VHlwZSgpID09PSAnY29kZScgJiYgIWlzQWxsKSB7XHJcbiAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHBhcnNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLmdldFRleHRGcm9tSHRtbChodG1sLCB7IG5sOiB0cnVlLCB0cmltbGluZXM6IGZhbHNlIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNsZWFuRHJvcCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGVtcHR5XHJcbiAgICAgICAgaWYgKGh0bWwgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGF1dG9saW5rXHJcbiAgICAgICAgaHRtbCA9IChjbGVhbikgPyB0aGlzLmFwcC5hdXRvbGluay5wYXJzZShodG1sKSA6IGh0bWw7XHJcblxyXG4gICAgICAgIC8vIGluc2VydFxyXG4gICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnRDb250ZW50KHsgaHRtbDogaHRtbCwgY2xlYW46IGNsZWFuLCBwYXJzZTogcGFyc2UsIHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcGFzdGVcclxuICAgIHBhc3RlOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5hcHAuYnJvYWRjYXN0KCdlZGl0b3IuYmVmb3JlLnBhc3RlJywgeyBlOiBlIH0pO1xyXG4gICAgICAgIGlmIChldmVudC5pc1N0b3BwZWQoKSkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICB2YXIgY2xpcGJvYXJkID0gZS5jbGlwYm9hcmREYXRhO1xyXG5cclxuICAgICAgICAvLyBpbWFnZVxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5pbWFnZS5pbnNlcnRGcm9tQ2xpcGJvYXJkKGNsaXBib2FyZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaHRtbCAvIHRleHRcclxuICAgICAgICB2YXIgdXJsID0gY2xpcGJvYXJkLmdldERhdGEoJ1VSTCcpO1xyXG4gICAgICAgIHZhciBodG1sID0gdGhpcy5hcHAuY2xpcGJvYXJkLmdldENvbnRlbnQoY2xpcGJvYXJkKTtcclxuXHJcbiAgICAgICAgLy8gZ2V0IHNhZmFyaSBhbmNob3IgbGlua3NcclxuICAgICAgICBodG1sID0gKCF1cmwgfHwgdXJsID09PSAnJykgPyBodG1sIDogdXJsO1xyXG5cclxuICAgICAgICAvLyBjbGVhblxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIHZhciBjbGVhbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHBhcnNlID0gdHJ1ZTtcclxuICAgICAgICB2YXIgaXNBbGwgPSB0aGlzLmFwcC5lZGl0b3IuaXNBbGxTZWxlY3RlZCgpO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdHMucGFzdGUucGxhaW50ZXh0KSB7XHJcbiAgICAgICAgICAgIGNsZWFuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHBhcnNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLmdldFRleHRGcm9tSHRtbChodG1sLCB7IGJyOiB0cnVlIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5nZXRUeXBlKCkgPT09ICdjb2RlJyAmJiAhaXNBbGwpIHtcclxuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgcGFyc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuZ2V0VGV4dEZyb21IdG1sKGh0bWwsIHsgbmw6IHRydWUsIHRyaW1saW5lczogZmFsc2UgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBlbXB0eVxyXG4gICAgICAgIGlmIChodG1sID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhdXRvbGlua1xyXG4gICAgICAgIGh0bWwgPSAoY2xlYW4pID8gdGhpcy5hcHAuYXV0b2xpbmsucGFyc2UoaHRtbCkgOiBodG1sO1xyXG5cclxuICAgICAgICAvLyBpbnNlcnRcclxuICAgICAgICB2YXIgaW5zZXJ0ZWQgPSB0aGlzLmFwcC5pbnNlcnRpb24uaW5zZXJ0Q29udGVudCh7IGh0bWw6IGh0bWwsIGNsZWFuOiBjbGVhbiwgcGFyc2U6IHBhcnNlIH0pO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5wYXN0ZScsIGluc2VydGVkKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY29weVxyXG4gICAgY29weTogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHRoaXMuX2NvcHkoZSwgJ2NvcHknKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY3V0XHJcbiAgICBjdXQ6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB0aGlzLl9jb3B5KGUsICdjdXQnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcmVtb3ZlXHJcbiAgICByZW1vdmVEb2N0eXBlOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIGh0bWwucmVwbGFjZShuZXcgUmVnRXhwKFwiPCFkb2N0eXBlW14+XSo+XCIsICdnaScpLCAnJyk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlQ29tbWVudHM6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC88IS0tW1xcc1xcU10qPy0tPlxcbj8vZywgJycpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZVRhZ3M6IGZ1bmN0aW9uKGlucHV0LCBkZW5pZWQpIHtcclxuICAgICAgICB2YXIgcmUgPSAoZGVuaWVkKSA/IC88XFwvPyhbYS16XVthLXowLTldKilcXGJbXj5dKj4vZ2kgOiAvKDwoW14+XSspPikvZ2k7XHJcbiAgICAgICAgdmFyIHJlcGxhY2VyID0gKCFkZW5pZWQpID8gJycgOiBmdW5jdGlvbiAoJDAsICQxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZW5pZWQuaW5kZXhPZigkMS50b0xvd2VyQ2FzZSgpKSA9PT0gLTEgPyAkMCA6ICcnO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKHJlLCByZXBsYWNlcik7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlVGFnc0V4Y2VwdDogZnVuY3Rpb24oaW5wdXQsIGV4Y2VwdCkge1xyXG4gICAgICAgIGlmIChleGNlcHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKDwoW14+XSspPikvZ2ksICcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHRhZ3MgPSAvPFxcLz8oW2Etel1bYS16MC05XSopXFxiW14+XSo+L2dpO1xyXG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKHRhZ3MsIGZ1bmN0aW9uKCQwLCAkMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhjZXB0LmluZGV4T2YoJDEudG9Mb3dlckNhc2UoKSkgPT09IC0xID8gJycgOiAkMDtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICByZW1vdmVUYWdzV2l0aENvbnRlbnQ6IGZ1bmN0aW9uKGh0bWwsIHRhZ3MpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHAudXRpbHMud3JhcChodG1sLCBmdW5jdGlvbigkdykge1xyXG4gICAgICAgICAgICAkdy5maW5kKHRhZ3Muam9pbignLCcpKS5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICByZW1vdmVNYXJrZXJzOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgJHcuZmluZCgnLicgKyB0aGlzLnByZWZpeCArICctcGx1cy1idXR0b24nKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgJHcuZmluZCgnLicgKyB0aGlzLnByZWZpeCArICdwYXN0ZW1hcmtlcicpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJ3Bhc3RlbWFya2VyJyk7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAncGFzdGVpdGVtcycpLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJ3Bhc3RlaXRlbXMnKTtcclxuICAgICAgICAgICAgJHcuZmluZCgnLicgKyB0aGlzLnByZWZpeCArICctc2VsZWN0aW9uLW1hcmtlcicpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlRW1wdHlTcGFuczogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJ3NwYW4nKS5lYWNoKHRoaXMuX3JlbW92ZUVtcHR5U3Bhbi5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZUVtcHR5SW5saW5lczogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcbiAgICAgICAgICAgICR3LmZpbmQodGhpcy5vcHRzLnRhZ3MuaW5saW5lLmpvaW4oJywnKSkuZWFjaCh0aGlzLl9yZW1vdmVFbXB0eVRhZy5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZUVtcHR5QXR0cnM6IGZ1bmN0aW9uKGh0bWwsIGF0dHJzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgJHcuZmluZCgnWycgKyBhdHRyc1tpXSArICc9XCJcIl0nKS5yZW1vdmVBdHRyKGF0dHJzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZUJsb2NrVGFnczogZnVuY3Rpb24oaHRtbCwgdGFncywgZXhjZXB0KSB7XHJcbiAgICAgICAgdmFyIGJsb2NrcyA9IHRoaXMub3B0cy50YWdzLmJsb2NrLmNvbmNhdCgpO1xyXG5cclxuICAgICAgICAvLyBleGNlcHRcclxuICAgICAgICBpZiAoZXhjZXB0KSB7XHJcbiAgICAgICAgICAgIGJsb2NrcyA9IHRoaXMuYXBwLnV0aWxzLnJlbW92ZUZyb21BcnJheUJ5VmFsdWUoYmxvY2tzLCBleGNlcHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZXh0ZW5kXHJcbiAgICAgICAgaWYgKHRhZ3MpIHtcclxuICAgICAgICAgICAgdGFncyA9ICh0YWdzKSA/IHRoaXMuYXBwLnV0aWxzLmV4dGVuZEFycmF5KGJsb2NrcywgdGFncykgOiBibG9ja3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5yZW1vdmVUYWdzKGh0bWwsIHRhZ3MpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZUJsb2NrVGFnc0luc2lkZTogZnVuY3Rpb24oaHRtbCwgdGFncykge1xyXG4gICAgICAgIHRoaXMuYmxvY2tMaXN0VGFncyA9IHRoaXMuYXBwLnV0aWxzLnJlbW92ZUZyb21BcnJheUJ5VmFsdWUodGhpcy5vcHRzLnRhZ3MuYmxvY2suY29uY2F0KCksIFsndWwnLCAnb2wnLCAnbGknXSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcbiAgICAgICAgICAgICR3LmZpbmQodGFncy5qb2luKCcsJykpLmVhY2godGhpcy5fcmVtb3ZlQmxvY2tUYWdzSW5zaWRlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlSW5saW5lU3R5bGVzOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgdmFyIGlubGluZXMgPSB0aGlzLmFwcC51dGlscy5yZW1vdmVGcm9tQXJyYXlCeVZhbHVlKHRoaXMub3B0cy50YWdzLmlubGluZSwgJ2EnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgJHcuZmluZChpbmxpbmVzLmpvaW4oJywnKSkucmVtb3ZlQXR0cignc3R5bGUnKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICByZW1vdmVTdHlsZUF0dHI6IGZ1bmN0aW9uKGh0bWwsIGZpbHRlcikge1xyXG4gICAgICAgIGZpbHRlciA9IGZpbHRlciB8fCAnJztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgJHcuZmluZCgnKicpLm5vdCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy1zdHlsZS1jYWNoZV0nICsgZmlsdGVyKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9jYWNoZVN0eWxlOiBmdW5jdGlvbigkZWwpIHtcclxuICAgICAgICB2YXIgbmFtZSA9ICdkYXRhLScgKyB0aGlzLnByZWZpeCArICctc3R5bGUtY2FjaGUnO1xyXG4gICAgICAgIHZhciBzdHlsZSA9ICRlbC5hdHRyKCdzdHlsZScpO1xyXG4gICAgICAgIGlmIChzdHlsZSkge1xyXG4gICAgICAgICAgICAkZWwuYXR0cihuYW1lLCBzdHlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFzdHlsZSB8fCBzdHlsZSA9PT0gJycpIHtcclxuICAgICAgICAgICAgJGVsLnJlbW92ZUF0dHIobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9yZWNhY2hlU3R5bGU6IGZ1bmN0aW9uKCRlbCkge1xyXG4gICAgICAgIHZhciBuYW1lID0gJ2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy1zdHlsZS1jYWNoZSc7XHJcbiAgICAgICAgdmFyIHN0eWxlID0gJGVsLmF0dHIobmFtZSk7XHJcbiAgICAgICAgJGVsLmF0dHIoJ3N0eWxlJywgc3R5bGUpLnJlbW92ZUF0dHIobmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNsZWFuXHJcbiAgICBfY2xlYW5FbXB0eTogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnRyaW0oKTtcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAudXRpbHMucmVtb3ZlSW52aXNpYmxlQ2hhcnMoaHRtbCk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPFxcLz9iclxccz9cXC8/Pi9nLCAnJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvXFxzL2csICcnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNvcHlcclxuICAgIF9jb3B5RnJvbUFsbFNlbGVjdGVkOiBmdW5jdGlvbihuYW1lLCBodG1sKSB7XHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmVkaXRvci5nZXRMYXlvdXQoKS5odG1sKCk7XHJcblxyXG4gICAgICAgIC8vIHNldCBlbXB0eVxyXG4gICAgICAgIGlmIChuYW1lID09PSAnY3V0JykgdGhpcy5hcHAuZWRpdG9yLnNldEVtcHR5KCk7XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfSxcclxuICAgIF9jb3B5RnJvbU11bHRpcGxlOiBmdW5jdGlvbihuYW1lLCBodG1sKSB7XHJcbiAgICAgICAgdmFyICRibG9ja3MgPSB0aGlzLmFwcC5ibG9ja3MuZ2V0U2VsZWN0ZWQoKTtcclxuICAgICAgICB2YXIgJHRtcCA9IHRoaXMuZG9tKCc8ZGl2PicpO1xyXG4gICAgICAgICRibG9ja3MuZWFjaChmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgICAgICAkdG1wLmFwcGVuZCgkbm9kZS5jbG9uZSgpKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaHRtbCA9ICR0bXAuaHRtbCgpO1xyXG5cclxuICAgICAgICAvLyByZW1vdmUgc2VsZWN0ZWQgYmxvY2tzXHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICdjdXQnKSB0aGlzLmFwcC5ibG9ja3MucmVtb3ZlU2VsZWN0ZWQoZmFsc2UpO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcbiAgICBfY29weUZyb21FZGl0YWJsZTogZnVuY3Rpb24obmFtZSwgaHRtbCwgaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgdHlwZSA9IGluc3RhbmNlLmdldFR5cGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdmaWdjYXB0aW9uJyB8fCB0eXBlID09PSAnY2VsbCcpIHtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRIdG1sKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBkZWxldGUgc2VsZWN0aW9uXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnY3V0Jykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLmRlbGV0ZUNvbnRlbnRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UuaXNBbGxTZWxlY3RlZCgpKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSBpbnN0YW5jZS5nZXRPdXRlckh0bWwoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBibG9ja1xyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2N1dCcpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdkbGlzdCcpIHtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRIdG1sKCk7XHJcbiAgICAgICAgICAgIGlmIChodG1sLnNlYXJjaCgvPGRsL2dpKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdyYXAgdG8gbGlzdFxyXG4gICAgICAgICAgICAgICAgaHRtbCA9ICc8ZGw+JyArIGh0bWwgKyAnPC9kbD4nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBkZWxldGUgc2VsZWN0aW9uXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnY3V0Jykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLmRlbGV0ZUNvbnRlbnRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ2xpc3QnKSB7XHJcbiAgICAgICAgICAgIHZhciB0YWcgPSBpbnN0YW5jZS5nZXRUYWcoKTtcclxuICAgICAgICAgICAgLy8gY29udGFpbnMgbGlcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRIdG1sKCk7XHJcbiAgICAgICAgICAgIGlmIChodG1sLnNlYXJjaCgvPGxpL2dpKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IGhhdmUgbGkgYXQgc3RhcnRcclxuICAgICAgICAgICAgICAgIGlmIChodG1sLnNlYXJjaCgvXjxsaS9nKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sID0gJzxsaT4nICsgaHRtbCArICc8L2xpPic7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gd3JhcCB0byBsaXN0XHJcbiAgICAgICAgICAgICAgICBodG1sID0gJzwnICsgdGFnICsgJz4nICsgaHRtbCArICc8LycgKyB0YWcgKyAnPic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSBzZWxlY3Rpb25cclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdjdXQnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5zZWxlY3Rpb24uZGVsZXRlQ29udGVudHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRIdG1sKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBkZWxldGUgc2VsZWN0aW9uXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnY3V0Jykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLmRlbGV0ZUNvbnRlbnRzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfSxcclxuICAgIF9jb3B5RnJvbU5vbkVkaXRhYmxlOiBmdW5jdGlvbihuYW1lLCBodG1sLCBpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciAkYmxvY2sgPSBpbnN0YW5jZS5nZXRCbG9jaygpO1xyXG4gICAgICAgIHZhciB0eXBlID0gaW5zdGFuY2UuZ2V0VHlwZSgpO1xyXG5cclxuICAgICAgICAvLyBjb2x1bW5cclxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbHVtbicpIHtcclxuICAgICAgICAgICAgaHRtbCA9ICRibG9jay5odG1sKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJvd1xyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdyb3cnKSB7XHJcbiAgICAgICAgICAgIC8vIHdyYXAgdG8gdGFibGVcclxuICAgICAgICAgICAgaHRtbCA9IGluc3RhbmNlLmdldE91dGVySHRtbCgpO1xyXG4gICAgICAgICAgICBodG1sID0gJzx0YWJsZT4nICsgaHRtbCArICc8L3RhYmxlPic7XHJcblxyXG4gICAgICAgICAgICAvLyBkZWxldGUgY2VsbCBjb250ZW50XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnY3V0Jykge1xyXG4gICAgICAgICAgICAgICAgJGJsb2NrLmZpbmQoJ3RkLCB0aCcpLmh0bWwoJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBodG1sID0gaW5zdGFuY2UuZ2V0T3V0ZXJIdG1sKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZW1vdmUgYmxvY2tcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ2N1dCcpIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudEluc3RhbmNlID0gaW5zdGFuY2UuZ2V0UGFyZW50KCdsYXllcicpO1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbHVtbicpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnNldEVtcHR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdsYXllcicgJiYgcGFyZW50SW5zdGFuY2UgJiYgcGFyZW50SW5zdGFuY2UuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnRJbnN0YW5jZS5zZXRFbXB0eSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcbiAgICBfY29weTogZnVuY3Rpb24oZSwgbmFtZSkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIHZhciBpc011bHRpcGxlID0gdGhpcy5hcHAuYmxvY2tzLmlzKCk7XHJcbiAgICAgICAgdmFyIGh0bWwgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gZG8gbm90aGluZ1xyXG4gICAgICAgIGlmICghaXNNdWx0aXBsZSAmJiAhaW5zdGFuY2UpIHJldHVybjtcclxuICAgICAgICBpZiAoIWlzTXVsdGlwbGUgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNFZGl0YWJsZSgpICYmIHRoaXMuYXBwLnNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIHN0b3AgZXZlbnRcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIHNlbGVjdCBhbGxcclxuICAgICAgICBpZiAodGhpcy5hcHAuZWRpdG9yLmlzQWxsU2VsZWN0ZWQoKSkge1xyXG4gICAgICAgICAgICBodG1sID0gdGhpcy5fY29weUZyb21BbGxTZWxlY3RlZChuYW1lLCBodG1sKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbXVsdGlwbGVcclxuICAgICAgICBlbHNlIGlmIChpc011bHRpcGxlKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLl9jb3B5RnJvbU11bHRpcGxlKG5hbWUsIGh0bWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzaW5nbGUgZWRpdGFibGVcclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5pc0VkaXRhYmxlKCkpIHtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuX2NvcHlGcm9tRWRpdGFibGUobmFtZSwgaHRtbCwgaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzaW5nbGUgbm9uIGVkaXRhYmxlXHJcbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICBodG1sID0gdGhpcy5fY29weUZyb21Ob25FZGl0YWJsZShuYW1lLCBodG1sLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5iZWZvcmUuJyArIG5hbWUsIHsgZTogZSwgaHRtbDogaHRtbCB9KTtcclxuICAgICAgICBpZiAoZXZlbnQuaXNTdG9wcGVkKCkpIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgaHRtbCA9IGV2ZW50LmdldCgnaHRtbCcpO1xyXG5cclxuICAgICAgICAvLyBzZXQgdG8gY2xpcGJvYXJkXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNsaXBib2FyZC5zZXRDb250ZW50KGUsIGh0bWwpO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3RIdG1sKCdlZGl0b3IuJyArIG5hbWUsIGh0bWwpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyByZW1vdmVcclxuICAgIF9yZW1vdmVFbXB0eVNwYW46IGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgaWYgKCRub2RlLmdldCgpLmF0dHJpYnV0ZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICRub2RlLnVud3JhcCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfcmVtb3ZlRW1wdHlUYWc6IGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSAkbm9kZS5odG1sKCkudHJpbSgpO1xyXG4gICAgICAgIGlmICgkbm9kZS5nZXQoKS5hdHRyaWJ1dGVzLmxlbmd0aCA9PT0gMCAmJiBodG1sID09PSAnJykge1xyXG4gICAgICAgICAgICAkbm9kZS51bndyYXAoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3JlbW92ZUJsb2NrVGFnc0luc2lkZTogZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICB2YXIgdGFncyA9ICgkbm9kZS5nZXQoKS50YWdOYW1lID09PSAnTEknKSA/IHRoaXMuYmxvY2tMaXN0VGFncyA6IHRoaXMub3B0cy50YWdzLmJsb2NrO1xyXG4gICAgICAgICRub2RlLmZpbmQodGFncy5qb2luKCcsJykpLmFwcGVuZCgnPGJyPicpLnVud3JhcCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzdG9yZVxyXG4gICAgX3N0b3JlOiBmdW5jdGlvbihodG1sLCBuYW1lLCBtYXRjaGVkLCBzdG9yZWQsIHN0b3JlZEluZGV4KSB7XHJcbiAgICAgICAgaWYgKCFtYXRjaGVkKSByZXR1cm4gaHRtbDtcclxuICAgICAgICBpZiAodHlwZW9mIHN0b3JlZFtuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHN0b3JlZFtuYW1lXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoZWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc3RvcmVkW25hbWVdW3N0b3JlZEluZGV4XSA9IG1hdGNoZWRbaV07XHJcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UobWF0Y2hlZFtpXSwgJyMjIyNfJyArIG5hbWUgKyBzdG9yZWRJbmRleCArICdfIyMjIycpO1xyXG4gICAgICAgICAgICBzdG9yZWRJbmRleCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGdldFxyXG4gICAgX2dldEVsZW1lbnRzRnJvbUh0bWw6IGZ1bmN0aW9uKGh0bWwsIHNlbGVjdG9yKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBbXTtcclxuICAgICAgICB2YXIgJGRpdiA9IHRoaXMuZG9tKCc8ZGl2PicpLmh0bWwoaHRtbCk7XHJcbiAgICAgICAgJGRpdi5maW5kKHNlbGVjdG9yKS5lYWNoKGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgICAgIG1hdGNoZWQucHVzaCgkbm9kZS5nZXQoKS5vdXRlckhUTUwpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbWF0Y2hlZDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gc2FuaXRpemVcclxuICAgIF9zYW5pdGl6ZVNyYzogZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICB2YXIgbm9kZSA9ICRub2RlLmdldCgpO1xyXG4gICAgICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZSgnc3JjJykuc2VhcmNoKC9eZGF0YXxqYXZhc2NyaXB0Oi9pKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsICcnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3Nhbml0aXplSHJlZjogZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICB2YXIgbm9kZSA9ICRub2RlLmdldCgpO1xyXG4gICAgICAgIHZhciBzdHIgPSBub2RlLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xyXG4gICAgICAgIGlmIChzdHIgJiYgc3RyLnNlYXJjaCgvXmphdmFzY3JpcHQ6L2kpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsICcnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3Nhbml0aXplRXZlbnRzOiBmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgICRub2RlLnJlbW92ZUF0dHIoJ29ubG9hZCBvbmVycm9yIG9udG9nZ2xlIG9ud2hlZWwgb25tb3VzZW92ZXIgb25jb3B5Jyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGVuY29kZVxyXG4gICAgX2VuY29kZUNvZGU6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHAudXRpbHMud3JhcChodG1sLCBmdW5jdGlvbigkdykge1xyXG4gICAgICAgICAgICAkdy5maW5kKCdwcmUgY29kZSwgcHJlLCBjb2RlJykuZWFjaCh0aGlzLl9lbmNvZGVOb2RlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgX2VuY29kZU5vZGU6IGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSAkbm9kZS5nZXQoKTtcclxuICAgICAgICB2YXIgZmlyc3QgPSBub2RlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgdmFyIGh0bWwgPSBub2RlLmlubmVySFRNTDtcclxuICAgICAgICBpZiAobm9kZS50YWdOYW1lID09PSAnUFJFJyAmJiBmaXJzdCAmJiBmaXJzdC50YWdOYW1lID09PSAnQ09ERScpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgveHRhZ3N0YXJ0ei9nLCAnPCcpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL3h0YWdlbmR6L2csICc+Jyk7XHJcblxyXG4gICAgICAgIHZhciBlbmNvZGVkID0gdGhpcy5kZWNvZGVFbnRpdGllcyhodG1sKTtcclxuICAgICAgICBub2RlLnRleHRDb250ZW50ID0gdGhpcy5fZW5jb2RlTm9kZUh0bWwoZW5jb2RlZCk7XHJcbiAgICB9LFxyXG4gICAgX2VuY29kZU5vZGVIdG1sOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvJm5ic3A7L2csICcgJykucmVwbGFjZSgvPGJyXFxzP1xcLz8+L2csICdcXG4nKTtcclxuICAgICAgICBodG1sID0gKHRoaXMub3B0cy5jb2RlLnNwYWNlcykgPyBodG1sLnJlcGxhY2UoL1xcdC9nLCBuZXcgQXJyYXkodGhpcy5vcHRzLmNvZGUuc3BhY2VzICsgMSkuam9pbignICcpKSA6IGh0bWw7XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdwYXJhZ3JhcGhpemVyJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5yZW1TdGFydCA9ICcjIyMjI3JlcGxhY2UnO1xyXG4gICAgICAgIHRoaXMucmVtRW5kID0gJyMjIyMjJztcclxuXHJcbiAgICAgICAgdmFyIGV4dGVuZFRhZ3MgPSAgWydmb3JtJywgJ2ZpZ2NhcHRpb24nLCAnb2JqZWN0JywgJ3N0eWxlJywgJ3NjcmlwdCcsICdpZnJhbWUnLCAnc2VsZWN0JywgJ2lucHV0JywgJ3RleHRhcmVhJyxcclxuICAgICAgICAgICAgICAgICAgICAnYnV0dG9uJywgJ29wdGlvbicsICdtYXAnLCAnYXJlYScsICdtYXRoJywgJ2ZpZWxkc2V0JywgJ2xlZ2VuZCcsICdoZ3JvdXAnLCAnbmF2JywgJ2RldGFpbHMnLCAnbWVudScsICdzdW1tYXJ5J107XHJcbiAgICAgICAgdGhpcy50YWdzID0gdGhpcy5vcHRzLnRhZ3MucGFyc2VyLmNvbmNhdChleHRlbmRUYWdzKTtcclxuICAgIH0sXHJcbiAgICBwYXJhZ3JhcGhpemU6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICAvLyBidWlsZCBtYXJrdXAgdGFnXHJcbiAgICAgICAgdmFyIHRhZyA9ICdwJztcclxuICAgICAgICB2YXIgc3RvcmVkID0gW107XHJcbiAgICAgICAgdmFyIHN0b3JlZENvbW1lbnRzID0gW107XHJcblxyXG4gICAgICAgIC8vIHN0b3JlXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuX3N0b3JlVGFncyhodG1sLCBzdG9yZWQpO1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnN0b3JlQ29tbWVudHMoaHRtbCwgc3RvcmVkQ29tbWVudHMpO1xyXG5cclxuICAgICAgICAvLyB0cmltXHJcbiAgICAgICAgaHRtbCA9IGh0bWwudHJpbSgpO1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLl90cmltTGlua3MoaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIHJlcGxhY2UgbmV3IGxpbmVzXHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgveHBhcmFncmFwaG1hcmtlcnooPzpcXHJcXG58XFxyfFxcbikkL2csICcnKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC94cGFyYWdyYXBobWFya2VyeiQvZywgJycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL3hwYXJhZ3JhcGhtYXJrZXJ6KD86XFxyXFxufFxccnxcXG4pL2csICdcXG4nKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC94cGFyYWdyYXBobWFya2Vyei9nLCAnXFxuJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvW1xcbl0rL2csIFwiXFxuXCIpO1xyXG5cclxuICAgICAgICAvLyB3cmFwIHRvIHRhZ1xyXG4gICAgICAgIHZhciBzdHIgPSAnJztcclxuICAgICAgICB2YXIgYXJyID0gaHRtbC5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzdHIgKz0gJzwnICsgdGFnICsgJz4nICsgYXJyW2ldLnRyaW0oKSArICc8LycgKyB0YWcgKyAnPlxcbic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0cmltIG5ldyBsaW5lIGF0IHRoZSBlbmRcclxuICAgICAgICBodG1sID0gc3RyLnJlcGxhY2UoL1xcbiQvLCAnJyk7XHJcblxyXG4gICAgICAgIC8vIGNsZWFuXHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZShuZXcgUmVnRXhwKCc8JyArIHRhZyArICc+XFxcXHMrIyMjIyMnLCAnZ2knKSwgJyMjIyMjJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZShuZXcgUmVnRXhwKCc8JyArIHRhZyArICc+IyMjIyMnLCAnZ2knKSwgJyMjIyMjJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZShuZXcgUmVnRXhwKCcjIyMjIzwvJyArIHRhZyArICc+JywgJ2dpJyksICcjIyMjIycpO1xyXG5cclxuICAgICAgICAvLyByZXN0b3JlXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuX3Jlc3RvcmVUYWdzKGh0bWwsIHN0b3JlZCk7XHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQucmVzdG9yZUNvbW1lbnRzKGh0bWwsIHN0b3JlZENvbW1lbnRzKTtcclxuXHJcbiAgICAgICAgLy8gY2xlYW4gZW1wdHlcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88cCguKj8pPjxcXC8/YnJcXHM/XFwvPz48XFwvcD4vZ2ksIFwiPHAkMT48L3A+XCIpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxkaXYoLio/KT48XFwvP2JyXFxzP1xcLz8+PFxcL2Rpdj4vZ2ksIFwiPGRpdiQxPjwvZGl2PlwiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9zdG9yZVRhZ3M6IGZ1bmN0aW9uKGh0bWwsIHN0b3JlZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcbiAgICAgICAgICAgICR3LmZpbmQodGhpcy50YWdzLmpvaW4oJywgJykpLmVhY2goZnVuY3Rpb24oJG5vZGUsIGkpIHsgdGhpcy5fcmVwbGFjZVRhZygkbm9kZSwgaSwgc3RvcmVkKTsgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuICAgIF9yZXN0b3JlVGFnczogZnVuY3Rpb24oaHRtbCwgc3RvcmVkKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdG9yZWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHN0ciA9IHN0b3JlZFtpXS5yZXBsYWNlKC9cXCQvZ2ksICcmIzM2OycpO1xyXG4gICAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKHRoaXMucmVtU3RhcnQgKyBpICsgdGhpcy5yZW1FbmQsIHN0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcbiAgICBfcmVwbGFjZVRhZzogZnVuY3Rpb24oJG5vZGUsIGksIHN0b3JlZCkge1xyXG4gICAgICAgIHZhciBub2RlID0gJG5vZGUuZ2V0KCk7XHJcbiAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5yZW1TdGFydCArIGkgKyB0aGlzLnJlbUVuZCArICd4cGFyYWdyYXBobWFya2VyeicpO1xyXG4gICAgICAgIHN0b3JlZC5wdXNoKG5vZGUub3V0ZXJIVE1MKTtcclxuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHJlcGxhY2VtZW50LCBub2RlKTtcclxuICAgIH0sXHJcbiAgICBfdHJpbUxpbmtzOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgJHcuZmluZCgnYScpLmVhY2godGhpcy5fdHJpbUxpbmsuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBfdHJpbUxpbms6IGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgJG5vZGUuaHRtbCgkbm9kZS5odG1sKCkudHJpbSgpKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAncGFyc2VyJywge1xyXG4gICAgYnVpbGQ6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICB0aGlzLiRsYXlvdXQgPSB0aGlzLmRvbSgnPGRpdj4nKTtcclxuICAgICAgICB0aGlzLiRsYXlvdXQuaHRtbChodG1sKTtcclxuICAgICAgICB0aGlzLiRsYXlvdXQuZmluZCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlXScpLmVhY2godGhpcy5fYnVpbGQuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLiRsYXlvdXQ7XHJcbiAgICB9LFxyXG4gICAgYnVpbGRFbGVtZW50OiBmdW5jdGlvbigkZWwpIHtcclxuICAgICAgICAkZWwuZmluZCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlXScpLmVhY2godGhpcy5fYnVpbGQuYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHBhcnNlXHJcbiAgICBwYXJzZTogZnVuY3Rpb24oaHRtbCwgYnVpbGQpIHtcclxuICAgICAgICAvLyBwYXJzZVxyXG4gICAgICAgIGh0bWwgPSBodG1sLnRyaW0oKTtcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuYnJvYWRjYXN0SHRtbCgnZWRpdG9yLmJlZm9yZS5wYXJzZScsIGh0bWwpO1xyXG5cclxuICAgICAgICAvLyBjaGVjayBlbXB0eVxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5jb250ZW50LmlzRW1wdHlIdG1sKGh0bWwpKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLmFwcC5ibG9jay5jcmVhdGVIdG1sKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNsZWFuICYgcGFyc2VcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuX2NsZWFuKGh0bWwpO1xyXG4gICAgICAgICAgICBodG1sID0gdGhpcy5fcGFyc2UoaHRtbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuYnJvYWRjYXN0SHRtbCgnZWRpdG9yLnBhcnNlJywgaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIGJ1aWxkXHJcbiAgICAgICAgcmV0dXJuIChidWlsZCAhPT0gZmFsc2UpID8gdGhpcy5idWlsZChodG1sKSA6IGh0bWw7XHJcbiAgICB9LFxyXG4gICAgcGFyc2VMaW5lOiBmdW5jdGlvbihodG1sLCBidWlsZCkge1xyXG4gICAgICAgIGlmIChodG1sID09PSAnICcpIHtcclxuICAgICAgICAgICAgaHRtbCA9ICcmbmJzcDsnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLmFwcC5icm9hZGNhc3RIdG1sKCdlZGl0b3IuYmVmb3JlLnBhcnNlJywgaHRtbCk7XHJcblxyXG4gICAgICAgICAgICAvLyBjb252ZXJ0IG5ld2xpbmVzIHRvIGJyXHJcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL1xccj9cXG4vZywgXCI8YnI+XCIpO1xyXG4gICAgICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5lbmNvZGVDb2RlKGh0bWwpO1xyXG4gICAgICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5zYW5pdGl6ZShodG1sKTtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQucmVtb3ZlRW1wdHlTcGFucyhodG1sKTtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQuYWRkSHR0cHMoaHRtbCk7XHJcblxyXG4gICAgICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmJyb2FkY2FzdEh0bWwoJ2VkaXRvci5wYXJzZScsIGh0bWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYnVpbGRcclxuICAgICAgICByZXR1cm4gKGJ1aWxkICE9PSBmYWxzZSkgPyB0aGlzLmJ1aWxkKGh0bWwpIDogaHRtbDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdW5wYXJzZVxyXG4gICAgdW5wYXJzZTogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHZhciBzdG9yZWQgPSB7fTtcclxuICAgICAgICB2YXIgc3RvcmVkSW5kZXggPSAwO1xyXG5cclxuICAgICAgICBodG1sID0gaHRtbC50cmltKCk7XHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmJyb2FkY2FzdEh0bWwoJ2VkaXRvci5iZWZvcmUudW5wYXJzZScsIGh0bWwpO1xyXG5cclxuICAgICAgICAvLyBlbXB0eVxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5jb250ZW50LmlzRW1wdHlIdG1sKGh0bWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJldmVydFxyXG4gICAgICAgIGh0bWwgPSB0aGlzLl9yZXZlcnRGb3JtcyhodG1sKTtcclxuICAgICAgICBodG1sID0gdGhpcy5fcmV2ZXJ0RnJhbWVzKGh0bWwpO1xyXG5cclxuICAgICAgICAvLyBzdG9yZVxyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnN0b3JlKGh0bWwsICdub25lZGl0YWJsZScsIHN0b3JlZCwgc3RvcmVkSW5kZXgpO1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnN0b3JlKGh0bWwsICdlbWJlZCcsIHN0b3JlZCwgc3RvcmVkSW5kZXgpO1xyXG5cclxuICAgICAgICAvLyBsaW5rIG5vZm9sbG93XHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQuYWRkTm9mb2xsb3coaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBzZWxlY3Rpb24gbWFya2Vyc1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlbW92ZU1hcmtlcnMoaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIHJlc3RvcmUgZGF0YSBzdHlsZSBjYWNoZVxyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlY2FjaGVTdHlsZShodG1sKTtcclxuXHJcbiAgICAgICAgLy8gcmVzdG9yZVxyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlc3RvcmUoaHRtbCwgJ25vbmVkaXRhYmxlJywgc3RvcmVkKTtcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZXN0b3JlKGh0bWwsICdlbWJlZCcsIHN0b3JlZCk7XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBlbXB0eSBhdHRyc1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlbW92ZUVtcHR5QXR0cnMoaHRtbCwgWydzdHlsZScsICdjbGFzcycsICdyZWwnLCAnYWx0JywgJ3RpdGxlJ10pO1xyXG5cclxuICAgICAgICAvLyB1bnBhcnNlXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuX3VucGFyc2VBbGxUYWdzKGh0bWwpO1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLl91bnBhcnNlRGF0YVR5cGUoaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBlbXB0eSBhdHRycyBhZ2FpblxyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlbW92ZUVtcHR5QXR0cnMoaHRtbCwgWydzdHlsZScsICdjbGFzcycsICdyZWwnLCAnYWx0JywgJ3RpdGxlJ10pO1xyXG5cclxuICAgICAgICBpZiAoaHRtbCA9PT0gJzxwPjwvcD4nKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHRpZHlcclxuICAgICAgICAvL2h0bWwgPSB0aGlzLmFwcC5jb250ZW50LnRpZHkuaHRtbChodG1sKTtcclxuXHJcbiAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLmJyb2FkY2FzdEh0bWwoJ2VkaXRvci51bnBhcnNlJywgaHRtbCk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSAkbm9kZS5hdHRyKCdkYXRhLScgKyB0aGlzLnByZWZpeCArICctdHlwZScpO1xyXG4gICAgICAgIHRoaXMuYXBwLmNyZWF0ZSgnYmxvY2suJyArIHR5cGUsICRub2RlKTtcclxuICAgIH0sXHJcbiAgICBfY2xlYW46IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICB2YXIgc3RvcmVkID0ge307XHJcbiAgICAgICAgdmFyIHN0b3JlZEluZGV4ID0gMDtcclxuICAgICAgICB2YXIgc3RvcmVkQ29tbWVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgLy8gc3RvcmUgY29tbWVudHNcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5zdG9yZUNvbW1lbnRzKGh0bWwsIHN0b3JlZENvbW1lbnRzKTtcclxuXHJcbiAgICAgICAgLy8gZW5jb2RlXHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLmVkaXRvci5pc1RleHRhcmVhKCkpIHtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQuZW5jb2RlQ29kZShodG1sKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNhbml0aXplXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQuc2FuaXRpemUoaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIGNvbnZlcnRcclxuICAgICAgICBodG1sID0gdGhpcy5fY29udmVydEZyYW1lcyhodG1sKTtcclxuICAgICAgICBodG1sID0gdGhpcy5fY29udmVydEZvcm1zKGh0bWwpO1xyXG5cclxuICAgICAgICAvLyBzdG9yZVxyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnN0b3JlKGh0bWwsICdub25lZGl0YWJsZScsIHN0b3JlZCwgc3RvcmVkSW5kZXgpO1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnN0b3JlKGh0bWwsICdlbWJlZCcsIHN0b3JlZCwgc3RvcmVkSW5kZXgpO1xyXG5cclxuICAgICAgICAvLyByZW1vdmUgZGVuaWVkIHRhZ3NcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZW1vdmVUYWdzKGh0bWwsIHRoaXMub3B0cy50YWdzLmRlbmllZCk7XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBkb2N0eXBlIHRhZ1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlbW92ZURvY3R5cGUoaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBzdHlsZSAmIHNjcmlwdCB0YWdcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZW1vdmVUYWdzV2l0aENvbnRlbnQoaHRtbCwgWydzY3JpcHQnLCAnc3R5bGUnXSk7XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBjb21tZW50c1xyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuY2xlYW4uY29tbWVudHMpIHtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQucmVtb3ZlQ29tbWVudHMoaHRtbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZW1vdmUgZW1wdHkgc3BhbnNcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZW1vdmVFbXB0eVNwYW5zKGh0bWwpO1xyXG5cclxuICAgICAgICAvLyBhZGQgaHR0cHMgZm9yIGxpbmtzIGFuZCBpbWFnZXNcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5hZGRIdHRwcyhodG1sKTtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIGJsb2NrIHRhZ3MgaW5cclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZW1vdmVCbG9ja1RhZ3NJbnNpZGUoaHRtbCwgWyd0aCcsICd0ZCcsICdsaScsICdkdCcsICdkZCcsICdhZGRyZXNzJ10pO1xyXG5cclxuICAgICAgICAvLyBjYWNoZSBzdHlsZXMgZm9yIGJsb2NrIGFuZCBpbmxpbmUgdGFncyBhbmQgaW1nXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQuY2FjaGVTdHlsZShodG1sKTtcclxuXHJcbiAgICAgICAgLy8gcmVzdG9yZVxyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlc3RvcmUoaHRtbCwgJ25vbmVkaXRhYmxlJywgc3RvcmVkKTtcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZXN0b3JlKGh0bWwsICdlbWJlZCcsIHN0b3JlZCk7XHJcblxyXG4gICAgICAgIC8vIHJlc3RvcmUgY29tbWVudHNcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZXN0b3JlQ29tbWVudHMoaHRtbCwgc3RvcmVkQ29tbWVudHMpO1xyXG5cclxuICAgICAgICAvLyBlbXB0eSBvciBwYXJhZ3JhcGhpemVcclxuICAgICAgICBpZiAodGhpcy5hcHAuY29udGVudC5pc0VtcHR5SHRtbChodG1sKSkge1xyXG4gICAgICAgICAgICBodG1sID0gdGhpcy5hcHAuYmxvY2suY3JlYXRlSHRtbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQucGFyYWdyYXBoaXplKGh0bWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9LFxyXG4gICAgX3BhcnNlOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5hcHAuZWxlbWVudC5nZXRCbG9ja3MoJHcpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJzZUh0bWwobm9kZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBwcmVkZWZpbmVkIGNsYXNzZXNcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5jbGFzc2VzKSB7XHJcbiAgICAgICAgICAgICAgICAkdy5maW5kKHRoaXMuX2dldFByZWRlZmluZWRUYWdzKCkuam9pbignLCcpKS5lYWNoKHRoaXMuX2FkZFByZWRlZmluZWRDbGFzcy5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuICAgIF9wYXJzZUh0bWw6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgdmFyIHRhZyA9IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB2YXIgJGVsID0gdGhpcy5kb20oZWwpO1xyXG4gICAgICAgIHZhciB0eXBlO1xyXG5cclxuICAgICAgICAvLyBjaGVjayBjdXN0b21cclxuICAgICAgICB2YXIgcGFyc2VyID0gdGhpcy5vcHRzLnBhcnNlclRhZ3M7XHJcbiAgICAgICAgaWYgKHBhcnNlclt0YWddKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VyW3RhZ10ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHR5cGUgPSBwYXJzZXJbdGFnXVtpXS5jYWxsKHRoaXMuYXBwLCAkZWwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUpIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICAgICAgdHlwZSA9IHRoaXMuX3BhcnNlVHlwZSgkZWwsIHRhZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzZXRcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICAkZWwuYXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGUnLCB0eXBlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5lc3RlZFxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLm5lc3RlZC5pbmRleE9mKHR5cGUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VOZXN0ZWQoJGVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfcGFyc2VUeXBlOiBmdW5jdGlvbigkZWwsIHRhZykge1xyXG4gICAgICAgIHZhciB0eXBlO1xyXG4gICAgICAgIGlmICgkZWwuYXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGUnKSkge1xyXG4gICAgICAgICAgICB0eXBlID0gJGVsLmF0dHIoJ2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2lzTm9uZWRpdGFibGUoJGVsKSkge1xyXG4gICAgICAgICAgICB0eXBlID0gJ25vbmVkaXRhYmxlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSB0aGlzLl9wYXJzZVR5cGVCeVRhZygkZWwsIHRhZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHlwZTtcclxuICAgIH0sXHJcbiAgICBfcGFyc2VOZXN0ZWQ6IGZ1bmN0aW9uKCRlbCkge1xyXG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuYXBwLmVsZW1lbnQuZ2V0QmxvY2tzKCRlbCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZUh0bWwobm9kZXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfcGFyc2VUeXBlQnlUYWc6IGZ1bmN0aW9uKCRlbCwgdGFnKSB7XHJcbiAgICAgICAgdmFyIHR5cGU7XHJcbiAgICAgICAgc3dpdGNoICh0YWcpIHtcclxuICAgICAgICAgICAgY2FzZSAncCc6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ3BhcmFncmFwaCc7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNJbWFnZUJsb2NrKCRlbCwgJ3AnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnaW1hZ2UnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ZpZ3VyZSc6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2VtYmVkJztcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0ltYWdlQmxvY2soJGVsLCAnZmlndXJlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2ltYWdlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2hhc0NoaWxkKCRlbCwgJ3ByZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdjb2RlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2hhc0NoaWxkKCRlbCwgJ2Jsb2NrcXVvdGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAncXVvdGUnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Rpdic6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2xheWVyJztcclxuICAgICAgICAgICAgICAgIGlmICgkZWwuYXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2lzR3JpZEJsb2NrKCRlbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2dyaWQnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5faXNDb2x1bW5CbG9jaygkZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdjb2x1bW4nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5faXNUZXh0QmxvY2soJGVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9pc0NhcmRCbG9jaygkZWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdjYXJkJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2lzSW1hZ2VCbG9jaygkZWwsICdkaXYnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnaW1hZ2UnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2gxJzpcclxuICAgICAgICAgICAgY2FzZSAnaDInOlxyXG4gICAgICAgICAgICBjYXNlICdoMyc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2g0JzpcclxuICAgICAgICAgICAgY2FzZSAnaDUnOlxyXG4gICAgICAgICAgICBjYXNlICdoNic6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2hlYWRpbmcnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrcXVvdGUnOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdxdW90ZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndGFibGUnOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICd0YWJsZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncHJlJzpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnY29kZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnaHInOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdsaW5lJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdkbCc6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2RsaXN0JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdhZGRyZXNzJzpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnYWRkcmVzcyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWwnOlxyXG4gICAgICAgICAgICBjYXNlICdvbCc6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2xpc3QnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ21haW4nOlxyXG4gICAgICAgICAgICBjYXNlICdzZWN0aW9uJzpcclxuICAgICAgICAgICAgY2FzZSAnaGVhZGVyJzpcclxuICAgICAgICAgICAgY2FzZSAnZm9vdGVyJzpcclxuICAgICAgICAgICAgY2FzZSAnYXNpZGUnOlxyXG4gICAgICAgICAgICBjYXNlICdhcnRpY2xlJzpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnbGF5ZXInO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0eXBlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBpc1xyXG4gICAgX2lzTm9uZWRpdGFibGU6IGZ1bmN0aW9uKCRlbCkge1xyXG4gICAgICAgIHJldHVybiAkZWwuaGFzQ2xhc3ModGhpcy5vcHRzLm5vbmVkaXRhYmxlLmNsYXNzbmFtZSk7XHJcbiAgICB9LFxyXG4gICAgX2lzQ29sdW1uQmxvY2s6IGZ1bmN0aW9uKCRlbCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmdyaWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyICRwYXJlbnQgPSAkZWwucGFyZW50KCk7XHJcbiAgICAgICAgaWYgKCRwYXJlbnQubGVuZ3RoICE9PSAwICYmICRwYXJlbnQuYXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyctdHlwZScpID09PSAnZ3JpZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9pc0dyaWRCbG9jazogZnVuY3Rpb24oJGVsKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMuZ3JpZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICByZXR1cm4gJGVsLmhhc0NsYXNzKHRoaXMub3B0cy5ncmlkLmNsYXNzbmFtZSk7XHJcbiAgICB9LFxyXG4gICAgX2lzVGV4dEJsb2NrOiBmdW5jdGlvbigkZWwpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMub3B0cy50ZXh0ICYmICRlbC5oYXNDbGFzcyh0aGlzLm9wdHMudGV4dC5jbGFzc25hbWUpKTtcclxuICAgIH0sXHJcbiAgICBfaXNDYXJkQmxvY2s6IGZ1bmN0aW9uKCRlbCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5vcHRzLmNhcmQgJiYgJGVsLmhhc0NsYXNzKHRoaXMub3B0cy5jYXJkLmNsYXNzbmFtZSkpO1xyXG4gICAgfSxcclxuICAgIF9pc0ltYWdlQmxvY2s6IGZ1bmN0aW9uKCRlbCwgdGFnKSB7XHJcbiAgICAgICAgdmFyICRpbWcgPSAkZWwuZmluZCgnaW1nJyk7XHJcbiAgICAgICAgaWYgKCRpbWcubGVuZ3RoID09PSAwKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRhZyA9PT0gJ2RpdicgJiYgJGltZy5jbG9zZXN0KCdmaWd1cmUnKS5sZW5ndGggIT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyICR0YXJnZXQgPSAkaW1nO1xyXG4gICAgICAgIHZhciAkcGFyZW50ID0gJGltZy5wYXJlbnQoKTtcclxuICAgICAgICB2YXIgcGFyZW50VGFnID0gKCRwYXJlbnQubGVuZ3RoICE9PSAwKSA/ICRwYXJlbnQuZ2V0KCkudGFnTmFtZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAocGFyZW50VGFnICYmIChwYXJlbnRUYWcgPT09ICdBJyB8fCBwYXJlbnRUYWcgPT09ICdTUEFOJykpIHtcclxuICAgICAgICAgICAgJHRhcmdldCA9ICRwYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBhcmVudFRhZyAmJiAkcGFyZW50LmdldCgpICE9PSAkZWwuZ2V0KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCR0YXJnZXQucHJldkVsZW1lbnQoKS5sZW5ndGggIT09IDApIHJldHVybjtcclxuICAgICAgICBpZiAodGFnICE9PSAnZmlndXJlJyAmJiAkdGFyZ2V0Lm5leHRFbGVtZW50KCkubGVuZ3RoICE9PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBoYXNcclxuICAgIF9oYXNDaGlsZDogZnVuY3Rpb24oJGVsLCB0YWcpIHtcclxuICAgICAgICBpZiAodGFnID09PSAncHJlJykge1xyXG4gICAgICAgICAgICB2YXIgJHByZSA9ICRlbC5maW5kKCdwcmUnKTtcclxuICAgICAgICAgICAgaWYgKCRwcmUubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0YWcgPT09ICdibG9ja3F1b3RlJykge1xyXG4gICAgICAgICAgICB2YXIgJHF1b3RlID0gJGVsLmZpbmQoJ2Jsb2NrcXVvdGUnKTtcclxuICAgICAgICAgICAgdmFyICRzY3JpcHQgPSAkZWwuZmluZCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIGlmICgkc2NyaXB0Lmxlbmd0aCA9PT0gMCAmJiAkcXVvdGUubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gZ2V0XHJcbiAgICBfZ2V0UHJlZGVmaW5lZFRhZ3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0YWdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgeiBpbiB0aGlzLm9wdHMuY2xhc3Nlcykge1xyXG4gICAgICAgICAgICB0YWdzLnB1c2goeik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGFncztcclxuICAgIH0sXHJcblxyXG4gICAgLy8gYWRkXHJcbiAgICBfYWRkUHJlZGVmaW5lZENsYXNzOiBmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgIHZhciB0YWcgPSAkbm9kZS5nZXQoKS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdHMuY2xhc3Nlc1t0YWddICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAkbm9kZS5hZGRDbGFzcyh0aGlzLm9wdHMuY2xhc3Nlc1t0YWddKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHVucGFyc2VcclxuICAgIF91bnBhcnNlQWxsVGFnczogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJyonKS5yZW1vdmVBdHRyKCdjb250ZW50ZWRpdGFibGUgZGF0YS1ncmFtbV9lZGl0b3InKTtcclxuXHJcbiAgICAgICAgICAgICAvLyByZW1vdmUgaW1hZ2VzIHN0YXRlc1xyXG4gICAgICAgICAgICAgaWYgKCF0aGlzLm9wdHMuaW1hZ2Uuc3RhdGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgJHcuZmluZCgnaW1nJykucmVtb3ZlQXR0cignZGF0YS1pbWFnZScpO1xyXG4gICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBfdW5wYXJzZURhdGFUeXBlOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgdmFyICRlbG1zID0gJHcuZmluZCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlXScpO1xyXG5cclxuICAgICAgICAgICAgJGVsbXMucmVtb3ZlQXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLWZpcnN0LWxldmVsIGRhdGEtJyArIHRoaXMucHJlZml4ICsgJy1wYXJzZWQnKTtcclxuICAgICAgICAgICAgJGVsbXMucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXggKyAnLWJsb2NrLWZvY3VzICcgKyB0aGlzLnByZWZpeCArICctYmxvY2stbXVsdGlwbGUtZm9jdXMgJyArIHRoaXMucHJlZml4ICsgJy1ibG9jay1tdWx0aXBsZS1ob3ZlciAnICsgdGhpcy5wcmVmaXggKyAnLWVkaXRhYmxlLXBhdXNlJyk7XHJcbiAgICAgICAgICAgICRlbG1zLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1lbXB0eS1sYXllcicpO1xyXG4gICAgICAgICAgICAkZWxtcy5lYWNoKHRoaXMuX3VucGFyc2VCeVR5cGUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICRlbG1zLnJlbW92ZUF0dHIoJ2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlJyk7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJ2ZpZ2NhcHRpb24nKS5yZW1vdmVBdHRyKCdkYXRhLScgKyB0aGlzLnByZWZpeCArICctdHlwZSBkYXRhLXBsYWNlaG9sZGVyJykuZWFjaCh0aGlzLmFwcC5jb250ZW50Ll9yZW1vdmVFbXB0eVRhZy5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBfdW5wYXJzZUJ5VHlwZTogZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICB2YXIgdHlwZSA9ICRub2RlLmF0dHIoJ2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlJyk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0cy5wYXJzZXJbdHlwZV0gJiYgdGhpcy5vcHRzLnBhcnNlclt0eXBlXS51bnBhcnNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0cy5wYXJzZXJbdHlwZV0udW5wYXJzZS5jYWxsKHRoaXMuYXBwLCAkbm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjb252ZXJ0XHJcbiAgICBfY29udmVydEZyYW1lczogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJ2lmcmFtZScpLmVhY2godGhpcy5fY29udmVydEZyYW1lLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgX2NvbnZlcnRGb3JtczogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJ2Zvcm0nKS5lYWNoKHRoaXMuX2NvbnZlcnRGb3JtLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgX2NvbnZlcnRGcmFtZTogZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICBpZiAoJG5vZGUuY2xvc2VzdCgnZmlndXJlJykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICRub2RlLndyYXAoJzxmaWd1cmU+Jyk7XHJcbiAgICAgICAgICAgICRub2RlLnBhcmVudCgpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1maWd1cmUtaWZyYW1lJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9jb252ZXJ0Rm9ybTogZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICB2YXIgJGVsID0gdGhpcy5hcHAuZWxlbWVudC5yZXBsYWNlVG9UYWcoJG5vZGUsICdmaWd1cmUnKTtcclxuICAgICAgICAkZWwuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZpZ3VyZS1mb3JtJyk7XHJcbiAgICAgICAgJGVsLmF0dHIoJ2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlJywgJ2Zvcm0nKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcmV2ZXJ0XHJcbiAgICBfcmV2ZXJ0RnJhbWVzOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgJHcuZmluZCgnLicgKyB0aGlzLnByZWZpeCArICctZmlndXJlLWlmcmFtZScpLmVhY2godGhpcy5fcmV2ZXJ0RnJhbWUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBfcmV2ZXJ0Rm9ybXM6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHAudXRpbHMud3JhcChodG1sLCBmdW5jdGlvbigkdykge1xyXG4gICAgICAgICAgICAkdy5maW5kKCcuJyArIHRoaXMucHJlZml4ICsgJy1maWd1cmUtZm9ybScpLmVhY2godGhpcy5fcmV2ZXJ0Rm9ybS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuICAgIF9yZXZlcnRGcmFtZTogZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICB2YXIgJGZpZ2NhcHRpb24gPSAkbm9kZS5maW5kKCdmaWdjYXB0aW9uJyk7XHJcbiAgICAgICAgaWYgKCRmaWdjYXB0aW9uLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAkbm9kZS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctZmlndXJlLWlmcmFtZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgJG5vZGUudW53cmFwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9yZXZlcnRGb3JtOiBmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgIHZhciAkZWwgPSB0aGlzLmFwcC5lbGVtZW50LnJlcGxhY2VUb1RhZygkbm9kZSwgJ2Zvcm0nKTtcclxuICAgICAgICAkZWwucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZpZ3VyZS1mb3JtJyk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ2VsZW1lbnQnLCB7XHJcbiAgICAvLyBpc1xyXG4gICAgaXM6IGZ1bmN0aW9uKGVsLCB0eXBlLCBleHRlbmQpIHtcclxuICAgICAgICB2YXIgcmVzID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIG5vZGUgPSAodHlwZSA9PT0gJ3RleHQnKSA/IGVsIDogdGhpcy5fZ2V0Tm9kZShlbCk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSAnaW5saW5lJykge1xyXG4gICAgICAgICAgICByZXMgPSAodGhpcy5faXNFbGVtZW50KG5vZGUpICYmIHRoaXMuX2lzSW5saW5lVGFnKG5vZGUudGFnTmFtZSwgZXh0ZW5kKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdibG9jaycpIHtcclxuICAgICAgICAgICAgcmVzID0gKHRoaXMuX2lzRWxlbWVudChub2RlKSAmJiB0aGlzLl9pc0Jsb2NrVGFnKG5vZGUudGFnTmFtZSwgZXh0ZW5kKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdlbGVtZW50Jykge1xyXG4gICAgICAgICAgICByZXMgPSB0aGlzLl9pc0VsZW1lbnQobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICd0ZXh0Jykge1xyXG4gICAgICAgICAgICByZXMgPSAodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnICYmICEvXlxccyo8KFxcdyt8ISlbXj5dKj4vLnRlc3Qobm9kZSkpID8gdHJ1ZSA6IHRoaXMuaXNUZXh0Tm9kZShub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ2xpc3QnKSB7XHJcbiAgICAgICAgICAgIHJlcyA9ICh0aGlzLl9pc0VsZW1lbnQobm9kZSkgJiYgKFsndWwnLCAnb2wnXS5pbmRleE9mKG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ2hlYWRpbmcnKSB7XHJcbiAgICAgICAgICAgIHJlcyA9ICh0aGlzLl9pc0VsZW1lbnQobm9kZSkgJiYgKFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnXS5pbmRleE9mKG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9LFxyXG4gICAgaXNFbXB0eU9ySW1hZ2VJbmxpbmU6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmRvbShlbCkuZ2V0KCk7XHJcbiAgICAgICAgaWYgKCFub2RlIHx8IG5vZGUubm9kZVR5cGUgPT09IDMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRhZyA9IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIHZhciB0YWdzID0gWydzdmcnLCAnaW1nJ107XHJcbiAgICAgICAgdmFyIG5vZWRpdGF0dHIgPSAobm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpID09PSAnZmFsc2UnKTtcclxuICAgICAgICB2YXIgaXNJbmxpbmUgPSB0aGlzLmlzKG5vZGUsICdpbmxpbmUnKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAoaXNJbmxpbmUgJiYgdGhpcy5pc0VtcHR5KG5vZGUpKSB8fFxyXG4gICAgICAgICAgICAgICAgKGlzSW5saW5lICYmIG5vZWRpdGF0dHIpIHx8XHJcbiAgICAgICAgICAgICAgICAodGFncy5pbmRleE9mKHRhZykgIT09IC0xKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgaXNFbXB0eTogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuX2dldE5vZGUoZWwpO1xyXG4gICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAobm9kZS5ub2RlVHlwZSA9PT0gMykgPyAobm9kZS50ZXh0Q29udGVudC50cmltKCkucmVwbGFjZSgvXFxuLywgJycpID09PSAnJykgOiAobm9kZS5pbm5lckhUTUwgPT09ICcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBpc1RhZzogZnVuY3Rpb24oZWwsIHRhZykge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5fZ2V0Tm9kZShlbCkudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSB0YWcpO1xyXG4gICAgfSxcclxuICAgIGlzVGV4dE5vZGU6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLl9nZXROb2RlKGVsKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChub2RlICYmIG5vZGUubm9kZVR5cGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMyk7XHJcbiAgICB9LFxyXG4gICAgaXNWaXNpYmxlOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fZ2V0Tm9kZShlbCk7XHJcblxyXG4gICAgICAgIHJldHVybiAhIShub2RlLm9mZnNldFdpZHRoIHx8IG5vZGUub2Zmc2V0SGVpZ2h0IHx8IG5vZGUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpO1xyXG4gICAgfSxcclxuICAgIGlzU2Nyb2xsVmlzaWJsZTogZnVuY3Rpb24oZWwsIHRvbGVyYW5jZSkge1xyXG4gICAgICAgIHZhciAkc2Nyb2xsVGFyZ2V0ID0gdGhpcy5hcHAuc2Nyb2xsLmdldFRhcmdldCgpO1xyXG4gICAgICAgIHZhciAkZWwgPSB0aGlzLmRvbShlbCk7XHJcbiAgICAgICAgdmFyIGRvY1ZpZXdUb3AgPSAkc2Nyb2xsVGFyZ2V0LnNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHZhciBkb2NWaWV3Qm90dG9tID0gZG9jVmlld1RvcCArICRzY3JvbGxUYXJnZXQuaGVpZ2h0KCk7XHJcbiAgICAgICAgdmFyIGVsZW1Ub3AgPSAkZWwub2Zmc2V0KCkudG9wO1xyXG4gICAgICAgIHRvbGVyYW5jZSA9IHRvbGVyYW5jZSB8fCAwO1xyXG5cclxuICAgICAgICByZXR1cm4gKGVsZW1Ub3AgPD0gZG9jVmlld0JvdHRvbSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGdldFxyXG4gICAgZ2V0RGF0YUJsb2NrOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbShlbCkuY2xvc2VzdCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlXScpO1xyXG4gICAgfSxcclxuICAgIGdldFR5cGU6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKGVsKS5hdHRyKCdkYXRhLScgKyB0aGlzLnByZWZpeCArICctdHlwZScpO1xyXG4gICAgfSxcclxuICAgIGdldEFsbElubGluZXM6IGZ1bmN0aW9uKGlubGluZSkge1xyXG4gICAgICAgIHZhciBpbmxpbmVzID0gW107XHJcbiAgICAgICAgdmFyIG5vZGUgPSBpbmxpbmU7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXMobm9kZSwgJ2lubGluZScpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmxpbmVzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW5saW5lcztcclxuICAgIH0sXHJcblxyXG4gICAgLy8gc2Nyb2xsXHJcbiAgICBzY3JvbGxUbzogZnVuY3Rpb24oJGVsLCB0b2xlcmFuY2UpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNTY3JvbGxWaXNpYmxlKCRlbCkpIHtcclxuICAgICAgICAgICAgdG9sZXJhbmNlID0gdG9sZXJhbmNlIHx8IDYwO1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gJGVsLm9mZnNldCgpO1xyXG4gICAgICAgICAgICB2YXIgJHRhcmdldCA9IHRoaXMuYXBwLnNjcm9sbC5nZXRUYXJnZXQoKTtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gb2Zmc2V0LnRvcCAtIHRvbGVyYW5jZTtcclxuICAgICAgICAgICAgJHRhcmdldC5zY3JvbGxUb3AodmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICR0YXJnZXQuc2Nyb2xsVG9wKHZhbHVlKTtcclxuICAgICAgICAgICAgfSwgMSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gcmVwbGFjZVxyXG4gICAgcmVwbGFjZVRvVGFnOiBmdW5jdGlvbihlbCwgdGFnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKGVsKS5yZXBsYWNlV2l0aChmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgICAgIHZhciAkZWwgPSB0aGlzLmRvbSgnPCcgKyB0YWcgKyAnPicpLmFwcGVuZChub2RlLmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgIGlmIChub2RlLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhdHRycyA9IG5vZGUuYXR0cmlidXRlcztcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAkZWwuYXR0cihhdHRyc1tpXS5ub2RlTmFtZSwgYXR0cnNbaV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJGVsO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHNwbGl0XHJcbiAgICBzcGxpdDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICB2YXIgJGVsID0gdGhpcy5kb20oZWwpO1xyXG4gICAgICAgIGVsID0gJGVsLmdldCgpO1xyXG4gICAgICAgIHZhciB0YWcgPSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gdGhpcy5hcHAuY29udGVudC5leHRyYWN0SHRtbEZyb21DYXJldChlbCk7XHJcbiAgICAgICAgaWYgKGZyYWdtZW50Lm5vZGVUeXBlICYmIGZyYWdtZW50Lm5vZGVUeXBlID09PSAxMSkge1xyXG4gICAgICAgICAgICBmcmFnbWVudCA9IHRoaXMuZG9tKGZyYWdtZW50LmNoaWxkTm9kZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyICRzZWNvbmRQYXJ0ID0gdGhpcy5kb20oJzwnICsgdGFnICsgJyAvPicpO1xyXG4gICAgICAgICRzZWNvbmRQYXJ0ID0gdGhpcy5jbG9uZUF0dHJzKGVsLCAkc2Vjb25kUGFydCk7XHJcbiAgICAgICAgJHNlY29uZFBhcnQuYXBwZW5kKGZyYWdtZW50KTtcclxuICAgICAgICAkZWwuYWZ0ZXIoJHNlY29uZFBhcnQpO1xyXG5cclxuICAgICAgICB2YXIgJGxhc3QgPSAkZWwuY2hpbGRyZW4oKS5sYXN0KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXMoJGxhc3QsICdpbmxpbmUnKSkge1xyXG4gICAgICAgICAgICB2YXIgaHRtbCA9ICRsYXN0Lmh0bWwoKTtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnV0aWxzLnJlbW92ZUludmlzaWJsZUNoYXJzKGh0bWwpO1xyXG4gICAgICAgICAgICBpZiAoaHRtbCA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgICRsYXN0LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdHlwZSA9IHRoaXMuZ2V0VHlwZSgkc2Vjb25kUGFydCk7XHJcbiAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuY3JlYXRlKCdibG9jay4nICsgdHlwZSwgJHNlY29uZFBhcnQsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCRlbC5odG1sKCkgPT09ICcnKSAkZWwucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiAkc2Vjb25kUGFydDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2xvbmVcclxuICAgIGNsb25lRW1wdHk6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgdmFyICRlbCA9IHRoaXMuZG9tKGVsKTtcclxuICAgICAgICB2YXIgdGFnID0gICRlbC5nZXQoKS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdmFyICRjbG9uZSA9IHRoaXMuZG9tKCc8JyArIHRhZyArICc+Jyk7XHJcblxyXG4gICAgICAgIHJldHVybiAkY2xvbmU7XHJcbiAgICB9LFxyXG4gICAgY2xvbmVBdHRyczogZnVuY3Rpb24oZWxGcm9tLCBlbFRvKSB7XHJcbiAgICAgICAgdmFyICRlbFRvID0gdGhpcy5kb20oZWxUbyk7XHJcbiAgICAgICAgdmFyIGF0dHJzID0gdGhpcy5fZ2V0Tm9kZShlbEZyb20pLmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgdmFyIGxlbiA9IGF0dHJzLmxlbmd0aDtcclxuICAgICAgICB3aGlsZSAobGVuLS0pIHtcclxuICAgICAgICAgICAgdmFyIGF0dHIgPSBhdHRyc1tsZW5dO1xyXG4gICAgICAgICAgICAkZWxUby5hdHRyKGF0dHIubmFtZSwgYXR0ci52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJGVsVG87XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGF0dHJzXHJcbiAgICBnZXRBdHRyczogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuX2dldE5vZGUoZWwpO1xyXG4gICAgICAgIHZhciBhdHRyID0ge307XHJcbiAgICAgICAgaWYgKG5vZGUuYXR0cmlidXRlcyAhPSBudWxsICYmIG5vZGUuYXR0cmlidXRlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBub2RlLmF0dHJpYnV0ZXNbaV0ubm9kZVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdmFsID0gKHRoaXMuX2lzTnVtYmVyKHZhbCkpID8gcGFyc2VGbG9hdCh2YWwpIDogdGhpcy5fZ2V0Qm9vbGVhbkZyb21TdHIodmFsKTtcclxuICAgICAgICAgICAgICAgIGF0dHJbbm9kZS5hdHRyaWJ1dGVzW2ldLm5vZGVOYW1lXSA9IHZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGF0dHI7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlRW1wdHlBdHRyczogZnVuY3Rpb24oZWwsIGF0dHJzKSB7XHJcbiAgICAgICAgdmFyICRlbCA9IHRoaXMuZG9tKGVsKTtcclxuICAgICAgICB2YXIgbmFtZSA9IGF0dHJzLmpvaW4oJyAnKTtcclxuICAgICAgICB2YXIgcmVzID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgJGVsLmF0dHIobmFtZSkgPT09ICd1bmRlZmluZWQnIHx8ICRlbC5hdHRyKG5hbWUpID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlcyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCRlbC5hdHRyKG5hbWUpID09PSAnJykge1xyXG4gICAgICAgICAgICAkZWwucmVtb3ZlQXR0cihuYW1lKTtcclxuICAgICAgICAgICAgcmVzID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGJsb2Nrc1xyXG4gICAgZ2V0QmxvY2tzOiBmdW5jdGlvbihlbCwgcGFyc2VydGFncywgZXh0ZW5kdGFncykge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fZ2V0Tm9kZShlbCk7XHJcbiAgICAgICAgdmFyIG5vZGVzID0gbm9kZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgIHZhciBmaW5hbE5vZGVzID0gW107XHJcbiAgICAgICAgdmFyIHRhZ3MgPSBwYXJzZXJ0YWdzIHx8IHRoaXMub3B0cy50YWdzLnBhcnNlcjtcclxuICAgICAgICBpZiAoZXh0ZW5kdGFncykge1xyXG4gICAgICAgICAgICB0YWdzID0gdGhpcy5hcHAudXRpbHMuZXh0ZW5kQXJyYXkodGFncywgZXh0ZW5kdGFncyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChub2Rlc1tpXS5ub2RlVHlwZSA9PT0gMSAmJiB0YWdzLmluZGV4T2Yobm9kZXNbaV0udGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGZpbmFsTm9kZXMucHVzaChub2Rlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaW5hbE5vZGVzO1xyXG4gICAgfSxcclxuICAgIGhhc0Jsb2NrczogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZ2V0QmxvY2tzKGVsKS5sZW5ndGggIT09IDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzaWJsaW5nc1xyXG4gICAgaGFzVGV4dFNpYmxpbmdzOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fZ2V0Tm9kZShlbCk7XHJcbiAgICAgICAgdmFyIGhhc1ByZXYgPSAobm9kZS5wcmV2aW91c1NpYmxpbmcgJiYgbm9kZS5wcmV2aW91c1NpYmxpbmcubm9kZVR5cGUgPT09IDMgJiYgIXRoaXMuaXNFbXB0eShub2RlLnByZXZpb3VzU2libGluZykpO1xyXG4gICAgICAgIHZhciBoYXNOZXh0ID0gKG5vZGUubmV4dFNpYmxpbmcgJiYgbm9kZS5uZXh0U2libGluZy5ub2RlVHlwZSA9PT0gMyAmJiAhdGhpcy5pc0VtcHR5KG5vZGUubmV4dFNpYmxpbmcpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChoYXNQcmV2IHx8IGhhc05leHQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfZ2V0Tm9kZTogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20oZWwpLmdldCgpO1xyXG4gICAgfSxcclxuICAgIF9nZXRCb29sZWFuRnJvbVN0cjogZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgaWYgKHN0ciA9PT0gJ3RydWUnKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBlbHNlIGlmIChzdHIgPT09ICdmYWxzZScpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH0sXHJcbiAgICBfaXNCbG9ja1RhZzogZnVuY3Rpb24odGFnLCBleHRlbmQpIHtcclxuICAgICAgICB2YXIgYXJyID0gdGhpcy5hcHAudXRpbHMuZXh0ZW5kQXJyYXkodGhpcy5vcHRzLnRhZ3MuYmxvY2ssIGV4dGVuZCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoYXJyLmluZGV4T2YodGFnLnRvTG93ZXJDYXNlKCkpICE9PSAtMSk7XHJcbiAgICB9LFxyXG4gICAgX2lzSW5saW5lVGFnOiBmdW5jdGlvbih0YWcsIGV4dGVuZCkge1xyXG4gICAgICAgIHZhciBhcnIgPSB0aGlzLmFwcC51dGlscy5leHRlbmRBcnJheSh0aGlzLm9wdHMudGFncy5pbmxpbmUsIGV4dGVuZCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoYXJyLmluZGV4T2YodGFnLnRvTG93ZXJDYXNlKCkpICE9PSAtMSk7XHJcbiAgICB9LFxyXG4gICAgX2lzRWxlbWVudDogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHJldHVybiAobm9kZSAmJiBub2RlLm5vZGVUeXBlICYmIG5vZGUubm9kZVR5cGUgPT09IDEpO1xyXG4gICAgfSxcclxuICAgIF9pc1RhZzogZnVuY3Rpb24odGFnKSB7XHJcbiAgICAgICAgcmV0dXJuICh0YWcgIT09IHVuZGVmaW5lZCAmJiB0YWcpO1xyXG4gICAgfSxcclxuICAgIF9pc051bWJlcjogZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuICFpc05hTihzdHIpICYmICFpc05hTihwYXJzZUZsb2F0KHN0cikpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdibG9ja3MnLCB7XHJcbiAgICBidWlsZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRGaXJzdExldmVsKCk7XHJcbiAgICB9LFxyXG4gICAgaXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5nZXRTZWxlY3RlZCgpLmxlbmd0aCA+IDEpO1xyXG4gICAgfSxcclxuICAgIHNldDogZnVuY3Rpb24oJGJsb2NrKSB7XHJcbiAgICAgICAgJGJsb2NrID0gJGJsb2NrLmNsb3Nlc3QoJ1tkYXRhLScgKyB0aGlzLnByZWZpeCArICctZmlyc3QtbGV2ZWxdJyk7XHJcblxyXG4gICAgICAgIC8vIHVuc2V0IG5vdCBmaXJzdCBsZXZlbFxyXG4gICAgICAgIHRoaXMudW5zZXROb3RGaXJzdExldmVsKCk7XHJcblxyXG4gICAgICAgIC8vIHNldCBmb2N1cyBjbGFzc1xyXG4gICAgICAgIHRoaXMuX3NldEZvY3VzKCRibG9jayk7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSwgMCk7XHJcblxyXG4gICAgICAgIC8vIHVpXHJcbiAgICAgICAgdGhpcy5hcHAucGF0aC5idWlsZCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIuYnVpbGQoKTtcclxuICAgICAgICB0aGlzLmFwcC5jb250cm9sLmNsb3NlKCk7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGFsbCBvciBvbmUgc2VsZWN0ZWRcclxuICAgICAgICB0aGlzLl9jaGVja1NlbGVjdGVkKCk7XHJcbiAgICB9LFxyXG4gICAgc2V0Rmlyc3RMZXZlbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2tzLmdldEZpcnN0TGV2ZWwoKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctYmxvY2stZm9jdXMnKTtcclxuICAgIH0sXHJcbiAgICB1bnNldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5nZXRCbG9ja3MoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctYmxvY2stZm9jdXMgJyArIHRoaXMucHJlZml4ICsgJy1ibG9jay1tdWx0aXBsZS1ob3ZlcicpO1xyXG4gICAgfSxcclxuICAgIHVuc2V0Tm90Rmlyc3RMZXZlbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5nZXRCbG9ja3MoKS5ub3QoJ1tkYXRhLScgKyB0aGlzLnByZWZpeCArICctZmlyc3QtbGV2ZWxdJykucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXggKyAnLWJsb2NrLWZvY3VzJyk7XHJcbiAgICB9LFxyXG4gICAgdW5zZXRIb3ZlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5nZXRCbG9ja3MoKS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctYmxvY2stbXVsdGlwbGUtaG92ZXInKTtcclxuICAgIH0sXHJcbiAgICBnZXRCbG9ja3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCkuZmluZCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlXScpO1xyXG4gICAgfSxcclxuICAgIGdldEZpcnN0TGV2ZWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCkuZmluZCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy1maXJzdC1sZXZlbF0nKTtcclxuICAgIH0sXHJcbiAgICBnZXRFZGl0YWJsZUJsb2NrczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLmVkaXRvci5nZXRMYXlvdXQoKS5maW5kKCdbY29udGVudGVkaXRhYmxlPXRydWVdJyk7XHJcbiAgICB9LFxyXG4gICAgZ2V0U2VsZWN0ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCkuZmluZCgnLicgKyB0aGlzLnByZWZpeCArICctYmxvY2stZm9jdXMnKTtcclxuICAgIH0sXHJcbiAgICBnZXRGaXJzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QmxvY2tzKCkuZmlyc3QoKS5kYXRhZ2V0KCdpbnN0YW5jZScpO1xyXG4gICAgfSxcclxuICAgIGdldEZpcnN0U2VsZWN0ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFNlbGVjdGVkKCkuZmlyc3QoKS5kYXRhZ2V0KCdpbnN0YW5jZScpO1xyXG4gICAgfSxcclxuICAgIGdldExhc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEJsb2NrcygpLmxhc3QoKS5kYXRhZ2V0KCdpbnN0YW5jZScpO1xyXG4gICAgfSxcclxuICAgIGdldExhc3RTZWxlY3RlZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VsZWN0ZWQoKS5sYXN0KCkuZGF0YWdldCgnaW5zdGFuY2UnKTtcclxuICAgIH0sXHJcbiAgICBwYXVzZUVkaXRhYmxlQmxvY2tzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmdldEVkaXRhYmxlQmxvY2tzKCkuYXR0cignY29udGVudGVkaXRhYmxlJywgZmFsc2UpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1lZGl0YWJsZS1wYXVzZScpO1xyXG4gICAgfSxcclxuICAgIHJ1bkVkaXRhYmxlQmxvY2tzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgJGJsb2NrcyA9IHRoaXMuYXBwLmVkaXRvci5nZXRMYXlvdXQoKS5maW5kKCcuJyArIHRoaXMucHJlZml4ICsgJy1lZGl0YWJsZS1wYXVzZScpO1xyXG4gICAgICAgICRibG9ja3MuYXR0cignY29udGVudGVkaXRhYmxlJywgdHJ1ZSkucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXggKyAnLWVkaXRhYmxlLXBhdXNlJyk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlU2VsZWN0ZWQ6IGZ1bmN0aW9uKHRyYXZlcnNlKSB7XHJcbiAgICAgICAgdmFyIGxhc3QgPSB0aGlzLmdldExhc3RTZWxlY3RlZCgpO1xyXG4gICAgICAgIHZhciBuZXh0O1xyXG4gICAgICAgIGlmICh0cmF2ZXJzZSAhPT0gZmFsc2UgJiYgbGFzdCkge1xyXG4gICAgICAgICAgICBuZXh0ID0gbGFzdC5nZXROZXh0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyByZW1vdmVcclxuICAgICAgICB0aGlzLmdldFNlbGVjdGVkKCkuZWFjaCh0aGlzLl9yZW1vdmVTZWxlY3RlZEJsb2NrLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAvLyB0cmF2ZXJzZVxyXG4gICAgICAgIGlmIChuZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChuZXh0LCAnc3RhcnQnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9idWlsZEZpcnN0TGV2ZWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBuYW1lID0gJ2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy1maXJzdC1sZXZlbCc7XHJcbiAgICAgICAgdmFyICRsYXlvdXQgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCk7XHJcblxyXG4gICAgICAgICRsYXlvdXQuZmluZCgnWycgKyBuYW1lICsgJ10nKS5yZW1vdmVBdHRyKG5hbWUpO1xyXG4gICAgICAgICRsYXlvdXQuY2hpbGRyZW4oJ1tkYXRhLScgKyB0aGlzLnByZWZpeCArICctdHlwZV0nKS5hdHRyKG5hbWUsIHRydWUpO1xyXG4gICAgfSxcclxuICAgIF9jaGVja1NlbGVjdGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgJGFsbCA9IHRoaXMuZ2V0Rmlyc3RMZXZlbCgpO1xyXG4gICAgICAgIHZhciAkc2VsZWN0ZWQgPSB0aGlzLmdldFNlbGVjdGVkKCk7XHJcbiAgICAgICAgaWYgKCRzZWxlY3RlZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy51bnNldEhvdmVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnVuc2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCRzZWxlY3RlZC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy51bnNldEhvdmVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldCgkc2VsZWN0ZWQuZXEoMCksIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoJGFsbC5sZW5ndGggPT09ICRzZWxlY3RlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy51bnNldEhvdmVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmVkaXRvci5zZWxlY3RBbGwoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmVkaXRvci51bnNldFNlbGVjdEFsbENsYXNzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9zZXRGb2N1czogZnVuY3Rpb24oJGJsb2NrKSB7XHJcbiAgICAgICB2YXIgZnVuYyA9ICgkYmxvY2suaGFzQ2xhc3ModGhpcy5wcmVmaXggKyAnLWJsb2NrLWZvY3VzJykpID8gJ3JlbW92ZUNsYXNzJyA6ICdhZGRDbGFzcyc7XHJcblxyXG4gICAgICAgJGJsb2NrW2Z1bmNdKHRoaXMucHJlZml4ICsgJy1ibG9jay1mb2N1cycpO1xyXG4gICAgICAgJGJsb2NrLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1ibG9jay1tdWx0aXBsZS1ob3ZlcicpO1xyXG4gICAgfSxcclxuICAgIF9yZW1vdmVTZWxlY3RlZEJsb2NrOiBmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICRub2RlLmRhdGFnZXQoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgaW5zdGFuY2UucmVtb3ZlKHsgdHJhdmVyc2U6IGZhbHNlIH0pO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdibG9jaycsIHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLiRibG9jayA9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmNyZWF0ZSgnYmxvY2suJyArIHRoaXMub3B0cy5lZGl0b3IubWFya3VwKTtcclxuICAgICAgICBpZiAoaHRtbCkgaW5zdGFuY2UuZ2V0QmxvY2soKS5odG1sKGh0bWwpO1xyXG5cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlSHRtbDogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZShodG1sKS5nZXRPdXRlckh0bWwoKTtcclxuICAgIH0sXHJcbiAgICBpczogZnVuY3Rpb24oJGVsKSB7XHJcbiAgICAgICAgcmV0dXJuICgkZWwpID8gdGhpcy5faXNCbG9ja0FjdGl2ZSgkZWwpIDogdGhpcy5nZXQoKTtcclxuICAgIH0sXHJcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xyXG4gICAgfSxcclxuICAgIHNldDogZnVuY3Rpb24oZWwsIGNhcmV0LCBmb3JjZSkge1xyXG4gICAgICAgIC8vIGlzIGluc3RhbmNlXHJcbiAgICAgICAgaWYgKGVsLmlzQmxvY2spIHtcclxuICAgICAgICAgICAgZWwgPSBlbC5nZXRCbG9jaygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2hlY2sgaWYgYWN0aXZlXHJcbiAgICAgICAgaWYgKGZvcmNlICE9PSB0cnVlICYmIHRoaXMuX2lzQmxvY2tBY3RpdmUoZWwpKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIHVuc2V0XHJcbiAgICAgICAgdGhpcy51bnNldCgpO1xyXG5cclxuICAgICAgICAvLyBzZXRcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gdGhpcy5fZ2V0SW5zdGFuY2UoZWwpO1xyXG4gICAgICAgIHRoaXMuJGJsb2NrID0gdGhpcy5pbnN0YW5jZS5nZXRCbG9jaygpO1xyXG4gICAgICAgIHRoaXMuJGJsb2NrLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1ibG9jay1mb2N1cycpO1xyXG5cclxuICAgICAgICAvLyBjYXJldFxyXG4gICAgICAgIHRoaXMuX3NldENhcmV0KGNhcmV0KTtcclxuXHJcbiAgICAgICAgLy8gdWlcclxuICAgICAgICB0aGlzLmFwcC5wYXRoLmJ1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5hcHAudG9vbGJhci5idWlsZCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRyb2wuYnVpbGQoKTtcclxuXHJcbiAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdibG9jay5zZXQnKTtcclxuICAgIH0sXHJcbiAgICB1bnNldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmluc3RhbmNlKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLiRibG9jayA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyB1bnNldFxyXG4gICAgICAgIHRoaXMuYXBwLmJsb2Nrcy51bnNldCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci51bnNldFNlbGVjdEFsbENsYXNzKCk7XHJcblxyXG4gICAgICAgIC8vIHVpXHJcbiAgICAgICAgdGhpcy5hcHAucGF0aC5idWlsZCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIuYnVpbGQoKTtcclxuICAgICAgICB0aGlzLmFwcC5jb250cm9sLmNsb3NlKCk7XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnYmxvY2sudW5zZXQnKTtcclxuICAgIH0sXHJcbiAgICBkdXBsaWNhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNBY3Rpb24oKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIHZhciBjbG9uZSA9IGluc3RhbmNlLmR1cGxpY2F0ZSgpO1xyXG4gICAgICAgIHZhciBuZXdJbnN0YW5jZSA9IGluc3RhbmNlLmluc2VydCh7XHJcbiAgICAgICAgICAgIGluc3RhbmNlOiBjbG9uZSxcclxuICAgICAgICAgICAgcG9zaXRpb246ICdhZnRlcicsXHJcbiAgICAgICAgICAgIGNhcmV0OiAnc3RhcnQnXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnYmxvY2suZHVwbGljYXRlJywgeyBpbnN0YW5jZTogbmV3SW5zdGFuY2UgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXdJbnN0YW5jZTtcclxuICAgIH0sXHJcbiAgICBtb3ZlVXA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNBY3Rpb24oKSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuZ2V0KCkubW92ZVVwKCk7XHJcbiAgICB9LFxyXG4gICAgbW92ZURvd246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNBY3Rpb24oKSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuZ2V0KCkubW92ZURvd24oKTtcclxuICAgIH0sXHJcbiAgICBjaGFuZ2U6IGZ1bmN0aW9uKGluc3RhbmNlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIHZhciAkYmxvY2sgPSBjdXJyZW50LmdldEJsb2NrKCk7XHJcbiAgICAgICAgdmFyICRuZXdCbG9jayA9IGluc3RhbmNlLmdldEJsb2NrKCk7XHJcblxyXG4gICAgICAgICRibG9jay5hZnRlcigkbmV3QmxvY2spO1xyXG4gICAgICAgICRibG9jay5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgLy8gcmVidWlsZFxyXG4gICAgICAgIHRoaXMuYXBwLnBhcnNlci5idWlsZEVsZW1lbnQoJG5ld0Jsb2NrKTtcclxuICAgICAgICB0aGlzLmFwcC5lZGl0b3IuYnVpbGQoKTtcclxuXHJcbiAgICAgICAgLy8gc2V0XHJcbiAgICAgICAgdGhpcy5zZXQoaW5zdGFuY2UpO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2Jsb2NrLmNoYW5nZScsIHsgaW5zdGFuY2U6IGluc3RhbmNlIH0pO1xyXG4gICAgfSxcclxuICAgIGFkZDogZnVuY3Rpb24ocGFyYW1zKSB7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcblxyXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5nZXQoKTtcclxuICAgICAgICB2YXIgcmVtb3ZlID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIGFsbCBzZWxlY3RlZFxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5lZGl0b3IuaXNBbGxTZWxlY3RlZCgpKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5lZGl0b3IudW5zZXRTZWxlY3RBbGxDbGFzcygpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCkuaHRtbCgnJykuYXBwZW5kKGN1cnJlbnQuZ2V0QmxvY2soKSk7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uID0gJ2FmdGVyJztcclxuICAgICAgICAgICAgcmVtb3ZlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYmxvY2tzXHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5hcHAuYmxvY2tzLmlzKCkpIHtcclxuICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuYXBwLmJsb2Nrcy5nZXRMYXN0U2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgcG9zaXRpb24gPSAnYWZ0ZXInO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBub3Qgc2VsZWN0ZWRcclxuICAgICAgICBlbHNlIGlmICghY3VycmVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmVkaXRvci5hZGQgPT09ICd0b3AnKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdGhpcy5hcHAuYmxvY2tzLmdldEZpcnN0KCk7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICdiZWZvcmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuYXBwLmJsb2Nrcy5nZXRMYXN0KCk7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICdhZnRlcic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbGlrZSB2YXJpYWJsZVxyXG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnQuaXNJbmxpbmVCbG9jaygpKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBjdXJyZW50LmdldFBhcmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoY3VycmVudC5nZXRCbG9jaygpLCAnYWZ0ZXInKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHBhcmVudCk7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBlbXB0eSBlbXB0aWFibGVcclxuICAgICAgICBlbHNlIGlmIChjdXJyZW50LmlzRW1wdGlhYmxlKCkgJiYgY3VycmVudC5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgdmFyICRibG9jayA9IGN1cnJlbnQuZ2V0QmxvY2soKTtcclxuXHJcbiAgICAgICAgICAgICRibG9jay5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctZW1wdHktbGF5ZXInKTtcclxuICAgICAgICAgICAgJGJsb2NrLmh0bWwoJycpO1xyXG4gICAgICAgICAgICBwb3NpdGlvbiA9ICdhcHBlbmQnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcG9zaXRpb25cclxuICAgICAgICBwb3NpdGlvbiA9IChwYXJhbXMucG9zaXRpb24pID8gcGFyYW1zLnBvc2l0aW9uIDogcG9zaXRpb247XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZVxyXG4gICAgICAgIHZhciBuZXdJbnN0YW5jZSA9IChwYXJhbXMuaW5zdGFuY2UpID8gcGFyYW1zLmluc3RhbmNlIDogdGhpcy5hcHAuY3JlYXRlKCdibG9jay4nICsgcGFyYW1zLm5hbWUsIHBhcmFtcy5zb3VyY2UpO1xyXG5cclxuICAgICAgICAvLyBpbnNlcnRcclxuICAgICAgICBjdXJyZW50Lmluc2VydCh7XHJcbiAgICAgICAgICAgIGluc3RhbmNlOiBuZXdJbnN0YW5jZSxcclxuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxyXG4gICAgICAgICAgICBjYXJldDogKHBhcmFtcy5jYXJldCkgPyBwYXJhbXMuY2FyZXQgOiAnZW5kJ1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAocmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3SW5zdGFuY2U7XHJcbiAgICB9LFxyXG4gICAgZm9ybWF0OiBmdW5jdGlvbihwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLmFwcC5mb3JtYXQuc2V0KHBhcmFtcyk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlOiBmdW5jdGlvbihwYXJhbXMpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIGlmICghaW5zdGFuY2UpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIHR5cGUgPSBpbnN0YW5jZS5nZXRUeXBlKCk7XHJcbiAgICAgICAgdmFyIHBhcmVudCA9IGluc3RhbmNlLmdldFBhcmVudCgpO1xyXG4gICAgICAgIHZhciBpbWFnZVVybCA9ICh0eXBlID09PSAnaW1hZ2UnKSA/IGluc3RhbmNlLmdldFNyYygpIDogZmFsc2U7XHJcbiAgICAgICAgdmFyIGlzVHJhdmVyc2UgPSAocGFyYW1zICYmIHR5cGVvZiBwYXJhbXMudGFydmVyc2UgIT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy50YXJ2ZXJzZSA9PT0gZmFsc2UpID8gZmFsc2UgOiB0cnVlO1xyXG4gICAgICAgIGlmIChpc1RyYXZlcnNlKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gaW5zdGFuY2UuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICB2YXIgcHJldiA9IGluc3RhbmNlLmdldFByZXYoKTtcclxuICAgICAgICAgICAgaW5zdGFuY2UucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobmV4dCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KG5leHQsICdzdGFydCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHByZXYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwcmV2LCAnZW5kJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuc2V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5zZXQoKTtcclxuICAgICAgICAgICAgaW5zdGFuY2UucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3QgaW1hZ2VcclxuICAgICAgICBpZiAodHlwZSA9PT0gJ2ltYWdlJykge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2ltYWdlLnJlbW92ZScsIHsgdXJsOiBpbWFnZVVybCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnYmxvY2sucmVtb3ZlJywgeyB0eXBlOiB0eXBlLCBwYXJlbnQ6IHBhcmVudCB9KTtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgZW1wdHlcclxuICAgICAgICBpZiAodGhpcy5hcHAuZWRpdG9yLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5lZGl0b3Iuc2V0RW1wdHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24ob2JqLCBuYW1lKSB7XHJcbiAgICAgICAgdmFyIHR5cGVzID0gWydsaW5lJywgJ3F1b3RlJywgJ2xheWVyJywgJ2NvZGUnXVxyXG4gICAgICAgIGlmICh0eXBlcy5pbmRleE9mKG5hbWUpICE9PSAtMSAmJiAhdGhpcy5vcHRzW25hbWVdKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIGFsaWduIC8gdmFsaWduIC8gb3V0c2V0XHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICdhbGlnbm1lbnQnICYmICF0aGlzLm9wdHMuYWxpZ24pIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ3ZhbGlnbicgJiYgIXRoaXMub3B0cy52YWxpZ24pIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ291dHNldCcgJiYgIXRoaXMub3B0cy5vdXRzZXQpIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBvYnNlcnZlQ2FyZDogZnVuY3Rpb24ob2JqLCBuYW1lKSB7XHJcbiAgICAgICAgaWYgKG5hbWUgPT09ICdpbWFnZScpIHtcclxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXQoKTtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZS5oYXNJbWFnZSgpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHBvcHVwOiBmdW5jdGlvbihwYXJhbXMsIGJ1dHRvbiwgbmFtZSkge1xyXG5cclxuICAgICAgICAvLyBhbGlnbm1lbnRcclxuICAgICAgICB2YXIgZm9ybTtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ2FsaWdubWVudCcpIHtcclxuICAgICAgICAgICAgZm9ybSA9IHRoaXMuX2J1aWxkU2VnbWVudHMoJ2FsaWduJywgJ2FsaWdubWVudCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB2YWxpZ25cclxuICAgICAgICBlbHNlIGlmIChuYW1lID09PSAndmFsaWduJykge1xyXG4gICAgICAgICAgICBmb3JtID0gdGhpcy5fYnVpbGRTZWdtZW50cygndmFsaWduJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG91dHNldFxyXG4gICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdvdXRzZXQnKSB7XHJcbiAgICAgICAgICAgIGZvcm0gPSB0aGlzLl9idWlsZFNlZ21lbnRzKCdvdXRzZXQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHBvcHVwXHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAuY3JlYXRlKG5hbWUsIHtcclxuICAgICAgICAgICAgc2V0dGVyOiAnYmxvY2suc2V0RGF0YScsXHJcbiAgICAgICAgICAgIGdldHRlcjogJ2Jsb2NrLmdldERhdGEnLFxyXG4gICAgICAgICAgICBmb3JtOiBmb3JtXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLm9wZW4oeyBidXR0b246IGJ1dHRvbiB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZGF0YVxyXG4gICAgZ2V0RGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXQoKTtcclxuICAgICAgICByZXR1cm4gaW5zdGFuY2UuZ2V0RGF0YSgpO1xyXG4gICAgfSxcclxuICAgIHNldERhdGE6IGZ1bmN0aW9uKHN0YWNrKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIGRhdGEgPSBzdGFjay5nZXREYXRhKCk7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5nZXQoKTtcclxuICAgICAgICBpbnN0YW5jZS5zZXREYXRhKGRhdGEpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfaXNCbG9ja0FjdGl2ZTogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICBpZiAodGhpcy5hcHAuYmxvY2tzLmlzKCkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gKHRoaXMuaW5zdGFuY2UgJiYgKHRoaXMuZG9tKGVsKS5nZXQoKSA9PT0gdGhpcy4kYmxvY2suZ2V0KCkpKTtcclxuICAgIH0sXHJcbiAgICBfaXNBY3Rpb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAoIXRoaXMuYXBwLmJsb2Nrcy5pcygpICYmIHRoaXMuaXMoKSk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkU2VnbWVudHM6IGZ1bmN0aW9uKG5hbWUsIHRpdGxlKSB7XHJcbiAgICAgICAgdmFyIGZvcm0gPSB7fTtcclxuICAgICAgICB2YXIgc2VnbWVudHMgPSB7fTtcclxuICAgICAgICB2YXIgb2JqID0gdGhpcy5vcHRzW25hbWVdO1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgICAgICAgaWYgKCFvYmpba2V5XSkgY29udGludWU7XHJcbiAgICAgICAgICAgIHNlZ21lbnRzW2tleV0gPSB7IG5hbWU6IG9ialtrZXldLCBwcmVmaXg6IG5hbWUgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRpdGxlID0gdGl0bGUgfHwgbmFtZTtcclxuICAgICAgICBmb3JtW25hbWVdID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnc2VnbWVudCcsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnIyMgZm9ybS4nICsgdGl0bGUgKyAnICMjJyxcclxuICAgICAgICAgICAgc2VnbWVudHM6IHNlZ21lbnRzXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZvcm07XHJcbiAgICB9LFxyXG4gICAgX2FwcGVuZFRvRW1wdHlCbG9jazogZnVuY3Rpb24oaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgZW1wdHlCbG9jayA9IHRoaXMuYXBwLmJsb2NrLmNyZWF0ZSgpO1xyXG4gICAgICAgIGVtcHR5QmxvY2suYXBwZW5kKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVtcHR5QmxvY2suZ2V0QmxvY2soKTtcclxuICAgIH0sXHJcbiAgICBfZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKGVsKS5kYXRhZ2V0KCdpbnN0YW5jZScpO1xyXG4gICAgfSxcclxuICAgIF9zZXRDYXJldDogZnVuY3Rpb24oY2FyZXQpIHtcclxuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS5pc0VkaXRhYmxlKCkpIHtcclxuICAgICAgICAgICAgaWYgKGNhcmV0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJHRhcmdldCA9IHRoaXMuJGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZ2V0VHlwZSgpID09PSAnbGlzdCcgJiYgKGNhcmV0ID09PSAnc3RhcnQnIHx8IGNhcmV0ID09PSAnZW5kJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0ID0gKGNhcmV0ID09PSAnc3RhcnQnKSA/IHRoaXMuJGJsb2NrLmZpbmQoJ2xpJykuZmlyc3QoKSA6IHRoaXMuJGJsb2NrLmZpbmQoJ2xpJykubGFzdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNhcmV0LnNldCgkdGFyZ2V0LCBjYXJldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnNjcm9sbC5zYXZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmVkaXRvci5nZXRXaW4oKS5mb2N1cygpO1xyXG4gICAgICAgICAgICB0aGlzLiRibG9jay5mb2N1cygpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcyksIDApO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5zY3JvbGwucmVzdG9yZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnZXZlbnQnLCB7XHJcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBsb2NhbFxyXG4gICAgICAgIHRoaXMuZHJhZ292ZXJFdmVudCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucHJlc3NlZENtZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNQb3B1cE1vdXNlVXAgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gZXZlbnRzXHJcbiAgICAgICAgdGhpcy5ldmVudHMgPSB7XHJcbiAgICAgICAgICAgIGZyYW1lOiBbJ2NsaWNrJywgJ2NvbnRleHRtZW51JywgJ3RvdWNoc3RhcnQnLCAnbW91c2VvdmVyJywgJ21vdXNldXAnLCAnbW91c2Vkb3duJywgJ2tleWRvd24nLCAna2V5dXAnLFxyXG4gICAgICAgICAgICAgICAgICAgICdwYXN0ZScsICdjb3B5JywgJ2N1dCcsICdkcm9wJywgJ2RyYWdzdGFydCcsICdkcmFnb3ZlcicsICdkcmFnbGVhdmUnXSxcclxuICAgICAgICAgICAgZG9jOiBbJ2tleWRvd24nLCAnbW91c2Vkb3duJywgJ2NsaWNrJ10sXHJcbiAgICAgICAgICAgIHdpbjogWydmb2N1cyddXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBydW46IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX3J1bkV2ZW50cygpO1xyXG4gICAgfSxcclxuICAgIHBhdXNlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xyXG4gICAgfSxcclxuICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9idWlsZFRhcmdldHMoKTtcclxuICAgICAgICB0aGlzLl9idWlsZFByZXZlbnRMaW5rcygpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkRXZlbnRzKCk7XHJcbiAgICB9LFxyXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50bmFtZSA9IHRoaXMucHJlZml4ICsgJy1ldmVudHMnO1xyXG5cclxuICAgICAgICB0aGlzLiRib2R5Lm9mZignLicgKyBldmVudG5hbWUpO1xyXG4gICAgICAgIHRoaXMuJHdpbi5vZmYoJy4nICsgZXZlbnRuYW1lKVxyXG4gICAgICAgIHRoaXMuYXBwLiRkb2Mub2ZmKCcuJyArIGV2ZW50bmFtZSlcclxuICAgIH0sXHJcblxyXG4gICAgLy8gb25cclxuICAgIG9ubW91c2VvdmVyOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgLy8gbXVsdGlwbGUgaG92ZXJcclxuICAgICAgICB0aGlzLl9idWlsZEhvdmVyKGUpO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5tb3VzZW92ZXInLCB7IGU6IGUgfSk7XHJcbiAgICB9LFxyXG4gICAgb25jb250ZXh0bWVudTogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnByZXNzZWRDbWQpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB2YXIgJGJsb2NrID0gdGhpcy5fZ2V0QmxvY2soZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2Nrcy5zZXQoJGJsb2NrKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25jbGljazogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnZWRpdG9yLmNsaWNrJywgeyBlOiBlIH0pO1xyXG4gICAgfSxcclxuICAgIG9ubW91c2V1cDogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIC8vIHN0YXRlXHJcbiAgICAgICAgdGhpcy5hcHAuc3RhdGUuYWRkKGUpO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5tb3VzZXVwJywgeyBlOiBlIH0pO1xyXG5cclxuICAgICAgICAvLyB1aVxyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIub2JzZXJ2ZSgpO1xyXG4gICAgfSxcclxuICAgIG9ubW91c2Vkb3duOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLnBvcHVwLmlzT3BlbigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zZXRCbG9jayhlKTtcclxuICAgICAgICB0aGlzLl9zZXRDYXJldElubGluZShlKTtcclxuICAgICAgICB0aGlzLmFwcC5wbGFjZWhvbGRlci5oYW5kbGVDbGljayhlKTtcclxuXHJcbiAgICAgICAgLy8gc3RhdGVcclxuICAgICAgICB0aGlzLmFwcC5zdGF0ZS5hZGQoZSk7XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnZWRpdG9yLm1vdXNlZG93bicsIHsgZTogZSB9KTtcclxuICAgIH0sXHJcbiAgICBvbnRvdWNoc3RhcnQ6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAvLyBzdGF0ZVxyXG4gICAgICAgIHRoaXMuYXBwLnN0YXRlLmFkZChlKTtcclxuICAgIH0sXHJcbiAgICBvbmtleWRvd246IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5rZXlkb3duJywgdGhpcy5fYnVpbGRFdmVudEtleXNPYmooZSkpO1xyXG4gICAgICAgIGlmIChldmVudC5pc1N0b3BwZWQoKSkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8gbGlzdGVuIHVuZG8gJiByZWRvXHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLnN0YXRlLmxpc3RlbihlKSkge1xyXG4gICAgICAgICAgICB0aGlzLnByZXNzZWRDbWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcmVzc2VkQ21kID0gdGhpcy5faXNDbWRQcmVzc2VkKGUpO1xyXG5cclxuICAgICAgICAvLyBlc2NcclxuICAgICAgICBpZiAodGhpcy5faXNFc2MoZSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2sudW5zZXQoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaGFuZGxlIHNob3J0Y3V0XHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLnNob3J0Y3V0LmhhbmRsZShlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyByZWxlYXNlIGtleWRvd25cclxuICAgICAgICB0aGlzLmFwcC5pbnB1dC5oYW5kbGUoZXZlbnQpO1xyXG4gICAgfSxcclxuICAgIG9ua2V5dXA6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5rZXl1cCcsIHRoaXMuX2J1aWxkRXZlbnRLZXlzT2JqKGUpKTtcclxuICAgICAgICBpZiAoZXZlbnQuaXNTdG9wcGVkKCkpIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIGNhdGNoIHRhYlxyXG4gICAgICAgIHZhciBrZXkgPSBlLndoaWNoO1xyXG4gICAgICAgIGlmIChrZXkgPT09IHRoaXMuYXBwLmtleWNvZGVzLlRBQiAmJiAhdGhpcy5hcHAuYmxvY2suaXMoKSkge1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgJiYgZS50YXJnZXQudGFnTmFtZSA9PT0gJ0JPRFknKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGZpcnN0ID0gdGhpcy5hcHAuYmxvY2tzLmdldEZpcnN0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuZWRpdG9yLnNldEZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQoJGZpcnN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldEJsb2NrKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnByZXNzZWRDbWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmFwcC5ibG9ja3MudW5zZXRIb3ZlcigpO1xyXG5cclxuICAgICAgICAvLyB1aVxyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIub2JzZXJ2ZSgpO1xyXG4gICAgfSxcclxuICAgIG9ucGFzdGU6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB0aGlzLmFwcC5jb250ZW50LnBhc3RlKGUpO1xyXG4gICAgfSxcclxuICAgIG9uY29weTogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRlbnQuY29weShlKTtcclxuICAgIH0sXHJcbiAgICBvbmN1dDogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRlbnQuY3V0KGUpO1xyXG4gICAgfSxcclxuICAgIG9uZHJvcDogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmVkaXRvci5kcm9wKSByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5kcm9wJywgeyBlOiBlIH0pO1xyXG4gICAgICAgIGlmIChldmVudC5pc1N0b3BwZWQoKSkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8gZHJvcFxyXG4gICAgICAgIHZhciBodG1sO1xyXG4gICAgICAgIHZhciBkdCA9IGUuZGF0YVRyYW5zZmVyO1xyXG4gICAgICAgIHZhciBpdGVtID0gZHQuZ2V0RGF0YSgnaXRlbScpO1xyXG4gICAgICAgIGlmIChpdGVtICE9PSAnJykge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmRyYWdnYWJsZSAmJiB0eXBlb2YgdGhpcy5vcHRzLmRyYWdnYWJsZVtpdGVtXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSB0aGlzLm9wdHMuZHJhZ2dhYmxlW2l0ZW1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaHRtbCA9IHRoaXMuZG9tKCdbZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLWRyb3AtaXRlbT0nICsgaXRlbSArICddJykuaHRtbCgpO1xyXG4gICAgICAgICAgICAgICAgaHRtbCA9IGh0bWwudHJpbSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBkcm9wXHJcbiAgICAgICAgICAgIGlmIChodG1sKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSAnYWZ0ZXInO1xyXG4gICAgICAgICAgICAgICAgdmFyICRvdmVyID0gdGhpcy5hcHAuZWRpdG9yLmdldEJvZHkoKS5maW5kKCcuJyArIHRoaXMucHJlZml4ICsgJy1kcmFnZ2FibGUtb3ZlcicpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRvdmVyLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gJ2FwcGVuZCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuY29udGVudC5kcm9wKGUsIGh0bWwsIHBvc2l0aW9uLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRzLmltYWdlICYmIHRoaXMub3B0cy5pbWFnZS51cGxvYWQgJiYgZHQuZmlsZXMgIT09IG51bGwgJiYgZHQuZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmltYWdlLmRyb3AoZSwgZHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaHRtbCA9IGR0LmdldERhdGEoXCJ0ZXh0L2h0bWxcIik7XHJcbiAgICAgICAgICAgIGh0bWwgPSAoaHRtbC50cmltKCkgPT09ICcnKSA/IGR0LmdldERhdGEoJ1RleHQnKSA6IGh0bWw7XHJcblxyXG4gICAgICAgICAgICAvLyBkcm9wXHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmNvbnRlbnQuZHJvcChlLCBodG1sKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbW92ZURyYWdQbGFjZWhvbGRlcigpO1xyXG4gICAgICAgIHRoaXMuYXBwLm9ic2VydmVyLnRyaWdnZXIgPSB0cnVlO1xyXG4gICAgfSxcclxuICAgIG9uZHJhZ3N0YXJ0OiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdlZGl0b3IuZHJhZ3N0YXJ0JywgeyBlOiBlIH0pO1xyXG4gICAgfSxcclxuICAgIG9uZHJhZ292ZXI6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5kcmFnb3ZlckV2ZW50ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmFwcC5vYnNlcnZlci50cmlnZ2VyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlRHJhZ1BsYWNlaG9sZGVyKCk7XHJcblxyXG4gICAgICAgIC8vIGRhdGFcclxuICAgICAgICB2YXIgdHlwZXMgPSBlLmRhdGFUcmFuc2Zlci50eXBlcztcclxuICAgICAgICBpZiAodHlwZXMuaW5kZXhPZignaXRlbScpICE9PSAtMSkge1xyXG4gICAgICAgICAgICB2YXIgJGJsb2NrID0gdGhpcy5fZ2V0QmxvY2soZS50YXJnZXQpO1xyXG4gICAgICAgICAgICBpZiAoJGJsb2NrLmxlbmd0aCAhPT0gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9ICRibG9jay5kYXRhZ2V0KCdpbnN0YW5jZScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmdldFR5cGUoJ2xheWVyJykgJiYgaW5zdGFuY2UuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGJsb2NrLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1kcmFnZ2FibGUtb3ZlcicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyICRwbCA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1kcmFnZ2FibGUtcGxhY2Vob2xkZXInKTtcclxuICAgICAgICAgICAgICAgICAgICAkYmxvY2suYWZ0ZXIoJHBsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdlZGl0b3IuZHJhZ292ZXInLCB7IGU6IGUgfSk7XHJcbiAgICB9LFxyXG4gICAgb25kcmFnbGVhdmU6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5kcmFnb3ZlckV2ZW50ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbW92ZURyYWdQbGFjZWhvbGRlcigpO1xyXG4gICAgICAgIHRoaXMuYXBwLm9ic2VydmVyLnRyaWdnZXIgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5kcmFnbGVhdmUnLCB7IGU6IGUgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIG9uIHdpblxyXG4gICAgb253aW5mb2N1czogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1JlbW92ZVJhbmdlcygpKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5zZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSwgMCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIG9uIGRvY1xyXG4gICAgb25kb2NrZXlkb3duOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzRXNjKGUpICYmIHRoaXMuYXBwLnBvcHVwLmlzT3BlbigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb25kb2Ntb3VzZWRvd246IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB0aGlzLmlzUG9wdXBNb3VzZVVwID0gKHRoaXMuZG9tKGUudGFyZ2V0KS5jbG9zZXN0KCcuJyArIHRoaXMucHJlZml4ICsgJy1wb3B1cC0nICsgdGhpcy51dWlkKS5sZW5ndGggIT09IDApO1xyXG4gICAgfSxcclxuICAgIG9uZG9jY2xpY2s6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzT3V0c2lkZUVkaXRvcihlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5hcHAucG9wdXAuaXNPcGVuKCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNQb3B1cE1vdXNlVXAgPT09IGZhbHNlKSB0aGlzLmFwcC5wb3B1cC5jbG9zZShmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5lZGl0b3Iuc2V0Qmx1cigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wcmVzc2VkQ21kID0gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9idWlsZFByZXZlbnRMaW5rczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50bmFtZSA9IHRoaXMucHJlZml4ICsgJy1wcmV2ZW50LWV2ZW50cyc7XHJcbiAgICAgICAgdGhpcy4kYm9keS5vbignY2xpY2suJyArIGV2ZW50bmFtZSAgKyAnIGRibGNsaWNrLicgKyBldmVudG5hbWUsIHRoaXMuX3ByZXZlbnRMaW5rcy5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRUYXJnZXRzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRib2R5ID0gdGhpcy5hcHAuZWRpdG9yLmdldEJvZHkoKTtcclxuICAgICAgICB0aGlzLiR3aW4gPSB0aGlzLmFwcC5lZGl0b3IuZ2V0V2luKCk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkRXZlbnRLZXlzT2JqOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGUud2hpY2g7XHJcbiAgICAgICAgdmFyIGFycm93S2V5cyA9IFt0aGlzLmFwcC5rZXljb2Rlcy5VUCwgdGhpcy5hcHAua2V5Y29kZXMuRE9XTiwgdGhpcy5hcHAua2V5Y29kZXMuTEVGVCwgdGhpcy5hcHAua2V5Y29kZXMuUklHSFRdO1xyXG4gICAgICAgIHZhciBpc0FscGhhS2V5cyA9ICgoIWUuY3RybEtleSAmJiAhZS5tZXRhS2V5KSAmJiAoKGtleSA+PSA0OCAmJiBrZXkgPD0gNTcpIHx8IChrZXkgPj0gNjUgJiYga2V5IDw9IDkwKSkpO1xyXG4gICAgICAgIHZhciBrID0gdGhpcy5hcHAua2V5Y29kZXM7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdlJzogZSxcclxuICAgICAgICAgICAgJ2tleSc6IGtleSxcclxuICAgICAgICAgICAgJ2N0cmwnOiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSksXHJcbiAgICAgICAgICAgICdzaGlmdCc6IChlLnNoaWZ0S2V5KSxcclxuICAgICAgICAgICAgJ2FsdCc6IChlLmFsdEtleSksXHJcbiAgICAgICAgICAgICdzZWxlY3QnOiAoKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpICYmICFlLmFsdEtleSAmJiBrZXkgPT09IDY1KSxcclxuICAgICAgICAgICAgJ2VudGVyJzogKGtleSA9PT0gay5FTlRFUiksXHJcbiAgICAgICAgICAgICdzcGFjZSc6IChrZXkgPT09IGsuU1BBQ0UpLFxyXG4gICAgICAgICAgICAnZXNjJzogKGtleSA9PT0gay5FU0MpLFxyXG4gICAgICAgICAgICAndGFiJzogKGtleSA9PT0gay5UQUIgJiYgIWUuc2hpZnRLZXkgJiYgIWUuYWx0S2V5ICYmICFlLmN0cmxLZXkgJiYgIWUubWV0YUtleSksXHJcbiAgICAgICAgICAgICdkZWxldGUnOiAoa2V5ID09PSBrLkRFTEVURSksXHJcbiAgICAgICAgICAgICdiYWNrc3BhY2UnOiAoa2V5ID09PSBrLkJBQ0tTUEFDRSksXHJcbiAgICAgICAgICAgICdhbHBoYSc6IGlzQWxwaGFLZXlzLFxyXG4gICAgICAgICAgICAnYXJyb3cnOiAoYXJyb3dLZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpLFxyXG4gICAgICAgICAgICAnbGVmdCc6IChrZXkgPT09IGsuTEVGVCksXHJcbiAgICAgICAgICAgICdyaWdodCc6IChrZXkgPT09IGsuUklHSFQpLFxyXG4gICAgICAgICAgICAndXAnOiAoa2V5ID09PSBrLlVQKSxcclxuICAgICAgICAgICAgJ2Rvd24nOiAoa2V5ID09PSBrLkRPV04pLFxyXG4gICAgICAgICAgICAnbGVmdC1yaWdodCc6IChrZXkgPT09IGsuTEVGVCB8fCBrZXkgPT09IGsuUklHSFQpLFxyXG4gICAgICAgICAgICAndXAtbGVmdCc6IChrZXkgPT09IGsuVVAgfHwga2V5ID09PSBrLkxFRlQpLFxyXG4gICAgICAgICAgICAnZG93bi1yaWdodCc6IChrZXkgPT09IGsuRE9XTiB8fCBrZXkgPT09IGsuUklHSFQpXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRFdmVudHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBldmVudG5hbWUgPSB0aGlzLnByZWZpeCArICctZXZlbnRzJztcclxuXHJcbiAgICAgICAgdGhpcy5fYnVpbGRUYXJnZXRFdmVudHModGhpcy4kYm9keSwgdGhpcy5ldmVudHMuZnJhbWUsIGV2ZW50bmFtZSwgJycpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkVGFyZ2V0RXZlbnRzKHRoaXMuJHdpbiwgdGhpcy5ldmVudHMud2luLCBldmVudG5hbWUsICd3aW4nKTtcclxuICAgICAgICB0aGlzLl9idWlsZFRhcmdldEV2ZW50cyh0aGlzLmFwcC4kZG9jLCB0aGlzLmV2ZW50cy5kb2MsIGV2ZW50bmFtZSwgJ2RvYycpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZFRhcmdldEV2ZW50czogZnVuY3Rpb24oJHRhcmdldCwgZXZlbnRzLCBldmVudG5hbWUsIHR5cGUpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAkdGFyZ2V0Lm9uKGV2ZW50c1tpXSArICcuJyArIGV2ZW50bmFtZSwgdGhpc1snb24nICsgdHlwZSArIGV2ZW50c1tpXV0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZEhvdmVyOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIHByZXNzZWQgJiBpbnN0YW5jZVxyXG4gICAgICAgIGlmICghdGhpcy5wcmVzc2VkQ21kIHx8ICFpbnN0YW5jZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgJGJsb2NrID0gdGhpcy5kb20oZS50YXJnZXQpLmNsb3Nlc3QoJ1tkYXRhLScgKyB0aGlzLnByZWZpeCArICctZmlyc3QtbGV2ZWxdJyk7XHJcbiAgICAgICAgaWYgKCRibG9jay5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gdW5zZXRcclxuICAgICAgICB0aGlzLmFwcC5ibG9ja3MudW5zZXRIb3ZlcigpO1xyXG5cclxuICAgICAgICAvLyBidWlsZCBob3ZlclxyXG4gICAgICAgIGlmICghJGJsb2NrLmhhc0NsYXNzKHRoaXMucHJlZml4ICsgJy1ibG9jay1mb2N1cycpKSB7XHJcbiAgICAgICAgICAgICRibG9jay5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctYmxvY2stbXVsdGlwbGUtaG92ZXInKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3J1bkV2ZW50czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50bmFtZSA9IHRoaXMucHJlZml4ICsgJy1ldmVudHMnO1xyXG5cclxuICAgICAgICB0aGlzLl9idWlsZFRhcmdldEV2ZW50cyh0aGlzLiRib2R5LCB0aGlzLmV2ZW50cy5mcmFtZSwgZXZlbnRuYW1lLCAnJyk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRUYXJnZXRFdmVudHModGhpcy4kd2luLCB0aGlzLmV2ZW50cy53aW4sIGV2ZW50bmFtZSwgJ3dpbicpO1xyXG4gICAgfSxcclxuICAgIF9wYXVzZUV2ZW50czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50bmFtZSA9IHRoaXMucHJlZml4ICsgJy1ldmVudHMnO1xyXG5cclxuICAgICAgICBpZiAodGhpcy4kYm9keSkge1xyXG4gICAgICAgICAgICB0aGlzLiRib2R5Lm9mZignLicgKyBldmVudG5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLiR3aW4ub2ZmKCcuJyArIGV2ZW50bmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9nZXRCbG9jazogZnVuY3Rpb24odGFyZ2V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKHRhcmdldCkuY2xvc2VzdCgnW2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlXScpO1xyXG4gICAgfSxcclxuICAgIF9zZXRDYXJldElubGluZTogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIHZhciBjb2RlID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICAvLyBzdmcgb3IgaW1nXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFwcC5lbGVtZW50LmlzRW1wdHlPckltYWdlSW5saW5lKGUudGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KGUudGFyZ2V0LCAnYWZ0ZXInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjb2RlXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuYXBwLnNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIGUudGFyZ2V0LnRhZ05hbWUgPT09ICdDT0RFJykge1xyXG4gICAgICAgICAgICAgICAgY29kZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCAmJiBjb2RlICYmIGN1cnJlbnQudGFnTmFtZSAhPT0gJ0NPREUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNhcmV0LnNldChlLnRhcmdldCwgJ3N0YXJ0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9zZXRCbG9jazogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIC8vIHNldCBmb2N1cyBldmVudFxyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci5zZXRGb2N1cygpO1xyXG5cclxuICAgICAgICB2YXIgJGJsb2NrID0gKGUpID8gdGhpcy5fZ2V0QmxvY2soZS50YXJnZXQpIDogdGhpcy5hcHAuc2VsZWN0aW9uLmdldERhdGFCbG9jaygpO1xyXG4gICAgICAgIGlmICgkYmxvY2subGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIHByZXZlbnQgY29udGVudGVkaXRhYmxlIGZhbHNlIGZvY3VzXHJcbiAgICAgICAgaWYgKCRibG9jay5hdHRyKCdjb250ZW50ZWRpdGFibGUnKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbXVsdGlwbGVcclxuICAgICAgICBpZiAodGhpcy5wcmVzc2VkQ21kKSB7XHJcbiAgICAgICAgICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2Nrcy5zZXQoJGJsb2NrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2luZ2xlXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldCgkYmxvY2spO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfaXNSZW1vdmVSYW5nZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIHJldHVybiAodGhpcy5hcHAuYmxvY2tzLmlzKCkgfHwgKGluc3RhbmNlICYmIGluc3RhbmNlLmlzSW5saW5lQmxvY2soKSkpO1xyXG4gICAgfSxcclxuICAgIF9pc0VzYzogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHJldHVybiAoZS53aGljaCA9PT0gdGhpcy5hcHAua2V5Y29kZXMuRVNDKTtcclxuICAgIH0sXHJcbiAgICBfaXNPdXRzaWRlRWRpdG9yOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyICR0YXJnZXQgPSB0aGlzLmRvbShlLnRhcmdldCk7XHJcbiAgICAgICAgdmFyIHRhcmdldHMgPSBbJy1jb250YWluZXItJywgJy1wb3B1cC0nLCAnLWNvbnRyb2wtJ107XHJcblxyXG4gICAgICAgIHJldHVybiAoJHRhcmdldC5jbG9zZXN0KCcuJyArIHRoaXMucHJlZml4ICsgdGFyZ2V0cy5qb2luKHRoaXMudXVpZCArICcsLicgKyB0aGlzLnByZWZpeCkgKyB0aGlzLnV1aWQpLmxlbmd0aCA9PT0gMCk7XHJcbiAgICB9LFxyXG4gICAgX2lzQ21kUHJlc3NlZDogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5vcHRzLnNlbGVjdGlvbi5tdWx0aXBsZSkgPyAoKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpICYmICFlLnNoaWZ0S2V5ICYmICFlLmFsdEtleSkgOiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBfaXNMaW5rQ2xpY2s6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZG9tKGUudGFyZ2V0KS5jbG9zZXN0KCdhJykubGVuZ3RoICE9PSAwKTtcclxuICAgIH0sXHJcbiAgICBfcmVtb3ZlRHJhZ1BsYWNlaG9sZGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgJGJvZHkgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0Qm9keSgpO1xyXG4gICAgICAgICRib2R5LmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLWRyYWdnYWJsZS1wbGFjZWhvbGRlcicpLnJlbW92ZSgpO1xyXG4gICAgICAgICRib2R5LmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLWRyYWdnYWJsZS1vdmVyJykucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXggKyAnLWRyYWdnYWJsZS1vdmVyJyk7XHJcbiAgICB9LFxyXG4gICAgX3ByZXZlbnRMaW5rczogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0xpbmtDbGljayhlKSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdzZWxlY3Rpb24nLCB7XHJcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnNhdmVkU2VsZWN0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zYXZlZE1hcmtlciA9IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLndpbiA9IHRoaXMuYXBwLmVkaXRvci5nZXRXaW5Ob2RlKCk7XHJcbiAgICAgICAgdGhpcy5kb2MgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0RG9jTm9kZSgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBnZXRcclxuICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHNlbCA9IHRoaXMuX2dldFNlbGVjdGlvbigpO1xyXG4gICAgICAgIHZhciByYW5nZSA9IHRoaXMuX2dldFJhbmdlKHNlbCk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLl9nZXRDdXJyZW50KHNlbCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNlbGVjdGlvbjogc2VsLFxyXG4gICAgICAgICAgICByYW5nZTogcmFuZ2UsXHJcbiAgICAgICAgICAgIGNvbGxhcHNlZDogdGhpcy5fZ2V0Q29sbGFwc2VkKHNlbCwgcmFuZ2UpLFxyXG4gICAgICAgICAgICBjdXJyZW50OiBjdXJyZW50LFxyXG4gICAgICAgICAgICBwYXJlbnQ6IHRoaXMuX2dldFBhcmVudChjdXJyZW50KVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgZ2V0UmFuZ2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRSYW5nZSh0aGlzLmdldCgpLnNlbGVjdGlvbik7XHJcbiAgICB9LFxyXG4gICAgZ2V0Tm9kZXM6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICB2YXIgc2VsID0gdGhpcy5nZXQoKTtcclxuICAgICAgICB2YXIgaXNJbmxpbmUgPSAoZGF0YSAmJiAoKGRhdGEudHlwZSAmJiBkYXRhLnR5cGUgPT09ICdpbmxpbmUnKSB8fCAoZGF0YS50YWdzICYmIGRhdGEudGFncy5pbmRleE9mKCdhJykgIT09IC0xKSkpO1xyXG4gICAgICAgIHZhciBmdW5jID0gKGlzSW5saW5lKSA/ICdfZ2V0QWxsUmFuZ2VOb2RlcycgOiAnX2dldFJhbmdlTm9kZXMnO1xyXG4gICAgICAgIHZhciBub2RlcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5hcHAuZWRpdG9yLmlzQWxsU2VsZWN0ZWQoKSkge1xyXG4gICAgICAgICAgICBub2RlcyA9IHRoaXMuYXBwLmVkaXRvci5nZXRMYXlvdXQoKS5jaGlsZHJlbigpLmdldEFsbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbm9kZXMgPSAoc2VsLnNlbGVjdGlvbiAmJiBzZWwucmFuZ2UpID8gdGhpc1tmdW5jXShzZWwucmFuZ2UpIDogbm9kZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gKG5vZGVzLmxlbmd0aCA+IDApID8gdGhpcy5fZmlsdGVyTm9kZXMobm9kZXMsIHNlbC5yYW5nZSwgaXNJbmxpbmUsIGRhdGEpIDogbm9kZXM7XHJcbiAgICB9LFxyXG4gICAgZ2V0Q3VycmVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHNlbCA9IHRoaXMuX2dldFNlbGVjdGlvbigpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRDdXJyZW50KHNlbCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0UGFyZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0Q3VycmVudCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRQYXJlbnQoY3VycmVudCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0RWxlbWVudChlbCwgJ2VsZW1lbnQnKTtcclxuICAgIH0sXHJcbiAgICBnZXRJbmxpbmU6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEVsZW1lbnQoZWwsICdpbmxpbmUnKTtcclxuICAgIH0sXHJcbiAgICBnZXRUb3BJbmxpbmU6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSAoZWwpID8gdGhpcy5kb20oZWwpLmdldCgpIDogdGhpcy5nZXRDdXJyZW50KCk7XHJcbiAgICAgICAgdmFyIGlubGluZXMgPSBbXTtcclxuICAgICAgICB3aGlsZSAobm9kZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZ2V0RWxlbWVudChub2RlLCAnaW5saW5lJykpIHtcclxuICAgICAgICAgICAgICAgIGlubGluZXMucHVzaChub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGlubGluZXNbaW5saW5lcy5sZW5ndGgtMV07XHJcbiAgICB9LFxyXG4gICAgZ2V0RGF0YUJsb2NrOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHZhciBzZWwgPSB0aGlzLl9nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICB2YXIgbm9kZSA9IGVsIHx8IHRoaXMuX2dldEN1cnJlbnQoc2VsKTtcclxuXHJcbiAgICAgICAgaWYgKG5vZGUpIHtcclxuICAgICAgICAgICAgbm9kZSA9IHRoaXMuZG9tKG5vZGUpLmdldCgpO1xyXG4gICAgICAgICAgICB3aGlsZSAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy10eXBlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb20obm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0QmxvY2s6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEVsZW1lbnQoZWwsICdibG9jaycpO1xyXG4gICAgfSxcclxuICAgIGdldFRleHQ6IGZ1bmN0aW9uKHR5cGUsIG51bSkge1xyXG4gICAgICAgIHZhciBzZWwgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIHZhciB0ZXh0ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmICghc2VsLnNlbGVjdGlvbikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGlmICh0eXBlICYmIHNlbC5yYW5nZSkge1xyXG4gICAgICAgICAgICBudW0gPSAodHlwZW9mIG51bSA9PT0gJ3VuZGVmaW5lZCcpID8gMSA6IG51bTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlbCA9IHRoaXMuYXBwLmVkaXRvci5nZXRMYXlvdXQoKS5nZXQoKTtcclxuICAgICAgICAgICAgdmFyIGNsb25lZCA9IHNlbC5yYW5nZS5jbG9uZVJhbmdlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2JlZm9yZScpIHtcclxuICAgICAgICAgICAgICAgIGNsb25lZC5jb2xsYXBzZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNsb25lZC5zZXRTdGFydChlbCwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGV4dCA9IGNsb25lZC50b1N0cmluZygpLnNsaWNlKC1udW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdhZnRlcicpIHtcclxuICAgICAgICAgICAgICAgIGNsb25lZC5zZWxlY3ROb2RlQ29udGVudHMoZWwpO1xyXG4gICAgICAgICAgICAgICAgY2xvbmVkLnNldFN0YXJ0KHNlbC5yYW5nZS5lbmRDb250YWluZXIsIHNlbC5yYW5nZS5lbmRPZmZzZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRleHQgPSBjbG9uZWQudG9TdHJpbmcoKS5zbGljZSgwLCBudW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0ZXh0ID0gKHNlbC5zZWxlY3Rpb24pID8gc2VsLnNlbGVjdGlvbi50b1N0cmluZygpIDogJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgIH0sXHJcbiAgICBnZXRIdG1sOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaHRtbCA9ICcnO1xyXG4gICAgICAgIHZhciBzZWwgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIGlmIChzZWwuc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBjbG9uZWQgPSBzZWwucmFuZ2UuY2xvbmVDb250ZW50cygpO1xyXG4gICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChjbG9uZWQpO1xyXG4gICAgICAgICAgICBodG1sID0gZGl2LmlubmVySFRNTDtcclxuICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPHA+PFxcL3A+JC9pLCAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcbiAgICBnZXRQb3NpdGlvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgIHZhciBwb3MgPSB7IHRvcDogMCwgbGVmdDogMCwgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xyXG4gICAgICAgIGlmICh0aGlzLndpbi5nZXRTZWxlY3Rpb24gJiYgcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XHJcbiAgICAgICAgICAgIHJhbmdlID0gcmFuZ2UuY2xvbmVSYW5nZSgpO1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gKHJhbmdlLnN0YXJ0T2Zmc2V0LTEpO1xyXG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydChyYW5nZS5zdGFydENvbnRhaW5lciwgKG9mZnNldCA8IDApID8gMCA6IG9mZnNldCk7XHJcbiAgICAgICAgICAgIHZhciByZWN0ID0gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIHBvcyA9IHsgdG9wOiByZWN0LnRvcCwgbGVmdDogcmVjdC5sZWZ0LCB3aWR0aDogKHJlY3QucmlnaHQgLSByZWN0LmxlZnQpICwgaGVpZ2h0OiAocmVjdC5ib3R0b20gLSByZWN0LnRvcCkgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwb3M7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHNldFxyXG4gICAgc2V0OiBmdW5jdGlvbihzZWwsIHJhbmdlKSB7XHJcbiAgICAgICAgaWYgKHNlbCkge1xyXG4gICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHNldFJhbmdlOiBmdW5jdGlvbihyYW5nZSkge1xyXG4gICAgICAgIHRoaXMuc2V0KHRoaXMud2luLmdldFNlbGVjdGlvbigpLCByYW5nZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGlzXHJcbiAgICBpczogZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGVsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMuZG9tKGVsKS5nZXQoKTtcclxuICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5nZXROb2RlcygpO1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVzW2ldID09PSBub2RlKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCkuc2VsZWN0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGlzQ29sbGFwc2VkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc2VsID0gdGhpcy5nZXQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29sbGFwc2VkKHNlbC5zZWxlY3Rpb24sIHNlbC5yYW5nZSk7XHJcblxyXG4gICAgfSxcclxuICAgIGlzSW46IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmRvbShlbCkuZ2V0KCk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldEN1cnJlbnQoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChjdXJyZW50ICYmIG5vZGUpID8gbm9kZS5jb250YWlucyhjdXJyZW50KSA6IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGlzQWxsOiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5kb20oZWwpLmdldCgpO1xyXG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSB0aGlzLndpbi5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLl9nZXRSYW5nZShzZWxlY3Rpb24pO1xyXG5cclxuICAgICAgICBpZiAoc2VsZWN0aW9uLmlzQ29sbGFwc2VkKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzKG5vZGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKHR5cGVvZiBub2RlLnRleHRDb250ZW50ICE9PSAndW5kZWZpbmVkJykgJiYgKG5vZGUudGV4dENvbnRlbnQudHJpbSgpLmxlbmd0aCA9PT0gcmFuZ2UudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoKSlcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHNlbGVjdFxyXG4gICAgc2VsZWN0OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5kb20oZWwpLmdldCgpO1xyXG4gICAgICAgIHZhciByYW5nZSA9IHRoaXMuZG9jLmNyZWF0ZVJhbmdlKCk7XHJcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xyXG4gICAgICAgIHRoaXMuc2V0UmFuZ2UocmFuZ2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyByZW1vdmVcclxuICAgIHJlbW92ZUFsbFJhbmdlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHNlbCA9IHRoaXMuX2dldFNlbGVjdGlvbigpO1xyXG4gICAgICAgIGlmIChzZWwpIHtcclxuICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gZGVsZXRlXHJcbiAgICBkZWxldGVDb250ZW50czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5nZXRSYW5nZSgpO1xyXG4gICAgICAgIGlmICghdGhpcy5pc0NvbGxhcHNlZCgpICYmIHJhbmdlKSB7XHJcbiAgICAgICAgICAgIHJhbmdlLmRlbGV0ZUNvbnRlbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjb2xsYXBzZVxyXG4gICAgY29sbGFwc2U6IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICB0eXBlID0gdHlwZSB8fCAnc3RhcnQnO1xyXG4gICAgICAgIHZhciBzZWwgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIGlmIChzZWwuc2VsZWN0aW9uICYmICFzZWwuY29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3RhcnQnKSBzZWwuc2VsZWN0aW9uLmNvbGxhcHNlVG9TdGFydCgpO1xyXG4gICAgICAgICAgICBlbHNlIHNlbC5zZWxlY3Rpb24uY29sbGFwc2VUb0VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gc2F2ZSAmIHJlc3RvcmVcclxuICAgIHNhdmU6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgaWYgKCFlbCkge1xyXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICBlbCA9IGluc3RhbmNlLmdldEJsb2NrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2F2ZWRTZWxlY3Rpb24gPSB7IGVsOiBlbCwgb2Zmc2V0OiB0aGlzLmFwcC5vZmZzZXQuZ2V0KGVsKSB9O1xyXG4gICAgfSxcclxuICAgIHJlc3RvcmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNhdmVkTWFya2VyKSByZXR1cm47XHJcbiAgICAgICAgaWYgKCF0aGlzLnNhdmVkU2VsZWN0aW9uKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci5nZXRXaW5Ob2RlKCkuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgdmFyIGVsID0gdGhpcy5zYXZlZFNlbGVjdGlvbi5lbDtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmRvbShlbCkuZGF0YWdldCgnaW5zdGFuY2UnKTtcclxuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KGVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbCkge1xyXG4gICAgICAgICAgICBlbC5mb2N1cygpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5vZmZzZXQuc2V0KGVsLCB0aGlzLnNhdmVkU2VsZWN0aW9uLm9mZnNldCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNhdmVkU2VsZWN0aW9uID0gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIHNhdmVNYXJrZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuc2F2ZWRNYXJrZXIgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYXBwLm1hcmtlci5pbnNlcnQoKTtcclxuICAgIH0sXHJcbiAgICByZXN0b3JlTWFya2VyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmFwcC5tYXJrZXIucmVzdG9yZSgpO1xyXG4gICAgICAgIHRoaXMuc2F2ZWRNYXJrZXIgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNhdmVkU2VsZWN0aW9uID0gZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9nZXRTZWxlY3Rpb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzZWwgPSB0aGlzLndpbi5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICByZXR1cm4gKHNlbC5yYW5nZUNvdW50ID4gMCkgPyBzZWwgOiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBfZ2V0UmFuZ2U6IGZ1bmN0aW9uKHNlbGVjdGlvbikge1xyXG4gICAgICAgIHJldHVybiAoc2VsZWN0aW9uKSA/ICgoc2VsZWN0aW9uLnJhbmdlQ291bnQgPiAwKSA/IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApIDogZmFsc2UpIDogZmFsc2VcclxuICAgIH0sXHJcbiAgICBfZ2V0Q3VycmVudDogZnVuY3Rpb24oc2VsZWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIChzZWxlY3Rpb24pID8gc2VsZWN0aW9uLmFuY2hvck5vZGUgOiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBfZ2V0UGFyZW50OiBmdW5jdGlvbihjdXJyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIChjdXJyZW50KSA/IGN1cnJlbnQucGFyZW50Tm9kZSA6IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIF9nZXRFbGVtZW50OiBmdW5jdGlvbihlbCwgdHlwZSkge1xyXG4gICAgICAgIHZhciBzZWwgPSB0aGlzLl9nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICBpZiAoc2VsKSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gZWwgfHwgdGhpcy5fZ2V0Q3VycmVudChzZWwpO1xyXG4gICAgICAgICAgICBub2RlID0gdGhpcy5kb20obm9kZSkuZ2V0KCk7XHJcbiAgICAgICAgICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hcHAuZWxlbWVudC5pcyhub2RlLCB0eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBfZ2V0Q29sbGFwc2VkOiBmdW5jdGlvbihzZWxlY3Rpb24sIHJhbmdlKSB7XHJcbiAgICAgICAgdmFyIGNvbGxhcHNlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChzZWxlY3Rpb24gJiYgc2VsZWN0aW9uLmlzQ29sbGFwc2VkKSBjb2xsYXBzZWQgPSB0cnVlO1xyXG4gICAgICAgIGVsc2UgaWYgKHJhbmdlICYmIHJhbmdlLnRvU3RyaW5nKCkubGVuZ3RoID09PSAwKSBjb2xsYXBzZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICByZXR1cm4gY29sbGFwc2VkO1xyXG4gICAgfSxcclxuICAgIF9nZXROZXh0Tm9kZTogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIGlmIChub2RlLmZpcnN0Q2hpbGQpIHJldHVybiBub2RlLmZpcnN0Q2hpbGQ7XHJcblxyXG4gICAgICAgIHdoaWxlIChub2RlKSB7XHJcbiAgICAgICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSByZXR1cm4gbm9kZS5uZXh0U2libGluZztcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2dldFJhbmdlTm9kZXM6IGZ1bmN0aW9uKHJhbmdlLCBhbGwpIHtcclxuICAgICAgICB2YXIgc3RhcnQgPSByYW5nZS5zdGFydENvbnRhaW5lci5jaGlsZE5vZGVzW3JhbmdlLnN0YXJ0T2Zmc2V0XSB8fCByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuICAgICAgICB2YXIgZW5kID0gcmFuZ2UuZW5kQ29udGFpbmVyLmNoaWxkTm9kZXNbcmFuZ2UuZW5kT2Zmc2V0XSB8fCByYW5nZS5lbmRDb250YWluZXI7XHJcbiAgICAgICAgdmFyIGNvbW1vbkFuY2VzdG9yID0gcmFuZ2UuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgdmFyIG5vZGVzID0gW107XHJcbiAgICAgICAgdmFyIG5vZGU7XHJcblxyXG4gICAgICAgIGlmIChhbGwpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFwcC5lZGl0b3IuaXNMYXlvdXQoc3RhcnQpKSB7XHJcbiAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKHN0YXJ0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChub2RlID0gc3RhcnQucGFyZW50Tm9kZTsgbm9kZTsgbm9kZSA9IG5vZGUucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXBwLmVkaXRvci5pc0xheW91dChub2RlKSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IGNvbW1vbkFuY2VzdG9yKSBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbm9kZXMucmV2ZXJzZSgpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChub2RlID0gc3RhcnQ7IG5vZGU7IG5vZGUgPSB0aGlzLl9nZXROZXh0Tm9kZShub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDMgJiYgdGhpcy5kb20obm9kZS5wYXJlbnROb2RlKS5jbG9zZXN0KGNvbW1vbkFuY2VzdG9yKS5sZW5ndGggPT09IDApIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gZW5kKSBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcHVzaCBmaXJzdCBlbGVtZW50XHJcbiAgICAgICAgICAgIGlmIChzdGFydC5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgbm9kZXMucHVzaCh0aGlzLmdldEJsb2NrKCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKG5vZGUgPSBzdGFydDsgbm9kZTsgbm9kZSA9IHRoaXMuX2dldE5leHROb2RlKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gY29tbW9uQW5jZXN0b3IpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDMgJiYgdGhpcy5kb20obm9kZS5wYXJlbnROb2RlKS5jbG9zZXN0KGNvbW1vbkFuY2VzdG9yKS5sZW5ndGggPT09IDApIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gZW5kKSBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5vZGVzO1xyXG4gICAgfSxcclxuICAgIF9nZXRBbGxSYW5nZU5vZGVzOiBmdW5jdGlvbihyYW5nZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRSYW5nZU5vZGVzKHJhbmdlLCB0cnVlKTtcclxuICAgIH0sXHJcbiAgICBfZmlsdGVyTm9kZXM6IGZ1bmN0aW9uKG5vZGVzLCByYW5nZSwgaXNJbmxpbmUsIGRhdGEpIHtcclxuICAgICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLmdldFRleHQoKTtcclxuICAgICAgICBzZWxlY3RlZCA9IHNlbGVjdGVkLnJlcGxhY2UoL1stW1xcXS97fSgpKis/LlxcXFxeJHxdL2csIFwiXFxcXCQmXCIpO1xyXG5cclxuICAgICAgICB2YXIgZmluYWxOb2RlcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBwdXNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHB1c2ggPSAoZGF0YS50eXBlcykgPyB0aGlzLl9maWx0ZXJCeVR5cGVzKHB1c2gsIGRhdGEsIG5vZGVzW2ldKSA6IHB1c2g7XHJcbiAgICAgICAgICAgICAgICBwdXNoID0gKGRhdGEuc2VsZWN0ZWQpID8gdGhpcy5fZmlsdGVyQnlTZWxlY3RlZChwdXNoLCBkYXRhLCBub2Rlc1tpXSwgcmFuZ2UsIHNlbGVjdGVkKSA6IHB1c2g7XHJcbiAgICAgICAgICAgICAgICBwdXNoID0gKGRhdGEudHlwZSkgPyB0aGlzLl9maWx0ZXJCeVR5cGUocHVzaCwgZGF0YSwgbm9kZXNbaV0sIGlzSW5saW5lKSA6IHB1c2g7XHJcbiAgICAgICAgICAgICAgICBwdXNoID0gKGRhdGEudGFncykgPyB0aGlzLl9maWx0ZXJCeVRhZ3MocHVzaCwgZGF0YSwgbm9kZXNbaV0pIDogcHVzaDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHB1c2gpIHtcclxuICAgICAgICAgICAgICAgIGZpbmFsTm9kZXMucHVzaChub2Rlc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaW5hbE5vZGVzO1xyXG4gICAgfSxcclxuICAgIF9maWx0ZXJCeVR5cGVzOiBmdW5jdGlvbihwdXNoLCBkYXRhLCBub2RlKSB7XHJcbiAgICAgICAgdmFyIHR5cGU7XHJcbiAgICAgICAgaWYgKGRhdGEudHlwZXMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgdHlwZSA9IHRoaXMuYXBwLmVsZW1lbnQuZ2V0VHlwZShub2RlKTtcclxuICAgICAgICAgICAgaWYgKCF0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBwdXNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSB0aGlzLmFwcC5lbGVtZW50LmdldFR5cGUobm9kZSk7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnR5cGVzLmluZGV4T2YodHlwZSkgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBwdXNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwdXNoO1xyXG4gICAgfSxcclxuICAgIF9maWx0ZXJCeVR5cGU6IGZ1bmN0aW9uKHB1c2gsIGRhdGEsIG5vZGUsIGlzSW5saW5lKSB7XHJcbiAgICAgICAgaWYgKGlzSW5saW5lKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmxpbmtzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYXBwLmVsZW1lbnQuaXMobm9kZSwgZGF0YS50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICgobm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBub2RlLnRhZ05hbWUgPT09ICdBJykgfHwgIXRoaXMuYXBwLmVsZW1lbnQuaXMobm9kZSwgZGF0YS50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghdGhpcy5hcHAuZWxlbWVudC5pcyhub2RlLCBkYXRhLnR5cGUpKSB7XHJcbiAgICAgICAgICAgIHB1c2ggPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwdXNoO1xyXG4gICAgfSxcclxuICAgIF9maWx0ZXJCeVRhZ3M6IGZ1bmN0aW9uKHB1c2gsIGRhdGEsIG5vZGUpIHtcclxuXHJcbiAgICAgICAgdmFyIGlzVGFnTmFtZSA9ICh0eXBlb2Ygbm9kZS50YWdOYW1lICE9PSAndW5kZWZpbmVkJyk7XHJcbiAgICAgICAgaWYgKCFpc1RhZ05hbWUpIHtcclxuICAgICAgICAgICAgcHVzaCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc1RhZ05hbWUgJiYgZGF0YS50YWdzLmluZGV4T2Yobm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpID09PSAtMSkge1xyXG4gICAgICAgICAgICBwdXNoID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcHVzaDtcclxuICAgIH0sXHJcbiAgICBfZmlsdGVyQnlTZWxlY3RlZDogZnVuY3Rpb24ocHVzaCwgZGF0YSwgbm9kZSwgcmFuZ2UsIHNlbGVjdGVkKSB7XHJcbiAgICAgICAgaWYgKGRhdGEuc2VsZWN0ZWQgPT09IHRydWUgJiYgIXRoaXMuX2NvbnRhaW5zTm9kZVRleHQocmFuZ2UsIG5vZGUpKSB7XHJcbiAgICAgICAgICAgIHB1c2ggPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGF0YS5zZWxlY3RlZCA9PT0gJ2luc2lkZScpIHtcclxuICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgbm9kZS50YWdOYW1lID09PSAnQScpIHtcclxuICAgICAgICAgICAgICAgIHB1c2ggPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLl9pc1RleHRTZWxlY3RlZChub2RlLCBzZWxlY3RlZCkpIHtcclxuICAgICAgICAgICAgICAgIHB1c2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHB1c2g7XHJcbiAgICB9LFxyXG4gICAgX2lzVGV4dFNlbGVjdGVkOiBmdW5jdGlvbihub2RlLCBzZWxlY3RlZCkge1xyXG4gICAgICAgIHZhciB0ZXh0ID0gdGhpcy5hcHAudXRpbHMucmVtb3ZlSW52aXNpYmxlQ2hhcnMobm9kZS50ZXh0Q29udGVudCk7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIHNlbGVjdGVkID09PSB0ZXh0XHJcbiAgICAgICAgICAgIHx8IHRleHQuc2VhcmNoKHNlbGVjdGVkKSAhPT0gLTFcclxuICAgICAgICAgICAgfHwgc2VsZWN0ZWQuc2VhcmNoKG5ldyBSZWdFeHAoJ14nICsgdGhpcy5hcHAudXRpbHMuZXNjYXBlUmVnRXhwKHRleHQpICsgJyQnKSkgIT09IC0xXHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcbiAgICBfY29udGFpbnNOb2RlVGV4dDogZnVuY3Rpb24gKHJhbmdlLCBub2RlKSB7XHJcbiAgICAgICAgdmFyIHRyZWVXYWxrZXIgPSB0aGlzLmRvYy5jcmVhdGVUcmVlV2Fsa2VyKG5vZGUsIE5vZGVGaWx0ZXIuU0hPV19URVhULCB7IGFjY2VwdE5vZGU6IGZ1bmN0aW9uKG5vZGUpIHsgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVDsgfSB9LCBmYWxzZSk7XHJcbiAgICAgICAgdmFyIGZpcnN0LCBsYXN0LCB0ZXh0Tm9kZTtcclxuICAgICAgICB3aGlsZSAoKHRleHROb2RlID0gdHJlZVdhbGtlci5uZXh0Tm9kZSgpKSkge1xyXG4gICAgICAgICAgICBpZiAoIWZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICBmaXJzdCA9IHRleHROb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxhc3QgPSB0ZXh0Tm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5vZGVSYW5nZSA9IHJhbmdlLmNsb25lUmFuZ2UoKTtcclxuICAgICAgICBpZiAoZmlyc3QpIHtcclxuICAgICAgICAgICAgbm9kZVJhbmdlLnNldFN0YXJ0KGZpcnN0LCAwKTtcclxuICAgICAgICAgICAgbm9kZVJhbmdlLnNldEVuZChsYXN0LCBsYXN0Lmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBub2RlUmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHJhbmdlLmNvbXBhcmVCb3VuZGFyeVBvaW50cyhSYW5nZS5TVEFSVF9UT19TVEFSVCwgbm9kZVJhbmdlKSA8IDEgJiYgcmFuZ2UuY29tcGFyZUJvdW5kYXJ5UG9pbnRzKFJhbmdlLkVORF9UT19FTkQsIG5vZGVSYW5nZSkgPiAtMSk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ2NhcmV0Jywge1xyXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMud2luID0gdGhpcy5hcHAuZWRpdG9yLmdldFdpbk5vZGUoKTtcclxuICAgICAgICB0aGlzLmRvYyA9IHRoaXMuYXBwLmVkaXRvci5nZXREb2NOb2RlKCk7XHJcbiAgICB9LFxyXG4gICAgc2V0OiBmdW5jdGlvbihlbCwgdHlwZSkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5kb20oZWwpLmdldCgpO1xyXG4gICAgICAgIGlmICghbm9kZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLl9hcHBseShub2RlLCB0eXBlKTtcclxuICAgIH0sXHJcbiAgICBpczogZnVuY3Rpb24oZWwsIHR5cGUsIHJlbW92ZWJsb2NrcywgdHJpbW1lZCkge1xyXG4gICAgICAgIHZhciBub2RlID0gdGhpcy5kb20oZWwpLmdldCgpO1xyXG4gICAgICAgIGlmICghbm9kZSkgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICB2YXIgc2VsID0gdGhpcy5kb2MuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgaWYgKCFzZWwuaXNDb2xsYXBzZWQpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gdGhpcy5fcG9zaXRpb24obm9kZSwgdHJpbW1lZCk7XHJcbiAgICAgICAgdmFyIHNpemUgPSB0aGlzLl9zaXplKG5vZGUsIHJlbW92ZWJsb2NrcywgdHJpbW1lZCk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSAnZW5kJykge1xyXG4gICAgICAgICAgICByZXR1cm4gKHBvc2l0aW9uID09PSBzaXplKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ3N0YXJ0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gKHBvc2l0aW9uID09PSAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2FwcGx5OiBmdW5jdGlvbihub2RlLCB0eXBlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc0luUGFnZShub2RlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBmb2N1c1xyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci5nZXRXaW4oKS5mb2N1cygpO1xyXG5cclxuICAgICAgICAvLyByYW5nZVxyXG4gICAgICAgIHZhciByYW5nZSA9IHRoaXMuZG9jLmNyZWF0ZVJhbmdlKCk7XHJcbiAgICAgICAgdmFyIHRhZyA9IChub2RlLm5vZGVUeXBlICE9PSAzKSA/IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpIDogZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIG5vbiBlZGl0YWJsZSBpbmxpbmUgbm9kZVxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5lbGVtZW50LmlzKG5vZGUsICdpbmxpbmUnKSAmJiB0aGlzLl9pc05vbihub2RlKSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N0YXJ0JykgdHlwZSA9ICdiZWZvcmUnO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnZW5kJykgdHlwZSA9ICdhZnRlcic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZSA9PT0gJ3N0YXJ0Jykge1xyXG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydChub2RlLCAwKTtcclxuICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW5saW5lID0gdGhpcy5fZ2V0SW5saW5lSW5zaWRlKG5vZGUpO1xyXG4gICAgICAgICAgICBpZiAoaW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5saW5lcyA9IHRoaXMuYXBwLmVsZW1lbnQuZ2V0QWxsSW5saW5lcyhpbmxpbmUpO1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IGlubGluZXNbMF07XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XHJcbiAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwLmVsZW1lbnQuaXMobm9kZSwgJ2lubGluZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnRJbnZpc2libGVOb2RlKHJhbmdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnZW5kJykge1xyXG4gICAgICAgICAgICB2YXIgc2V0O1xyXG4gICAgICAgICAgICB2YXIgbGFzdCA9IChub2RlLm5vZGVUeXBlID09PSAxKSA/IG5vZGUubGFzdENoaWxkIDogZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBsYXN0SW5saW5lID0gKGxhc3QgJiYgdGhpcy5hcHAuZWxlbWVudC5pcyhsYXN0LCAnaW5saW5lJykpO1xyXG4gICAgICAgICAgICBpZiAobGFzdElubGluZSAmJiB0aGlzLl9pc05vbihsYXN0KSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHNldCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBZnRlcihsYXN0KTtcclxuICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNldCBhZnRlclxyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5zZXJ0SW52aXNpYmxlTm9kZShyYW5nZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobGFzdElubGluZSkge1xyXG4gICAgICAgICAgICAgICBub2RlID0gbGFzdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHNldCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnYmVmb3JlJykge1xyXG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShub2RlKTtcclxuICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5hcHAuZWxlbWVudC5pcyhub2RlLCAnaW5saW5lJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luc2VydEludmlzaWJsZU5vZGUocmFuZ2UsIG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdhZnRlcicpIHtcclxuXHJcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QWZ0ZXIobm9kZSk7XHJcbiAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwLmVsZW1lbnQuaXMobm9kZSwgJ2lubGluZScpIHx8IHRhZyA9PT0gJ2JyJyB8fCB0YWcgPT09ICdzdmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnRJbnZpc2libGVOb2RlKHJhbmdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2V0IHJhbmdlXHJcbiAgICAgICAgdmFyIHNlbCA9IHRoaXMud2luLmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xyXG4gICAgfSxcclxuICAgIF9pbnNlcnRJbnZpc2libGVOb2RlOiBmdW5jdGlvbihyYW5nZSwgYmVmb3JlKSB7XHJcbiAgICAgICAgdmFyIHRleHROb2RlID0gdGhpcy5hcHAudXRpbHMuY3JlYXRlSW52aXNpYmxlQ2hhcigpO1xyXG5cclxuICAgICAgICBpZiAoYmVmb3JlKSB7XHJcbiAgICAgICAgICAgIGJlZm9yZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ZXh0Tm9kZSwgYmVmb3JlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUodGV4dE5vZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHRleHROb2RlKTtcclxuICAgICAgICByYW5nZS5jb2xsYXBzZShmYWxzZSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0ZXh0Tm9kZTtcclxuICAgIH0sXHJcbiAgICBfZ2V0SW5saW5lSW5zaWRlOiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgdmFyIGlubGluZSA9IG5vZGUuZmlyc3RDaGlsZDtcclxuICAgICAgICBpZiAodGhpcy5hcHAuZWxlbWVudC5pcyhpbmxpbmUsICdpbmxpbmUnKSkge1xyXG4gICAgICAgICAgICB2YXIgaW5saW5lSW5zaWRlID0gaW5saW5lLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChpbmxpbmVJbnNpZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFwcC5lbGVtZW50LmlzKGlubGluZUluc2lkZSwgJ2lubGluZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZUluc2lkZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlubGluZUluc2lkZSA9IGlubGluZUluc2lkZS5maXJzdENoaWxkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaW5saW5lO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfc2l6ZTogZnVuY3Rpb24obm9kZSwgcmVtb3ZlYmxvY2tzLCB0cmltbWVkKSB7XHJcbiAgICAgICAgdmFyIHN0cjtcclxuICAgICAgICB2YXIgaXNUZXh0Tm9kZSA9IChub2RlLm5vZGVUeXBlID09PSAzKTtcclxuXHJcbiAgICAgICAgaWYgKHJlbW92ZWJsb2NrcyAmJiByZW1vdmVibG9ja3MubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHZhciAkbm9kZSA9IHRoaXMuZG9tKG5vZGUpO1xyXG4gICAgICAgICAgICB2YXIgJGNsb25lZCA9ICRub2RlLmNsb25lKCk7XHJcbiAgICAgICAgICAgICRjbG9uZWQuZmluZChyZW1vdmVibG9ja3Muam9pbignLCcpKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgc3RyID0gJGNsb25lZC5odG1sKCkudHJpbSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3RyID0gKGlzVGV4dE5vZGUpID8gbm9kZS50ZXh0Q29udGVudCA6IG5vZGUuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICBzdHIgPSAoaXNUZXh0Tm9kZSB8fCB0cmltbWVkID09PSBmYWxzZSkgPyBzdHIgOiBzdHIudHJpbSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyaW1tZWQoc3RyLCBpc1RleHROb2RlLCB0cmltbWVkKS5sZW5ndGg7XHJcbiAgICB9LFxyXG4gICAgX3Bvc2l0aW9uOiBmdW5jdGlvbihub2RlLCB0cmltbWVkKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlID0gdGhpcy53aW4uZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKTtcclxuICAgICAgICB2YXIgY2FyZXRSYW5nZSA9IHJhbmdlLmNsb25lUmFuZ2UoKTtcclxuICAgICAgICB2YXIgdG1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB2YXIgaXNUZXh0Tm9kZSA9IChub2RlLm5vZGVUeXBlID09PSAzKTtcclxuXHJcbiAgICAgICAgY2FyZXRSYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobm9kZSk7XHJcbiAgICAgICAgY2FyZXRSYW5nZS5zZXRFbmQocmFuZ2UuZW5kQ29udGFpbmVyLCByYW5nZS5lbmRPZmZzZXQpO1xyXG4gICAgICAgIHRtcC5hcHBlbmRDaGlsZChjYXJldFJhbmdlLmNsb25lQ29udGVudHMoKSk7XHJcblxyXG4gICAgICAgIHZhciBzdHIgPSAoaXNUZXh0Tm9kZSB8fCB0cmltbWVkID09PSBmYWxzZSkgPyB0bXAuaW5uZXJIVE1MIDogdG1wLmlubmVySFRNTC50cmltKCk7XHJcbiAgICAgICAgdmFyIGJyRW5kID0gKHN0ci5zZWFyY2goLzxcXC8/YnJcXHM/XFwvPz4kL2cpICE9PSAtMSkgPyAxIDogMDtcclxuICAgICAgICBzdHIgPSB0aGlzLl90cmltbWVkKHN0ciwgaXNUZXh0Tm9kZSwgdHJpbW1lZCk7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gc3RyLmxlbmd0aCArIGJyRW5kO1xyXG4gICAgfSxcclxuICAgIF90cmltbWVkOiBmdW5jdGlvbihzdHIsIGlzVGV4dE5vZGUsIHRyaW1tZWQpIHtcclxuICAgICAgICBpZiAodHJpbW1lZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xcbiQvZywgJycpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RyID0gdGhpcy5hcHAudXRpbHMucmVtb3ZlSW52aXNpYmxlQ2hhcnMoc3RyKTtcclxuICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvPFxcLz8oW2Etel1bYS16MC05XSopXFxiW14+XSo+L2dpLCAnJyk7XHJcbiAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoL1xccysvZywgJyAnKTtcclxuICAgICAgICBpZiAoc3RyICE9PSAnJyAmJiAhaXNUZXh0Tm9kZSkge1xyXG4gICAgICAgICAgICBzdHIgPSBzdHIucmVwbGFjZSgvXFxzJC8sICcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9LFxyXG4gICAgX2lzSW5QYWdlOiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5ub2RlVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKG5vZGUgPT09IHRoaXMuZG9jLmJvZHkpID8gZmFsc2UgOiB0aGlzLmRvYy5ib2R5LmNvbnRhaW5zKG5vZGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIF9pc05vbjogZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgIHJldHVybiAobm9kZS5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpID09PSAnZmFsc2UnKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnc2Nyb2xsJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5zY3JvbGx0b3AgPSBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBzYXZlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnNjcm9sbHRvcCA9IHRoaXMuZ2V0VGFyZ2V0KCkuc2Nyb2xsVG9wKCk7XHJcbiAgICB9LFxyXG4gICAgcmVzdG9yZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsdG9wICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmdldFRhcmdldCgpLnNjcm9sbFRvcCh0aGlzLnNjcm9sbHRvcCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsdG9wID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGlzVGFyZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMub3B0cy5lZGl0b3Iuc2Nyb2xsVGFyZ2V0ICE9PSB3aW5kb3cpO1xyXG4gICAgfSxcclxuICAgIGdldFRhcmdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKHRoaXMub3B0cy5lZGl0b3Iuc2Nyb2xsVGFyZ2V0KTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnb2Zmc2V0Jywge1xyXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMud2luID0gdGhpcy5hcHAuZWRpdG9yLmdldFdpbk5vZGUoKTtcclxuICAgICAgICB0aGlzLmRvYyA9IHRoaXMuYXBwLmVkaXRvci5nZXREb2NOb2RlKCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0OiBmdW5jdGlvbihlbCkge1xyXG4gICAgICAgIGVsID0gdGhpcy5fZ2V0RWwoZWwpO1xyXG5cclxuICAgICAgICB2YXIgc2VsID0gdGhpcy53aW4uZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoc2VsICYmIHNlbC5yYW5nZUNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcclxuICAgICAgICAgICAgaWYgKGVsLmNvbnRhaW5zKHNlbC5hbmNob3JOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNsb25lZCA9IHJhbmdlLmNsb25lUmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGNsb25lZC5zZWxlY3ROb2RlQ29udGVudHMoZWwpO1xyXG4gICAgICAgICAgICAgICAgY2xvbmVkLnNldEVuZChyYW5nZS5zdGFydENvbnRhaW5lciwgcmFuZ2Uuc3RhcnRPZmZzZXQpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGNsb25lZC50b1N0cmluZygpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBzdGFydCArIHJhbmdlLnRvU3RyaW5nKCkubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2Zmc2V0O1xyXG4gICAgfSxcclxuICAgIHNldDogZnVuY3Rpb24oZWwsIG9mZnNldCkge1xyXG4gICAgICAgIGlmICghb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIG9mZnNldCA9IGVsO1xyXG4gICAgICAgICAgICBlbCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZWxcclxuICAgICAgICBlbCA9IHRoaXMuX2dldEVsKGVsKTtcclxuXHJcbiAgICAgICAgdmFyIGNoYXJJbmRleCA9IDAsIHJhbmdlID0gdGhpcy5kb2MuY3JlYXRlUmFuZ2UoKTtcclxuICAgICAgICB2YXIgbm9kZVN0YWNrID0gW2VsXSwgbm9kZSwgZm91bmRTdGFydCA9IGZhbHNlLCBzdG9wID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJhbmdlLnNldFN0YXJ0KGVsLCAwKTtcclxuICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcclxuXHJcbiAgICAgICAgd2hpbGUgKCFzdG9wICYmIChub2RlID0gbm9kZVN0YWNrLnBvcCgpKSkge1xyXG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5leHRDaGFySW5kZXggPSBjaGFySW5kZXggKyBub2RlLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWZvdW5kU3RhcnQgJiYgb2Zmc2V0LnN0YXJ0ID49IGNoYXJJbmRleCAmJiBvZmZzZXQuc3RhcnQgPD0gbmV4dENoYXJJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIG9mZnNldC5zdGFydCAtIGNoYXJJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmRTdGFydCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kU3RhcnQgJiYgb2Zmc2V0LmVuZCA+PSBjaGFySW5kZXggJiYgb2Zmc2V0LmVuZCA8PSBuZXh0Q2hhckluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKG5vZGUsIG9mZnNldC5lbmQgLSBjaGFySW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0b3AgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNoYXJJbmRleCA9IG5leHRDaGFySW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZVN0YWNrLnB1c2gobm9kZS5jaGlsZE5vZGVzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHNlbCA9IHRoaXMud2luLmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfZ2V0RWw6IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICAgICAgcmV0dXJuICghZWwpID8gdGhpcy5hcHAuZWRpdG9yLmdldExheW91dCgpLmdldCgpIDogdGhpcy5kb20oZWwpLmdldCgpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdpbnB1dCcsIHtcclxuICAgIGhhbmRsZTogZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICB2YXIgZSA9IGV2ZW50LmdldCgnZScpO1xyXG4gICAgICAgIHZhciBrZXkgPSBldmVudC5nZXQoJ2tleScpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5fZG9TZWxlY3RBbGwoZSwgZXZlbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGV2ZW50c1xyXG4gICAgICAgIGlmIChldmVudC5pcygnZW50ZXInKSAmJiBldmVudC5pcygnc2hpZnQnKSkge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVNoaWZ0RW50ZXIoZSwga2V5LCBldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmlzKCdlbnRlcicpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRW50ZXIoZSwga2V5LCBldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmlzKCdzcGFjZScpICYmIGV2ZW50LmlzKCdzaGlmdCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU2hpZnRTcGFjZShlLCBrZXksIGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQuaXMoJ3NwYWNlJykpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVTcGFjZShlLCBrZXksIGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQuaXMoJ3RhYicpICYmIHRoaXMub3B0cy50YWIua2V5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVGFiKGUsIGtleSwgZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5pcygnYXJyb3cnKSkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuaXMoWydzaGlmdCcsICdhbHQnLCAnY3RybCddKSkgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUFycm93KGUsIGtleSwgZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5pcyhbJ2RlbGV0ZScsICdiYWNrc3BhY2UnXSkpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVEZWxldGUoZSwga2V5LCBldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBoYW5kbGVcclxuICAgIGhhbmRsZURlbGV0ZTogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgaXNCYWNrc3BhY2UgPSBldmVudC5pcygnYmFja3NwYWNlJyk7XHJcbiAgICAgICAgdmFyIGlzRGVsZXRlID0gZXZlbnQuaXMoJ2RlbGV0ZScpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5hcHAuYmxvY2tzLmlzKCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9ja3MucmVtb3ZlU2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdHJpbSBpbnZpc2libGUgY2hhclxyXG4gICAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5pc0VkaXRhYmxlKCkgJiYgdGhpcy5fdHJpbUludmlzaWJsZUNoYXIoZSwgKGV2ZW50LmlzKCdiYWNrc3BhY2UnKSA/ICdsZWZ0JyA6ICdyaWdodCcpLCBpc0RlbGV0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaW5saW5lXHJcbiAgICAgICAgdmFyIGlubGluZSA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRJbmxpbmUoKTtcclxuICAgICAgICBpZiAoaW5saW5lICYmIGlubGluZS5pbm5lckhUTUwubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaW5saW5lLmlubmVySFRNTCA9ICcnO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBoYW5kbGUgYmxvY2tcclxuICAgICAgICBpZiAoaW5zdGFuY2UuaGFuZGxlRGVsZXRlICYmIGluc3RhbmNlLmhhbmRsZURlbGV0ZShlLCBrZXksIGV2ZW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpbnN0YW5jZVxyXG4gICAgICAgIHZhciBuZXh0ID0gaW5zdGFuY2UuZ2V0TmV4dCgpO1xyXG4gICAgICAgIHZhciBwcmV2ID0gaW5zdGFuY2UuZ2V0UHJldigpO1xyXG5cclxuICAgICAgICAvLyBsaWtlIHZhcmlhYmxlXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmlzSW5saW5lQmxvY2soKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciAkYmxvY2sgPSBpbnN0YW5jZS5nZXRCbG9jaygpO1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gaW5zdGFuY2UuZ2V0UGFyZW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmNhcmV0LnNldCgkYmxvY2ssICdhZnRlcicpO1xyXG5cclxuICAgICAgICAgICAgaW5zdGFuY2UucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBub24gZWRpdGFibGVcclxuICAgICAgICBlbHNlIGlmICghaW5zdGFuY2UuaXNFZGl0YWJsZSgpKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgIGluc3RhbmNlLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChuZXh0LCAnc3RhcnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwcmV2KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQocHJldiwgJ2VuZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXBwLmVkaXRvci5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5lZGl0b3Iuc2V0RW1wdHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnVuc2V0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZWRpdGFibGVcclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5pc0VkaXRhYmxlKCkpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gaW5zdGFuY2UuZ2V0VHlwZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gYWxsIGJsb2NrIHNlbGVjdGVkXHJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS5pc0FsbFNlbGVjdGVkKCkpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnY2FyZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnNldEVtcHR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSAmIGVuZFxyXG4gICAgICAgICAgICBpZiAoaXNEZWxldGUgJiYgbmV4dCAmJiBpbnN0YW5jZS5pc0NhcmV0RW5kKCkpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dC5nZXRUeXBlKCkgPT09ICdjYXJkJyB8fCAhbmV4dC5pc0VkaXRhYmxlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQobmV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2NhcmQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmFwcGVuZE5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYmFja3NwYWNlICYgc3RhcnRcclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNCYWNrc3BhY2UgJiYgcHJldiAmJiBpbnN0YW5jZS5pc0NhcmV0U3RhcnQoKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwcmV2LmdldFR5cGUoKSA9PT0gJ2NhcmQnIHx8ICFwcmV2LmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwcmV2KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnY2FyZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuYXBwZW5kVG9QcmV2KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGhhbmRsZUFycm93OiBmdW5jdGlvbihlLCBrZXksIGV2ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG5cclxuICAgICAgICAvLyBtdWx0aXBsZVxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5ibG9ja3MuaXMoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBlZGl0YWJsZSAmIGlubGluZSBjb2RlIG9yIGxpa2UgdmFyaWFibGVcclxuICAgICAgICBpZiAoaW5zdGFuY2UuaXNFZGl0YWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldEN1cnJlbnQoKTtcclxuICAgICAgICAgICAgdmFyIGlubGluZSA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRUb3BJbmxpbmUoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlubGluZSBjb2RlXHJcbiAgICAgICAgICAgIGlmIChldmVudC5pcygnbGVmdCcpICYmIGlubGluZSAmJiBpbmxpbmUudGFnTmFtZSA9PT0gJ0NPREUnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5hcHAub2Zmc2V0LmdldChpbmxpbmUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhcmV0U3RhcnQgPSB0aGlzLmFwcC5jYXJldC5pcyhpbmxpbmUsICdzdGFydCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghY2FyZXRTdGFydCAmJiBvZmZzZXQuc3RhcnQgPT09IDEgJiYgb2Zmc2V0LmVuZCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoaW5saW5lLCAnc3RhcnQnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjYXJldFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNhcmV0LnNldChpbmxpbmUsICdiZWZvcmUnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB2YXJpYWJsZVxyXG4gICAgICAgICAgICAgICAgaWYgKGlubGluZSAmJiB0aGlzLl9jYXRjaElubGluZUJsb2NrKGUsIGV2ZW50LCBpbmxpbmUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudCAmJiB0aGlzLl9jYXRjaElubGluZUJsb2NrKGUsIGV2ZW50LCBjdXJyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdHJpbSBpbnZpc2libGUgY2hhclxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5pc0VkaXRhYmxlKCkgJiYgdGhpcy5fdHJpbUludmlzaWJsZUNoYXIoZSwgKGV2ZW50LmlzKCdsZWZ0JykgPyAnbGVmdCcgOiAncmlnaHQnKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaGFuZGxlIGJsb2NrXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmhhbmRsZUFycm93ICYmIGluc3RhbmNlLmhhbmRsZUFycm93KGUsIGtleSwgZXZlbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxpa2UgdmFyaWFibGVcclxuICAgICAgICBpZiAoaW5zdGFuY2UuaXNJbmxpbmVCbG9jaygpKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyICRibG9jayA9IGluc3RhbmNlLmdldEJsb2NrKCk7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBpbnN0YW5jZS5nZXRQYXJlbnQoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjYXJldCA9IChldmVudC5pcygndXAtbGVmdCcpKSA/ICdiZWZvcmUnIDogJ2FmdGVyJztcclxuICAgICAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KCRibG9jaywgY2FyZXQpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQocGFyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGVkaXRhYmxlICYgbm9uIGVkaXRhYmxlXHJcbiAgICAgICAgICAgIHZhciB0YXJnZXQ7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5pcygndXAtbGVmdCcpICYmIGluc3RhbmNlLmlzQ2FyZXRTdGFydCgpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXJldCA9ICdlbmQnO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gaW5zdGFuY2UuZ2V0UHJldigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmlzKCdkb3duLXJpZ2h0JykgJiYgaW5zdGFuY2UuaXNDYXJldEVuZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXJldCA9ICdzdGFydCc7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSBpbnN0YW5jZS5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldCh0YXJnZXQsIGNhcmV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoYW5kbGVUYWI6IGZ1bmN0aW9uKGUsIGtleSwgZXZlbnQpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuXHJcbiAgICAgICAgLy8gbXVsdGlwbGVcclxuICAgICAgICBpZiAodGhpcy5hcHAuYmxvY2tzLmlzKCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBoYW5kbGUgYmxvY2sgdGFiXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmhhbmRsZVRhYiAmJiBpbnN0YW5jZS5oYW5kbGVUYWIoZSwga2V5LCBldmVudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdGFiIGFzIHNwYWNlc1xyXG4gICAgICAgIGlmICh0aGlzLm9wdHMudGFiLnNwYWNlcyAmJiBpbnN0YW5jZS5pc0VkaXRhYmxlKCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB2YXIgbnVtID0gdGhpcy5vcHRzLnRhYi5zcGFjZXM7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoQXJyYXkobnVtICsgMSkuam9pbignXFx1MDBhMCcpKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLmluc2VydE5vZGUobm9kZSwgJ2VuZCcpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxpa2UgdmFyaWFibGVcclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5pc0lubGluZUJsb2NrKCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB2YXIgJGJsb2NrID0gaW5zdGFuY2UuZ2V0QmxvY2soKTtcclxuICAgICAgICAgICAgdmFyIHBhcmVudCA9IGluc3RhbmNlLmdldFBhcmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJGJsb2NrLCAnYWZ0ZXInKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHBhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gaW5zdGFuY2UuZ2V0TmV4dCgpO1xyXG4gICAgICAgICAgICBpZiAobmV4dCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KG5leHQsICdzdGFydCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGhhbmRsZVNoaWZ0U3BhY2U6IGZ1bmN0aW9uKGUsIGtleSwgZXZlbnQpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuXHJcbiAgICAgICAgLy8gbXVsdGlwbGVcclxuICAgICAgICBpZiAodGhpcy5hcHAuYmxvY2tzLmlzKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gaW5zdGFuY2VcclxuICAgICAgICB2YXIgJGJsb2NrID0gaW5zdGFuY2UuZ2V0QmxvY2soKTtcclxuXHJcbiAgICAgICAgLy8gZWRpdGFibGVcclxuICAgICAgICBpZiAoaW5zdGFuY2UuaXNFZGl0YWJsZSgpKSB7XHJcbiAgICAgICAgICAgIC8vIHNlbGVjdGVkIGFsbFxyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UuaXNBbGxTZWxlY3RlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5zZXRFbXB0eSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmdldFR5cGUoKSAhPT0gJ2NvZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnRIdG1sKCcmbmJzcDsnLCAnZW5kJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbGlrZSB2YXJpYWJsZVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmlzSW5saW5lQmxvY2soKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBpbnN0YW5jZS5nZXRQYXJlbnQoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KCRibG9jaywgJ2FmdGVyJyk7XHJcblxyXG4gICAgICAgICAgICBpbnN0YW5jZS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHBhcmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnRIdG1sKCcmbmJzcDsnLCAnZW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVtcHRpYWJsZVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmlzRW1wdGlhYmxlKCkgJiYgaW5zdGFuY2UuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICRibG9jay5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctZW1wdHktbGF5ZXInKTtcclxuICAgICAgICAgICAgJGJsb2NrLmh0bWwoJycpO1xyXG5cclxuICAgICAgICAgICAgaW5zdGFuY2UuaW5zZXJ0RW1wdHkoeyBwb3NpdGlvbjogJ2FwcGVuZCcsIGNhcmV0OiAnc3RhcnQnIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoYW5kbGVTcGFjZTogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG5cclxuICAgICAgICAvLyBtdWx0aXBsZVxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5ibG9ja3MuaXMoKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciBsYXN0ID0gdGhpcy5hcHAuYmxvY2tzLmdldExhc3RTZWxlY3RlZCgpO1xyXG4gICAgICAgICAgICBsYXN0Lmluc2VydEVtcHR5KHsgcG9zaXRpb246ICdhZnRlcicsIGNhcmV0OiAnc3RhcnQnIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9ja3MucmVtb3ZlU2VsZWN0ZWQoZmFsc2UpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpbnN0YW5jZVxyXG4gICAgICAgIHZhciAkYmxvY2sgPSBpbnN0YW5jZS5nZXRCbG9jaygpO1xyXG4gICAgICAgIHZhciB0eXBlID0gaW5zdGFuY2UuZ2V0VHlwZSgpO1xyXG5cclxuICAgICAgICAvLyBoYW5kbGUgYmxvY2sgc3BhY2VcclxuICAgICAgICBpZiAoaW5zdGFuY2UuaGFuZGxlU3BhY2UgJiYgaW5zdGFuY2UuaGFuZGxlU3BhY2UoZSwga2V5LCBldmVudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZG8gbm90aGluZ1xyXG4gICAgICAgIGlmICh0eXBlID09PSAncm93Jykge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZWRpdGFibGVcclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5pc0VkaXRhYmxlKCkgJiYgaW5zdGFuY2UuaXNBbGxTZWxlY3RlZCgpKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnNldEVtcHR5KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbGlrZSB2YXJpYWJsZVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmlzSW5saW5lQmxvY2soKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gaW5zdGFuY2UuZ2V0UGFyZW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmNhcmV0LnNldCgkYmxvY2ssICdhZnRlcicpO1xyXG5cclxuICAgICAgICAgICAgaW5zdGFuY2UucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwYXJlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5pbnNlcnRpb24uaW5zZXJ0SHRtbCgnJm5ic3A7JywgJ2VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBlbXB0aWFibGVcclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5pc0VtcHRpYWJsZSgpICYmIGluc3RhbmNlLmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAkYmxvY2sucmVtb3ZlQ2xhc3ModGhpcy5wcmVmaXggKyAnLWVtcHR5LWxheWVyJyk7XHJcbiAgICAgICAgICAgICRibG9jay5odG1sKCcnKTtcclxuXHJcbiAgICAgICAgICAgIGluc3RhbmNlLmluc2VydEVtcHR5KHsgcG9zaXRpb246ICdhcHBlbmQnLCBjYXJldDogJ3N0YXJ0JyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbm9uIGVkaXRhYmxlXHJcbiAgICAgICAgZWxzZSBpZiAoIWluc3RhbmNlLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmluc2VydEVtcHR5KHsgcG9zaXRpb246ICdhZnRlcicsIGNhcmV0OiAnc3RhcnQnIH0pO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuY29udHJvbC51cGRhdGVQb3NpdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoYW5kbGVTaGlmdEVudGVyOiBmdW5jdGlvbihlLCBrZXksIGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBpbnN0YW5jZS5nZXRUeXBlKCk7XHJcbiAgICAgICAgdmFyICRibG9jayA9IGluc3RhbmNlLmdldEJsb2NrKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5ibG9ja3MuaXMoKSB8fCB0eXBlID09PSAncm93Jykge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxpa2UgdmFyaWFibGVcclxuICAgICAgICBlbHNlIGlmIChpbnN0YW5jZS5pc0lubGluZUJsb2NrKCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBhcmVudCA9IGluc3RhbmNlLmdldFBhcmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJGJsb2NrLCAnYWZ0ZXInKTtcclxuXHJcbiAgICAgICAgICAgIGluc3RhbmNlLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQocGFyZW50KTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLmluc2VydEJyZWFrbGluZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBlZGl0YWJsZVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnRCcmVha2xpbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbm9uIGVkaXRhYmxlXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gJ2FmdGVyJztcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlLmlzRW1wdGlhYmxlKCkgJiYgaW5zdGFuY2UuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICdhcHBlbmQnO1xyXG5cclxuICAgICAgICAgICAgICAgICRibG9jay5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctZW1wdHktbGF5ZXInKTtcclxuICAgICAgICAgICAgICAgICRibG9jay5odG1sKCcnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5zdGFuY2UuaW5zZXJ0RW1wdHkoeyBwb3NpdGlvbjogcG9zaXRpb24sIGNhcmV0OiAnc3RhcnQnIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LFxyXG4gICAgaGFuZGxlRW50ZXI6IGZ1bmN0aW9uKGUsIGtleSwgZXZlbnQpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuXHJcbiAgICAgICAgLy8gYmxvY2tzXHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLmJsb2Nrcy5pcygpKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyIGxhc3QgPSB0aGlzLmFwcC5ibG9ja3MuZ2V0TGFzdFNlbGVjdGVkKCk7XHJcbiAgICAgICAgICAgIGxhc3QuaW5zZXJ0RW1wdHkoeyBwb3NpdGlvbjogJ2FmdGVyJywgY2FyZXQ6ICdzdGFydCcgfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGluc3RhbmNlXHJcbiAgICAgICAgdmFyICRibG9jayA9IGluc3RhbmNlLmdldEJsb2NrKCk7XHJcblxyXG4gICAgICAgIC8vIGVkaXRhYmxlXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmlzRWRpdGFibGUoKSkge1xyXG4gICAgICAgICAgICAvLyBhbGwgYmxvY2sgc2VsZWN0ZWRcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlLmlzQWxsU2VsZWN0ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2Uuc2V0RW1wdHkoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwYXJ0aWFsIHNlbGVjdGVkXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCF0aGlzLmFwcC5zZWxlY3Rpb24uaXNDb2xsYXBzZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmdldFR5cGUoKSA9PT0gJ2NvZGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLmluc2VydE5ld2xpbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnRCcmVha2xpbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGlrZSB2YXJpYWJsZVxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5pc0lubGluZUJsb2NrKCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBhcmVudCA9IGluc3RhbmNlLmdldFBhcmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJGJsb2NrLCAnYWZ0ZXInKTtcclxuXHJcbiAgICAgICAgICAgIGluc3RhbmNlLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQocGFyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZW1wdGlhYmxlXHJcbiAgICAgICAgZWxzZSBpZiAoaW5zdGFuY2UuaXNFbXB0aWFibGUoKSAmJiBpbnN0YW5jZS5pc0VtcHR5KCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgJGJsb2NrLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1lbXB0eS1sYXllcicpO1xyXG4gICAgICAgICAgICAkYmxvY2suaHRtbCgnJyk7XHJcblxyXG4gICAgICAgICAgICBpbnN0YW5jZS5pbnNlcnRFbXB0eSh7IHBvc2l0aW9uOiAnYXBwZW5kJywgY2FyZXQ6ICdzdGFydCcgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG5vbiBlZGl0YWJsZVxyXG4gICAgICAgIGVsc2UgaWYgKCFpbnN0YW5jZS5pc0VkaXRhYmxlKCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5pbnNlcnRFbXB0eSh7IHBvc2l0aW9uOiAnYWZ0ZXInLCBjYXJldDogJ3N0YXJ0JyB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGhhbmRsZSBibG9jayBlbnRlclxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5oYW5kbGVFbnRlcikge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5oYW5kbGVFbnRlcihlLCBrZXksIGV2ZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHVpXHJcbiAgICAgICAgdGhpcy5hcHAuY29udHJvbC51cGRhdGVQb3NpdGlvbigpO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZVRleHRhcmVhVGFiOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSAhPT0gOSkgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgdmFyIGVsID0gZS50YXJnZXQ7XHJcbiAgICAgICAgdmFyIHZhbCA9IGVsLnZhbHVlO1xyXG4gICAgICAgIHZhciBzdGFydCA9IGVsLnNlbGVjdGlvblN0YXJ0O1xyXG5cclxuICAgICAgICBlbC52YWx1ZSA9IHZhbC5zdWJzdHJpbmcoMCwgc3RhcnQpICsgXCIgICAgXCIgKyB2YWwuc3Vic3RyaW5nKGVsLnNlbGVjdGlvbkVuZCk7XHJcbiAgICAgICAgZWwuc2VsZWN0aW9uU3RhcnQgPSBlbC5zZWxlY3Rpb25FbmQgPSBzdGFydCArIDQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9pc05leHRCbG9jazogZnVuY3Rpb24oZXZlbnQsIG5vZGUpIHtcclxuICAgICAgICByZXR1cm4gKGV2ZW50LmlzKCdyaWdodCcpICYmIHRoaXMuYXBwLmNhcmV0LmlzKG5vZGUsICdlbmQnKSAmJiB0aGlzLmFwcC5lbGVtZW50LmdldFR5cGUobm9kZS5uZXh0U2libGluZykpO1xyXG4gICAgfSxcclxuICAgIF9pc1ByZXZCbG9jazogZnVuY3Rpb24oZXZlbnQsIG5vZGUpIHtcclxuICAgICAgIHJldHVybiAoZXZlbnQuaXMoJ2xlZnQnKSAmJiB0aGlzLmFwcC5jYXJldC5pcyhub2RlLCAnc3RhcnQnKSAmJiB0aGlzLmFwcC5lbGVtZW50LmdldFR5cGUobm9kZS5wcmV2aW91c1NpYmxpbmcpKTtcclxuICAgIH0sXHJcbiAgICBfaXNTaWJsaW5nSW5saW5lQmxvY2s6IGZ1bmN0aW9uKGUsIG5vZGUpIHtcclxuICAgICAgICB2YXIgJGVsID0gdGhpcy5kb20obm9kZSk7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gJGVsLmRhdGFnZXQoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmlzSW5saW5lQmxvY2soKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfaXNJbnZpc2libGVDaGFyOiBmdW5jdGlvbihkaXJlY3Rpb24pIHtcclxuICAgICAgICB2YXIgc2VsID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldCgpO1xyXG4gICAgICAgIHZhciB0ZXh0ID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldFRleHQoZGlyZWN0aW9uKTtcclxuICAgICAgICByZXR1cm4gKHNlbC5jdXJyZW50ICYmIHNlbC5jdXJyZW50Lm5vZGVUeXBlID09PSAzICYmIHRoaXMuYXBwLnV0aWxzLnNlYXJjaEludmlzaWJsZUNoYXJzKHRleHQpID09PSAwKTtcclxuICAgIH0sXHJcbiAgICBfY2F0Y2hJbmxpbmVCbG9jazogZnVuY3Rpb24oZSwgZXZlbnQsIG5vZGUpIHtcclxuICAgICAgICBpZiAoZXZlbnQuaXMoJ2xlZnQnKSAmJiBub2RlLm5vZGVUeXBlID09PSAzKSB7XHJcbiAgICAgICAgICAgIHZhciBzdHIgPSBub2RlLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICB2YXIgaXNDaGFyID0gKHRoaXMuYXBwLnV0aWxzLnNlYXJjaEludmlzaWJsZUNoYXJzKHN0cikgIT09IC0xKTtcclxuICAgICAgICAgICAgaWYgKGlzQ2hhcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoYXJub2RlID0gbm9kZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1NpYmxpbmdJbmxpbmVCbG9jayhlLCBub2RlLnByZXZpb3VzU2libGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFybm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNoYXJub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUHJldkJsb2NrKGV2ZW50LCBub2RlKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNTaWJsaW5nSW5saW5lQmxvY2soZSwgbm9kZS5wcmV2aW91c1NpYmxpbmcpKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5faXNOZXh0QmxvY2soZXZlbnQsIG5vZGUpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1NpYmxpbmdJbmxpbmVCbG9jayhlLCBub2RlLm5leHRTaWJsaW5nKSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF90cmltSW52aXNpYmxlQ2hhcjogZnVuY3Rpb24oZSwgcG9pbnRlciwgcmVtb3ZlKSB7XHJcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IChwb2ludGVyID09PSAnbGVmdCcpID8gJ2JlZm9yZScgOiAnYWZ0ZXInO1xyXG4gICAgICAgIHZhciBzZWwgPSB0aGlzLmFwcC5zZWxlY3Rpb24uZ2V0KCk7XHJcbiAgICAgICAgdmFyIGlzQ2hhciA9IHRoaXMuX2lzSW52aXNpYmxlQ2hhcihkaXJlY3Rpb24pO1xyXG4gICAgICAgIHZhciBlbDtcclxuICAgICAgICBpZiAoaXNDaGFyICYmIHBvaW50ZXIgPT09ICdsZWZ0Jykge1xyXG4gICAgICAgICAgICBlbCA9IHNlbC5jdXJyZW50O1xyXG4gICAgICAgICAgICB0aGlzLmRvbShlbCkucmVwbGFjZVdpdGgoZWwudGV4dENvbnRlbnQucmVwbGFjZSgvXFxzKyQvLFwiXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNDaGFyICYmIHJlbW92ZSAmJiBzZWwuY3VycmVudCAmJiBzZWwuY3VycmVudC5uZXh0U2libGluZykge1xyXG4gICAgICAgICAgICBlbCA9IHNlbC5jdXJyZW50Lm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICB0aGlzLmRvbShlbCkucmVwbGFjZVdpdGgoZWwudGV4dENvbnRlbnQucmVwbGFjZSgvXlxccysvLFwiXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNDaGFyICYmIHBvaW50ZXIgPT09ICdyaWdodCcpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuYXBwLm9mZnNldC5nZXQoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAub2Zmc2V0LnNldCh7IHN0YXJ0OiBkYXRhLnN0YXJ0ICsgMSwgZW5kOiBkYXRhLmVuZCArIDEgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfZG9TZWxlY3RBbGw6IGZ1bmN0aW9uKGUsIGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcblxyXG4gICAgICAgIC8vIGlmIHNlbGVjdCBhbGwgJiBhY3Rpb24ga2V5IC0gbWFrZSBlbXB0eVxyXG4gICAgICAgIGlmICh0aGlzLl9pc0FsbFNlbGVjdGVkKGV2ZW50KSkge1xyXG4gICAgICAgICAgICB0aGlzLl9zZXRFZGl0b3JFbXB0eShlLCBldmVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2VsZWN0IGFsbFxyXG4gICAgICAgIGlmIChldmVudC5pcygnc2VsZWN0JykpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFwcC5ibG9ja3MuaXMoKSAmJiBpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmlzQWxsU2VsZWN0ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLmVkaXRvci5zZWxlY3RBbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnNldFNlbGVjdEFsbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuZWRpdG9yLnNlbGVjdEFsbCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2lzQWxsU2VsZWN0ZWQ6IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmFwcC5lZGl0b3IuaXNBbGxTZWxlY3RlZCgpICYmIGV2ZW50LmlzKFsnZW50ZXInLCAnZGVsZXRlJywgJ2JhY2tzcGFjZScsICdhbHBoYScsICdzcGFjZSddKSk7XHJcbiAgICB9LFxyXG4gICAgX3NldEVkaXRvckVtcHR5OiBmdW5jdGlvbihlLCBldmVudCkge1xyXG4gICAgICAgIGlmICghZXZlbnQuaXMoWydhbHBoYScsICdzcGFjZSddKSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci5zZXRFbXB0eSgpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdzaG9ydGN1dCcsIHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIGxvY2FsXHJcbiAgICAgICAgdGhpcy5zaG9ydGN1dHMgPSB0aGlzLm9wdHMuc2hvcnRjdXRzO1xyXG5cclxuICAgICAgICAvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vamVyZXNpZy9qcXVlcnkuaG90a2V5c1xyXG4gICAgICAgIHRoaXMuaG90a2V5cyA9IHtcclxuICAgICAgICAgICAgODogXCJiYWNrc3BhY2VcIiwgOTogXCJ0YWJcIiwgMTA6IFwicmV0dXJuXCIsIDEzOiBcInJldHVyblwiLCAxNjogXCJzaGlmdFwiLCAxNzogXCJjdHJsXCIsIDE4OiBcImFsdFwiLCAxOTogXCJwYXVzZVwiLFxyXG4gICAgICAgICAgICAyMDogXCJjYXBzbG9ja1wiLCAyNzogXCJlc2NcIiwgMzI6IFwic3BhY2VcIiwgMzM6IFwicGFnZXVwXCIsIDM0OiBcInBhZ2Vkb3duXCIsIDM1OiBcImVuZFwiLCAzNjogXCJob21lXCIsXHJcbiAgICAgICAgICAgIDM3OiBcImxlZnRcIiwgMzg6IFwidXBcIiwgMzk6IFwicmlnaHRcIiwgNDA6IFwiZG93blwiLCA0NTogXCJpbnNlcnRcIiwgNDY6IFwiZGVsXCIsIDU5OiBcIjtcIiwgNjE6IFwiPVwiLFxyXG4gICAgICAgICAgICA5NjogXCIwXCIsIDk3OiBcIjFcIiwgOTg6IFwiMlwiLCA5OTogXCIzXCIsIDEwMDogXCI0XCIsIDEwMTogXCI1XCIsIDEwMjogXCI2XCIsIDEwMzogXCI3XCIsXHJcbiAgICAgICAgICAgIDEwNDogXCI4XCIsIDEwNTogXCI5XCIsIDEwNjogXCIqXCIsIDEwNzogXCIrXCIsIDEwOTogXCItXCIsIDExMDogXCIuXCIsIDExMSA6IFwiL1wiLFxyXG4gICAgICAgICAgICAxMTI6IFwiZjFcIiwgMTEzOiBcImYyXCIsIDExNDogXCJmM1wiLCAxMTU6IFwiZjRcIiwgMTE2OiBcImY1XCIsIDExNzogXCJmNlwiLCAxMTg6IFwiZjdcIiwgMTE5OiBcImY4XCIsXHJcbiAgICAgICAgICAgIDEyMDogXCJmOVwiLCAxMjE6IFwiZjEwXCIsIDEyMjogXCJmMTFcIiwgMTIzOiBcImYxMlwiLCAxNDQ6IFwibnVtbG9ja1wiLCAxNDU6IFwic2Nyb2xsXCIsIDE3MzogXCItXCIsIDE4NjogXCI7XCIsIDE4NzogXCI9XCIsXHJcbiAgICAgICAgICAgIDE4ODogXCIsXCIsIDE4OTogXCItXCIsIDE5MDogXCIuXCIsIDE5MTogXCIvXCIsIDE5MjogXCJgXCIsIDIxOTogXCJbXCIsIDIyMDogXCJcXFxcXCIsIDIyMTogXCJdXCIsIDIyMjogXCInXCJcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmhvdGtleXNTaGlmdE51bXMgPSB7XHJcbiAgICAgICAgICAgIFwiYFwiOiBcIn5cIiwgXCIxXCI6IFwiIVwiLCBcIjJcIjogXCJAXCIsIFwiM1wiOiBcIiNcIiwgXCI0XCI6IFwiJFwiLCBcIjVcIjogXCIlXCIsIFwiNlwiOiBcIl5cIiwgXCI3XCI6IFwiJlwiLFxyXG4gICAgICAgICAgICBcIjhcIjogXCIqXCIsIFwiOVwiOiBcIihcIiwgXCIwXCI6IFwiKVwiLCBcIi1cIjogXCJfXCIsIFwiPVwiOiBcIitcIiwgXCI7XCI6IFwiOiBcIiwgXCInXCI6IFwiXFxcIlwiLCBcIixcIjogXCI8XCIsXHJcbiAgICAgICAgICAgIFwiLlwiOiBcIj5cIiwgIFwiL1wiOiBcIj9cIiwgIFwiXFxcXFwiOiBcInxcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuc2VsZWN0aW9uLm11bHRpcGxlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZSgnbWV0YStjbGljaycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LFxyXG4gICAgYWRkOiBmdW5jdGlvbihrZXlzLCBvYmopIHtcclxuICAgICAgICB0aGlzLnNob3J0Y3V0c1trZXlzXSA9IG9iajtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKGtleXMpIHtcclxuICAgICAgICB0aGlzLm9wdHMuc2hvcnRjdXRzQmFzZSA9IHRoaXMuX3JlbW92ZShrZXlzLCB0aGlzLm9wdHMuc2hvcnRjdXRzQmFzZSk7XHJcbiAgICAgICAgdGhpcy5vcHRzLnNob3J0Y3V0cyA9IHRoaXMuX3JlbW92ZShrZXlzLCB0aGlzLm9wdHMuc2hvcnRjdXRzKTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGU6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB0aGlzLnRyaWdnZXJlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBkaXNhYmxlIGJyb3dzZXIncyBob3Qga2V5cyBmb3IgYm9sZCBhbmQgaXRhbGljIGlmIHNob3J0Y3V0cyBvZmZcclxuICAgICAgICBpZiAodGhpcy5zaG9ydGN1dHMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGlmICgoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkgJiYgKGUud2hpY2ggPT09IDY2IHx8IGUud2hpY2ggPT09IDczKSkge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYnVpbGRcclxuICAgICAgICBpZiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLnNob2Z0S2V5IHx8IGUuYWx0S2V5KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNob3J0Y3V0cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYnVpbGQoZSwga2V5LCB0aGlzLnNob3J0Y3V0c1trZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnRyaWdnZXJlZCk7XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24ob2JqLCBuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLm9wdHMudG9wYmFyLnNob3J0Y3V0cykgPyBvYmogOiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBwb3B1cDogZnVuY3Rpb24ocGFyYW1zLCBidXR0b24pIHtcclxuXHJcbiAgICAgICAgdmFyIG1ldGEgPSAoLyhNYWN8aVBob25lfGlQb2R8aVBhZCkvaS50ZXN0KG5hdmlnYXRvci5wbGF0Zm9ybSkpID8gJzxiPiYjODk4NDs8L2I+JyA6ICdjdHJsJztcclxuICAgICAgICB2YXIgaXRlbXMgPSB7fTtcclxuICAgICAgICB2YXIgeiA9IDA7XHJcblxyXG4gICAgICAgIC8vIGl0ZW1zXHJcbiAgICAgICAgdGhpcy5fYnVpbGRQb3B1cEl0ZW1zKGl0ZW1zLCB6LCB0aGlzLm9wdHMuc2hvcnRjdXRzQmFzZSwgbWV0YSwgJ2Jhc2UnKTtcclxuICAgICAgICB0aGlzLl9idWlsZFBvcHVwSXRlbXMoaXRlbXMsIHosIHRoaXMub3B0cy5zaG9ydGN1dHMsIG1ldGEpO1xyXG5cclxuICAgICAgICAvLyBjcmVhdGVcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jcmVhdGUoJ3Nob3J0Y3V0cycsIHtcclxuICAgICAgICAgICAgd2lkdGg6ICczNjBweCcsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtc1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBvcGVuXHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAub3Blbih7IGJ1dHRvbjogYnV0dG9uIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRQb3B1cEl0ZW1zOiBmdW5jdGlvbihpdGVtcywgeiwgc2hvcnRjdXRzLCBtZXRhLCB0eXBlKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNob3J0Y3V0cykge1xyXG4gICAgICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtc2hvcnRjdXQtaXRlbScpO1xyXG4gICAgICAgICAgICB2YXIgdGl0bGUgPSAodHlwZSA9PT0gJ2Jhc2UnKSA/IHNob3J0Y3V0c1trZXldIDogc2hvcnRjdXRzW2tleV0udGl0bGU7XHJcblxyXG4gICAgICAgICAgICB2YXIgJHRpdGxlID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1zaG9ydGN1dC10aXRsZScpLmh0bWwodGhpcy5sYW5nLnBhcnNlKHRpdGxlKSk7XHJcbiAgICAgICAgICAgIHZhciAka2JkID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1zaG9ydGN1dC1rYmQnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gKHR5cGUgPT09ICdiYXNlJykgPyBrZXkucmVwbGFjZSgnbWV0YScsIG1ldGEpIDogc2hvcnRjdXRzW2tleV0ubmFtZS5yZXBsYWNlKCdtZXRhJywgbWV0YSk7XHJcbiAgICAgICAgICAgIHZhciBhcnIgPSBuYW1lLnNwbGl0KCcrJyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBhcnJbaV0gPSAnPHNwYW4+JyArIGFycltpXSArICc8L3NwYW4+JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAka2JkLmh0bWwoYXJyLmpvaW4oJysnKSk7XHJcblxyXG4gICAgICAgICAgICAkaXRlbS5hcHBlbmQoJHRpdGxlKTtcclxuICAgICAgICAgICAgJGl0ZW0uYXBwZW5kKCRrYmQpO1xyXG5cclxuICAgICAgICAgICAgaXRlbXNbel0gPSB7IGh0bWw6ICRpdGVtIH07XHJcbiAgICAgICAgICAgIHorKztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkOiBmdW5jdGlvbihlLCBzdHIsIG9iaikge1xyXG4gICAgICAgIHZhciBrZXlzID0gc3RyLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgdmFyIGxlbiA9IGtleXMubGVuZ3RoO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBrZXlzW2ldID09PSAnc3RyaW5nJyAmJiAhb2JqLmhhc093blByb3BlcnR5KCd0cmlnZ2VyJykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZXIoZSwga2V5c1tpXS50cmltKCksIG9iaik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2hhbmRsZXI6IGZ1bmN0aW9uKGUsIGtleXMsIG9iaikge1xyXG4gICAgICAgIGtleXMgPSBrZXlzLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCIgXCIpO1xyXG5cclxuICAgICAgICB2YXIgc3BlY2lhbCA9IHRoaXMuaG90a2V5c1tlLmtleUNvZGVdO1xyXG4gICAgICAgIHZhciBjaGFyYWN0ZXIgPSAoZS53aGljaCAhPT0gOTEpID8gU3RyaW5nLmZyb21DaGFyQ29kZShlLndoaWNoKS50b0xvd2VyQ2FzZSgpIDogZmFsc2U7XHJcbiAgICAgICAgdmFyIG1vZGlmID0gXCJcIiwgcG9zc2libGUgPSB7fTtcclxuICAgICAgICB2YXIgY21kS2V5cyA9IFtcIm1ldGFcIiwgXCJjdHJsXCIsIFwiYWx0XCIsIFwic2hpZnRcIl07XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY21kS2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgc3BlY2lhbEtleSA9IGNtZEtleXNbaV07XHJcbiAgICAgICAgICAgIGlmIChlW3NwZWNpYWxLZXkgKyAnS2V5J10gJiYgc3BlY2lhbCAhPT0gc3BlY2lhbEtleSkge1xyXG4gICAgICAgICAgICAgICAgbW9kaWYgKz0gc3BlY2lhbEtleSArICcrJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmlnaHQgY21kXHJcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gOTMpIHtcclxuICAgICAgICAgICAgbW9kaWYgKz0gJ21ldGErJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzcGVjaWFsKSBwb3NzaWJsZVttb2RpZiArIHNwZWNpYWxdID0gdHJ1ZTtcclxuICAgICAgICBpZiAoY2hhcmFjdGVyKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlW21vZGlmICsgY2hhcmFjdGVyXSA9IHRydWU7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlW21vZGlmICsgdGhpcy5ob3RrZXlzU2hpZnROdW1zW2NoYXJhY3Rlcl1dID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vIFwiJFwiIGNhbiBiZSB0cmlnZ2VyZWQgYXMgXCJTaGlmdCs0XCIgb3IgXCJTaGlmdCskXCIgb3IganVzdCBcIiRcIlxyXG4gICAgICAgICAgICBpZiAobW9kaWYgPT09IFwic2hpZnQrXCIpIHtcclxuICAgICAgICAgICAgICAgIHBvc3NpYmxlW3RoaXMuaG90a2V5c1NoaWZ0TnVtc1tjaGFyYWN0ZXJdXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciB6ID0gMDsgeiA8IGxlbjsgeisrKSB7XHJcbiAgICAgICAgICAgIGlmIChwb3NzaWJsZVtrZXlzW3pdXSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5hcGkob2JqLmNvbW1hbmQsIG9iai5wYXJhbXMsIGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9yZW1vdmU6IGZ1bmN0aW9uKGtleXMsIG9iaikge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbihvYmplY3QsIGtleSkge1xyXG4gICAgICAgICAgICBpZiAoa2V5ICE9PSBrZXlzKSB7IG9iamVjdFtrZXldID0gb2JqW2tleV0gfTtcclxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdFxyXG4gICAgICAgIH0sIHt9KTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAndG9vbGJhcicsIHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIGxvY2FsXHJcbiAgICAgICAgdGhpcy5hY3RpdmVDbGFzcyA9ICdhY3RpdmUnO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlZENsYXNzID0gJ3RvZ2dsZWQnO1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZUNsYXNzID0gJ2Rpc2FibGUnO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tQnV0dG9ucyA9IHt9O1xyXG4gICAgICAgIHRoaXMuYVRhZ3MgPSB7fTtcclxuICAgICAgICB0aGlzLmFUeXBlcyA9IHt9O1xyXG4gICAgfSxcclxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRzLnRvb2xiYXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGlja3kgPSB0aGlzLm9wdHMudG9vbGJhcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5vcHRzLnBhdGggJiYgdGhpcy5vcHRzLnBhdGguc3RpY2t5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RpY2t5ID0gdGhpcy5vcHRzLnBhdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5faXNUb29sYmFyKCkpIHtcclxuICAgICAgICAgICAgdGhpcy4kY29udGFpbmVyID0gdGhpcy5hcHAuY29udGFpbmVyLmdldCgndG9vbGJhcicpO1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYnVpbGRTdGlja3koKTtcclxuICAgIH0sXHJcbiAgICBsb2FkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9idWlsZEFjdGl2ZUJ1dHRvbnMoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzVG9vbGJhcigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHRvb2xiYXIuaHRtbCgnJyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkQnV0dG9ucygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiR0b29sYmFyLnJlbW92ZSgpO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tQnV0dG9ucyA9IHt9O1xyXG4gICAgICAgIHRoaXMuZWRpdG9yQnV0dG9ucyA9IHt9O1xyXG4gICAgfSxcclxuICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzVG9vbGJhcigpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuJHRvb2xiYXIuaHRtbCgnJyk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRCdXR0b25zKCk7XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Rvb2xiYXIoKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLnVuc2V0QWN0aXZlKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5ibG9ja3MuaXMoKSB8fCB0aGlzLmFwcC5lZGl0b3IuaXNBbGxTZWxlY3RlZCgpKSByZXR1cm47XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc09ic2VydmVCdXR0b25zKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcbiAgICAgICAgdmFyIHR5cGUgPSAoaW5zdGFuY2UpID8gaW5zdGFuY2UuZ2V0VHlwZSgpIDogZmFsc2U7XHJcbiAgICAgICAgdmFyIHRhZyA9IChpbnN0YW5jZSkgPyBpbnN0YW5jZS5nZXRUYWcoKSA6IGZhbHNlO1xyXG4gICAgICAgIHZhciBpbmxpbmVzID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldE5vZGVzKHsgdHlwZTogJ2lubGluZScsIHNlbGVjdGVkOiAnaW5zaWRlJywgbGlua3M6IHRydWUgfSk7XHJcbiAgICAgICAgdmFyIHRhZ3MgPSB0aGlzLl9nZXRPYnNlcnZlZFRhZ3ModGFnLCBpbmxpbmVzKTtcclxuICAgICAgICB2YXIgYnV0dG9ucyA9IFtdO1xyXG4gICAgICAgIHZhciBrZXlzO1xyXG5cclxuICAgICAgICAvLyB0YWdzXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGtleXMgPSB0aGlzLmFUYWdzW3RhZ3NbaV1dO1xyXG4gICAgICAgICAgICBpZiAoa2V5cykge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9ucyA9IGJ1dHRvbnMuY29uY2F0KGtleXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8gdHlwZXNcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICBrZXlzID0gdGhpcy5hVHlwZXNbdHlwZV07XHJcbiAgICAgICAgICAgIGlmIChrZXlzKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25zID0gYnV0dG9ucy5jb25jYXQoa2V5cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNldCBhY3RpdmVcclxuICAgICAgICB0aGlzLl9zZXRBY3RpdmVLZXlzKGJ1dHRvbnMpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwdWJsaWNcclxuICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiR0b29sYmFyO1xyXG4gICAgfSxcclxuICAgIGdldDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9maW5kQnV0dG9uKG5hbWUpO1xyXG4gICAgfSxcclxuICAgIGFkZDogZnVuY3Rpb24obmFtZSwgb2JqKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21CdXR0b25zW25hbWVdID0gb2JqO1xyXG4gICAgfSxcclxuICAgIHNldEFjdGl2ZTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNUb29sYmFyKCkpIHJldHVybjtcclxuICAgICAgICB0aGlzLl9maW5kQnV0dG9ucygpLnJlbW92ZUNsYXNzKHRoaXMuYWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgIHRoaXMuX2ZpbmRCdXR0b24obmFtZSkucmVtb3ZlQ2xhc3ModGhpcy5kaXNhYmxlQ2xhc3MpLmFkZENsYXNzKHRoaXMuYWN0aXZlQ2xhc3MpO1xyXG5cclxuICAgIH0sXHJcbiAgICBzZXRUb2dnbGVkOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Rvb2xiYXIoKSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX2ZpbmRCdXR0b25zKCkucmVtb3ZlQ2xhc3ModGhpcy50b2dnbGVkQ2xhc3MpO1xyXG4gICAgICAgIHRoaXMuX2ZpbmRCdXR0b24obmFtZSkucmVtb3ZlQ2xhc3ModGhpcy5kaXNhYmxlQ2xhc3MpLmFkZENsYXNzKHRoaXMudG9nZ2xlZENsYXNzKTtcclxuICAgIH0sXHJcbiAgICB1bnNldEFjdGl2ZTogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNUb29sYmFyKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyICRlbG1zID0gKG5hbWUpID8gdGhpcy5fZmluZEJ1dHRvbihuYW1lKSA6IHRoaXMuX2ZpbmRCdXR0b25zKCk7XHJcbiAgICAgICAgJGVsbXMucmVtb3ZlQ2xhc3ModGhpcy5hY3RpdmVDbGFzcyk7XHJcblxyXG4gICAgfSxcclxuICAgIHVuc2V0VG9nZ2xlZDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNUb29sYmFyKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyICRlbG1zID0gKG5hbWUpID8gdGhpcy5fZmluZEJ1dHRvbihuYW1lKSA6IHRoaXMuX2ZpbmRCdXR0b25zKCk7XHJcbiAgICAgICAgJGVsbXMucmVtb3ZlQ2xhc3ModGhpcy50b2dnbGVkQ2xhc3MpO1xyXG4gICAgfSxcclxuICAgIGVuYWJsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Rvb2xiYXIoKSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX2ZpbmRCdXR0b25zKCkucmVtb3ZlQ2xhc3ModGhpcy5kaXNhYmxlQ2xhc3MpO1xyXG4gICAgfSxcclxuICAgIGRpc2FibGU6IGZ1bmN0aW9uKGV4Y2VwdCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNUb29sYmFyKCkpIHJldHVybjtcclxuICAgICAgICB0aGlzLl9maW5kQnV0dG9ucygpLnJlbW92ZUNsYXNzKHRoaXMudG9nZ2xlZENsYXNzKS5yZW1vdmVDbGFzcyh0aGlzLmFjdGl2ZUNsYXNzKS5hZGRDbGFzcyh0aGlzLmRpc2FibGVDbGFzcyk7XHJcbiAgICB9LFxyXG4gICAgZGlzYWJsZVN0aWNreTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Rvb2xiYXIoKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgJGNvbnRhaW5lciA9IHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ2JhcnMnKTtcclxuICAgICAgICAkY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1iYXJzLXN0aWNreScpO1xyXG4gICAgICAgICRjb250YWluZXIuY3NzKCd0b3AnLCAnJyk7XHJcbiAgICB9LFxyXG4gICAgZW5hYmxlU3RpY2t5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzVG9vbGJhcigpKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMub3B0cy50b29sYmFyLnN0aWNreSkge1xyXG4gICAgICAgICAgICB2YXIgJGNvbnRhaW5lciA9IHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ2JhcnMnKTtcclxuICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctYmFycy1zdGlja3knKTtcclxuICAgICAgICAgICAgJGNvbnRhaW5lci5jc3MoJ3RvcCcsIHRoaXMub3B0cy50b29sYmFyLnN0aWNreVRvcE9mZnNldCArICdweCcpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpc1N0aWNreTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRjb250YWluZXIgPSB0aGlzLmFwcC5jb250YWluZXIuZ2V0KCdiYXJzJyk7XHJcbiAgICAgICAgdmFyICRtYWluID0gdGhpcy5hcHAuY29udGFpbmVyLmdldCgnbWFpbicpO1xyXG4gICAgICAgIHZhciBtYWluVG9wID0gJG1haW4ub2Zmc2V0KCkudG9wICsgcGFyc2VJbnQoJG1haW4uY3NzKCdib3JkZXItdG9wLXdpZHRoJykpO1xyXG4gICAgICAgIHZhciBjb250YWluZXJUb3AgPSAkY29udGFpbmVyLm9mZnNldCgpLnRvcDtcclxuXHJcbiAgICAgICAgcmV0dXJuIChjb250YWluZXJUb3AgPiBtYWluVG9wIHx8IGNvbnRhaW5lclRvcCA8IG1haW5Ub3ApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJHRvb2xiYXIgPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctdG9vbGJhcicpO1xyXG5cclxuICAgICAgICB0aGlzLiRjb250YWluZXIuYXBwZW5kKHRoaXMuJHRvb2xiYXIpO1xyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ2JhcnMnKS5hZGRDbGFzcygnaGFzLXRvb2xiYXInKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRTdGlja3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0aWNreSkge1xyXG5cclxuICAgICAgICAgICAgdmFyICRjb250YWluZXIgPSB0aGlzLmFwcC5jb250YWluZXIuZ2V0KCdiYXJzJyk7XHJcbiAgICAgICAgICAgICRjb250YWluZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWJhcnMtc3RpY2t5Jyk7XHJcbiAgICAgICAgICAgICRjb250YWluZXIuY3NzKCd0b3AnLCB0aGlzLnN0aWNreS5zdGlja3lUb3BPZmZzZXQgKyAncHgnKTtcclxuXHJcbiAgICAgICAgICAgIHZhciAkc2Nyb2xsVGFyZ2V0ID0gdGhpcy5hcHAuc2Nyb2xsLmdldFRhcmdldCgpO1xyXG4gICAgICAgICAgICAkc2Nyb2xsVGFyZ2V0Lm9uKCdzY3JvbGwuJyArIHRoaXMucHJlZml4ICsgJy10b29sYmFyJywgdGhpcy5fb2JzZXJ2ZVN0aWNreS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQWN0aXZlQnV0dG9uczogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuYVRhZ3MgPSAodGhpcy5vcHRzLmJ1dHRvbnMudGFncykgPyB0aGlzLm9wdHMuYnV0dG9ucy50YWdzIDoge307XHJcbiAgICAgICAgdGhpcy5hVHlwZXMgPSAodGhpcy5vcHRzLmJ1dHRvbnMudHlwZXMpID8gdGhpcy5vcHRzLmJ1dHRvbnMudHlwZXMgOiB7fTtcclxuXHJcbiAgICAgICAgdmFyIGJ0bnMgPSB0aGlzLmN1c3RvbUJ1dHRvbnM7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGJ0bnMpIHtcclxuICAgICAgICAgICAgdmFyIGFjdGl2ZSA9IGJ0bnNba2V5XS5hY3RpdmU7XHJcbiAgICAgICAgICAgIGlmIChhY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2J1aWxkQWN0aXZlQnV0dG9uKGtleSwgYWN0aXZlLnRhZ3MsIHRoaXMuYVRhZ3MpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYnVpbGRBY3RpdmVCdXR0b24oa2V5LCBhY3RpdmUudHlwZXMsIHRoaXMuYVR5cGVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRBY3RpdmVCdXR0b246IGZ1bmN0aW9uKGtleSwgYXJyLCBvYmopIHtcclxuICAgICAgICBpZiAoIWFycikgcmV0dXJuO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IGFycltpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvYmpbaXRlbV0pIHtcclxuICAgICAgICAgICAgICAgIG9ialtpdGVtXS5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvYmpbaXRlbV09IFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZEJ1dHRvbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuX2dldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIHZhciBidXR0b25zID0gKGluc3RhbmNlKSA/IGluc3RhbmNlLnRvb2xiYXIgOiB0aGlzLmFwcC5lZGl0b3IuZ2V0QnV0dG9ucygpO1xyXG5cclxuICAgICAgICAvLyBjcmVhdGUgYnV0dG9uXHJcbiAgICAgICAgdGhpcy5fY3JlYXRlQnV0dG9ucyhidXR0b25zLCBpbnN0YW5jZSk7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZSBjdXN0b20gKHBsdWdpbilcclxuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlQnV0dG9ucyh0aGlzLmN1c3RvbUJ1dHRvbnMsIGluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2NyZWF0ZUJ1dHRvbnM6IGZ1bmN0aW9uKGJ1dHRvbnMsIGluc3RhbmNlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBidXR0b25zKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZSAmJiAhaW5zdGFuY2UuaXNBbGxvd2VkQnV0dG9uKG5hbWUsIGJ1dHRvbnNbbmFtZV0pKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmNyZWF0ZSgnYnV0dG9uJywgbmFtZSwgYnV0dG9uc1tuYW1lXSwgdGhpcy4kdG9vbGJhciwgJ3Rvb2xiYXInKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX29ic2VydmVTdGlja3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkc2Nyb2xsVGFyZ2V0ID0gdGhpcy5hcHAuc2Nyb2xsLmdldFRhcmdldCgpO1xyXG4gICAgICAgIHZhciBwYWRkaW5nVG9wID0gKHRoaXMuYXBwLnNjcm9sbC5pc1RhcmdldCgpKSA/IHBhcnNlSW50KCRzY3JvbGxUYXJnZXQuY3NzKCdwYWRkaW5nLXRvcCcpKSA6IDA7XHJcblxyXG4gICAgICAgIHZhciAkY29udGFpbmVyID0gdGhpcy5hcHAuY29udGFpbmVyLmdldCgnYmFycycpO1xyXG4gICAgICAgICRjb250YWluZXIuY3NzKCd0b3AnLCAoMCAtIHBhZGRpbmdUb3AgKyB0aGlzLnN0aWNreS5zdGlja3lUb3BPZmZzZXQpICsgJ3B4Jyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzU3RpY2t5KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCd0b29sYmFyLnN0aWNreScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCd0b29sYmFyLnN0YXRpYycpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfZmluZEJ1dHRvbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiR0b29sYmFyLmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLWJ1dHRvbi10b29sYmFyJyk7XHJcbiAgICB9LFxyXG4gICAgX2ZpbmRCdXR0b246IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kdG9vbGJhci5maW5kKCdbZGF0YS1uYW1lPScgKyBuYW1lICsgJ10nKTtcclxuICAgIH0sXHJcbiAgICBfaXNUb29sYmFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcHRzLnRvb2xiYXI7XHJcbiAgICB9LFxyXG4gICAgX2lzT2JzZXJ2ZUJ1dHRvbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmJ1dHRvbnMudGFncyAmJiAhdGhpcy5vcHRzLmJ1dHRvbnMudHlwZXMpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgX3NldEFjdGl2ZUtleXM6IGZ1bmN0aW9uKGtleXMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fZmluZEJ1dHRvbihrZXlzW2ldKS5hZGRDbGFzcyh0aGlzLmFjdGl2ZUNsYXNzKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2dldEN1cnJlbnRJbnN0YW5jZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gKHRoaXMuYXBwLmJsb2NrLmlzKCkpID8gdGhpcy5hcHAuYmxvY2suZ2V0KCkgOiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gKHRoaXMuYXBwLmJsb2Nrcy5pcygpKSA/IGZhbHNlIDogaW5zdGFuY2U7XHJcbiAgICB9LFxyXG4gICAgX2dldE9ic2VydmVkVGFnczogZnVuY3Rpb24odGFnLCBpbmxpbmVzKSB7XHJcbiAgICAgICAgdmFyIHRhZ3MgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHRhZykge1xyXG4gICAgICAgICAgICB0YWdzLnB1c2godGFnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpbmxpbmVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0YWdzLnB1c2goaW5saW5lc1tpXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGFncztcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnYnV0dG9uJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24obmFtZSwgb2JqLCAkY29udGFpbmVyLCB0eXBlKSB7XHJcbiAgICAgICAgLy8gYnVpbGRcclxuICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IG5hbWUubmFtZTtcclxuICAgICAgICAgICAgdGhpcy5vYmogPSBvYmo7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkRnJvbUVsZW1lbnQobmFtZS5lbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlIHx8IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuX29ic2VydmUob2JqKTtcclxuICAgICAgICAgICAgdGhpcy5vYmogPSAodHlwZW9mIHJlcyA9PT0gJ3VuZGVmaW5lZCcpID8gb2JqIDogcmVzO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub2JqKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9idWlsZChuYW1lLCAkY29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXRDb2xvcjogZnVuY3Rpb24oc3RhY2ssIGRhdGEpIHtcclxuICAgICAgICB2YXIgbmFtZSA9IHN0YWNrLmdldE5hbWUoKTtcclxuICAgICAgICBpZiAobmFtZSA9PT0gJ2JhY2tncm91bmQnIHx8IG5hbWUgPT09ICd0ZXh0LWNvbG9yJykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gKG5hbWUgPT09ICdiYWNrZ3JvdW5kJykgPyAnYmFja2dyb3VuZC1jb2xvcicgOiAnY29sb3InO1xyXG4gICAgICAgICAgICB0aGlzLnNldEJhY2tncm91bmQoZGF0YVtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaXNCdXR0b246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGdldE5hbWU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9LFxyXG4gICAgZ2V0VGl0bGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRpdGxlO1xyXG4gICAgfSxcclxuICAgIGdldFBhcmFtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl9oYXMoJ3BhcmFtcycpKSA/IHRoaXMub2JqLnBhcmFtcyA6IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGdldE9mZnNldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGJ1dHRvbi5vZmZzZXQoKTtcclxuICAgIH0sXHJcbiAgICBnZXREaW1lbnNpb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLiRidXR0b24ud2lkdGgoKSxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLiRidXR0b24uaGVpZ2h0KClcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRidXR0b247XHJcbiAgICB9LFxyXG4gICAgc2V0QmFja2dyb3VuZDogZnVuY3Rpb24oY29sb3IpIHtcclxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kKCdhZGQnLCBjb2xvcik7XHJcbiAgICB9LFxyXG4gICAgcmVzZXRCYWNrZ3JvdW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9iYWNrZ3JvdW5kKCdyZW1vdmUnLCAnJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9oYXM6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vYmouaGFzT3duUHJvcGVydHkobmFtZSk7XHJcbiAgICB9LFxyXG4gICAgX29ic2VydmU6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoJ29ic2VydmVyJykpIHtcclxuICAgICAgICAgICAgb2JqID0gdGhpcy5hcHAuYXBpKG9iai5vYnNlcnZlciwgb2JqLCB0aGlzLm5hbWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH0sXHJcbiAgICBfYmFja2dyb3VuZDogZnVuY3Rpb24odHlwZSwgY29sb3IpIHtcclxuICAgICAgICB2YXIgZnVuYyA9ICh0eXBlID09PSAncmVtb3ZlJykgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJztcclxuICAgICAgICB0aGlzLiRpY29uW2Z1bmNdKHRoaXMucHJlZml4ICsgJy1idXR0b24taWNvbi1jb2xvcicpLmNzcyh7XHJcbiAgICAgICAgICAgICdiYWNrZ3JvdW5kLWNvbG9yJzogY29sb3IsXHJcbiAgICAgICAgICAgICdjb2xvcic6IChjb2xvciAhPT0gJycpID8gdGhpcy5hcHAuY29sb3IuaW52ZXJ0KGNvbG9yKSA6ICcnXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLiRidXR0b24gPSB0aGlzLmRvbShlbGVtZW50KTtcclxuICAgICAgICB0aGlzLiRidXR0b24uYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWJ1dHRvbi10YXJnZXQnKTtcclxuICAgICAgICB0aGlzLl9idWlsZERhdGEoKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKG5hbWUsICRjb250YWluZXIpIHtcclxuXHJcbiAgICAgICAgdGhpcy5fYnVpbGRUaXRsZSgpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkRWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkSWNvbigpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkRGF0YSgkY29udGFpbmVyKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGREYXRhOiBmdW5jdGlvbigkY29udGFpbmVyKSB7XHJcblxyXG4gICAgICAgIC8vIGRhdGFcclxuICAgICAgICB0aGlzLiRidXR0b24uYXR0cih7XHJcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMScsXHJcbiAgICAgICAgICAgICdkYXRhLW5hbWUnOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgICAgICdkYXRhLWNvbW1hbmQnOiB0aGlzLm9iai5jb21tYW5kIHx8IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuJGJ1dHRvbi5kYXRhc2V0KCdpbnN0YW5jZScsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBmdW5jXHJcbiAgICAgICAgdmFyIGZ1bmMgPSAodGhpcy5faGFzKCdjb21tYW5kJykpID8gJ19jYXRjaCcgOiAnX3N0b3AnO1xyXG5cclxuICAgICAgICAvLyBldmVudHNcclxuICAgICAgICB0aGlzLiRidXR0b24ub24oJ2NsaWNrLicgKyB0aGlzLnByZWZpeCArICctYnV0dG9uJywgdGhpc1tmdW5jXS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLiRidXR0b24ub24oJ2RyYWdzdGFydC4nICsgdGhpcy5wcmVmaXggKyAnLWJ1dHRvbicsIGZ1bmN0aW9uKGUpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyByZXR1cm47IH0pO1xyXG5cclxuICAgICAgICBpZiAoJGNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZFRvb2x0aXAoKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRCYWNrZ3JvdW5kKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkUG9zaXRpb24oJGNvbnRhaW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZFRpdGxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gKHR5cGVvZiB0aGlzLm9iai50aXRsZSAhPT0gJ3VuZGVmaW5lZCcpID8gdGhpcy5sYW5nLnBhcnNlKHRoaXMub2JqLnRpdGxlKSA6ICcnO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGJ1dHRvbiA9IHRoaXMuZG9tKCc8YSBocmVmPVwiI1wiPjwvYT4nKTtcclxuICAgICAgICB0aGlzLiRidXR0b24uYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWJ1dHRvbiAnICsgdGhpcy5wcmVmaXggKyAnLWJ1dHRvbi10YXJnZXQnKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLiRidXR0b24uYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWJ1dHRvbi0nICsgdGhpcy50eXBlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9oYXMoJ2NsYXNzbmFtZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGJ1dHRvbi5hZGRDbGFzcyh0aGlzLm9iai5jbGFzc25hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRJY29uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaXNJY29uID0gdGhpcy5faGFzKCdpY29uJyk7XHJcbiAgICAgICAgdmFyIHNwYW4gPSAnPHNwYW4gY2xhc3M9XCInICsgdGhpcy5wcmVmaXggKyAnLWljb24tJyArIHRoaXMubmFtZSArICdcIj48L3NwYW4+J1xyXG5cclxuICAgICAgICB0aGlzLiRpY29uID0gdGhpcy5fYnVpbGRJY29uRWxlbWVudCgpO1xyXG5cclxuICAgICAgICBpZiAoaXNJY29uKSB7XHJcbiAgICAgICAgICAgIHNwYW4gPSAodGhpcy5vYmouaWNvbi5zZWFyY2goLzwvKSAhPT0gLTEpID8gdGhpcy5vYmouaWNvbiA6ICc8c3BhbiBjbGFzcz1cIicgKyB0aGlzLnByZWZpeCArICctaWNvbi0nICsgdGhpcy5vYmouaWNvbiArICdcIj48L3NwYW4+JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuJGljb24uYXBwZW5kKHNwYW4pO1xyXG4gICAgICAgIHRoaXMuJGJ1dHRvbi5hcHBlbmQodGhpcy4kaWNvbik7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkSWNvbkVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPHNwYW4+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWJ1dHRvbi1pY29uJyk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkVG9vbHRpcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3Rvb2xiYXInKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnRvb2x0aXAuYnVpbGQodGhpcy4kYnV0dG9uLCB0aGlzLnRpdGxlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQmFja2dyb3VuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hhcygnYmFja2dyb3VuZCcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QmFja2dyb3VuZCh0aGlzLm9iai5iYWNrZ3JvdW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkUG9zaXRpb246IGZ1bmN0aW9uKCRjb250YWluZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5faGFzKCdwb3NpdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3MgPSB0aGlzLm9iai5wb3NpdGlvbjtcclxuICAgICAgICAgICAgaWYgKHBvcyA9PT0gJ2ZpcnN0Jykge1xyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5wcmVwZW5kKHRoaXMuJGJ1dHRvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHBvcyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gKHBvcy5oYXNPd25Qcm9wZXJ0eSgnYWZ0ZXInKSkgPyAnYWZ0ZXInIDogJ2JlZm9yZSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHBvc1t0eXBlXTtcclxuICAgICAgICAgICAgICAgIHZhciAkZWwgPSAkY29udGFpbmVyLmZpbmQoJ1tkYXRhLW5hbWU9JyArIG5hbWUgKyAnXScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRlbC5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkZWxbdHlwZV0odGhpcy4kYnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRjb250YWluZXIuYXBwZW5kKHRoaXMuJGJ1dHRvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICRjb250YWluZXIuYXBwZW5kKHRoaXMuJGJ1dHRvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9zdG9wOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9LFxyXG4gICAgX2NhdGNoOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHZhciAkYnRuID0gdGhpcy5kb20oZS50YXJnZXQpLmNsb3Nlc3QoJy4nICsgdGhpcy5wcmVmaXggKyAnLWJ1dHRvbi10YXJnZXQnKTtcclxuICAgICAgICBpZiAoJGJ0bi5oYXNDbGFzcygnZGlzYWJsZScpKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIGVkaXRvciBmb2N1c1xyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci5zZXRGb2N1cygpO1xyXG5cclxuICAgICAgICB2YXIgY29tbWFuZCA9ICRidG4uYXR0cignZGF0YS1jb21tYW5kJyk7XHJcbiAgICAgICAgdmFyIG5hbWUgPSAkYnRuLmF0dHIoJ2RhdGEtbmFtZScpO1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICRidG4uZGF0YWdldCgnaW5zdGFuY2UnKTtcclxuXHJcbiAgICAgICAgLy8gY29tbWFuZFxyXG4gICAgICAgIHRoaXMuYXBwLmFwaShjb21tYW5kLCB0aGlzLmdldFBhcmFtcygpLCBpbnN0YW5jZSwgbmFtZSwgZSk7XHJcbiAgICAgICAgdGhpcy5hcHAudG9vbHRpcC5jbG9zZSgpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICd0b29sdGlwJywge1xyXG4gICAgYnVpbGQ6IGZ1bmN0aW9uKCRidXR0b24sIHRpdGxlKSB7XHJcbiAgICAgICAgdGl0bGUgPSAodGl0bGUpID8gdGl0bGUucmVwbGFjZSgvKDwoW14+XSspPikvZ2ksICcnKSA6IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAodGl0bGUpIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnByZWZpeCArICctYnV0dG9uLScgKyB0aGlzLnV1aWQ7XHJcbiAgICAgICAgICAgICRidXR0b24uYXR0cignZGF0YS10b29sdGlwJywgdGl0bGUpO1xyXG4gICAgICAgICAgICAkYnV0dG9uLm9uKCdtb3VzZW92ZXIuJyArIG5hbWUsIHRoaXMub3Blbi5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgJGJ1dHRvbi5vbignbW91c2VvdXQuJyArIG5hbWUsIHRoaXMuY2xvc2UuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG9wZW46IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAodGhpcy5hcHAucG9wdXAuaXNPcGVuKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyICRidG4gPSB0aGlzLmRvbShlLnRhcmdldCkuY2xvc2VzdCgnLicgKyB0aGlzLnByZWZpeCArICctYnV0dG9uLXRhcmdldCcpO1xyXG4gICAgICAgIGlmICgkYnRuLmhhc0NsYXNzKCdkaXNhYmxlJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyICR0b29sdGlwID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy10b29sdGlwJykuaHRtbCgkYnRuLmF0dHIoJ2RhdGEtdG9vbHRpcCcpKTtcclxuICAgICAgICB2YXIgb2Zmc2V0ID0gJGJ0bi5vZmZzZXQoKTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gJGJ0bi5oZWlnaHQoKTtcclxuXHJcbiAgICAgICAgJHRvb2x0aXAuY3NzKHtcclxuICAgICAgICAgICAgdG9wOiAob2Zmc2V0LnRvcCArIGhlaWdodCkgKyAncHgnLFxyXG4gICAgICAgICAgICBsZWZ0OiAob2Zmc2V0LmxlZnQpICsgJ3B4J1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBicyBtb2RhbFxyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuYnNtb2RhbCkge1xyXG4gICAgICAgICAgICAkdG9vbHRpcC5jc3MoJ3otaW5kZXgnLCAxMDUxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLiRib2R5LmFwcGVuZCgkdG9vbHRpcCk7XHJcblxyXG4gICAgfSxcclxuICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmFwcC4kYm9keS5maW5kKCcuJyArIHRoaXMucHJlZml4ICsgJy10b29sdGlwJykucmVtb3ZlKCk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ3BhdGgnLCB7XHJcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZUNsYXNzID0gJ2FjdGl2ZSc7XHJcbiAgICAgICAgdGhpcy5kaXNhYmxlQ2xhc3MgPSAnZGlzYWJsZSc7XHJcbiAgICAgICAgdGhpcy5wYXRoSXRlbUNsYXNzID0gdGhpcy5wcmVmaXggKyAnLXBhdGgtaXRlbSc7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLnBhdGgpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy4kY29udGFpbmVyID0gdGhpcy5hcHAuY29udGFpbmVyLmdldCgncGF0aGJhcicpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRSb290KCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRBY3RpdmUoKTtcclxuICAgIH0sXHJcbiAgICBidWlsZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMucGF0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLl9jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkUm9vdCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5hcHAuYmxvY2tzLmlzKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRNdWx0aXBsZUl0ZW0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkSXRlbXMoKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRBY3RpdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMucGF0aCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLl9nZXRBbGwoKS5hZGRDbGFzcyh0aGlzLmRpc2FibGVDbGFzcyk7XHJcbiAgICB9LFxyXG4gICAgZW5hYmxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5wYXRoKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuX2dldEFsbCgpLnJlbW92ZUNsYXNzKHRoaXMuZGlzYWJsZUNsYXNzKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2NsZWFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRwYXRoLmZpbmQoJy4nICsgdGhpcy5wYXRoSXRlbUNsYXNzKS5vZmYoJy4nICsgdGhpcy5wcmVmaXggKyAnLXBhdGgtJyArIHRoaXMudXVpZCk7XHJcbiAgICAgICAgdGhpcy4kcGF0aC5odG1sKCcnKTtcclxuICAgIH0sXHJcbiAgICBfZ2V0QWxsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kcGF0aC5maW5kKCcuJyArIHRoaXMucGF0aEl0ZW1DbGFzcyk7XHJcbiAgICB9LFxyXG4gICAgX3NlbGVjdEl0ZW06IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgdmFyICRpdGVtID0gdGhpcy5kb20oZS50YXJnZXQpLmNsb3Nlc3QoJy4nICsgdGhpcy5wYXRoSXRlbUNsYXNzKTtcclxuICAgICAgICBpZiAoJGl0ZW0uaGFzQ2xhc3ModGhpcy5kaXNhYmxlQ2xhc3MpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICRpdGVtLmRhdGFnZXQoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChpbnN0YW5jZSwgJ3N0YXJ0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZFJvb3QoKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRBY3RpdmUoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2sudW5zZXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2NyZWF0ZUl0ZW06IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPGEgaHJlZj1cIiNcIj48L2E+JykuYXR0cigndGFiaW5kZXgnLCAnLTEnKS5hZGRDbGFzcyh0aGlzLnBhdGhJdGVtQ2xhc3MpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kcGF0aCA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wYXRoJyk7XHJcblxyXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5hcHBlbmQodGhpcy4kcGF0aCk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkUm9vdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRJdGVtKGZhbHNlLCB0aGlzLmxhbmcucGFyc2UodGhpcy5vcHRzLnBhdGgudGl0bGUpKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRBY3RpdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJHBhdGguZmluZCgnYScpLnJlbW92ZUNsYXNzKHRoaXMuYWN0aXZlQ2xhc3MpLmxhc3QoKS5hZGRDbGFzcyh0aGlzLmFjdGl2ZUNsYXNzKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRJdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICBpZiAoIWN1cnJlbnQpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gcGFyZW50c1xyXG4gICAgICAgIHZhciAkcGFyZW50cyA9IGN1cnJlbnQuZ2V0QmxvY2soKS5wYXJlbnRzKCdbZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGVdJyk7XHJcbiAgICAgICAgJHBhcmVudHMubm9kZXMucmV2ZXJzZSgpO1xyXG4gICAgICAgICRwYXJlbnRzLmVhY2godGhpcy5fYnVpbGRQYXJlbnRJdGVtLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAvLyBjdXJyZW50XHJcbiAgICAgICAgdGhpcy5fYnVpbGRJdGVtKGN1cnJlbnQpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZFBhcmVudEl0ZW06IGZ1bmN0aW9uKCRlbCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICRlbC5kYXRhZ2V0KCdpbnN0YW5jZScpO1xyXG5cclxuICAgICAgICB0aGlzLl9idWlsZEl0ZW0oaW5zdGFuY2UpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZE11bHRpcGxlSXRlbTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRpdGVtID0gdGhpcy5fY3JlYXRlSXRlbSgpO1xyXG4gICAgICAgICRpdGVtLmFkZENsYXNzKHRoaXMuYWN0aXZlQ2xhc3MpO1xyXG5cclxuICAgICAgICB0aGlzLl9idWlsZFRpdGxlKCRpdGVtLCB0aGlzLmxhbmcuZ2V0KCdlZGl0b3IubXVsdGlwbGUnKSk7XHJcbiAgICAgICAgdGhpcy4kcGF0aC5hcHBlbmQoJGl0ZW0pO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEl0ZW06IGZ1bmN0aW9uKGluc3RhbmNlLCByb290KSB7XHJcbiAgICAgICAgdmFyICRpdGVtID0gdGhpcy5fY3JlYXRlSXRlbSgpO1xyXG4gICAgICAgICRpdGVtLmRhdGFzZXQoJ2luc3RhbmNlJywgaW5zdGFuY2UpO1xyXG4gICAgICAgICRpdGVtLm9uKCdjbGljay4nICsgdGhpcy5wcmVmaXggKyAnLXBhdGgtJyArIHRoaXMudXVpZCwgdGhpcy5fc2VsZWN0SXRlbS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYnVpbGRUaXRsZSgkaXRlbSwgcm9vdCB8fCBpbnN0YW5jZS5nZXRUaXRsZSgpKTtcclxuICAgICAgICB0aGlzLiRwYXRoLmFwcGVuZCgkaXRlbSk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkVGl0bGU6IGZ1bmN0aW9uKCRpdGVtLCB0aXRsZSkge1xyXG4gICAgICAgIHZhciAkdGl0bGUgPSB0aGlzLmRvbSgnPHNwYW4+JykuaHRtbCh0aXRsZSk7XHJcbiAgICAgICAgJGl0ZW0uYXBwZW5kKCR0aXRsZSk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ3RvcGJhcicsIHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlQ2xhc3MgPSAnYWN0aXZlJztcclxuICAgICAgICB0aGlzLnRvZ2dsZWRDbGFzcyA9ICdkaXNhYmxlJztcclxuICAgICAgICB0aGlzLmRpc2FibGVDbGFzcyA9ICdkaXNhYmxlJztcclxuICAgICAgICB0aGlzLmN1c3RvbUJ1dHRvbnMgPSB7fTtcclxuICAgIH0sXHJcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1RvcGJhcigpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuX2J1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRCdXR0b25zKCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0OiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmRCdXR0b24obmFtZSk7XHJcbiAgICB9LFxyXG4gICAgYWRkOiBmdW5jdGlvbihuYW1lLCBvYmopIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUJ1dHRvbnNbbmFtZV0gPSBvYmo7XHJcbiAgICB9LFxyXG4gICAgc2V0VG9nZ2xlZDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNUb3BiYXIoKSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX2ZpbmRCdXR0b25zKCkucmVtb3ZlQ2xhc3ModGhpcy50b2dnbGVkQ2xhc3MpO1xyXG4gICAgICAgIHRoaXMuX2ZpbmRCdXR0b24obmFtZSkuYWRkQ2xhc3ModGhpcy50b2dnbGVkQ2xhc3MpO1xyXG4gICAgfSxcclxuICAgIHVuc2V0VG9nZ2xlZDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5faXNUb3BiYXIoKSkgcmV0dXJuO1xyXG4gICAgICAgIHZhciAkZWxtcyA9IChuYW1lKT8gdGhpcy5fZmluZEJ1dHRvbihuYW1lKSA6IHRoaXMuX2ZpbmRCdXR0b25zKCk7XHJcbiAgICAgICAgJGVsbXMucmVtb3ZlQ2xhc3ModGhpcy50b2dnbGVkQ2xhc3MpO1xyXG4gICAgfSxcclxuICAgIGVuYWJsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1RvcGJhcigpKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fZmluZEJ1dHRvbnMoKS5yZW1vdmVDbGFzcyh0aGlzLmRpc2FibGVDbGFzcyk7XHJcbiAgICB9LFxyXG4gICAgZGlzYWJsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1RvcGJhcigpKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fZmluZEJ1dHRvbnMoKS5yZW1vdmVDbGFzcyh0aGlzLnRvZ2dsZWRDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5hY3RpdmVDbGFzcykuYWRkQ2xhc3ModGhpcy5kaXNhYmxlQ2xhc3MpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfaXNUb3BiYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdHMucGF0aDtcclxuICAgIH0sXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJHRvcGJhciA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy10b3BiYXInKTtcclxuICAgICAgICB0aGlzLmFwcC5jb250YWluZXIuZ2V0KCdwYXRoYmFyJykuYXBwZW5kKHRoaXMuJHRvcGJhcik7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQnV0dG9uczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGJ1dHRvbnMgPSB0aGlzLm9wdHMuYnV0dG9ucy50b3BiYXI7XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBidXR0b25zKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAndW5kbycgJiYgIXRoaXMub3B0cy50b3BiYXIudW5kb3JlZG8pIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3JlZG8nICYmICF0aGlzLm9wdHMudG9wYmFyLnVuZG9yZWRvKSBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdzaG9ydGN1dCcgJiYgIXRoaXMub3B0cy50b3BiYXIuc2hvcnRjdXRzKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmNyZWF0ZSgnYnV0dG9uJywgbmFtZSwgYnV0dG9uc1tuYW1lXSwgdGhpcy4kdG9wYmFyLCAndG9wYmFyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9maW5kQnV0dG9uczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHRvcGJhci5maW5kKCcuJyArIHRoaXMucHJlZml4ICsgJy1idXR0b24tdG9wYmFyJyk7XHJcbiAgICB9LFxyXG4gICAgX2ZpbmRCdXR0b246IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kdG9wYmFyLmZpbmQoJ1tkYXRhLW5hbWU9JyArIG5hbWUgKyAnXScpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdjb250cm9sJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY3VzdG9tQnV0dG9ucyA9IHt9O1xyXG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gdGhpcy5wcmVmaXggKyAnLWNvbnRyb2wnO1xyXG4gICAgfSxcclxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5jb250cm9sKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fYnVpbGQoKTtcclxuICAgIH0sXHJcbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRjb250cm9sLnJlbW92ZSgpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmN1c3RvbUJ1dHRvbnMgPSB7fTtcclxuICAgIH0sXHJcbiAgICBpc09wZW46IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy4kY29udHJvbC5jc3MoJ2Rpc3BsYXknKSAhPT0gJ25vbmUnKTtcclxuICAgIH0sXHJcbiAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kY29udHJvbDtcclxuICAgIH0sXHJcbiAgICBnZXQ6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZmluZEJ1dHRvbihuYW1lKTtcclxuICAgIH0sXHJcbiAgICBhZGQ6IGZ1bmN0aW9uKG5hbWUsIG9iaikge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tQnV0dG9uc1tuYW1lXSA9IG9iajtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICB0aGlzLl9maW5kQnV0dG9uKG5hbWUpLnJlbW92ZSgpO1xyXG4gICAgfSxcclxuICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5jb250cm9sKSByZXR1cm47XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9wZW4oaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBvcGVuOiBmdW5jdGlvbihpbnN0YW5jZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmNvbnRyb2wpIHJldHVybjtcclxuICAgICAgICB0aGlzLiRjb250cm9sLmh0bWwoJycpO1xyXG5cclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuX2J1aWxkQnV0dG9ucygpO1xyXG5cclxuICAgICAgICBpZiAobGVuID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgJHNjcm9sbFRhcmdldCA9IHRoaXMuYXBwLnNjcm9sbC5nZXRUYXJnZXQoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcclxuICAgICAgICAgICAgJHNjcm9sbFRhcmdldC5vbigncmVzaXplLicgKyB0aGlzLmV2ZW50TmFtZSwgdGhpcy51cGRhdGVQb3NpdGlvbi5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgJHNjcm9sbFRhcmdldC5vbignc2Nyb2xsLicgKyB0aGlzLmV2ZW50TmFtZSwgdGhpcy51cGRhdGVQb3NpdGlvbi5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmdldFdpbigpLm9uKCdzY3JvbGwuJyArIHRoaXMuZXZlbnROYW1lLCB0aGlzLnVwZGF0ZVBvc2l0aW9uLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmdldEJsb2NrKCkub24oJ2tleXVwLicgKyB0aGlzLmV2ZW50TmFtZSwgdGhpcy51cGRhdGVQb3NpdGlvbi5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmNvbnRyb2wpIHJldHVybjtcclxuICAgICAgICB0aGlzLiRjb250cm9sLmhpZGUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdmFyICRibG9jayA9IHRoaXMuaW5zdGFuY2UuZ2V0QmxvY2soKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuY29udGVudC51bmZpeExpc3RNYXJnaW4oJGJsb2NrKTtcclxuICAgICAgICAgICAgJGJsb2NrLm9mZignLicgKyB0aGlzLmV2ZW50TmFtZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcC5zY3JvbGwuZ2V0VGFyZ2V0KCkub2ZmKCcuJyArIHRoaXMuZXZlbnROYW1lKTtcclxuICAgICAgICB0aGlzLmFwcC5lZGl0b3IuZ2V0RG9jKCkub2ZmKCcuJyArIHRoaXMuZXZlbnROYW1lKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlUG9zaXRpb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmNvbnRyb2wpIHJldHVybjtcclxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaXNFZGl0YWJsZSA9IHRoaXMuaW5zdGFuY2UuaXNFZGl0YWJsZSgpO1xyXG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLmluc3RhbmNlLmdldE9mZnNldCgpO1xyXG4gICAgICAgIHZhciB3aWR0aCA9IHRoaXMuJGNvbnRyb2wud2lkdGgoKTtcclxuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5hcHAuZWRpdG9yLmdldFdpbigpLnNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHZhciB0b3BPdXRsaW5lRml4ID0gKGlzRWRpdGFibGUpID8gNCA6IDI7XHJcbiAgICAgICAgdmFyIGxlZnRPdXRsaW5lRml4ID0gKGlzRWRpdGFibGUpID8gNiA6IDQ7XHJcbiAgICAgICAgdmFyIHRvcCA9IChvZmZzZXQudG9wIC0gdG9wT3V0bGluZUZpeCAtIHNjcm9sbFRvcCk7XHJcbiAgICAgICAgdmFyIGxlZnQgPSAob2Zmc2V0LmxlZnQgLSB3aWR0aCAtIGxlZnRPdXRsaW5lRml4KTtcclxuICAgICAgICB2YXIgJGNvbnRhaW5lciA9IHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ3Rvb2xiYXInKTtcclxuICAgICAgICB2YXIgdG9vbGJhckJvdHRvbSA9ICgkY29udGFpbmVyLm9mZnNldCgpLnRvcCArICRjb250YWluZXIuaGVpZ2h0KCkpIC0gdG9wT3V0bGluZUZpeDtcclxuICAgICAgICB2YXIgZnJhbWVSZWN0ID0gdGhpcy5hcHAuZWRpdG9yLmdldEZyYW1lUmVjdCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS5nZXRUeXBlKCkgPT09ICdsaXN0Jykge1xyXG4gICAgICAgICAgICB2YXIgJGJsb2NrID0gdGhpcy5pbnN0YW5jZS5nZXRCbG9jaygpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5jb250ZW50LmZpeExpc3RNYXJnaW4oJGJsb2NrKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0b3AgPCB0b29sYmFyQm90dG9tIHx8IGZyYW1lUmVjdC5ib3R0b20gPCB0b3ApIHtcclxuICAgICAgICAgICAgdGhpcy4kY29udHJvbC5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLiRjb250cm9sLnNob3coKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyBzY3JvbGwgdGFyZ2V0IGJvdHRvbSBoaWRlXHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLnNjcm9sbC5pc1RhcmdldCgpKSB7XHJcbiAgICAgICAgICAgIHZhciAkdGFyZ2V0ID0gdGhpcy5hcHAuc2Nyb2xsLmdldFRhcmdldCgpO1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0Qm90dG9tID0gJHRhcmdldC5vZmZzZXQoKS50b3AgKyAkdGFyZ2V0LmhlaWdodCgpO1xyXG4gICAgICAgICAgICB2YXIgYm90dG9tID0gdG9wICsgdGhpcy4kY29udHJvbC5oZWlnaHQoKTtcclxuICAgICAgICAgICAgaWYgKGJvdHRvbSA+IHRhcmdldEJvdHRvbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kY29udHJvbC5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxlZnQgb3V0IG9mIGVkZ2VcclxuICAgICAgICBpZiAoIWlzRWRpdGFibGUgJiYgKGxlZnQgKyB3aWR0aC8yKSA8IGZyYW1lUmVjdC5sZWZ0KSB7XHJcbiAgICAgICAgICAgIGxlZnQgPSBmcmFtZVJlY3QubGVmdCArIDM7XHJcbiAgICAgICAgICAgIHRvcCA9IHRvcCArIDY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwb3NpdGlvblxyXG4gICAgICAgIHRoaXMuJGNvbnRyb2wuY3NzKHtcclxuICAgICAgICAgICAgdG9wOiB0b3AgKyAncHgnLFxyXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0ICsgJ3B4J1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRCdXR0b25zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgYnV0dG9ucyA9IHRoaXMuaW5zdGFuY2UuY29udHJvbDtcclxuICAgICAgICB2YXIgY291bnQgPSAwO1xyXG5cclxuICAgICAgICBjb3VudCA9IHRoaXMuX2NyZWF0ZUJ1dHRvbnMoYnV0dG9ucywgY291bnQpO1xyXG4gICAgICAgIGNvdW50ID0gdGhpcy5fY3JlYXRlQnV0dG9ucyh0aGlzLmN1c3RvbUJ1dHRvbnMsIGNvdW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvdW50O1xyXG4gICAgfSxcclxuICAgIF9idWlsZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kY29udHJvbCA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1jb250cm9sICcgKyB0aGlzLnByZWZpeCArICctY29udHJvbC0nICsgdGhpcy51dWlkKS5oaWRlKCk7XHJcblxyXG4gICAgICAgIC8vIGJzIG1vZGFsXHJcbiAgICAgICAgaWYgKHRoaXMub3B0cy5ic21vZGFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGNvbnRyb2wuY3NzKCd6LWluZGV4JywgMTA1MSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcC4kYm9keS5hcHBlbmQodGhpcy4kY29udHJvbCk7XHJcbiAgICB9LFxyXG4gICAgX2NyZWF0ZUJ1dHRvbnM6IGZ1bmN0aW9uKGJ1dHRvbnMsIGNvdW50KSB7XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBidXR0b25zKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pbnN0YW5jZS5pc0FsbG93ZWRCdXR0b24obmFtZSwgYnV0dG9uc1tuYW1lXSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hcHAuY3JlYXRlKCdidXR0b24nLCBuYW1lLCBidXR0b25zW25hbWVdLCB0aGlzLiRjb250cm9sLCAnY29udHJvbCcpO1xyXG4gICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvdW50O1xyXG4gICAgfSxcclxuICAgIF9maW5kQnV0dG9uOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRyb2wuZmluZCgnW2RhdGEtbmFtZT0nICsgbmFtZSArICddJyk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ2NsZWFuZXInLCB7XHJcbiAgICBjbGVhbkh0bWw6IGZ1bmN0aW9uKGh0bWwpIHtcclxuXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmJyb2FkY2FzdEh0bWwoJ2VkaXRvci5iZWZvcmUuY2xlYW4nLCBodG1sKTtcclxuXHJcbiAgICAgICAgLy8gbG9jYWxcclxuICAgICAgICB2YXIgZXhjZXB0ZWRUYWdzID0gdGhpcy5vcHRzLnBhc3RlLmJsb2NrVGFncy5jb25jYXQodGhpcy5vcHRzLnBhc3RlLmlubGluZVRhZ3MpLmNvbmNhdCh0aGlzLm9wdHMucGFzdGUuZm9ybVRhZ3MpO1xyXG4gICAgICAgIHZhciBmaWx0ZXJTdHlsZSA9ICh0aGlzLm9wdHMucGFzdGUua2VlcFN0eWxlLmxlbmd0aCAhPT0gMCkgPyAnLCcgKyB0aGlzLm9wdHMucGFzdGUua2VlcFN0eWxlLmpvaW4oJywnKSA6ICcnO1xyXG5cclxuICAgICAgICAvLyBnZG9jcyAmIHdvcmRcclxuICAgICAgICB2YXIgaXNQYWdlcyA9IHRoaXMuX2lzUGFnZXMoaHRtbCk7XHJcbiAgICAgICAgdmFyIGlzTXNXb3JkID0gdGhpcy5faXNIdG1sTXNXb3JkKGh0bWwpO1xyXG5cclxuICAgICAgICAvLyByZW1vdmUgZG9jdHlwZSB0YWdcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZW1vdmVEb2N0eXBlKGh0bWwpO1xyXG5cclxuICAgICAgICAvLyByZW1vdmUgZGVuaWVkIHRhZ3NcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZW1vdmVUYWdzKGh0bWwsIHRoaXMub3B0cy50YWdzLmRlbmllZCk7XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBjb21tZW50c1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlbW92ZUNvbW1lbnRzKGh0bWwpO1xyXG5cclxuICAgICAgICAvLyByZW1vdmUgc3R5bGUgJiBzY3JpcHQgdGFnXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQucmVtb3ZlVGFnc1dpdGhDb250ZW50KGh0bWwsIFsnc2NyaXB0JywgJ3N0eWxlJ10pO1xyXG5cclxuICAgICAgICAvLyBjbGVhbiBwYWdlc1xyXG4gICAgICAgIGh0bWwgPSAoaXNQYWdlcykgPyB0aGlzLl9jbGVhblBhZ2VzKGh0bWwpIDogaHRtbDtcclxuXHJcbiAgICAgICAgLy8gY2xlYW4gZ2RvY3NcclxuICAgICAgICBodG1sID0gdGhpcy5fY2xlYW5HRG9jcyhodG1sKTtcclxuXHJcbiAgICAgICAgLy8gZW5jb2RlIHBocCBjb2RlXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuX2VuY29kZVBocChodG1sKTtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIHRhZ3NcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZW1vdmVUYWdzRXhjZXB0KGh0bWwsIGV4Y2VwdGVkVGFncyk7XHJcblxyXG4gICAgICAgIC8vIGNsZWFuIG1zIHdvcmRcclxuICAgICAgICBodG1sID0gKGlzTXNXb3JkKSA/IHRoaXMuX2NsZWFuTXNXb3JkKGh0bWwpIDogaHRtbDtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIHN0eWxlXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQucmVtb3ZlU3R5bGVBdHRyKGh0bWwsIGZpbHRlclN0eWxlKTtcclxuXHJcbiAgICAgICAgLy8gcmVzdG9yZSBkYXRhIHN0eWxlXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLmNvbnRlbnQuY2FjaGVTdHlsZShodG1sKTtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIGVtcHR5IGlubGluZVxyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnJlbW92ZUVtcHR5SW5saW5lcyhodG1sKTtcclxuXHJcbiAgICAgICAgLy8gY2xlYW4gZW1wdHkgcFxyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxwPiZuYnNwOzxcXC9wPi9naSwgJzxwPjwvcD4nKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88cD48YnJcXHM/XFwvPz48XFwvcD4vZ2ksICc8cD48L3A+Jyk7XHJcblxyXG4gICAgICAgIC8vIGdtYWlsIGxpc3QgcGFzdGVcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC9ePGxpL2dpLCAnPHVsPjxsaScpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxcXC9saT4kL2dpLCAnPC9saT48L3VsPicpO1xyXG5cclxuICAgICAgICBpZiAoaXNNc1dvcmQpIHtcclxuICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPHA+PFxcL3A+L2dpLCAnJyk7XHJcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxwPlxcczxcXC9wPi9naSwgJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdGlkeSBsaXN0c1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcblxyXG4gICAgICAgICAgICAvLyBwbGFjZSB1bC9vbCBpbnRvIGxpXHJcbiAgICAgICAgICAgICR3LmZpbmQoJ3VsLCBvbCcpLmVhY2godGhpcy5fcGxhY2VMaXN0VG9JdGVtLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVtb3ZlIHAgaW4gbGlcclxuICAgICAgICAgICAgJHcuZmluZCgnbGkgcCcpLnVud3JhcCgpO1xyXG5cclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG5cclxuXHJcbiAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLmJyb2FkY2FzdEh0bWwoJ2VkaXRvci5jbGVhbicsIGh0bWwpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2VuY29kZVBocDogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoJzw/cGhwJywgJyZsdDs/cGhwJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgnPD8nLCAnJmx0Oz8nKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKCc/PicsICc/Jmd0OycpO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcbiAgICBfaXNIdG1sTXNXb3JkOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIGh0bWwubWF0Y2goL2NsYXNzPVwiP01zb3xzdHlsZT1cIlteXCJdKlxcYm1zby18c3R5bGU9J1teJyddKlxcYm1zby18dzpXb3JkRG9jdW1lbnQvaSk7XHJcbiAgICB9LFxyXG4gICAgX2lzUGFnZXM6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICByZXR1cm4gaHRtbC5tYXRjaCgvbmFtZT1cIkdlbmVyYXRvclwiXFxzY29udGVudD1cIkNvY29hXFxzSFRNTFxcc1dyaXRlclwiL2kpO1xyXG4gICAgfSxcclxuICAgIF9wbGFjZUxpc3RUb0l0ZW06IGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSAkbm9kZS5nZXQoKTtcclxuICAgICAgICB2YXIgcHJldiA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgIGlmIChwcmV2ICYmIHByZXYudGFnTmFtZSA9PT0gJ0xJJykge1xyXG4gICAgICAgICAgICB2YXIgJGxpID0gdGhpcy5kb20ocHJldik7XHJcbiAgICAgICAgICAgICRsaS5maW5kKCdwJykudW53cmFwKCk7XHJcbiAgICAgICAgICAgICRsaS5hcHBlbmQobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9jbGVhblBhZ2VzOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvXFxzY2xhc3M9XCJzWzAtOV1cIi9naSwgJycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoL1xcc2NsYXNzPVwicFswLTldXCIvZ2ksICcnKTtcclxuXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgJHcuZmluZCgnLkFwcGxlLWNvbnZlcnRlZC1zcGFjZScpLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcbiAgICBfY2xlYW5HRG9jczogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxiXFxzaWQ9XCJpbnRlcm5hbC1zb3VyY2UtbWFya2VyKC4qPylcIj4oW1xcd1xcV10qPyk8XFwvYj4vZ2ksIFwiJDJcIik7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPGIoLio/KWlkPVwiZG9jcy1pbnRlcm5hbC1ndWlkKC4qPylcIj4oW1xcd1xcV10qPyk8XFwvYj4vZ2ksIFwiJDNcIik7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPHNwYW5bXj5dKihmb250LXN0eWxlOlxccz9pdGFsaWM7XFxzP2ZvbnQtd2VpZ2h0Olxccz9ib2xkfGZvbnQtd2VpZ2h0Olxccz9ib2xkO1xccz9mb250LXN0eWxlOlxccz9pdGFsaWMpW14+XSo+KFtcXHdcXFddKj8pPFxcL3NwYW4+L2dpLCAnPGI+PGk+JDI8L2k+PC9iPicpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxzcGFuW14+XSooZm9udC1zdHlsZTpcXHM/aXRhbGljO1xccz9mb250LXdlaWdodDpcXHM/NjAwfGZvbnQtd2VpZ2h0Olxccz82MDA7XFxzP2ZvbnQtc3R5bGU6XFxzP2l0YWxpYylbXj5dKj4oW1xcd1xcV10qPyk8XFwvc3Bhbj4vZ2ksICc8Yj48aT4kMjwvaT48L2I+Jyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPHNwYW5bXj5dKihmb250LXN0eWxlOlxccz9pdGFsaWM7XFxzP2ZvbnQtd2VpZ2h0Olxccz83MDB8Zm9udC13ZWlnaHQ6XFxzPzcwMDtcXHM/Zm9udC1zdHlsZTpcXHM/aXRhbGljKVtePl0qPihbXFx3XFxXXSo/KTxcXC9zcGFuPi9naSwgJzxiPjxpPiQyPC9pPjwvYj4nKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88c3BhbltePl0qZm9udC1zdHlsZTpcXHM/aXRhbGljW14+XSo+KFtcXHdcXFddKj8pPFxcL3NwYW4+L2dpLCAnPGk+JDE8L2k+Jyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPHNwYW5bXj5dKmZvbnQtd2VpZ2h0Olxccz8oYm9sZHw2MDB8NzAwKVtePl0qPihbXFx3XFxXXSo/KTxcXC9zcGFuPi9naSwgJzxiPiQyPC9iPicpO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcbiAgICBfY2xlYW5Nc1dvcmQ6IGZ1bmN0aW9uKGh0bWwpIHtcclxuXHJcbiAgICAgICAgLy8gY29tbWVudHNcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88IS0tW1xcc1xcU10rPy0tPi9naSwgJycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnRyaW0oKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88KCF8c2NyaXB0W14+XSo+Lio/PFxcL3NjcmlwdCg/PVs+XFxzXSl8XFwvPyhcXD94bWwoOlxcdyspP3xpbWd8bWV0YXxsaW5rfHN0eWxlfFxcdzpcXHcrKSg/PVtcXHMvPl0pKVtePl0qPi9naSwgJycpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzwoXFwvPylzPi9naSwgXCI8JDFzdHJpa2U+XCIpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLyZuYnNwOy9naSwgJyAnKTtcclxuICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKC88c3BhblxccytzdHlsZVxccyo9XFxzKlwiXFxzKm1zby1zcGFjZXJ1blxccyo6XFxzKnllc1xccyo7P1xccypcIlxccyo+KFtcXHNcXHUwMGEwXSopPFxcL3NwYW4+L2dpLCBmdW5jdGlvbihzdHIsIHNwYWNlcykge1xyXG4gICAgICAgICAgICByZXR1cm4gKHNwYWNlcy5sZW5ndGggPiAwKSA/IHNwYWNlcy5yZXBsYWNlKC8uLywgXCIgXCIpLnNsaWNlKE1hdGguZmxvb3Ioc3BhY2VzLmxlbmd0aC8yKSkuc3BsaXQoXCJcIikuam9pbihcIlxcdTAwYTBcIikgOiAnJztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnV0aWxzLndyYXAoaHRtbCwgZnVuY3Rpb24oJHcpIHtcclxuICAgICAgICAgICAgLy8gYnVpbGQgbGlzdHNcclxuICAgICAgICAgICAgJHcuZmluZCgncCcpLmVhY2goZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gL21zby1saXN0OlxcdysgXFx3KyhbMC05XSspLy5leGVjKCRub2RlLmF0dHIoJ3N0eWxlJykpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbm9kZS5hdHRyKCdkYXRhLWxpc3RMZXZlbCcsICBwYXJzZUludChtYXRjaGVzWzFdLCAxMCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHBhcnNlIExpc3RzXHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlV29yZExpc3RzKCR3KTtcclxuXHJcbiAgICAgICAgICAgICR3LmZpbmQoJ1thbGlnbl0nKS5yZW1vdmVBdHRyKCdhbGlnbicpO1xyXG4gICAgICAgICAgICAkdy5maW5kKCdbbmFtZV0nKS5yZW1vdmVBdHRyKCduYW1lJyk7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJ3NwYW4nKS5lYWNoKGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RyID0gJG5vZGUuYXR0cignc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gL21zby1saXN0Oklnbm9yZS8uZXhlYyhzdHIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMpICRub2RlLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSAkbm9kZS51bndyYXAoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJ1tzdHlsZV0nKS5yZW1vdmVBdHRyKCdzdHlsZScpO1xyXG4gICAgICAgICAgICAkdy5maW5kKFwiW2NsYXNzXj0nTXNvJ11cIikucmVtb3ZlQXR0cignY2xhc3MnKTtcclxuICAgICAgICAgICAgJHcuZmluZCgnYScpLmZpbHRlcihmdW5jdGlvbigkbm9kZSkgeyByZXR1cm4gISRub2RlLmF0dHIoJ2hyZWYnKTsgfSkudW53cmFwKCk7XHJcblxyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoLzxwW14+XSo+PFxcL3A+L2dpLCAnJyk7XHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPGxpPsK3L2dpLCAnPGxpPicpO1xyXG4gICAgICAgIGh0bWwgPSBodG1sLnRyaW0oKTtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIHNwYWNlcyBiZXR3ZWVuXHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvXFwvKHB8dWx8b2x8aDF8aDJ8aDN8aDR8aDV8aDZ8YmxvY2txdW90ZSk+XFxzKzwocHx1bHxvbHxoMXxoMnxoM3xoNHxoNXxoNnxibG9ja3F1b3RlKS9naSwgJy8kMT5cXG48JDInKTtcclxuXHJcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xyXG4gICAgICAgIHZhciBsaW5lcyA9IGh0bWwuc3BsaXQoL1xcbi8pO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHNwYWNlID0gKGxpbmVzW2ldICE9PSAnJyAmJiBsaW5lc1tpXS5zZWFyY2goLz4kLykgPT09IC0xKSA/ICcgJyA6ICdcXG4nO1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gbGluZXNbaV0gKyBzcGFjZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC50cmltKCk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG4gICAgX3BhcnNlV29yZExpc3RzOiBmdW5jdGlvbigkdykge1xyXG4gICAgICAgIHZhciBsYXN0TGV2ZWwgPSAwO1xyXG4gICAgICAgIHZhciAkaXRlbSA9IG51bGw7XHJcbiAgICAgICAgdmFyICRsaXN0ID0gbnVsbDtcclxuICAgICAgICB2YXIgJGxpc3RDaGlsZCA9IG51bGw7XHJcblxyXG4gICAgICAgICR3LmZpbmQoJ3AnKS5lYWNoKGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgICAgIHZhciBsZXZlbCA9ICRub2RlLmF0dHIoJ2RhdGEtbGlzdExldmVsJyk7XHJcbiAgICAgICAgICAgIGlmIChsZXZlbCA9PT0gbnVsbCAmJiAkbm9kZS5oYXNDbGFzcygnTXNvTGlzdFBhcmFncmFwaEN4U3BNaWRkbGUnKSkge1xyXG4gICAgICAgICAgICAgICAgbGV2ZWwgPSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobGV2ZWwgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0eHQgPSAkbm9kZS50ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdFRhZyA9ICgvXlxccypcXHcrXFwuLy50ZXN0KHR4dCkpID8gJzxvbD48L29sPicgOiAnPHVsPjwvdWw+JztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBuZXcgcGFyZW50IGxpc3RcclxuICAgICAgICAgICAgICAgIGlmICgkbm9kZS5oYXNDbGFzcygnTXNvTGlzdFBhcmFncmFwaEN4U3BGaXJzdCcpIHx8ICRub2RlLmhhc0NsYXNzKCdNc29Ob3JtYWwnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRsaXN0ID0gdGhpcy5kb20obGlzdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJG5vZGUuYmVmb3JlKCRsaXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG5ldyBjaGlsZCBsaXN0XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsZXZlbCA+IGxhc3RMZXZlbCAmJiBsYXN0TGV2ZWwgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkbGlzdENoaWxkID0gdGhpcy5kb20obGlzdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGl0ZW0uYXBwZW5kKCRsaXN0Q2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICRsaXN0ID0gJGxpc3RDaGlsZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGxldmVsIHVwXHJcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPCBsYXN0TGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuID0gbGFzdExldmVsIC0gbGV2ZWwgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGxpc3QgPSAkbGlzdC5wYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGl0ZW1cclxuICAgICAgICAgICAgICAgICRub2RlLmZpbmQoJ3NwYW4nKS5maXJzdCgpLnVud3JhcCgpO1xyXG4gICAgICAgICAgICAgICAgJGl0ZW0gPSB0aGlzLmRvbSgnPGxpPicgKyAkbm9kZS5odG1sKCkudHJpbSgpICsgJzwvbGk+Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJGxpc3QgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAkbm9kZS5iZWZvcmUobGlzdFRhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGxpc3QgPSAkbm9kZS5wcmV2KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYXBwZW5kXHJcbiAgICAgICAgICAgICAgICAkbGlzdC5hcHBlbmQoJGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgJG5vZGUucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGFzdExldmVsID0gbGV2ZWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkbGlzdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBsYXN0TGV2ZWwgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnaW5zZXJ0aW9uJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fY2xlYXIoKTtcclxuICAgIH0sXHJcbiAgICBzdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy53aW4gPSB0aGlzLmFwcC5lZGl0b3IuZ2V0V2luTm9kZSgpO1xyXG4gICAgICAgIHRoaXMuZG9jID0gdGhpcy5hcHAuZWRpdG9yLmdldERvY05vZGUoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZ2V0XHJcbiAgICBnZXRGaXJzdEluc2VydGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnRlZC5pbnN0YW5jZXNbMF07XHJcbiAgICB9LFxyXG4gICAgZ2V0TGFzdEluc2VydGVkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbGVuID0gdGhpcy5pbnNlcnRlZC5pbnN0YW5jZXMubGVuZ3RoO1xyXG4gICAgICAgIHZhciBsYXN0ID0gdGhpcy5pbnNlcnRlZC5pbnN0YW5jZXNbbGVuLTFdO1xyXG4gICAgICAgIGlmIChsYXN0ICYmIGxhc3QuaXNJbmxpbmVCbG9jaygpKSB7XHJcbiAgICAgICAgICAgIGxhc3QgPSBsYXN0LmdldFBhcmVudCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGxhc3Q7XHJcbiAgICB9LFxyXG4gICAgZ2V0SW5zZXJ0ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluc2VydGVkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzZXRcclxuICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMuX2luc2VydChwYXJhbXMsICdzZXQnKTtcclxuXHJcbiAgICAgICAgdmFyIGluc2VydGVkID0gdGhpcy5nZXRJbnNlcnRlZCgpO1xyXG4gICAgICAgIHRoaXMuaW5zZXJ0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGluc2VydGVkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBpbnNlcnRcclxuICAgIGluc2VydENvbnRlbnQ6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMuX2luc2VydChwYXJhbXMsICdpbnNlcnQnKTtcclxuXHJcbiAgICAgICAgdmFyIGluc2VydGVkID0gdGhpcy5nZXRJbnNlcnRlZCgpO1xyXG4gICAgICAgIHRoaXMuaW5zZXJ0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGluc2VydGVkO1xyXG4gICAgfSxcclxuICAgIGluc2VydEVtcHR5QmxvY2s6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2luc2VydCh7IGh0bWw6IHRoaXMuYXBwLmJsb2NrLmNyZWF0ZUh0bWwoKSB9LCAnaW5zZXJ0Jyk7XHJcblxyXG4gICAgICAgIHZhciBpbnNlcnRlZCA9IHRoaXMuZ2V0SW5zZXJ0ZWQoKTtcclxuICAgICAgICB0aGlzLmluc2VydGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHJldHVybiBpbnNlcnRlZDtcclxuICAgIH0sXHJcbiAgICBpbnNlcnROZXdsaW5lOiBmdW5jdGlvbihjYXJldCwgZG91Ymxlbm9kZSkge1xyXG4gICAgICAgIHZhciBzdHIgPSAoZG91Ymxlbm9kZSkgPyAnXFxuXFxuJyA6ICdcXG4nO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zZXJ0RnJhZ21lbnQoeyBub2RlOiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIpIH0sIChjYXJldCkgPyBjYXJldCA6ICdhZnRlcicpO1xyXG4gICAgfSxcclxuICAgIGluc2VydFBvaW50OiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIHJhbmdlO1xyXG4gICAgICAgIHZhciBtYXJrZXIgPSB0aGlzLmFwcC51dGlscy5jcmVhdGVJbnZpc2libGVDaGFyKCk7XHJcbiAgICAgICAgdmFyIGRvYyA9IHRoaXMuYXBwLmVkaXRvci5nZXREb2NOb2RlKCk7XHJcbiAgICAgICAgdmFyIHggPSBlLmNsaWVudFgsIHkgPSBlLmNsaWVudFk7XHJcblxyXG4gICAgICAgIGlmIChkb2MuY2FyZXRQb3NpdGlvbkZyb21Qb2ludCkge1xyXG4gICAgICAgICAgICB2YXIgcG9zID0gZG9jLmNhcmV0UG9zaXRpb25Gcm9tUG9pbnQoeCwgeSk7XHJcbiAgICAgICAgICAgIHZhciBzZWwgPSBkb2MuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgIHJhbmdlID0gc2VsLmdldFJhbmdlQXQoMCk7XHJcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHBvcy5vZmZzZXROb2RlLCBwb3Mub2Zmc2V0KTtcclxuICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcbiAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUobWFya2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZG9jLmNhcmV0UmFuZ2VGcm9tUG9pbnQpIHtcclxuICAgICAgICAgICAgcmFuZ2UgPSBkb2MuY2FyZXRSYW5nZUZyb21Qb2ludCh4LCB5KTtcclxuICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShtYXJrZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KG1hcmtlciwgJ2FmdGVyJyk7XHJcbiAgICB9LFxyXG4gICAgaW5zZXJ0QnJlYWtsaW5lOiBmdW5jdGlvbihjYXJldCkge1xyXG4gICAgICAgIC8vIHNwbGl0IGlubGluZVxyXG4gICAgICAgIHZhciBpbmxpbmVzID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldE5vZGVzKHsgdHlwZTogJ2lubGluZScgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLnNlbGVjdGlvbi5pc0NvbGxhcHNlZCgpICYmIGlubGluZXMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zcGxpdElubGluZShpbmxpbmVzLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnNlcnRGcmFnbWVudCh7IG5vZGU6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJykgfSwgKGNhcmV0KSA/IGNhcmV0IDogJ2FmdGVyJyk7XHJcbiAgICB9LFxyXG4gICAgaW5zZXJ0Tm9kZTogZnVuY3Rpb24obm9kZSwgY2FyZXQsIHNwbGl0aW5saW5lKSB7XHJcbiAgICAgICAgaWYgKHNwbGl0aW5saW5lKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmxpbmVzID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldE5vZGVzKHsgdHlwZTogJ2lubGluZScgfSk7XHJcbiAgICAgICAgICAgIGlmIChpbmxpbmVzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NwbGl0SW5saW5lKGlubGluZXMsIG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zZXJ0RnJhZ21lbnQoeyBub2RlOiB0aGlzLmRvbShub2RlKS5nZXQoKSB9LCBjYXJldCk7XHJcbiAgICB9LFxyXG4gICAgaW5zZXJ0SHRtbDogZnVuY3Rpb24oaHRtbCwgY2FyZXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW5zZXJ0RnJhZ21lbnQoeyBodG1sOiBodG1sIH0sIGNhcmV0KTtcclxuICAgIH0sXHJcbiAgICBpbnNlcnRUZXh0OiBmdW5jdGlvbih0ZXh0LCBjYXJldCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIGlmICgoaW5zdGFuY2UgJiYgIWluc3RhbmNlLmlzRWRpdGFibGUoKSkgfHwgdGhpcy5hcHAuYmxvY2tzLmlzKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnNlcnRDb250ZW50KHsgaHRtbDogdGV4dCwgY2FyZXQ6IGNhcmV0IH0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc2VsID0gdGhpcy53aW4uZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgdmFyIG5vZGU7XHJcbiAgICAgICAgaWYgKHNlbC5nZXRSYW5nZUF0ICYmIHNlbC5yYW5nZUNvdW50KSB7XHJcbiAgICAgICAgICAgIHRleHQgPSB0aGlzLmFwcC5jb250ZW50LmdldFRleHRGcm9tSHRtbCh0ZXh0LCB7IG5sOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCk7XHJcbiAgICAgICAgICAgIHZhciByYW5nZSA9IHNlbC5nZXRSYW5nZUF0KDApO1xyXG4gICAgICAgICAgICByYW5nZS5kZWxldGVDb250ZW50cygpO1xyXG4gICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKG5vZGUpO1xyXG5cclxuICAgICAgICAgICAgY2FyZXQgPSBjYXJldCB8fCAnZW5kJztcclxuICAgICAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KG5vZGUsIGNhcmV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfSxcclxuICAgIGluc2VydExpc3RUb0xpc3Q6IGZ1bmN0aW9uKCRsaXN0LCAkdGFyZ2V0LCBjYXJldCkge1xyXG4gICAgICAgIC8vIGFkZCBwYXN0ZSBtYXJrZXJcclxuICAgICAgICB2YXIgJGl0ZW1zID0gJGxpc3QuZmluZCgnbGknKTtcclxuICAgICAgICB2YXIgJGxhc3QgPSAkaXRlbXMubGFzdCgpO1xyXG4gICAgICAgICRpdGVtcy5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcGFzdGVpdGVtcycpO1xyXG4gICAgICAgICRsYXN0LmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wYXN0ZW1hcmtlcicpO1xyXG5cclxuICAgICAgICAvLyBidWlsZCBub2Rlc1xyXG4gICAgICAgIHZhciAkbm9kZXMgPSAkbGlzdC5jaGlsZHJlbigpO1xyXG5cclxuICAgICAgICAvLyBjdXJyZW50IGxpIGl0ZW1cclxuICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLmRvbSh0aGlzLmFwcC5zZWxlY3Rpb24uZ2V0QmxvY2soKSk7XHJcblxyXG4gICAgICAgIC8vIGNhcmV0IHBvc2l0aW9uXHJcbiAgICAgICAgdmFyIGlzU3RhcnQgPSB0aGlzLmFwcC5jYXJldC5pcygkdGFyZ2V0LCAnc3RhcnQnKTtcclxuICAgICAgICB2YXIgaXNFbmQgPSB0aGlzLmFwcC5jYXJldC5pcygkdGFyZ2V0LCAnZW5kJyk7XHJcbiAgICAgICAgdmFyIGlzU3RhcnRJdGVtID0gdGhpcy5hcHAuY2FyZXQuaXMoJGl0ZW0sICdzdGFydCcpO1xyXG4gICAgICAgIHZhciBpc0VuZEl0ZW0gPSB0aGlzLmFwcC5jYXJldC5pcygkaXRlbSwgJ2VuZCcsIFsndWwnLCAnb2wnXSk7XHJcblxyXG4gICAgICAgIC8vIHN0YXJ0XHJcbiAgICAgICAgaWYgKGlzU3RhcnQpIHtcclxuICAgICAgICAgICAgJHRhcmdldC5wcmVwZW5kKCRub2Rlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGVuZFxyXG4gICAgICAgIGVsc2UgaWYgKGlzRW5kKSB7XHJcbiAgICAgICAgICAgICR0YXJnZXQuYXBwZW5kKCRub2Rlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG1pZGRsZVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBpdGVtIGVtcHR5XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFwcC5jb250ZW50LmlzRW1wdHlIdG1sKCRpdGVtLmh0bWwoKSkpIHtcclxuICAgICAgICAgICAgICAgICRpdGVtLmFmdGVyKCRub2Rlcyk7XHJcbiAgICAgICAgICAgICAgICAkaXRlbS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpdGVtIGJlZm9yZVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1N0YXJ0SXRlbSkge1xyXG4gICAgICAgICAgICAgICAgJGl0ZW0uYmVmb3JlKCRub2Rlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaXRlbSBhZnRlclxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc0VuZEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciAkY2hpbGRMaXN0ID0gJGl0ZW0uZmluZCgndWwsIG9sJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJGNoaWxkTGlzdC5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkY2hpbGRMaXN0LnByZXBlbmQoJG5vZGVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRpdGVtLmFmdGVyKCRub2Rlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaXRlbSBtaWRkbGVcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5lbGVtZW50LnNwbGl0KCRpdGVtKS5iZWZvcmUoJG5vZGVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2V0IGNhcmV0XHJcbiAgICAgICAgdmFyIHBhc3RlbWFya2VyID0gdGhpcy5wcmVmaXggKyAnLXBhc3RlbWFya2VyJztcclxuICAgICAgICB2YXIgcGFzdGVpdGVtcyA9IHRoaXMucHJlZml4ICsgJy1wYXN0ZWl0ZW1zJztcclxuICAgICAgICBpZiAoY2FyZXQpIHtcclxuICAgICAgICAgICAgJGxhc3QgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCkuZmluZCgnLicgKyBwYXN0ZW1hcmtlcikucmVtb3ZlQ2xhc3MocGFzdGVtYXJrZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJGxhc3QsICdlbmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCkuZmluZCgnLicgKyBwYXN0ZWl0ZW1zKS5yZW1vdmVDbGFzcyhwYXN0ZWl0ZW1zKTtcclxuXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGRldGVjdFxyXG4gICAgZGV0ZWN0UG9zaXRpb246IGZ1bmN0aW9uKCR0YXJnZXQsIHBvc2l0aW9uKSB7XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uKSByZXR1cm4gcG9zaXRpb247XHJcblxyXG4gICAgICAgIC8vIGNhcmV0IHBvc2l0aW9uXHJcbiAgICAgICAgdmFyIGlzU3RhcnQgPSB0aGlzLmFwcC5jYXJldC5pcygkdGFyZ2V0LCAnc3RhcnQnKTtcclxuICAgICAgICB2YXIgaXNFbmQgPSB0aGlzLmFwcC5jYXJldC5pcygkdGFyZ2V0LCAnZW5kJyk7XHJcblxyXG4gICAgICAgIC8vIGVuZFxyXG4gICAgICAgIGlmIChpc0VuZCkge1xyXG4gICAgICAgICAgICBwb3NpdGlvbiA9ICdhZnRlcic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHN0YXJ0XHJcbiAgICAgICAgZWxzZSBpZiAoaXNTdGFydCkge1xyXG4gICAgICAgICAgICBwb3NpdGlvbiA9ICdiZWZvcmUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBtaWRkbGVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcG9zaXRpb24gPSAnc3BsaXQnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcblxyXG4gICAgLy8gaW5zZXJ0XHJcbiAgICBfaW5zZXJ0OiBmdW5jdGlvbihwYXJhbXMsIHR5cGUpIHtcclxuXHJcbiAgICAgICAgdGhpcy5odG1sID0gcGFyYW1zLmh0bWw7XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdCBiZWZvcmVcclxuICAgICAgICB0aGlzLmh0bWwgPSB0aGlzLmFwcC5icm9hZGNhc3RIdG1sKCdlZGl0b3IuYmVmb3JlLmluc2VydCcsIHRoaXMuaHRtbCk7XHJcblxyXG4gICAgICAgIC8vIHBhcmFtc1xyXG4gICAgICAgIHRoaXMuaXNQYXJzZSA9ICh0eXBlb2YgcGFyYW1zLnBhcnNlID09PSAndW5kZWZpbmVkJykgPyB0cnVlIDogcGFyYW1zLnBhcnNlO1xyXG4gICAgICAgIHRoaXMuaXNDbGVhbiA9ICh0eXBlb2YgcGFyYW1zLmNsZWFuID09PSAndW5kZWZpbmVkJykgPyBmYWxzZSA6IHBhcmFtcy5jbGVhbjtcclxuICAgICAgICB0aGlzLmlzQ2FyZXQgPSAodHlwZW9mIHBhcmFtcy5jYXJldCA9PT0gJ3VuZGVmaW5lZCcpID8gdHJ1ZSA6IHBhcmFtcy5jYXJldDtcclxuICAgICAgICB0aGlzLmlzUG9zaXRpb24gPSAodHlwZW9mIHBhcmFtcy5wb3NpdGlvbiA9PT0gJ3VuZGVmaW5lZCcpID8gZmFsc2UgOiBwYXJhbXMucG9zaXRpb247XHJcblxyXG4gICAgICAgIC8vIHR5cGVcclxuICAgICAgICBpZiAodHlwZSA9PT0gJ3NldCcgfHwgdGhpcy5hcHAuZWRpdG9yLmlzQWxsU2VsZWN0ZWQoKSkge1xyXG4gICAgICAgICAgICAvLyBzZXRcclxuICAgICAgICAgICAgdGhpcy5fc2V0Q29udGVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gaW5zZXJ0XHJcbiAgICAgICAgICAgIHRoaXMuX2luc2VydENvbnRlbnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnZWRpdG9yLmluc2VydCcsIHRoaXMuaW5zZXJ0ZWQpO1xyXG4gICAgfSxcclxuICAgIF9pbnNlcnRDb250ZW50OiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgcG9zaXRpb24gPSBmYWxzZTtcclxuICAgICAgICB2YXIgcmVtb3ZlID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIG5vZGVzLCAkYmxvY2s7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrXHJcbiAgICAgICAgdGhpcy5fY2hlY2tFbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuX2NoZWNrTGluZSgpO1xyXG5cclxuICAgICAgICAvLyBibG9ja3NcclxuICAgICAgICBpZiAodGhpcy5hcHAuYmxvY2tzLmlzKCkpIHtcclxuICAgICAgICAgICAgLy8gaW5zZXJ0IHRvIGJsb2Nrc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0xpbmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaHRtbCA9IHRoaXMuYXBwLmJsb2NrLmNyZWF0ZUh0bWwodGhpcy5odG1sKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gcGFyc2UgJiBjbGVhblxyXG4gICAgICAgICAgICB0aGlzLl9jbGVhbigpO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZUJ1aWxkKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBub2Rlc1xyXG4gICAgICAgICAgICBub2RlcyA9IHRoaXMuX2J1aWxkUGFyc2VkTm9kZXMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGluc2VydFxyXG4gICAgICAgICAgICB2YXIgbGFzdCA9IHRoaXMuYXBwLmJsb2Nrcy5nZXRMYXN0U2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgdmFyICRsYXN0ID0gbGFzdC5nZXRCbG9jaygpO1xyXG4gICAgICAgICAgICAkbGFzdC5hZnRlcihub2Rlcyk7XHJcblxyXG4gICAgICAgICAgICAvLyByZW1vdmVcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2tzLnJlbW92ZVNlbGVjdGVkKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbm90IHNlbGVjdGVkXHJcbiAgICAgICAgZWxzZSBpZiAoIWN1cnJlbnQgfHwgdGhpcy5pc1Bvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vIGluc2VydCB0byBibG9ja3NcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNMaW5lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmh0bWwgPSB0aGlzLmFwcC5ibG9jay5jcmVhdGVIdG1sKHRoaXMuaHRtbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHBhcnNlICYgY2xlYW5cclxuICAgICAgICAgICAgdGhpcy5fY2xlYW4oKTtcclxuICAgICAgICAgICAgdGhpcy5fcGFyc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5fcGFyc2VCdWlsZCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gbm9kZXNcclxuICAgICAgICAgICAgbm9kZXMgPSB0aGlzLl9idWlsZFBhcnNlZE5vZGVzKCk7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbnMgPSBbJ2FmdGVyJywgJ2JlZm9yZScsICdhcHBlbmQnXTtcclxuICAgICAgICAgICAgdmFyIGVtcHR5TGF5ZXIgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUG9zaXRpb24gPT09ICd0b3AnIHx8ICghdGhpcy5pc1Bvc2l0aW9uICYmIHRoaXMub3B0cy5lZGl0b3IuYWRkID09PSAndG9wJykpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLmFwcC5ibG9ja3MuZ2V0Rmlyc3QoKTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gJ2JlZm9yZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudCAmJiBwb3NpdGlvbnMuaW5kZXhPZih0aGlzLmlzUG9zaXRpb24pICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0aGlzLmlzUG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICBlbXB0eUxheWVyID0gKGN1cnJlbnQuZ2V0VHlwZSgnbGF5ZXInKSAmJiBjdXJyZW50LmlzRW1wdHkoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gdGhpcy5hcHAuYmxvY2tzLmdldExhc3QoKTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gJ2FmdGVyJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJGJsb2NrID0gY3VycmVudC5nZXRCbG9jaygpO1xyXG4gICAgICAgICAgICBpZiAoZW1wdHlMYXllcikge1xyXG4gICAgICAgICAgICAgICAgJGJsb2NrLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1lbXB0eS1sYXllcicpO1xyXG4gICAgICAgICAgICAgICAgJGJsb2NrLmh0bWwoJycpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkYmxvY2tbcG9zaXRpb25dKG5vZGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbGlzdCB0byBsaXN0XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5faXNMaXN0VG9MaXN0KGN1cnJlbnQpKSB7XHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSBzZWxlY3Rpb25cclxuICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLmRlbGV0ZUNvbnRlbnRzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBwYXJzZSAmIGNsZWFuXHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFuKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlQnVpbGQoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGluc2VydFxyXG4gICAgICAgICAgICAkYmxvY2sgPSBjdXJyZW50LmdldEJsb2NrKCk7XHJcbiAgICAgICAgICAgIHZhciAkbGlzdCA9IHRoaXMuJHBhcnNlZC5jaGlsZHJlbigpLmZpcnN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuJG5vZGVzID0gdGhpcy5pbnNlcnRMaXN0VG9MaXN0KCRsaXN0LCAkYmxvY2ssICdlbmQnKTtcclxuICAgICAgICAgICAgdGhpcy5pc0NhcmV0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnQpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGxpa2UgdmFyaWFibGVcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnQuaXNJbmxpbmVCbG9jaygpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gY3VycmVudC5nZXRQYXJlbnQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNhcmV0LnNldChjdXJyZW50LmdldEJsb2NrKCksICdhZnRlcicpO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQocGFyZW50KTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGVkaXRhYmxlXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50LmlzRWRpdGFibGUoKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcGFyc2UgJiBjbGVhblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYW4oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFuU3BlY2lhbCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTGluZSkgdGhpcy5fcGFyc2VMaW5lKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuX3BhcnNlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VCdWlsZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmlzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSAnYWZ0ZXInO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVsZXRlIHNlbGVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnNlbGVjdGlvbi5kZWxldGVDb250ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIG5vZGVzXHJcbiAgICAgICAgICAgICAgICBub2RlcyA9IHRoaXMuX2J1aWxkUGFyc2VkTm9kZXMoKTtcclxuICAgICAgICAgICAgICAgICRibG9jayA9IGN1cnJlbnQuZ2V0QmxvY2soKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnRcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luc2VydFRvRWRpdGFibGUoY3VycmVudCwgJGJsb2NrLCBub2RlcywgcG9zaXRpb24sIHJlbW92ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbm9uIGVkaXRhYmxlXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNldCBwb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSAnYWZ0ZXInO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNoZWNrXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0xpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmh0bWwgPSB0aGlzLmFwcC5ibG9jay5jcmVhdGVIdG1sKHRoaXMuaHRtbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcGFyc2UgJiBjbGVhblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYW4oKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0xpbmUpIHRoaXMuX3BhcnNlTGluZSgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLl9wYXJzZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhcnNlQnVpbGQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBub2Rlc1xyXG4gICAgICAgICAgICAgICAgbm9kZXMgPSB0aGlzLl9idWlsZFBhcnNlZE5vZGVzKCk7XHJcbiAgICAgICAgICAgICAgICAkYmxvY2sgPSBjdXJyZW50LmdldEJsb2NrKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZW1wdGlhYmxlIGVtcHR5XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5pc0VtcHRpYWJsZSgpICYmIGN1cnJlbnQuaXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGJsb2NrLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1lbXB0eS1sYXllcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICRibG9jay5odG1sKCcnKTtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICdhcHBlbmQnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGluc2VydFxyXG4gICAgICAgICAgICAgICAgJGJsb2NrW3Bvc2l0aW9uXShub2Rlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGluc2VydGVkXHJcbiAgICAgICAgdGhpcy5fYnVpbGRJbnNlcnRlZCgpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkQ2FyZXQoKTtcclxuICAgICAgICB0aGlzLl9idWlsZEVkaXRvcigpO1xyXG4gICAgfSxcclxuICAgIF9pbnNlcnRUb0VkaXRhYmxlOiBmdW5jdGlvbihjdXJyZW50LCAkYmxvY2ssIG5vZGVzLCBwb3NpdGlvbiwgcmVtb3ZlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNMaW5lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJG5vZGVzID0gdGhpcy5faW5zZXJ0RnJhZ21lbnQoeyBmcmFnbWVudDogdGhpcy4kcGFyc2VkLmdldCgpIH0sICdlbmQnKTtcclxuICAgICAgICAgICAgdGhpcy5pc0NhcmV0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBkZXRlY3QgcG9zaXRpb25cclxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwLmNvbnRlbnQuaXNFbXB0eUh0bWwoJGJsb2NrLmh0bWwoKSkpIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gJ2FmdGVyJztcclxuICAgICAgICAgICAgICAgIHJlbW92ZSA9IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdGhpcy5kZXRlY3RQb3NpdGlvbigkYmxvY2ssIHBvc2l0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaW5zZXJ0XHJcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3NwbGl0Jykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuZWxlbWVudC5zcGxpdCgkYmxvY2spLmJlZm9yZShub2Rlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkYmxvY2tbcG9zaXRpb25dKG5vZGVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gcmVtb3ZlXHJcbiAgICAgICAgICAgIGlmIChyZW1vdmUpIGN1cnJlbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9pbnNlcnRGcmFnbWVudDogZnVuY3Rpb24ob2JqLCBjYXJldCkge1xyXG4gICAgICAgIGlmIChvYmouaHRtbCB8fCBvYmouZnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gdGhpcy5hcHAuZnJhZ21lbnQuYnVpbGQob2JqLmh0bWwgfHwgb2JqLmZyYWdtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuZnJhZ21lbnQuaW5zZXJ0KGZyYWdtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmZyYWdtZW50Lmluc2VydChvYmoubm9kZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FyZXQpIHtcclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IChvYmoubm9kZSkgPyBvYmoubm9kZSA6ICgoY2FyZXQgPT09ICdzdGFydCcpID8gZnJhZ21lbnQuZmlyc3QgOiBmcmFnbWVudC5sYXN0KTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KHRhcmdldCwgY2FyZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9iai5ub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbShvYmoubm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb20oZnJhZ21lbnQubm9kZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gc2V0XHJcbiAgICBfc2V0Q29udGVudDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrXHJcbiAgICAgICAgdGhpcy5fY2hlY2tFbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuX2NoZWNrTGluZSgpO1xyXG5cclxuICAgICAgICAvLyBzZXQgdG8gZWRpdG9yXHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICB0aGlzLmh0bWwgPSB0aGlzLmFwcC5ibG9jay5jcmVhdGVIdG1sKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNMaW5lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaHRtbCA9IHRoaXMuYXBwLmJsb2NrLmNyZWF0ZUh0bWwodGhpcy5odG1sKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHBhcnNlICYgY2xlYW5cclxuICAgICAgICB0aGlzLl9jbGVhbigpO1xyXG4gICAgICAgIHRoaXMuX3BhcnNlKCk7XHJcbiAgICAgICAgdGhpcy5fcGFyc2VCdWlsZCgpO1xyXG5cclxuICAgICAgICAvLyBub2Rlc1xyXG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuX2J1aWxkUGFyc2VkTm9kZXMoKTtcclxuXHJcbiAgICAgICAgLy8gc2V0XHJcbiAgICAgICAgdGhpcy5hcHAuZWRpdG9yLnVuc2V0U2VsZWN0QWxsQ2xhc3MoKTtcclxuICAgICAgICB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCkuaHRtbCgnJykuYXBwZW5kKG5vZGVzKTtcclxuXHJcbiAgICAgICAgLy8gYnJvYWRjYXN0IGVtcHR5XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5lbXB0eScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaW5zZXJ0ZWRcclxuICAgICAgICB0aGlzLl9idWlsZEluc2VydGVkKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRDYXJldCgpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkRWRpdG9yKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHNwbGl0XHJcbiAgICBfc3BsaXRJbmxpbmU6IGZ1bmN0aW9uKGlubGluZXMsIG5vZGUpIHtcclxuICAgICAgICB2YXIgJHBhcnQgPSB0aGlzLmFwcC5lbGVtZW50LnNwbGl0KGlubGluZXNbMF0pO1xyXG4gICAgICAgICRwYXJ0LmJlZm9yZShub2RlKTtcclxuICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJHBhcnQsICdzdGFydCcpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5kb20obm9kZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGJ1aWxkXHJcbiAgICBfYnVpbGRFZGl0b3I6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci5idWlsZCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmVkaXRvci5zZXRGb2N1cygpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZENhcmV0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNDYXJldCkgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UsIGNhcmV0ID0gJ2VuZCc7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDYXJldCA9PT0gJ3N0YXJ0Jykge1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXMuZ2V0Rmlyc3RJbnNlcnRlZCgpO1xyXG4gICAgICAgICAgICBjYXJldCA9ICdzdGFydCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXMuZ2V0TGFzdEluc2VydGVkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzZXRcclxuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KGluc3RhbmNlLCBjYXJldCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB1aVxyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIub2JzZXJ2ZSgpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEluc2VydGVkOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdGhpcy5pbnNlcnRlZCA9IHtcclxuICAgICAgICAgICAgJG5vZGVzOiB0aGlzLiRub2RlcyxcclxuICAgICAgICAgICAgaW5zdGFuY2VzOiBbXVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB0aGlzLmluc2VydGVkLiRub2Rlcy5lYWNoKHRoaXMuX2J1aWxkSW5zdGFuY2UuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgfSxcclxuICAgIF9idWlsZEluc3RhbmNlOiBmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICRub2RlLmRhdGFnZXQoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0ZWQuaW5zdGFuY2VzLnB1c2goaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyICRub2RlcyA9ICRub2RlLmZpbmQoJ1tkYXRhLScgKyB0aGlzLnByZWZpeCArICctdHlwZV0nKTtcclxuICAgICAgICBpZiAoJG5vZGVzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAkbm9kZXMuZWFjaCh0aGlzLl9idWlsZEluc3RhbmNlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRQYXJzZWROb2RlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHBhcnNlZC5nZXQoKS5jaGlsZE5vZGVzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjbGVhclxyXG4gICAgX2NsZWFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmh0bWwgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzTGluZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNFbXB0eSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNTcGxpdCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNDbGVhbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNQYXJzZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pc0NhcmV0ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzUG9zaXRpb24gPSBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2xlYW5cclxuICAgIF9jbGVhbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDbGVhbikge1xyXG4gICAgICAgICAgICB0aGlzLmh0bWwgPSB0aGlzLmFwcC5jbGVhbmVyLmNsZWFuSHRtbCh0aGlzLmh0bWwpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfY2xlYW5TcGVjaWFsOiBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgdmFyIGNsZWFuLCBleHRlbmQsIGV4Y2VwdDtcclxuICAgICAgICBpZiAoWydjZWxsJywgJ2FkZHJlc3MnLCAnZmlnY2FwdGlvbicsICdxdW90ZWl0ZW0nXS5pbmRleE9mKHR5cGUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBjbGVhbiA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdkbGlzdCcpIHtcclxuICAgICAgICAgICAgY2xlYW4gPSB0cnVlO1xyXG4gICAgICAgICAgICBleGNlcHQgPSBbJ2R0JywgJ2RkJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdsaXN0Jykge1xyXG4gICAgICAgICAgICBjbGVhbiA9IHRydWU7XHJcbiAgICAgICAgICAgIGV4Y2VwdCA9IFsndWwnLCAnb2wnLCAnbGknXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjbGVhbikge1xyXG4gICAgICAgICAgICB0aGlzLmlzTGluZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmh0bWwgPSB0aGlzLmFwcC5jb250ZW50LmFkZEJyVG9CbG9ja3ModGhpcy5odG1sKTtcclxuICAgICAgICAgICAgdGhpcy5odG1sID0gdGhpcy5hcHAuY29udGVudC5yZW1vdmVCbG9ja1RhZ3ModGhpcy5odG1sLCBleHRlbmQsIGV4Y2VwdCk7XHJcbiAgICAgICAgICAgIHRoaXMuaHRtbCA9IHRoaXMuaHRtbC5yZXBsYWNlKC88YnJcXHM/XFwvPz5cXG4/JC9naSwgJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHBhcnNlXHJcbiAgICBfcGFyc2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUGFyc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5odG1sID0gdGhpcy5hcHAucGFyc2VyLnBhcnNlKHRoaXMuaHRtbCwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfcGFyc2VMaW5lOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1BhcnNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaHRtbCA9IHRoaXMuYXBwLnBhcnNlci5wYXJzZUxpbmUodGhpcy5odG1sLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9wYXJzZUJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRwYXJzZWQgPSB0aGlzLmFwcC5wYXJzZXIuYnVpbGQodGhpcy5odG1sKTtcclxuICAgICAgICB0aGlzLiRub2RlcyA9IHRoaXMuJHBhcnNlZC5jaGlsZHJlbigpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBjaGVja1xyXG4gICAgX2NoZWNrRW1wdHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuaXNFbXB0eSA9IHRoaXMuYXBwLmNvbnRlbnQuaXNFbXB0eUh0bWwodGhpcy5odG1sKTtcclxuICAgIH0sXHJcbiAgICBfY2hlY2tMaW5lOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmlzTGluZSA9IHRoaXMuYXBwLmNvbnRlbnQuaXNMaW5lKHRoaXMuaHRtbCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGlzXHJcbiAgICBfaXNMaXN0VG9MaXN0OiBmdW5jdGlvbihpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciAkdGFyZ2V0ID0gaW5zdGFuY2UuZ2V0QmxvY2soKTtcclxuICAgICAgICB2YXIgdHlwZSA9ICR0YXJnZXQuYXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGUnKTtcclxuICAgICAgICB2YXIgJGxpc3QgPSB0aGlzLmRvbSgnPGRpdj4nKS5odG1sKHRoaXMuaHRtbCkuY2hpbGRyZW4oKS5maXJzdCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gKHR5cGUgPT09ICdsaXN0JyAmJiAkbGlzdC5sZW5ndGggIT09IDAgJiYgWyd1bCcsICdvbCddLmluZGV4T2YoJGxpc3QuZ2V0KCkudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdmcmFnbWVudCcsIHtcclxuICAgIGJ1aWxkOiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmlzKG5vZGUpKSA/IG5vZGUgOiB0aGlzLmNyZWF0ZShub2RlKTtcclxuICAgIH0sXHJcbiAgICBpbnNlcnQ6IGZ1bmN0aW9uKGZyYWdtZW50KSB7XHJcbiAgICAgICAgdmFyIHNlbCA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXQoKTtcclxuICAgICAgICBpZiAoIXNlbC5yYW5nZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAoc2VsLmNvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBzZWwucmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgIGlmIChzdGFydC5ub2RlVHlwZSAhPT0gMyAmJiBzdGFydC50YWdOYW1lID09PSAnQlInKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0YXJ0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2VsLnJhbmdlLmRlbGV0ZUNvbnRlbnRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZnJhZ21lbnQuZnJhZykge1xyXG4gICAgICAgICAgICBzZWwucmFuZ2UuaW5zZXJ0Tm9kZShmcmFnbWVudC5mcmFnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbC5yYW5nZS5pbnNlcnROb2RlKGZyYWdtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlQ29udGFpbmVyOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgdmFyICRkaXYgPSB0aGlzLmRvbSgnPGRpdj4nKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBodG1sID09PSAnc3RyaW5nJykgJGRpdi5odG1sKGh0bWwpO1xyXG4gICAgICAgIGVsc2UgJGRpdi5hcHBlbmQodGhpcy5kb20oaHRtbCkuY2xvbmUodHJ1ZSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gJGRpdi5nZXQoKTtcclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICB2YXIgZWwgPSAodHlwZW9mIGh0bWwgPT09ICdzdHJpbmcnKSA/IHRoaXMuY3JlYXRlQ29udGFpbmVyKGh0bWwpIDogaHRtbDtcclxuICAgICAgICB2YXIgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgbm9kZSwgZmlyc3ROb2RlLCBsYXN0Tm9kZTtcclxuICAgICAgICB2YXIgbm9kZXMgPSBbXTtcclxuICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKChub2RlID0gZWwuZmlyc3RDaGlsZCkpIHtcclxuICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB2YXIgbiA9IGZyYWcuYXBwZW5kQ2hpbGQobm9kZSk7XHJcbiAgICAgICAgICAgIGlmIChpID09PSAxKSBmaXJzdE5vZGUgPSBuO1xyXG5cclxuICAgICAgICAgICAgbm9kZXMucHVzaChuKTtcclxuICAgICAgICAgICAgbGFzdE5vZGUgPSBuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHsgZnJhZzogZnJhZywgZmlyc3Q6IGZpcnN0Tm9kZSwgbGFzdDogbGFzdE5vZGUsIG5vZGVzOiBub2RlcyB9O1xyXG4gICAgfSxcclxuICAgIGlzOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iai5mcmFnKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnY2xpcGJvYXJkJywge1xyXG4gICAgZ2V0Q29udGVudDogZnVuY3Rpb24oY2xpcGJvYXJkKSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSAodGhpcy5pc1BsYWluVGV4dChjbGlwYm9hcmQpKSA/ICd0ZXh0L3BsYWluJyA6ICd0ZXh0L2h0bWwnO1xyXG4gICAgICAgIHZhciBodG1sID0gY2xpcGJvYXJkLmdldERhdGEodHlwZSk7XHJcbiAgICAgICAgaHRtbCA9ICh0eXBlID09PSAndGV4dC9wbGFpbicpID8gIHRoaXMuYXBwLmNvbnRlbnQuZXNjYXBlSHRtbChodG1sKSA6IGh0bWw7XHJcblxyXG4gICAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfSxcclxuICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uKGUsIGh0bWwsIHRleHQpIHtcclxuICAgICAgICB2YXIgY2xpcGJvYXJkID0gZS5jbGlwYm9hcmREYXRhO1xyXG5cclxuICAgICAgICAvLyB1bnBhcnNlXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuYXBwLnBhcnNlci51bnBhcnNlKGh0bWwpO1xyXG4gICAgICAgIHRleHQgPSB0ZXh0IHx8IHRoaXMuYXBwLmNvbnRlbnQuZ2V0VGV4dEZyb21IdG1sKGh0bWwsIHsgbmw6IHRydWUgfSk7XHJcblxyXG4gICAgICAgIC8vIHNldFxyXG4gICAgICAgIGNsaXBib2FyZC5zZXREYXRhKCd0ZXh0L2h0bWwnLCBodG1sKTtcclxuICAgICAgICBjbGlwYm9hcmQuc2V0RGF0YSgndGV4dC9wbGFpbicsIHRleHQpO1xyXG4gICAgfSxcclxuICAgIGlzUGxhaW5UZXh0OiBmdW5jdGlvbihjbGlwYm9hcmQpIHtcclxuICAgICAgICB2YXIgdGV4dCA9IGNsaXBib2FyZC5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XHJcbiAgICAgICAgdmFyIGh0bWwgPSBjbGlwYm9hcmQuZ2V0RGF0YSgndGV4dC9odG1sJyk7XHJcblxyXG4gICAgICAgIGlmIChodG1sICYmIGh0bWwudHJpbSgpICE9PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRleHQgIT09IG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnYWRkYmFyJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21CdXR0b25zID0ge307XHJcbiAgICB9LFxyXG4gICAgcG9wdXA6IGZ1bmN0aW9uKHBhcmFtcywgYnV0dG9uKSB7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZVxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLmNyZWF0ZSgnYWRkYmFyJywge1xyXG4gICAgICAgICAgICB3aWR0aDogJzQ3NnB4JyxcclxuICAgICAgICBcdGl0ZW1zOiB0aGlzLmJ1aWxkSXRlbXMoKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBvcGVuXHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAub3Blbih7IGJ1dHRvbjogYnV0dG9uIH0pO1xyXG4gICAgfSxcclxuICAgIGJ1aWxkSXRlbXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpdGVtcyA9IHt9O1xyXG4gICAgICAgIHZhciBvYmogPSAkQVJYLmV4dGVuZCh0cnVlLCB0aGlzLm9wdHMuYWRkYmFyT2JqKTtcclxuICAgICAgICB2YXIgYXJyID0gdGhpcy5vcHRzLmFkZGJhci5jb25jYXQodGhpcy5vcHRzLmFkZGJhckFkZCk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0cy5hZGRiYXJBZGQubGVuZ3RoICE9PSAwICYmIHRoaXMub3B0cy5hZGRiYXJBZGQuaW5kZXhPZigndGV4dCcpICE9PSAtMSkge1xyXG4gICAgICAgICAgICB2YXIgdGluID0gYXJyLmluZGV4T2YoJ3RleHQnKTtcclxuICAgICAgICAgICAgdmFyIHBpbiA9IGFyci5pbmRleE9mKCdwYXJhZ3JhcGgnKTtcclxuICAgICAgICAgICAgdmFyIHRvID0gKHBpbiAhPT0gLTEpID8gcGluKzEgOiAwO1xyXG5cclxuICAgICAgICAgICAgLy8gbW92ZSB0ZXh0IGJsb2NrIGJ1dHRvblxyXG4gICAgICAgICAgICBhcnIuc3BsaWNlKHRvLCAwLCBhcnIuc3BsaWNlKHRpbiwgMSlbMF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBhcnJbaV07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuYWRkYmFySGlkZS5pbmRleE9mKG5hbWUpICE9PSAtMSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBpdGVtc1tuYW1lXSA9IG9ialtuYW1lXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBjdXN0b21JdGVtcyA9ICRBUlguZXh0ZW5kKHRydWUsIHRoaXMuY3VzdG9tQnV0dG9ucyk7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIGN1c3RvbVxyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjdXN0b21JdGVtcykge1xyXG4gICAgICAgICAgICBpdGVtc1trZXldID0gY3VzdG9tSXRlbXNba2V5XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIGFsbFxyXG4gICAgICAgIGZvciAodmFyIGluZGV4IGluIGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkSXRlbShpbnN0YW5jZSwgaXRlbXMsIGl0ZW1zW2luZGV4XSwgaW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xyXG4gICAgfSxcclxuICAgIGFkZDogZnVuY3Rpb24obmFtZSwgb2JqKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21CdXR0b25zW25hbWVdID0gb2JqO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRJdGVtOiBmdW5jdGlvbihpbnN0YW5jZSwgaXRlbXMsIGl0ZW0sIGtleSkge1xyXG5cclxuICAgICAgICAvLyBhbGxvd2VkIGJ1dHRvbnNcclxuICAgICAgICBpZiAoKGl0ZW0uYmxvY2tzICYmICFpbnN0YW5jZSkgfHxcclxuICAgICAgICAgICAgKGluc3RhbmNlICYmIGl0ZW0uYmxvY2tzICYmICFpbnN0YW5jZS5pc0FsbG93ZWRCdXR0b24oa2V5LCBpdGVtKSkpIHtcclxuXHJcbiAgICAgICAgICAgIGl0ZW1zW2tleV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaXRlbXNba2V5XSA9IHtcclxuICAgICAgICAgICAgY29udGFpbmVyOiB0cnVlLFxyXG4gICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcclxuICAgICAgICAgICAgaWNvbjogaXRlbS5pY29uIHx8IGtleSxcclxuICAgICAgICAgICAgY29tbWFuZDogaXRlbS5jb21tYW5kLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHsgbmFtZToga2V5IH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ21hcmtlcicsIHtcclxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLndpbiA9IHRoaXMuYXBwLmVkaXRvci5nZXRXaW5Ob2RlKCk7XHJcbiAgICAgICAgdGhpcy5kb2MgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0RG9jTm9kZSgpO1xyXG4gICAgfSxcclxuICAgIGJ1aWxkOiBmdW5jdGlvbihwb3MpIHtcclxuICAgICAgICB2YXIgJG1hcmtlciA9IHRoaXMuZG9tKCc8c3Bhbj4nKS5hdHRyKCdpZCcsICdzZWxlY3Rpb24tbWFya2VyLScgKyBwb3MpO1xyXG4gICAgICAgICRtYXJrZXIuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXNlbGVjdGlvbi1tYXJrZXInKTtcclxuICAgICAgICAkbWFya2VyLmh0bWwodGhpcy5vcHRzLm1hcmtlckNoYXIpO1xyXG5cclxuICAgICAgICByZXR1cm4gJG1hcmtlci5nZXQoKTtcclxuICAgIH0sXHJcbiAgICBpbnNlcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHZhciBzZWwgPSB0aGlzLmFwcC5zZWxlY3Rpb24uZ2V0KCk7XHJcbiAgICAgICAgdmFyIGJvdGggPSAoIXNlbC5jb2xsYXBzZWQpO1xyXG5cclxuICAgICAgICBpZiAoIXNlbC5yYW5nZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmJ1aWxkKCdzdGFydCcpO1xyXG4gICAgICAgIHZhciBlbmQgPSB0aGlzLmJ1aWxkKCdlbmQnKTtcclxuXHJcbiAgICAgICAgdmFyIGNsb25lZCA9IHNlbC5yYW5nZS5jbG9uZVJhbmdlKCk7XHJcblxyXG4gICAgICAgIGlmIChib3RoKSB7XHJcbiAgICAgICAgICAgIGNsb25lZC5jb2xsYXBzZShmYWxzZSk7XHJcbiAgICAgICAgICAgIGNsb25lZC5pbnNlcnROb2RlKGVuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbG9uZWQuc2V0U3RhcnQoc2VsLnJhbmdlLnN0YXJ0Q29udGFpbmVyLCBzZWwucmFuZ2Uuc3RhcnRPZmZzZXQpO1xyXG4gICAgICAgIGNsb25lZC5jb2xsYXBzZSh0cnVlKTtcclxuICAgICAgICBjbG9uZWQuaW5zZXJ0Tm9kZShzdGFydCk7XHJcblxyXG4gICAgICAgIHNlbC5yYW5nZS5zZXRTdGFydEFmdGVyKHN0YXJ0KTtcclxuXHJcbiAgICAgICAgaWYgKGJvdGgpIHtcclxuICAgICAgICAgICAgc2VsLnJhbmdlLnNldEVuZEJlZm9yZShlbmQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnNldFJhbmdlKHNlbC5yYW5nZSk7XHJcbiAgICB9LFxyXG4gICAgcmVzdG9yZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5maW5kKCdzdGFydCcpO1xyXG4gICAgICAgIHZhciBlbmQgPSB0aGlzLmZpbmQoJ2VuZCcpO1xyXG5cclxuICAgICAgICB2YXIgc2VsID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldCgpO1xyXG4gICAgICAgIHZhciByYW5nZSA9IChzZWwucmFuZ2UpID8gc2VsLnJhbmdlIDogdGhpcy5kb2MuY3JlYXRlUmFuZ2UoKTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHZhciBwcmV2ID0gKGVuZCkgPyBlbmQucHJldmlvdXNTaWJsaW5nIDogZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gc3RhcnQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgIG5leHQgPSAobmV4dCAmJiBuZXh0Lm5vZGVUeXBlID09PSAzICYmIG5leHQudGV4dENvbnRlbnQucmVwbGFjZSgvW1xcblxcdF0vZywgJycpID09PSAnJykgPyBmYWxzZSA6IG5leHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWVuZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMobmV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXN0b3JlSW5qZWN0KHJhbmdlLCBzdGFydCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobmV4dCAmJiBuZXh0LmlkID09PSAnc2VsZWN0aW9uLW1hcmtlci1lbmQnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXN0b3JlSW5qZWN0KHJhbmdlLCBzdGFydCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJldiAmJiBuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHByZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChuZXh0LCAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByZXYgJiYgIW5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMocHJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QWZ0ZXIoc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBZnRlcihzdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kQmVmb3JlKGVuZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnNlbGVjdGlvbi5zZXRSYW5nZShyYW5nZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZml4ID0gKHN0YXJ0ICYmIGVuZCkgPyAyIDogMTtcclxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuYXBwLm9mZnNldC5nZXQoKTtcclxuICAgICAgICAgICAgb2Zmc2V0ID0ge1xyXG4gICAgICAgICAgICAgICAgc3RhcnQ6IG9mZnNldC5zdGFydC1maXgsXHJcbiAgICAgICAgICAgICAgICBlbmQ6IG9mZnNldC5lbmQtZml4XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAoc3RhcnQpIHN0YXJ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3RhcnQpO1xyXG4gICAgICAgICAgICBpZiAoZW5kKSBlbmQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbmQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmdldFdpbigpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLm9mZnNldC5zZXQob2Zmc2V0KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgZmluZDogZnVuY3Rpb24ocG9zKSB7XHJcbiAgICAgICAgdmFyICRlZGl0b3IgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCk7XHJcbiAgICAgICAgdmFyICRtYXJrZXIgPSAkZWRpdG9yLmZpbmQoJyNzZWxlY3Rpb24tbWFya2VyLScgKyBwb3MpO1xyXG5cclxuICAgICAgICByZXR1cm4gKCRtYXJrZXIubGVuZ3RoICE9PSAwKSA/ICRtYXJrZXIuZ2V0KCkgOiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMuZmluZCgnc3RhcnQnKTtcclxuICAgICAgICB2YXIgZW5kID0gdGhpcy5maW5kKCdlbmQnKTtcclxuXHJcbiAgICAgICAgaWYgKHN0YXJ0KSBzdGFydC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0YXJ0KTtcclxuICAgICAgICBpZiAoZW5kKSBlbmQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbmQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfcmVzdG9yZUluamVjdDogZnVuY3Rpb24ocmFuZ2UsIHN0YXJ0KSB7XHJcbiAgICAgICAgdmFyIHRleHROb2RlID0gdGhpcy5hcHAudXRpbHMuY3JlYXRlSW52aXNpYmxlQ2hhcigpO1xyXG4gICAgICAgIHRoaXMuZG9tKHN0YXJ0KS5hZnRlcih0ZXh0Tm9kZSk7XHJcblxyXG4gICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyh0ZXh0Tm9kZSk7XHJcbiAgICAgICAgcmFuZ2UuY29sbGFwc2UoZmFsc2UpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdmb3JtYXQnLCB7XHJcbiAgICBwb3B1cDogZnVuY3Rpb24ocGFyYW1zLCBidXR0b24pIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgdGFnID0gaW5zdGFuY2UuZ2V0VGFnKCk7XHJcbiAgICAgICAgdmFyIHRhZ3MgPSB0aGlzLm9wdHMuZm9ybWF0O1xyXG5cclxuICAgICAgICAvLyBidWlsZCBpdGVtc1xyXG4gICAgICAgIHZhciBpdGVtcyA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gdGFnc1tpXTtcclxuICAgICAgICAgICAgaXRlbXNba2V5XSA9IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aGlzLm9wdHMuZm9ybWF0T2JqW2tleV0udGl0bGUsXHJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHsgdGFnOiBrZXkgfSxcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICdibG9jay5mb3JtYXQnLFxyXG4gICAgICAgICAgICAgICAgc2hvcnRjdXQ6IHRoaXMub3B0cy5mb3JtYXRPYmpba2V5XS5zaG9ydGN1dCxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZTogKGtleSA9PT0gdGFnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jcmVhdGUoJ2Zvcm1hdCcsIHtcclxuICAgICAgICAgICAgd2lkdGg6ICczMDBweCcsXHJcbiAgICAgICAgICAgIGl0ZW1zOiBpdGVtc1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5vcGVuKHsgYnV0dG9uOiBidXR0b24gfSk7XHJcbiAgICB9LFxyXG4gICAgc2V0OiBmdW5jdGlvbihwYXJhbXMpIHtcclxuICAgICAgICAvLyBwb3B1cFxyXG4gICAgICAgIGlmICh0aGlzLmFwcC5wb3B1cC5pc09wZW4oKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYmxvY2tzXHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLmJsb2Nrcy5pcygpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIHZhciBpc0VtcHR5ID0gaW5zdGFuY2UuaXNFbXB0eSgpO1xyXG4gICAgICAgIHZhciBjYXJldCA9IChpc0VtcHR5KSA/ICdzdGFydCcgOiBmYWxzZTtcclxuICAgICAgICB2YXIgZm9ybWF0ID0geyB0eXBlOiB0aGlzLm9wdHMuZm9ybWF0T2JqW3BhcmFtcy50YWddLnR5cGUsIHRhZzogcGFyYW1zLnRhZyB9O1xyXG4gICAgICAgIHZhciAkaXRlbXM7XHJcblxyXG4gICAgICAgIC8vIGN1cnJlbnQgcGFyYW1zXHJcbiAgICAgICAgdGhpcy50YWcgPSBpbnN0YW5jZS5nZXRUYWcoKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBpbnN0YW5jZS5nZXRUeXBlKCk7XHJcbiAgICAgICAgdGhpcy4kYmxvY2sgPSBpbnN0YW5jZS5nZXRCbG9jaygpO1xyXG5cclxuICAgICAgICAvLyBzZWxlY3Rpb25cclxuICAgICAgICBpZiAoIWlzRW1wdHkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnNhdmVNYXJrZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIHNhbWVcclxuICAgICAgICBpZiAodGhpcy5faXNTYW1lVGFnKGZvcm1hdCkpIHtcclxuICAgICAgICAgICAgZm9ybWF0ID0gdGhpcy5fY2hlY2tTYW1lRm9ybWF0KGZvcm1hdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBmb3JtYXRcclxuICAgICAgICBpZiAoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0xpc3RUb1RleHQoZm9ybWF0LCAnbGlzdCcpKSB7XHJcbiAgICAgICAgICAgICAgICAkaXRlbXMgPSB0aGlzLl9mb3JtYXRMaXN0VG9UZXh0KGZvcm1hdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5faXNMaXN0VG9UZXh0KGZvcm1hdCwgJ2RsaXN0JykpIHtcclxuICAgICAgICAgICAgICAgICRpdGVtcyA9IHRoaXMuX2Zvcm1hdExpc3RUb1RleHQoZm9ybWF0LCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9pc1RleHRUb0xpc3QoZm9ybWF0LCAnbGlzdCcpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb3JtYXRUZXh0VG9MaXN0KGZvcm1hdCwgZmFsc2UsIGNhcmV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9pc1RleHRUb0xpc3QoZm9ybWF0LCAnZGxpc3QnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9ybWF0VGV4dFRvTGlzdChmb3JtYXQsIHRydWUsIGNhcmV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlcGxhY2VUbyhpbnN0YW5jZSwgZm9ybWF0LCBjYXJldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlc3RvcmVcclxuICAgICAgICBpZiAoIWlzRW1wdHkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnJlc3RvcmVNYXJrZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgkaXRlbXMpIHtcclxuICAgICAgICAgICAgdmFyICRibG9jayA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXREYXRhQmxvY2soKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KCRibG9jaywgY2FyZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2Jsb2NrLmZvcm1hdCcsIHsgaW5zdGFuY2U6IGluc3RhbmNlIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfaXNTYW1lVGFnOiBmdW5jdGlvbihmb3JtYXQpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudGFnID09PSBmb3JtYXQudGFnICYmIHRoaXMudHlwZSA9PT0gZm9ybWF0LnR5cGUpO1xyXG4gICAgfSxcclxuICAgIF9jaGVja1NhbWVGb3JtYXQ6IGZ1bmN0aW9uKGZvcm1hdCkge1xyXG4gICAgICAgIGlmIChbJ2hlYWRpbmcnLCAnbGlzdCcsICdkbGlzdCcsICdhZGRyZXNzJ10uaW5kZXhPZih0aGlzLnR5cGUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBmb3JtYXQgPSB0aGlzLl9idWlsZERlZmF1bHRGb3JtYXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoWydwYXJhZ3JhcGgnLCAndGV4dCddLmluZGV4T2YodGhpcy50eXBlKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgZm9ybWF0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZm9ybWF0O1xyXG4gICAgfSxcclxuICAgIF9idWlsZERlZmF1bHRGb3JtYXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB0eXBlID0gdGhpcy5vcHRzLmVkaXRvci5tYXJrdXA7XHJcbiAgICAgICAgdmFyIHRhZyA9ICh0eXBlID09PSAncGFyYWdyYXBoJykgPyAncCcgOiAnZGl2JztcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgdGFnOiB0YWcgfTtcclxuICAgIH0sXHJcbiAgICBfZm9ybWF0TGlzdFRvVGV4dDogZnVuY3Rpb24oZm9ybWF0LCBkbGlzdCkge1xyXG4gICAgICAgIHZhciAkaXRlbXMgPSAoZGxpc3QpID8gdGhpcy5fZ2V0RGxpc3RJdGVtcygpIDogdGhpcy5fZ2V0TGlzdEl0ZW1zKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NyZWF0ZUl0ZW1zKCRpdGVtcywgZm9ybWF0KTtcclxuICAgICAgICB0aGlzLiRibG9jay5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICRpdGVtcztcclxuICAgIH0sXHJcbiAgICBfZm9ybWF0VGV4dFRvTGlzdDogZnVuY3Rpb24oZm9ybWF0LCBkbGlzdCwgY2FyZXQpIHtcclxuICAgICAgICB2YXIgbmV3SW5zdGFuY2UgPSB0aGlzLmFwcC5jcmVhdGUoJ2Jsb2NrLicgKyBmb3JtYXQudHlwZSk7XHJcbiAgICAgICAgdmFyICRuZXdCbG9jayA9IG5ld0luc3RhbmNlLmdldEJsb2NrKCk7XHJcblxyXG4gICAgICAgIGlmIChkbGlzdCAmJiB0aGlzLnR5cGUgPT09ICdsaXN0Jykge1xyXG4gICAgICAgICAgICB2YXIgeiA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX2dldExpc3RJdGVtcygpLmVhY2goZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YWcgPSAoeiA9PT0gMCkgPyAnZHQnIDogJ2RkJztcclxuICAgICAgICAgICAgICAgIHZhciAkaXRlbSA9IHRoaXMuZG9tKCc8JyArIHRhZyArICc+JykuaHRtbCgkbm9kZS5odG1sKCkpO1xyXG4gICAgICAgICAgICAgICAgeiA9ICh0YWcgPT09ICdkdCcpID8gMSA6IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgJG5ld0Jsb2NrLmFwcGVuZCgkaXRlbSk7XHJcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghZGxpc3QgJiYgdGhpcy50eXBlID09PSAnZGxpc3QnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dldERsaXN0SXRlbXMoKS5lYWNoKGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLmRvbSgnPGxpPicpLmh0bWwoJG5vZGUuaHRtbCgpKTtcclxuICAgICAgICAgICAgICAgICRuZXdCbG9jay5hcHBlbmQoJGl0ZW0pO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHRhZyA9IChkbGlzdCkgPyAnPGR0PicgOiAnPGxpPic7XHJcbiAgICAgICAgICAgIHZhciAkaXRlbSA9IHRoaXMuZG9tKHRhZykuaHRtbCh0aGlzLiRibG9jay5odG1sKCkpO1xyXG4gICAgICAgICAgICAkbmV3QmxvY2suYXBwZW5kKCRpdGVtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHBhcnNlIGluc3RhbmNlXHJcbiAgICAgICAgdGhpcy5hcHAuY3JlYXRlKCdibG9jay4nICsgZm9ybWF0LnR5cGUsICRuZXdCbG9jayk7XHJcblxyXG4gICAgICAgIHRoaXMuJGJsb2NrLmFmdGVyKCRuZXdCbG9jayk7XHJcbiAgICAgICAgdGhpcy4kYmxvY2sucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIC8vIHNldFxyXG4gICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldCgkbmV3QmxvY2ssIGNhcmV0KTtcclxuICAgIH0sXHJcbiAgICBfcmVwbGFjZVRvOiBmdW5jdGlvbihpbnN0YW5jZSwgZm9ybWF0LCBjYXJldCkge1xyXG4gICAgICAgIHZhciAkYmxvY2sgPSBpbnN0YW5jZS5nZXRCbG9jaygpO1xyXG4gICAgICAgIHZhciAkbmV3QmxvY2sgPSB0aGlzLmFwcC5lbGVtZW50LnJlcGxhY2VUb1RhZygkYmxvY2ssIGZvcm1hdC50YWcpO1xyXG5cclxuICAgICAgICAvLyBjbGVhbiBjbGFzc2VzICYgc3R5bGVzXHJcbiAgICAgICAgJG5ld0Jsb2NrLnJlbW92ZUF0dHIoJ3N0eWxlIGNsYXNzIGRhdGEtJyArIHRoaXMucHJlZml4ICsgJy1zdHlsZS1jYWNoZScpO1xyXG5cclxuICAgICAgICAvLyBuZXcgaW5zdGFuY2VcclxuICAgICAgICB0aGlzLmFwcC5jcmVhdGUoJ2Jsb2NrLicgKyBmb3JtYXQudHlwZSwgJG5ld0Jsb2NrKTtcclxuXHJcbiAgICAgICAgLy8gc2V0XHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KCRuZXdCbG9jaywgY2FyZXQpO1xyXG4gICAgfSxcclxuICAgIF9jcmVhdGVJdGVtczogZnVuY3Rpb24oJGl0ZW1zLCBmb3JtYXQpIHtcclxuICAgICAgICAkaXRlbXMuZWFjaChmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLmRvbSgnPCcgKyBmb3JtYXQudGFnICsgJz4nKTtcclxuICAgICAgICAgICAgJGl0ZW0uaHRtbCgkbm9kZS5odG1sKCkpO1xyXG4gICAgICAgICAgICAkbm9kZS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmNyZWF0ZSgnYmxvY2suJyArIGZvcm1hdC50eXBlLCAkaXRlbSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGJsb2NrLmJlZm9yZSgkaXRlbSk7XHJcblxyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgX2lzTGlzdFRvVGV4dDogZnVuY3Rpb24oZm9ybWF0LCB0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnR5cGUgPT09IHR5cGUgJiYgWydoZWFkaW5nJywgJ2FkZHJlc3MnLCAncGFyYWdyYXBoJywgJ3RleHQnXS5pbmRleE9mKGZvcm1hdC50eXBlKSAhPT0gLTEpO1xyXG4gICAgfSxcclxuICAgIF9pc1RleHRUb0xpc3Q6IGZ1bmN0aW9uKGZvcm1hdCwgdHlwZSkge1xyXG4gICAgICAgIHZhciBjaGVja1R5cGUgPSAodHlwZSA9PT0gJ2xpc3QnKSA/ICdkbGlzdCcgOiAnbGlzdCc7XHJcbiAgICAgICAgcmV0dXJuIChmb3JtYXQudHlwZSA9PT0gdHlwZSAmJiBbJ2hlYWRpbmcnLCAnYWRkcmVzcycsICdwYXJhZ3JhcGgnLCAndGV4dCcsIGNoZWNrVHlwZV0uaW5kZXhPZih0aGlzLnR5cGUpICE9PSAtMSk7XHJcbiAgICB9LFxyXG4gICAgX2dldExpc3RJdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRpdGVtcyA9IHRoaXMuJGJsb2NrLmZpbmQoJ2xpJyk7XHJcblxyXG4gICAgICAgICRpdGVtcy5maW5kKCd1bCwgb2wnKS5lYWNoKGZ1bmN0aW9uKCRub2RlKSB7ICRub2RlLnBhcmVudCgpLmFmdGVyKCRub2RlKTsgfSk7XHJcbiAgICAgICAgJGl0ZW1zLmZpbmQoJ3VsLCBvbCcpLnVud3JhcCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gJGl0ZW1zO1xyXG4gICAgfSxcclxuICAgIF9nZXREbGlzdEl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kYmxvY2suZmluZCgnZHQsIGRkJyk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ2lubGluZScsIHtcclxuICAgIHJlbW92ZUZvcm1hdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAuY2xvc2UoKTtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgJGJsb2NrID0gaW5zdGFuY2UuZ2V0QmxvY2soKTtcclxuICAgICAgICB0aGlzLmFwcC5zZWxlY3Rpb24uc2F2ZSgkYmxvY2spO1xyXG5cclxuICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLmFwcC5zZWxlY3Rpb24uZ2V0Tm9kZXMoeyB0eXBlOiAnaW5saW5lJyB9KTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciAkbm9kZSA9IHRoaXMuZG9tKG5vZGVzW2ldKTtcclxuICAgICAgICAgICAgaWYgKCEkbm9kZS5hdHRyKCdkYXRhLScgKyB0aGlzLnByZWZpeCArICctdHlwZScpKSB7XHJcbiAgICAgICAgICAgICAgICAkbm9kZS51bndyYXAoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnJlc3RvcmUoKTtcclxuICAgICAgICB0aGlzLmFwcC50b29sYmFyLm9ic2VydmUoKTtcclxuICAgIH0sXHJcbiAgICBzZXQ6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIC8vIHBvcHVwXHJcbiAgICAgICAgaWYgKHRoaXMuYXBwLnBvcHVwLmlzT3BlbigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwYXJhbXNcclxuICAgICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHJcbiAgICAgICAgdmFyIG5vZGVzID0gW107XHJcbiAgICAgICAgdmFyIHNlbCA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXQoKTtcclxuICAgICAgICBpZiAoc2VsLmNvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICBub2RlcyA9IHRoaXMuZm9ybWF0Q29sbGFwc2VkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBub2RlcyA9IHRoaXMuZm9ybWF0VW5jb2xsYXBzZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIub2JzZXJ2ZSgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnaW5saW5lLmZvcm1hdCcsIHsgbm9kZXM6IG5vZGVzIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gbm9kZXM7XHJcbiAgICB9LFxyXG4gICAgZm9ybWF0Q29sbGFwc2VkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbm9kZTtcclxuICAgICAgICB2YXIgaW5saW5lID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldElubGluZSgpO1xyXG4gICAgICAgIHZhciAkaW5saW5lID0gdGhpcy5kb20oaW5saW5lKTtcclxuICAgICAgICB2YXIgdGFncyA9IHRoaXMuX2dldFBhcmFtc1RhZ3MoKTtcclxuICAgICAgICB2YXIgaGFzU2FtZVRhZyA9IHRoaXMuX2lzU2FtZVRhZyhpbmxpbmUsIHRhZ3MpO1xyXG4gICAgICAgIHZhciBjYXJldCA9ICh0aGlzLnBhcmFtcyAmJiB0aGlzLnBhcmFtcy5jYXJldCkgPyB0aGlzLnBhcmFtcy5jYXJldCA6IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyAxKSBub3QgaW5saW5lXHJcbiAgICAgICAgaWYgKCFpbmxpbmUpIHtcclxuICAgICAgICAgICAgbm9kZSA9IHRoaXMuX2luc2VydElubGluZSh0aGlzLnBhcmFtcy50YWcsIGNhcmV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIDIpIGlubGluZSBpcyBlbXB0eVxyXG4gICAgICAgICAgICBpZiAodGhpcy5hcHAuY29udGVudC5pc0VtcHR5SHRtbChpbmxpbmUuaW5uZXJIVE1MKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gMi4xKSBoYXMgc2FtZSB0YWdcclxuICAgICAgICAgICAgICAgIGlmIChoYXNTYW1lVGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KGlubGluZSwgKGNhcmV0KSA/IGNhcmV0IDogJ2FmdGVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGlubGluZS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIDIuMikgaGFzIGEgZGlmZmVyZW50IHRhZ1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyICRlbCA9IHRoaXMuYXBwLmVsZW1lbnQucmVwbGFjZVRvVGFnKGlubGluZSwgdGhpcy5wYXJhbXMudGFnKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJGVsLCAoY2FyZXQpID8gY2FyZXQgOiAnc3RhcnQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAzKSBpbmxpbmUgaXNuJ3QgZW1wdHlcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyAzLjEpIGhhcyBzYW1lIHRhZ1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc1NhbWVUYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0cmFjdGVkQ29udGVudCA9IHRoaXMuYXBwLmNvbnRlbnQuZXh0cmFjdEh0bWxGcm9tQ2FyZXQoaW5saW5lKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgJHNlY29uZFBhcnQgPSB0aGlzLmRvbSgnPCcgKyB0aGlzLnBhcmFtcy50YWcgKyAnIC8+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNlY29uZFBhcnQgPSB0aGlzLmFwcC5lbGVtZW50LmNsb25lQXR0cnMoaW5saW5lLCAkc2Vjb25kUGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGlubGluZS5hZnRlcigkc2Vjb25kUGFydC5hcHBlbmQoZXh0cmFjdGVkQ29udGVudCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJHNlY29uZFBhcnQsIChjYXJldCkgPyBjYXJldCA6ICdiZWZvcmUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIDMuMikgaGFzIGEgZGlmZmVyZW50IHRhZ1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHRoaXMuX2luc2VydElubGluZSh0aGlzLnBhcmFtcy50YWcsIGNhcmV0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIChub2RlKSA/IG5vZGUgOiBbXTtcclxuICAgIH0sXHJcbiAgICBmb3JtYXRVbmNvbGxhcHNlZDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIHZhciAkYmxvY2sgPSBpbnN0YW5jZS5nZXRCbG9jaygpO1xyXG4gICAgICAgIHZhciBpbmxpbmVzID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldE5vZGVzKHsgdHlwZTogJ2lubGluZScgfSk7XHJcblxyXG4gICAgICAgIC8vIGNvbnZlcnQgZGVsIC8gdVxyXG4gICAgICAgIHRoaXMuX2NvbnZlcnRUYWdzKCd1JywgaW5zdGFuY2UpO1xyXG5cclxuICAgICAgICAvLyBjb252ZXJ0IHRhcmdldCB0YWdzXHJcbiAgICAgICAgdGhpcy5fY29udmVydFRvU3RyaWtlKGlubGluZXMsIGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgLy8gc2F2ZSBzZWxlY3Rpb25cclxuICAgICAgICB0aGlzLmFwcC5zZWxlY3Rpb24uc2F2ZSgkYmxvY2spO1xyXG5cclxuICAgICAgICAvLyBhcHBseSBzdHJpa2VcclxuICAgICAgICB0aGlzLmFwcC5lZGl0b3IuZ2V0RG9jTm9kZSgpLmV4ZWNDb21tYW5kKCdzdHJpa2V0aHJvdWdoJyk7XHJcblxyXG5cclxuICAgICAgICAvLyByZXZlcnQgdG8gaW5saW5lc1xyXG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuX3JldmVydFRvSW5saW5lcyhpbnN0YW5jZSk7XHJcblxyXG4gICAgICAgIC8vIHJlc3RvcmUgc2VsZWN0aW9uXHJcbiAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnJlc3RvcmUoKTtcclxuXHJcbiAgICAgICAgLy8gZmlsdGVyIGlmIG5vZGUgaXMgbm90IHNlbGVjdGVkXHJcbiAgICAgICAgdmFyIGZpbmFsTm9kZXMgPSBbXTtcclxuICAgICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLmFwcC5zZWxlY3Rpb24uZ2V0VGV4dCgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzSW5TZWxlY3Rpb24obm9kZXNbaV0sIHNlbGVjdGVkKSkge1xyXG4gICAgICAgICAgICAgICAgZmluYWxOb2Rlcy5wdXNoKG5vZGVzW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2xlYXIgYW5kIG5vcm1hbGl6ZVxyXG4gICAgICAgIHRoaXMuX2NsZWFyRW1wdHlTdHlsZSgpO1xyXG5cclxuICAgICAgICAvLyBhcHBseSBhdHRyXHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zICYmIHR5cGVvZiB0aGlzLnBhcmFtcy5hdHRyICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciB6ID0gMDsgeiA8IGZpbmFsTm9kZXMubGVuZ3RoOyB6KyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5wYXJhbXMuYXR0cikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsTm9kZXNbel0uc2V0QXR0cmlidXRlKG5hbWUsIHRoaXMucGFyYW1zLmF0dHJbbmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmFwcC5zZWxlY3Rpb24uc2F2ZSgkYmxvY2spO1xyXG4gICAgICAgICRibG9jay5nZXQoKS5ub3JtYWxpemUoKTtcclxuICAgICAgICB0aGlzLl9yZXZlcnRUYWdzKCd1JywgaW5zdGFuY2UpO1xyXG4gICAgICAgIHRoaXMuYXBwLnNlbGVjdGlvbi5yZXN0b3JlKCk7XHJcblxyXG4gICAgICAgIC8vIGNhcmV0XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zICYmIHRoaXMucGFyYW1zLmNhcmV0KSB7XHJcbiAgICAgICAgICAgIHZhciBsZW4gPSBmaW5hbE5vZGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGxhc3QgPSBmaW5hbE5vZGVzW2xlbi0xXTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KGxhc3QsIHRoaXMucGFyYW1zLmNhcmV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaW5hbE5vZGVzO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfY2xlYXJFbXB0eVN0eWxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5saW5lcyA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXROb2Rlcyh7IHR5cGU6ICdpbmxpbmUnIH0pO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5saW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9jbGVhckVtcHR5U3R5bGVBdHRyKGlubGluZXNbaV0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSBpbmxpbmVzW2ldLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB6ID0gMDsgeiA8IGNoaWxkTm9kZXMubGVuZ3RoOyB6KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbGVhckVtcHR5U3R5bGVBdHRyKGNoaWxkTm9kZXNbel0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9jbGVhckVtcHR5U3R5bGVBdHRyOiBmdW5jdGlvbihub2RlKSB7XHJcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDMgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJykgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfaXNTYW1lVGFnOiBmdW5jdGlvbihpbmxpbmUsIHRhZ3MpIHtcclxuICAgICAgICByZXR1cm4gKGlubGluZSAmJiB0YWdzLmluZGV4T2YoaW5saW5lLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkgIT09IC0xKTtcclxuICAgIH0sXHJcbiAgICBfaXNJblNlbGVjdGlvbjogZnVuY3Rpb24obm9kZSwgc2VsZWN0ZWQpIHtcclxuICAgICAgICB2YXIgdGV4dCA9IHRoaXMuYXBwLnV0aWxzLnJlbW92ZUludmlzaWJsZUNoYXJzKG5vZGUudGV4dENvbnRlbnQpO1xyXG4gICAgICAgIHJldHVybiAoc2VsZWN0ZWQuc2VhcmNoKG5ldyBSZWdFeHAodGhpcy5hcHAudXRpbHMuZXNjYXBlUmVnRXhwKHRleHQpKSkgIT09IC0xKTtcclxuICAgIH0sXHJcbiAgICBfaW5zZXJ0SW5saW5lOiBmdW5jdGlvbihub2RlcywgdGFnLCBjYXJldCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcC5pbnNlcnRpb24uaW5zZXJ0Tm9kZShkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyksIChjYXJldCkgPyBjYXJldCA6ICdzdGFydCcpO1xyXG4gICAgfSxcclxuICAgIF9jb252ZXJ0VGFnczogZnVuY3Rpb24odGFnLCBpbnN0YW5jZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy50YWcgIT09IHRhZykge1xyXG4gICAgICAgICAgICB2YXIgJGJsb2NrID0gaW5zdGFuY2UuZ2V0QmxvY2soKTtcclxuICAgICAgICAgICAgJGJsb2NrLmZpbmQodGFnKS5lYWNoKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkZWwgPSB0aGlzLmFwcC5lbGVtZW50LnJlcGxhY2VUb1RhZyhub2RlLCAnc3BhbicpO1xyXG4gICAgICAgICAgICAgICAgJGVsLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1jb252ZXJ0YWJsZS0nICsgdGFnKTtcclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3JldmVydFRhZ3M6IGZ1bmN0aW9uKHRhZywgaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgJGJsb2NrID0gaW5zdGFuY2UuZ2V0QmxvY2soKTtcclxuICAgICAgICAkYmxvY2suZmluZCgnc3Bhbi4nICsgdGhpcy5wcmVmaXggKyAnLWNvbnZlcnRhYmxlLScgKyB0YWcpLmVhY2goZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgJGVsID0gdGhpcy5hcHAuZWxlbWVudC5yZXBsYWNlVG9UYWcobm9kZSwgdGFnKTtcclxuICAgICAgICAgICAgJGVsLnJlbW92ZUNsYXNzKHRoaXMucHJlZml4ICsgJy1jb252ZXJ0YWJsZS0nICsgdGFnKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwLmVsZW1lbnQucmVtb3ZlRW1wdHlBdHRycygkZWwsICdjbGFzcycpKSAkZWwucmVtb3ZlQXR0cignY2xhc3MnKTtcclxuXHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBfY29udmVydFRvU3RyaWtlOiBmdW5jdGlvbihpbmxpbmVzLCBpbnN0YW5jZSkge1xyXG4gICAgICAgIHZhciAkYmxvY2sgPSBpbnN0YW5jZS5nZXRCbG9jaygpO1xyXG4gICAgICAgIHRoaXMuYXBwLnNlbGVjdGlvbi5zYXZlKCRibG9jayk7XHJcblxyXG4gICAgICAgIHZhciB0YWdzID0gdGhpcy5fZ2V0UGFyYW1zVGFncygpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5saW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgaW5saW5lID0gaW5saW5lc1tpXTtcclxuICAgICAgICAgICAgdmFyICRpbmxpbmUgPSB0aGlzLmRvbShpbmxpbmUpO1xyXG4gICAgICAgICAgICB2YXIgdGFnID0gaW5saW5lc1tpXS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGFncy5pbmRleE9mKHRhZykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXBsYWNlVG9TdHJpa2UoJGlubGluZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnJlc3RvcmUoKTtcclxuICAgIH0sXHJcbiAgICBfZ2V0UGFyYW1zVGFnczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHRhZ3MgPSBbdGhpcy5wYXJhbXMudGFnXTtcclxuICAgICAgICBpZiAodGhpcy5wYXJhbXMudGFnID09PSAnYicgfHwgdGhpcy5wYXJhbXMudGFnID09PSAnc3Ryb25nJykge1xyXG4gICAgICAgICAgICB0YWdzID0gWydiJywgJ3N0cm9uZyddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnBhcmFtcy50YWcgPT09ICdpJyB8fCB0aGlzLnBhcmFtcy50YWcgPT09ICdlbScpIHtcclxuICAgICAgICAgICAgdGFncyA9IFsnaScsICdlbSddO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRhZ3M7XHJcbiAgICB9LFxyXG4gICAgX3JlcGxhY2VUb1N0cmlrZTogZnVuY3Rpb24oJGVsKSB7XHJcbiAgICAgICAgJGVsLnJlcGxhY2VXaXRoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb20oJzxzdHJpa2U+JykuYXBwZW5kKCRlbC5odG1sKCkpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgX3JldmVydFRvSW5saW5lczogZnVuY3Rpb24oaW5zdGFuY2UpIHtcclxuICAgICAgICB2YXIgbm9kZXMgPSBbXTtcclxuICAgICAgICB2YXIgJGJsb2NrID0gaW5zdGFuY2UuZ2V0QmxvY2soKTtcclxuXHJcbiAgICAgICAgLy8gc3RyaWtlXHJcbiAgICAgICAgJGJsb2NrLmZpbmQoJ3N0cmlrZScpLmVhY2goZnVuY3Rpb24obm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgJG5vZGUgPSB0aGlzLmFwcC5lbGVtZW50LnJlcGxhY2VUb1RhZyhub2RlLCB0aGlzLnBhcmFtcy50YWcpO1xyXG4gICAgICAgICAgICBub2Rlcy5wdXNoKCRub2RlLmdldCgpKTtcclxuXHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5vZGVzO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdjb2RlbWlycm9yJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5jbSA9IGZhbHNlO1xyXG4gICAgfSxcclxuXHRjcmVhdGU6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIGlmICghdGhpcy5pcygpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBvcHRzID0gKHR5cGVvZiB0aGlzLm9wdHMuY29kZW1pcnJvciA9PT0gJ29iamVjdCcpID8gdGhpcy5vcHRzLmNvZGVtaXJyb3IgOiB7fTtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSAodGhpcy5vcHRzLmNvZGVtaXJyb3JTcmMpID8gdGhpcy5vcHRzLmNvZGVtaXJyb3JTcmMgOiBDb2RlTWlycm9yO1xyXG5cclxuICAgICAgICB0aGlzLmNtID0gaW5zdGFuY2UuZnJvbVRleHRBcmVhKHRoaXMuZG9tKHBhcmFtcy5lbCkuZ2V0KCksIG9wdHMpO1xyXG5cclxuICAgICAgICBpZiAocGFyYW1zLmhlaWdodCkgdGhpcy5jbS5zZXRTaXplKG51bGwsIHBhcmFtcy5oZWlnaHQpO1xyXG4gICAgICAgIGlmIChwYXJhbXMuZm9jdXMpIHRoaXMuY20uZm9jdXMoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY207XHJcblx0fSxcclxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICBpZiAodGhpcy5jbSkge1xyXG4gICAgICAgICAgICB0aGlzLmNtLnRvVGV4dEFyZWEoKTtcclxuICAgICAgICAgICAgdGhpcy5jbSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0cy5jb2RlbWlycm9yO1xyXG4gICAgfSxcclxuICAgIHZhbDogZnVuY3Rpb24oaHRtbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzKCkgJiYgdGhpcy5jbSkge1xyXG4gICAgICAgICAgICBodG1sID0gdGhpcy5jbS5nZXRWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnY2xhc3MnLCAndXBsb2FkJywge1xyXG4gICAgZGVmYXVsdHM6IHtcclxuICAgICAgICB0eXBlOiAnaW1hZ2UnLFxyXG4gICAgICAgIGJveDogZmFsc2UsXHJcbiAgICAgICAgdXJsOiBmYWxzZSxcclxuICAgICAgICBjb3ZlcjogdHJ1ZSwgLy8gJ2NvdmVyJ1xyXG4gICAgICAgIG5hbWU6ICdmaWxlJyxcclxuICAgICAgICBkYXRhOiBmYWxzZSxcclxuICAgICAgICBtdWx0aXBsZTogdHJ1ZSxcclxuICAgICAgICBwbGFjZWhvbGRlcjogZmFsc2UsXHJcbiAgICAgICAgaGlkZGVuOiB0cnVlLFxyXG4gICAgICAgIHRhcmdldDogZmFsc2UsXHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IGZhbHNlLFxyXG4gICAgICAgIHJlbW92ZTogZmFsc2UsXHJcbiAgICAgICAgdHJpZ2dlcjogZmFsc2UsXHJcbiAgICAgICAgaW5wdXQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgaW5pdDogZnVuY3Rpb24oJGVsLCBwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLmV2ZW50bmFtZSA9IHRoaXMucHJlZml4ICsgJy11cGxvYWQnO1xyXG5cclxuICAgICAgICBpZiAoJGVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkKCRlbCwgcGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2VuZDogZnVuY3Rpb24oZSwgZmlsZXMsIHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMucCA9IHRoaXMuX2J1aWxkUGFyYW1zKHBhcmFtcyk7XHJcbiAgICAgICAgdGhpcy5fc2VuZChlLCBmaWxlcyk7XHJcbiAgICB9LFxyXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlc3BvbnNlLCBlKSB7XHJcbiAgICAgICAgdGhpcy5fY29tcGxldGUocmVzcG9uc2UsIGUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBidWlsZFxyXG4gICAgX2J1aWxkOiBmdW5jdGlvbigkZWwsIHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMucCA9IHRoaXMuX2J1aWxkUGFyYW1zKHBhcmFtcyk7XHJcbiAgICAgICAgdGhpcy4kZWxlbWVudCA9IHRoaXMuZG9tKCRlbCk7XHJcblxyXG4gICAgICAgIHZhciB0YWcgPSB0aGlzLiRlbGVtZW50LmdldCgpLnRhZ05hbWU7XHJcbiAgICAgICAgaWYgKHRhZyA9PT0gJ0lOUFVUJykge1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZEJ5SW5wdXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkQnlCb3goKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkUGFyYW1zOiBmdW5jdGlvbihwYXJhbXMpIHtcclxuICAgICAgICByZXR1cm4gJEFSWC5leHRlbmQodHJ1ZSwgdGhpcy5kZWZhdWx0cywgcGFyYW1zKTtcclxuICAgIH0sXHJcbiAgICAvLyBieSBpbnB1dFxyXG4gICAgX2J1aWxkQnlJbnB1dDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIHRoaXMuJGlucHV0ID0gdGhpcy4kZWxlbWVudDtcclxuXHJcbiAgICAgICAgLy8gYm94XHJcbiAgICAgICAgaWYgKHRoaXMucC5ib3gpIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRCb3goKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRQbGFjZWhvbGRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbnB1dFxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnAuaW5wdXQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYnVpbGRBY2NlcHQoKTtcclxuICAgICAgICB0aGlzLl9idWlsZE11bHRpcGxlKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRFdmVudHMoKTtcclxuICAgIH0sXHJcbiAgICAvLyBieSBib3hcclxuICAgIF9idWlsZEJ5Qm94OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9idWlsZElucHV0KCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRBY2NlcHQoKTtcclxuICAgICAgICB0aGlzLl9idWlsZE11bHRpcGxlKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRCb3goKTtcclxuICAgICAgICB0aGlzLl9idWlsZFBsYWNlaG9sZGVyKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRFdmVudHMoKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRCb3g6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGJveCA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1mb3JtLXVwbG9hZC1ib3gnKTtcclxuICAgICAgICB0aGlzLiRlbGVtZW50LmJlZm9yZSh0aGlzLiRib3gpO1xyXG5cclxuICAgICAgICAvLyBoaWRlXHJcbiAgICAgICAgaWYgKHRoaXMucC5oaWRkZW4pIHtcclxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZFBsYWNlaG9sZGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMucC5wbGFjZWhvbGRlcikgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuJHBsYWNlaG9sZGVyID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1mb3JtLXVwbG9hZC1wbGFjZWhvbGRlcicpO1xyXG4gICAgXHR0aGlzLiRwbGFjZWhvbGRlci5odG1sKHRoaXMucC5wbGFjZWhvbGRlcik7XHJcbiAgICBcdHRoaXMuJGJveC5hcHBlbmQodGhpcy4kcGxhY2Vob2xkZXIpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZElucHV0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRpbnB1dCA9IHRoaXMuZG9tKCc8aW5wdXQ+Jyk7XHJcbiAgICAgICAgdGhpcy4kaW5wdXQuYXR0cigndHlwZScsICdmaWxlJyk7XHJcbiAgICAgICAgdGhpcy4kaW5wdXQuYXR0cignbmFtZScsIHRoaXMuX2dldFVwbG9hZFBhcmFtKCkpO1xyXG4gICAgICAgIHRoaXMuJGlucHV0LmhpZGUoKTtcclxuXHJcbiAgICAgICAgdGhpcy4kZWxlbWVudC5iZWZvcmUodGhpcy4kaW5wdXQpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEFjY2VwdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucC50eXBlICE9PSAnaW1hZ2UnKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciB0eXBlcyA9IHRoaXMub3B0cy5pbWFnZS50eXBlcy5qb2luKCcsJyk7XHJcbiAgICAgICAgdGhpcy4kaW5wdXQuYXR0cignYWNjZXB0JywgdHlwZXMpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZE11bHRpcGxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5wLnR5cGUgIT09ICdpbWFnZScpIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucC5tdWx0aXBsZSkge1xyXG4gICAgICAgICAgICB0aGlzLiRpbnB1dC5hdHRyKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4kaW5wdXQucmVtb3ZlQXR0cignbXVsdGlwbGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkRXZlbnRzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRpbnB1dC5vbignY2hhbmdlLicgKyB0aGlzLmV2ZW50bmFtZSArICctJyArIHRoaXMudXVpZCwgdGhpcy5fY2hhbmdlLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5wLmlucHV0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLiRib3gub24oJ2NsaWNrLicgKyB0aGlzLmV2ZW50bmFtZSwgdGhpcy5fY2xpY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGJveC5vbignZHJvcC4nICsgdGhpcy5ldmVudG5hbWUsIHRoaXMuX2Ryb3AuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGJveC5vbignZHJhZ292ZXIuJyArIHRoaXMuZXZlbnRuYW1lLCB0aGlzLl9kcmFnb3Zlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy4kYm94Lm9uKCdkcmFnbGVhdmUuJyArIHRoaXMuZXZlbnRuYW1lLCB0aGlzLl9kcmFnbGVhdmUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZERhdGE6IGZ1bmN0aW9uKG5hbWUsIGZpbGVzLCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucC5tdWx0aXBsZSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmFwcGVuZChuYW1lICsgJ1tdJywgZmlsZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkYXRhLmFwcGVuZChuYW1lICsgJ1tdJywgZmlsZXNbMF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGdldFxyXG4gICAgX2dldFVwbG9hZFBhcmFtOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wLm5hbWU7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvLyBldmVudHNcclxuICAgIF9jbGljazogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLiRpbnB1dC5jbGljaygpO1xyXG4gICAgfSxcclxuICAgIF9jaGFuZ2U6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB0aGlzLl9zZW5kKGUsIHRoaXMuJGlucHV0LmdldCgpLmZpbGVzKTtcclxuICAgIH0sXHJcbiAgICBfZHJvcDogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLl9zZW5kKGUpO1xyXG4gICAgfSxcclxuICAgIF9kcmFnb3ZlcjogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLl9zZXRTdGF0dXMoJ2hvdmVyJyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIF9kcmFnbGVhdmU6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlU3RhdHVzKCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzZXRcclxuICAgIF9zZXRTdGF0dXM6IGZ1bmN0aW9uKHN0YXR1cykge1xyXG4gICAgICAgIGlmICh0aGlzLnAuaW5wdXQgfHwgIXRoaXMucC5ib3gpIHJldHVybjtcclxuICAgICAgICB0aGlzLl9yZW1vdmVTdGF0dXMoKTtcclxuICAgICAgICB0aGlzLiRib3guYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZvcm0tdXBsb2FkLScgKyBzdGF0dXMpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyByZW1vdmVcclxuICAgIF9yZW1vdmVTdGF0dXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnAuaW5wdXQgfHwgIXRoaXMucC5ib3gpIHJldHVybjtcclxuICAgICAgICB2YXIgc3RhdHVzID0gWydob3ZlcicsICdlcnJvciddO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdHVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGJveC5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctZm9ybS11cGxvYWQtJyArIHN0YXR1c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzZW5kXHJcbiAgICBfc2VuZDogZnVuY3Rpb24oZSwgZmlsZXMpIHtcclxuICAgICAgICBmaWxlcyA9ICBmaWxlcyB8fCBlLmRhdGFUcmFuc2Zlci5maWxlcztcclxuXHJcbiAgICAgICAgdmFyIGRhdGEgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuX2dldFVwbG9hZFBhcmFtKCk7XHJcblxyXG4gICAgICAgIGRhdGEgPSB0aGlzLl9idWlsZERhdGEobmFtZSwgZmlsZXMsIGRhdGEpO1xyXG4gICAgICAgIGRhdGEgPSB0aGlzLmFwcC51dGlscy5leHRlbmREYXRhKGRhdGEsIHRoaXMucC5kYXRhKTtcclxuXHJcbiAgICAgICAgLy8gc2VuZCBkYXRhXHJcbiAgICAgICAgdGhpcy5fc2VuZERhdGEoZSwgZmlsZXMsIGRhdGEpO1xyXG4gICAgfSxcclxuICAgIF9zZW5kRGF0YTogZnVuY3Rpb24oZSwgZmlsZXMsIGRhdGEpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMucC51cmwgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhpcy5wLnVybC5jYWxsKHRoaXMuYXBwLCB0aGlzLCB7IGRhdGE6IGRhdGEsIGZpbGVzOiBmaWxlcywgZTogZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnByb2dyZXNzLnNob3coKTtcclxuICAgICAgICAgICAgdGhpcy5hamF4LnBvc3Qoe1xyXG4gICAgICAgICAgICAgICAgdXJsOiB0aGlzLnAudXJsLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgICAgIGJlZm9yZTogZnVuY3Rpb24oeGhyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5hcHAuYnJvYWRjYXN0KCd1cGxvYWQuYmVmb3JlLnNlbmQnLCB7IHhocjogeGhyLCBkYXRhOiBkYXRhLCBmaWxlczogZmlsZXMsIGU6IGUgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmlzU3RvcHBlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwLnByb2dyZXNzLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29tcGxldGUocmVzcG9uc2UsIGUpO1xyXG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gY29tcGxldGVcclxuICAgIF9jb21wbGV0ZTogZnVuY3Rpb24ocmVzcG9uc2UsIGUpIHtcclxuICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuZXJyb3IpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0U3RhdHVzKCdlcnJvcicpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucC5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCd1cGxvYWQuZXJyb3InLCB7IHJlc3BvbnNlOiByZXNwb25zZSB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmFwaSh0aGlzLnAuZXJyb3IsIHJlc3BvbnNlLCBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU3RhdHVzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgndXBsb2FkLmNvbXBsZXRlJywgeyByZXNwb25zZTogcmVzcG9uc2UgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5hcGkodGhpcy5wLnN1Y2Nlc3MsIHJlc3BvbnNlLCBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLmFwcC5wcm9ncmVzcy5oaWRlLmJpbmQodGhpcy5hcHApLCA1MDApO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdwcm9ncmVzcycsIHtcclxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuaGlkZSgpO1xyXG4gICAgfSxcclxuICAgIHNob3c6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuaGlkZSgpO1xyXG5cclxuICAgICAgICB0aGlzLiRwcm9ncmVzcyA9IHRoaXMuZG9tKCc8ZGl2PicpO1xyXG4gICAgICAgIHRoaXMuJHByb2dyZXNzLmF0dHIoJ2lkJywgdGhpcy5wcmVmaXggKyAnLXByb2dyZXNzJyk7XHJcbiAgICAgICAgdGhpcy4kcHJvZ3Jlc3MuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWVkaXRvci1wcm9ncmVzcycpO1xyXG5cclxuICAgICAgICB0aGlzLiRwcm9ncmVzc0JhciA9IHRoaXMuZG9tKCc8c3Bhbj4nKTtcclxuICAgICAgICB0aGlzLiRwcm9ncmVzcy5hcHBlbmQodGhpcy4kcHJvZ3Jlc3NCYXIpO1xyXG4gICAgICAgIHRoaXMuYXBwLiRib2R5LmFwcGVuZCh0aGlzLiRwcm9ncmVzcyk7XHJcbiAgICB9LFxyXG4gICAgaGlkZTogZnVuY3Rpb24oc2V0dGluZ3MpIHtcclxuICAgICAgICB0aGlzLmFwcC4kYm9keS5maW5kKCcjJyArIHRoaXMucHJlZml4ICsgJy1wcm9ncmVzcycpLnJlbW92ZSgpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdzeW5jJywge1xyXG4gICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuc3luY2VkSHRtbCA9IHRoaXMuYXBwLiRlbGVtZW50LnZhbCgpO1xyXG4gICAgfSxcclxuICAgIHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmVkaXRvci5zeW5jKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBodG1sID0gdGhpcy5fZ2V0SHRtbCgpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzKGh0bWwpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0aGlzLl9zeW5jKGh0bWwpOyB9LmJpbmQodGhpcyksIDIwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGludm9rZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLl9nZXRIdG1sKCk7XHJcbiAgICAgICAgdGhpcy5zeW5jZWRIdG1sID0gaHRtbDtcclxuICAgICAgICB0aGlzLl9zeW5jKGh0bWwpO1xyXG4gICAgfSxcclxuICAgIGlzOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgdmFyIHN5bmMgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5zeW5jZWRIdG1sICE9PSBodG1sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3luY2VkSHRtbCA9IGh0bWw7XHJcbiAgICAgICAgICAgIHN5bmMgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN5bmM7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9nZXRIdG1sOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaHRtbCA9IHRoaXMuYXBwLmVkaXRvci5nZXRMYXlvdXQoKS5odG1sKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnBhcnNlci51bnBhcnNlKGh0bWwpO1xyXG4gICAgfSxcclxuICAgIF9zeW5jOiBmdW5jdGlvbihodG1sKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5hcHAuYnJvYWRjYXN0KCdlZGl0b3IuYmVmb3JlLmNoYW5nZScsIHsgaHRtbDogaHRtbCB9KTtcclxuICAgICAgICBpZiAoIWV2ZW50LmlzU3RvcHBlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLiRlbGVtZW50LnZhbChldmVudC5nZXQoJ2h0bWwnKSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmF1dG9zYXZlLnNlbmQoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuc3RhdGUudHJpZ2dlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2VkaXRvci5jaGFuZ2UnLCBldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdhdXRvc2F2ZScsIHtcclxuICAgIHNlbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuYXV0b3NhdmUudXJsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbmRpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9nZXROYW1lOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbmFtZTtcclxuICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9zYXZlLm5hbWUpIHtcclxuICAgICAgICAgICAgbmFtZSA9IHRoaXMub3B0cy5hdXRvc2F2ZS5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbmFtZSA9IHRoaXMuYXBwLiRlbGVtZW50LmF0dHIoJ25hbWUnKTtcclxuICAgICAgICAgICAgbmFtZSA9ICghbmFtZSkgPyAnY29udGVudCcgKyB0aGlzLnV1aWQgOiBuYW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICB9LFxyXG4gICAgX3NlbmRpbmc6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5fZ2V0TmFtZSgpO1xyXG4gICAgICAgIHZhciBkYXRhID0ge307XHJcbiAgICAgICAgZGF0YVtuYW1lXSA9IHRoaXMuYXBwLiRlbGVtZW50LnZhbCgpO1xyXG4gICAgICAgIGRhdGEgPSB0aGlzLmFwcC51dGlscy5leHRlbmREYXRhKGRhdGEsIHRoaXMub3B0cy5hdXRvc2F2ZS5kYXRhKTtcclxuXHJcbiAgICAgICAgdGhpcy5hamF4LnBvc3Qoe1xyXG4gICAgICAgICAgICB1cmw6IHRoaXMub3B0cy5hdXRvc2F2ZS51cmwsXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgIGJlZm9yZTogZnVuY3Rpb24oeGhyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLmFwcC5icm9hZGNhc3QoJ2F1dG9zYXZlLmJlZm9yZS5zZW5kJywgeyB4aHI6IHhociwgbmFtZTogbmFtZSwgZGF0YTogZGF0YSB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5pc1N0b3BwZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcGxldGUocmVzcG9uc2UsIG5hbWUsIGRhdGEpO1xyXG4gICAgICAgICAgICB9LmJpbmQodGhpcylcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBfY29tcGxldGU6IGZ1bmN0aW9uKHJlc3BvbnNlLCBuYW1lLCBkYXRhKSB7XHJcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gKHJlc3BvbnNlICYmIHJlc3BvbnNlLmVycm9yKSA/ICdhdXRvc2F2ZS5lcnJvcicgOiAnYXV0b3NhdmUuc2VuZCc7XHJcbiAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KGNhbGxiYWNrLCB7IG5hbWU6IG5hbWUsIGRhdGE6IGRhdGEsIHJlc3BvbnNlOiByZXNwb25zZSB9KTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAndGlkeScsIHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge30sXHJcbiAgICBwYXJzZTogZnVuY3Rpb24oY29kZSkge1xyXG5cclxuICAgICAgICAvLyBjbGVhbiBzZXR1cFxyXG4gICAgICAgIHZhciBvd25MaW5lID0gW107XHJcbiAgICAgICAgdmFyIGNvbnRPd25MaW5lID0gW107XHJcbiAgICAgICAgdmFyIG5ld0xldmVsID0gWydwJywgJ3VsJywgJ29sJywgJ2RpdicsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdibG9ja3F1b3RlJywgJ2ZpZ3VyZScsICdmaWdjYXB0aW9uJywgJ3RhYmxlJywgJ3RoZWFkJywgJ3Rib2R5JywgJ3Rmb290JywgJ3RyJywgJ3RkJywgJ3RoJ107XHJcblxyXG4gICAgICAgIHRoaXMubGluZUJlZm9yZSA9IG5ldyBSZWdFeHAoJ148KC8/JyArIG93bkxpbmUuam9pbignfC8/JyApICsgJ3wnICsgY29udE93bkxpbmUuam9pbignfCcpICsgJylbID5dJyk7XHJcbiAgICAgICAgdGhpcy5saW5lQWZ0ZXIgPSBuZXcgUmVnRXhwKCdePChicnwvPycgKyBvd25MaW5lLmpvaW4oJ3wvPycgKSArICd8LycgKyBjb250T3duTGluZS5qb2luKCd8LycpICsgJylbID5dJyk7XHJcbiAgICAgICAgdGhpcy5uZXdMZXZlbCA9IG5ldyBSZWdFeHAoJ148Lz8oJyArIG5ld0xldmVsLmpvaW4oJ3wnICkgKyAnKVsgPl0nKTtcclxuXHJcbiAgICAgICAgdmFyIGkgPSAwLFxyXG4gICAgICAgIGNvZGVMZW5ndGggPSBjb2RlLmxlbmd0aCxcclxuICAgICAgICBwb2ludCA9IDAsXHJcbiAgICAgICAgc3RhcnQgPSBudWxsLFxyXG4gICAgICAgIGVuZCA9IG51bGwsXHJcbiAgICAgICAgdGFnID0gJycsXHJcbiAgICAgICAgb3V0ID0gJycsXHJcbiAgICAgICAgY29udCA9ICcnO1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFubGV2ZWwgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKDsgaSA8IGNvZGVMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBwb2ludCA9IGk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBubyBtb3JlIHRhZ3MsIGNvcHkgYW5kIGV4aXRcclxuICAgICAgICAgICAgaWYgKC0xID09PSBjb2RlLnN1YnN0cihpKS5pbmRleE9mKCAnPCcgKSkge1xyXG4gICAgICAgICAgICAgICAgb3V0ICs9IGNvZGUuc3Vic3RyKGkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbmlzaChvdXQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjb3B5IHZlcmJhdGltIHVudGlsIGEgdGFnXHJcbiAgICAgICAgICAgIHdoaWxlIChwb2ludCA8IGNvZGVMZW5ndGggJiYgY29kZS5jaGFyQXQocG9pbnQpICE9PSAnPCcpIHtcclxuICAgICAgICAgICAgICAgIHBvaW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpICE9PSBwb2ludCkge1xyXG4gICAgICAgICAgICAgICAgY29udCA9IGNvZGUuc3Vic3RyKGksIHBvaW50IC0gaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnQubWF0Y2goL15cXHN7Mix9JC9nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgnXFxuJyA9PT0gb3V0LmNoYXJBdChvdXQubGVuZ3RoIC0gMSkpIG91dCArPSB0aGlzLmdldFRhYnMoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgnXFxuJyA9PT0gY29udC5jaGFyQXQoMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0ICs9ICdcXG4nICsgdGhpcy5nZXRUYWJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnQgPSBjb250LnJlcGxhY2UoL15cXHMrLywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0ICs9IGNvbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnQubWF0Y2goL1xcbi8pKSBvdXQgKz0gJ1xcbicgKyB0aGlzLmdldFRhYnMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhcnQgPSBwb2ludDtcclxuXHJcbiAgICAgICAgICAgIC8vIGZpbmQgdGhlIGVuZCBvZiB0aGUgdGFnXHJcbiAgICAgICAgICAgIHdoaWxlIChwb2ludCA8IGNvZGVMZW5ndGggJiYgJz4nICE9PSBjb2RlLmNoYXJBdChwb2ludCkpIHtcclxuICAgICAgICAgICAgICAgIHBvaW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRhZyA9IGNvZGUuc3Vic3RyKHN0YXJ0LCBwb2ludCAtIHN0YXJ0KTtcclxuICAgICAgICAgICAgaSA9IHBvaW50O1xyXG5cclxuICAgICAgICAgICAgdmFyIHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoJyEtLScgPT09IHRhZy5zdWJzdHIoMSwgMykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGFnLm1hdGNoKC8tLSQvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgnLS0+JyAhPT0gY29kZS5zdWJzdHIocG9pbnQsIDMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50ICs9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnID0gY29kZS5zdWJzdHIoc3RhcnQsIHBvaW50IC0gc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBwb2ludDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJ1xcbicgIT09IG91dC5jaGFyQXQob3V0Lmxlbmd0aCAtIDEpKSBvdXQgKz0gJ1xcbic7XHJcblxyXG4gICAgICAgICAgICAgICAgb3V0ICs9IHRoaXMuZ2V0VGFicygpO1xyXG4gICAgICAgICAgICAgICAgb3V0ICs9IHRhZyArICc+XFxuJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgnIScgPT09IHRhZ1sxXSkge1xyXG4gICAgICAgICAgICAgICAgb3V0ID0gdGhpcy5wbGFjZVRhZyh0YWcgKyAnPicsIG91dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoJz8nID09PSB0YWdbMV0pIHtcclxuICAgICAgICAgICAgICAgIG91dCArPSB0YWcgKyAnPlxcbic7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodCA9PT0gdGFnLm1hdGNoKC9ePChzY3JpcHR8c3R5bGV8cHJlKS9pKSkge1xyXG4gICAgICAgICAgICAgICAgdFsxXSA9IHRbMV0udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIHRhZyA9IHRoaXMuY2xlYW5UYWcodGFnKTtcclxuICAgICAgICAgICAgICAgIG91dCA9IHRoaXMucGxhY2VUYWcodGFnLCBvdXQpO1xyXG4gICAgICAgICAgICAgICAgZW5kID0gU3RyaW5nKGNvZGUuc3Vic3RyKGkgKyAxKSkudG9Mb3dlckNhc2UoKS5pbmRleE9mKCc8LycgKyB0WzFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udCA9IGNvZGUuc3Vic3RyKGkgKyAxLCBlbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgKz0gZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIG91dCArPSBjb250O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGFnID0gdGhpcy5jbGVhblRhZyh0YWcpO1xyXG4gICAgICAgICAgICAgICAgb3V0ID0gdGhpcy5wbGFjZVRhZyh0YWcsIG91dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaChvdXQpO1xyXG4gICAgfSxcclxuICAgIGdldFRhYnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzID0gJyc7XHJcbiAgICAgICAgZm9yICggdmFyIGogPSAwOyBqIDwgdGhpcy5jbGVhbmxldmVsOyBqKysgKSB7XHJcbiAgICAgICAgICAgIHMgKz0gJyAgICAnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHM7XHJcbiAgICB9LFxyXG4gICAgZmluaXNoOiBmdW5jdGlvbihjb2RlKSB7XHJcbiAgICAgICAgY29kZSA9IGNvZGUucmVwbGFjZSgvXFxuXFxzKlxcbi9nLCAnXFxuJyk7XHJcbiAgICAgICAgY29kZSA9IGNvZGUucmVwbGFjZSgvXltcXHNcXG5dKi8sICcnKTtcclxuICAgICAgICBjb2RlID0gY29kZS5yZXBsYWNlKC9bXFxzXFxuXSokLywgJycpO1xyXG4gICAgICAgIGNvZGUgPSBjb2RlLnJlcGxhY2UoLzxzY3JpcHQoLio/KT5cXG48XFwvc2NyaXB0Pi9naSwgJzxzY3JpcHQkMT48L3NjcmlwdD4nKTtcclxuXHJcbiAgICAgICAgdGhpcy5jbGVhbmxldmVsID0gMDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGNvZGU7XHJcbiAgICB9LFxyXG4gICAgY2xlYW5UYWc6IGZ1bmN0aW9uICh0YWcpIHtcclxuICAgICAgICB2YXIgdGFnb3V0ID0gJyc7XHJcbiAgICAgICAgdGFnID0gdGFnLnJlcGxhY2UoL1xcbi9nLCAnICcpO1xyXG4gICAgICAgIHRhZyA9IHRhZy5yZXBsYWNlKC9cXHN7Mix9L2csICcgJyk7XHJcbiAgICAgICAgdGFnID0gdGFnLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcgJyk7XHJcblxyXG4gICAgICAgIHZhciBzdWZmaXggPSAnJztcclxuICAgICAgICBpZiAodGFnLm1hdGNoKC9cXC8kLykpIHtcclxuICAgICAgICAgICAgc3VmZml4ID0gJy8nO1xyXG4gICAgICAgICAgICB0YWcgPSB0YWcucmVwbGFjZSgvXFwvKyQvLCAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbTtcclxuICAgICAgICB3aGlsZSAobSA9IC9cXHMqKFtePSBdKykoPzo9KChbJ1wiJ10pLio/XFwzfFteIF0rKSk/Ly5leGVjKHRhZykpIHtcclxuICAgICAgICAgICAgaWYgKG1bMl0pIHRhZ291dCArPSBtWzFdLnRvTG93ZXJDYXNlKCkgKyAnPScgKyBtWzJdO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChtWzFdKSB0YWdvdXQgKz0gbVsxXS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICAgICAgdGFnb3V0ICs9ICcgJztcclxuICAgICAgICAgICAgdGFnID0gdGFnLnN1YnN0cihtWzBdLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGFnb3V0LnJlcGxhY2UoL1xccyokLywgJycpICsgc3VmZml4ICsgJz4nO1xyXG4gICAgfSxcclxuICAgIHBsYWNlVGFnOiBmdW5jdGlvbiAodGFnLCBvdXQpIHtcclxuICAgICAgICB2YXIgbmwgPSB0YWcubWF0Y2godGhpcy5uZXdMZXZlbCk7XHJcblxyXG4gICAgICAgIGlmICh0YWcubWF0Y2godGhpcy5saW5lQmVmb3JlKSB8fCBubCkge1xyXG4gICAgICAgICAgICBvdXQgPSBvdXQucmVwbGFjZSgvXFxzKiQvLCAnJyk7XHJcbiAgICAgICAgICAgIG91dCArPSAnXFxuJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChubCAmJiAnLycgPT09IHRhZy5jaGFyQXQoMSkpIHRoaXMuY2xlYW5sZXZlbC0tO1xyXG4gICAgICAgIGlmICgnXFxuJyA9PT0gb3V0LmNoYXJBdChvdXQubGVuZ3RoIC0gMSkpIG91dCArPSB0aGlzLmdldFRhYnMoKTtcclxuICAgICAgICBpZiAobmwgJiYgJy8nICE9PSB0YWcuY2hhckF0KDEpKSB0aGlzLmNsZWFubGV2ZWwrKztcclxuXHJcbiAgICAgICAgb3V0ICs9IHRhZztcclxuXHJcbiAgICAgICAgaWYgKHRhZy5tYXRjaCh0aGlzLmxpbmVBZnRlcikgfHwgdGFnLm1hdGNoKHRoaXMubmV3TGV2ZWwpKSB7XHJcbiAgICAgICAgICAgIG91dCA9IG91dC5yZXBsYWNlKC8gKiQvLCAnJyk7XHJcbiAgICAgICAgICAgIG91dCArPSAnXFxuJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ2F1dG9saW5rJywge1xyXG4gICAgcGFyc2U6IGZ1bmN0aW9uKGh0bWwpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5wYXN0ZS5hdXRvbGluaykge1xyXG4gICAgICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzdG9yZWRDb21tZW50cyA9IFtdO1xyXG5cclxuICAgICAgICAvLyBzdG9yZSBjb21tZW50c1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC5jb250ZW50LnN0b3JlQ29tbWVudHMoaHRtbCwgc3RvcmVkQ29tbWVudHMpO1xyXG5cclxuICAgICAgICAvLyByZW1vdmUgZG9jdHlwZSB0YWdcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZW1vdmVEb2N0eXBlKGh0bWwpO1xyXG5cclxuICAgICAgICB2YXIgdGFncyA9IFsnZmlndXJlJywgJ2h0bWwnLCAnZm9ybScsICdwcmUnLCAnaWZyYW1lJywgJ2NvZGUnLCAnYScsICdpbWcnLCAnbGluaycsICdzY3JpcHQnXTtcclxuICAgICAgICB2YXIgc3RvcmVkID0gW107XHJcbiAgICAgICAgdmFyIHogPSAwO1xyXG5cclxuICAgICAgICAvLyBzdG9yZSB0YWdzXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciByZVRhZ3MgPSAodGFnc1tpXSA9PT0gJ2ltZycgfHwgdGFnc1tpXSA9PT0gJ2h0bWwnKSA/ICc8JyArIHRhZ3NbaV0gKyAnW14+XSo+JyA6ICc8JyArIHRhZ3NbaV0gKyAnW14+XSo+KFtcXFxcd1xcXFxXXSo/KTwvJyArIHRhZ3NbaV0gKyAnPic7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaGVkID0gaHRtbC5tYXRjaChuZXcgUmVnRXhwKHJlVGFncywgJ2dpJykpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgbWF0Y2hlZC5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UobWF0Y2hlZFt5XSwgJyMjIyMjcmVwbGFjZXBhcnNlJyArIHogKyAnIyMjIyMnKTtcclxuICAgICAgICAgICAgICAgICAgICBzdG9yZWQucHVzaChtYXRjaGVkW3ldKTtcclxuICAgICAgICAgICAgICAgICAgICB6Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxpbmtzXHJcbiAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgnJmFtcDsnLCAnJicpO1xyXG4gICAgICAgIGlmIChodG1sLm1hdGNoKHRoaXMub3B0cy5yZWdleC51cmwpICYmICFodG1sLm1hdGNoKHRoaXMub3B0cy5yZWdleC5pbWFnZXVybCkpIHtcclxuICAgICAgICAgICAgaHRtbCA9IHRoaXMuX2Zvcm1hdExpbmtzKGh0bWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmVzdG9yZVxyXG4gICAgICAgIGh0bWwgPSB0aGlzLl9yZXN0b3JlUmVwbGFjZWQoc3RvcmVkLCBodG1sKTtcclxuICAgICAgICBodG1sID0gdGhpcy5hcHAuY29udGVudC5yZXN0b3JlQ29tbWVudHMoaHRtbCwgc3RvcmVkQ29tbWVudHMpO1xyXG5cclxuICAgICAgICAvLyByZXBlYXQgZm9yIG5lc3RlZCB0YWdzXHJcbiAgICAgICAgaHRtbCA9IHRoaXMuX3Jlc3RvcmVSZXBsYWNlZChzdG9yZWQsIGh0bWwpO1xyXG5cclxuICAgICAgICByZXR1cm4gaHRtbDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2Zvcm1hdExpbmtzOiBmdW5jdGlvbihjb250ZW50KSB7XHJcblxyXG4gICAgICAgIHZhciBtYXRjaGVzID0gY29udGVudC5tYXRjaCh0aGlzLm9wdHMucmVnZXgudXJsKTtcclxuXHJcbiAgICAgICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0Y2hlcy5sZW5ndGg7IGkrKylcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHZhciBocmVmID0gbWF0Y2hlc1tpXSwgdGV4dCA9IGhyZWY7XHJcbiAgICAgICAgICAgIHZhciBsaW5rUHJvdG9jb2wgPSAoaHJlZi5tYXRjaCgvKGh0dHBzP3xmdHApOlxcL1xcLy9pKSAhPT0gbnVsbCkgPyAnJyA6ICdodHRwOi8vJztcclxuICAgICAgICAgICAgdmFyIHJlZ2V4QiA9IChbXCIvXCIsIFwiJlwiLCBcIj1cIl0uaW5kZXhPZihocmVmLnNsaWNlKC0xKSkgIT09IC0xKSA/ICcnIDogJ1xcXFxiJztcclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9ICh0aGlzLm9wdHMucGFzdGUubGlua1RhcmdldCAhPT0gZmFsc2UpID8gJyB0YXJnZXQ9XCInICsgdGhpcy5vcHRzLnBhc3RlLmxpbmtUYXJnZXQgKyAnXCInIDogJyc7XHJcblxyXG4gICAgICAgICAgICB0ZXh0ID0gKHRleHQubGVuZ3RoID4gdGhpcy5vcHRzLmxpbmsuc2l6ZSkgPyB0ZXh0LnN1YnN0cmluZygwLCB0aGlzLm9wdHMubGluay5zaXplKSArICcuLi4nIDogdGV4dDtcclxuICAgICAgICAgICAgdGV4dCA9ICh0ZXh0LnNlYXJjaCgnJScpID09PSAtMSkgPyBkZWNvZGVVUklDb21wb25lbnQodGV4dCkgOiB0ZXh0O1xyXG5cclxuICAgICAgICAgICAgLy8gZXNjYXBpbmcgdXJsXHJcbiAgICAgICAgICAgIHZhciByZWdleHAgPSAnKCcgKyBocmVmLnJlcGxhY2UoL1stW1xcXS97fSgpKis/LlxcXFxeJHxdL2csICdcXFxcJCYnKSArIHJlZ2V4QiArICcpJztcclxuICAgICAgICAgICAgb2JqW3JlZ2V4cF0gPSAnPGEgaHJlZj1cIicgKyBsaW5rUHJvdG9jb2wgKyBocmVmLnRyaW0oKSArICdcIicgKyB0YXJnZXQgKyAnPicgKyB0ZXh0LnRyaW0oKSArICc8L2E+JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlcGxhY2VcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UobmV3IFJlZ0V4cChrZXksICdnJyksIG9ialtrZXldKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgfSxcclxuICAgIF9yZXN0b3JlUmVwbGFjZWQ6IGZ1bmN0aW9uKHN0b3JlZCwgaHRtbCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RvcmVkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UoJyMjIyMjcmVwbGFjZXBhcnNlJyArIGkgKyAnIyMjIyMnLCBzdG9yZWRbaV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ3N0YXRlJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGFzc2VkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnVuZG9TdG9yYWdlID0gW107XHJcbiAgICAgICAgdGhpcy5yZWRvU3RvcmFnZSA9IFtdO1xyXG4gICAgfSxcclxuICAgIGxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLnRyaWdnZXIodHJ1ZSk7XHJcbiAgICB9LFxyXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgfSxcclxuICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5wYXNzZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudW5kb1N0b3JhZ2UgPSBbXTtcclxuICAgICAgICB0aGlzLnJlZG9TdG9yYWdlID0gW107XHJcbiAgICB9LFxyXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51bmRvU3RvcmFnZTtcclxuICAgIH0sXHJcbiAgICBhZGQ6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoKGUgJiYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgdGhpcy5faXNVbmRvKGUpIHx8IHRoaXMuX2lzUmVkbyhlKSkpIHx8ICF0aGlzLmFwcC5vYnNlcnZlci50cmlnZ2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHN0YXRlXHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuX2NyZWF0ZVN0YXRlKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0U3RhdGUodGhpcy5zdGF0ZSwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRyaWdnZXI6IGZ1bmN0aW9uKHN0YXJ0KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhc3NlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzdG9yYWdlXHJcbiAgICAgICAgdmFyIHN0b3JhZ2UgPSB0aGlzLl9jcmVhdGVTdGF0ZSgpO1xyXG5cclxuICAgICAgICAvLyBzdG9yYWdlXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUpIHtcclxuICAgICAgICAgICAgc3RvcmFnZSA9IHRoaXMuc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLnN0YXRlICYmICFzdGFydCkge1xyXG4gICAgICAgICAgICBzdG9yYWdlID0gdGhpcy5zdG9yYWdlO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fYWRkU3RhdGUoc3RvcmFnZSk7XHJcblxyXG4gICAgICAgIC8vIHByZXZpb3VzIHN0YXRlXHJcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gdGhpcy5fY3JlYXRlU3RhdGUoKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgbGlzdGVuOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgLy8gdW5kb1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1VuZG8oZSkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLnVuZG8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlZG9cclxuICAgICAgICBlbHNlIGlmICh0aGlzLl9pc1JlZG8oZSkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlZG8oKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBhc3NlZCA9IHRydWU7XHJcbiAgICB9LFxyXG4gICAgdW5kbzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9oYXNVbmRvKCkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5wYXNzZWQgPSBmYWxzZTtcclxuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9nZXRVbmRvKCk7XHJcbiAgICAgICAgdGhpcy5fc2V0UmVkbygpO1xyXG5cclxuICAgICAgICB2YXIgJHBhcnNlZCA9IHRoaXMuYXBwLnBhcnNlci5wYXJzZShzdGF0ZVswXSk7XHJcbiAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmdldExheW91dCgpLmh0bWwoJHBhcnNlZC5jaGlsZHJlbigpKTtcclxuICAgICAgICB0aGlzLl9yZWJ1aWxkKHN0YXRlLCAndW5kbycpO1xyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgZWwgPSAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNFZGl0YWJsZSgpKSA/IGluc3RhbmNlLmdldEJsb2NrKCkgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAub2Zmc2V0LnNldChlbCwgc3RhdGVbMV0pO1xyXG4gICAgfSxcclxuICAgIHJlZG86IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5faGFzUmVkbygpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMucGFzc2VkID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5yZWRvU3RvcmFnZS5wb3AoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYWRkU3RhdGUoc3RhdGUpO1xyXG5cclxuICAgICAgICB2YXIgJHBhcnNlZCA9IHRoaXMuYXBwLnBhcnNlci5wYXJzZShzdGF0ZVswXSk7XHJcbiAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmdldExheW91dCgpLmh0bWwoJHBhcnNlZC5jaGlsZHJlbigpKTtcclxuICAgICAgICB0aGlzLl9yZWJ1aWxkKHN0YXRlLCAncmVkbycpO1xyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgZWwgPSAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNFZGl0YWJsZSgpKSA/IGluc3RhbmNlLmdldEJsb2NrKCkgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAub2Zmc2V0LnNldChlbCwgc3RhdGVbMV0pO1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX3JlYnVpbGQ6IGZ1bmN0aW9uKHN0YXRlLCB0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmJ1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmdldExheW91dCgpLmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLWJsb2NrLXN0YXRlJykuZWFjaChmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQoJG5vZGUpO1xyXG4gICAgICAgIH0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnc3RhdGUuJyArIHR5cGUsIHsgaHRtbDogc3RhdGVbMF0sIG9mZnNldDogc3RhdGVbMV0gfSk7XHJcbiAgICB9LFxyXG4gICAgX2lzVW5kbzogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHZhciBrZXkgPSBlLndoaWNoO1xyXG4gICAgICAgIHZhciBjdHJsID0gZS5jdHJsS2V5IHx8IGUubWV0YUtleTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChjdHJsICYmIGtleSA9PT0gOTAgJiYgIWUuc2hpZnRLZXkgJiYgIWUuYWx0S2V5KTtcclxuICAgIH0sXHJcbiAgICBfaXNSZWRvOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGUud2hpY2g7XHJcbiAgICAgICAgdmFyIGN0cmwgPSBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5O1xyXG5cclxuICAgICAgICByZXR1cm4gKGN0cmwgJiYgKChrZXkgPT09IDkwICYmIGUuc2hpZnRLZXkpIHx8IChrZXkgPT09IDg5ICYmICFlLnNoaWZ0S2V5KSkgJiYgIWUuYWx0S2V5KTtcclxuICAgIH0sXHJcbiAgICBfaGFzVW5kbzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnVuZG9TdG9yYWdlLmxlbmd0aCAhPT0gMCk7XHJcbiAgICB9LFxyXG4gICAgX2hhc1JlZG86IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5yZWRvU3RvcmFnZS5sZW5ndGggIT09IDApO1xyXG4gICAgfSxcclxuICAgIF9nZXRVbmRvOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMudW5kb1N0b3JhZ2UubGVuZ3RoID09PSAxKSA/IHRoaXMudW5kb1N0b3JhZ2VbMF0gOiB0aGlzLnVuZG9TdG9yYWdlLnBvcCgpO1xyXG4gICAgfSxcclxuICAgIF9jcmVhdGVTdGF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0TGF5b3V0KCkuaHRtbCgpO1xyXG4gICAgICAgIGh0bWwgPSB0aGlzLmFwcC51dGlscy53cmFwKGh0bWwsIGZ1bmN0aW9uKCR3KSB7XHJcbiAgICAgICAgICAgICR3LmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLWJsb2NrLWZvY3VzJykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWJsb2NrLXN0YXRlJyk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcbiAgICAgICAgdmFyIGVsID0gKGluc3RhbmNlICYmIGluc3RhbmNlLmlzRWRpdGFibGUoKSkgPyBpbnN0YW5jZS5nZXRCbG9jaygpIDogZmFsc2U7XHJcbiAgICAgICAgdmFyIHVucGFyc2VkID0gdGhpcy5hcHAucGFyc2VyLnVucGFyc2UoaHRtbCk7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuYXBwLm9mZnNldC5nZXQoZWwpO1xyXG5cclxuICAgICAgICByZXR1cm4geyBodG1sOiB1bnBhcnNlZCwgb2Zmc2V0OiBvZmZzZXQgfTtcclxuICAgIH0sXHJcbiAgICBfc2V0U3RhdGU6IGZ1bmN0aW9uKHN0YXRlLCBwb3MpIHtcclxuICAgICAgICB0aGlzLnVuZG9TdG9yYWdlW3Bvc10gPSBbc3RhdGUuaHRtbCwgc3RhdGUub2Zmc2V0XTtcclxuICAgIH0sXHJcbiAgICBfYWRkU3RhdGU6IGZ1bmN0aW9uKHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGxhc3QgPSB0aGlzLnVuZG9TdG9yYWdlW3RoaXMudW5kb1N0b3JhZ2UubGVuZ3RoLTFdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbGFzdCA9PT0gJ3VuZGVmaW5lZCcgfHwgbGFzdFswXSAhPT0gc3RhdGUuaHRtbCkge1xyXG4gICAgICAgICAgICB0aGlzLnVuZG9TdG9yYWdlLnB1c2goW3N0YXRlLmh0bWwsIHN0YXRlLm9mZnNldF0pO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVPdmVyU3RvcmFnZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGFzdFsxXSA9IHN0YXRlLm9mZnNldDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3NldFJlZG86IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX2NyZWF0ZVN0YXRlKCk7XHJcblxyXG4gICAgICAgIHRoaXMucmVkb1N0b3JhZ2UucHVzaChbc3RhdGUuaHRtbCwgc3RhdGUub2Zmc2V0XSk7XHJcbiAgICAgICAgdGhpcy5yZWRvU3RvcmFnZSA9IHRoaXMucmVkb1N0b3JhZ2Uuc2xpY2UoMCwgdGhpcy5vcHRzLnN0YXRlLmxpbWl0KTtcclxuICAgIH0sXHJcbiAgICBfcmVtb3ZlT3ZlclN0b3JhZ2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnVuZG9TdG9yYWdlLmxlbmd0aCA+IHRoaXMub3B0cy5zdGF0ZS5saW1pdCkge1xyXG4gICAgICAgICAgICB0aGlzLnVuZG9TdG9yYWdlID0gdGhpcy51bmRvU3RvcmFnZS5zbGljZSgwLCAodGhpcy51bmRvU3RvcmFnZS5sZW5ndGggLSB0aGlzLm9wdHMuc3RhdGUubGltaXQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdzdGF0dXNiYXInLCB7XHJcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLml0ZW1zID0ge307XHJcbiAgICB9LFxyXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2J1aWxkKCk7XHJcbiAgICB9LFxyXG4gICAgYWRkOiBmdW5jdGlvbihuYW1lLCBodG1sKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKG5hbWUsIGh0bWwpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZTogZnVuY3Rpb24obmFtZSwgaHRtbCkge1xyXG4gICAgICAgIHZhciAkaXRlbTtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuaXRlbXNbbmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICRpdGVtID0gdGhpcy5pdGVtc1tuYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICRpdGVtID0gdGhpcy5kb20oJzxsaT4nKTtcclxuICAgICAgICAgICAgdGhpcy4kc3RhdHVzYmFyLmFwcGVuZCgkaXRlbSk7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXNbbmFtZV0gPSAkaXRlbTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAkaXRlbS5odG1sKGh0bWwpO1xyXG4gICAgfSxcclxuICAgIGdldDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5pdGVtc1tuYW1lXSkgPyB0aGlzLml0ZW1zW25hbWVdIDogdGhpcy5pdGVtcztcclxuICAgIH0sXHJcbiAgICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5pdGVtc1tuYW1lXSkge1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zW25hbWVdLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5pdGVtc1tuYW1lXTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY2xlYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSB7fTtcclxuICAgICAgICB0aGlzLiRzdGF0dXNiYXIuaHRtbCgnJyk7XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJHN0YXR1c2JhciA9IHRoaXMuZG9tKCc8dWw+Jyk7XHJcbiAgICAgICAgdGhpcy4kc3RhdHVzYmFyLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1zdGF0dXNiYXIgJyArIHRoaXMucHJlZml4ICsgJy1zdGF0dXNiYXItJyArIHRoaXMudXVpZCk7XHJcbiAgICAgICAgdGhpcy4kc3RhdHVzYmFyLmF0dHIoJ2RpcicsIHRoaXMub3B0cy5lZGl0b3IuZGlyZWN0aW9uKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuY29udGFpbmVyLmdldCgnc3RhdHVzYmFyJykuYXBwZW5kKHRoaXMuJHN0YXR1c2Jhcik7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ3BvcHVwJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdGFjayA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2J1aWxkKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGREZXB0aCgpO1xyXG4gICAgfSxcclxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX3N0b3BFdmVudHMoKTtcclxuICAgICAgICBpZiAodGhpcy4kcG9wdXApIHtcclxuICAgICAgICAgICAgdGhpcy4kcG9wdXAucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGlzT3BlbjogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHZhciBvcGVuZWQgPSB0aGlzLiRwb3B1cC5oYXNDbGFzcygnb3BlbicpO1xyXG4gICAgICAgIGlmIChuYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5fZ2V0TmFtZSgpID09PSBuYW1lICYmIG9wZW5lZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3BlbmVkO1xyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNPcGVuKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YWNrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcmVzZXQobmFtZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuXHJcbiAgICAgICAgaWYgKHBhcmFtcykge1xyXG4gICAgICAgICAgICBwYXJhbXMuY29sbGFwc2UgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZSBzdGFja1xyXG4gICAgICAgIHRoaXMuc3RhY2sgPSB0aGlzLl9jcmVhdGVTdGFjayhuYW1lLCBwYXJhbXMsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuc3RhY2suc2V0QWN0aXZlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YWNrO1xyXG4gICAgfSxcclxuICAgIGFkZDogZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZVN0YWNrKG5hbWUsIHBhcmFtcyk7XHJcbiAgICB9LFxyXG4gICAgb3BlbjogZnVuY3Rpb24ocGFyYW1zKSB7XHJcbiAgICAgICAgLy8gYWxsIHBvcHVwcyBhcmUgY2xvc2VkXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzT3BlbigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX29wZW4ocGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3VycmVudCBvcGVuXHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5pc09wZW4odGhpcy5uYW1lKSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYW5vdGhlciBpcyBvcGVuZWRcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZShmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX29wZW4ocGFyYW1zLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNsb3NlOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzT3BlbigpKSByZXR1cm47XHJcbiAgICAgICAgaWYgKGUgJiYgdGhpcy5faXNQb3B1cFRhcmdldChlKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBjbG9zZVxyXG4gICAgICAgIHRoaXMuX3N0b3BFdmVudHMoKTtcclxuICAgICAgICB0aGlzLl9yZXNldFRvb2xiYXJUb2dnbGVkQnV0dG9uKCk7XHJcblxyXG4gICAgICAgIC8vIHNlbGVjdGlvblxyXG4gICAgICAgIGlmIChlICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5zZWxlY3Rpb24ucmVzdG9yZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy4kcG9wdXAuaGlkZSgpO1xyXG4gICAgICAgIHRoaXMuX2Nsb3NlZCgpO1xyXG4gICAgfSxcclxuICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRwb3B1cDtcclxuICAgIH0sXHJcbiAgICBnZXRCdXR0b246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJ1dHRvbjtcclxuICAgIH0sXHJcbiAgICBnZXRTdGFjazogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHJldHVybiAobmFtZSkgPyB0aGlzLl9maW5kU3RhY2sobmFtZSkgOiB0aGlzLl9maW5kU3RhY2tBY3RpdmUoKTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIZWFkZXJCYWNrOiBmdW5jdGlvbihzdGFjaykge1xyXG4gICAgICAgIHRoaXMuX2J1aWxkSGVhZGVyQmFjayhzdGFjayk7XHJcbiAgICB9LFxyXG4gICAgY2xvc2VTdGFja3M6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2ZpbmRTdGFja3MoKS5lYWNoKGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGFjayA9ICRub2RlLmRhdGFnZXQoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgICAgIHN0YWNrLmNsb3NlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlUG9zaXRpb246IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB0aGlzLl9idWlsZFBvc2l0aW9uKGUpO1xyXG4gICAgICAgIHRoaXMuX2Nyb3BIZWlnaHQoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gb3BlblxyXG4gICAgX29wZW46IGZ1bmN0aW9uKHBhcmFtcywgYW5pbWF0aW9uKSB7XHJcblxyXG4gICAgICAgIC8vIGlucHV0IGZvY3VzXHJcbiAgICAgICAgdGhpcy5mb2N1cyA9IChwYXJhbXMgJiYgcGFyYW1zLmZvY3VzKSA/IHBhcmFtcy5mb2N1cyA6IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBzZWxlY3Rpb25cclxuICAgICAgICB0aGlzLmFwcC5zZWxlY3Rpb24uc2F2ZSgpO1xyXG5cclxuICAgICAgICAvLyBidWlsZFxyXG4gICAgICAgIHRoaXMuX2J1aWxkQnV0dG9uKHBhcmFtcyk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGROYW1lKCk7XHJcbiAgICAgICAgdGhpcy5fc2V0VG9vbGJhclRvZ2dsZWRCdXR0b24oKTtcclxuICAgICAgICB0aGlzLl9zdGFydEV2ZW50cygpO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ3BvcHVwLmJlZm9yZS5vcGVuJyk7XHJcblxyXG4gICAgICAgIC8vIHJlbmRlciBzdGFja1xyXG4gICAgICAgIHRoaXMuc3RhY2sucmVuZGVyKCk7XHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIGhlYWRlclxyXG4gICAgICAgIHRoaXMuX2J1aWxkSGVhZGVyKCk7XHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIHBvc2l0aW9uXHJcbiAgICAgICAgdGhpcy5fYnVpbGRQb3NpdGlvbigpO1xyXG5cclxuICAgICAgICAvLyBzaG93XHJcbiAgICAgICAgaWYgKGFuaW1hdGlvbiA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhpcy4kcG9wdXAuc2hvdygpO1xyXG4gICAgICAgICAgICB0aGlzLl9vcGVuZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHBvcHVwLmZhZGVJbigxMDAsIHRoaXMuX29wZW5lZC5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGJ1aWxkXHJcbiAgICBfYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJHBvcHVwID0gdGhpcy5kb20oJzxkaXY+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBvcHVwICcgKyB0aGlzLnByZWZpeCArICctcG9wdXAtJyArIHRoaXMudXVpZCkuaGlkZSgpO1xyXG4gICAgICAgIHRoaXMuJHBvcHVwLmF0dHIoJ2RpcicsIHRoaXMub3B0cy5lZGl0b3IuZGlyZWN0aW9uKTtcclxuXHJcbiAgICAgICAgLy8gaGVhZGVyXHJcbiAgICAgICAgdGhpcy4kaGVhZGVyID0gdGhpcy5kb20oJzxkaXY+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBvcHVwLWhlYWRlcicpO1xyXG4gICAgICAgIHRoaXMuJHBvcHVwLmFwcGVuZCh0aGlzLiRoZWFkZXIpO1xyXG5cclxuICAgICAgICAvLyBzdGFja3NcclxuICAgICAgICB0aGlzLiRzdGFja3MgPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtc3RhY2tzJyk7XHJcbiAgICAgICAgdGhpcy4kcG9wdXAuYXBwZW5kKHRoaXMuJHN0YWNrcyk7XHJcblxyXG4gICAgICAgIC8vIGFwcGVuZFxyXG4gICAgICAgIHRoaXMuYXBwLiRib2R5LmFwcGVuZCh0aGlzLiRwb3B1cCk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkRGVwdGg6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuYnNtb2RhbCkge1xyXG4gICAgICAgICAgICB0aGlzLiRwb3B1cC5jc3MoJ3otaW5kZXgnLCAxMDUyKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQnV0dG9uOiBmdW5jdGlvbihwYXJhbXMpIHtcclxuICAgICAgICBpZiAoIXBhcmFtcykgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuYnV0dG9uID0gKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnYnV0dG9uJykpID8gcGFyYW1zLmJ1dHRvbiA6IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEZvY3VzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5mb2N1cykge1xyXG4gICAgICAgICAgICB0aGlzLmdldFN0YWNrKCkuc2V0Rm9jdXModGhpcy5mb2N1cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZE5hbWU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJHBvcHVwLmF0dHIoJ2RhdGEtJyArIHRoaXMucHJlZml4ICsgJy1wb3B1cC1uYW1lJywgdGhpcy5uYW1lKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRQb3NpdGlvbjogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHZhciB0b3BGaXggPSAxO1xyXG4gICAgICAgIHZhciBwb3MgPSAodGhpcy5faXNCdXR0b24oKSkgPyB0aGlzLl9idWlsZFBvc2l0aW9uQnV0dG9uKCkgOiB0aGlzLl9idWlsZFBvc2l0aW9uTW9kYWwoKTtcclxuXHJcbiAgICAgICAgLy8gc2V0XHJcbiAgICAgICAgdGhpcy4kcG9wdXAuY3NzKHtcclxuICAgICAgICAgICAgdG9wOiAocG9zLnRvcCAtIHRvcEZpeCkgKyAncHgnLFxyXG4gICAgICAgICAgICBsZWZ0OiBwb3MubGVmdCArICdweCdcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRQb3NpdGlvbkJ1dHRvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGVkaXRvclJlY3QgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0RnJhbWVSZWN0KCk7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuYnV0dG9uLmdldE9mZnNldCgpO1xyXG4gICAgICAgIHZhciBkaW0gPSB0aGlzLmJ1dHRvbi5nZXREaW1lbnNpb24oKTtcclxuICAgICAgICB2YXIgcG9wdXBXaWR0aCA9IHRoaXMuJHBvcHVwLndpZHRoKCk7XHJcbiAgICAgICAgdmFyIHBvcyA9IHt9O1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1Rvb2xiYXJCdXR0b24oKSkge1xyXG4gICAgICAgICAgICBwb3MgPSB7XHJcbiAgICAgICAgICAgICAgICB0b3A6IChvZmZzZXQudG9wICsgZGltLmhlaWdodCksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gb3V0IG9mIHRoZSByaWdodCBlZGdlXHJcbiAgICAgICAgICAgIGlmICgocG9zLmxlZnQgKyBwb3B1cFdpZHRoKSA+IGVkaXRvclJlY3QucmlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHBvcy5sZWZ0ID0gKG9mZnNldC5sZWZ0ICsgZGltLndpZHRoKSAtIHBvcHVwV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcG9zID0ge1xyXG4gICAgICAgICAgICAgICAgdG9wOiAob2Zmc2V0LnRvcCArIGVkaXRvclJlY3QudG9wICsgZGltLmhlaWdodCksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAob2Zmc2V0LmxlZnQgKyBlZGl0b3JSZWN0LmxlZnQgKyAoZGltLndpZHRoLzIpIC0gKHBvcHVwV2lkdGgvMikpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG91dCBvZiB0aGUgcmlnaHQgZWRnZVxyXG4gICAgICAgICAgICBpZiAoKHBvcy5sZWZ0ICsgcG9wdXBXaWR0aCkgPiBlZGl0b3JSZWN0LnJpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICBwb3MubGVmdCA9IGVkaXRvclJlY3QubGVmdCArIGVkaXRvclJlY3Qud2lkdGggLSBwb3B1cFdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gb3V0IG9mIHRoZSBsZWZ0IGVkZ2VcclxuICAgICAgICBpZiAocG9zLmxlZnQgPCBlZGl0b3JSZWN0LmxlZnQgfHwgcG9zLmxlZnQgPCAwKSB7XHJcbiAgICAgICAgICAgIHBvcy5sZWZ0ID0gZWRpdG9yUmVjdC5sZWZ0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBvcztcclxuXHJcbiAgICB9LFxyXG4gICAgX2J1aWxkUG9zaXRpb25Nb2RhbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRjb250YWluZXIgPSB0aGlzLmFwcC5jb250YWluZXIuZ2V0KCdiYXJzJyk7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9ICRjb250YWluZXIub2Zmc2V0KCk7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9ICRjb250YWluZXIuaGVpZ2h0KCk7XHJcbiAgICAgICAgdmFyIHBvcyA9IHtcclxuICAgICAgICAgICAgdG9wOiBvZmZzZXQudG9wICsgaGVpZ2h0LFxyXG4gICAgICAgICAgICBsZWZ0OiBvZmZzZXQubGVmdFxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gcG9zO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEhlYWRlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHN0YWNrcyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLiRoZWFkZXIuaHRtbCgnJyk7XHJcbiAgICAgICAgdGhpcy5fZmluZFN0YWNrcygpLmVhY2goZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICAgICAgdmFyIHN0YWNrID0gJG5vZGUuZGF0YWdldCgnaW5zdGFuY2UnKTtcclxuICAgICAgICAgICAgdmFyIHRpdGxlID0gc3RhY2suZ2V0VGl0bGUoKTtcclxuICAgICAgICAgICAgaWYgKHRpdGxlKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFja3MucHVzaChzdGFjayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIGxlbiA9IHN0YWNrcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIC8vIHBhdGhcclxuICAgICAgICBpZiAobGVuICE9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkUGF0aCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9idWlsZENsb3NlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpdGVtc1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyICRpdGVtID0gdGhpcy5fYnVpbGRQYXRoSXRlbShzdGFja3NbaV0pO1xyXG4gICAgICAgICAgICB0aGlzLiRwYXRoLmFwcGVuZCgkaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZEhlYWRlckJhY2s6IGZ1bmN0aW9uKHN0YWNrKSB7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRQYXRoKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRCYWNrKHN0YWNrKTtcclxuICAgICAgICB0aGlzLl9idWlsZEJhY2tJdGVtKHN0YWNrKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRQYXRoOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbmFtZSA9IHRoaXMucHJlZml4ICsgJy1wb3B1cC1oZWFkZXItcGF0aCc7XHJcbiAgICAgICAgdGhpcy4kaGVhZGVyLmZpbmQoJy4nICsgbmFtZSkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuJHBhdGggPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyhuYW1lKTtcclxuICAgICAgICB0aGlzLiRoZWFkZXIuYXBwZW5kKHRoaXMuJHBhdGgpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZFBhdGhJdGVtOiBmdW5jdGlvbihzdGFjaykge1xyXG4gICAgICAgIHZhciB0aXRsZSA9IHN0YWNrLmdldFRpdGxlKCk7XHJcbiAgICAgICAgdmFyICRpdGVtID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1oZWFkZXItaXRlbScpO1xyXG4gICAgICAgICRpdGVtLmh0bWwodGhpcy5sYW5nLnBhcnNlKHRpdGxlKSk7XHJcbiAgICAgICAgJGl0ZW0uZGF0YXNldCgnc3RhY2snLCBzdGFjayk7XHJcbiAgICAgICAgJGl0ZW0ub24oJ2NsaWNrJywgdGhpcy5fY2F0Y2hPcGVuLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICBpZiAoc3RhY2suaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICAkaXRlbS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJGl0ZW07XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQmFjazogZnVuY3Rpb24oc3RhY2spIHtcclxuICAgICAgICB2YXIgJGJhY2sgPSB0aGlzLmRvbSgnPHNwYW4+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBvcHVwLWhlYWRlci1pdGVtJyk7XHJcbiAgICAgICAgJGJhY2suaHRtbCh0aGlzLmxhbmcuZ2V0KCdwb3B1cC5iYWNrJykpO1xyXG4gICAgICAgICRiYWNrLmRhdGFzZXQoJ3N0YWNrLXByZXYnLCBzdGFjay5wcmV2KTtcclxuICAgICAgICAkYmFjay5kYXRhc2V0KCdzdGFjay1jdXJyZW50Jywgc3RhY2spO1xyXG4gICAgICAgICRiYWNrLm9uKCdjbGljaycsIHRoaXMuX2NhdGNoQmFjay5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgdGhpcy4kcGF0aC5hcHBlbmQoJGJhY2spO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEJhY2tJdGVtOiBmdW5jdGlvbihzdGFjaykge1xyXG4gICAgICAgIHZhciB0aXRsZSA9IHN0YWNrLmdldFRpdGxlKCk7XHJcbiAgICAgICAgdmFyICRpdGVtID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1oZWFkZXItaXRlbScpO1xyXG4gICAgICAgICRpdGVtLmh0bWwodGhpcy5sYW5nLnBhcnNlKHRpdGxlKSk7XHJcbiAgICAgICAgJGl0ZW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICB0aGlzLiRwYXRoLmFwcGVuZCgkaXRlbSk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQ2xvc2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkY2xvc2UgPSB0aGlzLmRvbSgnPHNwYW4+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBvcHVwLWNsb3NlJyk7XHJcbiAgICAgICAgJGNsb3NlLm9uZSgnY2xpY2snLCB0aGlzLl9jYXRjaENsb3NlLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLiRoZWFkZXIuYXBwZW5kKCRjbG9zZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGNyZWF0ZVxyXG4gICAgX2NyZWF0ZVN0YWNrOiBmdW5jdGlvbihuYW1lLCBwYXJhbXMpIHtcclxuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmFwcC5jcmVhdGUoJ3BvcHVwLnN0YWNrJywgbmFtZSwgcGFyYW1zKTtcclxuICAgICAgICB0aGlzLiRzdGFja3MuYXBwZW5kKHN0YWNrLmdldEVsZW1lbnQoKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBzdGFjaztcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2F0Y2hcclxuICAgIF9jYXRjaENsb3NlOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH0sXHJcbiAgICBfY2F0Y2hPcGVuOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHZhciAkdGFyZ2V0ID0gdGhpcy5kb20oZS50YXJnZXQpO1xyXG4gICAgICAgIHZhciB0YXJnZXRTdGFjayA9ICR0YXJnZXQuZGF0YWdldCgnc3RhY2snKTtcclxuXHJcbiAgICAgICAgdmFyICRpdGVtcyA9IHRoaXMuJHBhdGguZmluZCgnLicgKyB0aGlzLnByZWZpeCArICctcG9wdXAtaGVhZGVyLWl0ZW0nKTtcclxuICAgICAgICAkaXRlbXMuZWFjaChmdW5jdGlvbigkaXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgc3RhY2sgPSAkaXRlbS5kYXRhZ2V0KCdzdGFjaycpO1xyXG4gICAgICAgICAgICBzdGFjay5jbG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgJGl0ZW0ucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkdGFyZ2V0LmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB0YXJnZXRTdGFjay5vcGVuKCk7XHJcbiAgICB9LFxyXG4gICAgX2NhdGNoQmFjazogZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLmRvbShlLnRhcmdldCk7XHJcbiAgICAgICAgdmFyIHByZXYgPSAkaXRlbS5kYXRhZ2V0KCdzdGFjay1wcmV2Jyk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSAkaXRlbS5kYXRhZ2V0KCdzdGFjay1jdXJyZW50Jyk7XHJcblxyXG4gICAgICAgIGN1cnJlbnQuY29sbGFwc2UoKTtcclxuICAgICAgICBwcmV2LnJlYnVpbGQoKTtcclxuICAgICAgICBwcmV2Lm9wZW4oKTtcclxuXHJcbiAgICAgICAgLy8gcmVidWlsZCBoZWFkZXJcclxuICAgICAgICB0aGlzLl9idWlsZEhlYWRlcigpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBmaW5kXHJcbiAgICBfZmluZFN0YWNrczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHBvcHVwLmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLXBvcHVwLXN0YWNrJyk7XHJcbiAgICB9LFxyXG4gICAgX2ZpbmRTdGFjazogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRwb3B1cC5maW5kKCdbZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXBvcHVwLXN0YWNrLW5hbWU9JyArIG5hbWUgKyAnXScpLmRhdGFnZXQoJ2luc3RhbmNlJyk7XHJcbiAgICB9LFxyXG4gICAgX2ZpbmRTdGFja0FjdGl2ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHBvcHVwLmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLXBvcHVwLXN0YWNrLm9wZW4nKS5kYXRhZ2V0KCdpbnN0YW5jZScpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBldmVudHNcclxuICAgIF9zdGFydEV2ZW50czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICR0YXJnZXQgPSB0aGlzLmFwcC5zY3JvbGwuZ2V0VGFyZ2V0KCk7XHJcbiAgICAgICAgdmFyIGV2ZW50bmFtZSA9IHRoaXMucHJlZml4ICsgJy1wb3B1cCc7XHJcblxyXG4gICAgICAgICR0YXJnZXQub24oJ3Jlc2l6ZS4nICsgZXZlbnRuYW1lLCB0aGlzLnVwZGF0ZVBvc2l0aW9uLmJpbmQodGhpcykpO1xyXG4gICAgICAgICR0YXJnZXQub24oJ3Njcm9sbC4nICsgZXZlbnRuYW1lLCB0aGlzLnVwZGF0ZVBvc2l0aW9uLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICB0aGlzLmFwcC5lZGl0b3IuZ2V0RnJhbWUoKS5vbigncmVzaXplLicgKyBldmVudG5hbWUsIHRoaXMudXBkYXRlUG9zaXRpb24uYmluZCh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgX3N0b3BFdmVudHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBldmVudG5hbWUgPSB0aGlzLnByZWZpeCArICctcG9wdXAnO1xyXG5cclxuICAgICAgICB0aGlzLmFwcC5zY3JvbGwuZ2V0VGFyZ2V0KCkub2ZmKCcuJyArIGV2ZW50bmFtZSk7XHJcbiAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmdldEZyYW1lKCkub2ZmKCcuJyArIGV2ZW50bmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIG9wZW5lZFxyXG4gICAgX29wZW5lZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRGb2N1cygpO1xyXG4gICAgICAgIHRoaXMuX2Nyb3BIZWlnaHQoKTtcclxuICAgICAgICB0aGlzLiRwb3B1cC5hZGRDbGFzcygnb3BlbicpO1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3RcclxuICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ3BvcHVwLm9wZW4nKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY2xvc2VkXHJcbiAgICBfY2xvc2VkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRwb3B1cC5yZW1vdmVBdHRyKCdkYXRhLScgKyB0aGlzLnByZWZpeCArICctcG9wdXAtbmFtZScpO1xyXG4gICAgICAgIHRoaXMuJHBvcHVwLnJlbW92ZUNsYXNzKCdvcGVuJyk7XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgncG9wdXAuY2xvc2UnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gY3JvcFxyXG4gICAgX2Nyb3BIZWlnaHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkdGFyZ2V0ID0gdGhpcy5hcHAuc2Nyb2xsLmdldFRhcmdldCgpO1xyXG4gICAgICAgIHZhciAkdG9vbGJhciA9IHRoaXMuYXBwLnRvb2xiYXIuZ2V0RWxlbWVudCgpO1xyXG4gICAgICAgIHZhciB0b2xlcmFuY2UgPSAxMDtcclxuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy4kcG9wdXAub2Zmc2V0KCk7XHJcbiAgICAgICAgdmFyIHRvcCA9IG9mZnNldC50b3AgLSAkdGFyZ2V0LnNjcm9sbFRvcCgpO1xyXG4gICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSAkdGFyZ2V0LmhlaWdodCgpO1xyXG4gICAgICAgIHZhciBjcm9wSGVpZ2h0ID0gdGFyZ2V0SGVpZ2h0IC0gdG9wIC0gdG9sZXJhbmNlO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5hcHAuc2Nyb2xsLmlzVGFyZ2V0KCkpIHtcclxuICAgICAgICAgICAgdG9wID0gKCR0b29sYmFyLm9mZnNldCgpLnRvcCAtICR0YXJnZXQub2Zmc2V0KCkudG9wICsgJHRvb2xiYXIuaGVpZ2h0KCkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRhcmdldE9mZnNldCA9ICR0YXJnZXQub2Zmc2V0KCk7XHJcbiAgICAgICAgICAgIHZhciB3aW5IZWlnaHQgPSB0aGlzLmFwcC4kd2luLmhlaWdodCgpO1xyXG4gICAgICAgICAgICB2YXIgd2luQ3JvcEhlaWdodCA9IHdpbkhlaWdodCAtIHRhcmdldE9mZnNldC50b3A7XHJcblxyXG4gICAgICAgICAgICB0YXJnZXRIZWlnaHQgPSAod2luQ3JvcEhlaWdodCA+IHRhcmdldEhlaWdodCkgPyB0YXJnZXRIZWlnaHQgOiB3aW5Dcm9wSGVpZ2h0O1xyXG4gICAgICAgICAgICBjcm9wSGVpZ2h0ID0gdGFyZ2V0SGVpZ2h0IC0gdG9wIC0gdG9sZXJhbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy4kcG9wdXAuY3NzKCdtYXgtaGVpZ2h0JywgY3JvcEhlaWdodCArICdweCcpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBzZXRcclxuICAgIF9zZXRUb29sYmFyVG9nZ2xlZEJ1dHRvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hcHAudG9vbGJhci51bnNldFRvZ2dsZWQoKTtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzVG9vbGJhckJ1dHRvbigpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5idXR0b24uZ2V0TmFtZSgpO1xyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIuc2V0VG9nZ2xlZChuYW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gaXNcclxuICAgIF9pc0J1dHRvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnV0dG9uO1xyXG4gICAgfSxcclxuICAgIF9pc1Rvb2xiYXJCdXR0b246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5idXR0b24gJiYgKHRoaXMuYnV0dG9uLnR5cGUgPT09ICd0b29sYmFyJyB8fCB0aGlzLmJ1dHRvbi50eXBlID09PSAndG9wYmFyJykpO1xyXG4gICAgfSxcclxuICAgIF9pc1BvcHVwVGFyZ2V0OiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmRvbShlLnRhcmdldCkuY2xvc2VzdCgnLicgKyB0aGlzLnByZWZpeCArICctcG9wdXAnKS5sZW5ndGggIT09IDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBnZXRcclxuICAgIF9nZXROYW1lOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kcG9wdXAuYXR0cignZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXBvcHVwLW5hbWUnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcmVzZXRcclxuICAgIF9yZXNldDogZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgIHRoaXMuc3RhY2sgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmJ1dHRvbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuJGhlYWRlci5odG1sKCcnKTtcclxuICAgICAgICB0aGlzLiRzdGFja3MuaHRtbCgnJyk7XHJcbiAgICAgICAgdGhpcy4kcG9wdXAucmVtb3ZlQ2xhc3MoJ2hhcy1pdGVtcyBoYXMtZm9ybSBoYXMtZm9vdGVyJyk7XHJcbiAgICB9LFxyXG4gICAgX3Jlc2V0VG9vbGJhclRvZ2dsZWRCdXR0b246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5idXR0b24pIHJldHVybjtcclxuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuYnV0dG9uLmdldE5hbWUoKTtcclxuICAgICAgICB0aGlzLmFwcC50b29sYmFyLnVuc2V0VG9nZ2xlZChuYW1lKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdjbGFzcycsICdwb3B1cC5pdGVtJywge1xyXG4gICAgZGVmYXVsdHM6IHtcclxuICAgICAgICBjb250YWluZXI6IGZhbHNlLFxyXG4gICAgICAgIHRpdGxlOiBmYWxzZSxcclxuICAgICAgICBodG1sOiBmYWxzZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGRpdmlkZXI6IGZhbHNlLFxyXG4gICAgICAgIHJlbW92ZXI6IGZhbHNlLFxyXG4gICAgICAgIGNsYXNzbmFtZTogZmFsc2UsXHJcbiAgICAgICAgcGFyYW1zOiBmYWxzZSxcclxuICAgICAgICBpbnN0YW5jZTogZmFsc2UsXHJcbiAgICAgICAgb2JzZXJ2ZXI6IGZhbHNlLFxyXG4gICAgICAgIGNvbW1hbmQ6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgaW5pdDogZnVuY3Rpb24oc3RhY2ssIG5hbWUsIHBhcmFtcykge1xyXG4gICAgICAgIHRoaXMuc3RhY2sgPSBzdGFjaztcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucGFyYW1zID0gdGhpcy5fYnVpbGRQYXJhbXMocGFyYW1zKTtcclxuXHJcbiAgICAgICAgdGhpcy5fYnVpbGQoKTtcclxuICAgICAgICB0aGlzLl9idWlsZENvbnRhaW5lcigpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkSWNvbigpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkVGl0bGUoKTtcclxuICAgICAgICB0aGlzLl9idWlsZEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRTaG9ydGN1dCgpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkQWN0aXZlKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRIaWRkZW4oKTtcclxuICAgICAgICB0aGlzLl9idWlsZERpdmlkZXIoKTtcclxuICAgICAgICB0aGlzLl9idWlsZENvbW1hbmQoKTtcclxuICAgICAgICB0aGlzLl9idWlsZFJlbW92ZXIoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gZ2V0XHJcbiAgICBnZXRTdGFjazogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2s7XHJcbiAgICB9LFxyXG4gICAgZ2V0TmFtZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICAgIH0sXHJcbiAgICBnZXRQYXJhbXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5wYXJhbXM7XHJcbiAgICB9LFxyXG4gICAgZ2V0RWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGl0ZW07XHJcbiAgICB9LFxyXG4gICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5pbnN0YW5jZTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2J1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRpdGVtID0gKHRoaXMucGFyYW1zLmh0bWwpID8gdGhpcy5kb20odGhpcy5wYXJhbXMuaHRtbCkgOiB0aGlzLmRvbSgnPGRpdj4nKTtcclxuICAgICAgICB0aGlzLiRpdGVtLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1pdGVtICcgKyB0aGlzLnByZWZpeCArICctcG9wdXAtc3RhY2staXRlbScpO1xyXG4gICAgICAgIHRoaXMuJGl0ZW0uYXR0cih7ICduYW1lJzogdGhpcy5uYW1lIH0pO1xyXG4gICAgfSxcclxuICAgIF9idWlsZENvbnRhaW5lcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLmNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLiRpdGVtLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1pdGVtLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRUaXRsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnRpdGxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHRpdGxlID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1pdGVtLXRpdGxlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuJHRpdGxlLmh0bWwodGhpcy5sYW5nLnBhcnNlKHRoaXMucGFyYW1zLnRpdGxlKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRpdGVtLmFwcGVuZCh0aGlzLiR0aXRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZEltYWdlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJhbXMuaW1hZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy4kaW1hZ2UgPSB0aGlzLmRvbSgnPHNwYW4+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBvcHVwLWl0ZW0taW1hZ2UnKTtcclxuICAgICAgICAgICAgdGhpcy4kaW1hZ2UuaHRtbCh0aGlzLnBhcmFtcy5pbWFnZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRpdGVtLmFwcGVuZCh0aGlzLiRpbWFnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZEljb246IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5pY29uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGljb24gPSB0aGlzLmRvbSgnPHNwYW4+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBvcHVwLWl0ZW0taWNvbicpO1xyXG5cclxuICAgICAgICAgICAgLy8gaHRtbCBpY29uXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtcy5pY29uLnNlYXJjaCgvPC8pICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kaWNvbi5odG1sKHRoaXMucGFyYW1zLmljb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kaWNvbi5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctaWNvbi0nICsgdGhpcy5wYXJhbXMuaWNvbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGl0ZW0uYXBwZW5kKHRoaXMuJGljb24pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRTaG9ydGN1dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnNob3J0Y3V0KSB7XHJcbiAgICAgICAgICAgIHZhciBtZXRhID0gKC8oTWFjfGlQaG9uZXxpUG9kfGlQYWQpL2kudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pKSA/ICc8Yj4mIzg5ODQ7PC9iPicgOiAnY3RybCc7XHJcbiAgICAgICAgICAgIG1ldGEgPSB0aGlzLnBhcmFtcy5zaG9ydGN1dC5yZXBsYWNlKCdDdHJsJywgbWV0YSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRzaG9ydGN1dCA9IHRoaXMuZG9tKCc8c3Bhbj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtaXRlbS1zaG9ydGN1dCcpO1xyXG4gICAgICAgICAgICB0aGlzLiRzaG9ydGN1dC5odG1sKG1ldGEpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kaXRlbS5hcHBlbmQodGhpcy4kc2hvcnRjdXQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRQYXJhbXM6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIHJldHVybiAkQVJYLmV4dGVuZCh7fSwgdHJ1ZSwgdGhpcy5kZWZhdWx0cywgcGFyYW1zKTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRBY3RpdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgaWYgKHRoaXMucGFyYW1zLmFjdGl2ZSkge1xyXG4gICAgICAgICAgIHRoaXMuJGl0ZW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9idWlsZEhpZGRlbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLmhpZGRlbikge1xyXG4gICAgICAgICAgICB0aGlzLiRpdGVtLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1pdGVtLWhpZGRlbicpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGREaXZpZGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJhbXMuZGl2aWRlcikge1xyXG4gICAgICAgICAgICB0aGlzLiRpdGVtLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1pdGVtLWRpdmlkZXItJyArIHRoaXMucGFyYW1zLmRpdmlkZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRDb21tYW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJhbXMuY29tbWFuZCkge1xyXG4gICAgICAgICAgICB0aGlzLiRpdGVtLm9uKCdjbGljay4nICsgdGhpcy5wcmVmaXggKyAnLXBvcHVwLWl0ZW0tJyArIHRoaXMudXVpZCwgdGhpcy5fY2F0Y2guYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGl0ZW0uYXR0cignY29tbWFuZCcsIHRoaXMucGFyYW1zLmNvbW1hbmQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRSZW1vdmVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMucGFyYW1zLnRpdGxlKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnJlbW92ZXIpIHtcclxuICAgICAgICAgICB2YXIgJHRyYXNoID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1pdGVtLXRyYXNoICcgKyB0aGlzLnByZWZpeCArICctaWNvbi10cmFzaCcpO1xyXG4gICAgICAgICAgICR0cmFzaC5hdHRyKCdjb21tYW5kJywgdGhpcy5wYXJhbXMucmVtb3Zlcik7XHJcbiAgICAgICAgICAgJHRyYXNoLm9uKCdjbGljay4nICsgdGhpcy5wcmVmaXggKyAnLXBvcHVwLWl0ZW0tJyArIHRoaXMudXVpZCwgdGhpcy5fY2F0Y2hSZW1vdmVyLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAgICB0aGlzLiRpdGVtLmFwcGVuZCgkdHJhc2gpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfY2F0Y2hSZW1vdmVyOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHZhciAkaXRlbSA9IHRoaXMuZG9tKGUudGFyZ2V0KS5jbG9zZXN0KCcuJyArIHRoaXMucHJlZml4ICsgJy1wb3B1cC1zdGFjay1pdGVtJyk7XHJcbiAgICAgICAgdmFyICR0cmFzaCA9IHRoaXMuZG9tKGUudGFyZ2V0KS5jbG9zZXN0KCcuJyArIHRoaXMucHJlZml4ICsgJy1wb3B1cC1pdGVtLXRyYXNoJyk7XHJcbiAgICAgICAgdmFyIGNvbW1hbmQgPSAkdHJhc2guYXR0cignY29tbWFuZCcpO1xyXG4gICAgICAgIHZhciBuYW1lID0gJGl0ZW0uYXR0cignbmFtZScpO1xyXG5cclxuICAgICAgICB0aGlzLmFwcC5hcGkoY29tbWFuZCwgdGhpcywgbmFtZSk7XHJcblxyXG4gICAgICAgICRpdGVtLmZhZGVPdXQoMjAwLCBmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgICAgICAkbm9kZS5yZW1vdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBfY2F0Y2g6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgdmFyICRpdGVtID0gdGhpcy5kb20oZS50YXJnZXQpLmNsb3Nlc3QoJy4nICsgdGhpcy5wcmVmaXggKyAnLXBvcHVwLXN0YWNrLWl0ZW0nKTtcclxuICAgICAgICB2YXIgbmFtZSA9ICRpdGVtLmF0dHIoJ25hbWUnKTtcclxuICAgICAgICB2YXIgY29tbWFuZCA9ICRpdGVtLmF0dHIoJ2NvbW1hbmQnKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdGFjay4kaXRlbXMuZmluZCgnLicgKyB0aGlzLnByZWZpeCArICctcG9wdXAtc3RhY2staXRlbScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkaXRlbS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblxyXG4gICAgICAgIC8vIGNvbW1hbmRcclxuICAgICAgICB0aGlzLmFwcC5hcGkoY29tbWFuZCwgdGhpcy5nZXRQYXJhbXMoKSwgdGhpcywgbmFtZSwgZSk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2NsYXNzJywgJ3BvcHVwLnN0YWNrJywge1xyXG4gICAgZGVmYXVsdHM6IHtcclxuICAgICAgICB0aXRsZTogZmFsc2UsXHJcbiAgICAgICAgdHlwZTogZmFsc2UsIC8vIGdyaWRcclxuICAgICAgICBuYW1lOiBmYWxzZSxcclxuICAgICAgICBwYXRoOiBmYWxzZSxcclxuICAgICAgICB3aWR0aDogZmFsc2UsIC8vIHN0cmluZyBsaWtlICcyMDBweCcgb3IgJzEwMCUnXHJcbiAgICAgICAgc2V0dGVyOiBmYWxzZSxcclxuICAgICAgICBnZXR0ZXI6IGZhbHNlLFxyXG4gICAgICAgIGJ1aWxkZXI6IGZhbHNlLFxyXG4gICAgICAgIG9ic2VydmVyOiBmYWxzZSxcclxuICAgICAgICBpbnN0YW5jZTogZmFsc2UsXHJcbiAgICAgICAgY29sbGFwc2U6IHRydWUsXHJcbiAgICAgICAgZm9ybTogZmFsc2UsXHJcbiAgICAgICAgaXRlbXM6IGZhbHNlLFxyXG4gICAgICAgIGZvY3VzOiBmYWxzZSxcclxuICAgICAgICBmb290ZXI6IGZhbHNlXHJcbiAgICB9LFxyXG4gICAgaW5pdDogZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0V2lkdGggPSAnMjQwcHgnO1xyXG4gICAgICAgIHRoaXMucHJldiA9IHRoaXMuYXBwLnBvcHVwLmdldFN0YWNrKCk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLnRvb2xzID0ge307XHJcbiAgICAgICAgdGhpcy5wYXJhbXMgPSB0aGlzLl9idWlsZFBhcmFtcyhwYXJhbXMpO1xyXG4gICAgICAgIHRoaXMuJHBvcHVwID0gdGhpcy5hcHAucG9wdXAuZ2V0RWxlbWVudCgpO1xyXG5cclxuICAgICAgICAvLyBkYXRhXHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmZvcm0gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLml0ZW1zID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mb290ZXIgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmdldHRlciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2V0dGVyID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIGJ1aWxkXHJcbiAgICAgICAgdGhpcy5fYnVpbGQoKTtcclxuXHJcbiAgICAgICAgLy8gb2JzZXJ2ZVxyXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5vYnNlcnZlcikge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5hcGkodGhpcy5wYXJhbXMub2JzZXJ2ZXIsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZWJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJJdGVtcygpO1xyXG4gICAgfSxcclxuICAgIG9wZW46IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ29sbGFwc2VkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAucG9wdXAuY2xvc2VTdGFja3MoKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAucG9wdXAucmVuZGVySGVhZGVyQmFjayh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFjdGl2ZVxyXG4gICAgICAgIHRoaXMuc2V0QWN0aXZlKCk7XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgncG9wdXAuYmVmb3JlLm9wZW4nKTtcclxuXHJcbiAgICAgICAgLy8gcmVuZGVyXHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC51cGRhdGVQb3NpdGlvbigpO1xyXG5cclxuICAgICAgICAvLyBmb2N1c1xyXG4gICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmZvY3VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Rm9jdXMocGFyYW1zLmZvY3VzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgncG9wdXAub3BlbicpO1xyXG4gICAgfSxcclxuICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRzdGFjay5oaWRlKCk7XHJcbiAgICAgICAgdGhpcy4kc3RhY2sucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcclxuICAgIH0sXHJcbiAgICBjb2xsYXBzZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kc3RhY2sucmVtb3ZlKCk7XHJcbiAgICB9LFxyXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJXaWR0aCgpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlclR5cGUoKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJJdGVtcygpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlckZvcm0oKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJGb290ZXIoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gdXBkYXRlUG9zaXRpb25cclxuICAgIHVwZGF0ZVBvc2l0aW9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC51cGRhdGVQb3NpdGlvbigpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBpc1xyXG4gICAgaXNDb2xsYXBzZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5jb2xsYXBzZTtcclxuICAgIH0sXHJcbiAgICBpc0FjdGl2ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHN0YWNrLmhhc0NsYXNzKCdvcGVuJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHNldFxyXG4gICAgc2V0QWN0aXZlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRzdGFjay5zaG93KCk7XHJcbiAgICAgICAgdGhpcy4kc3RhY2suYWRkQ2xhc3MoJ29wZW4nKTtcclxuICAgIH0sXHJcbiAgICBzZXREYXRhOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH0sXHJcbiAgICBzZXRGb3JtOiBmdW5jdGlvbihmb3JtKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtID0gZm9ybTtcclxuICAgIH0sXHJcbiAgICBzZXRGb290ZXI6IGZ1bmN0aW9uKGZvb3Rlcikge1xyXG4gICAgICAgIHRoaXMuZm9vdGVyID0gZm9vdGVyO1xyXG4gICAgfSxcclxuICAgIHNldFdpZHRoOiBmdW5jdGlvbih3aWR0aCkge1xyXG4gICAgICAgIHRoaXMuJHN0YWNrLmF0dHIoJ2RhdGEtd2lkdGgnLCB3aWR0aCk7XHJcblxyXG4gICAgICAgIGlmICh3aWR0aCA9PT0gJzEwMCUnKSB7XHJcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5hcHAuY29udGFpbmVyLmdldCgnbWFpbicpLndpZHRoKCkgKyAncHgnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy4kc3RhY2suY3NzKCd3aWR0aCcsIHdpZHRoKTtcclxuICAgICAgICB0aGlzLmFwcC4kd2luLm9uKCdyZXNpemUuJyArIHRoaXMucHJlZml4ICsgJy1zdGFjay0nICsgdGhpcy51dWlkLCB0aGlzLl9yZXNpemUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5fcmVzaXplKCk7XHJcbiAgICB9LFxyXG4gICAgc2V0Rm9jdXM6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMudG9vbHNbbmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9vbHNbbmFtZV0uc2V0Rm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2V0SXRlbXM6IGZ1bmN0aW9uKGl0ZW1zKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xyXG4gICAgfSxcclxuICAgIHNldFR5cGU6IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBnZXRcclxuICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRzdGFjaztcclxuICAgIH0sXHJcbiAgICBnZXRUaXRsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLnRpdGxlO1xyXG4gICAgfSxcclxuICAgIGdldE5hbWU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XHJcbiAgICB9LFxyXG4gICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xyXG4gICAgfSxcclxuICAgIGdldEl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcztcclxuICAgIH0sXHJcbiAgICBnZXRUb29sOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgdGhpcy50b29sc1tuYW1lXSAhPT0gJ3VuZGVmaW5lZCcpID8gdGhpcy50b29sc1tuYW1lXSA6IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGdldElucHV0OiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgdmFyIHRvb2wgPSB0aGlzLmdldFRvb2wobmFtZSk7XHJcblxyXG4gICAgICAgIHJldHVybiAodG9vbCkgPyB0b29sLmdldElucHV0KCkgOiB0aGlzLmRvbSgpO1xyXG4gICAgfSxcclxuICAgIGdldEZvcm1JdGVtOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgdmFyIHRvb2wgPSB0aGlzLmdldFRvb2wobmFtZSk7XHJcblxyXG4gICAgICAgIHJldHVybiAodG9vbCkgPyB0b29sLmdldElucHV0KCkuY2xvc2VzdCgnLicgKyB0aGlzLnByZWZpeCArICctZm9ybS1pdGVtJykgOiB0aGlzLmRvbSgpO1xyXG4gICAgfSxcclxuICAgIGdldEZvcm1FbGVtZW50OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kZm9ybTtcclxuICAgIH0sXHJcbiAgICBnZXRGb3JtOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtO1xyXG4gICAgfSxcclxuICAgIGdldEZvb3RlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZvb3RlcjtcclxuICAgIH0sXHJcbiAgICBnZXRCb2R5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kYm9keTtcclxuICAgIH0sXHJcbiAgICBnZXREYXRhOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgdmFyIGRhdGE7XHJcbiAgICAgICAgaWYgKG5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnRvb2xzW25hbWVdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMudG9vbHNbbmFtZV0uZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy50b29scykge1xyXG4gICAgICAgICAgICAgICAgZGF0YVtrZXldID0gdGhpcy50b29sc1trZXldLmdldFZhbHVlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBidWlsZFxyXG4gICAgX2J1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9idWlsZEVsZW1lbnQoKTtcclxuICAgICAgICB0aGlzLl9idWlsZEJvZHkoKTtcclxuICAgICAgICB0aGlzLl9idWlsZFJlbmRlcigpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZFBhcmFtczogZnVuY3Rpb24ocGFyYW1zKSB7XHJcbiAgICAgICAgcmV0dXJuICRBUlguZXh0ZW5kKHt9LCB0cnVlLCB0aGlzLmRlZmF1bHRzLCBwYXJhbXMpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJHN0YWNrID0gdGhpcy5kb20oJzxkaXY+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBvcHVwLXN0YWNrICcgKyB0aGlzLnByZWZpeCArICctcG9wdXAtJyArIHRoaXMubmFtZSk7XHJcbiAgICAgICAgdGhpcy4kc3RhY2suZGF0YXNldCgnaW5zdGFuY2UnLCB0aGlzKTtcclxuICAgICAgICB0aGlzLiRzdGFjay5hdHRyKCdkYXRhLScgKyB0aGlzLnByZWZpeCArICctcG9wdXAtc3RhY2stbmFtZScsIHRoaXMubmFtZSk7XHJcbiAgICAgICAgdGhpcy4kc3RhY2suaGlkZSgpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZEJvZHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGJvZHkgPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtYm9keScpO1xyXG4gICAgICAgIHRoaXMuJGl0ZW1zID0gdGhpcy5kb20oJzxkaXY+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBvcHVwLWl0ZW1zJyk7XHJcbiAgICAgICAgdGhpcy4kc3RhY2suYXBwZW5kKHRoaXMuJGJvZHkpO1xyXG4gICAgfSxcclxuICAgIF9idWlsZFJlbmRlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9ICh0aGlzLnBhcmFtcy53aWR0aCkgPyB0aGlzLnBhcmFtcy53aWR0aCA6IHRoaXMuZGVmYXVsdFdpZHRoO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHRoaXMucGFyYW1zLnR5cGU7XHJcbiAgICAgICAgdGhpcy5mb3JtID0gdGhpcy5wYXJhbXMuZm9ybTtcclxuICAgICAgICB0aGlzLmZvb3RlciA9IHRoaXMucGFyYW1zLmZvb3RlcjtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gdGhpcy5wYXJhbXMuaW5zdGFuY2U7XHJcbiAgICAgICAgdGhpcy5zZXR0ZXIgPSAodGhpcy5wYXJhbXMuc2V0dGVyKSA/IHRoaXMucGFyYW1zLnNldHRlciA6IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZ2V0dGVyID0gKHRoaXMucGFyYW1zLmdldHRlcikgPyB0aGlzLnBhcmFtcy5nZXR0ZXIgOiBmYWxzZTtcclxuICAgICAgICB0aGlzLmRhdGEgPSAodGhpcy5nZXR0ZXIpID8gdGhpcy5hcHAuYXBpKHRoaXMuZ2V0dGVyLCB0aGlzKSA6IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBpdGVtc1xyXG4gICAgICAgIGlmICh0aGlzLnBhcmFtcy5idWlsZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLmFwcC5hcGkodGhpcy5wYXJhbXMuYnVpbGRlciwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGFyYW1zLml0ZW1zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLnBhcmFtcy5pdGVtcztcclxuICAgICAgICB9XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICAvLyByZW5kZXJcclxuICAgIF9yZW5kZXJUeXBlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRzdGFjay5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtc3RhY2stdHlwZS1ncmlkJyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnR5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy4kc3RhY2suYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXBvcHVwLXN0YWNrLXR5cGUtJyArIHRoaXMudHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9yZW5kZXJXaWR0aDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5zZXRXaWR0aCh0aGlzLndpZHRoKTtcclxuICAgIH0sXHJcbiAgICBfcmVuZGVyRm9ybTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZvcm0pIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gYnVpbGQgZm9ybSBlbGVtZW50XHJcbiAgICAgICAgdGhpcy4kZm9ybSA9IHRoaXMuZG9tKCc8Zm9ybT4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtZm9ybScpO1xyXG4gICAgICAgIHRoaXMuZm9ybWl0ZW1zID0gdGhpcy5mb3JtO1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXJUb29scygpO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlckRhdGEoKTtcclxuXHJcbiAgICAgICAgdGhpcy4kcG9wdXAuYWRkQ2xhc3MoJ2hhcy1mb3JtJyk7XHJcblxyXG4gICAgICAgIC8vIGFwcGVuZFxyXG4gICAgICAgIHRoaXMuJGJvZHkuZmluZCgnLicgKyB0aGlzLnByZWZpeCArICctcG9wdXAtZm9ybScpLnJlbW92ZSgpO1xyXG4gICAgICAgIHRoaXMuJGJvZHkuYXBwZW5kKHRoaXMuJGZvcm0pO1xyXG4gICAgfSxcclxuICAgIF9yZW5kZXJUb29sczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLmZvcm1pdGVtcykge1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJUb29sKG5hbWUsIHRoaXMuZm9ybWl0ZW1zW25hbWVdKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3JlbmRlclRvb2w6IGZ1bmN0aW9uKG5hbWUsIG9iaikge1xyXG4gICAgICAgIHZhciB0b29sID0gdGhpcy5hcHAuY3JlYXRlKCd0b29sLicgKyBvYmoudHlwZSwgbmFtZSwgb2JqLCB0aGlzLCB0aGlzLmRhdGEsIHRoaXMuaW5zdGFuY2UpO1xyXG4gICAgICAgIHZhciAkdG9vbCA9IHRvb2wuZ2V0RWxlbWVudCgpO1xyXG4gICAgICAgIGlmICgkdG9vbCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvb2xzW25hbWVdID0gdG9vbDtcclxuICAgICAgICAgICAgdGhpcy4kZm9ybS5hcHBlbmQoJHRvb2wpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfcmVuZGVyRGF0YTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEpIHJldHVybjtcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMudG9vbHNbbmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2xzW25hbWVdLnNldFZhbHVlKHRoaXMuZGF0YVtuYW1lXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX3JlbmRlckl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRwb3B1cC5yZW1vdmVDbGFzcygnaGFzLWl0ZW1zJyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLml0ZW1zKSByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMuJHBvcHVwLmFkZENsYXNzKCdoYXMtaXRlbXMnKTtcclxuXHJcbiAgICAgICAgdGhpcy4kYm9keS5maW5kKCcuJyArIHRoaXMucHJlZml4ICsgJy1wb3B1cC1pdGVtJykub2ZmKCcuJyArIHRoaXMucHJlZml4ICsgJy1wb3B1cC1pdGVtLScgKyB0aGlzLnV1aWQpO1xyXG4gICAgICAgIHRoaXMuJGl0ZW1zLmh0bWwoJycpO1xyXG4gICAgICAgIHRoaXMuJGJvZHkuaHRtbCgnJyk7XHJcbiAgICAgICAgdGhpcy4kYm9keS5hcHBlbmQodGhpcy4kaXRlbXMpO1xyXG5cclxuICAgICAgICAvLyBidWlsZCBpdGVtc1xyXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5pdGVtcykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pdGVtc1tuYW1lXS5oYXNPd25Qcm9wZXJ0eSgnb2JzZXJ2ZXInKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuYXBwLmFwaSh0aGlzLml0ZW1zW25hbWVdLm9ic2VydmVyLCB0aGlzLml0ZW1zW25hbWVdLCBuYW1lLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXNbbmFtZV0gPSByZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zW25hbWVdID09PSBmYWxzZSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuYXBwLmNyZWF0ZSgncG9wdXAuaXRlbScsIHRoaXMsIG5hbWUsIHRoaXMuaXRlbXNbbmFtZV0pO1xyXG4gICAgICAgICAgICB0aGlzLiRpdGVtcy5hcHBlbmQoaXRlbS5nZXRFbGVtZW50KCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfcmVuZGVyRm9vdGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRwb3B1cC5yZW1vdmVDbGFzcygnaGFzLWZvb3RlcicpO1xyXG4gICAgICAgIGlmICghdGhpcy5mb290ZXIpIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy4kZm9vdGVyKSB0aGlzLiRmb290ZXIucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuJGZvb3RlciA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1wb3B1cC1mb290ZXInKTtcclxuXHJcbiAgICAgICAgLy8gYnV0dG9uc1xyXG4gICAgICAgIHZhciBidXR0b25zID0gdGhpcy5mb290ZXI7XHJcbiAgICAgICAgdmFyIGxlbiA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgaWYgKGJ1dHRvbnNba2V5XSA9PT0gZmFsc2UpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IHRoaXMuYXBwLmNyZWF0ZSgncG9wdXAuYnV0dG9uJywga2V5LCB0aGlzLCBidXR0b25zW2tleV0pO1xyXG4gICAgICAgICAgICB0aGlzLiRmb290ZXIuYXBwZW5kKGJ1dHRvbi5nZXRFbGVtZW50KCkpO1xyXG4gICAgICAgICAgICBsZW4rKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsZW4gIT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy4kc3RhY2suYXBwZW5kKHRoaXMuJGZvb3Rlcik7XHJcbiAgICAgICAgICAgIHRoaXMuJHBvcHVwLmFkZENsYXNzKCdoYXMtZm9vdGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9yZXNpemU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy4kc3RhY2suYXR0cignZGF0YS13aWR0aCcpO1xyXG4gICAgICAgIHZhciB3aWR0aCA9IHRoaXMuYXBwLmNvbnRhaW5lci5nZXQoJ21haW4nKS53aWR0aCgpO1xyXG4gICAgICAgIGlmIChkYXRhICE9PSAnMTAwJScpIHtcclxuICAgICAgICAgICAgdmFyIHcgPSBwYXJzZUludChkYXRhKTtcclxuICAgICAgICAgICAgaWYgKHcgPCB3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiRzdGFjay5jc3MoJ3dpZHRoJywgd2lkdGggKyAncHgnKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5BcnRpY2xlRWRpdG9yLmFkZCgnY2xhc3MnLCAncG9wdXAuYnV0dG9uJywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24obmFtZSwgc3RhY2ssIG9iaikge1xyXG5cclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMub2JqID0gb2JqO1xyXG4gICAgICAgIHRoaXMuc3RhY2sgPSBzdGFjaztcclxuXHJcbiAgICAgICAgdGhpcy4kYnV0dG9uID0gdGhpcy5kb20oJzxidXR0b24+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZvcm0tYnV0dG9uJyk7XHJcbiAgICAgICAgdGhpcy4kYnV0dG9uLmF0dHIoJ2RhdGEtbmFtZScsIHRoaXMubmFtZSk7XHJcbiAgICAgICAgdGhpcy4kYnV0dG9uLmh0bWwodGhpcy5sYW5nLnBhcnNlKHRoaXMub2JqLnRpdGxlKSk7XHJcbiAgICAgICAgdGhpcy4kYnV0dG9uLmRhdGFzZXQoJ2luc3RhbmNlJywgdGhpcyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9oYXMoJ3R5cGUnKSkgdGhpcy4kYnV0dG9uLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1mb3JtLWJ1dHRvbi0nICsgdGhpcy5vYmoudHlwZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hhcygnY2xhc3NuYW1lJykpIHRoaXMuJGJ1dHRvbi5hZGRDbGFzcyh0aGlzLm9iai5jbGFzc25hbWUpO1xyXG4gICAgICAgIGlmICh0aGlzLl9oYXMoJ2Z1bGx3aWR0aCcpKSB0aGlzLiRidXR0b24uYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZvcm0tYnV0dG9uLWZ1bGx3aWR0aCcpO1xyXG5cclxuICAgICAgICAvLyBldmVudFxyXG4gICAgICAgIHRoaXMuJGJ1dHRvbi5vbignY2xpY2suJyArIHRoaXMucHJlZml4ICsgJy1wb3B1cC1idXR0b24nICsgdGhpcy51dWlkLCB0aGlzLl9jYXRjaC5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBnZXROYW1lOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfSxcclxuICAgIGdldEVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRidXR0b247XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9oYXM6IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vYmouaGFzT3duUHJvcGVydHkobmFtZSk7XHJcbiAgICB9LFxyXG4gICAgX2NhdGNoOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9oYXMoJ2NvbW1hbmQnKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5hcGkodGhpcy5vYmouY29tbWFuZCwgdGhpcy5zdGFjaywgdGhpcy5uYW1lLCBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5faGFzKCdjb2xsYXBzZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhY2suY29sbGFwc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5faGFzKCdjbG9zZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdsaW5rJywge1xyXG4gICAgcG9wdXBzOiB7XHJcbiAgICAgICAgZm9ybWF0OiB7XHJcbiAgICAgICAgICAgIGZvcm1hdDogeyB0aXRsZTogJyMjIGxpbmsubGluayAjIycsIGNvbW1hbmQ6ICdsaW5rLmZvcm1hdCcsIHNob3J0Y3V0OiAnQ3RybCtrJyB9LFxyXG4gICAgICAgICAgICB1bmxpbms6IHsgdGl0bGU6ICcjIyBsaW5rLnVubGluayAjIycsIGNvbW1hbmQ6ICdsaW5rLnVubGluaycgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWRpdDoge1xyXG4gICAgICAgICAgICBlZGl0OiB7IHRpdGxlOiAnIyMgbGluay5lZGl0LWxpbmsgIyMnLCBjb21tYW5kOiAnbGluay5lZGl0Jywgc2hvcnRjdXQ6ICdDdHJsK2snIH0sXHJcbiAgICAgICAgICAgIHVubGluazogeyB0aXRsZTogJyMjIGxpbmsudW5saW5rICMjJywgY29tbWFuZDogJ2xpbmsudW5saW5rJyB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmb3JtOiB7XHJcbiAgICAgICAgICAgIHRleHQ6IHsgdHlwZTogJ2lucHV0JywgbGFiZWw6ICcjIyBsaW5rLnRleHQgIyMnIH0sXHJcbiAgICAgICAgICAgIHVybDogeyB0eXBlOiAnaW5wdXQnLCBsYWJlbDogJyMjIGxpbmsudXJsICMjJyB9LFxyXG4gICAgICAgICAgICB0YXJnZXQ6IHsgdHlwZTogJ2NoZWNrYm94JywgdGV4dDogJyMjIGxpbmsubGluay1pbi1uZXctdGFiICMjJyB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbnNlcnQ6IHtcclxuICAgICAgICAgICAgaW5zZXJ0OiB7IHRpdGxlOiAnIyMgbGluay5pbnNlcnQgIyMnLCBjb21tYW5kOiAnbGluay5pbnNlcnQnLCB0eXBlOiAncHJpbWFyeScgfSxcclxuICAgICAgICAgICAgY2FuY2VsOiB7IHRpdGxlOiAnIyMgbGluay5jYW5jZWwgIyMnLCBjb21tYW5kOiAncG9wdXAuY2xvc2UnIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNhdmU6IHtcclxuICAgICAgICAgICAgc2F2ZTogeyB0aXRsZTogJyMjIGxpbmsuc2F2ZSAjIycsIGNvbW1hbmQ6ICdsaW5rLnNhdmUnLCB0eXBlOiAncHJpbWFyeScgfSxcclxuICAgICAgICAgICAgY2FuY2VsOiB7IHRpdGxlOiAnIyMgbGluay5jYW5jZWwgIyMnLCBjb21tYW5kOiAncG9wdXAuY2xvc2UnIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcG9wdXA6IGZ1bmN0aW9uKHBhcmFtcywgYnV0dG9uKSB7XHJcbiAgICAgICAgLy8gZ2V0IGxpbmtcclxuICAgICAgICB2YXIgJGxpbmsgPSB0aGlzLmdldExpbmsoKTtcclxuICAgICAgICB2YXIgcG9wdXAgPSAoJGxpbmsubGVuZ3RoID09PSAwKSA/IHRoaXMucG9wdXBzLmZvcm1hdCA6IHRoaXMucG9wdXBzLmVkaXQ7XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLmNyZWF0ZSgnbGluaycsIHsgaXRlbXM6IHBvcHVwIH0pO1xyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLm9wZW4oeyBidXR0b246IGJ1dHRvbiB9KTtcclxuICAgIH0sXHJcbiAgICBmb3JtYXQ6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgICAgIC8vIHNlbGVjdGlvblxyXG4gICAgICAgIHZhciB0ZXh0ID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldFRleHQoKTtcclxuXHJcbiAgICAgICAgLy8gcG9wdXBcclxuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmFwcC5wb3B1cC5jcmVhdGUoJ2xpbmstY3JlYXRlJywge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIHBvcHVwLmxpbmsgIyMnLFxyXG4gICAgICAgICAgICB3aWR0aDogJzYwMHB4JyxcclxuICAgICAgICAgICAgZm9ybTogdGhpcy5wb3B1cHMuZm9ybSxcclxuICAgICAgICAgICAgZm9vdGVyOiB0aGlzLnBvcHVwcy5pbnNlcnRcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gc2V0IGRhdGFcclxuICAgICAgICBzdGFjay5zZXREYXRhKHsgdGV4dDogdGV4dCB9KTtcclxuXHJcbiAgICAgICAgLy8gb3BlblxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLm9wZW4oeyBmb2N1czogKHRleHQpID8gJ3VybCcgOiAndGV4dCcgfSk7XHJcbiAgICB9LFxyXG4gICAgZWRpdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gZ2V0IGxpbmtcclxuICAgICAgICB2YXIgJGxpbmsgPSB0aGlzLmdldExpbmsoKTtcclxuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmFwcC5wb3B1cC5jcmVhdGUoJ2xpbmstZWRpdCcsIHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBwb3B1cC5saW5rICMjJyxcclxuICAgICAgICAgICAgd2lkdGg6ICc2MDBweCcsXHJcbiAgICAgICAgICAgIGZvcm06IHRoaXMucG9wdXBzLmZvcm0sXHJcbiAgICAgICAgICAgIGZvb3RlcjogdGhpcy5wb3B1cHMuc2F2ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzZXRcclxuICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgdGV4dDogJGxpbmsudGV4dCgpLFxyXG4gICAgICAgICAgICB1cmw6ICRsaW5rLmF0dHIoJ2hyZWYnKSxcclxuICAgICAgICAgICAgdGFyZ2V0OiAkbGluay5hdHRyKCd0YXJnZXQnKSB8fCB0aGlzLm9wdHMubGluay50YXJnZXRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBjbGVhblxyXG4gICAgICAgIGRhdGEgPSB0aGlzLl9lbmNvZGVVcmwoZGF0YSk7XHJcblxyXG4gICAgICAgIC8vIHNldCBkYXRhXHJcbiAgICAgICAgc3RhY2suc2V0RGF0YShkYXRhKTtcclxuXHJcbiAgICAgICAgLy8gb3BlblxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLm9wZW4oeyBmb2N1czogJ3VybCcgfSk7XHJcblxyXG4gICAgfSxcclxuICAgIGluc2VydDogZnVuY3Rpb24oc3RhY2spIHtcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG5cclxuICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLmFwcC5pbmxpbmUuc2V0KHsgdGFnOiAnYScsIGNhcmV0OiAnYWZ0ZXInIH0pO1xyXG4gICAgICAgIHZhciAkbGluayA9IHRoaXMuZG9tKG5vZGVzKTtcclxuXHJcbiAgICAgICAgLy8gZGF0YVxyXG4gICAgICAgIHRoaXMuX3NhdmUoc3RhY2ssICRsaW5rLCAnYWRkJyk7XHJcbiAgICB9LFxyXG4gICAgc2F2ZTogZnVuY3Rpb24oc3RhY2spIHtcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG5cclxuICAgICAgICB2YXIgJGxpbmsgPSB0aGlzLmdldExpbmsoKTtcclxuXHJcbiAgICAgICAgLy8gZGF0YVxyXG4gICAgICAgIHRoaXMuX3NhdmUoc3RhY2ssICRsaW5rLCAnY2hhbmdlJyk7XHJcbiAgICB9LFxyXG4gICAgdW5saW5rOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG5cclxuICAgICAgICB2YXIgbGlua3MgPSB0aGlzLmFwcC5zZWxlY3Rpb24uZ2V0Tm9kZXMoeyB0YWdzOiBbJ2EnXSB9KTtcclxuICAgICAgICBpZiAobGlua3MubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIHVubGlua1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyICRsaW5rID0gdGhpcy5kb20obGlua3NbaV0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdsaW5rLnJlbW92ZScsIHsgdXJsOiAkbGluay5hdHRyKCdocmVmJyksIHRleHQ6ICRsaW5rLnRleHQoKSB9KTtcclxuICAgICAgICAgICAgJGxpbmsudW53cmFwKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB1aVxyXG4gICAgICAgIHRoaXMuYXBwLnRvb2xiYXIub2JzZXJ2ZSgpO1xyXG4gICAgfSxcclxuICAgIGdldExpbms6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBsaW5rcyA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXROb2Rlcyh7IHRhZ3M6IFsnYSddIH0pO1xyXG4gICAgICAgIHZhciAkbGluayA9IChsaW5rcy5sZW5ndGggIT09IDApID8gdGhpcy5kb20obGlua3NbMF0pIDogdGhpcy5kb20oW10pO1xyXG5cclxuICAgICAgICByZXR1cm4gJGxpbms7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9zYXZlOiBmdW5jdGlvbihzdGFjaywgJGxpbmssIHR5cGUpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IHN0YWNrLmdldERhdGEoKTtcclxuICAgICAgICBkYXRhID0gdGhpcy5fY2xlYW5VcmwoZGF0YSk7XHJcbiAgICAgICAgZGF0YSA9IHRoaXMuX2VuY29kZVVybChkYXRhKTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEudXJsID09PSAnJykgcmV0dXJuO1xyXG5cclxuICAgICAgICBkYXRhID0gdGhpcy5fc2V0VXJsKCRsaW5rLCBkYXRhKTtcclxuXHJcbiAgICAgICAgaWYgKCRsaW5rLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBkYXRhID0gdGhpcy5fc2V0VGV4dCgkbGluaywgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkYXRhID0gdGhpcy5fc2V0VGFyZ2V0KCRsaW5rLCBkYXRhKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuYnJvYWRjYXN0KCdsaW5rLicgKyB0eXBlLCBkYXRhKTtcclxuICAgIH0sXHJcbiAgICBfY2xlYW5Vcmw6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICBkYXRhLnVybCA9IHRoaXMuYXBwLmNvbnRlbnQuZXNjYXBlSHRtbChkYXRhLnVybCk7XHJcbiAgICAgICAgZGF0YS51cmwgPSAoZGF0YS51cmwuc2VhcmNoKC9eamF2YXNjcmlwdDovaSkgIT09IC0xKSA/ICcnIDogZGF0YS51cmw7XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSxcclxuICAgIF9lbmNvZGVVcmw6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICBkYXRhLnVybCA9IGRhdGEudXJsLnJlcGxhY2UoJyZhbXA7JywgJyYnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9LFxyXG4gICAgX3NldFVybDogZnVuY3Rpb24oJGxpbmssIGRhdGEpIHtcclxuICAgICAgICAkbGluay5hdHRyKCdocmVmJywgZGF0YS51cmwpO1xyXG5cclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH0sXHJcbiAgICBfc2V0VGV4dDogZnVuY3Rpb24oJGxpbmssIGRhdGEpIHtcclxuICAgICAgICBkYXRhLnRleHQgPSAoZGF0YS50ZXh0ID09PSAnJykgPyBkYXRhLnVybCA6IGRhdGEudGV4dDtcclxuICAgICAgICAkbGluay50ZXh0KGRhdGEudGV4dCk7XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSxcclxuICAgIF9zZXRUYXJnZXQ6IGZ1bmN0aW9uKCRsaW5rLCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKGRhdGEudGFyZ2V0KSAkbGluay5hdHRyKCd0YXJnZXQnLCAnX2JsYW5rJyk7XHJcbiAgICAgICAgZWxzZSAkbGluay5yZW1vdmVBdHRyKCd0YXJnZXQnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ2VtYmVkJywge1xyXG4gICAgcG9wdXBzOiB7XHJcbiAgICAgICAgaW5zZXJ0OiB7XHJcbiAgICAgICAgICAgIGluc2VydDogeyB0aXRsZTogJyMjIGJ1dHRvbnMuaW5zZXJ0ICMjJywgY29tbWFuZDogJ2VtYmVkLmluc2VydCcsIHR5cGU6ICdwcmltYXJ5JyB9LFxyXG4gICAgICAgICAgICBjYW5jZWw6IHsgdGl0bGU6ICcjIyBlbWJlZC5jYW5jZWwgIyMnLCBjb21tYW5kOiAncG9wdXAuY2xvc2UnIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNhdmU6IHtcclxuICAgICAgICAgICAgc2F2ZTogeyB0aXRsZTogJyMjIGJ1dHRvbnMuc2F2ZSAjIycsIGNvbW1hbmQ6ICdlbWJlZC5zYXZlJywgdHlwZTogJ3ByaW1hcnknIH0sXHJcbiAgICAgICAgICAgIGNhbmNlbDogeyB0aXRsZTogJyMjIGVtYmVkLmNhbmNlbCAjIycsIGNvbW1hbmQ6ICdwb3B1cC5jbG9zZScgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWRpdDoge1xyXG4gICAgICAgICAgICB0aXRsZTogJyMjIGVtYmVkLmVtYmVkICMjJyxcclxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICAgICAgZm9ybToge1xyXG4gICAgICAgICAgICAgICAgZW1iZWQ6IHsgdHlwZTogJ3RleHRhcmVhJywgbGFiZWw6ICcjIyBlbWJlZC5kZXNjcmlwdGlvbiAjIycsIHJvd3M6IDYgfSxcclxuICAgICAgICAgICAgICAgIGNhcHRpb246IHsgdHlwZTogJ2lucHV0JywgbGFiZWw6ICcjIyBlbWJlZC5jYXB0aW9uICMjJyB9LFxyXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogeyB0eXBlOiAnY2hlY2tib3gnLCB0ZXh0OiAnIyMgZW1iZWQucmVzcG9uc2l2ZS12aWRlbyAjIycgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJ1aWxkOiBmdW5jdGlvbihzY3JpcHRzKSB7XHJcbiAgICAgICAgaWYgKHNjcmlwdHMpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2FsbFNjcmlwdHMoc2NyaXB0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9maW5kU2NyaXB0cygpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBvYnNlcnZlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5lbWJlZCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIHBvcHVwOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIHBvcHVwID0gdGhpcy5wb3B1cHMuZWRpdDtcclxuICAgICAgICBwb3B1cC5mb290ZXIgPSB0aGlzLnBvcHVwcy5pbnNlcnQ7XHJcbiAgICAgICAgcG9wdXAuY29sbGFwc2UgPSB0cnVlO1xyXG5cclxuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmFwcC5wb3B1cC5hZGQoJ2VtYmVkJywgcG9wdXApO1xyXG4gICAgICAgIHN0YWNrLm9wZW4oeyBmb2N1czogJ2VtYmVkJyB9KTtcclxuXHJcbiAgICAgICAgLy8gY29kZW1pcnJvclxyXG4gICAgICAgIHRoaXMuX2J1aWxkQ29kZW1pcnJvcihzdGFjayk7XHJcbiAgICB9LFxyXG4gICAgZWRpdDogZnVuY3Rpb24ocGFyYW1zLCBidXR0b24pIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgcG9wdXAgPSB0aGlzLnBvcHVwcy5lZGl0O1xyXG4gICAgICAgIHBvcHVwLmZvb3RlciA9IHRoaXMucG9wdXBzLnNhdmU7XHJcblxyXG4gICAgICAgIHZhciBkYXRhID0ge1xyXG4gICAgICAgICAgICBlbWJlZDogaW5zdGFuY2UuZ2V0RW1iZWRDb2RlKCksXHJcbiAgICAgICAgICAgIGNhcHRpb246IGluc3RhbmNlLmdldENhcHRpb24oKSxcclxuICAgICAgICAgICAgcmVzcG9uc2l2ZTogaW5zdGFuY2UuaXNSZXNwb25zaXZlKClcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBwb3B1cCAmIGRhdGFcclxuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmFwcC5wb3B1cC5jcmVhdGUoJ2VtYmVkJywgcG9wdXApO1xyXG4gICAgICAgIHN0YWNrLnNldERhdGEoZGF0YSk7XHJcblxyXG4gICAgICAgIC8vIG9wZW5cclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5vcGVuKHsgYnV0dG9uOiBidXR0b24sIGZvY3VzOiAnZW1iZWQnIH0pO1xyXG5cclxuICAgICAgICAvLyBjb2RlbWlycm9yXHJcbiAgICAgICAgdGhpcy5fYnVpbGRDb2RlbWlycm9yKHN0YWNrKTtcclxuICAgIH0sXHJcbiAgICBpbnNlcnQ6IGZ1bmN0aW9uKHN0YWNrKSB7XHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgLy8gZGF0YVxyXG4gICAgICAgIHZhciBkYXRhID0gc3RhY2suZ2V0RGF0YSgpO1xyXG4gICAgICAgIHZhciBjb2RlID0gdGhpcy5fZ2V0RW1iZWRDb2RlKGRhdGEpO1xyXG4gICAgICAgIGlmIChjb2RlID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjcmVhdGVcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLl9jcmVhdGVJbnN0YW5jZShkYXRhLCBjb2RlKTtcclxuICAgICAgICB0aGlzLmFwcC5ibG9jay5hZGQoeyBpbnN0YW5jZTogaW5zdGFuY2UgfSk7XHJcbiAgICB9LFxyXG4gICAgc2F2ZTogZnVuY3Rpb24oc3RhY2spIHtcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG5cclxuICAgICAgICAvLyBkYXRhXHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgZGF0YSA9IHN0YWNrLmdldERhdGEoKTtcclxuICAgICAgICB2YXIgY29kZSA9IHRoaXMuX2dldEVtYmVkQ29kZShkYXRhKTtcclxuICAgICAgICBpZiAoY29kZSA9PT0gJycpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2sucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZVxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuX2NyZWF0ZUluc3RhbmNlKGRhdGEsIGNvZGUsIGN1cnJlbnQpO1xyXG5cclxuICAgICAgICAvLyBjaGFuZ2VcclxuICAgICAgICBpZiAodGhpcy5faXNOZWVkVG9DaGFuZ2UoZGF0YSwgaW5zdGFuY2UsIGN1cnJlbnQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLmNoYW5nZShpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRDb2RlbWlycm9yOiBmdW5jdGlvbihzdGFjaykge1xyXG4gICAgICAgIHZhciAkaW5wdXQgPSBzdGFjay5nZXRJbnB1dCgnZW1iZWQnKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuY29kZW1pcnJvci5jcmVhdGUoeyBlbDogJGlucHV0LCBoZWlnaHQ6ICcyMDBweCcsIGZvY3VzOiB0cnVlIH0pO1xyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLnVwZGF0ZVBvc2l0aW9uKCk7XHJcbiAgICB9LFxyXG4gICAgX2ZpbmRTY3JpcHRzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc2NyaXB0cyA9IHRoaXMuYXBwLmVkaXRvci5nZXRMYXlvdXQoKS5maW5kKCdbZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGU9ZW1iZWRdJykuZmluZCgnc2NyaXB0JykuZ2V0QWxsKCk7XHJcbiAgICAgICAgdGhpcy5idWlsZC5jYWxsKHRoaXMsIHNjcmlwdHMpO1xyXG4gICAgfSxcclxuICAgIF9jYWxsU2NyaXB0czogZnVuY3Rpb24oc2NyaXB0cykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc2NyaXB0c1tpXS5zcmMgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3JjID0gc2NyaXB0c1tpXS5zcmM7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmdldERvYygpLmZpbmQoJ2hlYWQgc2NyaXB0W3NyYz1cIicgKyBzcmMgKyAnXCJdJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgJHNjcmlwdCA9IHRoaXMuZG9tKCc8c2NyaXB0PicpLmF0dHIoeyAnc3JjJzogc3JjLCAnYXN5bmMnOiB0cnVlLCAnZGVmZXInOiAndHJ1ZScgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NyaXB0Lm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNyYy5zZWFyY2goJ2luc3RhZ3JhbScpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2luID0gdGhpcy5hcHAuZWRpdG9yLmdldFdpbk5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdpbi5pbnN0Z3JtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW4uaW5zdGdybS5FbWJlZHMucHJvY2VzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGQoc2NyaXB0cy5zbGljZShpICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGhlYWQgPSB0aGlzLmFwcC5lZGl0b3IuZ2V0RG9jTm9kZSgpLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAoaGVhZCkgaGVhZC5hcHBlbmRDaGlsZCgkc2NyaXB0LmdldCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZhbChzY3JpcHRzW2ldLmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIF9nZXRFbWJlZENvZGU6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICB2YXIgY29kZSA9IGRhdGEuZW1iZWQudHJpbSgpO1xyXG4gICAgICAgIGNvZGUgPSB0aGlzLmFwcC5jb2RlbWlycm9yLnZhbChjb2RlKTtcclxuICAgICAgICBjb2RlID0gdGhpcy5hcHAuY29udGVudC5zYW5pdGl6ZShjb2RlKTtcclxuICAgICAgICBjb2RlID0gKCF0aGlzLl9pc0h0bWxTdHJpbmcoY29kZSkgJiYgY29kZSAhPT0gJycpID8gdGhpcy5fcGFyc2VVcmwoY29kZSkgOiBjb2RlO1xyXG5cclxuICAgICAgICByZXR1cm4gY29kZTtcclxuICAgIH0sXHJcbiAgICBfY3JlYXRlSW5zdGFuY2U6IGZ1bmN0aW9uKGRhdGEsIGNvZGUsIGN1cnJlbnQpIHtcclxuICAgICAgICB2YXIgJGZpZ3VyZTtcclxuICAgICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgICAgICB2YXIgZmlndXJlID0gY3VycmVudC5kdXBsaWNhdGVFbXB0eSgpO1xyXG4gICAgICAgICAgICAkZmlndXJlID0gZmlndXJlLmdldEJsb2NrKCk7XHJcbiAgICAgICAgICAgICRmaWd1cmUuaHRtbChjb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICRmaWd1cmUgPSAodGhpcy5faXNGaWd1cmUoY29kZSkpID8gY29kZSA6ICc8ZmlndXJlPicgKyBjb2RlICsgJzwvZmlndXJlPic7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5jcmVhdGUoJ2Jsb2NrLmVtYmVkJywgJGZpZ3VyZSk7XHJcblxyXG4gICAgICAgIC8vIGNhcHRpb25cclxuICAgICAgICBpbnN0YW5jZS5zZXRDYXB0aW9uKGRhdGEuY2FwdGlvbik7XHJcblxyXG4gICAgICAgIC8vIHJlc3BvbnNpdmVcclxuICAgICAgICBpZiAoZGF0YS5yZXNwb25zaXZlKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmFkZFJlc3BvbnNpdmUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH0sXHJcbiAgICBfcGFyc2VVcmw6IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHZhciBpZnJhbWVTdGFydCA9ICc8aWZyYW1lIHdpZHRoPVwiNTYwXCIgaGVpZ2h0PVwiMzE1XCIgc3JjPVwiJztcclxuICAgICAgICB2YXIgaWZyYW1lRW5kID0gJ1wiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nO1xyXG5cclxuICAgICAgICB2YXIgcGFyc2VkO1xyXG4gICAgICAgIGlmIChzdHIubWF0Y2godGhpcy5vcHRzLnJlZ2V4LnlvdXR1YmUpKSB7XHJcbiAgICAgICAgICAgIHBhcnNlZCA9IHN0ci5yZXBsYWNlKHRoaXMub3B0cy5yZWdleC55b3V0dWJlLCAnLy93d3cueW91dHViZS5jb20vZW1iZWQvJDEnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGlmcmFtZVN0YXJ0ICsgcGFyc2VkICsgaWZyYW1lRW5kO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzdHIubWF0Y2godGhpcy5vcHRzLnJlZ2V4LnZpbWVvKSkge1xyXG4gICAgICAgICAgICBwYXJzZWQgPSBzdHIucmVwbGFjZSh0aGlzLm9wdHMucmVnZXgudmltZW8sICcvL3BsYXllci52aW1lby5jb20vdmlkZW8vJDInKTtcclxuICAgICAgICAgICAgcmV0dXJuIGlmcmFtZVN0YXJ0ICsgcGFyc2VkICsgaWZyYW1lRW5kO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuXHJcbiAgICB9LFxyXG4gICAgX2lzTmVlZFRvQ2hhbmdlOiBmdW5jdGlvbihkYXRhLCBpbnN0YW5jZSwgY3VycmVudCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50LmdldEVtYmVkQ29kZSgpICE9PSBpbnN0YW5jZS5nZXRFbWJlZENvZGUoKSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKGRhdGEucmVzcG9uc2l2ZSAhPT0gY3VycmVudC5pc1Jlc3BvbnNpdmUoKSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKGRhdGEuY2FwdGlvbiAhPT0gY3VycmVudC5nZXRDYXB0aW9uKCkpIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIF9pc0h0bWxTdHJpbmc6IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiAvXlxccyo8KFxcdyt8ISlbXj5dKj4vLnRlc3Qoc3RyKTtcclxuICAgIH0sXHJcbiAgICBfaXNGaWd1cmU6IGZ1bmN0aW9uKHN0cikge1xyXG4gICAgICAgIHJldHVybiAvXjxmaWd1cmUvLnRlc3Qoc3RyKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAnbGlzdCcsIHtcclxuICAgIGluZGVudDogZnVuY3Rpb24ocGFyYW1zLCBpdGVtSW5zdGFuY2UpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbCA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXQoKTtcclxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRCbG9jaygpO1xyXG4gICAgICAgIHZhciAkaXRlbSA9IHRoaXMuZG9tKGl0ZW0pO1xyXG4gICAgICAgIHZhciAkcHJldiA9ICRpdGVtLnByZXZFbGVtZW50KCk7XHJcbiAgICAgICAgdmFyIHByZXYgPSAkcHJldi5nZXQoKTtcclxuICAgICAgICB2YXIgaXNJbmRlbnQgPSAoc2VsLmNvbGxhcHNlZCAmJiBpdGVtICYmIHByZXYgJiYgcHJldi50YWdOYW1lID09PSAnTEknKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnNhdmUoaXRlbSk7XHJcblxyXG4gICAgICAgIGlmIChpc0luZGVudCkge1xyXG4gICAgICAgICAgICAkcHJldiA9IHRoaXMuZG9tKHByZXYpO1xyXG4gICAgICAgICAgICB2YXIgJHByZXZDaGlsZCA9ICRwcmV2LmNoaWxkcmVuKCd1bCwgb2wnKTtcclxuICAgICAgICAgICAgdmFyICRsaXN0ID0gJGl0ZW0uY2xvc2VzdCgndWwsIG9sJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoJHByZXZDaGlsZC5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICRwcmV2Q2hpbGQuYXBwZW5kKCRpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaXN0VGFnID0gJGxpc3QuZ2V0KCkudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyICRuZXdMaXN0ID0gdGhpcy5kb20oJzwnICsgbGlzdFRhZyArICc+Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgJG5ld0xpc3QuYXBwZW5kKCRpdGVtKTtcclxuICAgICAgICAgICAgICAgICRwcmV2LmFwcGVuZCgkbmV3TGlzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXBwLnNlbGVjdGlvbi5yZXN0b3JlKCk7XHJcbiAgICB9LFxyXG4gICAgb3V0ZGVudDogZnVuY3Rpb24ocGFyYW1zLCBpdGVtSW5zdGFuY2UpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbCA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXQoKTtcclxuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRCbG9jaygpO1xyXG4gICAgICAgIHZhciAkaXRlbSA9IHRoaXMuZG9tKGl0ZW0pO1xyXG5cclxuICAgICAgICBpZiAoc2VsLmNvbGxhcHNlZCAmJiBpdGVtKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgJGxpc3RJdGVtID0gJGl0ZW0ucGFyZW50KCk7XHJcbiAgICAgICAgICAgIHZhciAkbGlJdGVtID0gJGxpc3RJdGVtLmNsb3Nlc3QoJ2xpJyk7XHJcbiAgICAgICAgICAgIHZhciAkcHJldiA9ICRpdGVtLnByZXZFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIHZhciAkbmV4dCA9ICRpdGVtLm5leHRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIHZhciBwcmV2ID0gJHByZXYuZ2V0KCk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gJG5leHQuZ2V0KCk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0SXRlbXMsICRuZXdMaXN0O1xyXG4gICAgICAgICAgICB2YXIgaXNUb3AgPSAocHJldiA9PT0gZmFsc2UpO1xyXG4gICAgICAgICAgICB2YXIgaXNNaWRkbGUgPSAocHJldiAhPT0gZmFsc2UgJiYgbmV4dCAhPT0gZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnNhdmUoaXRlbSk7XHJcblxyXG4gICAgICAgICAgICAvLyBvdXRcclxuICAgICAgICAgICAgaWYgKCRsaUl0ZW0ubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNNaWRkbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbXMgPSB0aGlzLl9nZXRBbGxOZXh0KCRpdGVtLmdldCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAkbmV3TGlzdCA9IHRoaXMuZG9tKCc8JyArICRsaXN0SXRlbS5nZXQoKS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgKyAnPicpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5leHRJdGVtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkbmV3TGlzdC5hcHBlbmQobmV4dEl0ZW1zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRsaUl0ZW0uYWZ0ZXIoJGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRpdGVtLmFwcGVuZCgkbmV3TGlzdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkbGlJdGVtLmFmdGVyKCRpdGVtKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRsaXN0SXRlbS5jaGlsZHJlbigpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkbGlzdEl0ZW0ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUb3ApICRpdGVtLmFwcGVuZCgkbGlzdEl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hcHAuc2VsZWN0aW9uLnJlc3RvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfZ2V0QWxsTmV4dDogZnVuY3Rpb24obmV4dCkge1xyXG4gICAgICAgIHZhciBub2RlcyA9IFtdO1xyXG5cclxuICAgICAgICB3aGlsZSAobmV4dCkge1xyXG4gICAgICAgICAgICB2YXIgJG5leHQgPSB0aGlzLmRvbShuZXh0KS5uZXh0RWxlbWVudCgpO1xyXG4gICAgICAgICAgICBuZXh0ID0gJG5leHQuZ2V0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobmV4dCkgbm9kZXMucHVzaChuZXh0KTtcclxuICAgICAgICAgICAgZWxzZSByZXR1cm4gbm9kZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbm9kZXM7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnbW9kdWxlJywgJ2dyaWQnLCB7XHJcbiAgICBwb3B1cDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZVxyXG4gICAgICAgIHZhciBzdGFjayA9IHRoaXMuYXBwLnBvcHVwLmFkZCgnZ3JpZCcsIHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBwb3B1cC5ncmlkICMjJyxcclxuICAgICAgICAgICAgd2lkdGg6ICczMjBweCcsXHJcbiAgICAgICAgICAgIGl0ZW1zOiB0aGlzLmJ1aWxkSXRlbXMoKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzdGFjay5vcGVuKCk7XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMuZ3JpZCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGJ1aWxkSXRlbXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpdGVtcyA9IHt9O1xyXG5cclxuICAgICAgICB2YXIgeiA9IDA7XHJcbiAgICAgICAgZm9yICh2YXIgcGF0dGVybiBpbiB0aGlzLm9wdHMuZ3JpZC5wYXR0ZXJucykge1xyXG4gICAgICAgICAgICB6Kys7XHJcbiAgICAgICAgICAgIHZhciAkaXRlbSA9IHRoaXMuX2NyZWF0ZVBhdHRlcm4ocGF0dGVybik7XHJcblxyXG4gICAgICAgICAgICBpdGVtc1snY29sdW1uJyArIHpdID0ge1xyXG4gICAgICAgICAgICAgICAgaHRtbDogJGl0ZW0sXHJcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAnZ3JpZC5hZGQnLFxyXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7IHBhdHRlcm46IHBhdHRlcm4sIGNvbHVtbnM6IHRoaXMub3B0cy5ncmlkLnBhdHRlcm5zW3BhdHRlcm5dIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpdGVtcztcclxuICAgIH0sXHJcbiAgICBhZGQ6IGZ1bmN0aW9uKHBhcmFtcykge1xyXG5cclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG5cclxuICAgICAgICB2YXIgY29sdW1ucyA9IHBhcmFtcy5jb2x1bW5zLnNwbGl0KCd8Jyk7XHJcbiAgICAgICAgdmFyICRncmlkID0gIHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMub3B0cy5ncmlkLmNsYXNzbmFtZSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2x1bW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLmFwcC5jcmVhdGUoJ2Jsb2NrLmNvbHVtbicpO1xyXG4gICAgICAgICAgICB2YXIgJGNvbHVtbiA9IGNvbHVtbi5nZXRCbG9jaygpO1xyXG5cclxuICAgICAgICAgICAgJGNvbHVtbi5hZGRDbGFzcyhjb2x1bW5zW2ldKTtcclxuICAgICAgICAgICAgJGdyaWQuYXBwZW5kKCRjb2x1bW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYWRkXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suYWRkKHtcclxuICAgICAgICAgICAgbmFtZTogJ2dyaWQnLFxyXG4gICAgICAgICAgICBzb3VyY2U6ICRncmlkLFxyXG4gICAgICAgICAgICBjYXJldDogZmFsc2VcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gc2V0XHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KGluc3RhbmNlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2NyZWF0ZVBhdHRlcm46IGZ1bmN0aW9uKHBhdHRlcm4pIHtcclxuICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtZ3JpZC1ib3gnKTtcclxuICAgICAgICB2YXIgY29sdW1ucyA9IHBhdHRlcm4uc3BsaXQoJ3wnKTtcclxuICAgICAgICB2YXIgc3VtID0gdGhpcy5hcHAudXRpbHMuc3VtT2ZBcnJheShjb2x1bW5zKTtcclxuICAgICAgICB2YXIgdW5pdCA9IDEwMC9zdW07XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sdW1ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgJGNvbHVtbiA9IHRoaXMuZG9tKCc8c3Bhbj4nKTtcclxuICAgICAgICAgICAgJGNvbHVtbi5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtZ3JpZC1jb2x1bW4nKTtcclxuICAgICAgICAgICAgJGNvbHVtbi5jc3MoJ3dpZHRoJywgKGNvbHVtbnNbaV0gKiB1bml0KSArICclJyk7XHJcblxyXG4gICAgICAgICAgICAkaXRlbS5hcHBlbmQoJGNvbHVtbik7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuICRpdGVtO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdpbWFnZScsIHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuZGF0YVN0YXRlcyA9IFtdO1xyXG4gICAgfSxcclxuICAgIHBvcHVwOiBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5hcHAucG9wdXAuYWRkKCdpbWFnZScsIHsgdGl0bGU6ICcjIyBwb3B1cC5hZGQtaW1hZ2UgIyMnLCB3aWR0aDogJzEwMCUnIH0pO1xyXG4gICAgICAgIHN0YWNrLm9wZW4oKTtcclxuXHJcbiAgICAgICAgLy8gYm9keVxyXG4gICAgICAgIHZhciAkYm9keSA9IHN0YWNrLmdldEJvZHkoKTtcclxuXHJcbiAgICAgICAgLy8gYnkgdXJsXHJcbiAgICAgICAgaWYgKHRoaXMub3B0cy5pbWFnZS51cmwpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlSW1hZ2VCeVVybCgkYm9keSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzZWN0aW9uIG9yXHJcbiAgICAgICAgaWYgKHRoaXMub3B0cy5pbWFnZS51cmwgJiYgKHRoaXMub3B0cy5pbWFnZS51cGxvYWQgfHwgdGhpcy5vcHRzLmltYWdlLnNlbGVjdCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlT3JTZWN0aW9uKCRib2R5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHVwbG9hZFxyXG4gICAgICAgIHRoaXMuJHVwbG9hZCA9IHRoaXMuY3JlYXRlVXBsb2FkQm94KHRoaXMub3B0cy5pbWFnZS51cGxvYWQsICRib2R5KTtcclxuXHJcbiAgICAgICAgLy8gbGlzdCBvZiBpbWFnZXNcclxuICAgICAgICB0aGlzLmNyZWF0ZVNlbGVjdEJveCh0aGlzLm9wdHMuaW1hZ2Uuc2VsZWN0LCAkYm9keSwgJ2ltYWdlLmluc2VydEZyb21TZWxlY3QnKTtcclxuXHJcbiAgICAgICAgLy8gYnVpbGQgdXBsb2FkXHJcbiAgICAgICAgdGhpcy5fYnVpbGRVcGxvYWQodGhpcy4kdXBsb2FkLCAnaW1hZ2UuaW5zZXJ0QnlVcGxvYWQnKTtcclxuICAgIH0sXHJcbiAgICBlZGl0OiBmdW5jdGlvbihwYXJhbXMsIGJ1dHRvbikge1xyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLmNyZWF0ZSgnaW1hZ2UtZWRpdCcsIHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBwb3B1cC5pbWFnZSAjIycsXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICAgIGdldHRlcjogJ2Jsb2NrLmdldERhdGEnLFxyXG4gICAgICAgICAgICBzZXR0ZXI6ICdibG9jay5zZXREYXRhJyxcclxuICAgICAgICAgICAgZm9ybToge1xyXG4gICAgICAgICAgICAgICAgYWx0OiB7IHR5cGU6ICdpbnB1dCcsIGxhYmVsOiAnIyMgaW1hZ2UuYWx0LXRleHQgIyMnIH0sXHJcbiAgICAgICAgICAgICAgICBjYXB0aW9uOiB7IHR5cGU6ICdpbnB1dCcsIGxhYmVsOiAnIyMgaW1hZ2UuY2FwdGlvbiAjIycsIG9ic2VydmVyOiAnaW1hZ2Uub2JzZXJ2ZUltYWdlQ2FwdGlvbicgfSxcclxuICAgICAgICAgICAgICAgIGxpbms6IHsgdHlwZTogJ2lucHV0JywgbGFiZWw6ICcjIyBpbWFnZS5saW5rICMjJywgb2JzZXJ2ZXI6ICdpbWFnZS5vYnNlcnZlSW1hZ2VMaW5rJyB9LFxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB7IHR5cGU6ICdjaGVja2JveCcsIHRleHQ6ICcjIyBpbWFnZS5saW5rLWluLW5ldy10YWIgIyMnLCBvYnNlcnZlcjogJ2ltYWdlLm9ic2VydmVJbWFnZUxpbmsnIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZm9vdGVyOiAge1xyXG4gICAgICAgICAgICAgICAgJ3NhdmUnOiB7IHRpdGxlOiAnIyMgaW1hZ2Uuc2F2ZSAjIycsIGNvbW1hbmQ6ICdpbWFnZS5zYXZlJywgdHlwZTogJ3ByaW1hcnknIH0sXHJcbiAgICAgICAgICAgICAgICAnY2FuY2VsJzogeyB0aXRsZTogJyMjIGltYWdlLmNhbmNlbCAjIycsIGNvbW1hbmQ6ICdwb3B1cC5jbG9zZScgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHVwbG9hZFxyXG4gICAgICAgIHRoaXMuX2J1aWxkRWRpdFVwbG9hZCgpO1xyXG5cclxuICAgICAgICAvLyBvcGVuXHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAub3Blbih7IGJ1dHRvbjogYnV0dG9uIH0pO1xyXG4gICAgfSxcclxuICAgIGVkaXRDYXJkOiBmdW5jdGlvbihwYXJhbXMsIGJ1dHRvbikge1xyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLmNyZWF0ZSgnaW1hZ2UtZWRpdCcsIHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBwb3B1cC5pbWFnZSAjIycsXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICAgICAgICAgIGdldHRlcjogJ2Jsb2NrLmdldERhdGEnLFxyXG4gICAgICAgICAgICBzZXR0ZXI6ICdibG9jay5zZXREYXRhJyxcclxuICAgICAgICAgICAgZm9ybToge1xyXG4gICAgICAgICAgICAgICAgYWx0OiB7IHR5cGU6ICdpbnB1dCcsIGxhYmVsOiAnIyMgaW1hZ2UuYWx0LXRleHQgIyMnIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZm9vdGVyOiAge1xyXG4gICAgICAgICAgICAgICAgJ3NhdmUnOiB7IHRpdGxlOiAnIyMgaW1hZ2Uuc2F2ZSAjIycsIGNvbW1hbmQ6ICdpbWFnZS5zYXZlJywgdHlwZTogJ3ByaW1hcnknIH0sXHJcbiAgICAgICAgICAgICAgICAnY2FuY2VsJzogeyB0aXRsZTogJyMjIGltYWdlLmNhbmNlbCAjIycsIGNvbW1hbmQ6ICdwb3B1cC5jbG9zZScgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIHVwbG9hZFxyXG4gICAgICAgIHRoaXMuX2J1aWxkRWRpdFVwbG9hZCgpO1xyXG5cclxuICAgICAgICAvLyBvcGVuXHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAub3Blbih7IGJ1dHRvbjogYnV0dG9uIH0pO1xyXG4gICAgfSxcclxuICAgIG9ic2VydmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLmltYWdlKSByZXR1cm4gZmFsc2U7XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZVN0YXRlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fZmluZEltYWdlcygpLmVhY2godGhpcy5fYWRkSW1hZ2VTdGF0ZS5iaW5kKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBvYnNlcnZlSW1hZ2VMaW5rOiBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMub3B0cy5pbWFnZS5saW5rKSA/IG9iaiA6IGZhbHNlO1xyXG4gICAgfSxcclxuICAgIG9ic2VydmVJbWFnZUNhcHRpb246IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5nZXRUYWcoKSA9PT0gJ2ZpZ3VyZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcGFzdGU6IGZ1bmN0aW9uKGJsb2IsIGUpIHtcclxuICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICB1cmw6IHRoaXMub3B0cy5pbWFnZS51cGxvYWQsXHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMub3B0cy5pbWFnZS5uYW1lLFxyXG4gICAgICAgICAgICBkYXRhOiB0aGlzLm9wdHMuaW1hZ2UuZGF0YSxcclxuICAgICAgICAgICAgbXVsdGlwbGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiAnaW1hZ2UuaW5zZXJ0RnJvbUJsb2InLFxyXG4gICAgICAgICAgICBlcnJvcjogJ2ltYWdlLmVycm9yJ1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHVwbG9hZFxyXG4gICAgICAgIHZhciB1cGxvYWQgPSB0aGlzLmFwcC5jcmVhdGUoJ3VwbG9hZCcpO1xyXG4gICAgICAgIHVwbG9hZC5zZW5kKGUsIFtibG9iXSwgcGFyYW1zKTtcclxuICAgIH0sXHJcbiAgICBkcm9wOiBmdW5jdGlvbihlLCBkdCkge1xyXG4gICAgICAgIHZhciBmaWxlcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZHQuZmlsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGZpbGUgPSBkdC5maWxlc1tpXSB8fCBkdC5pdGVtc1tpXS5nZXRBc0ZpbGUoKTtcclxuICAgICAgICAgICAgaWYgKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goZmlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgIHVybDogdGhpcy5vcHRzLmltYWdlLnVwbG9hZCxcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5vcHRzLmltYWdlLm5hbWUsXHJcbiAgICAgICAgICAgIGRhdGE6IHRoaXMub3B0cy5pbWFnZS5kYXRhLFxyXG4gICAgICAgICAgICBtdWx0aXBsZTogdGhpcy5vcHRzLmltYWdlLm11bHRpcGxlLFxyXG4gICAgICAgICAgICBzdWNjZXNzOiAnaW1hZ2UuaW5zZXJ0QnlEcm9wJyxcclxuICAgICAgICAgICAgZXJyb3I6ICdpbWFnZS5lcnJvcidcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgdmFyICRibG9jayA9IHRoaXMuZG9tKGUudGFyZ2V0KS5jbG9zZXN0KCdbZGF0YS0nICsgdGhpcy5wcmVmaXggKyAnLXR5cGVdJyk7XHJcbiAgICAgICAgICAgIGlmICgkYmxvY2subGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQoJGJsb2NrKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdXBsb2FkXHJcbiAgICAgICAgICAgIHZhciB1cGxvYWQgPSB0aGlzLmFwcC5jcmVhdGUoJ3VwbG9hZCcpO1xyXG4gICAgICAgICAgICB1cGxvYWQuc2VuZChlLCBmaWxlcywgcGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaW5zZXJ0RnJvbUNsaXBib2FyZDogZnVuY3Rpb24oY2xpcGJvYXJkKSB7XHJcbiAgICAgICAgdmFyIHRleHQgPSBjbGlwYm9hcmQuZ2V0RGF0YShcInRleHQvcGxhaW5cIikgfHwgY2xpcGJvYXJkLmdldERhdGEoXCJ0ZXh0L2h0bWxcIik7XHJcbiAgICAgICAgdGV4dCA9IHRleHQudHJpbSgpO1xyXG5cclxuICAgICAgICBpZiAodGV4dCAhPT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGl0ZW1zID0gY2xpcGJvYXJkLml0ZW1zO1xyXG4gICAgICAgIHZhciBibG9iID0gbnVsbDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtc1tpXS50eXBlLmluZGV4T2YoXCJpbWFnZVwiKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYmxvYiA9IGl0ZW1zW2ldLmdldEFzRmlsZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoYmxvYiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhc3RlKGJsb2IpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaW5zZXJ0RnJvbUJsb2I6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgdGhpcy5pbnNlcnQocmVzcG9uc2UpO1xyXG4gICAgfSxcclxuICAgIGluc2VydEJ5RHJvcDogZnVuY3Rpb24ocmVzcG9uc2UsIGUpIHtcclxuICAgICAgICBpZiAodGhpcy5hcHAuYmxvY2suaXMoKSkge1xyXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICB2YXIgdHlwZSA9IGluc3RhbmNlLmdldFR5cGUoKTtcclxuICAgICAgICAgICAgdmFyIGlzQ2hhbmdlID0gKCh0eXBlID09PSAnY2FyZCcgJiYgdGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lID09PSAnSU1HJyAmJiBpbnN0YW5jZS5oYXNJbWFnZSgpKSB8fCB0eXBlID09PSAnaW1hZ2UnKTtcclxuICAgICAgICAgICAgaWYgKGlzQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZShyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZSAmJiB0eXBlICE9PSAnY2FyZCcgJiYgaW5zdGFuY2UuaXNFZGl0YWJsZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5pbnNlcnRpb24uaW5zZXJ0UG9pbnQoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW5zZXJ0KHJlc3BvbnNlKTtcclxuICAgIH0sXHJcbiAgICBpbnNlcnRCeVVwbG9hZDogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICB0aGlzLmluc2VydChyZXNwb25zZSk7XHJcbiAgICB9LFxyXG4gICAgaW5zZXJ0QnlVcmw6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHZhciBzdHIgPSB0aGlzLiR1cmxpbnB1dC52YWwoKTtcclxuICAgICAgICBpZiAoc3RyLnRyaW0oKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHJlc3BvbnNlID0ge1xyXG4gICAgICAgICAgICBmaWxlOiB7IHVybDogc3RyLCBpZDogdGhpcy5hcHAudXRpbHMuZ2V0UmFuZG9tSWQoKSB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gaW5zZXJ0XHJcbiAgICAgICAgdGhpcy5pbnNlcnQocmVzcG9uc2UpO1xyXG4gICAgfSxcclxuICAgIGluc2VydEZyb21TZWxlY3Q6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHZhciAkdGFyZ2V0ID0gdGhpcy5kb20oZS50YXJnZXQpO1xyXG4gICAgICAgIHZhciBvYmogPSB7IHVybDogJHRhcmdldC5hdHRyKCdkYXRhLXVybCcpIH07XHJcbiAgICAgICAgdmFyIGlkID0gJHRhcmdldC5hdHRyKCdkYXRhLWlkJyk7XHJcbiAgICAgICAgaWYgKGlkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIG9iai5pZCA9IGlkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaW5zZXJ0XHJcbiAgICAgICAgdGhpcy5pbnNlcnQoeyBmaWxlOiBvYmogfSk7XHJcbiAgICB9LFxyXG4gICAgY2hhbmdlQ2xvbmU6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGltYWdlY2xvbmUuYXR0cignc3JjJywgcmVzcG9uc2Vba2V5XS51cmwpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2hhbmdlKHJlc3BvbnNlLCBmYWxzZSk7XHJcbiAgICB9LFxyXG4gICAgY2hhbmdlOiBmdW5jdGlvbihyZXNwb25zZSwgY2xvc2Vwb3B1cCkge1xyXG4gICAgICAgIGlmIChjbG9zZXBvcHVwICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnNldEltYWdlKHJlc3BvbnNlW2tleV0pO1xyXG5cclxuICAgICAgICAgICAgLy8gYnJvYWRjYXN0XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnaW1hZ2UuY2hhbmdlJywgcmVzcG9uc2Vba2V5XSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnaW1hZ2UudXBsb2FkJywgeyBpbnN0YW5jZTogaW5zdGFuY2UsIGRhdGE6IHJlc3BvbnNlW2tleV0gfSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2F2ZTogZnVuY3Rpb24oc3RhY2spIHtcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldERhdGEoc3RhY2spO1xyXG4gICAgfSxcclxuICAgIGluc2VydDogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAvLyBwb3B1cCBjbG9zZVxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcblxyXG4gICAgICAgIC8vIGluc2VydFxyXG4gICAgICAgIHRoaXMuaW1hZ2VzbGVuID0gMDtcclxuICAgICAgICB0aGlzLmltYWdlc2NvdW50ID0gMDtcclxuXHJcbiAgICAgICAgLy8gdGFnXHJcbiAgICAgICAgdmFyIHRhZyA9IHRoaXMub3B0cy5pbWFnZS50YWc7XHJcblxyXG4gICAgICAgIC8vIGxvb3BcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciAkc291cmNlID0gdGhpcy5kb20oJzwnICsgdGFnICsgJz4nKTtcclxuICAgICAgICAgICAgdmFyICRpbWFnZSA9IHRoaXMuX2NyZWF0ZUltYWdlRnJvbVJlc3BvbnNlSXRlbShyZXNwb25zZVtrZXldKTtcclxuXHJcbiAgICAgICAgICAgICRzb3VyY2UuYXBwZW5kKCRpbWFnZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5jcmVhdGUoJ2Jsb2NrLmltYWdlJywgJHNvdXJjZSk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLmFkZCh7IGluc3RhbmNlOiBpbnN0YW5jZSB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIGJyb2FkY2FzdFxyXG4gICAgICAgICAgICB0aGlzLmFwcC5icm9hZGNhc3QoJ2ltYWdlLnVwbG9hZCcsIHsgaW5zdGFuY2U6IGluc3RhbmNlLCBkYXRhOiByZXNwb25zZVtrZXldIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kbGFzdCA9IGluc3RhbmNlLmdldEJsb2NrKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzbGVuKys7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGVycm9yOiBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgIHRoaXMuYXBwLmJyb2FkY2FzdCgnaW1hZ2UudXBsb2FkLmVycm9yJywgeyByZXNwb25zZTogcmVzcG9uc2UgfSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0U3RhdGVzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgJGltYWdlcyA9IHRoaXMuX2ZpbmRJbWFnZXMoKTtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgc3RhdHVzXHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuZGF0YVN0YXRlcykge1xyXG5cdFx0XHR2YXIgZGF0YSA9IHRoaXMuZGF0YVN0YXRlc1trZXldO1xyXG5cdFx0XHR2YXIgc3RhdHVzID0gJGltYWdlcy5pcygnW2RhdGEtaW1hZ2U9XCInICsgZGF0YS5pZCArICdcIl0nKTtcclxuXHRcdFx0dGhpcy5fc2V0SW1hZ2VTdGF0ZShkYXRhLmlkLCBzdGF0dXMpO1xyXG5cdFx0fVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU3RhdGVzO1xyXG4gICAgfSxcclxuICAgIGNyZWF0ZVVwbG9hZEJveDogZnVuY3Rpb24odXBsb2FkLCAkYm9keSkge1xyXG4gICAgICAgIGlmICghdXBsb2FkKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciAkdXBsb2FkID0gdGhpcy5kb20oJzxkaXY+Jyk7XHJcbiAgICAgICAgJGJvZHkuYXBwZW5kKCR1cGxvYWQpO1xyXG5cclxuICAgICAgICByZXR1cm4gJHVwbG9hZDtcclxuICAgIH0sXHJcbiAgICBjcmVhdGVTZWxlY3RCb3g6IGZ1bmN0aW9uKHNlbGVjdCwgJGJvZHksIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKCFzZWxlY3QpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gaW1hZ2VzIGJveFxyXG4gICAgICAgIHRoaXMuJHNlbGVjdGJveCA9IHRoaXMuX2NyZWF0ZUltYWdlc0JveCgkYm9keSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJzZUxpc3Qoc2VsZWN0LCBjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFqYXguZ2V0KHtcclxuICAgICAgICAgICAgXHR1cmw6IHNlbGVjdCxcclxuICAgICAgICAgICAgXHRkYXRhOiB7IGQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpIH0sXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VMaXN0KGRhdGEsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9maW5kSW1hZ2VzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHAuZWRpdG9yLmdldExheW91dCgpLmZpbmQoJ1tkYXRhLWltYWdlXScpO1xyXG4gICAgfSxcclxuXHRfYWRkSW1hZ2VTdGF0ZTogZnVuY3Rpb24oJG5vZGUpIHtcclxuICAgICAgICB2YXIgaWQgPSAkbm9kZS5hdHRyKCdkYXRhLWltYWdlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhU3RhdGVzW2lkXSA9IHsgdHlwZTogJ2ltYWdlJywgc3RhdHVzOiB0cnVlLCB1cmw6ICRub2RlLmF0dHIoJ3NyYycpLCAkaW1nOiAkbm9kZSwgaWQ6IGlkIH07XHJcblx0fSxcclxuXHRfc2V0SW1hZ2VTdGF0ZTogZnVuY3Rpb24odXJsLCBzdGF0dXMpIHtcclxuXHRcdHRoaXMuZGF0YVN0YXRlc1t1cmxdLnN0YXR1cyA9IHN0YXR1cztcclxuXHR9LFxyXG4gICAgX2NoZWNrSW1hZ2VMb2FkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmltYWdlc2NvdW50Kys7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzY291bnQgPT09IHRoaXMuaW1hZ2VzbGVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnVuc2V0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldCh0aGlzLiRsYXN0KTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuZWRpdG9yLmFkanVzdEhlaWdodCgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfYnVpbGRFZGl0VXBsb2FkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5pbWFnZS51cGxvYWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcblxyXG4gICAgICAgIC8vIHN0YWNrXHJcbiAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5hcHAucG9wdXAuZ2V0U3RhY2soKTtcclxuICAgICAgICB2YXIgJGJvZHkgPSBzdGFjay5nZXRCb2R5KCk7XHJcblxyXG4gICAgICAgIC8vIGZvcm0gaXRlbVxyXG4gICAgICAgIHZhciAkaXRlbSA9IHRoaXMuX2NyZWF0ZUZvcm1JdGVtKCk7XHJcbiAgICAgICAgJGl0ZW0uYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZvcm0taXRlbS1lZGl0LWltYWdlLWJveCcpO1xyXG5cclxuICAgICAgICAvLyBpbWFnZVxyXG4gICAgICAgIHRoaXMuJGltYWdlY2xvbmUgPSBpbnN0YW5jZS5nZXRJbWFnZSgpLmNsb25lKCk7XHJcbiAgICAgICAgdmFyICRpbWFnZWl0ZW0gPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctZm9ybS1pdGVtLWltYWdlJyk7XHJcblxyXG4gICAgICAgICRpbWFnZWl0ZW0uYXBwZW5kKHRoaXMuJGltYWdlY2xvbmUpO1xyXG4gICAgICAgICRpdGVtLmFwcGVuZCgkaW1hZ2VpdGVtKTtcclxuXHJcbiAgICAgICAgLy8gdXBsb2FkIGl0ZW1cclxuICAgICAgICB0aGlzLiR1cGxvYWQgPSB0aGlzLmRvbSgnPGRpdj4nKTtcclxuICAgICAgICAkaXRlbS5hcHBlbmQodGhpcy4kdXBsb2FkKTtcclxuXHJcbiAgICAgICAgLy8gYXBwZW5kIHRvIHBvcHVwXHJcbiAgICAgICAgJGJvZHkucHJlcGVuZCgkaXRlbSk7XHJcblxyXG4gICAgICAgIC8vIGJ1aWxkIHVwbG9hZFxyXG4gICAgICAgIHRoaXMuX2J1aWxkVXBsb2FkKHRoaXMuJHVwbG9hZCwgJ2ltYWdlLmNoYW5nZUNsb25lJyk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkVXBsb2FkOiBmdW5jdGlvbigkaXRlbSwgY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0cy5pbWFnZS51cGxvYWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgYm94OiB0cnVlLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogdGhpcy5sYW5nLmdldCgnaW1hZ2UudXBsb2FkLW5ldy1wbGFjZWhvbGRlcicpLFxyXG4gICAgICAgICAgICB1cmw6IHRoaXMub3B0cy5pbWFnZS51cGxvYWQsXHJcbiAgICAgICAgICAgIG5hbWU6IHRoaXMub3B0cy5pbWFnZS5uYW1lLFxyXG4gICAgICAgICAgICBkYXRhOiB0aGlzLm9wdHMuaW1hZ2UuZGF0YSxcclxuICAgICAgICAgICAgbXVsdGlwbGU6IHRoaXMub3B0cy5pbWFnZS5tdWx0aXBsZSxcclxuICAgICAgICAgICAgc3VjY2VzczogY2FsbGJhY2ssXHJcbiAgICAgICAgICAgIGVycm9yOiAnaW1hZ2UuZXJyb3InXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5hcHAuY3JlYXRlKCd1cGxvYWQnLCAkaXRlbSwgcGFyYW1zKTtcclxuICAgIH0sXHJcbiAgICBfY3JlYXRlSW1hZ2VGcm9tUmVzcG9uc2VJdGVtOiBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgdmFyICRpbWFnZSA9IHRoaXMuZG9tKCc8aW1nPicpLmF0dHIoJ3NyYycsIGl0ZW0udXJsKS5vbmUoJ2xvYWQnLCB0aGlzLl9jaGVja0ltYWdlTG9hZC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJ2lkJykpICRpbWFnZS5hdHRyKCdkYXRhLWltYWdlJywgaXRlbS5pZCk7XHJcbiAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoJzJ4JykpICRpbWFnZS5hdHRyKCdzcmNzZXQnLCBpdGVtWycyeCddICsgJyAyeCcpO1xyXG5cclxuICAgICAgICByZXR1cm4gJGltYWdlO1xyXG4gICAgfSxcclxuICAgIF9jcmVhdGVJbWFnZXNCb3g6IGZ1bmN0aW9uKCRib2R5KSB7XHJcbiAgICAgICAgdmFyICRib3ggPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtaW1hZ2VzLWJveCcpO1xyXG4gICAgICAgICRib2R5LmFwcGVuZCgkYm94KTtcclxuXHJcbiAgICAgICAgcmV0dXJuICRib3g7XHJcbiAgICB9LFxyXG4gICAgX2NyZWF0ZU9yU2VjdGlvbjogZnVuY3Rpb24oJGJvZHkpIHtcclxuICAgICAgICB2YXIgJHNlY3Rpb24gPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtaW1hZ2Utc2VjdGlvbi1vcicpO1xyXG4gICAgICAgICRzZWN0aW9uLmh0bWwodGhpcy5sYW5nLmdldCgnaW1hZ2Uub3InKSk7XHJcbiAgICAgICAgJGJvZHkuYXBwZW5kKCRzZWN0aW9uKTtcclxuICAgIH0sXHJcbiAgICBfY3JlYXRlSW1hZ2VCeVVybDogZnVuY3Rpb24oJGJvZHkpIHtcclxuICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLl9jcmVhdGVGb3JtSXRlbSgpO1xyXG5cclxuICAgICAgICB0aGlzLiR1cmxpbnB1dCA9IHRoaXMuX2NyZWF0ZVVybElucHV0KCk7XHJcbiAgICAgICAgdGhpcy4kdXJsYnV0dG9uID0gdGhpcy5fY3JlYXRlVXJsQnV0dG9uKCk7XHJcblxyXG4gICAgICAgICRpdGVtLmFwcGVuZCh0aGlzLiR1cmxpbnB1dCk7XHJcbiAgICAgICAgJGl0ZW0uYXBwZW5kKHRoaXMuJHVybGJ1dHRvbik7XHJcblxyXG4gICAgICAgICRib2R5LmFwcGVuZCgkaXRlbSk7XHJcblxyXG4gICAgICAgIC8vIGZvY3VzXHJcbiAgICAgICAgdGhpcy4kdXJsaW5wdXQuZm9jdXMoKTtcclxuICAgIH0sXHJcbiAgICBfY3JlYXRlRm9ybUl0ZW06IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctZm9ybS1jb250YWluZXItZmxleCcpO1xyXG4gICAgfSxcclxuICAgIF9jcmVhdGVVcmxJbnB1dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRpbnB1dCA9IHRoaXMuZG9tKCc8aW5wdXQ+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZvcm0taW5wdXQnKTtcclxuICAgICAgICAkaW5wdXQuYXR0cigncGxhY2Vob2xkZXInLCB0aGlzLmxhbmcuZ2V0KCdpbWFnZS51cmwtcGxhY2Vob2xkZXInKSk7XHJcblxyXG4gICAgICAgIHJldHVybiAkaW5wdXQ7XHJcbiAgICB9LFxyXG4gICAgX2NyZWF0ZVVybEJ1dHRvbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRidXR0b24gPSB0aGlzLmRvbSgnPGJ1dHRvbj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctZm9ybS1idXR0b24gJyArIHRoaXMucHJlZml4ICsgJy1mb3JtLWJ1dHRvbi1wcmltYXJ5Jyk7XHJcbiAgICAgICAgJGJ1dHRvbi5odG1sKHRoaXMubGFuZy5nZXQoJ2ltYWdlLmluc2VydCcpKTtcclxuICAgICAgICAkYnV0dG9uLm9uZSgnY2xpY2snLCB0aGlzLmluc2VydEJ5VXJsLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICByZXR1cm4gJGJ1dHRvbjtcclxuICAgIH0sXHJcbiAgICBfcGFyc2VMaXN0OiBmdW5jdGlvbihkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBvYmogPSBkYXRhW2tleV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JykgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICB2YXIgJGltZyA9IHRoaXMuZG9tKCc8aW1nPicpO1xyXG4gICAgICAgICAgICB2YXIgdXJsID0gKG9iai50aHVtYikgPyBvYmoudGh1bWIgOiBvYmoudXJsO1xyXG5cclxuICAgICAgICAgICAgJGltZy5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctcG9wdXAtZXZlbnQnKTtcclxuICAgICAgICAgICAgJGltZy5hdHRyKCdzcmMnLCB1cmwpO1xyXG4gICAgICAgICAgICAkaW1nLmF0dHIoJ2RhdGEtdXJsJywgb2JqLnVybCk7XHJcbiAgICAgICAgICAgICRpbWcuYXR0cignZGF0YS1jYWxsYmFjaycsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgICRpbWcuYXR0cignZGF0YS1pZCcsIG9iai5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRpbWcub24oJ2NsaWNrLicgKyB0aGlzLnByZWZpeCArICctcG9wdXAtZXZlbnQtJyArIHRoaXMudXVpZCwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyICR0YXJnZXQgPSB0aGlzLmRvbShlLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSAkdGFyZ2V0LmF0dHIoJ2RhdGEtY2FsbGJhY2snKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5hcGkoY2FsbGJhY2ssIGUpO1xyXG5cclxuICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcblx0XHRcdHRoaXMuJHNlbGVjdGJveC5hcHBlbmQoJGltZyk7XHJcbiAgICAgICAgfVxyXG5cdH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdtb2R1bGUnLCAndGFibGUnLCB7XHJcbiAgICBhZGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIGFkZFxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmFkZCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICd0YWJsZScsXHJcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcy5vcHRzLnRhYmxlLnRlbXBsYXRlLFxyXG4gICAgICAgICAgICBjYXJldDogZmFsc2VcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZm9jdXNcclxuICAgICAgICB2YXIgY2VsbCA9IGluc3RhbmNlLmdldEZpcnN0Q2VsbCgpO1xyXG4gICAgICAgIGlmIChjZWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChjZWxsLCAnc3RhcnQnKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMudGFibGUpIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBwb3B1cDogZnVuY3Rpb24ocGFyYW1zLCBidXR0b24pIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgdHlwZSA9IGluc3RhbmNlLmdldFR5cGUoKTtcclxuICAgICAgICB2YXIgaXRlbXMgPSB7fTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICd0YWJsZScpIHtcclxuICAgICAgICAgICAgaXRlbXMgPSB7XHJcbiAgICAgICAgICAgICAgICBhZGRoZWFkOiB7IHRpdGxlOiAnIyMgdGFibGUuYWRkLWhlYWQgIyMnLCBjb21tYW5kOiAndGFibGUuYWRkSGVhZCcgfSxcclxuICAgICAgICAgICAgICAgIHJlbW92ZWhlYWQ6IHsgdGl0bGU6ICcjIyB0YWJsZS5yZW1vdmUtaGVhZCAjIycsIGNvbW1hbmQ6ICd0YWJsZS5yZW1vdmVIZWFkJyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ3JvdycpIHtcclxuICAgICAgICAgICAgaXRlbXMgPSB7XHJcbiAgICAgICAgICAgICAgICBhZGRyb3diZWxvdzogeyB0aXRsZTogJyMjIHRhYmxlLmFkZC1yb3ctYmVsb3cgIyMnLCBjb21tYW5kOiAndGFibGUuYWRkUm93QmVsb3cnIH0sXHJcbiAgICAgICAgICAgICAgICBhZGRyb3dhYm92ZTogeyB0aXRsZTogJyMjIHRhYmxlLmFkZC1yb3ctYWJvdmUgIyMnLCBjb21tYW5kOiAndGFibGUuYWRkUm93QWJvdmUnIH0sXHJcbiAgICAgICAgICAgICAgICByZW1vdmVyb3c6IHsgdGl0bGU6ICcjIyB0YWJsZS5yZW1vdmUtcm93ICMjJywgY29tbWFuZDogJ3RhYmxlLnJlbW92ZVJvdycgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGUgPT09ICdjZWxsJykge1xyXG4gICAgICAgICAgICBpdGVtcyA9IHtcclxuICAgICAgICAgICAgICAgIGFkZGNvbHVtbmFmdGVyOiB7IHRpdGxlOiAnIyMgdGFibGUuYWRkLWNvbHVtbi1hZnRlciAjIycsIGNvbW1hbmQ6ICd0YWJsZS5hZGRDb2x1bW5BZnRlcicgfSxcclxuICAgICAgICAgICAgICAgIGFkZGNvbHVtbmJlZm9yZTogeyB0aXRsZTogJyMjIHRhYmxlLmFkZC1jb2x1bW4tYmVmb3JlICMjJywgY29tbWFuZDogJ3RhYmxlLmFkZENvbHVtbkJlZm9yZScgfSxcclxuICAgICAgICAgICAgICAgIGFkZHJvd2JlbG93OiB7IHRpdGxlOiAnIyMgdGFibGUuYWRkLXJvdy1iZWxvdyAjIycsIGNvbW1hbmQ6ICd0YWJsZS5hZGRSb3dCZWxvdycgfSxcclxuICAgICAgICAgICAgICAgIGFkZHJvd2Fib3ZlOiB7IHRpdGxlOiAnIyMgdGFibGUuYWRkLXJvdy1hYm92ZSAjIycsIGNvbW1hbmQ6ICd0YWJsZS5hZGRSb3dBYm92ZScgfSxcclxuICAgICAgICAgICAgICAgIHJlbW92ZWNvbHVtbjogeyB0aXRsZTogJyMjIHRhYmxlLnJlbW92ZS1jb2x1bW4gIyMnLCBjb21tYW5kOiAndGFibGUucmVtb3ZlQ29sdW1uJyB9LFxyXG4gICAgICAgICAgICAgICAgcmVtb3Zlcm93OiB7IHRpdGxlOiAnIyMgdGFibGUucmVtb3ZlLXJvdyAjIycsIGNvbW1hbmQ6ICd0YWJsZS5yZW1vdmVSb3cnIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAuY3JlYXRlKCd0YWJsZScsIHtcclxuICAgICAgICAgICAgaXRlbXM6IGl0ZW1zXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIG9wZW5cclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5vcGVuKHsgYnV0dG9uOiBidXR0b24gfSk7XHJcbiAgICB9LFxyXG4gICAgYWRkSGVhZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVIZWFkKCk7XHJcblxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIHZhciAkYmxvY2sgPSBpbnN0YW5jZS5nZXRCbG9jaygpO1xyXG5cclxuXHRcdHZhciBjb2x1bW5zID0gJGJsb2NrLmZpbmQoJ3RyJykuZmlyc3QoKS5jaGlsZHJlbigndGQsIHRoJykubGVuZ3RoO1xyXG5cdFx0dmFyICRoZWFkID0gdGhpcy5kb20oJzx0aGVhZD4nKTtcclxuICAgICAgICB2YXIgJHJvdyA9IHRoaXMuX2J1aWxkUm93KGNvbHVtbnMsICc8dGg+Jyk7XHJcblxyXG4gICAgICAgICRoZWFkLmFwcGVuZCgkcm93KTtcclxuICAgICAgICAkYmxvY2sucHJlcGVuZCgkaGVhZCk7XHJcblxyXG4gICAgICAgIC8vIHNldFxyXG4gICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldCgkcm93LmNoaWxkcmVuKCd0ZCwgdGgnKS5maXJzdCgpLCAnc3RhcnQnKTtcclxuICAgIH0sXHJcbiAgICBhZGRSb3dCZWxvdzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fYWRkUm93KCdiZWxvdycpO1xyXG4gICAgfSxcclxuICAgIGFkZFJvd0Fib3ZlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9hZGRSb3coJ2Fib3ZlJyk7XHJcbiAgICB9LFxyXG4gICAgYWRkQ29sdW1uQmVmb3JlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9hZGRDb2x1bW4oJ2JlZm9yZScpO1xyXG4gICAgfSxcclxuICAgIGFkZENvbHVtbkFmdGVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9hZGRDb2x1bW4oJ2FmdGVyJyk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlSGVhZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcbiAgICAgICAgdmFyICRibG9jayA9IGluc3RhbmNlLmdldEJsb2NrKCk7XHJcblxyXG4gICAgICAgIHZhciAkaGVhZCA9ICRibG9jay5maW5kKCd0aGVhZCcpO1xyXG4gICAgICAgIGlmICgkaGVhZC5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgJGhlYWQucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlbW92ZVJvdzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAuY2xvc2UoKTtcclxuICAgICAgICB0aGlzLmFwcC5jb250cm9sLmNsb3NlKCk7XHJcblxyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIGlmIChpbnN0YW5jZS5nZXRUeXBlKCkgPT09ICdjZWxsJykge1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IGluc3RhbmNlLmdldFBhcmVudChbJ3JvdyddKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFuY2UucmVtb3ZlKCk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlQ29sdW1uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRyb2wuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5hcHAuYmxvY2suZ2V0KCk7XHJcbiAgICAgICAgdmFyICRibG9jayA9IGluc3RhbmNlLmdldEJsb2NrKCk7XHJcblxyXG4gICAgICAgIHZhciAkdGFibGUgPSAkYmxvY2suY2xvc2VzdCgndGFibGUnKTtcclxuICAgICAgICB2YXIgJHJvdyA9ICRibG9jay5jbG9zZXN0KCd0cicpO1xyXG5cclxuICAgICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICAgICRyb3cuZmluZCgndGQsIHRoJykuZWFjaChmdW5jdGlvbigkbm9kZSwgaSkge1xyXG5cdFx0XHRpZiAoJG5vZGUuZ2V0KCkgPT09ICRibG9jay5nZXQoKSkgaW5kZXggPSBpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0JHRhYmxlLmZpbmQoJ3RyJykuZWFjaChmdW5jdGlvbigkbm9kZSkge1xyXG5cdFx0XHR2YXIgY2VsbCA9ICRub2RlLmZpbmQoJ3RkLCB0aCcpLmdldChpbmRleCk7XHJcblx0XHRcdHZhciAkY2VsbCA9IHRoaXMuZG9tKGNlbGwpO1xyXG4gICAgICAgICAgICAkY2VsbC5yZW1vdmUoKTtcclxuXHRcdH0uYmluZCh0aGlzKSlcclxuICAgIH0sXHJcbiAgICBjZWxsU2V0dGluZzogZnVuY3Rpb24ocGFyYW1zLCBidXR0b24pIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmFwcC5wb3B1cC5jcmVhdGUoJ2NlbGwnLCB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnIyMgdGFibGUudGFibGUtY2VsbCAjIycsXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMzAwcHgnLFxyXG4gICAgICAgICAgICBmb3JtOiB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogeyB0eXBlOiAnaW5wdXQnLCBsYWJlbDogJyMjIHRhYmxlLndpZHRoICMjJyB9LFxyXG4gICAgICAgICAgICAgICAgbm93cmFwOiB7IHR5cGU6ICdjaGVja2JveCcsIHRleHQ6ICcjIyB0YWJsZS5ub3dyYXAgIyMnIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZm9vdGVyOiB7XHJcbiAgICAgICAgICAgICAgICBpbnNlcnQ6IHsgdGl0bGU6ICcjIyB0YWJsZS5zYXZlICMjJywgY29tbWFuZDogJ3RhYmxlLnNhdmUnLCB0eXBlOiAncHJpbWFyeScgfSxcclxuICAgICAgICAgICAgICAgIGNhbmNlbDogeyB0aXRsZTogJyMjIHRhYmxlLmNhbmNlbCAjIycsIGNvbW1hbmQ6ICdwb3B1cC5jbG9zZScgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGRhdGFcclxuICAgICAgICBzdGFjay5zZXREYXRhKHtcclxuICAgICAgICAgICAgd2lkdGg6IGluc3RhbmNlLmdldFdpZHRoKCksXHJcbiAgICAgICAgICAgIG5vd3JhcDogaW5zdGFuY2UuZ2V0Tm93cmFwKClcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gb3BlblxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLm9wZW4oeyBidXR0b246IGJ1dHRvbiwgZm9jdXM6ICd3aWR0aCcgfSk7XHJcbiAgICB9LFxyXG4gICAgc2F2ZTogZnVuY3Rpb24oc3RhY2spIHtcclxuICAgICAgICAvLyBwb3B1cCBjbG9zZVxyXG4gICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcblxyXG4gICAgICAgIC8vIGRhdGFcclxuICAgICAgICB2YXIgZGF0YSA9IHN0YWNrLmdldERhdGEoKTtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEud2lkdGggIT09ICcnKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLnNldFdpZHRoKGRhdGEud2lkdGgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zdGFuY2Uuc2V0Tm93cmFwKGRhdGEubm93cmFwKTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9hZGRDb2x1bW46IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5jbG9zZSgpO1xyXG5cclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSB0aGlzLmFwcC5ibG9jay5nZXQoKTtcclxuICAgICAgICB2YXIgJGJsb2NrID0gaW5zdGFuY2UuZ2V0QmxvY2soKTtcclxuXHJcbiAgICAgICAgdmFyICR0YWJsZSA9ICRibG9jay5jbG9zZXN0KCd0YWJsZScpO1xyXG4gICAgICAgIHZhciAkcm93ID0gJGJsb2NrLmNsb3Nlc3QoJ3RyJyk7XHJcblxyXG4gICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgJHJvdy5maW5kKCd0ZCwgdGgnKS5lYWNoKGZ1bmN0aW9uKCRub2RlLCBpKSB7XHJcblx0XHRcdGlmICgkbm9kZS5nZXQoKSA9PT0gJGJsb2NrLmdldCgpKSBpbmRleCA9IGk7XHJcblx0XHR9KTtcclxuXHJcblx0XHR2YXIgcm93SW5kZXggPSAwO1xyXG4gICAgICAgICR0YWJsZS5maW5kKCd0cicpLmVhY2goZnVuY3Rpb24oJG5vZGUsIGkpIHtcclxuXHRcdFx0aWYgKCRub2RlLmdldCgpID09PSAkcm93LmdldCgpKSByb3dJbmRleCA9IGk7XHJcblx0XHR9KTtcclxuXHJcbiAgICAgICAgdmFyICRuZXdDZWxsO1xyXG5cdFx0JHRhYmxlLmZpbmQoJ3RyJykuZWFjaChmdW5jdGlvbigkbm9kZSwgaSkge1xyXG5cdFx0XHR2YXIgY2VsbCA9ICRub2RlLmZpbmQoJ3RkLCB0aCcpLmdldChpbmRleCk7XHJcblx0XHRcdHZhciAkY2VsbCA9IHRoaXMuZG9tKGNlbGwpO1xyXG5cclxuXHJcblx0XHRcdHZhciAkdGQgPSAkY2VsbC5jbG9uZSgpO1xyXG5cdFx0XHQkdGQuaHRtbCgnJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBjcmVhdGUgaW5zdGFuY2VcclxuXHRcdFx0dGhpcy5hcHAuY3JlYXRlKCdibG9jay5jZWxsJywgJHRkKTtcclxuXHJcblx0XHRcdGlmIChyb3dJbmRleCA9PT0gaSkge1xyXG4gICAgXHRcdFx0JG5ld0NlbGwgPSAkdGQ7XHJcblx0XHRcdH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFmdGVyIC8gYmVmb3JlXHJcbiAgXHRcdFx0JGNlbGxbbmFtZV0oJHRkKTtcclxuXHJcblx0XHR9LmJpbmQodGhpcykpO1xyXG5cclxuXHRcdC8vIHNldCBmb2N1c1xyXG5cdFx0aWYgKCRuZXdDZWxsKSB7XHJcbiAgICBcdFx0dGhpcy5hcHAuYmxvY2suc2V0KCRuZXdDZWxsLCAnc3RhcnQnKTtcclxuXHRcdH1cclxuICAgIH0sXHJcbiAgICBfYWRkUm93OiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gKG5hbWUgPT09ICdiZWxvdycpID8gJ2FmdGVyJyA6ICdiZWZvcmUnO1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuYXBwLmJsb2NrLmdldCgpO1xyXG4gICAgICAgIHZhciAkYmxvY2sgPSBpbnN0YW5jZS5nZXRCbG9jaygpO1xyXG5cclxuICAgICAgICB2YXIgJHJvdyA9ICRibG9jay5jbG9zZXN0KCd0cicpO1xyXG4gICAgICAgIHZhciAkaGVhZCA9ICRibG9jay5jbG9zZXN0KCd0aGVhZCcpO1xyXG5cclxuICAgICAgICB2YXIgY29sdW1ucyA9ICRyb3cuY2hpbGRyZW4oJ3RkLCB0aCcpLmxlbmd0aDtcclxuICAgICAgICB2YXIgJG5ld1JvdyA9IHRoaXMuX2J1aWxkUm93KGNvbHVtbnMsICc8dGQ+Jyk7XHJcbiAgICAgICAgaWYgKCRoZWFkLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICAkaGVhZC5hZnRlcigkbmV3Um93KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICRyb3dbcG9zaXRpb25dKCRuZXdSb3cpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2V0IGZvY3VzXHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KCRuZXdSb3cuZmluZCgndGQsIHRoJykuZmlyc3QoKSwgJ3N0YXJ0Jyk7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkUm93OiBmdW5jdGlvbihjb2x1bW5zLCB0YWcpIHtcclxuICAgICAgICB2YXIgJHJvdyA9IHRoaXMuZG9tKCc8dHI+Jyk7XHJcblxyXG4gICAgICAgIC8vIGNyZWF0ZSBpbnN0YW5jZVxyXG4gICAgICAgIHRoaXMuYXBwLmNyZWF0ZSgnYmxvY2sucm93JywgJHJvdyk7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sdW1uczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciAkY2VsbCA9IHRoaXMuZG9tKHRhZyk7XHJcblxyXG4gICAgICAgICAgICAvLyBjcmVhdGUgaW5zdGFuY2VcclxuICAgICAgICAgICAgdGhpcy5hcHAuY3JlYXRlKCdibG9jay5jZWxsJywgJGNlbGwpO1xyXG5cclxuICAgICAgICAgICAgLy8gYXBwZW5kXHJcbiAgICAgICAgICAgICRyb3cuYXBwZW5kKCRjZWxsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAkcm93O1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICdzbmlwcGV0Jywge1xyXG4gICAgaW5pdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5qc29uID0ge307XHJcbiAgICB9LFxyXG4gICAgb2JzZXJ2ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMuc25pcHBldHMpIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBwb3B1cDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5hcHAucG9wdXAuYWRkKCdzbmlwcGV0cycsIHtcclxuICAgICAgICAgICAgdGl0bGU6ICcjIyBwb3B1cC5zbmlwcGV0cyAjIycsXHJcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJSdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZGF0YVxyXG4gICAgICAgIHZhciAkYm9keSA9IHN0YWNrLmdldEJvZHkoKTtcclxuXHJcbiAgICAgICAgLy8ganNvbiB1cmxcclxuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0cy5zbmlwcGV0cyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdGhpcy5hamF4LmdldCh7XHJcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMub3B0cy5zbmlwcGV0cyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHsgZDogbmV3IERhdGUoKS5nZXRUaW1lKCkgfSxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWlsZFBvcHVwKGRhdGEsICRib2R5KTtcclxuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8ganNvbiBvYmplY3RcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRQb3B1cCh0aGlzLm9wdHMuc25pcHBldHMsICRib2R5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG9wZW5cclxuICAgICAgICBzdGFjay5vcGVuKCk7XHJcbiAgICB9LFxyXG4gICAgaW5zZXJ0OiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyICR0cmlnZ2VyID0gdGhpcy5kb20oZS50YXJnZXQpLmNsb3Nlc3QoJy4nICsgdGhpcy5wcmVmaXggKyAnLXNuaXBwZXQtY29udGFpbmVyJyk7XHJcbiAgICAgICAgdmFyIGtleSA9ICR0cmlnZ2VyLmF0dHIoJ2RhdGEtc25pcHBldC1rZXknKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuanNvbi5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgaHRtbCA9IHRoaXMuanNvbltrZXldLmh0bWw7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFwcC5lZGl0b3IuaW5zZXJ0Q29udGVudCh7IGh0bWw6IGh0bWwsIGNhcmV0OiAnc3RhcnQnIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2J1aWxkUG9wdXA6IGZ1bmN0aW9uKGRhdGEsICRib2R5KSB7XHJcbiAgICAgICAgdGhpcy5qc29uID0gZGF0YTtcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuanNvbiA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5qc29uKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgJGNvbnRhaW5lciA9IHRoaXMuX2J1aWxkUHJldmlld0NvbnRhaW5lcigkYm9keSwga2V5KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHByZXZpZXdcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRQcmV2aWV3KCRjb250YWluZXIsIGtleSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkUHJldmlld05hbWUoJGNvbnRhaW5lciwga2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkUHJldmlld0NvbnRhaW5lcjogZnVuY3Rpb24oJGJvZHksIGtleSkge1xyXG4gICAgICAgIHZhciAkZGl2ID0gdGhpcy5kb20oJzxkaXY+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLXNuaXBwZXQtY29udGFpbmVyJyk7XHJcbiAgICAgICAgJGRpdi5hdHRyKCdkYXRhLXNuaXBwZXQta2V5Jywga2V5KTtcclxuICAgICAgICAkZGl2Lm9uZSgnY2xpY2snLCB0aGlzLmluc2VydC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgLy8gYXBwZW5kXHJcbiAgICAgICAgJGJvZHkuYXBwZW5kKCRkaXYpO1xyXG5cclxuICAgICAgICByZXR1cm4gJGRpdjtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRQcmV2aWV3OiBmdW5jdGlvbigkY29udGFpbmVyLCBrZXkpIHtcclxuICAgICAgICB2YXIgJGRpdiA9IHRoaXMuZG9tKCc8ZGl2PicpO1xyXG4gICAgICAgIGlmICh0aGlzLmpzb25ba2V5XS5oYXNPd25Qcm9wZXJ0eSgnaW1hZ2UnKSkge1xyXG4gICAgICAgICAgICAkZGl2LmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1zbmlwcGV0LWltYWdlJyk7XHJcbiAgICAgICAgICAgIHZhciAkaW1nID0gdGhpcy5kb20oJzxpbWc+JykuYXR0cignc3JjJywgdGhpcy5qc29uW2tleV0uaW1hZ2UpO1xyXG4gICAgICAgICAgICAkZGl2Lmh0bWwoJGltZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAkZGl2LmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1zbmlwcGV0LXByZXZpZXcnKTtcclxuICAgICAgICAgICAgJGRpdi5odG1sKHRoaXMuanNvbltrZXldLmh0bWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJGNvbnRhaW5lci5hcHBlbmQoJGRpdik7XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkUHJldmlld05hbWU6IGZ1bmN0aW9uKCRjb250YWluZXIsIGtleSkge1xyXG4gICAgICAgIGlmICghdGhpcy5qc29uW2tleV0uaGFzT3duUHJvcGVydHkoJ25hbWUnKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB2YXIgJHNwYW4gPSB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctc25pcHBldC1uYW1lJyk7XHJcbiAgICAgICAgJHNwYW4udGV4dCh0aGlzLmpzb25ba2V5XS5uYW1lKTtcclxuXHJcbiAgICAgICAgJGNvbnRhaW5lci5hcHBlbmQoJHNwYW4pO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ21vZHVsZScsICd0ZW1wbGF0ZScsIHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuanNvbiA9IHt9O1xyXG4gICAgfSxcclxuICAgIG9ic2VydmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRzLnRlbXBsYXRlcykgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIHBvcHVwOiBmdW5jdGlvbihwYXJhbXMsIGJ1dHRvbikge1xyXG4gICAgICAgIC8vIGpzb24gdXJsXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdHMudGVtcGxhdGVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aGlzLmFqYXguZ2V0KHtcclxuICAgICAgICAgICAgICAgIHVybDogdGhpcy5vcHRzLnRlbXBsYXRlcyxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHsgZDogbmV3IERhdGUoKS5nZXRUaW1lKCkgfSxcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWlsZFBvcHVwKGJ1dHRvbiwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9LmJpbmQodGhpcylcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGpzb24gb2JqZWN0XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkUG9wdXAoYnV0dG9uLCB0aGlzLm9wdHMudGVtcGxhdGVzKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaW5zZXJ0OiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyICR0cmlnZ2VyID0gdGhpcy5kb20oZS50YXJnZXQpLmNsb3Nlc3QoJy4nICsgdGhpcy5wcmVmaXggKyAnLXRlbXBsYXRlLWNvbnRhaW5lcicpO1xyXG4gICAgICAgIHZhciBrZXkgPSAkdHJpZ2dlci5hdHRyKCdkYXRhLXRlbXBsYXRlLWtleScpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5qc29uLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAucG9wdXAuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBodG1sID0gdGhpcy5qc29uW2tleV0uaHRtbDtcclxuICAgICAgICAgICAgdGhpcy5hcHAuZWRpdG9yLnNldENvbnRlbnQoeyBodG1sOiBodG1sLCBjYXJldDogZmFsc2UgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRQb3B1cDogZnVuY3Rpb24oYnV0dG9uLCBkYXRhKSB7XHJcblxyXG4gICAgICAgIC8vIHBvcHVwXHJcbiAgICAgICAgdGhpcy5hcHAucG9wdXAuY3JlYXRlKCd0ZW1wbGF0ZXMnLCB7IHRpdGxlOiAnIyMgdGVtcGxhdGVzLnRlbXBsYXRlcyAjIycsIHdpZHRoOiAnMTAwJScgfSk7XHJcblxyXG4gICAgICAgIC8vIHN0YWNrXHJcbiAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5hcHAucG9wdXAuZ2V0U3RhY2soKTtcclxuICAgICAgICB2YXIgJGJvZHkgPSBzdGFjay5nZXRCb2R5KCk7XHJcblxyXG4gICAgICAgIC8vIGpzb25cclxuICAgICAgICB0aGlzLmpzb24gPSAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSA/IEpTT04ucGFyc2UoZGF0YSkgOiBkYXRhO1xyXG5cclxuICAgICAgICAvLyBpdGVtc1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmpzb24pIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGNvbnRhaW5lclxyXG4gICAgICAgICAgICB2YXIgJGNvbnRhaW5lciA9IHRoaXMuX2J1aWxkUHJldmlld0NvbnRhaW5lcigkYm9keSwga2V5KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHByZXZpZXdcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRQcmV2aWV3KCRjb250YWluZXIsIGtleSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1aWxkUHJldmlld05hbWUoJGNvbnRhaW5lciwga2V5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG9wZW5cclxuICAgICAgICB0aGlzLmFwcC5wb3B1cC5vcGVuKHsgYnV0dG9uOiBidXR0b24gfSk7XHJcblxyXG4gICAgfSxcclxuICAgIF9idWlsZFByZXZpZXdDb250YWluZXI6IGZ1bmN0aW9uKCRib2R5LCBrZXkpIHtcclxuICAgICAgICB2YXIgJGRpdiA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy10ZW1wbGF0ZS1jb250YWluZXInKTtcclxuICAgICAgICAkZGl2LmF0dHIoJ2RhdGEtdGVtcGxhdGUta2V5Jywga2V5KTtcclxuICAgICAgICAkZGl2Lm9uZSgnY2xpY2snLCB0aGlzLmluc2VydC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgLy8gYXBwZW5kXHJcbiAgICAgICAgJGJvZHkuYXBwZW5kKCRkaXYpO1xyXG5cclxuICAgICAgICByZXR1cm4gJGRpdjtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRQcmV2aWV3OiBmdW5jdGlvbigkY29udGFpbmVyLCBrZXkpIHtcclxuICAgICAgICB2YXIgJGRpdiA9IHRoaXMuZG9tKCc8ZGl2PicpO1xyXG4gICAgICAgIGlmICh0aGlzLmpzb25ba2V5XS5oYXNPd25Qcm9wZXJ0eSgnaW1hZ2UnKSkge1xyXG4gICAgICAgICAgICAkZGl2LmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy10ZW1wbGF0ZS1pbWFnZScpO1xyXG4gICAgICAgICAgICB2YXIgJGltZyA9IHRoaXMuZG9tKCc8aW1nPicpLmF0dHIoJ3NyYycsIHRoaXMuanNvbltrZXldLmltYWdlKTtcclxuICAgICAgICAgICAgJGRpdi5odG1sKCRpbWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgJGRpdi5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctdGVtcGxhdGUtcHJldmlldycpO1xyXG4gICAgICAgICAgICAkZGl2Lmh0bWwodGhpcy5qc29uW2tleV0uaHRtbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkY29udGFpbmVyLmFwcGVuZCgkZGl2KTtcclxuICAgIH0sXHJcbiAgICBfYnVpbGRQcmV2aWV3TmFtZTogZnVuY3Rpb24oJGNvbnRhaW5lciwga2V5KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmpzb25ba2V5XS5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciAkc3BhbiA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy10ZW1wbGF0ZS1uYW1lJyk7XHJcbiAgICAgICAgJHNwYW4udGV4dCh0aGlzLmpzb25ba2V5XS5uYW1lKTtcclxuXHJcbiAgICAgICAgJGNvbnRhaW5lci5hcHBlbmQoJHNwYW4pO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2NsYXNzJywgJ3Rvb2wuY2hlY2tib3gnLCB7XHJcbiAgICBtaXhpbnM6IFsndG9vbCddLFxyXG4gICAgdHlwZTogJ2NoZWNrYm94JyxcclxuICAgIGlucHV0OiB7XHJcbiAgICAgICAgdGFnOiAnaW5wdXQnLFxyXG4gICAgICAgIHR5cGU6ICdjaGVja2JveCcsXHJcbiAgICAgICAgY2xhc3NuYW1lOiAnLWZvcm0tY2hlY2tib3gnXHJcbiAgICB9LFxyXG4gICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRpbnB1dC52YWwoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2J1aWxkSW5wdXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGJveCA9IHRoaXMuZG9tKCc8bGFiZWw+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZvcm0tY2hlY2tib3gtaXRlbScpO1xyXG4gICAgICAgIHRoaXMuJGJveC5hcHBlbmQodGhpcy4kaW5wdXQpO1xyXG5cclxuICAgICAgICAvLyBjaGVja2JveCB0ZXh0XHJcbiAgICAgICAgaWYgKHRoaXMuX2hhcygndGV4dCcpKSB7XHJcbiAgICAgICAgICAgIHZhciAkc3BhbiA9IHRoaXMuZG9tKCc8c3Bhbj4nKS5odG1sKHRoaXMubGFuZy5wYXJzZSh0aGlzLm9iai50ZXh0KSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGJveC5hcHBlbmQoJHNwYW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy4kdG9vbC5hcHBlbmQodGhpcy4kYm94KTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdjbGFzcycsICd0b29sLmNvbG9yJywge1xyXG4gICAgbWl4aW5zOiBbJ3Rvb2wnXSxcclxuICAgIHR5cGU6ICdjb2xvcicsXHJcbiAgICBpbnB1dDoge1xyXG4gICAgICAgIHRhZzogJ2lucHV0JyxcclxuICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgY2xhc3NuYW1lOiAnLWZvcm0taW5wdXQnXHJcbiAgICB9LFxyXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4kaW5wdXQudmFsKHZhbHVlKTtcclxuICAgICAgICB0aGlzLiRzZWxlY3QuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgdmFsdWUpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy4kcGlja2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29sb3IodmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHZhbHVlICYmIHRoaXMuJGNoZWNrYm94KSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGNoZWNrYm94LmF0dHIoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2V0Q29sb3I6IGZ1bmN0aW9uKGNvbG9yKSB7XHJcbiAgICAgICAgdGhpcy4kcGlja2VyLmF0dHIoJ2RhdGEtY3VycmVudC1jb2xvcicsIGNvbG9yKTtcclxuICAgICAgICB0aGlzLiRwaWNrZXIuZmluZCgnLicgKyB0aGlzLnByZWZpeCArICctY29sb3InKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgdGhpcy4kcGlja2VyLmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLWNvbG9yJykuZWFjaChmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSAkbm9kZS5hdHRyKCdkYXRhLXZhbHVlJyk7XHJcbiAgICAgICAgICAgIC8vIGFjdGl2ZVxyXG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAkbm9kZS5hZGRDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAkbm9kZS5jc3MoJ2NvbG9yJywgdGhpcy5hcHAuY29sb3IuaW52ZXJ0KGNvbG9yKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgfSxcclxuXHJcblxyXG4gICAgLy8gcHJpdmF0ZVxyXG4gICAgX2J1aWxkSW5wdXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGJveCA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1mb3JtLWNvbnRhaW5lci1mbGV4ICcgKyB0aGlzLnByZWZpeCArICctZm9ybS1jb250YWluZXItY29sb3InKTtcclxuICAgICAgICB0aGlzLiRzZWxlY3QgPSB0aGlzLmRvbSgnPHNwYW4+JykuYWRkQ2xhc3ModGhpcy5wcmVmaXggKyAnLWZvcm0tY29sb3Itc2VsZWN0Jyk7XHJcbiAgICAgICAgdGhpcy4kY2hlY2tib3ggPSB0aGlzLmRvbSgnPGlucHV0PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1mb3JtLWNoZWNrYm94JykuYXR0cigndHlwZScsICdjaGVja2JveCcpO1xyXG5cclxuICAgICAgICB0aGlzLiRpbnB1dC5jc3MoJ21heC13aWR0aCcsICc5MHB4Jyk7XHJcbiAgICAgICAgdGhpcy4kaW5wdXQub24oJ2tleWRvd24gYmx1cicsIHRoaXMuX2NoYW5nZUNvbG9yU2VsZWN0LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5faGFzKCdwaWNrZXInKSkge1xyXG4gICAgICAgICAgICB0aGlzLiRwaWNrZXIgPSB0aGlzLl9jcmVhdGVQaWNrZXIoKTtcclxuICAgICAgICAgICAgdGhpcy4kdG9vbC5hcHBlbmQodGhpcy4kcGlja2VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuJHNlbGVjdC5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctZm9ybS1jb2xvci1zZWxlY3QtcG9pbnRlcicpO1xyXG4gICAgICAgICAgICB0aGlzLiRzZWxlY3Qub24oJ2NsaWNrJywgdGhpcy5fYnVpbGRDb2xvcnBpY2tlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm5hbWUgPT09ICdiYWNrZ3JvdW5kLWNvbG9yJykge1xyXG4gICAgICAgICAgICB0aGlzLiRib3guYXBwZW5kKHRoaXMuJGNoZWNrYm94KTtcclxuICAgICAgICAgICAgdGhpcy4kY2hlY2tib3gub24oJ2NoYW5nZScsIHRoaXMuX2NoYW5nZUNvbG9yU3RhdGUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiRib3guYXBwZW5kKHRoaXMuJHNlbGVjdCk7XHJcbiAgICAgICAgdGhpcy4kYm94LmFwcGVuZCh0aGlzLiRpbnB1dCk7XHJcbiAgICAgICAgdGhpcy4kdG9vbC5hcHBlbmQodGhpcy4kYm94KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hhcygncGlja2VyJykpIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVpbGRDb2xvcnMoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQ29sb3JzOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRwaWNrZXIuaHRtbCgnJyk7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMub3B0cy5jb2xvcnMpIHtcclxuICAgICAgICAgICAgdmFyICRkaXYgPSB0aGlzLmRvbSgnPGRpdiBjbGFzcz1cIicgKyB0aGlzLnByZWZpeCArICctZm9ybS1jb2xvcnNcIj4nKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vcHRzLmNvbG9yc1trZXldLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSB0aGlzLm9wdHMuY29sb3JzW2tleV1baV07XHJcbiAgICAgICAgICAgICAgICB2YXIgJHNwYW4gPSB0aGlzLl9jcmVhdGVDb2xvcihjb2xvciwga2V5LCBpKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2xvciA9PT0gJyNmZmYnIHx8IGNvbG9yID09PSAnI2ZmZmZmZicpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc3Bhbi5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctZm9ybS1jb2xvci1jb250cmFzdCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICRkaXYuYXBwZW5kKCRzcGFuKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy4kcGlja2VyLmFwcGVuZCgkZGl2KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgX2J1aWxkQ29sb3JwaWNrZXI6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgdGhpcy4kcGlja2VyID0gdGhpcy5fY3JlYXRlUGlja2VyKCk7XHJcbiAgICAgICAgdmFyIHN0YWNrID0gdGhpcy5hcHAucG9wdXAuYWRkKCdjb2xvcnBpY2tlcicsIHsgdGl0bGU6ICcjIyBwb3B1cC5waWNrLWNvbG9yICMjJywgY29sbGFwc2U6IHRydWUgfSk7XHJcbiAgICAgICAgc3RhY2suZ2V0Qm9keSgpLmFwcGVuZCh0aGlzLiRwaWNrZXIpO1xyXG5cclxuICAgICAgICB0aGlzLl9idWlsZENvbG9ycygpO1xyXG4gICAgICAgIHRoaXMuc2V0Q29sb3IodGhpcy4kaW5wdXQudmFsKCkpO1xyXG5cclxuICAgICAgICBzdGFjay5vcGVuKCk7XHJcbiAgICB9LFxyXG4gICAgX2NyZWF0ZVBpY2tlcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1mb3JtLWNvbG9ycGlja2VyJyk7XHJcbiAgICB9LFxyXG4gICAgX2NyZWF0ZUNvbG9yOiBmdW5jdGlvbihjb2xvciwga2V5LCBpKSB7XHJcbiAgICAgICAgdmFyICRzcGFuID0gdGhpcy5kb20oJzxzcGFuPicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1jb2xvcicpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsIGNvbG9yKTtcclxuICAgICAgICAkc3Bhbi5hdHRyKHsgJ3RpdGxlJzoga2V5ICsgJy0nICsgaSwgJ2RhdGEtdmFsdWUnOiBjb2xvciB9KTtcclxuICAgICAgICAkc3Bhbi5vbignbW91c2VvdmVyJywgdGhpcy5faW5Db2xvci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAkc3Bhbi5vbignbW91c2VvdXQnLCB0aGlzLl9vdXRDb2xvci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAkc3Bhbi5vbignY2xpY2snLCB0aGlzLl9zZXRDb2xvci5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICRzcGFuO1xyXG4gICAgfSxcclxuICAgIF9pbkNvbG9yOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyICRjb2xvciA9IHRoaXMuZG9tKGUudGFyZ2V0KTtcclxuICAgICAgICB2YXIgdmFsdWUgPSAkY29sb3IuYXR0cignZGF0YS12YWx1ZScpO1xyXG5cclxuICAgICAgICB0aGlzLl9zZXRDb2xvclRvSW5wdXQodmFsdWUpO1xyXG4gICAgfSxcclxuICAgIF9vdXRDb2xvcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0Q29sb3JUb0lucHV0KHRoaXMuJHBpY2tlci5hdHRyKCdkYXRhLWN1cnJlbnQtY29sb3InKSk7XHJcbiAgICB9LFxyXG4gICAgX3NldENvbG9yVG9JbnB1dDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUpO1xyXG4gICAgICAgIHRoaXMuJHNlbGVjdC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCB2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgX3NldENvbG9yOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHZhciAkY29sb3IgPSB0aGlzLmRvbShlLnRhcmdldCk7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gJGNvbG9yLmF0dHIoJ2RhdGEtdmFsdWUnKTtcclxuXHJcbiAgICAgICAgdGhpcy4kcGlja2VyLmF0dHIoJ2RhdGEtY3VycmVudC1jb2xvcicsIHZhbHVlKTtcclxuICAgICAgICB0aGlzLiRwaWNrZXIuZmluZCgnLicgKyB0aGlzLnByZWZpeCArICctY29sb3InKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgJGNvbG9yLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICAkY29sb3IuY3NzKCdjb2xvcicsIHRoaXMuYXBwLmNvbG9yLmludmVydCh2YWx1ZSkpO1xyXG5cclxuICAgICAgICB0aGlzLl9zZXRDb2xvclRvSW5wdXQodmFsdWUpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zZXR0ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYXBpKHRoaXMuc2V0dGVyLCB0aGlzLnN0YWNrKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9oYXMoJ3BpY2tlcicpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLnBvcHVwLmNsb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgc3RhY2sgPSB0aGlzLmFwcC5wb3B1cC5nZXRTdGFjaygpO1xyXG4gICAgICAgICAgICBzdGFjay5jb2xsYXBzZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBfY2hhbmdlQ29sb3JTZWxlY3Q6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoZS50eXBlID09PSAna2V5ZG93bicgJiYgZS53aGljaCAhPT0gMTMpIHJldHVybjtcclxuICAgICAgICBpZiAoZS50eXBlID09PSAna2V5ZG93bicpIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy4kaW5wdXQudmFsKCk7XHJcbiAgICAgICAgdmFsdWUgPSB0aGlzLmFwcC5jb2xvci5ub3JtYWxpemUodmFsdWUpO1xyXG5cclxuICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUpO1xyXG4gICAgICAgIHRoaXMuJHNlbGVjdC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCB2YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnBpY2tlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBpY2tlci5zZXRDb2xvcih2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiRjaGVja2JveC5hdHRyKCdjaGVja2VkJywgKHZhbHVlICE9PSAnJykpO1xyXG4gICAgfSxcclxuICAgIF9jaGFuZ2VDb2xvclN0YXRlOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuJGNoZWNrYm94LmF0dHIoJ2NoZWNrZWQnKTtcclxuICAgICAgICB2YXIgdmFsdWUgPSAoc3RhdGUpID8gJyNmZmZmZmYnIDogJyc7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgIHRoaXMuYXBwLmFwaSh0aGlzLnNldHRlciwgdGhpcy5zdGFjayk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnY2xhc3MnLCAndG9vbC5pbnB1dCcsIHtcclxuICAgIG1peGluczogWyd0b29sJ10sXHJcbiAgICB0eXBlOiAnaW5wdXQnLFxyXG4gICAgaW5wdXQ6IHtcclxuICAgICAgICB0YWc6ICdpbnB1dCcsXHJcbiAgICAgICAgdHlwZTogJ3RleHQnLFxyXG4gICAgICAgIGNsYXNzbmFtZTogJy1mb3JtLWlucHV0J1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRJbnB1dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kdG9vbC5hcHBlbmQodGhpcy4kaW5wdXQpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2NsYXNzJywgJ3Rvb2wubnVtYmVyJywge1xyXG4gICAgbWl4aW5zOiBbJ3Rvb2wnXSxcclxuICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgaW5wdXQ6IHtcclxuICAgICAgICB0YWc6ICdpbnB1dCcsXHJcbiAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgY2xhc3NuYW1lOiAnLWZvcm0taW5wdXQnXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9idWlsZElucHV0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRpbnB1dC5hdHRyKCdtaW4nLCAwKS5jc3MoJ21heC13aWR0aCcsICc2NXB4Jyk7XHJcbiAgICAgICAgdGhpcy4kdG9vbC5hcHBlbmQodGhpcy4kaW5wdXQpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2NsYXNzJywgJ3Rvb2wuc2VnbWVudCcsIHtcclxuICAgIG1peGluczogWyd0b29sJ10sXHJcbiAgICB0eXBlOiAnc2VnbWVudCcsXHJcbiAgICBpbnB1dDoge1xyXG4gICAgICAgIHRhZzogJ2lucHV0JyxcclxuICAgICAgICB0eXBlOiAnaGlkZGVuJyxcclxuICAgICAgICBjbGFzc25hbWU6ICctZm9ybS1pbnB1dCdcclxuICAgIH0sXHJcbiAgICBzZXRWYWx1ZTogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB0aGlzLiRzZWdtZW50LmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLWZvcm0tc2VnbWVudC1pdGVtJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgIHRoaXMuJHNlZ21lbnQuZmluZCgnW2RhdGEtc2VnbWVudD0nICsgdmFsdWUgKyAnXScpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRJbnB1dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kc2VnbWVudCA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1mb3JtLXNlZ21lbnQnKS5jc3MoJ21heC13aWR0aCcsICcyMDBweCcpO1xyXG5cclxuICAgICAgICB2YXIgc2VnbWVudHMgPSB0aGlzLm9iai5zZWdtZW50cztcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHNlZ21lbnRzKSB7XHJcbiAgICAgICAgICAgIHZhciAkc2VnbWVudCA9IHRoaXMuZG9tKCc8c3Bhbj4nKS5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctZm9ybS1zZWdtZW50LWl0ZW0nKTtcclxuICAgICAgICAgICAgJHNlZ21lbnQuYXR0cignZGF0YS1zZWdtZW50JywgbmFtZSkub24oJ2NsaWNrJywgdGhpcy5fY2F0Y2hTZWdtZW50LmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHNlZ21lbnRzW25hbWVdLmhhc093blByb3BlcnR5KCdpY29uJykpIHtcclxuICAgICAgICAgICAgICAgICRzZWdtZW50Lmh0bWwoc2VnbWVudHNbbmFtZV0uaWNvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2VnbWVudC5hZGRDbGFzcyh0aGlzLnByZWZpeCArICctaWNvbi0nICsgc2VnbWVudHNbbmFtZV0ucHJlZml4ICsgJy0nICsgbmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuJHNlZ21lbnQuYXBwZW5kKCRzZWdtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuJHNlZ21lbnQuYXBwZW5kKHRoaXMuJGlucHV0KTtcclxuICAgICAgICB0aGlzLiR0b29sLmFwcGVuZCh0aGlzLiRzZWdtZW50KTtcclxuICAgIH0sXHJcbiAgICBfY2F0Y2hTZWdtZW50OiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHZhciAkaXRlbSA9IHRoaXMuZG9tKGUudGFyZ2V0KS5jbG9zZXN0KCcuJyArIHRoaXMucHJlZml4ICsgJy1mb3JtLXNlZ21lbnQtaXRlbScpO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9ICRpdGVtLmF0dHIoJ2RhdGEtc2VnbWVudCcpO1xyXG5cclxuICAgICAgICB0aGlzLiRzZWdtZW50LmZpbmQoJy4nICsgdGhpcy5wcmVmaXggKyAnLWZvcm0tc2VnbWVudC1pdGVtJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICRpdGVtLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuICAgICAgICB0aGlzLiRpbnB1dC52YWwodmFsdWUpO1xyXG5cclxuICAgICAgICAvLyBjYWxsIHNldHRlclxyXG4gICAgICAgIHRoaXMuYXBwLmFwaSh0aGlzLnNldHRlciwgdGhpcy5zdGFjayk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnY2xhc3MnLCAndG9vbC5zZWxlY3QnLCB7XHJcbiAgICBtaXhpbnM6IFsndG9vbCddLFxyXG4gICAgdHlwZTogJ3NlbGVjdCcsXHJcbiAgICBpbnB1dDoge1xyXG4gICAgICAgIHRhZzogJ3NlbGVjdCcsXHJcbiAgICAgICAgY2xhc3NuYW1lOiAnLWZvcm0tc2VsZWN0J1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRJbnB1dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZm9yICh2YXIgdmFsdWUgaW4gdGhpcy5vYmoub3B0aW9ucykge1xyXG4gICAgICAgICAgICB2YXIgJG9wdGlvbiA9IHRoaXMuZG9tKCc8b3B0aW9uPicpO1xyXG4gICAgICAgICAgICAkb3B0aW9uLnZhbCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICRvcHRpb24uaHRtbCh0aGlzLmxhbmcucGFyc2UodGhpcy5vYmoub3B0aW9uc1t2YWx1ZV0pKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJGlucHV0LmFwcGVuZCgkb3B0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuJHRvb2wuYXBwZW5kKHRoaXMuJGlucHV0KTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdjbGFzcycsICd0b29sLnRleHRhcmVhJywge1xyXG4gICAgbWl4aW5zOiBbJ3Rvb2wnXSxcclxuICAgIHR5cGU6ICd0ZXh0YXJlYScsXHJcbiAgICBpbnB1dDoge1xyXG4gICAgICAgIHRhZzogJ3RleHRhcmVhJyxcclxuICAgICAgICBjbGFzc25hbWU6ICctZm9ybS10ZXh0YXJlYSdcclxuICAgIH0sXHJcbiAgICBzZXRGb2N1czogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kaW5wdXQuZm9jdXMoKTtcclxuICAgICAgICB0aGlzLiRpbnB1dC5nZXQoKS5zZXRTZWxlY3Rpb25SYW5nZSgwLCAwKTtcclxuICAgICAgICB0aGlzLiRpbnB1dC5zY3JvbGxUb3AoMCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIHByaXZhdGVcclxuICAgIF9idWlsZElucHV0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5faGFzKCdyb3dzJykpIHtcclxuICAgICAgICAgICAgdGhpcy4kaW5wdXQuYXR0cigncm93cycsIHRoaXMuX2dldCgncm93cycpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy4kaW5wdXQuYXR0cignZGF0YS1ncmFtbV9lZGl0b3InLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy4kdG9vbC5hcHBlbmQodGhpcy4kaW5wdXQpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2Jsb2NrJywgJ2Jsb2NrLnBhcmFncmFwaCcsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ3BhcmFncmFwaCcsXHJcbiAgICBlZGl0YWJsZTogdHJ1ZSxcclxuICAgIHRvb2xiYXI6IHtcclxuICAgICAgICBhZGQ6IHsgY29tbWFuZDogJ2FkZGJhci5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5hZGQgIyMnIH0sXHJcbiAgICAgICAgZm9ybWF0OiB7IGNvbW1hbmQ6ICdmb3JtYXQucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZm9ybWF0ICMjJ30sXHJcbiAgICAgICAgYWxpZ25tZW50OiB7IGNvbW1hbmQ6ICdibG9jay5wb3B1cCcsIG9ic2VydmVyOiAnYmxvY2sub2JzZXJ2ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5hbGlnbiAjIycgfSxcclxuICAgICAgICBib2xkOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLmJvbGQgIyMnLCBwYXJhbXM6IHsgdGFnOiAnYicgfSB9LFxyXG4gICAgICAgIGl0YWxpYzogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5pdGFsaWMgIyMnLCBwYXJhbXM6IHsgdGFnOiAnaScgfSB9LFxyXG4gICAgICAgIGRlbGV0ZWQ6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZGVsZXRlZCAjIycsIHBhcmFtczogeyB0YWc6ICdkZWwnIH0gfSxcclxuICAgICAgICBsaW5rOiB7IGNvbW1hbmQ6ICdsaW5rLnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmxpbmsgIyMnIH1cclxuXHJcbiAgICB9LFxyXG4gICAgY29udHJvbDoge1xyXG4gICAgICAgIHRyYXNoOiB7IGNvbW1hbmQ6ICdibG9jay5yZW1vdmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZGVsZXRlICMjJyB9LFxyXG4gICAgICAgIGR1cGxpY2F0ZTogeyBjb21tYW5kOiAnYmxvY2suZHVwbGljYXRlJywgdGl0bGU6ICcjIyBidXR0b25zLmR1cGxpY2F0ZSAjIycgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPHA+Jyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGhhbmRsZVxyXG4gICAgaGFuZGxlRW50ZXI6IGZ1bmN0aW9uKGUsIGtleSwgZXZlbnQpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIGVtcHR5IG9yIGVuZFxyXG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSB8fCB0aGlzLmlzQ2FyZXRFbmQoKSkge1xyXG4gICAgICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLmFwcC5ibG9jay5jcmVhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNsb25lIHBhcmFncmFwaCBzdHlsZXNcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdHMuY2xlYW4uZW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIGNsb25lID0gdGhpcy5kdXBsaWNhdGVFbXB0eSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0cy5jbGVhbi5lbnRlcmlubGluZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY2xvbmUgaW5saW5lXHJcbiAgICAgICAgICAgICAgICB2YXIgaW5saW5lID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldElubGluZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlubGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbG9uZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlubGluZXMgPSB0aGlzLmFwcC5lbGVtZW50LmdldEFsbElubGluZXMoaW5saW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlubGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZCA9IGlubGluZXNbaV0uY2xvbmVOb2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZWQuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xvbmVkSW5saW5lID0gaW5saW5lc1tpXS5jbG9uZU5vZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZElubGluZS5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lZC5hcHBlbmRDaGlsZChjbG9uZWRJbmxpbmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjbG9uZSA9IHRoaXMuYXBwLmJsb2NrLmNyZWF0ZShjbG9uZWQub3V0ZXJIVE1MKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pbnNlcnQoeyBpbnN0YW5jZTogY2xvbmUsIHBvc2l0aW9uOiAnYWZ0ZXInLCBjYXJldDogJ3N0YXJ0JyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc3RhcnRcclxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzQ2FyZXRTdGFydCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHsgaW5zdGFuY2U6IHRoaXMuZHVwbGljYXRlRW1wdHkoKSwgcG9zaXRpb246ICdiZWZvcmUnIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBtaWRkbGVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyICRibG9jayA9IHRoaXMuZ2V0QmxvY2soKTtcclxuICAgICAgICAgICAgdmFyICRwYXJ0ID0gdGhpcy5hcHAuZWxlbWVudC5zcGxpdCgkYmxvY2spO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQoJHBhcnQsICdzdGFydCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnYmxvY2snLCAnYmxvY2sudGV4dCcsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ3RleHQnLFxyXG4gICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgYWRkOiB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWRkICMjJyB9LFxyXG4gICAgICAgIGZvcm1hdDogeyBjb21tYW5kOiAnZm9ybWF0LnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmZvcm1hdCAjIyd9LFxyXG4gICAgICAgIGFsaWdubWVudDogeyBjb21tYW5kOiAnYmxvY2sucG9wdXAnLCBvYnNlcnZlcjogJ2Jsb2NrLm9ic2VydmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWxpZ24gIyMnIH0sXHJcbiAgICAgICAgYm9sZDogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5ib2xkICMjJywgcGFyYW1zOiB7IHRhZzogJ2InIH0gfSxcclxuICAgICAgICBpdGFsaWM6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuaXRhbGljICMjJywgcGFyYW1zOiB7IHRhZzogJ2knIH0gfSxcclxuICAgICAgICBkZWxldGVkOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLmRlbGV0ZWQgIyMnLCBwYXJhbXM6IHsgdGFnOiAnZGVsJyB9IH0sXHJcbiAgICAgICAgbGluazogeyBjb21tYW5kOiAnbGluay5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5saW5rICMjJyB9XHJcbiAgICB9LFxyXG4gICAgY29udHJvbDoge1xyXG4gICAgICAgIHRyYXNoOiB7IGNvbW1hbmQ6ICdibG9jay5yZW1vdmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZGVsZXRlICMjJyB9LFxyXG4gICAgICAgIGR1cGxpY2F0ZTogeyBjb21tYW5kOiAnYmxvY2suZHVwbGljYXRlJywgdGl0bGU6ICcjIyBidXR0b25zLmR1cGxpY2F0ZSAjIycgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPGRpdj4nKS5hZGRDbGFzcyh0aGlzLm9wdHMudGV4dC5jbGFzc25hbWUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBoYW5kbGVcclxuICAgIGhhbmRsZUVudGVyOiBmdW5jdGlvbihlLCBrZXksIGV2ZW50KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnRCcmVha2xpbmUoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdibG9jaycsICdibG9jay5hZGRyZXNzJywge1xyXG4gICAgbWl4aW5zOiBbJ2Jsb2NrJ10sXHJcbiAgICB0eXBlOiAnYWRkcmVzcycsXHJcbiAgICBlZGl0YWJsZTogdHJ1ZSxcclxuICAgIHRvb2xiYXI6IHtcclxuICAgICAgICBhZGQ6IHsgY29tbWFuZDogJ2FkZGJhci5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5hZGQgIyMnIH0sXHJcbiAgICAgICAgZm9ybWF0OiB7IGNvbW1hbmQ6ICdmb3JtYXQucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZm9ybWF0ICMjJ30sXHJcbiAgICAgICAgYWxpZ25tZW50OiB7IGNvbW1hbmQ6ICdibG9jay5wb3B1cCcsIG9ic2VydmVyOiAnYmxvY2sub2JzZXJ2ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5hbGlnbiAjIycgfSxcclxuICAgICAgICBib2xkOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLmJvbGQgIyMnLCBwYXJhbXM6IHsgdGFnOiAnYicgfSB9LFxyXG4gICAgICAgIGl0YWxpYzogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5pdGFsaWMgIyMnLCBwYXJhbXM6IHsgdGFnOiAnaScgfSB9LFxyXG4gICAgICAgIGRlbGV0ZWQ6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZGVsZXRlZCAjIycsIHBhcmFtczogeyB0YWc6ICdkZWwnIH0gfSxcclxuICAgICAgICBsaW5rOiB7IGNvbW1hbmQ6ICdsaW5rLnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmxpbmsgIyMnIH1cclxuICAgIH0sXHJcbiAgICBjb250cm9sOiB7XHJcbiAgICAgICAgdHJhc2g6IHsgY29tbWFuZDogJ2Jsb2NrLnJlbW92ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kZWxldGUgIyMnIH0sXHJcbiAgICAgICAgZHVwbGljYXRlOiB7IGNvbW1hbmQ6ICdibG9jay5kdXBsaWNhdGUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZHVwbGljYXRlICMjJyAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKCc8YWRkcmVzcz4nKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gaGFuZGxlXHJcbiAgICBoYW5kbGVFbnRlcjogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8gZW1wdHkgb3IgZW5kICBjaGVjayBhZGRyZXNzIGV4aXRcclxuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkgfHwgdGhpcy5pc0NhcmV0RW5kKCkpIHtcclxuICAgICAgICAgICAgdmFyICRibG9jayA9IHRoaXMuZ2V0QmxvY2soKTtcclxuICAgICAgICAgICAgdmFyICRub2RlcyA9ICRibG9jay5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB2YXIgbGVuID0gJG5vZGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyICRsYXN0ID0gJG5vZGVzLmVxKGxlbi0xKTtcclxuICAgICAgICAgICAgdmFyICRsYXN0UHJldiA9ICRub2Rlcy5lcShsZW4tMik7XHJcbiAgICAgICAgICAgIHZhciBodG1sID0gJGJsb2NrLmh0bWwoKS50cmltKCk7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLmFwcC51dGlscy5yZW1vdmVJbnZpc2libGVDaGFycyhodG1sKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChodG1sLnNlYXJjaCgvPGJyXFxzP1xcLz8+PGJyXFxzP1xcLz8+JC8pICE9PSAtMSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBlbXB0eVxyXG4gICAgICAgICAgICAgICAgJGxhc3RQcmV2LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgJGxhc3QucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaW5zZXJ0XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydEVtcHR5KHsgcG9zaXRpb246ICdhZnRlcicsIGNhcmV0OiAnc3RhcnQnIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgLy8gaW5zZXJ0IGJyXHJcbiAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLmluc2VydEJyZWFrbGluZSgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2Jsb2NrJywgJ2Jsb2NrLmNlbGwnLCB7XHJcbiAgICBtaXhpbnM6IFsnYmxvY2snXSxcclxuICAgIHR5cGU6ICdjZWxsJyxcclxuICAgIGVkaXRhYmxlOiB0cnVlLFxyXG4gICAgdG9vbGJhcjoge1xyXG4gICAgICAgIHRhYmxlOiB7IGNvbW1hbmQ6ICd0YWJsZS5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy50YWJsZSAjIyd9LFxyXG4gICAgICAgIGFsaWdubWVudDogeyBjb21tYW5kOiAnYmxvY2sucG9wdXAnLCBvYnNlcnZlcjogJ2Jsb2NrLm9ic2VydmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWxpZ24gIyMnIH0sXHJcbiAgICAgICAgYm9sZDogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5ib2xkICMjJywgcGFyYW1zOiB7IHRhZzogJ2InIH0gfSxcclxuICAgICAgICBpdGFsaWM6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuaXRhbGljICMjJywgcGFyYW1zOiB7IHRhZzogJ2knIH0gfSxcclxuICAgICAgICBkZWxldGVkOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLmRlbGV0ZWQgIyMnLCBwYXJhbXM6IHsgdGFnOiAnZGVsJyB9IH0sXHJcbiAgICAgICAgbGluazogeyBjb21tYW5kOiAnbGluay5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5saW5rICMjJyB9LFxyXG4gICAgICAgIHR1bmU6IHsgY29tbWFuZDogJ3RhYmxlLmNlbGxTZXR0aW5nJywgdGl0bGU6ICcjIyBidXR0b25zLnNldHRpbmdzICMjJyB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20oJzx0ZD4nKTtcclxuICAgIH0sXHJcbiAgICBnZXROZXh0Q2VsbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmdldE5leHQoKTtcclxuICAgICAgICBpZiAoIWNlbGwpIHtcclxuICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMuZ2V0UGFyZW50KCdyb3cnKTtcclxuICAgICAgICAgICAgaWYgKHJvdykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5leHRSb3cgPSByb3cuZ2V0TmV4dFJvdygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsID0gbmV4dFJvdy5nZXRDaGlsZEZpcnN0KCdjZWxsJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjZWxsO1xyXG4gICAgfSxcclxuICAgIGdldFByZXZDZWxsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgY2VsbCA9IHRoaXMuZ2V0UHJldigpO1xyXG4gICAgICAgIGlmICghY2VsbCkge1xyXG4gICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5nZXRQYXJlbnQoJ3JvdycpO1xyXG4gICAgICAgICAgICBpZiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJldlJvdyA9IHJvdy5nZXRQcmV2Um93KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJldlJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwgPSBwcmV2Um93LmdldENoaWxkTGFzdCgnY2VsbCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2VsbDtcclxuICAgIH0sXHJcbiAgICBnZXRXaWR0aDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy4kYmxvY2suYXR0cignd2lkdGgnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuICh2YWx1ZSkgPyB2YWx1ZSA6ICcnO1xyXG4gICAgfSxcclxuICAgIGdldE5vd3JhcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy4kYmxvY2suY3NzKCd3aGl0ZS1zcGFjZScpO1xyXG5cclxuICAgICAgICByZXR1cm4gKHZhbHVlID09PSAnbm93cmFwJyk7XHJcbiAgICB9LFxyXG4gICAgc2V0V2lkdGg6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fZWFjaENlbGwoZnVuY3Rpb24oJGNlbGwpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgJGNlbGwucmVtb3ZlQXR0cignd2lkdGgnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRjZWxsLmF0dHIoJ3dpZHRoJywgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgc2V0Tm93cmFwOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2VhY2hDZWxsKGZ1bmN0aW9uKCRjZWxsKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlKSA/ICdub3dyYXAnIDogJyc7XHJcbiAgICAgICAgICAgICRjZWxsLmNzcygnd2hpdGUtc3BhY2UnLCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGhhbmRsZVxyXG4gICAgaGFuZGxlQXJyb3c6IGZ1bmN0aW9uKGUsIGtleSwgZXZlbnQpIHtcclxuICAgICAgICB2YXIgcGFyZW50SW5zdGFuY2U7XHJcbiAgICAgICAgaWYgKGV2ZW50LmlzKCd1cC1sZWZ0JykgJiYgdGhpcy5pc0NhcmV0U3RhcnQoKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciBwcmV2ID0gdGhpcy5nZXRQcmV2Q2VsbCgpO1xyXG4gICAgICAgICAgICBpZiAocHJldikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHByZXYsICdlbmQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudEluc3RhbmNlID0gdGhpcy5nZXRQYXJlbnQoJ3RhYmxlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQocGFyZW50SW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZXZlbnQuaXMoJ2Rvd24tcmlnaHQnKSAmJiB0aGlzLmlzQ2FyZXRFbmQoKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy5nZXROZXh0Q2VsbCgpO1xyXG4gICAgICAgICAgICBpZiAobmV4dCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KG5leHQsICdzdGFydCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50SW5zdGFuY2UgPSB0aGlzLmdldFBhcmVudCgndGFibGUnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwYXJlbnRJbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoYW5kbGVUYWI6IGZ1bmN0aW9uKGUsIGtleSwgZXZlbnQpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5nZXROZXh0Q2VsbCgpO1xyXG4gICAgICAgIGlmIChuZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChuZXh0LCAnc3RhcnQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJlbnRJbnN0YW5jZSA9IHRoaXMuZ2V0UGFyZW50KCd0YWJsZScpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQocGFyZW50SW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG4gICAgaGFuZGxlRW50ZXI6IGZ1bmN0aW9uKGUsIGtleSwgZXZlbnQpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLmluc2VydEJyZWFrbGluZSgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfZWFjaENlbGw6IGZ1bmN0aW9uKGZ1bmMpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICAgIHZhciAkdGFibGUgPSB0aGlzLiRibG9jay5jbG9zZXN0KCd0YWJsZScpO1xyXG5cclxuICAgICAgICAvLyBpbmRleFxyXG4gICAgICAgIHRoaXMuJGJsb2NrLmNsb3Nlc3QoJ3RyJykuZmluZCgndGQsIHRoJykuZWFjaChmdW5jdGlvbigkbm9kZSwgaSkge1xyXG5cdFx0XHRpZiAoJG5vZGUuZ2V0KCkgPT09IHRoaXMuJGJsb2NrLmdldCgpKSBpbmRleCA9IGk7XHJcblx0XHR9LmJpbmQodGhpcykpO1xyXG5cclxuXHRcdCR0YWJsZS5maW5kKCd0cicpLmVhY2goZnVuY3Rpb24oJG5vZGUpIHtcclxuXHRcdFx0dmFyIGNlbGwgPSAkbm9kZS5maW5kKCd0ZCwgdGgnKS5nZXQoaW5kZXgpO1xyXG5cdFx0XHR2YXIgJGNlbGwgPSB0aGlzLmRvbShjZWxsKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmMoJGNlbGwpO1xyXG4gICAgICAgICAgICAvL2NvbnRlbnQuY2FjaGVCbG9ja3NTdHlsZSgkY2VsbCk7XHJcblxyXG5cdFx0fS5iaW5kKHRoaXMpKVxyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2Jsb2NrJywgJ2Jsb2NrLmNvZGUnLCB7XHJcbiAgICBtaXhpbnM6IFsnYmxvY2snXSxcclxuICAgIHR5cGU6ICdjb2RlJyxcclxuICAgIGVkaXRhYmxlOiB0cnVlLFxyXG4gICAgdG9vbGJhcjoge1xyXG4gICAgICAgIGFkZDogeyBjb21tYW5kOiAnYWRkYmFyLnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmFkZCAjIycgfVxyXG4gICAgfSxcclxuICAgIGNvbnRyb2w6IHtcclxuICAgICAgICB0cmFzaDogeyBjb21tYW5kOiAnYmxvY2sucmVtb3ZlJywgdGl0bGU6ICcjIyBidXR0b25zLmRlbGV0ZSAjIycgfSxcclxuICAgICAgICBkdXBsaWNhdGU6IHsgY29tbWFuZDogJ2Jsb2NrLmR1cGxpY2F0ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kdXBsaWNhdGUgIyMnICB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20odGhpcy5vcHRzLmNvZGUudGVtcGxhdGUpO1xyXG4gICAgfSxcclxuICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9idWlsZENhcHRpb24oKTtcclxuICAgICAgICB0aGlzLl9idWlsZEl0ZW1zKCdmaWdjYXB0aW9uJywgJ2ZpZ2NhcHRpb24nKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gaGFuZGxlXHJcbiAgICBoYW5kbGVBcnJvdzogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGlmIChldmVudC5pcygnZG93bi1yaWdodCcpICYmIHRoaXMuaXNDYXJldEVuZCgpKSB7XHJcbiAgICAgICAgICAgIHZhciBuZXh0ID0gdGhpcy5nZXROZXh0KCk7XHJcbiAgICAgICAgICAgIGlmIChuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQobmV4dCwgJ3N0YXJ0Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnRFbXB0eUJsb2NrKHsgcG9zaXRpb246ICdhZnRlcicsIGNhcmV0OiAnc3RhcnQnIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaGFuZGxlVGFiOiBmdW5jdGlvbihlLCBrZXksIGV2ZW50KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHZhciBudW0gPSB0aGlzLm9wdHMuY29kZS5zcGFjZXM7XHJcbiAgICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShBcnJheShudW0gKyAxKS5qb2luKCcgJykpO1xyXG4gICAgICAgIHRoaXMuYXBwLmluc2VydGlvbi5pbnNlcnROb2RlKG5vZGUsICdlbmQnKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVFbnRlcjogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgdmFyIGxhc3QgPSB0aGlzLiRibG9jay5odG1sKCkuc2VhcmNoKC9cXG4kLyk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0NhcmV0RW5kKCkgJiYgbGFzdCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuaW5zZXJ0aW9uLmluc2VydE5ld2xpbmUoJ2FmdGVyJywgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5pbnNlcnRpb24uaW5zZXJ0TmV3bGluZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdibG9jaycsICdibG9jay5jb2x1bW4nLCB7XHJcbiAgICBtaXhpbnM6IFsnYmxvY2snXSxcclxuICAgIHR5cGU6ICdjb2x1bW4nLFxyXG4gICAgbmVzdGVkOiB0cnVlLFxyXG4gICAgZW1wdGlhYmxlOiB0cnVlLFxyXG4gICAgdG9vbGJhcjoge1xyXG4gICAgICAgIGFsaWdubWVudDogeyBjb21tYW5kOiAnYmxvY2sucG9wdXAnLCBvYnNlcnZlcjogJ2Jsb2NrLm9ic2VydmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWxpZ24gIyMnIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPGRpdj4nKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdibG9jaycsICdibG9jay5kbGlzdCcsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ2RsaXN0JyxcclxuICAgIGVkaXRhYmxlOiB0cnVlLFxyXG4gICAgdG9vbGJhcjoge1xyXG4gICAgICAgIGFkZDogeyBjb21tYW5kOiAnYWRkYmFyLnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmFkZCAjIycgfSxcclxuICAgICAgICBmb3JtYXQ6IHsgY29tbWFuZDogJ2Zvcm1hdC5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5mb3JtYXQgIyMnfSxcclxuICAgICAgICBhbGlnbm1lbnQ6IHsgY29tbWFuZDogJ2Jsb2NrLnBvcHVwJywgb2JzZXJ2ZXI6ICdibG9jay5vYnNlcnZlJywgdGl0bGU6ICcjIyBidXR0b25zLmFsaWduICMjJyB9LFxyXG4gICAgICAgIGJvbGQ6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYm9sZCAjIycsIHBhcmFtczogeyB0YWc6ICdiJyB9IH0sXHJcbiAgICAgICAgaXRhbGljOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLml0YWxpYyAjIycsIHBhcmFtczogeyB0YWc6ICdpJyB9IH0sXHJcbiAgICAgICAgZGVsZXRlZDogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5kZWxldGVkICMjJywgcGFyYW1zOiB7IHRhZzogJ2RlbCcgfSB9LFxyXG4gICAgICAgIGxpbms6IHsgY29tbWFuZDogJ2xpbmsucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMubGluayAjIycgfVxyXG4gICAgfSxcclxuICAgIGNvbnRyb2w6IHtcclxuICAgICAgICB0cmFzaDogeyBjb21tYW5kOiAnYmxvY2sucmVtb3ZlJywgdGl0bGU6ICcjIyBidXR0b25zLmRlbGV0ZSAjIycgfSxcclxuICAgICAgICBkdXBsaWNhdGU6IHsgY29tbWFuZDogJ2Jsb2NrLmR1cGxpY2F0ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kdXBsaWNhdGUgIyMnICB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20oJzxkbD4nKTtcclxuICAgIH0sXHJcbiAgICBnZXRQbGFpblRleHQ6IGZ1bmN0aW9uKGtlZXBicikge1xyXG4gICAgICAgIHZhciBodG1sID0gJyc7XHJcbiAgICAgICAgdmFyICRpdGVtcyA9IHRoaXMuJGJsb2NrLmZpbmQoJ2R0LCBkZCcpO1xyXG4gICAgICAgIHZhciBsZW4gPSAkaXRlbXMubGVuZ3RoO1xyXG5cclxuICAgICAgICAkaXRlbXMuZWFjaChmdW5jdGlvbigkbm9kZSwgaSkge1xyXG4gICAgICAgICAgICB2YXIgYnIgPSAoa2VlcGJyKSA/ICc8YnI+JyA6ICcnO1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gbGVuKSBiciA9ICcnO1xyXG5cclxuICAgICAgICAgICAgaHRtbCArPSAkbm9kZS5odG1sKCkgKyBicjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9LFxyXG4gICAgc2V0RW1wdHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGJsb2NrLmh0bWwoJycpO1xyXG5cclxuICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLmRvbSgnPGR0PicpO1xyXG4gICAgICAgIHRoaXMuJGJsb2NrLmFwcGVuZCgkaXRlbSk7XHJcbiAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KCRpdGVtLCAnc3RhcnQnKTtcclxuICAgIH0sXHJcbiAgICBpc0VtcHR5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaHRtbCA9IHRoaXMuJGJsb2NrLmh0bWwoKTtcclxuICAgICAgICBodG1sID0gdGhpcy5fY2xlYW5FbXB0eShodG1sKTtcclxuXHJcbiAgICAgICAgdmFyICRpdGVtcyA9IHRoaXMuJGJsb2NrLmZpbmQoJ2R0LCBkZCcpO1xyXG4gICAgICAgIGlmICgkaXRlbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSBodG1sLnRyaW0oKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoaHRtbCA9PT0gJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgkaXRlbXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGh0bWwgPSAkaXRlbXMuZXEoMCkuaHRtbCgpO1xyXG4gICAgICAgICAgICBodG1sID0gdGhpcy5fY2xlYW5FbXB0eShodG1sKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAoaHRtbCA9PT0gJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgLy8gaGFuZGxlXHJcbiAgICBoYW5kbGVFbnRlcjogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8gZW1wdHkgb3IgZW5kXHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSgpIHx8IHRoaXMuaXNDYXJldEVuZCgpKSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50SXRlbSA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRCbG9jaygpO1xyXG4gICAgICAgICAgICB2YXIgJGN1cnJlbnRJdGVtID0gdGhpcy5kb20oY3VycmVudEl0ZW0pO1xyXG4gICAgICAgICAgICB2YXIgdGFnID0gY3VycmVudEl0ZW0udGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICB2YXIgaXNJdGVtRW1wdHkgPSB0aGlzLmFwcC5jb250ZW50LmlzRW1wdHlIdG1sKGN1cnJlbnRJdGVtLmlubmVySFRNTCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGFnID09PSAnZHQnICYmIGlzSXRlbUVtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgZW1wdHlcclxuICAgICAgICAgICAgICAgICRjdXJyZW50SXRlbS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnRcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0RW1wdHkoeyBwb3NpdGlvbjogJ2FmdGVyJywgY2FyZXQ6ICdzdGFydCcgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaW5zZXJ0IGR0IG9yIGRkXHJcbiAgICAgICAgICAgIHZhciAkbmV3SXRlbTtcclxuICAgICAgICAgICAgaWYgKHRhZyA9PT0gJ2R0Jykge1xyXG4gICAgICAgICAgICAgICAgJG5ld0l0ZW0gPSB0aGlzLmRvbSgnPGRkPicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJG5ld0l0ZW0gPSB0aGlzLmRvbSgnPGR0PicpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRvbShjdXJyZW50SXRlbSkuYWZ0ZXIoJG5ld0l0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJG5ld0l0ZW0sICdzdGFydCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzdGFydFxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNDYXJldFN0YXJ0KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG1pZGRsZVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5pbnNlcnRpb24uaW5zZXJ0QnJlYWtsaW5lKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdibG9jaycsICdibG9jay5lbWJlZCcsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ2VtYmVkJyxcclxuICAgIHBhcnNlcjoge1xyXG4gICAgICAgIHVucGFyc2U6IGZ1bmN0aW9uKCRub2RlKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2RlID0gZGVjb2RlVVJJKCRub2RlLmF0dHIoJ2RhdGEtZW1iZWQtY29kZScpKTtcclxuICAgICAgICAgICAgdmFyICRyZXNwb25zaXZlID0gJG5vZGUuZmluZCgnLicgKyB0aGlzLm9wdHMuZW1iZWQucmVzcG9uc2l2ZSk7XHJcbiAgICAgICAgICAgIHZhciAkZWwgPSAkbm9kZS5maW5kKCdmaWdjYXB0aW9uJyk7XHJcbiAgICAgICAgICAgIHZhciAkZmlnY2FwdGlvbjtcclxuICAgICAgICAgICAgaWYgKCRlbC5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICRmaWdjYXB0aW9uID0gJGVsLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAkZWwucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgkcmVzcG9uc2l2ZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICRub2RlLmh0bWwoY29kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkcmVzcG9uc2l2ZS5odG1sKGNvZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoJGZpZ2NhcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICRub2RlLmFwcGVuZCgkZmlnY2FwdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRub2RlLnJlbW92ZUF0dHIoJ2RhdGEtZW1iZWQtY29kZScpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgYWRkOiB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWRkICMjJyB9LFxyXG4gICAgICAgIG91dHNldDogeyBjb21tYW5kOiAnYmxvY2sucG9wdXAnLCBvYnNlcnZlcjogJ2Jsb2NrLm9ic2VydmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMub3V0c2V0ICMjJ30sXHJcbiAgICAgICAgZW1iZWQ6IHsgY29tbWFuZDogJ2VtYmVkLmVkaXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZW1iZWQgIyMnIH1cclxuICAgIH0sXHJcbiAgICBjb250cm9sOiB7XHJcbiAgICAgICAgdHJhc2g6IHsgY29tbWFuZDogJ2Jsb2NrLnJlbW92ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kZWxldGUgIyMnIH0sXHJcbiAgICAgICAgZHVwbGljYXRlOiB7IGNvbW1hbmQ6ICdibG9jay5kdXBsaWNhdGUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZHVwbGljYXRlICMjJyAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKCc8ZmlndXJlPicpO1xyXG4gICAgfSxcclxuICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9idWlsZENhcHRpb24oKTtcclxuICAgICAgICB0aGlzLl9idWlsZEl0ZW1zKCdmaWdjYXB0aW9uJywgJ2ZpZ2NhcHRpb24nKTtcclxuICAgICAgICB0aGlzLl9idWlsZEVtYmVkQ29kZSgpO1xyXG4gICAgfSxcclxuICAgIGFkZFJlc3BvbnNpdmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkcmVzcG9uc2l2ZSA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMub3B0cy5lbWJlZC5yZXNwb25zaXZlKTtcclxuICAgICAgICB2YXIgJGZpZ2NhcHRpb24gPSB0aGlzLiRibG9jay5maW5kKCdmaWdjYXB0aW9uJyk7XHJcblxyXG4gICAgICAgIHZhciAkY2xvbmVGaWdjYXB0aW9uID0gJGZpZ2NhcHRpb24uY2xvbmUoKTtcclxuICAgICAgICB2YXIgaHRtbCA9IHRoaXMuZ2V0RW1iZWRDb2RlKCk7XHJcblxyXG4gICAgICAgICRmaWdjYXB0aW9uLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAkcmVzcG9uc2l2ZS5odG1sKGh0bWwpO1xyXG4gICAgICAgIHRoaXMuJGJsb2NrLmh0bWwoJycpLmFwcGVuZCgkcmVzcG9uc2l2ZSk7XHJcblxyXG4gICAgICAgIGlmICgkY2xvbmVGaWdjYXB0aW9uLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5jcmVhdGUoJ2Jsb2NrLmZpZ2NhcHRpb24nLCAkY2xvbmVGaWdjYXB0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy4kYmxvY2suYXBwZW5kKCRjbG9uZUZpZ2NhcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZW1vdmVSZXNwb25zaXZlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLiRibG9jay5maW5kKCcuJyArIHRoaXMub3B0cy5lbWJlZC5yZXNwb25zaXZlKS51bndyYXAoKTtcclxuICAgIH0sXHJcbiAgICBnZXRFbWJlZENvZGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBkZWNvZGVVUkkodGhpcy4kYmxvY2suYXR0cignZGF0YS1lbWJlZC1jb2RlJykpO1xyXG4gICAgfSxcclxuICAgIGlzUmVzcG9uc2l2ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLiRibG9jay5maW5kKCcuJyArIHRoaXMub3B0cy5lbWJlZC5yZXNwb25zaXZlKS5sZW5ndGggIT09IDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YXRlXHJcbiAgICBfYnVpbGRFbWJlZENvZGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkY2xvbmUgPSB0aGlzLiRibG9jay5jbG9uZSgpO1xyXG4gICAgICAgICRjbG9uZS5maW5kKCcuJyArIHRoaXMub3B0cy5lbWJlZC5yZXNwb25zaXZlKS51bndyYXAoKTtcclxuICAgICAgICAkY2xvbmUuZmluZCgnZmlnY2FwdGlvbicpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICB2YXIgY29kZSA9ICRjbG9uZS5odG1sKCkudHJpbSgpO1xyXG4gICAgICAgIHRoaXMuJGJsb2NrLmF0dHIoJ2RhdGEtZW1iZWQtY29kZScsIGVuY29kZVVSSShjb2RlKSk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnYmxvY2snLCAnYmxvY2suZmlnY2FwdGlvbicsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ2ZpZ2NhcHRpb24nLFxyXG4gICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgYWxpZ25tZW50OiB7IGNvbW1hbmQ6ICdibG9jay5wb3B1cCcsIG9ic2VydmVyOiAnYmxvY2sub2JzZXJ2ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5hbGlnbiAjIycgfSxcclxuICAgICAgICBib2xkOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLmJvbGQgIyMnLCBwYXJhbXM6IHsgdGFnOiAnYicgfSB9LFxyXG4gICAgICAgIGl0YWxpYzogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5pdGFsaWMgIyMnLCBwYXJhbXM6IHsgdGFnOiAnaScgfSB9LFxyXG4gICAgICAgIGRlbGV0ZWQ6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZGVsZXRlZCAjIycsIHBhcmFtczogeyB0YWc6ICdkZWwnIH0gfSxcclxuICAgICAgICBsaW5rOiB7IGNvbW1hbmQ6ICdsaW5rLnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmxpbmsgIyMnIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPGZpZ2NhcHRpb24+Jyk7XHJcbiAgICB9LFxyXG4gICAgZ2V0RmlndXJlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kYmxvY2suY2xvc2VzdCgnZmlndXJlJykuZGF0YWdldCgnaW5zdGFuY2UnKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gaGFuZGxlXHJcbiAgICBoYW5kbGVBcnJvdzogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGlmICgoZXZlbnQuaXMoJ3VwLWxlZnQnKSAmJiB0aGlzLmlzQ2FyZXRTdGFydCgpKSB8fCAoZXZlbnQuaXMoJ2Rvd24tcmlnaHQnKSAmJiB0aGlzLmlzQ2FyZXRFbmQoKSkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50SW5zdGFuY2UgPSB0aGlzLmdldEZpZ3VyZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQocGFyZW50SW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaGFuZGxlVGFiOiBmdW5jdGlvbihlLCBrZXksIGV2ZW50KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHZhciBwYXJlbnRJbnN0YW5jZSA9IHRoaXMuZ2V0RmlndXJlKCk7XHJcbiAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHBhcmVudEluc3RhbmNlKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVFbnRlcjogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8gZW1wdHkgb3IgZW5kXHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSgpIHx8IHRoaXMuaXNDYXJldEVuZCgpIHx8IHRoaXMuaXNDYXJldFN0YXJ0KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG1pZGRsZVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5pbnNlcnRpb24uaW5zZXJ0QnJlYWtsaW5lKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdibG9jaycsICdibG9jay5ncmlkJywge1xyXG4gICAgbWl4aW5zOiBbJ2Jsb2NrJ10sXHJcbiAgICB0eXBlOiAnZ3JpZCcsXHJcbiAgICBuZXN0ZWQ6IHRydWUsXHJcbiAgICBwYXJzZXI6IHtcclxuICAgICAgICB1bnBhcnNlOiBmdW5jdGlvbigkbm9kZSkge1xyXG4gICAgICAgICAgICAkbm9kZS5yZW1vdmVDbGFzcyh0aGlzLnByZWZpeCArICctZ3JpZC1vdmVybGF5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRvb2xiYXI6IHtcclxuICAgICAgICBhZGQ6IHsgY29tbWFuZDogJ2FkZGJhci5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5hZGQgIyMnIH0sXHJcbiAgICAgICAgdmFsaWduOiB7IGNvbW1hbmQ6ICdibG9jay5wb3B1cCcsIG9ic2VydmVyOiAnYmxvY2sub2JzZXJ2ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy52YWxpZ24gIyMnIH1cclxuICAgIH0sXHJcbiAgICBjb250cm9sOiB7XHJcbiAgICAgICAgdHJhc2g6IHsgY29tbWFuZDogJ2Jsb2NrLnJlbW92ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kZWxldGUgIyMnIH0sXHJcbiAgICAgICAgZHVwbGljYXRlOiB7IGNvbW1hbmQ6ICdibG9jay5kdXBsaWNhdGUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZHVwbGljYXRlICMjJyAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRibG9jayA9IHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMub3B0cy5ncmlkLmNsYXNzbmFtZSk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0cy5ncmlkLmNsYXNzZXMgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICRibG9jay5hZGRDbGFzcyh0aGlzLm9wdHMuZ3JpZC5jbGFzc2VzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAkYmxvY2s7XHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2J1aWxkT3ZlcmxheSgpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBwcml2YWVcclxuICAgIF9idWlsZE92ZXJsYXk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdHMuZ3JpZCAmJiB0aGlzLm9wdHMuZ3JpZC5vdmVybGF5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGJsb2NrLmFkZENsYXNzKHRoaXMucHJlZml4ICsgJy1ncmlkLW92ZXJsYXknKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnYmxvY2snLCAnYmxvY2suaGVhZGluZycsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ2hlYWRpbmcnLFxyXG4gICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgYWRkOiB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWRkICMjJyB9LFxyXG4gICAgICAgIGZvcm1hdDogeyBjb21tYW5kOiAnZm9ybWF0LnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmZvcm1hdCAjIyd9LFxyXG4gICAgICAgIGFsaWdubWVudDogeyBjb21tYW5kOiAnYmxvY2sucG9wdXAnLCBvYnNlcnZlcjogJ2Jsb2NrLm9ic2VydmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWxpZ24gIyMnIH0sXHJcbiAgICAgICAgYm9sZDogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5ib2xkICMjJywgcGFyYW1zOiB7IHRhZzogJ2InIH0gfSxcclxuICAgICAgICBpdGFsaWM6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuaXRhbGljICMjJywgcGFyYW1zOiB7IHRhZzogJ2knIH0gfSxcclxuICAgICAgICBkZWxldGVkOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLmRlbGV0ZWQgIyMnLCBwYXJhbXM6IHsgdGFnOiAnZGVsJyB9IH0sXHJcbiAgICAgICAgbGluazogeyBjb21tYW5kOiAnbGluay5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5saW5rICMjJyB9XHJcbiAgICB9LFxyXG4gICAgY29udHJvbDoge1xyXG4gICAgICAgIHRyYXNoOiB7IGNvbW1hbmQ6ICdibG9jay5yZW1vdmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZGVsZXRlICMjJyB9LFxyXG4gICAgICAgIGR1cGxpY2F0ZTogeyBjb21tYW5kOiAnYmxvY2suZHVwbGljYXRlJywgdGl0bGU6ICcjIyBidXR0b25zLmR1cGxpY2F0ZSAjIycgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPGgyPicpO1xyXG4gICAgfSxcclxuICAgIGdldFRpdGxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdGl0bGVzID0gdGhpcy5sYW5nLmdldCgnaGVhZGluZ3MnKTtcclxuICAgICAgICB2YXIgdGFnID0gdGhpcy5nZXRUYWcoKTtcclxuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLiRibG9jay5hdHRyKCdkYXRhLXRpdGxlJyk7XHJcblxyXG4gICAgICAgIHJldHVybiAodHlwZW9mIHRpdGxlc1t0YWddICE9PSAndW5kZWZpbmVkJykgPyB0aXRsZXNbdGFnXSA6IHRpdGxlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBoYW5kbGVcclxuICAgIGhhbmRsZUVudGVyOiBmdW5jdGlvbihlLCBrZXksIGV2ZW50KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAvLyBlbXB0eSBvciBlbmRcclxuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkgfHwgdGhpcy5pc0NhcmV0RW5kKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnNlcnRFbXB0eSh7IHBvc2l0aW9uOiAnYWZ0ZXInLCBjYXJldDogJ3N0YXJ0JyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc3RhcnRcclxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzQ2FyZXRTdGFydCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHsgaW5zdGFuY2U6IHRoaXMuZHVwbGljYXRlRW1wdHkoKSwgcG9zaXRpb246ICdiZWZvcmUnIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBtaWRkbGVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyICRibG9jayA9IHRoaXMuZ2V0QmxvY2soKTtcclxuICAgICAgICAgICAgdmFyICRwYXJ0ID0gdGhpcy5hcHAuZWxlbWVudC5zcGxpdCgkYmxvY2spO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5ibG9jay5zZXQoJHBhcnQsICdzdGFydCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnYmxvY2snLCAnYmxvY2suaW1hZ2UnLCB7XHJcbiAgICBtaXhpbnM6IFsnYmxvY2snXSxcclxuICAgIHR5cGU6ICdpbWFnZScsXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgYWRkOiB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWRkICMjJyB9LFxyXG4gICAgICAgIG91dHNldDogeyBjb21tYW5kOiAnYmxvY2sucG9wdXAnLCBvYnNlcnZlcjogJ2Jsb2NrLm9ic2VydmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMub3V0c2V0ICMjJ30sXHJcbiAgICAgICAgaW1hZ2U6IHsgY29tbWFuZDogJ2ltYWdlLmVkaXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuc2V0dGluZ3MgIyMnIH1cclxuICAgIH0sXHJcbiAgICBjb250cm9sOiB7XHJcbiAgICAgICAgdHJhc2g6IHsgY29tbWFuZDogJ2Jsb2NrLnJlbW92ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kZWxldGUgIyMnIH0sXHJcbiAgICAgICAgZHVwbGljYXRlOiB7IGNvbW1hbmQ6ICdibG9jay5kdXBsaWNhdGUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZHVwbGljYXRlICMjJyAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKCc8JyArIHRoaXMub3B0cy5pbWFnZS50YWcgKyAnPicpO1xyXG4gICAgfSxcclxuICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9idWlsZENhcHRpb24oKTtcclxuICAgICAgICB0aGlzLl9idWlsZEl0ZW1zKCdmaWdjYXB0aW9uJywgJ2ZpZ2NhcHRpb24nKTtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhID0ge1xyXG4gICAgICAgICAgICAnYWx0JzogeyBnZXR0ZXI6ICdnZXRBbHQnLCBzZXR0ZXI6ICdzZXRBbHQnIH0sXHJcbiAgICAgICAgICAgICdsaW5rJzogeyBnZXR0ZXI6ICdnZXRMaW5rVXJsJywgc2V0dGVyOiAnc2V0TGlua1VybCcgfSxcclxuICAgICAgICAgICAgJ3RhcmdldCc6IHsgZ2V0dGVyOiAnZ2V0VGFyZ2V0Jywgc2V0dGVyOiAnc2V0VGFyZ2V0JyB9LFxyXG4gICAgICAgICAgICAnY2FwdGlvbic6IHsgZ2V0dGVyOiAnZ2V0Q2FwdGlvbicsIHNldHRlcjogJ3NldENhcHRpb24nIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBnZXRJbWFnZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJGJsb2NrLmZpbmQoJ2ltZycpLmVxKDApO1xyXG4gICAgfSxcclxuICAgIGdldFNyYzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRpbWcgPSB0aGlzLmdldEltYWdlKCk7XHJcblxyXG4gICAgICAgIHJldHVybiAkaW1nLmF0dHIoJ3NyYycpO1xyXG4gICAgfSxcclxuICAgIGdldExpbms6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkbGluayA9IHRoaXMuZ2V0SW1hZ2UoKS5wYXJlbnQoKTtcclxuICAgICAgICAkbGluayA9ICgkbGluay5nZXQoKS50YWdOYW1lICE9PSAnQScpID8gZmFsc2UgOiAkbGluaztcclxuXHJcbiAgICAgICAgcmV0dXJuICRsaW5rO1xyXG4gICAgfSxcclxuICAgIGdldEFsdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyICRpbWcgPSB0aGlzLmdldEltYWdlKCk7XHJcbiAgICAgICAgdmFyIGFsdCA9ICRpbWcuYXR0cignYWx0Jyk7XHJcblxyXG4gICAgICAgIHJldHVybiAoYWx0KSA/IGFsdCA6ICcnO1xyXG4gICAgfSxcclxuICAgIGdldExpbmtVcmw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkbGluayA9IHRoaXMuZ2V0TGluaygpO1xyXG4gICAgICAgIHJldHVybiAoJGxpbmspID8gJGxpbmsuYXR0cignaHJlZicpIDogJyc7XHJcbiAgICB9LFxyXG4gICAgZ2V0VGFyZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgJGxpbmsgPSB0aGlzLmdldExpbmsoKTtcclxuICAgICAgICByZXR1cm4gKCRsaW5rKSA/ICRsaW5rLmF0dHIoJ3RhcmdldCcpIDogdGhpcy5vcHRzLmltYWdlLm5ld3RhYjtcclxuICAgIH0sXHJcbiAgICBzZXRBbHQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyICRpbWcgPSB0aGlzLmdldEltYWdlKCk7XHJcbiAgICAgICAgJGltZy5hdHRyKCdhbHQnLCB2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgc2V0VGFyZ2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHZhciAkbGluayA9IHRoaXMuZ2V0TGluaygpO1xyXG4gICAgICAgIGlmICghJGxpbmspIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlKSAkbGluay5hdHRyKCd0YXJnZXQnLCAnX2JsYW5rJyk7XHJcbiAgICAgICAgZWxzZSAkbGluay5yZW1vdmVBdHRyKCd0YXJnZXQnKTtcclxuICAgIH0sXHJcbiAgICBzZXRMaW5rVXJsOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHZhciAkbGluayA9IHRoaXMuZ2V0TGluaygpO1xyXG5cclxuICAgICAgICBpZiAodmFsdWUgPT09ICcnICYmICRsaW5rKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTGluaygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCEkbGluaykge1xyXG4gICAgICAgICAgICB2YXIgJGltZyA9IHRoaXMuZ2V0SW1hZ2UoKTtcclxuICAgICAgICAgICAgJGxpbmsgPSB0aGlzLmRvbSgnPGE+Jyk7XHJcbiAgICAgICAgICAgICRpbWcud3JhcCgkbGluayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkbGluay5hdHRyKCdocmVmJywgdmFsdWUpO1xyXG4gICAgfSxcclxuICAgIHNldEltYWdlOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgdmFyICRpbWcgPSB0aGlzLmdldEltYWdlKCk7XHJcbiAgICAgICAgJGltZy5hdHRyKCdzcmMnLCBkYXRhLnVybCk7XHJcbiAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2lkJykpICRpbWcuYXR0cignZGF0YS1pbWFnZScsIGRhdGEuaWQpO1xyXG4gICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCcyeCcpKSAkaW1nLmF0dHIoJ3NyY3NldCcsIGRhdGFbJzJ4J10gKyAnIDJ4Jyk7XHJcblxyXG4gICAgICAgICRpbWcub25lKCdsb2FkJywgdGhpcy5hcHAuZWRpdG9yLmFkanVzdEhlaWdodC5iaW5kKHRoaXMuYXBwLmVkaXRvcikpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZUxpbms6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkbGluayA9IHRoaXMuZ2V0TGluaygpO1xyXG4gICAgICAgIGlmICgkbGluaykge1xyXG4gICAgICAgICAgICAkbGluay51bndyYXAoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnYmxvY2snLCAnYmxvY2subGF5ZXInLCB7XHJcbiAgICBtaXhpbnM6IFsnYmxvY2snXSxcclxuICAgIHR5cGU6ICdsYXllcicsXHJcbiAgICBuZXN0ZWQ6IHRydWUsXHJcbiAgICBlbXB0aWFibGU6IHRydWUsXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgYWRkOiB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWRkICMjJyB9XHJcbiAgICB9LFxyXG4gICAgY29udHJvbDoge1xyXG4gICAgICAgIHRyYXNoOiB7IGNvbW1hbmQ6ICdibG9jay5yZW1vdmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZGVsZXRlICMjJyB9LFxyXG4gICAgICAgIGR1cGxpY2F0ZTogeyBjb21tYW5kOiAnYmxvY2suZHVwbGljYXRlJywgdGl0bGU6ICcjIyBidXR0b25zLmR1cGxpY2F0ZSAjIycgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSh0aGlzLm9wdHMubGF5ZXIudGVtcGxhdGUpO1xyXG4gICAgfSxcclxuICAgIGdldFRpdGxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLiRibG9jay5hdHRyKCdkYXRhLXRpdGxlJyk7XHJcbiAgICAgICAgcmV0dXJuIHRpdGxlIHx8IHRoaXMuX2dldE5hbWVCeVRhZygpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2Jsb2NrJywgJ2Jsb2NrLmxpbmUnLCB7XHJcbiAgICBtaXhpbnM6IFsnYmxvY2snXSxcclxuICAgIHR5cGU6ICdsaW5lJyxcclxuICAgIHRvb2xiYXI6IHtcclxuICAgICAgICBhZGQ6IHsgY29tbWFuZDogJ2FkZGJhci5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5hZGQgIyMnIH1cclxuICAgIH0sXHJcbiAgICBjb250cm9sOiB7XHJcbiAgICAgICAgdHJhc2g6IHsgY29tbWFuZDogJ2Jsb2NrLnJlbW92ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kZWxldGUgIyMnIH0sXHJcbiAgICAgICAgZHVwbGljYXRlOiB7IGNvbW1hbmQ6ICdibG9jay5kdXBsaWNhdGUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZHVwbGljYXRlICMjJyAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKCc8aHI+Jyk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnYmxvY2snLCAnYmxvY2subGlzdCcsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ2xpc3QnLFxyXG4gICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgYWRkOiB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWRkICMjJyB9LFxyXG4gICAgICAgIGZvcm1hdDogeyBjb21tYW5kOiAnZm9ybWF0LnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmZvcm1hdCAjIyd9LFxyXG4gICAgICAgIGFsaWdubWVudDogeyBjb21tYW5kOiAnYmxvY2sucG9wdXAnLCBvYnNlcnZlcjogJ2Jsb2NrLm9ic2VydmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWxpZ24gIyMnIH0sXHJcbiAgICAgICAgYm9sZDogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5ib2xkICMjJywgcGFyYW1zOiB7IHRhZzogJ2InIH0gfSxcclxuICAgICAgICBpdGFsaWM6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuaXRhbGljICMjJywgcGFyYW1zOiB7IHRhZzogJ2knIH0gfSxcclxuICAgICAgICBkZWxldGVkOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLmRlbGV0ZWQgIyMnLCBwYXJhbXM6IHsgdGFnOiAnZGVsJyB9IH0sXHJcbiAgICAgICAgb3V0ZGVudDogeyBjb21tYW5kOiAnbGlzdC5vdXRkZW50JywgdGl0bGU6ICcjIyBidXR0b25zLm91dGRlbnQgIyMnIH0sXHJcbiAgICAgICAgaW5kZW50OiB7IGNvbW1hbmQ6ICdsaXN0LmluZGVudCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5pbmRlbnQgIyMnIH0sXHJcbiAgICAgICAgbGluazogeyBjb21tYW5kOiAnbGluay5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5saW5rICMjJyB9XHJcbiAgICB9LFxyXG4gICAgY29udHJvbDoge1xyXG4gICAgICAgIHRyYXNoOiB7IGNvbW1hbmQ6ICdibG9jay5yZW1vdmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZGVsZXRlICMjJyB9LFxyXG4gICAgICAgIGR1cGxpY2F0ZTogeyBjb21tYW5kOiAnYmxvY2suZHVwbGljYXRlJywgdGl0bGU6ICcjIyBidXR0b25zLmR1cGxpY2F0ZSAjIycgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPHVsPicpO1xyXG4gICAgfSxcclxuICAgIHVucGFyc2U6IGZ1bmN0aW9uKCRlbCkge1xyXG4gICAgICAgIHRoaXMuYXBwLmNvbnRlbnQudW5maXhMaXN0TWFyZ2luKCRlbCk7XHJcbiAgICB9LFxyXG4gICAgc2V0RW1wdHk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuJGJsb2NrLmh0bWwoJycpO1xyXG5cclxuICAgICAgICB2YXIgJGl0ZW0gPSB0aGlzLmRvbSgnPGxpPicpO1xyXG4gICAgICAgIHRoaXMuJGJsb2NrLmFwcGVuZCgkaXRlbSk7XHJcbiAgICAgICAgdGhpcy5hcHAuY2FyZXQuc2V0KCRpdGVtLCAnc3RhcnQnKTtcclxuICAgIH0sXHJcbiAgICBpc0VtcHR5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaHRtbCA9IHRoaXMuJGJsb2NrLmh0bWwoKTtcclxuICAgICAgICBodG1sID0gdGhpcy5fY2xlYW5FbXB0eShodG1sKTtcclxuXHJcbiAgICAgICAgdmFyICRpdGVtcyA9IHRoaXMuJGJsb2NrLmZpbmQoJ2xpJyk7XHJcbiAgICAgICAgaWYgKCRpdGVtcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgaHRtbCA9IGh0bWwudHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChodG1sID09PSAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCRpdGVtcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgaHRtbCA9ICRpdGVtcy5lcSgwKS5odG1sKCk7XHJcbiAgICAgICAgICAgIGh0bWwgPSB0aGlzLl9jbGVhbkVtcHR5KGh0bWwpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIChodG1sID09PSAnJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBoYW5kbGVcclxuICAgIGhhbmRsZVRhYjogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIHZhciBjdXJyZW50SXRlbSA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRCbG9jaygpO1xyXG4gICAgICAgIHZhciBpc0l0ZW1TdGFydCA9IHRoaXMuYXBwLmNhcmV0LmlzKGN1cnJlbnRJdGVtLCAnc3RhcnQnKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNDYXJldFN0YXJ0KCkgfHwgdGhpcy5pc0NhcmV0RW5kKCkpIHtcclxuICAgICAgICAgICAgdmFyIG5leHQgPSB0aGlzLmdldE5leHQoKTtcclxuICAgICAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChuZXh0LCAnc3RhcnQnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy50YWIuc3BhY2VzICYmICFpc0l0ZW1TdGFydCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmxpc3QuaW5kZW50KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoYW5kbGVFbnRlcjogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgJG5ld0l0ZW0sICRjdXJyZW50SXRlbSwgY3VycmVudEl0ZW0sIGlzSXRlbUVtcHR5O1xyXG5cclxuICAgICAgICAvLyBlbXB0eSBvciBlbmRcclxuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkgfHwgdGhpcy5pc0NhcmV0RW5kKCkpIHtcclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnRJdGVtID0gdGhpcy5hcHAuc2VsZWN0aW9uLmdldEJsb2NrKCk7XHJcbiAgICAgICAgICAgICRjdXJyZW50SXRlbSA9IHRoaXMuZG9tKGN1cnJlbnRJdGVtKTtcclxuICAgICAgICAgICAgaXNJdGVtRW1wdHkgPSB0aGlzLmFwcC5jb250ZW50LmlzRW1wdHlIdG1sKGN1cnJlbnRJdGVtLmlubmVySFRNTCk7XHJcblxyXG4gICAgICAgICAgICAvLyBsaXN0IGV4aXRcclxuICAgICAgICAgICAgaWYgKGlzSXRlbUVtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgZW1wdHlcclxuICAgICAgICAgICAgICAgICRjdXJyZW50SXRlbS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnRcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0RW1wdHkoeyBwb3NpdGlvbjogJ2FmdGVyJywgY2FyZXQ6ICdzdGFydCcgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaW5zZXJ0IGxpXHJcbiAgICAgICAgICAgICRuZXdJdGVtID0gdGhpcy5kb20oJzxsaT4nKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmVsZW1lbnQuY2xvbmVBdHRycyhjdXJyZW50SXRlbSwgJG5ld0l0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLmRvbShjdXJyZW50SXRlbSkuYWZ0ZXIoJG5ld0l0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJG5ld0l0ZW0sICdzdGFydCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzdGFydFxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNDYXJldFN0YXJ0KCkpIHtcclxuICAgICAgICAgICAgJG5ld0l0ZW0gPSB0aGlzLmRvbSgnPGxpPicpO1xyXG4gICAgICAgICAgICBjdXJyZW50SXRlbSA9IHRoaXMuYXBwLnNlbGVjdGlvbi5nZXRCbG9jaygpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hcHAuZWxlbWVudC5jbG9uZUF0dHJzKGN1cnJlbnRJdGVtLCAkbmV3SXRlbSk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tKGN1cnJlbnRJdGVtKS5iZWZvcmUoJG5ld0l0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBtaWRkbGVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY3VycmVudEl0ZW0gPSB0aGlzLmFwcC5zZWxlY3Rpb24uZ2V0QmxvY2soKTtcclxuICAgICAgICAgICAgJGN1cnJlbnRJdGVtID0gdGhpcy5kb20oY3VycmVudEl0ZW0pO1xyXG4gICAgICAgICAgICBpc0l0ZW1FbXB0eSA9IHRoaXMuYXBwLmNvbnRlbnQuaXNFbXB0eUh0bWwoY3VycmVudEl0ZW0uaW5uZXJIVE1MKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBpc0l0ZW1TdGFydCA9IHRoaXMuYXBwLmNhcmV0LmlzKGN1cnJlbnRJdGVtLCAnc3RhcnQnKTtcclxuICAgICAgICAgICAgdmFyIGlzSXRlbUVuZCA9IHRoaXMuYXBwLmNhcmV0LmlzKGN1cnJlbnRJdGVtLCAnZW5kJywgWyd1bCcsICdvbCddKTtcclxuXHJcbiAgICAgICAgICAgICRuZXdJdGVtID0gdGhpcy5kb20oJzxsaT4nKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuZWxlbWVudC5jbG9uZUF0dHJzKGN1cnJlbnRJdGVtLCAkbmV3SXRlbSk7XHJcblxyXG4gICAgICAgICAgICAvLyBlbXB0eVxyXG4gICAgICAgICAgICBpZiAoaXNJdGVtRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICRjdXJyZW50SXRlbS5hZnRlcigkbmV3SXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJG5ld0l0ZW0sICdzdGFydCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHN0YXJ0XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzSXRlbVN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAkY3VycmVudEl0ZW0uYmVmb3JlKCRuZXdJdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBlbmRcclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNJdGVtRW5kKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGxpc3RJbnNpZGUgPSAkY3VycmVudEl0ZW0uZmluZCgndWwsIG9sJykuZmlyc3QoKTtcclxuICAgICAgICAgICAgICAgIGlmICgkbGlzdEluc2lkZS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkbmV3SXRlbS5hcHBlbmQodGhpcy5hcHAudXRpbHMuY3JlYXRlSW52aXNpYmxlQ2hhcigpKTtcclxuICAgICAgICAgICAgICAgICAgICAkbmV3SXRlbS5hcHBlbmQoJGxpc3RJbnNpZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICRjdXJyZW50SXRlbS5hZnRlcigkbmV3SXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkY3VycmVudEl0ZW0uYWZ0ZXIoJG5ld0l0ZW0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLmNhcmV0LnNldCgkbmV3SXRlbSwgJ3N0YXJ0Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbWlkZGxlXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyICRwYXJ0ID0gdGhpcy5hcHAuZWxlbWVudC5zcGxpdChjdXJyZW50SXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5jYXJldC5zZXQoJHBhcnQsICdzdGFydCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdibG9jaycsICdibG9jay5ub25lZGl0YWJsZScsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ25vbmVkaXRhYmxlJyxcclxuICAgIHRvb2xiYXI6IHtcclxuICAgICAgICBhZGQ6IHsgY29tbWFuZDogJ2FkZGJhci5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5hZGQgIyMnIH1cclxuICAgIH0sXHJcbiAgICBjb250cm9sOiB7XHJcbiAgICAgICAgdHJhc2g6IHsgY29tbWFuZDogJ2Jsb2NrLnJlbW92ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kZWxldGUgIyMnIH0sXHJcbiAgICAgICAgZHVwbGljYXRlOiB7IGNvbW1hbmQ6ICdibG9jay5kdXBsaWNhdGUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZHVwbGljYXRlICMjJyAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKCc8ZGl2PicpLmFkZENsYXNzKHRoaXMub3B0cy5ub25lZGl0YWJsZS5jbGFzc25hbWUpO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2Jsb2NrJywgJ2Jsb2NrLnF1b3RlJywge1xyXG4gICAgbWl4aW5zOiBbJ2Jsb2NrJ10sXHJcbiAgICB0eXBlOiAncXVvdGUnLFxyXG4gICAgdG9vbGJhcjoge1xyXG4gICAgICAgIGFkZDogeyBjb21tYW5kOiAnYWRkYmFyLnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmFkZCAjIycgfVxyXG4gICAgfSxcclxuICAgIGNvbnRyb2w6IHtcclxuICAgICAgICB0cmFzaDogeyBjb21tYW5kOiAnYmxvY2sucmVtb3ZlJywgdGl0bGU6ICcjIyBidXR0b25zLmRlbGV0ZSAjIycgfSxcclxuICAgICAgICBkdXBsaWNhdGU6IHsgY29tbWFuZDogJ2Jsb2NrLmR1cGxpY2F0ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kdXBsaWNhdGUgIyMnICB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20odGhpcy5vcHRzLnF1b3RlLnRlbXBsYXRlKTtcclxuICAgIH0sXHJcbiAgICBidWlsZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRDYXB0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5fYnVpbGRJdGVtcygncCcsICdxdW90ZWl0ZW0nKTtcclxuICAgICAgICB0aGlzLl9idWlsZEl0ZW1zKCdmaWdjYXB0aW9uJywgJ2ZpZ2NhcHRpb24nKTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdibG9jaycsICdibG9jay5xdW90ZWl0ZW0nLCB7XHJcbiAgICBtaXhpbnM6IFsnYmxvY2snXSxcclxuICAgIHR5cGU6ICdxdW90ZWl0ZW0nLFxyXG4gICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgYWxpZ25tZW50OiB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnLCBvYnNlcnZlcjogJ2Jsb2NrLm9ic2VydmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWxpZ24gIyMnIH0sXHJcbiAgICAgICAgYm9sZDogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5ib2xkICMjJywgcGFyYW1zOiB7IHRhZzogJ2InIH0gfSxcclxuICAgICAgICBpdGFsaWM6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuaXRhbGljICMjJywgcGFyYW1zOiB7IHRhZzogJ2knIH0gfSxcclxuICAgICAgICBkZWxldGVkOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLmRlbGV0ZWQgIyMnLCBwYXJhbXM6IHsgdGFnOiAnZGVsJyB9IH0sXHJcbiAgICAgICAgbGluazogeyBjb21tYW5kOiAnbGluay5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5saW5rICMjJyB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20oJzxwPicpO1xyXG4gICAgfSxcclxuICAgIGdldEJsb2NrcXVvdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiRibG9jay5jbG9zZXN0KCdibG9ja3F1b3RlJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGhhbmRsZVxyXG4gICAgaGFuZGxlQXJyb3c6IGZ1bmN0aW9uKGUsIGtleSwgZXZlbnQpIHtcclxuICAgICAgICB2YXIgJGJsb2NrcXVvdGUgPSB0aGlzLmdldEJsb2NrcXVvdGUoKTtcclxuICAgICAgICBpZiAoJGJsb2NrcXVvdGUubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBpc1N0YXJ0ID0gdGhpcy5hcHAuY2FyZXQuaXMoJGJsb2NrcXVvdGUsICdzdGFydCcpO1xyXG4gICAgICAgIHZhciBpc0VuZCA9IHRoaXMuYXBwLmNhcmV0LmlzKCRibG9ja3F1b3RlLCAnZW5kJyk7XHJcblxyXG4gICAgICAgIGlmICgoZXZlbnQuaXMoJ3VwLWxlZnQnKSAmJiBpc1N0YXJ0KSB8fCAoZXZlbnQuaXMoJ2Rvd24tcmlnaHQnKSAmJiBpc0VuZCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50SW5zdGFuY2UgPSB0aGlzLmdldFBhcmVudCgncXVvdGUnKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHBhcmVudEluc3RhbmNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGhhbmRsZVRhYjogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgbmV4dCA9IHRoaXMuZ2V0TmV4dCgpO1xyXG4gICAgICAgIGlmIChuZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChuZXh0LCAnc3RhcnQnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcXVvdGUgPSB0aGlzLmdldFBhcmVudCgncXVvdGUnKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHF1b3RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGhhbmRsZUVudGVyOiBmdW5jdGlvbihlLCBrZXksIGV2ZW50KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAvLyBwcmVwYXJlIG5ldyBpbnN0YW5jZVxyXG4gICAgICAgIHZhciBuZXdJbnN0YW5jZSA9IHRoaXMuYXBwLmNyZWF0ZSgnYmxvY2sucXVvdGVpdGVtJyk7XHJcblxyXG4gICAgICAgIC8vIGVtcHR5IG9yIGVuZFxyXG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSB8fCB0aGlzLmlzQ2FyZXRFbmQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmluc2VydCh7IGluc3RhbmNlOiBuZXdJbnN0YW5jZSwgcG9zaXRpb246ICdhZnRlcicsIGNhcmV0OiAnc3RhcnQnIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzdGFydFxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaXNDYXJldFN0YXJ0KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnNlcnQoeyBpbnN0YW5jZTogbmV3SW5zdGFuY2UsIHBvc2l0aW9uOiAnYmVmb3JlJyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbWlkZGxlXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciAkYmxvY2sgPSB0aGlzLmdldEJsb2NrKCk7XHJcbiAgICAgICAgICAgIHZhciAkcGFydCA9IHRoaXMuYXBwLmVsZW1lbnQuc3BsaXQoJGJsb2NrKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KCRwYXJ0LCAnc3RhcnQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2Jsb2NrJywgJ2Jsb2NrLnJvdycsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ3JvdycsXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgdGFibGU6IHsgY29tbWFuZDogJ3RhYmxlLnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLnRhYmxlICMjJ31cclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSgnPHRyPicpO1xyXG4gICAgfSxcclxuICAgIGdldE5leHRSb3c6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByb3cgPSB0aGlzLmdldE5leHQoKTtcclxuICAgICAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGJsb2NrLnBhcmVudCgpO1xyXG4gICAgICAgIGlmICghcm93ICYmICRwYXJlbnQuZ2V0KCkudGFnTmFtZSAhPT0gJ1RBQkxFJykge1xyXG4gICAgICAgICAgICByb3cgPSAkcGFyZW50Lm5leHRFbGVtZW50KCkuZmluZCgndHInKS5maXJzdCgpLmRhdGFnZXQoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcm93O1xyXG4gICAgfSxcclxuICAgIGdldFByZXZSb3c6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByb3cgPSB0aGlzLmdldFByZXYoKTtcclxuICAgICAgICB2YXIgJHBhcmVudCA9IHRoaXMuJGJsb2NrLnBhcmVudCgpO1xyXG4gICAgICAgIGlmICghcm93ICYmICRwYXJlbnQuZ2V0KCkudGFnTmFtZSAhPT0gJ1RBQkxFJykge1xyXG4gICAgICAgICAgICByb3cgPSAkcGFyZW50LnByZXZFbGVtZW50KCkuZmluZCgndHInKS5sYXN0KCkuZGF0YWdldCgnaW5zdGFuY2UnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByb3c7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGhhbmRsZVxyXG4gICAgaGFuZGxlRGVsZXRlOiBmdW5jdGlvbihlLCBrZXksIGV2ZW50KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZUFycm93OiBmdW5jdGlvbihlLCBrZXksIGV2ZW50KSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpZiAoZXZlbnQuaXMoJ3VwLWxlZnQnKSkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50SW5zdGFuY2UgPSB0aGlzLmdldFBhcmVudCgndGFibGUnKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KHBhcmVudEluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBjZWxsSW5zdGFuY2UgPSB0aGlzLmdldENoaWxkRmlyc3QoJ2NlbGwnKTtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KGNlbGxJbnN0YW5jZSwgJ3N0YXJ0Jyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVUYWI6IGZ1bmN0aW9uKGUsIGtleSwgZXZlbnQpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHZhciBuZXh0ID0gdGhpcy5nZXROZXh0Um93KCk7XHJcbiAgICAgICAgaWYgKG5leHQpIHtcclxuICAgICAgICAgICAgdGhpcy5hcHAuYmxvY2suc2V0KG5leHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHBhcmVudEluc3RhbmNlID0gdGhpcy5nZXRQYXJlbnQoJ3RhYmxlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwLmJsb2NrLnNldChwYXJlbnRJbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVFbnRlcjogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufSk7XHJcbkFydGljbGVFZGl0b3IuYWRkKCdibG9jaycsICdibG9jay50YWJsZScsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ3RhYmxlJyxcclxuICAgIHRvb2xiYXI6IHtcclxuICAgICAgICBhZGQ6IHsgY29tbWFuZDogJ2FkZGJhci5wb3B1cCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5hZGQgIyMnIH0sXHJcbiAgICAgICAgdGFibGU6IHsgY29tbWFuZDogJ3RhYmxlLnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLnRhYmxlICMjJ31cclxuICAgIH0sXHJcbiAgICBjb250cm9sOiB7XHJcbiAgICAgICAgdHJhc2g6IHsgY29tbWFuZDogJ2Jsb2NrLnJlbW92ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kZWxldGUgIyMnIH0sXHJcbiAgICAgICAgZHVwbGljYXRlOiB7IGNvbW1hbmQ6ICdibG9jay5kdXBsaWNhdGUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZHVwbGljYXRlICMjJyAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKHRoaXMub3B0cy50YWJsZS50ZW1wbGF0ZSk7XHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX2J1aWxkSXRlbXMoJ3RyJywgJ3JvdycpO1xyXG4gICAgICAgIHRoaXMuX2J1aWxkSXRlbXMoJ3RkLCB0aCcsICdjZWxsJyk7XHJcbiAgICB9LFxyXG4gICAgZ2V0Rmlyc3RDZWxsOiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgJGNlbGwgPSB0aGlzLiRibG9jay5maW5kKCd0aCwgdGQnKS5maXJzdCgpO1xyXG4gICAgICAgIGlmICgkY2VsbC5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuICRjZWxsLmRhdGFnZXQoJ2luc3RhbmNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuQXJ0aWNsZUVkaXRvci5hZGQoJ2Jsb2NrJywgJ2Jsb2NrLnZhcmlhYmxlJywge1xyXG4gICAgbWl4aW5zOiBbJ2Jsb2NrJ10sXHJcbiAgICB0eXBlOiAndmFyaWFibGUnLFxyXG4gICAgZWRpdGFibGU6IGZhbHNlLFxyXG4gICAgaW5saW5lOiB0cnVlLFxyXG4gICAgdG9vbGJhcjoge1xyXG4gICAgICAgIGFkZDogeyBjb21tYW5kOiAnYWRkYmFyLnBvcHVwJywgdGl0bGU6ICcjIyBidXR0b25zLmFkZCAjIycgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9tKCc8c3Bhbj4nKS5hZGRDbGFzcyh0aGlzLm9wdHMudmFyaWFibGUuY2xhc3NuYW1lKTtcclxuICAgIH0sXHJcbiAgICBidWlsZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy4kYmxvY2suYWRkQ2xhc3ModGhpcy5vcHRzLnZhcmlhYmxlLmNsYXNzbmFtZSk7XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnYmxvY2snLCAnYmxvY2suZm9ybScsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ2Zvcm0nLFxyXG4gICAgY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb20oJzxmb3JtPicpO1xyXG4gICAgfSxcclxuICAgIGNvbnRyb2w6IHtcclxuICAgICAgICB0cmFzaDogeyBjb21tYW5kOiAnYmxvY2sucmVtb3ZlJywgdGl0bGU6ICcjIyBidXR0b25zLmRlbGV0ZSAjIycgfSxcclxuICAgICAgICBkdXBsaWNhdGU6IHsgY29tbWFuZDogJ2Jsb2NrLmR1cGxpY2F0ZScsIHRpdGxlOiAnIyMgYnV0dG9ucy5kdXBsaWNhdGUgIyMnICB9XHJcbiAgICB9XHJcbn0pO1xyXG5BcnRpY2xlRWRpdG9yLmFkZCgnYmxvY2snLCAnYmxvY2suY2FyZCcsIHtcclxuICAgIG1peGluczogWydibG9jayddLFxyXG4gICAgdHlwZTogJ2NhcmQnLFxyXG4gICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgYWRkOiB7IGNvbW1hbmQ6ICdhZGRiYXIucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYWRkICMjJyB9LFxyXG4gICAgICAgIGJvbGQ6IHsgY29tbWFuZDogJ2lubGluZS5zZXQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuYm9sZCAjIycsIHBhcmFtczogeyB0YWc6ICdiJyB9IH0sXHJcbiAgICAgICAgaXRhbGljOiB7IGNvbW1hbmQ6ICdpbmxpbmUuc2V0JywgdGl0bGU6ICcjIyBidXR0b25zLml0YWxpYyAjIycsIHBhcmFtczogeyB0YWc6ICdpJyB9IH0sXHJcbiAgICAgICAgZGVsZXRlZDogeyBjb21tYW5kOiAnaW5saW5lLnNldCcsIHRpdGxlOiAnIyMgYnV0dG9ucy5kZWxldGVkICMjJywgcGFyYW1zOiB7IHRhZzogJ2RlbCcgfSB9LFxyXG4gICAgICAgIGxpbms6IHsgY29tbWFuZDogJ2xpbmsucG9wdXAnLCB0aXRsZTogJyMjIGJ1dHRvbnMubGluayAjIycgfSxcclxuICAgICAgICBpbWFnZTogeyBjb21tYW5kOiAnaW1hZ2UuZWRpdENhcmQnLCB0aXRsZTogJyMjIGJ1dHRvbnMuc2V0dGluZ3MgIyMnLCBvYnNlcnZlcjogJ2Jsb2NrLm9ic2VydmVDYXJkJyB9XHJcbiAgICB9LFxyXG4gICAgY29udHJvbDoge1xyXG4gICAgICAgIHRyYXNoOiB7IGNvbW1hbmQ6ICdibG9jay5yZW1vdmUnLCB0aXRsZTogJyMjIGJ1dHRvbnMuZGVsZXRlICMjJyB9LFxyXG4gICAgICAgIGR1cGxpY2F0ZTogeyBjb21tYW5kOiAnYmxvY2suZHVwbGljYXRlJywgdGl0bGU6ICcjIyBidXR0b25zLmR1cGxpY2F0ZSAjIycgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvbSh0aGlzLm9wdHMuY2FyZC50ZW1wbGF0ZSk7XHJcbiAgICB9LFxyXG4gICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IHtcclxuICAgICAgICAgICAgJ2FsdCc6IHsgZ2V0dGVyOiAnZ2V0QWx0Jywgc2V0dGVyOiAnc2V0QWx0JyB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBoYXNJbWFnZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLiRibG9jay5maW5kKCdpbWcnKS5sZW5ndGggIT09IDApO1xyXG4gICAgfSxcclxuICAgIGdldEltYWdlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kYmxvY2suZmluZCgnaW1nJykuZXEoMCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0QWx0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgJGltZyA9IHRoaXMuZ2V0SW1hZ2UoKTtcclxuICAgICAgICB2YXIgYWx0ID0gJGltZy5hdHRyKCdhbHQnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChhbHQpID8gYWx0IDogJyc7XHJcbiAgICB9LFxyXG4gICAgc2V0QWx0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHZhciAkaW1nID0gdGhpcy5nZXRJbWFnZSgpO1xyXG4gICAgICAgICRpbWcuYXR0cignYWx0JywgdmFsdWUpO1xyXG4gICAgfSxcclxuICAgIHNldEltYWdlOiBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgdmFyICRpbWcgPSB0aGlzLmdldEltYWdlKCk7XHJcbiAgICAgICAgJGltZy5hdHRyKCdzcmMnLCBkYXRhLnVybCk7XHJcbiAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcclxuICAgICAgICAgICAgJGltZy5hdHRyKCdkYXRhLWltYWdlJywgZGF0YS5pZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkaW1nLm9uZSgnbG9hZCcsIHRoaXMuYXBwLmVkaXRvci5hZGp1c3RIZWlnaHQuYmluZCh0aGlzLmFwcC5lZGl0b3IpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gaGFuZGxlXHJcbiAgICBoYW5kbGVFbnRlcjogZnVuY3Rpb24oZSwga2V5LCBldmVudCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLmFwcC5pbnNlcnRpb24uaW5zZXJ0QnJlYWtsaW5lKCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuICAgIHdpbmRvdy5BcnRpY2xlRWRpdG9yID0gQXJ0aWNsZUVkaXRvcjtcclxuXHJcbiAgICAvLyBEYXRhIGF0dHJpYnV0ZSBsb2FkXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIEFydGljbGVFZGl0b3IoJ1tkYXRhLWFydGljbGUtZWRpdG9yXScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRXhwb3J0IGZvciB3ZWJwYWNrXHJcbiAgICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IEFydGljbGVFZGl0b3I7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMuQXJ0aWNsZUVkaXRvciA9IEFydGljbGVFZGl0b3I7XHJcbiAgICB9XHJcbn0oKSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/plugins/article-editor/article-editor.js\n");

/***/ }),

/***/ "./resources/plugins/article-editor/plugins/reorder/reorder.js":
/*!*********************************************************************!*\
  !*** ./resources/plugins/article-editor/plugins/reorder/reorder.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("ArticleEditor.add('plugin', 'reorder', {\n  defaults: {\n    icon: '<svg height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"#000\" fill-rule=\"nonzero\"><path d=\"m13 5c.5522847 0 1 .44771525 1 1 0 .51283584-.3860402.93550716-.8833789.99327227l-.1166211.00672773h-10c-.55228475 0-1-.44771525-1-1 0-.51283584.38604019-.93550716.88337887-.99327227l.11662113-.00672773z\"/><path d=\"m13 9c.5522847 0 1 .44771525 1 1 0 .5128358-.3860402.9355072-.8833789.9932723l-.1166211.0067277h-10c-.55228475 0-1-.4477153-1-1 0-.51283584.38604019-.93550716.88337887-.99327227l.11662113-.00672773z\"/></g></svg>'\n  },\n  subscribe: {\n    'block.set': function blockSet() {\n      this._observe();\n    }\n  },\n  init: function init() {},\n  start: function start() {\n    this.app.control.add('reorder', {\n      icon: this.opts.reorder.icon,\n      position: 'first',\n      blocks: {\n        'all': 'first-level'\n      }\n    });\n  },\n  stop: function stop() {\n    this._stopEvents();\n  },\n  // private\n  _observe: function _observe() {\n    this.$btn = this.app.control.get('reorder');\n    if (this.$btn.length === 0) return;\n    this.$btn.addClass(this.prefix + '-handle');\n\n    this._sortable();\n  },\n  _sortable: function _sortable() {\n    this.instance = this.app.block.get();\n    this.$win = this.app.editor.getWin();\n    this.tolerance = this.$btn.width();\n    this.$clickItem = null;\n    this.$dragItem = null;\n    this.oldY = 0;\n    this.dragging = false;\n    this.$btn.on('mousedown.' + this.prefix + '-reorder touchstart.' + this.prefix + '-reorder', this._press.bind(this));\n  },\n  _press: function _press(e) {\n    var $target = this.dom(e.target).closest('.' + this.prefix + '-button');\n\n    if (e && e.target && $target.hasClass(this.prefix + '-handle')) {\n      e.preventDefault();\n      this.app.observer.trigger = false;\n      this.$win.on('mouseup.' + this.prefix + '-reorder touchend.' + this.prefix + '-reorder', this._release.bind(this));\n      this.$win.on('mousemove.' + this.prefix + '-reorder touchmove.' + this.prefix + '-reorder', this._move.bind(this));\n      var item = this.instance.getBlock().get();\n      this.app.block.unset();\n      this.dragging = true;\n      this.$dragItem = this._makeDragItem(item, e.target);\n    }\n  },\n  _release: function _release(e) {\n    this._stopEvents();\n\n    this.app.observer.trigger = true;\n    this.oldY = 0;\n    this.dragging = false;\n\n    this._trashDragItem();\n\n    this.app.block.set(this.instance);\n  },\n  _move: function _move(e) {\n    if (!this.$dragItem && !this.dragging) {\n      return;\n    }\n\n    e.preventDefault();\n    var framePos = this.app.editor.getFrameRect(); // direction & delta\n\n    var direction = false;\n    var deltaY = this.oldY === 0 ? 0 : this.oldY - e.pageY;\n\n    if (deltaY > 0) {\n      direction = 'up';\n    } else if (deltaY < 0) {\n      direction = 'down';\n    } // env\n\n\n    var tolerance = 40;\n    var isScrollTarget = this.app.scroll.isTarget();\n\n    var isFrameScroll = this._isFrameScroll();\n\n    var docScrollTop = this.app.$doc.scrollTop();\n    var $target = isScrollTarget ? this.app.scroll.getTarget() : this.app.$doc;\n    var scrollTop = isFrameScroll ? this.app.editor.getDoc().scrollTop() : $target.scrollTop(); // move\n\n    this._moveItem(this.$dragItem, deltaY);\n\n    this.oldY = e.pageY; // autoscroll\n\n    var end,\n        startStop = false;\n\n    if (isScrollTarget) {\n      end = $target.height() + $target.offset().top - tolerance;\n    } else if (isFrameScroll) {\n      end = framePos.bottom - tolerance;\n      endWin = this.app.$win.height() + docScrollTop - tolerance;\n\n      if (endWin < end) {\n        end = endWin;\n      }\n    } else {\n      startStop = !this.app.toolbar.isSticky();\n      end = this.app.$win.height() + scrollTop - tolerance;\n    }\n\n    var $toolbar = this.app.container.get('bars');\n    var toolbarHeight = $toolbar.height();\n    var scrollPoint = isFrameScroll ? e.pageY + framePos.top - scrollTop : e.pageY + framePos.top;\n    var start = $toolbar.offset().top + toolbarHeight + tolerance; // scroll up\n\n    if (direction === 'up' && scrollTop > 0 && scrollPoint < start && startStop === false) {\n      this._scroll(-10);\n    } // scroll down\n    else if (direction === 'down' && scrollPoint > end) {\n        this._scroll(10);\n      } // place\n\n\n    var $elms = this.app.editor.getLayout().children();\n    var len = $elms.length;\n\n    for (var b = 0; b < len; b++) {\n      var subItem = $elms.eq(b).get();\n\n      if (subItem === this.$clickItem.get()) {\n        continue;\n      }\n\n      if (this._isOver(this.dom(subItem))) {\n        this._swapItems(subItem);\n      }\n    }\n  },\n  _scroll: function _scroll(step) {\n    var $target = this.app.scroll.isTarget() ? this.app.scroll.getTarget() : this.app.$win;\n\n    var isFrameScroll = this._isFrameScroll();\n\n    if (isFrameScroll) {\n      $target = this.app.editor.getWin();\n    }\n\n    var scrollY = $target.scrollTop();\n    $target.scrollTop(scrollY + step);\n  },\n  _swapItems: function _swapItems(target) {\n    var y = this.$dragItem.offset().top;\n    var $item = this.$clickItem;\n    var $target = this.dom(target);\n    var offset = $target.offset();\n    var height = $target.height() / 2;\n    var func = height + offset.top > y ? 'before' : 'after';\n    $target[func]($item);\n  },\n  _stopEvents: function _stopEvents() {\n    if (this.$win) {\n      this.$btn.off('.' + this.prefix + '-reorder');\n      this.$win.off('.' + this.prefix + '-reorder');\n    }\n  },\n  _isFrameScroll: function _isFrameScroll() {\n    var frameHeight = this.app.editor.getFrame().height();\n    var bodyHeight = this.app.editor.getBody().height();\n    return bodyHeight > frameHeight;\n  },\n  _isOver: function _isOver($target) {\n    var y = this.$dragItem.offset().top;\n    var offset = $target.offset();\n    var height = $target.height();\n    return y > offset.top && y < offset.top + height;\n  },\n  _moveItem: function _moveItem($item, deltaY) {\n    var top = $item.offset().top;\n    top -= deltaY;\n    $item.css('top', top + 'px');\n  },\n  _makeDragItem: function _makeDragItem(item) {\n    this._trashDragItem();\n\n    var $item = this.dom(item);\n    var offset = $item.offset();\n    this.$clickItem = $item;\n    this.$clickItem.addClass(this.prefix + '-drag-active');\n    var $cloned = $item.clone();\n    $cloned.removeClass(this.prefix + '-drag-active ' + this.prefix + '-element-active');\n    var $dragItem = this.dom('<div>').addClass(this.prefix + '-dragging');\n    $dragItem.append($cloned);\n    $dragItem.css({\n      'opacity': 0.95,\n      'position': 'absolute',\n      'z-index': 999,\n      'left': offset.left + 'px',\n      'top': offset.top + 'px',\n      'width': $item.width() + 'px'\n    });\n    this.app.editor.getBody().append($dragItem);\n    return $dragItem;\n  },\n  _trashDragItem: function _trashDragItem() {\n    if (this.$dragItem && this.$clickItem) {\n      this.$clickItem.removeClass(this.prefix + '-drag-active');\n      this.$clickItem = null;\n      this.$dragItem.remove();\n      this.$dragItem = null;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/plugins/article-editor/plugins/reorder/reorder.js\n");

/***/ }),

/***/ 6:
/*!***************************************************************!*\
  !*** multi ./resources/js/dashboard/bundles/bundleProfile.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Users\arxi-\OneDrive\Υπολογιστής\web-developer\laravel-project\lmsdemo\resources\js\dashboard\bundles\bundleProfile.js */"./resources/js/dashboard/bundles/bundleProfile.js");


/***/ })

/******/ });